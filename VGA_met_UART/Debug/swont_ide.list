
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a308  0800a308  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a308  0800a308  0001a308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a310  0800a310  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a310  0800a310  0001a310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a314  0800a314  0001a314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  0800a318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013490  2000013c  0800a454  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200135cc  0800a454  000235cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017437  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a1  00000000  00000000  000375a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003ae48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003c1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000265f5  00000000  00000000  0003d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfe1  00000000  00000000  000639b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d09a4  00000000  00000000  00080996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015133a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005910  00000000  00000000  0015138c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000013c 	.word	0x2000013c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fd4 	.word	0x08009fd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000140 	.word	0x20000140
 80001cc:	08009fd4 	.word	0x08009fd4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006cc:	f000 b974 	b.w	80009b8 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9d08      	ldr	r5, [sp, #32]
 80006ee:	4604      	mov	r4, r0
 80006f0:	468e      	mov	lr, r1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14d      	bne.n	8000792 <__udivmoddi4+0xaa>
 80006f6:	428a      	cmp	r2, r1
 80006f8:	4694      	mov	ip, r2
 80006fa:	d969      	bls.n	80007d0 <__udivmoddi4+0xe8>
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	b152      	cbz	r2, 8000718 <__udivmoddi4+0x30>
 8000702:	fa01 f302 	lsl.w	r3, r1, r2
 8000706:	f1c2 0120 	rsb	r1, r2, #32
 800070a:	fa20 f101 	lsr.w	r1, r0, r1
 800070e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000712:	ea41 0e03 	orr.w	lr, r1, r3
 8000716:	4094      	lsls	r4, r2
 8000718:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800071c:	0c21      	lsrs	r1, r4, #16
 800071e:	fbbe f6f8 	udiv	r6, lr, r8
 8000722:	fa1f f78c 	uxth.w	r7, ip
 8000726:	fb08 e316 	mls	r3, r8, r6, lr
 800072a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800072e:	fb06 f107 	mul.w	r1, r6, r7
 8000732:	4299      	cmp	r1, r3
 8000734:	d90a      	bls.n	800074c <__udivmoddi4+0x64>
 8000736:	eb1c 0303 	adds.w	r3, ip, r3
 800073a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800073e:	f080 811f 	bcs.w	8000980 <__udivmoddi4+0x298>
 8000742:	4299      	cmp	r1, r3
 8000744:	f240 811c 	bls.w	8000980 <__udivmoddi4+0x298>
 8000748:	3e02      	subs	r6, #2
 800074a:	4463      	add	r3, ip
 800074c:	1a5b      	subs	r3, r3, r1
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb3 f0f8 	udiv	r0, r3, r8
 8000754:	fb08 3310 	mls	r3, r8, r0, r3
 8000758:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800075c:	fb00 f707 	mul.w	r7, r0, r7
 8000760:	42a7      	cmp	r7, r4
 8000762:	d90a      	bls.n	800077a <__udivmoddi4+0x92>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800076c:	f080 810a 	bcs.w	8000984 <__udivmoddi4+0x29c>
 8000770:	42a7      	cmp	r7, r4
 8000772:	f240 8107 	bls.w	8000984 <__udivmoddi4+0x29c>
 8000776:	4464      	add	r4, ip
 8000778:	3802      	subs	r0, #2
 800077a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800077e:	1be4      	subs	r4, r4, r7
 8000780:	2600      	movs	r6, #0
 8000782:	b11d      	cbz	r5, 800078c <__udivmoddi4+0xa4>
 8000784:	40d4      	lsrs	r4, r2
 8000786:	2300      	movs	r3, #0
 8000788:	e9c5 4300 	strd	r4, r3, [r5]
 800078c:	4631      	mov	r1, r6
 800078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000792:	428b      	cmp	r3, r1
 8000794:	d909      	bls.n	80007aa <__udivmoddi4+0xc2>
 8000796:	2d00      	cmp	r5, #0
 8000798:	f000 80ef 	beq.w	800097a <__udivmoddi4+0x292>
 800079c:	2600      	movs	r6, #0
 800079e:	e9c5 0100 	strd	r0, r1, [r5]
 80007a2:	4630      	mov	r0, r6
 80007a4:	4631      	mov	r1, r6
 80007a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007aa:	fab3 f683 	clz	r6, r3
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d14a      	bne.n	8000848 <__udivmoddi4+0x160>
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d302      	bcc.n	80007bc <__udivmoddi4+0xd4>
 80007b6:	4282      	cmp	r2, r0
 80007b8:	f200 80f9 	bhi.w	80009ae <__udivmoddi4+0x2c6>
 80007bc:	1a84      	subs	r4, r0, r2
 80007be:	eb61 0303 	sbc.w	r3, r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	469e      	mov	lr, r3
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d0e0      	beq.n	800078c <__udivmoddi4+0xa4>
 80007ca:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ce:	e7dd      	b.n	800078c <__udivmoddi4+0xa4>
 80007d0:	b902      	cbnz	r2, 80007d4 <__udivmoddi4+0xec>
 80007d2:	deff      	udf	#255	; 0xff
 80007d4:	fab2 f282 	clz	r2, r2
 80007d8:	2a00      	cmp	r2, #0
 80007da:	f040 8092 	bne.w	8000902 <__udivmoddi4+0x21a>
 80007de:	eba1 010c 	sub.w	r1, r1, ip
 80007e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007e6:	fa1f fe8c 	uxth.w	lr, ip
 80007ea:	2601      	movs	r6, #1
 80007ec:	0c20      	lsrs	r0, r4, #16
 80007ee:	fbb1 f3f7 	udiv	r3, r1, r7
 80007f2:	fb07 1113 	mls	r1, r7, r3, r1
 80007f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fa:	fb0e f003 	mul.w	r0, lr, r3
 80007fe:	4288      	cmp	r0, r1
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x12c>
 8000802:	eb1c 0101 	adds.w	r1, ip, r1
 8000806:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x12a>
 800080c:	4288      	cmp	r0, r1
 800080e:	f200 80cb 	bhi.w	80009a8 <__udivmoddi4+0x2c0>
 8000812:	4643      	mov	r3, r8
 8000814:	1a09      	subs	r1, r1, r0
 8000816:	b2a4      	uxth	r4, r4
 8000818:	fbb1 f0f7 	udiv	r0, r1, r7
 800081c:	fb07 1110 	mls	r1, r7, r0, r1
 8000820:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000824:	fb0e fe00 	mul.w	lr, lr, r0
 8000828:	45a6      	cmp	lr, r4
 800082a:	d908      	bls.n	800083e <__udivmoddi4+0x156>
 800082c:	eb1c 0404 	adds.w	r4, ip, r4
 8000830:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000834:	d202      	bcs.n	800083c <__udivmoddi4+0x154>
 8000836:	45a6      	cmp	lr, r4
 8000838:	f200 80bb 	bhi.w	80009b2 <__udivmoddi4+0x2ca>
 800083c:	4608      	mov	r0, r1
 800083e:	eba4 040e 	sub.w	r4, r4, lr
 8000842:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000846:	e79c      	b.n	8000782 <__udivmoddi4+0x9a>
 8000848:	f1c6 0720 	rsb	r7, r6, #32
 800084c:	40b3      	lsls	r3, r6
 800084e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000852:	ea4c 0c03 	orr.w	ip, ip, r3
 8000856:	fa20 f407 	lsr.w	r4, r0, r7
 800085a:	fa01 f306 	lsl.w	r3, r1, r6
 800085e:	431c      	orrs	r4, r3
 8000860:	40f9      	lsrs	r1, r7
 8000862:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000866:	fa00 f306 	lsl.w	r3, r0, r6
 800086a:	fbb1 f8f9 	udiv	r8, r1, r9
 800086e:	0c20      	lsrs	r0, r4, #16
 8000870:	fa1f fe8c 	uxth.w	lr, ip
 8000874:	fb09 1118 	mls	r1, r9, r8, r1
 8000878:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800087c:	fb08 f00e 	mul.w	r0, r8, lr
 8000880:	4288      	cmp	r0, r1
 8000882:	fa02 f206 	lsl.w	r2, r2, r6
 8000886:	d90b      	bls.n	80008a0 <__udivmoddi4+0x1b8>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000890:	f080 8088 	bcs.w	80009a4 <__udivmoddi4+0x2bc>
 8000894:	4288      	cmp	r0, r1
 8000896:	f240 8085 	bls.w	80009a4 <__udivmoddi4+0x2bc>
 800089a:	f1a8 0802 	sub.w	r8, r8, #2
 800089e:	4461      	add	r1, ip
 80008a0:	1a09      	subs	r1, r1, r0
 80008a2:	b2a4      	uxth	r4, r4
 80008a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008a8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008b4:	458e      	cmp	lr, r1
 80008b6:	d908      	bls.n	80008ca <__udivmoddi4+0x1e2>
 80008b8:	eb1c 0101 	adds.w	r1, ip, r1
 80008bc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008c0:	d26c      	bcs.n	800099c <__udivmoddi4+0x2b4>
 80008c2:	458e      	cmp	lr, r1
 80008c4:	d96a      	bls.n	800099c <__udivmoddi4+0x2b4>
 80008c6:	3802      	subs	r0, #2
 80008c8:	4461      	add	r1, ip
 80008ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ce:	fba0 9402 	umull	r9, r4, r0, r2
 80008d2:	eba1 010e 	sub.w	r1, r1, lr
 80008d6:	42a1      	cmp	r1, r4
 80008d8:	46c8      	mov	r8, r9
 80008da:	46a6      	mov	lr, r4
 80008dc:	d356      	bcc.n	800098c <__udivmoddi4+0x2a4>
 80008de:	d053      	beq.n	8000988 <__udivmoddi4+0x2a0>
 80008e0:	b15d      	cbz	r5, 80008fa <__udivmoddi4+0x212>
 80008e2:	ebb3 0208 	subs.w	r2, r3, r8
 80008e6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ea:	fa01 f707 	lsl.w	r7, r1, r7
 80008ee:	fa22 f306 	lsr.w	r3, r2, r6
 80008f2:	40f1      	lsrs	r1, r6
 80008f4:	431f      	orrs	r7, r3
 80008f6:	e9c5 7100 	strd	r7, r1, [r5]
 80008fa:	2600      	movs	r6, #0
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	f1c2 0320 	rsb	r3, r2, #32
 8000906:	40d8      	lsrs	r0, r3
 8000908:	fa0c fc02 	lsl.w	ip, ip, r2
 800090c:	fa21 f303 	lsr.w	r3, r1, r3
 8000910:	4091      	lsls	r1, r2
 8000912:	4301      	orrs	r1, r0
 8000914:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000918:	fa1f fe8c 	uxth.w	lr, ip
 800091c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000920:	fb07 3610 	mls	r6, r7, r0, r3
 8000924:	0c0b      	lsrs	r3, r1, #16
 8000926:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800092a:	fb00 f60e 	mul.w	r6, r0, lr
 800092e:	429e      	cmp	r6, r3
 8000930:	fa04 f402 	lsl.w	r4, r4, r2
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x260>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800093e:	d22f      	bcs.n	80009a0 <__udivmoddi4+0x2b8>
 8000940:	429e      	cmp	r6, r3
 8000942:	d92d      	bls.n	80009a0 <__udivmoddi4+0x2b8>
 8000944:	3802      	subs	r0, #2
 8000946:	4463      	add	r3, ip
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	b289      	uxth	r1, r1
 800094c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000950:	fb07 3316 	mls	r3, r7, r6, r3
 8000954:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000958:	fb06 f30e 	mul.w	r3, r6, lr
 800095c:	428b      	cmp	r3, r1
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x28a>
 8000960:	eb1c 0101 	adds.w	r1, ip, r1
 8000964:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000968:	d216      	bcs.n	8000998 <__udivmoddi4+0x2b0>
 800096a:	428b      	cmp	r3, r1
 800096c:	d914      	bls.n	8000998 <__udivmoddi4+0x2b0>
 800096e:	3e02      	subs	r6, #2
 8000970:	4461      	add	r1, ip
 8000972:	1ac9      	subs	r1, r1, r3
 8000974:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000978:	e738      	b.n	80007ec <__udivmoddi4+0x104>
 800097a:	462e      	mov	r6, r5
 800097c:	4628      	mov	r0, r5
 800097e:	e705      	b.n	800078c <__udivmoddi4+0xa4>
 8000980:	4606      	mov	r6, r0
 8000982:	e6e3      	b.n	800074c <__udivmoddi4+0x64>
 8000984:	4618      	mov	r0, r3
 8000986:	e6f8      	b.n	800077a <__udivmoddi4+0x92>
 8000988:	454b      	cmp	r3, r9
 800098a:	d2a9      	bcs.n	80008e0 <__udivmoddi4+0x1f8>
 800098c:	ebb9 0802 	subs.w	r8, r9, r2
 8000990:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000994:	3801      	subs	r0, #1
 8000996:	e7a3      	b.n	80008e0 <__udivmoddi4+0x1f8>
 8000998:	4646      	mov	r6, r8
 800099a:	e7ea      	b.n	8000972 <__udivmoddi4+0x28a>
 800099c:	4620      	mov	r0, r4
 800099e:	e794      	b.n	80008ca <__udivmoddi4+0x1e2>
 80009a0:	4640      	mov	r0, r8
 80009a2:	e7d1      	b.n	8000948 <__udivmoddi4+0x260>
 80009a4:	46d0      	mov	r8, sl
 80009a6:	e77b      	b.n	80008a0 <__udivmoddi4+0x1b8>
 80009a8:	3b02      	subs	r3, #2
 80009aa:	4461      	add	r1, ip
 80009ac:	e732      	b.n	8000814 <__udivmoddi4+0x12c>
 80009ae:	4630      	mov	r0, r6
 80009b0:	e709      	b.n	80007c6 <__udivmoddi4+0xde>
 80009b2:	4464      	add	r4, ip
 80009b4:	3802      	subs	r0, #2
 80009b6:	e742      	b.n	800083e <__udivmoddi4+0x156>

080009b8 <__aeabi_idiv0>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <API_draw_line>:
 * 	bitmap:
 *
 */

int API_draw_line(uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint8_t dikte, uint8_t color)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08d      	sub	sp, #52	; 0x34
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4604      	mov	r4, r0
 80009c4:	4608      	mov	r0, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	4623      	mov	r3, r4
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	4603      	mov	r3, r0
 80009d0:	80bb      	strh	r3, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	807b      	strh	r3, [r7, #2]
 80009d6:	4613      	mov	r3, r2
 80009d8:	803b      	strh	r3, [r7, #0]
	int error = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
	//error checks
//	if(checkcolor(color))
//		return error;

	int dx = x_2 - x_1;
 80009de:	887a      	ldrh	r2, [r7, #2]
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	617b      	str	r3, [r7, #20]
	int dy = y_2 - y_1;
 80009e6:	883a      	ldrh	r2, [r7, #0]
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	613b      	str	r3, [r7, #16]
	int steps;
	if(abs(dx)>abs(dy))
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bfb8      	it	lt
 80009fe:	425b      	neglt	r3, r3
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dd05      	ble.n	8000a10 <API_draw_line+0x54>
	{
		steps = abs(dx);
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bfb8      	it	lt
 8000a0a:	425b      	neglt	r3, r3
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a0e:	e00f      	b.n	8000a30 <API_draw_line+0x74>
	}
	else if(abs(dy)>abs(dx))
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a16:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bfb8      	it	lt
 8000a20:	425b      	neglt	r3, r3
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dd04      	ble.n	8000a30 <API_draw_line+0x74>
	{
		steps = abs(dy);
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bfb8      	it	lt
 8000a2c:	425b      	neglt	r3, r3
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	float xIncrement = (float) dx / steps;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a48:	edc7 7a03 	vstr	s15, [r7, #12]
	float yIncrement = (float) dy / steps;
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	ee07 3a90 	vmov	s15, r3
 8000a52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	ee07 3a90 	vmov	s15, r3
 8000a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a64:	edc7 7a02 	vstr	s15, [r7, #8]
	int i;

	// Set the pixels along the center line of the given thickness
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000a68:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000a6c:	085b      	lsrs	r3, r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	425b      	negs	r3, r3
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a74:	e053      	b.n	8000b1e <API_draw_line+0x162>
		float x = x_1 + 0.5;
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fd63 	bl	8000544 <__aeabi_i2d>
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <API_draw_line+0x17c>)
 8000a84:	f7ff fc12 	bl	80002ac <__adddf3>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f7ff fdc2 	bl	8000618 <__aeabi_d2f>
 8000a94:	4603      	mov	r3, r0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
		float y = y_1 + i + 0.5;
 8000a98:	88ba      	ldrh	r2, [r7, #4]
 8000a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fd50 	bl	8000544 <__aeabi_i2d>
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <API_draw_line+0x17c>)
 8000aaa:	f7ff fbff 	bl	80002ac <__adddf3>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f7ff fdaf 	bl	8000618 <__aeabi_d2f>
 8000aba:	4603      	mov	r3, r0
 8000abc:	623b      	str	r3, [r7, #32]
		int j;
		for (j = 0; j < steps; j++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	e025      	b.n	8000b10 <API_draw_line+0x154>
			UB_VGA_SetPixel(x, y, color);
 8000ac4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000acc:	ee17 3a90 	vmov	r3, s15
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ada:	ee17 2a90 	vmov	r2, s15
 8000ade:	b291      	uxth	r1, r2
 8000ae0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fa9d 	bl	8002024 <UB_VGA_SetPixel>
			x += xIncrement;
 8000aea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			y += yIncrement;
 8000afa:	ed97 7a08 	vldr	s14, [r7, #32]
 8000afe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b06:	edc7 7a08 	vstr	s15, [r7, #32]
		for (j = 0; j < steps; j++) {
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	69fa      	ldr	r2, [r7, #28]
 8000b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbd5      	blt.n	8000ac4 <API_draw_line+0x108>
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	dda3      	ble.n	8000a76 <API_draw_line+0xba>
		}
	}
	return error;
 8000b2e:	69bb      	ldr	r3, [r7, #24]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3734      	adds	r7, #52	; 0x34
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	3fe00000 	.word	0x3fe00000

08000b3c <API_read_bitmap_SD>:
//	}
	return error;
}

int API_read_bitmap_SD(char *nr, uint16_t x_lup, uint16_t y_lup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000b48:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8000b4c:	6018      	str	r0, [r3, #0]
 8000b4e:	4608      	mov	r0, r1
 8000b50:	4611      	mov	r1, r2
 8000b52:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000b56:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	801a      	strh	r2, [r3, #0]
 8000b5e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000b62:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8000b66:	460a      	mov	r2, r1
 8000b68:	801a      	strh	r2, [r3, #0]

	// Fatfs variables
	FATFS FatFs;
    FIL fil; 		//File handle
    FRESULT fres; 	//Result after operations
    UINT SizeofBuffer = 30;
 8000b6a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000b6e:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8000b72:	221e      	movs	r2, #30
 8000b74:	601a      	str	r2, [r3, #0]

    //Reading buffer
    uint k = 0; // kijken welk variable we zijn
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

    //Position vga
    uint16_t xp,yp,xp2,yp2;

    xp2 = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
    yp2 = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac

    //Information from file system
    unsigned int Height,Width;

    //Creating decimal shift register
	unsigned int ColourFile = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	unsigned int DecimalshiftBuff = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498

	unsigned char i;

	char readBuf[30];

	TCHAR File[] = "00.txt";
 8000b94:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000b98:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000b9c:	4a91      	ldr	r2, [pc, #580]	; (8000de4 <API_read_bitmap_SD+0x2a8>)
 8000b9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba2:	6018      	str	r0, [r3, #0]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	8019      	strh	r1, [r3, #0]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	0c0a      	lsrs	r2, r1, #16
 8000bac:	701a      	strb	r2, [r3, #0]

	File[0] = nr[0];		// checked
 8000bae:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000bb2:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000bbe:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000bc2:	701a      	strb	r2, [r3, #0]
	File[1] = nr[1];
 8000bc4:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000bc8:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	785a      	ldrb	r2, [r3, #1]
 8000bd0:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000bd4:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000bd8:	705a      	strb	r2, [r3, #1]

	xp = x_lup;
 8000bda:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000bde:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8000be2:	881b      	ldrh	r3, [r3, #0]
 8000be4:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
	yp = y_lup;
 8000be8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000bec:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0


    fres = f_mount(&FatFs, "", 1); //1=mount now
 8000bf6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	497a      	ldr	r1, [pc, #488]	; (8000de8 <API_read_bitmap_SD+0x2ac>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f007 fd5c 	bl	80086bc <f_mount>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK) {
 8000c0a:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d006      	beq.n	8000c20 <API_read_bitmap_SD+0xe4>
   	printf("f_mount error (%i)\r\n", fres);
 8000c12:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000c16:	4619      	mov	r1, r3
 8000c18:	4874      	ldr	r0, [pc, #464]	; (8000dec <API_read_bitmap_SD+0x2b0>)
 8000c1a:	f008 f9d7 	bl	8008fcc <iprintf>
   	while(1);
 8000c1e:	e7fe      	b.n	8000c1e <API_read_bitmap_SD+0xe2>
    }

	fres = f_open(&fil, File, FA_READ);
 8000c20:	f107 0108 	add.w	r1, r7, #8
 8000c24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f007 fd8c 	bl	8008748 <f_open>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	if (fres != FR_OK) {
 8000c36:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 80b9 	beq.w	8000db2 <API_read_bitmap_SD+0x276>
	printf("f_open error (%i)\r\n",fres);
 8000c40:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000c44:	4619      	mov	r1, r3
 8000c46:	486a      	ldr	r0, [pc, #424]	; (8000df0 <API_read_bitmap_SD+0x2b4>)
 8000c48:	f008 f9c0 	bl	8008fcc <iprintf>
	while(1);
 8000c4c:	e7fe      	b.n	8000c4c <API_read_bitmap_SD+0x110>
	}


	while (SizeofBuffer == 30)
	{
		f_read(&fil,(void*)readBuf, 30, &SizeofBuffer);
 8000c4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c52:	f107 0110 	add.w	r1, r7, #16
 8000c56:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000c5a:	221e      	movs	r2, #30
 8000c5c:	f007 ff32 	bl	8008ac4 <f_read>
		for (i=0; i<SizeofBuffer; i++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 8000c66:	e09a      	b.n	8000d9e <API_read_bitmap_SD+0x262>
		{

			if (readBuf[i] != 32)
 8000c68:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000c6c:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8000c70:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	2b20      	cmp	r3, #32
 8000c78:	d019      	beq.n	8000cae <API_read_bitmap_SD+0x172>
			{
				DecimalshiftBuff = readBuf[i]-'0';
 8000c7a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000c7e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8000c82:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8000c86:	5cd3      	ldrb	r3, [r2, r3]
 8000c88:	3b30      	subs	r3, #48	; 0x30
 8000c8a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
				ColourFile *= 10;
 8000c8e:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
				ColourFile += DecimalshiftBuff;
 8000c9e:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8000ca2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8000ca6:	4413      	add	r3, r2
 8000ca8:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8000cac:	e072      	b.n	8000d94 <API_read_bitmap_SD+0x258>
			}

			else if(readBuf[i] == 32)
 8000cae:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000cb2:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8000cb6:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	2b20      	cmp	r3, #32
 8000cbe:	d169      	bne.n	8000d94 <API_read_bitmap_SD+0x258>
			{
				if (k > 1)
 8000cc0:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d94c      	bls.n	8000d62 <API_read_bitmap_SD+0x226>
				{
					if (xp < VGA_DISPLAY_X && yp < VGA_DISPLAY_Y)
 8000cc8:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8000ccc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000cd0:	d212      	bcs.n	8000cf8 <API_read_bitmap_SD+0x1bc>
 8000cd2:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8000cd6:	2bef      	cmp	r3, #239	; 0xef
 8000cd8:	d80e      	bhi.n	8000cf8 <API_read_bitmap_SD+0x1bc>
					{
						VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = ColourFile;
 8000cda:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	; 0x4b0
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	019b      	lsls	r3, r3, #6
 8000ce6:	441a      	add	r2, r3
 8000ce8:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8000cec:	4413      	add	r3, r2
 8000cee:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8000cf2:	b2d1      	uxtb	r1, r2
 8000cf4:	4a3f      	ldr	r2, [pc, #252]	; (8000df4 <API_read_bitmap_SD+0x2b8>)
 8000cf6:	54d1      	strb	r1, [r2, r3]
					}

					UB_VGA_SetPixel(xp, yp, ColourFile);
 8000cf8:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	f8b7 14b0 	ldrh.w	r1, [r7, #1200]	; 0x4b0
 8000d02:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 f98c 	bl	8002024 <UB_VGA_SetPixel>
					xp++;
 8000d0c:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8000d10:	3301      	adds	r3, #1
 8000d12:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
					xp2++;
 8000d16:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					if (xp2 >= Width)
 8000d20:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8000d24:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d813      	bhi.n	8000d54 <API_read_bitmap_SD+0x218>
					{
						yp++;
 8000d2c:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8000d30:	3301      	adds	r3, #1
 8000d32:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0
						yp2++;
 8000d36:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac
						xp = x_lup;
 8000d40:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000d44:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
						xp2 = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					}
					if (yp2 == Height)
 8000d54:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8000d58:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d111      	bne.n	8000d84 <API_read_bitmap_SD+0x248>
					{
						break;
 8000d60:	e027      	b.n	8000db2 <API_read_bitmap_SD+0x276>
					}
				}
				else if (k == 0) // Hoogte van de bit map
 8000d62:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d104      	bne.n	8000d74 <API_read_bitmap_SD+0x238>
				{
					Height = ColourFile;
 8000d6a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8000d6e:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8000d72:	e007      	b.n	8000d84 <API_read_bitmap_SD+0x248>
				}
				else if (k == 1)
 8000d74:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d103      	bne.n	8000d84 <API_read_bitmap_SD+0x248>
				{
					Width = ColourFile;
 8000d7c:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8000d80:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
				}

				k++;
 8000d84:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000d88:	3301      	adds	r3, #1
 8000d8a:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
				ColourFile = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
		for (i=0; i<SizeofBuffer; i++)
 8000d94:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000d98:	3301      	adds	r3, #1
 8000d9a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 8000d9e:	f897 249f 	ldrb.w	r2, [r7, #1183]	; 0x49f
 8000da2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000da6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f4ff af5b 	bcc.w	8000c68 <API_read_bitmap_SD+0x12c>
	while (SizeofBuffer == 30)
 8000db2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000db6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b1e      	cmp	r3, #30
 8000dbe:	f43f af46 	beq.w	8000c4e <API_read_bitmap_SD+0x112>
			}

		}
	}

	f_close(&fil);
 8000dc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f008 f839 	bl	8008e3e <f_close>

    f_mount(NULL, "", 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4906      	ldr	r1, [pc, #24]	; (8000de8 <API_read_bitmap_SD+0x2ac>)
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f007 fc73 	bl	80086bc <f_mount>

	return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f507 6797 	add.w	r7, r7, #1208	; 0x4b8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	0800a01c 	.word	0x0800a01c
 8000de8:	08009fec 	.word	0x08009fec
 8000dec:	08009ff0 	.word	0x08009ff0
 8000df0:	0800a008 	.word	0x0800a008
 8000df4:	20000874 	.word	0x20000874

08000df8 <intToAscii>:

int intToAscii(Message_parser* localParser, int numbersize, int StructLocation)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
	char i = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	77fb      	strb	r3, [r7, #31]
	char DecimalshiftBuff = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	75fb      	strb	r3, [r7, #23]
	unsigned int decimalvalue = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	77fb      	strb	r3, [r7, #31]
 8000e14:	e019      	b.n	8000e4a <intToAscii+0x52>
	{
		DecimalshiftBuff = localParser->Parser_Message[StructLocation][i]-'0';
 8000e16:	7ff9      	ldrb	r1, [r7, #31]
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4403      	add	r3, r0
 8000e26:	440b      	add	r3, r1
 8000e28:	3301      	adds	r3, #1
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	3b30      	subs	r3, #48	; 0x30
 8000e2e:	75fb      	strb	r3, [r7, #23]
		decimalvalue *= 10;
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
		decimalvalue += DecimalshiftBuff;
 8000e3c:	7dfb      	ldrb	r3, [r7, #23]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4413      	add	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 8000e44:	7ffb      	ldrb	r3, [r7, #31]
 8000e46:	3301      	adds	r3, #1
 8000e48:	77fb      	strb	r3, [r7, #31]
 8000e4a:	7ffb      	ldrb	r3, [r7, #31]
 8000e4c:	68ba      	ldr	r2, [r7, #8]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	dce1      	bgt.n	8000e16 <intToAscii+0x1e>
	}
	return decimalvalue;
 8000e52:	69bb      	ldr	r3, [r7, #24]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3724      	adds	r7, #36	; 0x24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LogicLayer_Parser>:


Message_parser LogicLayer_Parser(char*, unsigned int);

Message_parser LogicLayer_Parser(char *Message, unsigned int Messagelength)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0ee      	sub	sp, #440	; 0x1b8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000e6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000e6e:	6018      	str	r0, [r3, #0]
 8000e70:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000e74:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000e78:	6019      	str	r1, [r3, #0]
 8000e7a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000e7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8000e82:	601a      	str	r2, [r3, #0]
	unsigned int i,j,k,l = 0;			// Maak iterators aan voor het maken van een moving window langs de buffer message
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	i = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	j = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	k = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	Message_parser localParser;

	  while (Message[i] != 0) 	// Kijk voor line end
 8000e9c:	e08d      	b.n	8000fba <LogicLayer_Parser+0x15a>
	  {

		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 8000e9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 8000ea8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000eac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8000eb0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d903      	bls.n	8000ec2 <LogicLayer_Parser+0x62>
			  {
				  printf("Error , not detected \n");
 8000eba:	4856      	ldr	r0, [pc, #344]	; (8001014 <LogicLayer_Parser+0x1b4>)
 8000ebc:	f008 f90c 	bl	80090d8 <puts>
				  break;
 8000ec0:	e015      	b.n	8000eee <LogicLayer_Parser+0x8e>
		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
 8000ec2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000ec6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b2c      	cmp	r3, #44	; 0x2c
 8000ed6:	d00a      	beq.n	8000eee <LogicLayer_Parser+0x8e>
 8000ed8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000edc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000ee6:	4413      	add	r3, r2
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1d7      	bne.n	8000e9e <LogicLayer_Parser+0x3e>
			  }
		  }

	  	  for (l=0; j<i; j++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000ef4:	e023      	b.n	8000f3e <LogicLayer_Parser+0xde>
	  	  {
	  		localParser.Parser_Message[k][l] = Message[j];
 8000ef6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000efa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f04:	4413      	add	r3, r2
 8000f06:	7818      	ldrb	r0, [r3, #0]
 8000f08:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000f0c:	f5a3 71d2 	sub.w	r1, r3, #420	; 0x1a4
 8000f10:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	18ca      	adds	r2, r1, r3
 8000f1e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f22:	4413      	add	r3, r2
 8000f24:	3301      	adds	r3, #1
 8000f26:	4602      	mov	r2, r0
 8000f28:	701a      	strb	r2, [r3, #0]
	  		l++;
 8000f2a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f2e:	3301      	adds	r3, #1
 8000f30:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  	  for (l=0; j<i; j++)
 8000f34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8000f3e:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8000f42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d3d5      	bcc.n	8000ef6 <LogicLayer_Parser+0x96>
	  	  }

	  	  j = i+1;
 8000f4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	  	  if (Message[j] == 0x20)	// checking for spaces between lines
 8000f54:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000f58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f62:	4413      	add	r3, r2
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b20      	cmp	r3, #32
 8000f68:	d104      	bne.n	8000f74 <LogicLayer_Parser+0x114>
	  	  {
	  		  j++;
 8000f6a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f6e:	3301      	adds	r3, #1
 8000f70:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  	  }

	  	  localParser.Parser_Message[k][l] = '\0';
 8000f74:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000f78:	f5a3 71d2 	sub.w	r1, r3, #420	; 0x1a4
 8000f7c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	18ca      	adds	r2, r1, r3
 8000f8a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f8e:	4413      	add	r3, r2
 8000f90:	3301      	adds	r3, #1
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]

	  	  i++;		//verhoog de iterator om niet in een oneindige loop te komen ivm while loop en komma detectie
 8000f96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

	  	  k=(k+1);	//verhoog iterator voor meerdere berichten opslag
 8000fa0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 8000faa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fae:	2b14      	cmp	r3, #20
 8000fb0:	d903      	bls.n	8000fba <LogicLayer_Parser+0x15a>
	  	  	  {
	  		  	  printf("Error no message end detected \n");
 8000fb2:	4819      	ldr	r0, [pc, #100]	; (8001018 <LogicLayer_Parser+0x1b8>)
 8000fb4:	f008 f890 	bl	80090d8 <puts>
	  		  	  break;
 8000fb8:	e00b      	b.n	8000fd2 <LogicLayer_Parser+0x172>
	  while (Message[i] != 0) 	// Kijk voor line end
 8000fba:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000fbe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f47f af78 	bne.w	8000ec2 <LogicLayer_Parser+0x62>
	  	  	  }

	  }

	localParser.Variable_length = k;
 8000fd2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000fdc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8000fe0:	701a      	strb	r2, [r3, #0]

	return localParser;
 8000fe2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000fe6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000ff0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f240 1391 	movw	r3, #401	; 0x191
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	f007 ffcf 	bl	8008fa0 <memcpy>
}
 8001002:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001006:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	0800a024 	.word	0x0800a024
 8001018:	0800a03c 	.word	0x0800a03c

0800101c <LogicLayer_CommandCheck>:

int LogicLayer_CommandCheck(Message_parser localParser)
{
 800101c:	b084      	sub	sp, #16
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	f107 0c10 	add.w	ip, r7, #16
 8001028:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int i;
	unsigned char stringLength = sizeof(commands_check) / sizeof(commands_check[0]);
 800102c:	2308      	movs	r3, #8
 800102e:	70bb      	strb	r3, [r7, #2]
	unsigned char stringCheck = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	707b      	strb	r3, [r7, #1]
	unsigned char stringCorrect = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	70fb      	strb	r3, [r7, #3]

	for (i = 1; i < stringLength; i++)
 8001038:	2301      	movs	r3, #1
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	e017      	b.n	800106e <LogicLayer_CommandCheck+0x52>
	{
		stringCheck = strcmp(localParser.Parser_Message[0],commands_check[i-1]);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	1e5a      	subs	r2, r3, #1
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4a11      	ldr	r2, [pc, #68]	; (8001090 <LogicLayer_CommandCheck+0x74>)
 800104c:	441a      	add	r2, r3
 800104e:	f107 0311 	add.w	r3, r7, #17
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff f8bb 	bl	80001d0 <strcmp>
 800105a:	4603      	mov	r3, r0
 800105c:	707b      	strb	r3, [r7, #1]
		if (stringCheck == 0)
 800105e:	787b      	ldrb	r3, [r7, #1]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <LogicLayer_CommandCheck+0x4c>
		{
			stringCorrect = i;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	70fb      	strb	r3, [r7, #3]
	for (i = 1; i < stringLength; i++)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3301      	adds	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	78bb      	ldrb	r3, [r7, #2]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	429a      	cmp	r2, r3
 8001074:	dbe3      	blt.n	800103e <LogicLayer_CommandCheck+0x22>
		}
	}

	if (stringCorrect != 0)
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <LogicLayer_CommandCheck+0x64>
	{
		return stringCorrect;
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	e000      	b.n	8001082 <LogicLayer_CommandCheck+0x66>
	}
	else return 0;
 8001080:	2300      	movs	r3, #0

}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800108c:	b004      	add	sp, #16
 800108e:	4770      	bx	lr
 8001090:	20000000 	.word	0x20000000

08001094 <LogicLayer_CommandSwitch>:

int LogicLayer_CommandSwitch(unsigned char Command, Message_parser localParser)
{
 8001094:	b084      	sub	sp, #16
 8001096:	b5b0      	push	{r4, r5, r7, lr}
 8001098:	b088      	sub	sp, #32
 800109a:	af02      	add	r7, sp, #8
 800109c:	4604      	mov	r4, r0
 800109e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80010a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80010a6:	4623      	mov	r3, r4
 80010a8:	71fb      	strb	r3, [r7, #7]

	switch (Command)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	f200 8095 	bhi.w	80011de <LogicLayer_CommandSwitch+0x14a>
 80010b4:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <LogicLayer_CommandSwitch+0x28>)
 80010b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ba:	bf00      	nop
 80010bc:	080010d1 	.word	0x080010d1
 80010c0:	080011e3 	.word	0x080011e3
 80010c4:	080011e3 	.word	0x080011e3
 80010c8:	08001191 	.word	0x08001191
 80010cc:	080011e3 	.word	0x080011e3
		case 1:	//lijn
		{
			unsigned short x_1, y_1, x_2, y_2;
			unsigned char dikte, color;

			x_1 = intToAscii(&localParser, strlen(localParser.Parser_Message[1]), 1);
 80010d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d4:	3315      	adds	r3, #21
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f884 	bl	80001e4 <strlen>
 80010dc:	4601      	mov	r1, r0
 80010de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e2:	2201      	movs	r2, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fe87 	bl	8000df8 <intToAscii>
 80010ea:	4603      	mov	r3, r0
 80010ec:	827b      	strh	r3, [r7, #18]
			y_1 = intToAscii(&localParser, strlen(localParser.Parser_Message[2]), 2);
 80010ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f2:	3329      	adds	r3, #41	; 0x29
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f875 	bl	80001e4 <strlen>
 80010fa:	4601      	mov	r1, r0
 80010fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001100:	2202      	movs	r2, #2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fe78 	bl	8000df8 <intToAscii>
 8001108:	4603      	mov	r3, r0
 800110a:	823b      	strh	r3, [r7, #16]
			x_2 = intToAscii(&localParser, strlen(localParser.Parser_Message[3]), 3);
 800110c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001110:	333d      	adds	r3, #61	; 0x3d
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f866 	bl	80001e4 <strlen>
 8001118:	4601      	mov	r1, r0
 800111a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111e:	2203      	movs	r2, #3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fe69 	bl	8000df8 <intToAscii>
 8001126:	4603      	mov	r3, r0
 8001128:	81fb      	strh	r3, [r7, #14]
			y_2 = intToAscii(&localParser, strlen(localParser.Parser_Message[4]), 4);
 800112a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112e:	3351      	adds	r3, #81	; 0x51
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f857 	bl	80001e4 <strlen>
 8001136:	4601      	mov	r1, r0
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	2204      	movs	r2, #4
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fe5a 	bl	8000df8 <intToAscii>
 8001144:	4603      	mov	r3, r0
 8001146:	81bb      	strh	r3, [r7, #12]
			dikte = intToAscii(&localParser, strlen(localParser.Parser_Message[6]), 6);
 8001148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114c:	3379      	adds	r3, #121	; 0x79
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f848 	bl	80001e4 <strlen>
 8001154:	4601      	mov	r1, r0
 8001156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115a:	2206      	movs	r2, #6
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe4b 	bl	8000df8 <intToAscii>
 8001162:	4603      	mov	r3, r0
 8001164:	72fb      	strb	r3, [r7, #11]

			color = LogicLayer_ColourCheck(&localParser, 5);
 8001166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116a:	2105      	movs	r1, #5
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f841 	bl	80011f4 <LogicLayer_ColourCheck>
 8001172:	4603      	mov	r3, r0
 8001174:	72bb      	strb	r3, [r7, #10]

			API_draw_line(x_1, y_1, x_2, y_2, dikte, color);
 8001176:	8a78      	ldrh	r0, [r7, #18]
 8001178:	8a39      	ldrh	r1, [r7, #16]
 800117a:	89fc      	ldrh	r4, [r7, #14]
 800117c:	89bd      	ldrh	r5, [r7, #12]
 800117e:	7afb      	ldrb	r3, [r7, #11]
 8001180:	7aba      	ldrb	r2, [r7, #10]
 8001182:	9201      	str	r2, [sp, #4]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	462b      	mov	r3, r5
 8001188:	4622      	mov	r2, r4
 800118a:	f7ff fc17 	bl	80009bc <API_draw_line>

			break;
 800118e:	e029      	b.n	80011e4 <LogicLayer_CommandSwitch+0x150>
			break;
		}

		case 4: //bitmap
		{
			unsigned short x_lup = intToAscii(&localParser, strlen(localParser.Parser_Message[2]), 2);
 8001190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001194:	3329      	adds	r3, #41	; 0x29
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f824 	bl	80001e4 <strlen>
 800119c:	4601      	mov	r1, r0
 800119e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a2:	2202      	movs	r2, #2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fe27 	bl	8000df8 <intToAscii>
 80011aa:	4603      	mov	r3, r0
 80011ac:	82fb      	strh	r3, [r7, #22]
			unsigned short y_lup = intToAscii(&localParser, strlen(localParser.Parser_Message[3]), 3);
 80011ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b2:	333d      	adds	r3, #61	; 0x3d
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f815 	bl	80001e4 <strlen>
 80011ba:	4601      	mov	r1, r0
 80011bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c0:	2203      	movs	r2, #3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fe18 	bl	8000df8 <intToAscii>
 80011c8:	4603      	mov	r3, r0
 80011ca:	82bb      	strh	r3, [r7, #20]
			API_read_bitmap_SD(localParser.Parser_Message[1], x_lup, y_lup);
 80011cc:	8af9      	ldrh	r1, [r7, #22]
 80011ce:	8aba      	ldrh	r2, [r7, #20]
 80011d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d4:	3315      	adds	r3, #21
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fcb0 	bl	8000b3c <API_read_bitmap_SD>
			break;
 80011dc:	e002      	b.n	80011e4 <LogicLayer_CommandSwitch+0x150>

			break;
		}
		default:
		{
			return 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	e001      	b.n	80011e6 <LogicLayer_CommandSwitch+0x152>
			break;
 80011e2:	bf00      	nop
		}
	}
	return 1;
 80011e4:	2301      	movs	r3, #1
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80011f0:	b004      	add	sp, #16
 80011f2:	4770      	bx	lr

080011f4 <LogicLayer_ColourCheck>:

int LogicLayer_ColourCheck(Message_parser* localParser, unsigned char StructLocation)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
	int i;
	unsigned char stringLength = sizeof(message_col_string) / sizeof(message_col_string[0])+1;
 8001200:	2310      	movs	r3, #16
 8001202:	72fb      	strb	r3, [r7, #11]
	unsigned char stringCheck = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCorrect = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	727b      	strb	r3, [r7, #9]

	for (i = 1; i < stringLength; i++)
 800120c:	2301      	movs	r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	e021      	b.n	8001256 <LogicLayer_ColourCheck+0x62>
	{
		stringCheck = strcmp(localParser->Parser_Message[StructLocation],message_col_string[i-1]);
 8001212:	78fa      	ldrb	r2, [r7, #3]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	1c58      	adds	r0, r3, #1
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <LogicLayer_ColourCheck+0x74>)
 8001230:	4413      	add	r3, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7fe ffcc 	bl	80001d0 <strcmp>
 8001238:	4603      	mov	r3, r0
 800123a:	72bb      	strb	r3, [r7, #10]
		if (stringCheck == 0)
 800123c:	7abb      	ldrb	r3, [r7, #10]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d106      	bne.n	8001250 <LogicLayer_ColourCheck+0x5c>
		{
			return stringCorrect = message_col[i-1];
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3b01      	subs	r3, #1
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <LogicLayer_ColourCheck+0x78>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	727b      	strb	r3, [r7, #9]
 800124c:	7a7b      	ldrb	r3, [r7, #9]
 800124e:	e007      	b.n	8001260 <LogicLayer_ColourCheck+0x6c>
	for (i = 1; i < stringLength; i++)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3301      	adds	r3, #1
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbd9      	blt.n	8001212 <LogicLayer_ColourCheck+0x1e>
		}
	}


	return 0;
 800125e:	2300      	movs	r3, #0

}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800a0a4 	.word	0x0800a0a4
 800126c:	200000a0 	.word	0x200000a0

08001270 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_DMA_Init+0x3c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <MX_DMA_Init+0x3c>)
 8001280:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_DMA_Init+0x3c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2044      	movs	r0, #68	; 0x44
 8001298:	f001 f839 	bl	800230e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800129c:	2044      	movs	r0, #68	; 0x44
 800129e:	f001 f852 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <MX_GPIO_Init+0x108>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a3a      	ldr	r2, [pc, #232]	; (80013b8 <MX_GPIO_Init+0x108>)
 80012d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <MX_GPIO_Init+0x108>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <MX_GPIO_Init+0x108>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <MX_GPIO_Init+0x108>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <MX_GPIO_Init+0x108>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <MX_GPIO_Init+0x108>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a2c      	ldr	r2, [pc, #176]	; (80013b8 <MX_GPIO_Init+0x108>)
 8001308:	f043 0310 	orr.w	r3, r3, #16
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <MX_GPIO_Init+0x108>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_GPIO_Init+0x108>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a25      	ldr	r2, [pc, #148]	; (80013b8 <MX_GPIO_Init+0x108>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <MX_GPIO_Init+0x108>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	2102      	movs	r1, #2
 800133a:	4820      	ldr	r0, [pc, #128]	; (80013bc <MX_GPIO_Init+0x10c>)
 800133c:	f001 fdbc 	bl	8002eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001346:	481e      	ldr	r0, [pc, #120]	; (80013c0 <MX_GPIO_Init+0x110>)
 8001348:	f001 fdb6 	bl	8002eb8 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001352:	481c      	ldr	r0, [pc, #112]	; (80013c4 <MX_GPIO_Init+0x114>)
 8001354:	f001 fdb0 	bl	8002eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001358:	2302      	movs	r3, #2
 800135a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001360:	2301      	movs	r3, #1
 8001362:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4813      	ldr	r0, [pc, #76]	; (80013bc <MX_GPIO_Init+0x10c>)
 8001370:	f001 fc06 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001374:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001378:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_GPIO_Init+0x110>)
 800138e:	f001 fbf7 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8001392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_GPIO_Init+0x114>)
 80013ac:	f001 fbe8 	bl	8002b80 <HAL_GPIO_Init>

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40020400 	.word	0x40020400

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	f5ad 7d4c 	sub.w	sp, sp, #816	; 0x330
 80013ce:	af62      	add	r7, sp, #392	; 0x188
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013d0:	f000 fe50 	bl	8002074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d4:	f000 f8b2 	bl	800153c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d8:	f7ff ff6a 	bl	80012b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80013dc:	f7ff ff48 	bl	8001270 <MX_DMA_Init>
  MX_TIM1_Init();
 80013e0:	f000 fb9e 	bl	8001b20 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013e4:	f000 fbec 	bl	8001bc0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80013e8:	f000 fd02 	bl	8001df0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80013ec:	f004 fed8 	bl	80061a0 <MX_FATFS_Init>
  MX_SPI1_Init();
 80013f0:	f000 f928 	bl	8001644 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80013f4:	f000 fda0 	bl	8001f38 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f000 fdef 	bl	8001fdc <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 80013fe:	220a      	movs	r2, #10
 8001400:	210a      	movs	r1, #10
 8001402:	200a      	movs	r0, #10
 8001404:	f000 fe0e 	bl	8002024 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2000      	movs	r0, #0
 800140e:	f000 fe09 	bl	8002024 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	f240 103f 	movw	r0, #319	; 0x13f
 800141a:	f000 fe03 	bl	8002024 <UB_VGA_SetPixel>
  API_draw_line(1, 1, 101, 101, 5, VGA_COL_WHITE);
 800141e:	23ff      	movs	r3, #255	; 0xff
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	2305      	movs	r3, #5
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2365      	movs	r3, #101	; 0x65
 8001428:	2265      	movs	r2, #101	; 0x65
 800142a:	2101      	movs	r1, #1
 800142c:	2001      	movs	r0, #1
 800142e:	f7ff fac5 	bl	80009bc <API_draw_line>
  //API_read_bitmap_SD(&input.line_rx_buffer, 0, 0);
  //API_draw_bitmap(0,0,0);



  unsigned int i = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4


  for(i = 0; i < LINE_BUFLEN; i++)
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800143e:	e00b      	b.n	8001458 <main+0x90>
	  input.line_rx_buffer[i] = 0;
 8001440:	4a39      	ldr	r2, [pc, #228]	; (8001528 <main+0x160>)
 8001442:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001446:	4413      	add	r3, r2
 8001448:	3301      	adds	r3, #1
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 800144e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001452:	3301      	adds	r3, #1
 8001454:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001458:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800145c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001460:	d3ee      	bcc.n	8001440 <main+0x78>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8001462:	4b31      	ldr	r3, [pc, #196]	; (8001528 <main+0x160>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8001468:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <main+0x160>)
 800146a:	2200      	movs	r2, #0
 800146c:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
  input.command_execute_flag = FALSE;
 8001470:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <main+0x160>)
 8001472:	2200      	movs	r2, #0
 8001474:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, &input.byte_buffer_rx, LINE_BUFLEN);
 8001478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800147c:	492a      	ldr	r1, [pc, #168]	; (8001528 <main+0x160>)
 800147e:	482b      	ldr	r0, [pc, #172]	; (800152c <main+0x164>)
 8001480:	f003 feeb 	bl	800525a <HAL_UART_Receive_IT>


  //API_read_bitmap_SD("01", 0, 0);

  int j = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

  int Test = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 8001490:	4b25      	ldr	r3, [pc, #148]	; (8001528 <main+0x160>)
 8001492:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001496:	2bff      	cmp	r3, #255	; 0xff
 8001498:	d1fa      	bne.n	8001490 <main+0xc8>
	  {
		  i = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	//	  API_read_bitmap_SD(&input.line_rx_buffer, j, 0);
		  Debugging = LogicLayer_Parser(input.line_rx_buffer, LINE_BUFLEN);
 80014a0:	4c23      	ldr	r4, [pc, #140]	; (8001530 <main+0x168>)
 80014a2:	463b      	mov	r3, r7
 80014a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014a8:	4922      	ldr	r1, [pc, #136]	; (8001534 <main+0x16c>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fcd8 	bl	8000e60 <LogicLayer_Parser>
 80014b0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80014b4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80014b8:	4620      	mov	r0, r4
 80014ba:	4619      	mov	r1, r3
 80014bc:	f240 1391 	movw	r3, #401	; 0x191
 80014c0:	461a      	mov	r2, r3
 80014c2:	f007 fd6d 	bl	8008fa0 <memcpy>
		  Test = LogicLayer_CommandCheck(Debugging);
 80014c6:	4c1a      	ldr	r4, [pc, #104]	; (8001530 <main+0x168>)
 80014c8:	4668      	mov	r0, sp
 80014ca:	f104 0310 	add.w	r3, r4, #16
 80014ce:	f240 1281 	movw	r2, #385	; 0x181
 80014d2:	4619      	mov	r1, r3
 80014d4:	f007 fd64 	bl	8008fa0 <memcpy>
 80014d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014dc:	f7ff fd9e 	bl	800101c <LogicLayer_CommandCheck>
 80014e0:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
		  if (Test == 0)
 80014e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d010      	beq.n	800150e <main+0x146>
		  {
			  //error handler
		  }
		  else
		  {
			  LogicLayer_CommandSwitch(Test, Debugging);
 80014ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80014f0:	b2dd      	uxtb	r5, r3
 80014f2:	4c0f      	ldr	r4, [pc, #60]	; (8001530 <main+0x168>)
 80014f4:	4668      	mov	r0, sp
 80014f6:	f104 030c 	add.w	r3, r4, #12
 80014fa:	f240 1285 	movw	r2, #389	; 0x185
 80014fe:	4619      	mov	r1, r3
 8001500:	f007 fd4e 	bl	8008fa0 <memcpy>
 8001504:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001508:	4628      	mov	r0, r5
 800150a:	f7ff fdc3 	bl	8001094 <LogicLayer_CommandSwitch>
		  }

		  j+= 160;
 800150e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001512:	33a0      	adds	r3, #160	; 0xa0
 8001514:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0



		  // Do some stuff
		  printf("yes\n");
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <main+0x170>)
 800151a:	f007 fddd 	bl	80090d8 <puts>
		  //UB_VGA_FillScreen(colorTest);


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 800151e:	4b02      	ldr	r3, [pc, #8]	; (8001528 <main+0x160>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	  if(input.command_execute_flag == TRUE)
 8001526:	e7b3      	b.n	8001490 <main+0xc8>
 8001528:	20000158 	.word	0x20000158
 800152c:	20000830 	.word	0x20000830
 8001530:	20000550 	.word	0x20000550
 8001534:	20000159 	.word	0x20000159
 8001538:	0800a05c 	.word	0x0800a05c

0800153c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b094      	sub	sp, #80	; 0x50
 8001540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	2230      	movs	r2, #48	; 0x30
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f007 fd36 	bl	8008fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001550:	f107 030c 	add.w	r3, r7, #12
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	4b28      	ldr	r3, [pc, #160]	; (8001608 <SystemClock_Config+0xcc>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	4a27      	ldr	r2, [pc, #156]	; (8001608 <SystemClock_Config+0xcc>)
 800156a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <SystemClock_Config+0xcc>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800157c:	2300      	movs	r3, #0
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <SystemClock_Config+0xd0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a21      	ldr	r2, [pc, #132]	; (800160c <SystemClock_Config+0xd0>)
 8001586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	4b1f      	ldr	r3, [pc, #124]	; (800160c <SystemClock_Config+0xd0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	2301      	movs	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800159c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2302      	movs	r3, #2
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015ac:	2304      	movs	r3, #4
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015b0:	23a8      	movs	r3, #168	; 0xa8
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015b8:	2307      	movs	r3, #7
 80015ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 fc93 	bl	8002eec <HAL_RCC_OscConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015cc:	f000 f832 	bl	8001634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d0:	230f      	movs	r3, #15
 80015d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d4:	2302      	movs	r3, #2
 80015d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015e8:	f107 030c 	add.w	r3, r7, #12
 80015ec:	2105      	movs	r1, #5
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fef4 	bl	80033dc <HAL_RCC_ClockConfig>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015fa:	f000 f81b 	bl	8001634 <Error_Handler>
  }
}
 80015fe:	bf00      	nop
 8001600:	3750      	adds	r7, #80	; 0x50
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000

08001610 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8001618:	1d39      	adds	r1, r7, #4
 800161a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161e:	2201      	movs	r2, #1
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <__io_putchar+0x20>)
 8001622:	f003 fd88 	bl	8005136 <HAL_UART_Transmit>
	return ch;												//Return the character
 8001626:	687b      	ldr	r3, [r7, #4]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000830 	.word	0x20000830

08001634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <MX_SPI1_Init+0x64>)
 800164a:	4a18      	ldr	r2, [pc, #96]	; (80016ac <MX_SPI1_Init+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800164e:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_SPI1_Init+0x64>)
 8001650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001654:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_SPI1_Init+0x64>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <MX_SPI1_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_SPI1_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_SPI1_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_SPI1_Init+0x64>)
 8001670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001674:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_SPI1_Init+0x64>)
 8001678:	2238      	movs	r2, #56	; 0x38
 800167a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <MX_SPI1_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_SPI1_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <MX_SPI1_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_SPI1_Init+0x64>)
 8001690:	220a      	movs	r2, #10
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001694:	4804      	ldr	r0, [pc, #16]	; (80016a8 <MX_SPI1_Init+0x64>)
 8001696:	f002 f8c1 	bl	800381c <HAL_SPI_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016a0:	f7ff ffc8 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200006e4 	.word	0x200006e4
 80016ac:	40013000 	.word	0x40013000

080016b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a28      	ldr	r2, [pc, #160]	; (8001770 <HAL_SPI_MspInit+0xc0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d149      	bne.n	8001766 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_SPI_MspInit+0xc4>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a26      	ldr	r2, [pc, #152]	; (8001774 <HAL_SPI_MspInit+0xc4>)
 80016dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_SPI_MspInit+0xc4>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_SPI_MspInit+0xc4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a1f      	ldr	r2, [pc, #124]	; (8001774 <HAL_SPI_MspInit+0xc4>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_SPI_MspInit+0xc4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_SPI_MspInit+0xc4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a18      	ldr	r2, [pc, #96]	; (8001774 <HAL_SPI_MspInit+0xc4>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_SPI_MspInit+0xc4>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001726:	23c0      	movs	r3, #192	; 0xc0
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172e:	2301      	movs	r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001736:	2305      	movs	r3, #5
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <HAL_SPI_MspInit+0xc8>)
 8001742:	f001 fa1d 	bl	8002b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001746:	2308      	movs	r3, #8
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174e:	2301      	movs	r3, #1
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001756:	2305      	movs	r3, #5
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4806      	ldr	r0, [pc, #24]	; (800177c <HAL_SPI_MspInit+0xcc>)
 8001762:	f001 fa0d 	bl	8002b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40013000 	.word	0x40013000
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_MspInit+0x4c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a0f      	ldr	r2, [pc, #60]	; (80017cc <HAL_MspInit+0x4c>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <HAL_MspInit+0x4c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_MspInit+0x4c>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_MspInit+0x4c>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40023800 	.word	0x40023800

080017d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <MemManage_Handler+0x4>

080017ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <BusFault_Handler+0x4>

080017f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <UsageFault_Handler+0x4>

080017f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001824:	f000 fc78 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001830:	4828      	ldr	r0, [pc, #160]	; (80018d4 <TIM2_IRQHandler+0xa8>)
 8001832:	f002 fdcf 	bl	80043d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <TIM2_IRQHandler+0xa8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f06f 0208 	mvn.w	r2, #8
 800183e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8001840:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <TIM2_IRQHandler+0xac>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <TIM2_IRQHandler+0xac>)
 800184a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <TIM2_IRQHandler+0xac>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001854:	d905      	bls.n	8001862 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <TIM2_IRQHandler+0xac>)
 8001858:	2200      	movs	r2, #0
 800185a:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <TIM2_IRQHandler+0xb0>)
 800185e:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <TIM2_IRQHandler+0xac>)
 8001860:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <TIM2_IRQHandler+0xac>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d802      	bhi.n	8001870 <TIM2_IRQHandler+0x44>
 800186a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800186e:	e001      	b.n	8001874 <TIM2_IRQHandler+0x48>
 8001870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001874:	4a1a      	ldr	r2, [pc, #104]	; (80018e0 <TIM2_IRQHandler+0xb4>)
 8001876:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <TIM2_IRQHandler+0xac>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	2b23      	cmp	r3, #35	; 0x23
 800187e:	d927      	bls.n	80018d0 <TIM2_IRQHandler+0xa4>
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <TIM2_IRQHandler+0xac>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	f240 2202 	movw	r2, #514	; 0x202
 8001888:	4293      	cmp	r3, r2
 800188a:	d821      	bhi.n	80018d0 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 800188c:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <TIM2_IRQHandler+0xb8>)
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <TIM2_IRQHandler+0xac>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8001894:	4a13      	ldr	r2, [pc, #76]	; (80018e4 <TIM2_IRQHandler+0xb8>)
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <TIM2_IRQHandler+0xac>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <TIM2_IRQHandler+0xbc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <TIM2_IRQHandler+0xbc>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <TIM2_IRQHandler+0xc0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <TIM2_IRQHandler+0xc0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <TIM2_IRQHandler+0xac>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 80018c4:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <TIM2_IRQHandler+0xac>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f203 1341 	addw	r3, r3, #321	; 0x141
 80018cc:	4a02      	ldr	r2, [pc, #8]	; (80018d8 <TIM2_IRQHandler+0xac>)
 80018ce:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000788 	.word	0x20000788
 80018d8:	20013564 	.word	0x20013564
 80018dc:	20000874 	.word	0x20000874
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40026488 	.word	0x40026488
 80018e8:	40010000 	.word	0x40010000
 80018ec:	200007d0 	.word	0x200007d0

080018f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <USART2_IRQHandler+0x70>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d026      	beq.n	8001950 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	2b0d      	cmp	r3, #13
 8001906:	d002      	beq.n	800190e <USART2_IRQHandler+0x1e>
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	2b2e      	cmp	r3, #46	; 0x2e
 800190c:	d10e      	bne.n	800192c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <USART2_IRQHandler+0x74>)
 8001910:	22ff      	movs	r2, #255	; 0xff
 8001912:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			// Store the message length for processing
			input.msglen = input.char_counter;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <USART2_IRQHandler+0x74>)
 8001918:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800191c:	4a11      	ldr	r2, [pc, #68]	; (8001964 <USART2_IRQHandler+0x74>)
 800191e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
			// Reset the counter for the next line
			input.char_counter = 0;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <USART2_IRQHandler+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
 800192a:	e011      	b.n	8001950 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <USART2_IRQHandler+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <USART2_IRQHandler+0x74>)
 8001936:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800193a:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <USART2_IRQHandler+0x74>)
 800193c:	4413      	add	r3, r2
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <USART2_IRQHandler+0x74>)
 8001944:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8001948:	3301      	adds	r3, #1
 800194a:	4a06      	ldr	r2, [pc, #24]	; (8001964 <USART2_IRQHandler+0x74>)
 800194c:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001950:	4805      	ldr	r0, [pc, #20]	; (8001968 <USART2_IRQHandler+0x78>)
 8001952:	f003 fcb3 	bl	80052bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40004400 	.word	0x40004400
 8001964:	20000158 	.word	0x20000158
 8001968:	20000830 	.word	0x20000830

0800196c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <DMA2_Stream5_IRQHandler+0x48>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a1a      	ldr	r2, [r3, #32]
 8001976:	f241 1311 	movw	r3, #4369	; 0x1111
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10f      	bne.n	80019a0 <DMA2_Stream5_IRQHandler+0x34>
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <DMA2_Stream5_IRQHandler+0x48>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	f240 4344 	movw	r3, #1092	; 0x444
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d107      	bne.n	80019a0 <DMA2_Stream5_IRQHandler+0x34>
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <DMA2_Stream5_IRQHandler+0x48>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <DMA2_Stream5_IRQHandler+0x48>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <DMA2_Stream5_IRQHandler+0x4c>)
 80019a2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80019a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <DMA2_Stream5_IRQHandler+0x50>)
 80019aa:	f000 fe7f 	bl	80026ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000740 	.word	0x20000740
 80019b8:	40021000 	.word	0x40021000
 80019bc:	200007d0 	.word	0x200007d0

080019c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	e00a      	b.n	80019e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019d2:	f3af 8000 	nop.w
 80019d6:	4601      	mov	r1, r0
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	60ba      	str	r2, [r7, #8]
 80019de:	b2ca      	uxtb	r2, r1
 80019e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	3301      	adds	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	dbf0      	blt.n	80019d2 <_read+0x12>
	}

return len;
 80019f0:	687b      	ldr	r3, [r7, #4]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	e009      	b.n	8001a20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	60ba      	str	r2, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fdfb 	bl	8001610 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf1      	blt.n	8001a0c <_write+0x12>
	}
	return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_close>:

int _close(int file)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
	return -1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <_isatty>:

int _isatty(int file)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
	return 1;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x50>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x16>
		heap_end = &end;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <_sbrk+0x50>)
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <_sbrk+0x54>)
 8001ab0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <_sbrk+0x50>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <_sbrk+0x50>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	466a      	mov	r2, sp
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d907      	bls.n	8001ad6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ac6:	f007 fa41 	bl	8008f4c <__errno>
 8001aca:	4603      	mov	r3, r0
 8001acc:	220c      	movs	r2, #12
 8001ace:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ad4:	e006      	b.n	8001ae4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <_sbrk+0x50>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a03      	ldr	r2, [pc, #12]	; (8001aec <_sbrk+0x50>)
 8001ae0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000073c 	.word	0x2000073c
 8001af0:	200135d0 	.word	0x200135d0

08001af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <SystemInit+0x28>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <SystemInit+0x28>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SystemInit+0x28>)
 8001b0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	463b      	mov	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_TIM1_Init+0x98>)
 8001b3e:	4a1f      	ldr	r2, [pc, #124]	; (8001bbc <MX_TIM1_Init+0x9c>)
 8001b40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <MX_TIM1_Init+0x98>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_TIM1_Init+0x98>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_TIM1_Init+0x98>)
 8001b50:	220b      	movs	r2, #11
 8001b52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_TIM1_Init+0x98>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_TIM1_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_TIM1_Init+0x98>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b66:	4814      	ldr	r0, [pc, #80]	; (8001bb8 <MX_TIM1_Init+0x98>)
 8001b68:	f002 f94e 	bl	8003e08 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001b72:	f7ff fd5f 	bl	8001634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_TIM1_Init+0x98>)
 8001b84:	f002 fdf0 	bl	8004768 <HAL_TIM_ConfigClockSource>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001b8e:	f7ff fd51 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_TIM1_Init+0x98>)
 8001ba0:	f003 f9ec 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001baa:	f7ff fd43 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000740 	.word	0x20000740
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc6:	f107 0320 	add.w	r3, r7, #32
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	615a      	str	r2, [r3, #20]
 8001be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001be4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001be8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001bea:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf0:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001bf8:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001bfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c0a:	4820      	ldr	r0, [pc, #128]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001c0c:	f002 f9b4 	bl	8003f78 <HAL_TIM_PWM_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001c16:	f7ff fd0d 	bl	8001634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c22:	f107 0320 	add.w	r3, r7, #32
 8001c26:	4619      	mov	r1, r3
 8001c28:	4818      	ldr	r0, [pc, #96]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001c2a:	f003 f9a7 	bl	8004f7c <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001c34:	f7ff fcfe 	bl	8001634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c38:	2360      	movs	r3, #96	; 0x60
 8001c3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001c3c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001c40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001c42:	2302      	movs	r3, #2
 8001c44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480e      	ldr	r0, [pc, #56]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001c52:	f002 fcc7 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001c5c:	f7ff fcea 	bl	8001634 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001c60:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	220c      	movs	r2, #12
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001c6e:	f002 fcb9 	bl	80045e4 <HAL_TIM_PWM_ConfigChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001c78:	f7ff fcdc 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <MX_TIM2_Init+0xcc>)
 8001c7e:	f000 f87f 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	; 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000788 	.word	0x20000788

08001c90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_TIM_Base_MspInit+0x94>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d13c      	bne.n	8001d1c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_TIM_Base_MspInit+0x98>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_TIM_Base_MspInit+0x98>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_TIM_Base_MspInit+0x98>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_TIM_Base_MspInit+0xa0>)
 8001cc2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001cc6:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001cca:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001cce:	2240      	movs	r2, #64	; 0x40
 8001cd0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cde:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001cf4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001cf8:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001d00:	480a      	ldr	r0, [pc, #40]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001d02:	f000 fb3b 	bl	800237c <HAL_DMA_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001d0c:	f7ff fc92 	bl	8001634 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001d14:	621a      	str	r2, [r3, #32]
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <HAL_TIM_Base_MspInit+0x9c>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	200007d0 	.word	0x200007d0
 8001d30:	40026488 	.word	0x40026488

08001d34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d44:	d115      	bne.n	8001d72 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_TIM_PWM_MspInit+0x48>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <HAL_TIM_PWM_MspInit+0x48>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_TIM_PWM_MspInit+0x48>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	201c      	movs	r0, #28
 8001d68:	f000 fad1 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d6c:	201c      	movs	r0, #28
 8001d6e:	f000 faea 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001da0:	d11e      	bne.n	8001de0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_TIM_MspPostInit+0x68>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a0f      	ldr	r2, [pc, #60]	; (8001de8 <HAL_TIM_MspPostInit+0x68>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_TIM_MspPostInit+0x68>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001dbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4804      	ldr	r0, [pc, #16]	; (8001dec <HAL_TIM_MspPostInit+0x6c>)
 8001ddc:	f000 fed0 	bl	8002b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020400 	.word	0x40020400

08001df0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001df6:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <MX_USART2_UART_Init+0x50>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <MX_USART2_UART_Init+0x4c>)
 8001e28:	f003 f938 	bl	800509c <HAL_UART_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e32:	f7ff fbff 	bl	8001634 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000830 	.word	0x20000830
 8001e40:	40004400 	.word	0x40004400

08001e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	; 0x28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	; (8001ed8 <HAL_UART_MspInit+0x94>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d133      	bne.n	8001ece <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_UART_MspInit+0x98>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_UART_MspInit+0x98>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_UART_MspInit+0x98>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_UART_MspInit+0x98>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_UART_MspInit+0x98>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_UART_MspInit+0x98>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eae:	2307      	movs	r3, #7
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <HAL_UART_MspInit+0x9c>)
 8001eba:	f000 fe61 	bl	8002b80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2026      	movs	r0, #38	; 0x26
 8001ec4:	f000 fa23 	bl	800230e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec8:	2026      	movs	r0, #38	; 0x26
 8001eca:	f000 fa3c 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40004400 	.word	0x40004400
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ee8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eea:	e003      	b.n	8001ef4 <LoopCopyDataInit>

08001eec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ef0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ef2:	3104      	adds	r1, #4

08001ef4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ef8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001efa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001efc:	d3f6      	bcc.n	8001eec <CopyDataInit>
  ldr  r2, =_sbss
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f00:	e002      	b.n	8001f08 <LoopFillZerobss>

08001f02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f04:	f842 3b04 	str.w	r3, [r2], #4

08001f08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f0c:	d3f9      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f0e:	f7ff fdf1 	bl	8001af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f12:	f007 f821 	bl	8008f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7ff fa57 	bl	80013c8 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f20:	0800a318 	.word	0x0800a318
  ldr  r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f28:	2000013c 	.word	0x2000013c
  ldr  r2, =_sbss
 8001f2c:	2000013c 	.word	0x2000013c
  ldr  r3, = _ebss
 8001f30:	200135cc 	.word	0x200135cc

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>
	...

08001f38 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <UB_VGA_Screen_Init+0x84>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <UB_VGA_Screen_Init+0x84>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <UB_VGA_Screen_Init+0x84>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	; (8001fc0 <UB_VGA_Screen_Init+0x88>)
 8001f50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f54:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001f56:	481b      	ldr	r0, [pc, #108]	; (8001fc4 <UB_VGA_Screen_Init+0x8c>)
 8001f58:	f001 ffa6 	bl	8003ea8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001f5c:	210c      	movs	r1, #12
 8001f5e:	4819      	ldr	r0, [pc, #100]	; (8001fc4 <UB_VGA_Screen_Init+0x8c>)
 8001f60:	f002 f85a 	bl	8004018 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001f64:	2108      	movs	r1, #8
 8001f66:	4817      	ldr	r0, [pc, #92]	; (8001fc4 <UB_VGA_Screen_Init+0x8c>)
 8001f68:	f002 f91e 	bl	80041a8 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <UB_VGA_Screen_Init+0x90>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <UB_VGA_Screen_Init+0x90>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f7a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <UB_VGA_Screen_Init+0x90>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <UB_VGA_Screen_Init+0x90>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001f8c:	490f      	ldr	r1, [pc, #60]	; (8001fcc <UB_VGA_Screen_Init+0x94>)
 8001f8e:	f240 1341 	movw	r3, #321	; 0x141
 8001f92:	4a0f      	ldr	r2, [pc, #60]	; (8001fd0 <UB_VGA_Screen_Init+0x98>)
 8001f94:	480f      	ldr	r0, [pc, #60]	; (8001fd4 <UB_VGA_Screen_Init+0x9c>)
 8001f96:	f000 fa9f 	bl	80024d8 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001f9a:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <UB_VGA_Screen_Init+0x9c>)
 8001f9c:	f000 f9ee 	bl	800237c <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <UB_VGA_Screen_Init+0x9c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <UB_VGA_Screen_Init+0x9c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 0210 	orr.w	r2, r2, #16
 8001fae:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <UB_VGA_Screen_Init+0xa0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a01      	ldr	r2, [pc, #4]	; (8001fbc <UB_VGA_Screen_Init+0x84>)
 8001fb6:	6093      	str	r3, [r2, #8]
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20013564 	.word	0x20013564
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	20000788 	.word	0x20000788
 8001fc8:	20000740 	.word	0x20000740
 8001fcc:	20000874 	.word	0x20000874
 8001fd0:	40021015 	.word	0x40021015
 8001fd4:	200007d0 	.word	0x200007d0
 8001fd8:	40026488 	.word	0x40026488

08001fdc <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	81bb      	strh	r3, [r7, #12]
 8001fea:	e012      	b.n	8002012 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001fec:	2300      	movs	r3, #0
 8001fee:	81fb      	strh	r3, [r7, #14]
 8001ff0:	e008      	b.n	8002004 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001ff2:	79fa      	ldrb	r2, [r7, #7]
 8001ff4:	89b9      	ldrh	r1, [r7, #12]
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f813 	bl	8002024 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001ffe:	89fb      	ldrh	r3, [r7, #14]
 8002000:	3301      	adds	r3, #1
 8002002:	81fb      	strh	r3, [r7, #14]
 8002004:	89fb      	ldrh	r3, [r7, #14]
 8002006:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800200a:	d3f2      	bcc.n	8001ff2 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800200c:	89bb      	ldrh	r3, [r7, #12]
 800200e:	3301      	adds	r3, #1
 8002010:	81bb      	strh	r3, [r7, #12]
 8002012:	89bb      	ldrh	r3, [r7, #12]
 8002014:	2bef      	cmp	r3, #239	; 0xef
 8002016:	d9e9      	bls.n	8001fec <UB_VGA_FillScreen+0x10>
    }
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]
 800202e:	460b      	mov	r3, r1
 8002030:	80bb      	strh	r3, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800203c:	d301      	bcc.n	8002042 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8002042:	88bb      	ldrh	r3, [r7, #4]
 8002044:	2bef      	cmp	r3, #239	; 0xef
 8002046:	d901      	bls.n	800204c <UB_VGA_SetPixel+0x28>
    yp = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 800204c:	88ba      	ldrh	r2, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	019b      	lsls	r3, r3, #6
 8002056:	441a      	add	r2, r3
 8002058:	88fb      	ldrh	r3, [r7, #6]
 800205a:	4413      	add	r3, r2
 800205c:	4904      	ldr	r1, [pc, #16]	; (8002070 <UB_VGA_SetPixel+0x4c>)
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	54ca      	strb	r2, [r1, r3]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000874 	.word	0x20000874

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_Init+0x40>)
 800207e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_Init+0x40>)
 800208a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_Init+0x40>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 f92b 	bl	80022f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f000 f808 	bl	80020b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7ff fb6a 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x54>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x58>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f943 	bl	8002362 <HAL_SYSTICK_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00e      	b.n	8002104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d80a      	bhi.n	8002102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f4:	f000 f90b 	bl	800230e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_InitTick+0x5c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e000      	b.n	8002104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200000b4 	.word	0x200000b4
 8002110:	200000bc 	.word	0x200000bc
 8002114:	200000b8 	.word	0x200000b8

08002118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_IncTick+0x24>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	200000bc 	.word	0x200000bc
 800213c:	20013570 	.word	0x20013570

08002140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_GetTick+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20013570 	.word	0x20013570

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db0b      	blt.n	80021e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4907      	ldr	r1, [pc, #28]	; (80021f4 <__NVIC_EnableIRQ+0x38>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	095b      	lsrs	r3, r3, #5
 80021dc:	2001      	movs	r0, #1
 80021de:	fa00 f202 	lsl.w	r2, r0, r2
 80021e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	db0a      	blt.n	8002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	490c      	ldr	r1, [pc, #48]	; (8002244 <__NVIC_SetPriority+0x4c>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	0112      	lsls	r2, r2, #4
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	440b      	add	r3, r1
 800221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002220:	e00a      	b.n	8002238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4908      	ldr	r1, [pc, #32]	; (8002248 <__NVIC_SetPriority+0x50>)
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	3b04      	subs	r3, #4
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	440b      	add	r3, r1
 8002236:	761a      	strb	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f1c3 0307 	rsb	r3, r3, #7
 8002266:	2b04      	cmp	r3, #4
 8002268:	bf28      	it	cs
 800226a:	2304      	movcs	r3, #4
 800226c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3304      	adds	r3, #4
 8002272:	2b06      	cmp	r3, #6
 8002274:	d902      	bls.n	800227c <NVIC_EncodePriority+0x30>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3b03      	subs	r3, #3
 800227a:	e000      	b.n	800227e <NVIC_EncodePriority+0x32>
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	401a      	ands	r2, r3
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002294:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43d9      	mvns	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	4313      	orrs	r3, r2
         );
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d301      	bcc.n	80022ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c6:	2301      	movs	r3, #1
 80022c8:	e00f      	b.n	80022ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ca:	4a0a      	ldr	r2, [pc, #40]	; (80022f4 <SysTick_Config+0x40>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d2:	210f      	movs	r1, #15
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d8:	f7ff ff8e 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SysTick_Config+0x40>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <SysTick_Config+0x40>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000e010 	.word	0xe000e010

080022f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff29 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002320:	f7ff ff3e 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 8002324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	6978      	ldr	r0, [r7, #20]
 800232c:	f7ff ff8e 	bl	800224c <NVIC_EncodePriority>
 8002330:	4602      	mov	r2, r0
 8002332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002336:	4611      	mov	r1, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff ff5d 	bl	80021f8 <__NVIC_SetPriority>
}
 800233e:	bf00      	nop
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff31 	bl	80021bc <__NVIC_EnableIRQ>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffa2 	bl	80022b4 <SysTick_Config>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff feda 	bl	8002140 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e099      	b.n	80024cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023b8:	e00f      	b.n	80023da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ba:	f7ff fec1 	bl	8002140 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b05      	cmp	r3, #5
 80023c6:	d908      	bls.n	80023da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2203      	movs	r2, #3
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e078      	b.n	80024cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1e8      	bne.n	80023ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <HAL_DMA_Init+0x158>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002406:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	2b04      	cmp	r3, #4
 8002432:	d107      	bne.n	8002444 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	4313      	orrs	r3, r2
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f023 0307 	bic.w	r3, r3, #7
 800245a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	2b04      	cmp	r3, #4
 800246c:	d117      	bne.n	800249e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00e      	beq.n	800249e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fb01 	bl	8002a88 <DMA_CheckFifoParam>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2240      	movs	r2, #64	; 0x40
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800249a:	2301      	movs	r3, #1
 800249c:	e016      	b.n	80024cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fab8 	bl	8002a1c <DMA_CalcBaseAndBitshift>
 80024ac:	4603      	mov	r3, r0
 80024ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	223f      	movs	r2, #63	; 0x3f
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	f010803f 	.word	0xf010803f

080024d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
 80024e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024e6:	2300      	movs	r3, #0
 80024e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_DMA_Start_IT+0x26>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e040      	b.n	8002580 <HAL_DMA_Start_IT+0xa8>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d12f      	bne.n	8002572 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fa4a 	bl	80029c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002530:	223f      	movs	r2, #63	; 0x3f
 8002532:	409a      	lsls	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0216 	orr.w	r2, r2, #22
 8002546:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0208 	orr.w	r2, r2, #8
 800255e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0201 	orr.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e005      	b.n	800257e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800257e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002594:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002596:	f7ff fdd3 	bl	8002140 <HAL_GetTick>
 800259a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e052      	b.n	8002660 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0216 	bic.w	r2, r2, #22
 80025c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d103      	bne.n	80025ea <HAL_DMA_Abort+0x62>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0208 	bic.w	r2, r2, #8
 80025f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800260a:	e013      	b.n	8002634 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260c:	f7ff fd98 	bl	8002140 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b05      	cmp	r3, #5
 8002618:	d90c      	bls.n	8002634 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2203      	movs	r2, #3
 8002624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e015      	b.n	8002660 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e4      	bne.n	800260c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	223f      	movs	r2, #63	; 0x3f
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e00c      	b.n	80026a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2205      	movs	r2, #5
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026b8:	4b8e      	ldr	r3, [pc, #568]	; (80028f4 <HAL_DMA_IRQHandler+0x248>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a8e      	ldr	r2, [pc, #568]	; (80028f8 <HAL_DMA_IRQHandler+0x24c>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	0a9b      	lsrs	r3, r3, #10
 80026c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	2208      	movs	r2, #8
 80026d8:	409a      	lsls	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01a      	beq.n	8002718 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2208      	movs	r2, #8
 8002706:	409a      	lsls	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	2201      	movs	r2, #1
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d012      	beq.n	800274e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2201      	movs	r2, #1
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f043 0202 	orr.w	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2204      	movs	r2, #4
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00b      	beq.n	8002784 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	2204      	movs	r2, #4
 8002772:	409a      	lsls	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f043 0204 	orr.w	r2, r3, #4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	2210      	movs	r2, #16
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d043      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d03c      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	2210      	movs	r2, #16
 80027a8:	409a      	lsls	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d018      	beq.n	80027ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d108      	bne.n	80027dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d024      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
 80027da:	e01f      	b.n	800281c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01b      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
 80027ec:	e016      	b.n	800281c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0208 	bic.w	r2, r2, #8
 800280a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	2220      	movs	r2, #32
 8002822:	409a      	lsls	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 808f 	beq.w	800294c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8087 	beq.w	800294c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	2220      	movs	r2, #32
 8002844:	409a      	lsls	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b05      	cmp	r3, #5
 8002854:	d136      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0216 	bic.w	r2, r2, #22
 8002864:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d103      	bne.n	8002886 <HAL_DMA_IRQHandler+0x1da>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0208 	bic.w	r2, r2, #8
 8002894:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289a:	223f      	movs	r2, #63	; 0x3f
 800289c:	409a      	lsls	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d07e      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
        }
        return;
 80028c2:	e079      	b.n	80029b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d01d      	beq.n	800290e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10d      	bne.n	80028fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d031      	beq.n	800294c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
 80028f0:	e02c      	b.n	800294c <HAL_DMA_IRQHandler+0x2a0>
 80028f2:	bf00      	nop
 80028f4:	200000b4 	.word	0x200000b4
 80028f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d023      	beq.n	800294c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
 800290c:	e01e      	b.n	800294c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10f      	bne.n	800293c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0210 	bic.w	r2, r2, #16
 800292a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	2b00      	cmp	r3, #0
 8002952:	d032      	beq.n	80029ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d022      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2205      	movs	r2, #5
 8002964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3301      	adds	r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	d307      	bcc.n	8002994 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f2      	bne.n	8002978 <HAL_DMA_IRQHandler+0x2cc>
 8002992:	e000      	b.n	8002996 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002994:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d005      	beq.n	80029ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	4798      	blx	r3
 80029b6:	e000      	b.n	80029ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80029b8:	bf00      	nop
    }
  }
}
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	d108      	bne.n	8002a00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029fe:	e007      	b.n	8002a10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3b10      	subs	r3, #16
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <DMA_CalcBaseAndBitshift+0x64>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a36:	4a13      	ldr	r2, [pc, #76]	; (8002a84 <DMA_CalcBaseAndBitshift+0x68>)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d909      	bls.n	8002a5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	1d1a      	adds	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002a5c:	e007      	b.n	8002a6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a66:	f023 0303 	bic.w	r3, r3, #3
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	aaaaaaab 	.word	0xaaaaaaab
 8002a84:	0800a1e8 	.word	0x0800a1e8

08002a88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11f      	bne.n	8002ae2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d856      	bhi.n	8002b56 <DMA_CheckFifoParam+0xce>
 8002aa8:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <DMA_CheckFifoParam+0x28>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ac1 	.word	0x08002ac1
 8002ab4:	08002ad3 	.word	0x08002ad3
 8002ab8:	08002ac1 	.word	0x08002ac1
 8002abc:	08002b57 	.word	0x08002b57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d046      	beq.n	8002b5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad0:	e043      	b.n	8002b5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ada:	d140      	bne.n	8002b5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae0:	e03d      	b.n	8002b5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aea:	d121      	bne.n	8002b30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d837      	bhi.n	8002b62 <DMA_CheckFifoParam+0xda>
 8002af2:	a201      	add	r2, pc, #4	; (adr r2, 8002af8 <DMA_CheckFifoParam+0x70>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b0f 	.word	0x08002b0f
 8002b00:	08002b09 	.word	0x08002b09
 8002b04:	08002b21 	.word	0x08002b21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e030      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d025      	beq.n	8002b66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1e:	e022      	b.n	8002b66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b28:	d11f      	bne.n	8002b6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b2e:	e01c      	b.n	8002b6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d903      	bls.n	8002b3e <DMA_CheckFifoParam+0xb6>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d003      	beq.n	8002b44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b3c:	e018      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      break;
 8002b42:	e015      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      break;
 8002b54:	e00b      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      break;
 8002b56:	bf00      	nop
 8002b58:	e00a      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e008      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e006      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e004      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop

08002b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	e16b      	b.n	8002e74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f040 815a 	bne.w	8002e6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d005      	beq.n	8002bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d130      	bne.n	8002c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0201 	and.w	r2, r3, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d017      	beq.n	8002c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d123      	bne.n	8002cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	08da      	lsrs	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	220f      	movs	r2, #15
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	69b9      	ldr	r1, [r7, #24]
 8002cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80b4 	beq.w	8002e6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a5f      	ldr	r2, [pc, #380]	; (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d22:	4a5b      	ldr	r2, [pc, #364]	; (8002e90 <HAL_GPIO_Init+0x310>)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	220f      	movs	r2, #15
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_GPIO_Init+0x314>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d02b      	beq.n	8002da6 <HAL_GPIO_Init+0x226>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a51      	ldr	r2, [pc, #324]	; (8002e98 <HAL_GPIO_Init+0x318>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d025      	beq.n	8002da2 <HAL_GPIO_Init+0x222>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a50      	ldr	r2, [pc, #320]	; (8002e9c <HAL_GPIO_Init+0x31c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01f      	beq.n	8002d9e <HAL_GPIO_Init+0x21e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	; (8002ea0 <HAL_GPIO_Init+0x320>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d019      	beq.n	8002d9a <HAL_GPIO_Init+0x21a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4e      	ldr	r2, [pc, #312]	; (8002ea4 <HAL_GPIO_Init+0x324>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d013      	beq.n	8002d96 <HAL_GPIO_Init+0x216>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4d      	ldr	r2, [pc, #308]	; (8002ea8 <HAL_GPIO_Init+0x328>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d00d      	beq.n	8002d92 <HAL_GPIO_Init+0x212>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4c      	ldr	r2, [pc, #304]	; (8002eac <HAL_GPIO_Init+0x32c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d007      	beq.n	8002d8e <HAL_GPIO_Init+0x20e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_GPIO_Init+0x330>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_GPIO_Init+0x20a>
 8002d86:	2307      	movs	r3, #7
 8002d88:	e00e      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d8a:	2308      	movs	r3, #8
 8002d8c:	e00c      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d8e:	2306      	movs	r3, #6
 8002d90:	e00a      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d92:	2305      	movs	r3, #5
 8002d94:	e008      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d96:	2304      	movs	r3, #4
 8002d98:	e006      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e004      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e002      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_GPIO_Init+0x228>
 8002da6:	2300      	movs	r3, #0
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	f002 0203 	and.w	r2, r2, #3
 8002dae:	0092      	lsls	r2, r2, #2
 8002db0:	4093      	lsls	r3, r2
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002db8:	4935      	ldr	r1, [pc, #212]	; (8002e90 <HAL_GPIO_Init+0x310>)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	089b      	lsrs	r3, r3, #2
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dea:	4a32      	ldr	r2, [pc, #200]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002df0:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e14:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e68:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <HAL_GPIO_Init+0x334>)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3301      	adds	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b0f      	cmp	r3, #15
 8002e78:	f67f ae90 	bls.w	8002b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3724      	adds	r7, #36	; 0x24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	40013800 	.word	0x40013800
 8002e94:	40020000 	.word	0x40020000
 8002e98:	40020400 	.word	0x40020400
 8002e9c:	40020800 	.word	0x40020800
 8002ea0:	40020c00 	.word	0x40020c00
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40021400 	.word	0x40021400
 8002eac:	40021800 	.word	0x40021800
 8002eb0:	40021c00 	.word	0x40021c00
 8002eb4:	40013c00 	.word	0x40013c00

08002eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ec8:	787b      	ldrb	r3, [r7, #1]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ece:	887a      	ldrh	r2, [r7, #2]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ed4:	e003      	b.n	8002ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ed6:	887b      	ldrh	r3, [r7, #2]
 8002ed8:	041a      	lsls	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	619a      	str	r2, [r3, #24]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e267      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d075      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f0a:	4b88      	ldr	r3, [pc, #544]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d00c      	beq.n	8002f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f16:	4b85      	ldr	r3, [pc, #532]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d112      	bne.n	8002f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b82      	ldr	r3, [pc, #520]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f2e:	d10b      	bne.n	8002f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	4b7e      	ldr	r3, [pc, #504]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d05b      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x108>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d157      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e242      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f50:	d106      	bne.n	8002f60 <HAL_RCC_OscConfig+0x74>
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a75      	ldr	r2, [pc, #468]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e01d      	b.n	8002f9c <HAL_RCC_OscConfig+0xb0>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x98>
 8002f6a:	4b70      	ldr	r3, [pc, #448]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6f      	ldr	r2, [pc, #444]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b6d      	ldr	r3, [pc, #436]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a6c      	ldr	r2, [pc, #432]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0xb0>
 8002f84:	4b69      	ldr	r3, [pc, #420]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a68      	ldr	r2, [pc, #416]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b66      	ldr	r3, [pc, #408]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a65      	ldr	r2, [pc, #404]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7ff f8cc 	bl	8002140 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fac:	f7ff f8c8 	bl	8002140 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e207      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b5b      	ldr	r3, [pc, #364]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0xc0>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7ff f8b8 	bl	8002140 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7ff f8b4 	bl	8002140 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e1f3      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe6:	4b51      	ldr	r3, [pc, #324]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0xe8>
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d063      	beq.n	80030ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003002:	4b4a      	ldr	r3, [pc, #296]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b47      	ldr	r3, [pc, #284]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003016:	2b08      	cmp	r3, #8
 8003018:	d11c      	bne.n	8003054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301a:	4b44      	ldr	r3, [pc, #272]	; (800312c <HAL_RCC_OscConfig+0x240>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d116      	bne.n	8003054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	4b41      	ldr	r3, [pc, #260]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_RCC_OscConfig+0x152>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d001      	beq.n	800303e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e1c7      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303e:	4b3b      	ldr	r3, [pc, #236]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4937      	ldr	r1, [pc, #220]	; (800312c <HAL_RCC_OscConfig+0x240>)
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	e03a      	b.n	80030ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d020      	beq.n	800309e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800305c:	4b34      	ldr	r3, [pc, #208]	; (8003130 <HAL_RCC_OscConfig+0x244>)
 800305e:	2201      	movs	r2, #1
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7ff f86d 	bl	8002140 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306a:	f7ff f869 	bl	8002140 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e1a8      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800307c:	4b2b      	ldr	r3, [pc, #172]	; (800312c <HAL_RCC_OscConfig+0x240>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_RCC_OscConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4925      	ldr	r1, [pc, #148]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]
 800309c:	e015      	b.n	80030ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <HAL_RCC_OscConfig+0x244>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7ff f84c 	bl	8002140 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ac:	f7ff f848 	bl	8002140 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e187      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030be:	4b1b      	ldr	r3, [pc, #108]	; (800312c <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d036      	beq.n	8003144 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d016      	beq.n	800310c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_RCC_OscConfig+0x248>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7ff f82c 	bl	8002140 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ec:	f7ff f828 	bl	8002140 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e167      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fe:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_RCC_OscConfig+0x240>)
 8003100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x200>
 800310a:	e01b      	b.n	8003144 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <HAL_RCC_OscConfig+0x248>)
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7ff f815 	bl	8002140 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003118:	e00e      	b.n	8003138 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311a:	f7ff f811 	bl	8002140 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d907      	bls.n	8003138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e150      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
 800312c:	40023800 	.word	0x40023800
 8003130:	42470000 	.word	0x42470000
 8003134:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003138:	4b88      	ldr	r3, [pc, #544]	; (800335c <HAL_RCC_OscConfig+0x470>)
 800313a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1ea      	bne.n	800311a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8097 	beq.w	8003280 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003156:	4b81      	ldr	r3, [pc, #516]	; (800335c <HAL_RCC_OscConfig+0x470>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	4b7d      	ldr	r3, [pc, #500]	; (800335c <HAL_RCC_OscConfig+0x470>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a7c      	ldr	r2, [pc, #496]	; (800335c <HAL_RCC_OscConfig+0x470>)
 800316c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
 8003172:	4b7a      	ldr	r3, [pc, #488]	; (800335c <HAL_RCC_OscConfig+0x470>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800317e:	2301      	movs	r3, #1
 8003180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003182:	4b77      	ldr	r3, [pc, #476]	; (8003360 <HAL_RCC_OscConfig+0x474>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d118      	bne.n	80031c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800318e:	4b74      	ldr	r3, [pc, #464]	; (8003360 <HAL_RCC_OscConfig+0x474>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a73      	ldr	r2, [pc, #460]	; (8003360 <HAL_RCC_OscConfig+0x474>)
 8003194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319a:	f7fe ffd1 	bl	8002140 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031a2:	f7fe ffcd 	bl	8002140 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e10c      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b4:	4b6a      	ldr	r3, [pc, #424]	; (8003360 <HAL_RCC_OscConfig+0x474>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x2ea>
 80031c8:	4b64      	ldr	r3, [pc, #400]	; (800335c <HAL_RCC_OscConfig+0x470>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	4a63      	ldr	r2, [pc, #396]	; (800335c <HAL_RCC_OscConfig+0x470>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6713      	str	r3, [r2, #112]	; 0x70
 80031d4:	e01c      	b.n	8003210 <HAL_RCC_OscConfig+0x324>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x30c>
 80031de:	4b5f      	ldr	r3, [pc, #380]	; (800335c <HAL_RCC_OscConfig+0x470>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a5e      	ldr	r2, [pc, #376]	; (800335c <HAL_RCC_OscConfig+0x470>)
 80031e4:	f043 0304 	orr.w	r3, r3, #4
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	4b5c      	ldr	r3, [pc, #368]	; (800335c <HAL_RCC_OscConfig+0x470>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a5b      	ldr	r2, [pc, #364]	; (800335c <HAL_RCC_OscConfig+0x470>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0x324>
 80031f8:	4b58      	ldr	r3, [pc, #352]	; (800335c <HAL_RCC_OscConfig+0x470>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	4a57      	ldr	r2, [pc, #348]	; (800335c <HAL_RCC_OscConfig+0x470>)
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	6713      	str	r3, [r2, #112]	; 0x70
 8003204:	4b55      	ldr	r3, [pc, #340]	; (800335c <HAL_RCC_OscConfig+0x470>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a54      	ldr	r2, [pc, #336]	; (800335c <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 0304 	bic.w	r3, r3, #4
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d015      	beq.n	8003244 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe ff92 	bl	8002140 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321e:	e00a      	b.n	8003236 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7fe ff8e 	bl	8002140 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e0cb      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003236:	4b49      	ldr	r3, [pc, #292]	; (800335c <HAL_RCC_OscConfig+0x470>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0ee      	beq.n	8003220 <HAL_RCC_OscConfig+0x334>
 8003242:	e014      	b.n	800326e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003244:	f7fe ff7c 	bl	8002140 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324a:	e00a      	b.n	8003262 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7fe ff78 	bl	8002140 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	; 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0b5      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003262:	4b3e      	ldr	r3, [pc, #248]	; (800335c <HAL_RCC_OscConfig+0x470>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1ee      	bne.n	800324c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800326e:	7dfb      	ldrb	r3, [r7, #23]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d105      	bne.n	8003280 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003274:	4b39      	ldr	r3, [pc, #228]	; (800335c <HAL_RCC_OscConfig+0x470>)
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	4a38      	ldr	r2, [pc, #224]	; (800335c <HAL_RCC_OscConfig+0x470>)
 800327a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80a1 	beq.w	80033cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800328a:	4b34      	ldr	r3, [pc, #208]	; (800335c <HAL_RCC_OscConfig+0x470>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 030c 	and.w	r3, r3, #12
 8003292:	2b08      	cmp	r3, #8
 8003294:	d05c      	beq.n	8003350 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d141      	bne.n	8003322 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329e:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_RCC_OscConfig+0x478>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7fe ff4c 	bl	8002140 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ac:	f7fe ff48 	bl	8002140 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e087      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	4b27      	ldr	r3, [pc, #156]	; (800335c <HAL_RCC_OscConfig+0x470>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69da      	ldr	r2, [r3, #28]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	019b      	lsls	r3, r3, #6
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	3b01      	subs	r3, #1
 80032e4:	041b      	lsls	r3, r3, #16
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	491b      	ldr	r1, [pc, #108]	; (800335c <HAL_RCC_OscConfig+0x470>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f4:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_RCC_OscConfig+0x478>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fa:	f7fe ff21 	bl	8002140 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe ff1d 	bl	8002140 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e05c      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_RCC_OscConfig+0x470>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x416>
 8003320:	e054      	b.n	80033cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <HAL_RCC_OscConfig+0x478>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003328:	f7fe ff0a 	bl	8002140 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003330:	f7fe ff06 	bl	8002140 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e045      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <HAL_RCC_OscConfig+0x470>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x444>
 800334e:	e03d      	b.n	80033cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e038      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
 800335c:	40023800 	.word	0x40023800
 8003360:	40007000 	.word	0x40007000
 8003364:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <HAL_RCC_OscConfig+0x4ec>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d028      	beq.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d121      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d11a      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003398:	4013      	ands	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800339e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d111      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	3b01      	subs	r3, #1
 80033b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800

080033dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0cc      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f0:	4b68      	ldr	r3, [pc, #416]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d90c      	bls.n	8003418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b65      	ldr	r3, [pc, #404]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0b8      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800343a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003448:	4b53      	ldr	r3, [pc, #332]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003454:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	494d      	ldr	r1, [pc, #308]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d044      	beq.n	80034fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d119      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07f      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d003      	beq.n	800349a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003496:	2b03      	cmp	r3, #3
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349a:	4b3f      	ldr	r3, [pc, #252]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e06f      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034aa:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e067      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ba:	4b37      	ldr	r3, [pc, #220]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f023 0203 	bic.w	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4934      	ldr	r1, [pc, #208]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034cc:	f7fe fe38 	bl	8002140 <HAL_GetTick>
 80034d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d4:	f7fe fe34 	bl	8002140 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e04f      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 020c 	and.w	r2, r3, #12
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d1eb      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d20c      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b22      	ldr	r3, [pc, #136]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e032      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003562:	f000 f821 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 8003566:	4602      	mov	r2, r0
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	490a      	ldr	r1, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x1c0>)
 8003574:	5ccb      	ldrb	r3, [r1, r3]
 8003576:	fa22 f303 	lsr.w	r3, r2, r3
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe fd98 	bl	80020b8 <HAL_InitTick>

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023c00 	.word	0x40023c00
 8003598:	40023800 	.word	0x40023800
 800359c:	0800a1d0 	.word	0x0800a1d0
 80035a0:	200000b4 	.word	0x200000b4
 80035a4:	200000b8 	.word	0x200000b8

080035a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035ac:	b094      	sub	sp, #80	; 0x50
 80035ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	647b      	str	r3, [r7, #68]	; 0x44
 80035b4:	2300      	movs	r3, #0
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b8:	2300      	movs	r3, #0
 80035ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035c0:	4b79      	ldr	r3, [pc, #484]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d00d      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x40>
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	f200 80e1 	bhi.w	8003794 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <HAL_RCC_GetSysClockFreq+0x34>
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d003      	beq.n	80035e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035da:	e0db      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035dc:	4b73      	ldr	r3, [pc, #460]	; (80037ac <HAL_RCC_GetSysClockFreq+0x204>)
 80035de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035e0:	e0db      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035e2:	4b73      	ldr	r3, [pc, #460]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80035e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035e6:	e0d8      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e8:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f2:	4b6d      	ldr	r3, [pc, #436]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d063      	beq.n	80036c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b6a      	ldr	r3, [pc, #424]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	2200      	movs	r2, #0
 8003606:	63bb      	str	r3, [r7, #56]	; 0x38
 8003608:	63fa      	str	r2, [r7, #60]	; 0x3c
 800360a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003610:	633b      	str	r3, [r7, #48]	; 0x30
 8003612:	2300      	movs	r3, #0
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
 8003616:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800361a:	4622      	mov	r2, r4
 800361c:	462b      	mov	r3, r5
 800361e:	f04f 0000 	mov.w	r0, #0
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	0159      	lsls	r1, r3, #5
 8003628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362c:	0150      	lsls	r0, r2, #5
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4621      	mov	r1, r4
 8003634:	1a51      	subs	r1, r2, r1
 8003636:	6139      	str	r1, [r7, #16]
 8003638:	4629      	mov	r1, r5
 800363a:	eb63 0301 	sbc.w	r3, r3, r1
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800364c:	4659      	mov	r1, fp
 800364e:	018b      	lsls	r3, r1, #6
 8003650:	4651      	mov	r1, sl
 8003652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003656:	4651      	mov	r1, sl
 8003658:	018a      	lsls	r2, r1, #6
 800365a:	4651      	mov	r1, sl
 800365c:	ebb2 0801 	subs.w	r8, r2, r1
 8003660:	4659      	mov	r1, fp
 8003662:	eb63 0901 	sbc.w	r9, r3, r1
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800367a:	4690      	mov	r8, r2
 800367c:	4699      	mov	r9, r3
 800367e:	4623      	mov	r3, r4
 8003680:	eb18 0303 	adds.w	r3, r8, r3
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	462b      	mov	r3, r5
 8003688:	eb49 0303 	adc.w	r3, r9, r3
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800369a:	4629      	mov	r1, r5
 800369c:	024b      	lsls	r3, r1, #9
 800369e:	4621      	mov	r1, r4
 80036a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036a4:	4621      	mov	r1, r4
 80036a6:	024a      	lsls	r2, r1, #9
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ae:	2200      	movs	r2, #0
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036b8:	f7fc fffe 	bl	80006b8 <__aeabi_uldivmod>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4613      	mov	r3, r2
 80036c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c4:	e058      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c6:	4b38      	ldr	r3, [pc, #224]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	099b      	lsrs	r3, r3, #6
 80036cc:	2200      	movs	r2, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	4611      	mov	r1, r2
 80036d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036d6:	623b      	str	r3, [r7, #32]
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
 80036dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036e0:	4642      	mov	r2, r8
 80036e2:	464b      	mov	r3, r9
 80036e4:	f04f 0000 	mov.w	r0, #0
 80036e8:	f04f 0100 	mov.w	r1, #0
 80036ec:	0159      	lsls	r1, r3, #5
 80036ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f2:	0150      	lsls	r0, r2, #5
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4641      	mov	r1, r8
 80036fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80036fe:	4649      	mov	r1, r9
 8003700:	eb63 0b01 	sbc.w	fp, r3, r1
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003710:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003714:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003718:	ebb2 040a 	subs.w	r4, r2, sl
 800371c:	eb63 050b 	sbc.w	r5, r3, fp
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	00eb      	lsls	r3, r5, #3
 800372a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800372e:	00e2      	lsls	r2, r4, #3
 8003730:	4614      	mov	r4, r2
 8003732:	461d      	mov	r5, r3
 8003734:	4643      	mov	r3, r8
 8003736:	18e3      	adds	r3, r4, r3
 8003738:	603b      	str	r3, [r7, #0]
 800373a:	464b      	mov	r3, r9
 800373c:	eb45 0303 	adc.w	r3, r5, r3
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800374e:	4629      	mov	r1, r5
 8003750:	028b      	lsls	r3, r1, #10
 8003752:	4621      	mov	r1, r4
 8003754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003758:	4621      	mov	r1, r4
 800375a:	028a      	lsls	r2, r1, #10
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003762:	2200      	movs	r2, #0
 8003764:	61bb      	str	r3, [r7, #24]
 8003766:	61fa      	str	r2, [r7, #28]
 8003768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800376c:	f7fc ffa4 	bl	80006b8 <__aeabi_uldivmod>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4613      	mov	r3, r2
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	0c1b      	lsrs	r3, r3, #16
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	3301      	adds	r3, #1
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800378a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003792:	e002      	b.n	800379a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003796:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800379c:	4618      	mov	r0, r3
 800379e:	3750      	adds	r7, #80	; 0x50
 80037a0:	46bd      	mov	sp, r7
 80037a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	00f42400 	.word	0x00f42400
 80037b0:	007a1200 	.word	0x007a1200

080037b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	200000b4 	.word	0x200000b4

080037cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d0:	f7ff fff0 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	0a9b      	lsrs	r3, r3, #10
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4903      	ldr	r1, [pc, #12]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	0800a1e0 	.word	0x0800a1e0

080037f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037f8:	f7ff ffdc 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0b5b      	lsrs	r3, r3, #13
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4903      	ldr	r1, [pc, #12]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40023800 	.word	0x40023800
 8003818:	0800a1e0 	.word	0x0800a1e0

0800381c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e07b      	b.n	8003926 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b00      	cmp	r3, #0
 8003834:	d108      	bne.n	8003848 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800383e:	d009      	beq.n	8003854 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	61da      	str	r2, [r3, #28]
 8003846:	e005      	b.n	8003854 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd ff1e 	bl	80016b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800388a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d8:	ea42 0103 	orr.w	r1, r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	f003 0104 	and.w	r1, r3, #4
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	f003 0210 	and.w	r2, r3, #16
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003914:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b08c      	sub	sp, #48	; 0x30
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800393c:	2301      	movs	r3, #1
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x26>
 8003950:	2302      	movs	r3, #2
 8003952:	e18a      	b.n	8003c6a <HAL_SPI_TransmitReceive+0x33c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800395c:	f7fe fbf0 	bl	8002140 <HAL_GetTick>
 8003960:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003968:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003972:	887b      	ldrh	r3, [r7, #2]
 8003974:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800397a:	2b01      	cmp	r3, #1
 800397c:	d00f      	beq.n	800399e <HAL_SPI_TransmitReceive+0x70>
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003984:	d107      	bne.n	8003996 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <HAL_SPI_TransmitReceive+0x68>
 800398e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003992:	2b04      	cmp	r3, #4
 8003994:	d003      	beq.n	800399e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003996:	2302      	movs	r3, #2
 8003998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800399c:	e15b      	b.n	8003c56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x82>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x82>
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039b6:	e14e      	b.n	8003c56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d003      	beq.n	80039cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2205      	movs	r2, #5
 80039c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	887a      	ldrh	r2, [r7, #2]
 80039e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	887a      	ldrh	r2, [r7, #2]
 80039ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d007      	beq.n	8003a20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a28:	d178      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_SPI_TransmitReceive+0x10a>
 8003a32:	8b7b      	ldrh	r3, [r7, #26]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d166      	bne.n	8003b06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5c:	e053      	b.n	8003b06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d11b      	bne.n	8003aa4 <HAL_SPI_TransmitReceive+0x176>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d016      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x176>
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d113      	bne.n	8003aa4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	881a      	ldrh	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	1c9a      	adds	r2, r3, #2
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d119      	bne.n	8003ae6 <HAL_SPI_TransmitReceive+0x1b8>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d014      	beq.n	8003ae6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	b292      	uxth	r2, r2
 8003ac8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	1c9a      	adds	r2, r3, #2
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003ae6:	f7fe fb2b 	bl	8002140 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d807      	bhi.n	8003b06 <HAL_SPI_TransmitReceive+0x1d8>
 8003af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003afc:	d003      	beq.n	8003b06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b04:	e0a7      	b.n	8003c56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1a6      	bne.n	8003a5e <HAL_SPI_TransmitReceive+0x130>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1a1      	bne.n	8003a5e <HAL_SPI_TransmitReceive+0x130>
 8003b1a:	e07c      	b.n	8003c16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x1fc>
 8003b24:	8b7b      	ldrh	r3, [r7, #26]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d16b      	bne.n	8003c02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	7812      	ldrb	r2, [r2, #0]
 8003b36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b50:	e057      	b.n	8003c02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d11c      	bne.n	8003b9a <HAL_SPI_TransmitReceive+0x26c>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d017      	beq.n	8003b9a <HAL_SPI_TransmitReceive+0x26c>
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d114      	bne.n	8003b9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	7812      	ldrb	r2, [r2, #0]
 8003b7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d119      	bne.n	8003bdc <HAL_SPI_TransmitReceive+0x2ae>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d014      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bdc:	f7fe fab0 	bl	8002140 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d803      	bhi.n	8003bf4 <HAL_SPI_TransmitReceive+0x2c6>
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf2:	d102      	bne.n	8003bfa <HAL_SPI_TransmitReceive+0x2cc>
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c00:	e029      	b.n	8003c56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1a2      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x224>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d19d      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f8b2 	bl	8003d84 <SPI_EndRxTxTransaction>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d006      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c32:	e010      	b.n	8003c56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	e000      	b.n	8003c56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3730      	adds	r7, #48	; 0x30
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c84:	f7fe fa5c 	bl	8002140 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	4413      	add	r3, r2
 8003c92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c94:	f7fe fa54 	bl	8002140 <HAL_GetTick>
 8003c98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	015b      	lsls	r3, r3, #5
 8003ca0:	0d1b      	lsrs	r3, r3, #20
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	fb02 f303 	mul.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003caa:	e054      	b.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb2:	d050      	beq.n	8003d56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cb4:	f7fe fa44 	bl	8002140 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	69fa      	ldr	r2, [r7, #28]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d902      	bls.n	8003cca <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d13d      	bne.n	8003d46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce2:	d111      	bne.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cec:	d004      	beq.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf6:	d107      	bne.n	8003d08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d10:	d10f      	bne.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e017      	b.n	8003d76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d19b      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	200000b4 	.word	0x200000b4

08003d84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <SPI_EndRxTxTransaction+0x7c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <SPI_EndRxTxTransaction+0x80>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0d5b      	lsrs	r3, r3, #21
 8003d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003da0:	fb02 f303 	mul.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dae:	d112      	bne.n	8003dd6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2200      	movs	r2, #0
 8003db8:	2180      	movs	r1, #128	; 0x80
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7ff ff5a 	bl	8003c74 <SPI_WaitFlagStateUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d016      	beq.n	8003df4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	f043 0220 	orr.w	r2, r3, #32
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e00f      	b.n	8003df6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dec:	2b80      	cmp	r3, #128	; 0x80
 8003dee:	d0f2      	beq.n	8003dd6 <SPI_EndRxTxTransaction+0x52>
 8003df0:	e000      	b.n	8003df4 <SPI_EndRxTxTransaction+0x70>
        break;
 8003df2:	bf00      	nop
  }

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	200000b4 	.word	0x200000b4
 8003e04:	165e9f81 	.word	0x165e9f81

08003e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e041      	b.n	8003e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd ff2e 	bl	8001c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 fd88 	bl	800495c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d001      	beq.n	8003ec0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e046      	b.n	8003f4e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <HAL_TIM_Base_Start+0xb4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d022      	beq.n	8003f18 <HAL_TIM_Base_Start+0x70>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eda:	d01d      	beq.n	8003f18 <HAL_TIM_Base_Start+0x70>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <HAL_TIM_Base_Start+0xb8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d018      	beq.n	8003f18 <HAL_TIM_Base_Start+0x70>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <HAL_TIM_Base_Start+0xbc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <HAL_TIM_Base_Start+0x70>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1c      	ldr	r2, [pc, #112]	; (8003f68 <HAL_TIM_Base_Start+0xc0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00e      	beq.n	8003f18 <HAL_TIM_Base_Start+0x70>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <HAL_TIM_Base_Start+0xc4>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_TIM_Base_Start+0x70>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <HAL_TIM_Base_Start+0xc8>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_TIM_Base_Start+0x70>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <HAL_TIM_Base_Start+0xcc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d111      	bne.n	8003f3c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d010      	beq.n	8003f4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	e007      	b.n	8003f4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40010000 	.word	0x40010000
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800
 8003f68:	40000c00 	.word	0x40000c00
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40001800 	.word	0x40001800

08003f78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e041      	b.n	800400e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd fec8 	bl	8001d34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f000 fcd0 	bl	800495c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_TIM_PWM_Start+0x24>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e022      	b.n	8004082 <HAL_TIM_PWM_Start+0x6a>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d109      	bne.n	8004056 <HAL_TIM_PWM_Start+0x3e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b01      	cmp	r3, #1
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	e015      	b.n	8004082 <HAL_TIM_PWM_Start+0x6a>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b08      	cmp	r3, #8
 800405a:	d109      	bne.n	8004070 <HAL_TIM_PWM_Start+0x58>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	bf14      	ite	ne
 8004068:	2301      	movne	r3, #1
 800406a:	2300      	moveq	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	e008      	b.n	8004082 <HAL_TIM_PWM_Start+0x6a>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	bf14      	ite	ne
 800407c:	2301      	movne	r3, #1
 800407e:	2300      	moveq	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e07c      	b.n	8004184 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <HAL_TIM_PWM_Start+0x82>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004098:	e013      	b.n	80040c2 <HAL_TIM_PWM_Start+0xaa>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d104      	bne.n	80040aa <HAL_TIM_PWM_Start+0x92>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a8:	e00b      	b.n	80040c2 <HAL_TIM_PWM_Start+0xaa>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d104      	bne.n	80040ba <HAL_TIM_PWM_Start+0xa2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b8:	e003      	b.n	80040c2 <HAL_TIM_PWM_Start+0xaa>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2202      	movs	r2, #2
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2201      	movs	r2, #1
 80040c8:	6839      	ldr	r1, [r7, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 ff30 	bl	8004f30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2d      	ldr	r2, [pc, #180]	; (800418c <HAL_TIM_PWM_Start+0x174>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_TIM_PWM_Start+0xcc>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2c      	ldr	r2, [pc, #176]	; (8004190 <HAL_TIM_PWM_Start+0x178>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d101      	bne.n	80040e8 <HAL_TIM_PWM_Start+0xd0>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <HAL_TIM_PWM_Start+0xd2>
 80040e8:	2300      	movs	r3, #0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a22      	ldr	r2, [pc, #136]	; (800418c <HAL_TIM_PWM_Start+0x174>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <HAL_TIM_PWM_Start+0x136>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004110:	d01d      	beq.n	800414e <HAL_TIM_PWM_Start+0x136>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <HAL_TIM_PWM_Start+0x17c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <HAL_TIM_PWM_Start+0x136>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <HAL_TIM_PWM_Start+0x180>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_TIM_PWM_Start+0x136>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1c      	ldr	r2, [pc, #112]	; (800419c <HAL_TIM_PWM_Start+0x184>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <HAL_TIM_PWM_Start+0x136>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a16      	ldr	r2, [pc, #88]	; (8004190 <HAL_TIM_PWM_Start+0x178>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <HAL_TIM_PWM_Start+0x136>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_TIM_PWM_Start+0x188>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_TIM_PWM_Start+0x136>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_TIM_PWM_Start+0x18c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d111      	bne.n	8004172 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b06      	cmp	r3, #6
 800415e:	d010      	beq.n	8004182 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004170:	e007      	b.n	8004182 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40010000 	.word	0x40010000
 8004190:	40010400 	.word	0x40010400
 8004194:	40000400 	.word	0x40000400
 8004198:	40000800 	.word	0x40000800
 800419c:	40000c00 	.word	0x40000c00
 80041a0:	40014000 	.word	0x40014000
 80041a4:	40001800 	.word	0x40001800

080041a8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_TIM_PWM_Start_IT+0x28>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	bf14      	ite	ne
 80041c8:	2301      	movne	r3, #1
 80041ca:	2300      	moveq	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	e022      	b.n	8004216 <HAL_TIM_PWM_Start_IT+0x6e>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d109      	bne.n	80041ea <HAL_TIM_PWM_Start_IT+0x42>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b01      	cmp	r3, #1
 80041e0:	bf14      	ite	ne
 80041e2:	2301      	movne	r3, #1
 80041e4:	2300      	moveq	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	e015      	b.n	8004216 <HAL_TIM_PWM_Start_IT+0x6e>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d109      	bne.n	8004204 <HAL_TIM_PWM_Start_IT+0x5c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	e008      	b.n	8004216 <HAL_TIM_PWM_Start_IT+0x6e>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e0c7      	b.n	80043ae <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d104      	bne.n	800422e <HAL_TIM_PWM_Start_IT+0x86>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800422c:	e013      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0xae>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b04      	cmp	r3, #4
 8004232:	d104      	bne.n	800423e <HAL_TIM_PWM_Start_IT+0x96>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800423c:	e00b      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0xae>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b08      	cmp	r3, #8
 8004242:	d104      	bne.n	800424e <HAL_TIM_PWM_Start_IT+0xa6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2202      	movs	r2, #2
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800424c:	e003      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0xae>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d841      	bhi.n	80042e0 <HAL_TIM_PWM_Start_IT+0x138>
 800425c:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <HAL_TIM_PWM_Start_IT+0xbc>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	08004299 	.word	0x08004299
 8004268:	080042e1 	.word	0x080042e1
 800426c:	080042e1 	.word	0x080042e1
 8004270:	080042e1 	.word	0x080042e1
 8004274:	080042ab 	.word	0x080042ab
 8004278:	080042e1 	.word	0x080042e1
 800427c:	080042e1 	.word	0x080042e1
 8004280:	080042e1 	.word	0x080042e1
 8004284:	080042bd 	.word	0x080042bd
 8004288:	080042e1 	.word	0x080042e1
 800428c:	080042e1 	.word	0x080042e1
 8004290:	080042e1 	.word	0x080042e1
 8004294:	080042cf 	.word	0x080042cf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0202 	orr.w	r2, r2, #2
 80042a6:	60da      	str	r2, [r3, #12]
      break;
 80042a8:	e01d      	b.n	80042e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0204 	orr.w	r2, r2, #4
 80042b8:	60da      	str	r2, [r3, #12]
      break;
 80042ba:	e014      	b.n	80042e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f042 0208 	orr.w	r2, r2, #8
 80042ca:	60da      	str	r2, [r3, #12]
      break;
 80042cc:	e00b      	b.n	80042e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0210 	orr.w	r2, r2, #16
 80042dc:	60da      	str	r2, [r3, #12]
      break;
 80042de:	e002      	b.n	80042e6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      break;
 80042e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d15f      	bne.n	80043ac <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2201      	movs	r2, #1
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fe1b 	bl	8004f30 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2e      	ldr	r2, [pc, #184]	; (80043b8 <HAL_TIM_PWM_Start_IT+0x210>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d004      	beq.n	800430e <HAL_TIM_PWM_Start_IT+0x166>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <HAL_TIM_PWM_Start_IT+0x214>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_TIM_PWM_Start_IT+0x16a>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_TIM_PWM_Start_IT+0x16c>
 8004312:	2300      	movs	r3, #0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004326:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <HAL_TIM_PWM_Start_IT+0x210>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d022      	beq.n	8004378 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433a:	d01d      	beq.n	8004378 <HAL_TIM_PWM_Start_IT+0x1d0>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1f      	ldr	r2, [pc, #124]	; (80043c0 <HAL_TIM_PWM_Start_IT+0x218>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d018      	beq.n	8004378 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1e      	ldr	r2, [pc, #120]	; (80043c4 <HAL_TIM_PWM_Start_IT+0x21c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <HAL_TIM_PWM_Start_IT+0x220>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <HAL_TIM_PWM_Start_IT+0x1d0>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a17      	ldr	r2, [pc, #92]	; (80043bc <HAL_TIM_PWM_Start_IT+0x214>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d009      	beq.n	8004378 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a18      	ldr	r2, [pc, #96]	; (80043cc <HAL_TIM_PWM_Start_IT+0x224>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIM_PWM_Start_IT+0x1d0>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <HAL_TIM_PWM_Start_IT+0x228>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d111      	bne.n	800439c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2b06      	cmp	r3, #6
 8004388:	d010      	beq.n	80043ac <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439a:	e007      	b.n	80043ac <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40010400 	.word	0x40010400
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800
 80043c8:	40000c00 	.word	0x40000c00
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40001800 	.word	0x40001800

080043d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d122      	bne.n	8004430 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d11b      	bne.n	8004430 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f06f 0202 	mvn.w	r2, #2
 8004400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fa81 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 800441c:	e005      	b.n	800442a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fa73 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fa84 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0304 	and.w	r3, r3, #4
 800443a:	2b04      	cmp	r3, #4
 800443c:	d122      	bne.n	8004484 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d11b      	bne.n	8004484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0204 	mvn.w	r2, #4
 8004454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fa57 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fa49 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fa5a 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b08      	cmp	r3, #8
 8004490:	d122      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b08      	cmp	r3, #8
 800449e:	d11b      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0208 	mvn.w	r2, #8
 80044a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2204      	movs	r2, #4
 80044ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fa2d 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fa1f 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fa30 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b10      	cmp	r3, #16
 80044e4:	d122      	bne.n	800452c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d11b      	bne.n	800452c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0210 	mvn.w	r2, #16
 80044fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2208      	movs	r2, #8
 8004502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fa03 	bl	800491e <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f9f5 	bl	800490a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fa06 	bl	8004932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10e      	bne.n	8004558 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d107      	bne.n	8004558 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0201 	mvn.w	r2, #1
 8004550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f9cf 	bl	80048f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d10e      	bne.n	8004584 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004570:	2b80      	cmp	r3, #128	; 0x80
 8004572:	d107      	bne.n	8004584 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fd82 	bl	8005088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9cb 	bl	8004946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0220 	mvn.w	r2, #32
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fd4c 	bl	8005074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045fe:	2302      	movs	r3, #2
 8004600:	e0ae      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b0c      	cmp	r3, #12
 800460e:	f200 809f 	bhi.w	8004750 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004612:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	0800464d 	.word	0x0800464d
 800461c:	08004751 	.word	0x08004751
 8004620:	08004751 	.word	0x08004751
 8004624:	08004751 	.word	0x08004751
 8004628:	0800468d 	.word	0x0800468d
 800462c:	08004751 	.word	0x08004751
 8004630:	08004751 	.word	0x08004751
 8004634:	08004751 	.word	0x08004751
 8004638:	080046cf 	.word	0x080046cf
 800463c:	08004751 	.word	0x08004751
 8004640:	08004751 	.word	0x08004751
 8004644:	08004751 	.word	0x08004751
 8004648:	0800470f 	.word	0x0800470f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fa22 	bl	8004a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0208 	orr.w	r2, r2, #8
 8004666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0204 	bic.w	r2, r2, #4
 8004676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	619a      	str	r2, [r3, #24]
      break;
 800468a:	e064      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fa72 	bl	8004b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6999      	ldr	r1, [r3, #24]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	619a      	str	r2, [r3, #24]
      break;
 80046cc:	e043      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68b9      	ldr	r1, [r7, #8]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fac7 	bl	8004c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69da      	ldr	r2, [r3, #28]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0208 	orr.w	r2, r2, #8
 80046e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69da      	ldr	r2, [r3, #28]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0204 	bic.w	r2, r2, #4
 80046f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69d9      	ldr	r1, [r3, #28]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	61da      	str	r2, [r3, #28]
      break;
 800470c:	e023      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fb1b 	bl	8004d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69da      	ldr	r2, [r3, #28]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	021a      	lsls	r2, r3, #8
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	61da      	str	r2, [r3, #28]
      break;
 800474e:	e002      	b.n	8004756 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	75fb      	strb	r3, [r7, #23]
      break;
 8004754:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_TIM_ConfigClockSource+0x1c>
 8004780:	2302      	movs	r3, #2
 8004782:	e0b4      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x186>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047bc:	d03e      	beq.n	800483c <HAL_TIM_ConfigClockSource+0xd4>
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c2:	f200 8087 	bhi.w	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ca:	f000 8086 	beq.w	80048da <HAL_TIM_ConfigClockSource+0x172>
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d2:	d87f      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047d4:	2b70      	cmp	r3, #112	; 0x70
 80047d6:	d01a      	beq.n	800480e <HAL_TIM_ConfigClockSource+0xa6>
 80047d8:	2b70      	cmp	r3, #112	; 0x70
 80047da:	d87b      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047dc:	2b60      	cmp	r3, #96	; 0x60
 80047de:	d050      	beq.n	8004882 <HAL_TIM_ConfigClockSource+0x11a>
 80047e0:	2b60      	cmp	r3, #96	; 0x60
 80047e2:	d877      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047e4:	2b50      	cmp	r3, #80	; 0x50
 80047e6:	d03c      	beq.n	8004862 <HAL_TIM_ConfigClockSource+0xfa>
 80047e8:	2b50      	cmp	r3, #80	; 0x50
 80047ea:	d873      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d058      	beq.n	80048a2 <HAL_TIM_ConfigClockSource+0x13a>
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d86f      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b30      	cmp	r3, #48	; 0x30
 80047f6:	d064      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 80047f8:	2b30      	cmp	r3, #48	; 0x30
 80047fa:	d86b      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d060      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004800:	2b20      	cmp	r3, #32
 8004802:	d867      	bhi.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b00      	cmp	r3, #0
 8004806:	d05c      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004808:	2b10      	cmp	r3, #16
 800480a:	d05a      	beq.n	80048c2 <HAL_TIM_ConfigClockSource+0x15a>
 800480c:	e062      	b.n	80048d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6899      	ldr	r1, [r3, #8]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f000 fb67 	bl	8004ef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	609a      	str	r2, [r3, #8]
      break;
 800483a:	e04f      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6818      	ldr	r0, [r3, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	6899      	ldr	r1, [r3, #8]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f000 fb50 	bl	8004ef0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800485e:	609a      	str	r2, [r3, #8]
      break;
 8004860:	e03c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6859      	ldr	r1, [r3, #4]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	461a      	mov	r2, r3
 8004870:	f000 fac4 	bl	8004dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2150      	movs	r1, #80	; 0x50
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fb1d 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 8004880:	e02c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	6859      	ldr	r1, [r3, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	461a      	mov	r2, r3
 8004890:	f000 fae3 	bl	8004e5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2160      	movs	r1, #96	; 0x60
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fb0d 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 80048a0:	e01c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6818      	ldr	r0, [r3, #0]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6859      	ldr	r1, [r3, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f000 faa4 	bl	8004dfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2140      	movs	r1, #64	; 0x40
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fafd 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 80048c0:	e00c      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f000 faf4 	bl	8004eba <TIM_ITRx_SetConfig>
      break;
 80048d2:	e003      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	73fb      	strb	r3, [r7, #15]
      break;
 80048d8:	e000      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a40      	ldr	r2, [pc, #256]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497a:	d00f      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a3d      	ldr	r2, [pc, #244]	; (8004a74 <TIM_Base_SetConfig+0x118>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00b      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a3c      	ldr	r2, [pc, #240]	; (8004a78 <TIM_Base_SetConfig+0x11c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d007      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a3b      	ldr	r2, [pc, #236]	; (8004a7c <TIM_Base_SetConfig+0x120>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_Base_SetConfig+0x40>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d108      	bne.n	80049ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049bc:	d027      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a2c      	ldr	r2, [pc, #176]	; (8004a74 <TIM_Base_SetConfig+0x118>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d023      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2b      	ldr	r2, [pc, #172]	; (8004a78 <TIM_Base_SetConfig+0x11c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01f      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <TIM_Base_SetConfig+0x120>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d01b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d017      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a28      	ldr	r2, [pc, #160]	; (8004a84 <TIM_Base_SetConfig+0x128>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a27      	ldr	r2, [pc, #156]	; (8004a88 <TIM_Base_SetConfig+0x12c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00f      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a26      	ldr	r2, [pc, #152]	; (8004a8c <TIM_Base_SetConfig+0x130>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a25      	ldr	r2, [pc, #148]	; (8004a90 <TIM_Base_SetConfig+0x134>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <TIM_Base_SetConfig+0x138>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a23      	ldr	r2, [pc, #140]	; (8004a98 <TIM_Base_SetConfig+0x13c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d108      	bne.n	8004a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <TIM_Base_SetConfig+0x114>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_Base_SetConfig+0xf8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a0c      	ldr	r2, [pc, #48]	; (8004a80 <TIM_Base_SetConfig+0x124>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d103      	bne.n	8004a5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	615a      	str	r2, [r3, #20]
}
 8004a62:	bf00      	nop
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40010400 	.word	0x40010400
 8004a84:	40014000 	.word	0x40014000
 8004a88:	40014400 	.word	0x40014400
 8004a8c:	40014800 	.word	0x40014800
 8004a90:	40001800 	.word	0x40001800
 8004a94:	40001c00 	.word	0x40001c00
 8004a98:	40002000 	.word	0x40002000

08004a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0201 	bic.w	r2, r3, #1
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0303 	bic.w	r3, r3, #3
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f023 0302 	bic.w	r3, r3, #2
 8004ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a20      	ldr	r2, [pc, #128]	; (8004b74 <TIM_OC1_SetConfig+0xd8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC1_SetConfig+0x64>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a1f      	ldr	r2, [pc, #124]	; (8004b78 <TIM_OC1_SetConfig+0xdc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10c      	bne.n	8004b1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0308 	bic.w	r3, r3, #8
 8004b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f023 0304 	bic.w	r3, r3, #4
 8004b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <TIM_OC1_SetConfig+0xd8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d003      	beq.n	8004b2a <TIM_OC1_SetConfig+0x8e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <TIM_OC1_SetConfig+0xdc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d111      	bne.n	8004b4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	621a      	str	r2, [r3, #32]
}
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40010400 	.word	0x40010400

08004b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0210 	bic.w	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0320 	bic.w	r3, r3, #32
 8004bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <TIM_OC2_SetConfig+0xe4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC2_SetConfig+0x68>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <TIM_OC2_SetConfig+0xe8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10d      	bne.n	8004c00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <TIM_OC2_SetConfig+0xe4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_OC2_SetConfig+0x94>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <TIM_OC2_SetConfig+0xe8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d113      	bne.n	8004c38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	bf00      	nop
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40010400 	.word	0x40010400

08004c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <TIM_OC3_SetConfig+0xe0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_OC3_SetConfig+0x66>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <TIM_OC3_SetConfig+0xe4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10d      	bne.n	8004cea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <TIM_OC3_SetConfig+0xe0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_OC3_SetConfig+0x92>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <TIM_OC3_SetConfig+0xe4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d113      	bne.n	8004d22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40010400 	.word	0x40010400

08004d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	031b      	lsls	r3, r3, #12
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <TIM_OC4_SetConfig+0xa4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d003      	beq.n	8004db8 <TIM_OC4_SetConfig+0x68>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a11      	ldr	r2, [pc, #68]	; (8004df8 <TIM_OC4_SetConfig+0xa8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d109      	bne.n	8004dcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	019b      	lsls	r3, r3, #6
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40010000 	.word	0x40010000
 8004df8:	40010400 	.word	0x40010400

08004dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f023 0201 	bic.w	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 030a 	bic.w	r3, r3, #10
 8004e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f023 0210 	bic.w	r2, r3, #16
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f043 0307 	orr.w	r3, r3, #7
 8004edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	021a      	lsls	r2, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	2201      	movs	r2, #1
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6a1a      	ldr	r2, [r3, #32]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	6879      	ldr	r1, [r7, #4]
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	431a      	orrs	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e05a      	b.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a21      	ldr	r2, [pc, #132]	; (8005058 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d022      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe0:	d01d      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1d      	ldr	r2, [pc, #116]	; (800505c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d018      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00e      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a18      	ldr	r2, [pc, #96]	; (8005068 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d009      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a17      	ldr	r2, [pc, #92]	; (800506c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d004      	beq.n	800501e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a15      	ldr	r2, [pc, #84]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d10c      	bne.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	4313      	orrs	r3, r2
 800502e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40010000 	.word	0x40010000
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40010400 	.word	0x40010400
 800506c:	40014000 	.word	0x40014000
 8005070:	40001800 	.word	0x40001800

08005074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e03f      	b.n	800512e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc febe 	bl	8001e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2224      	movs	r2, #36	; 0x24
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fde9 	bl	8005cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b08a      	sub	sp, #40	; 0x28
 800513a:	af02      	add	r7, sp, #8
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	4613      	mov	r3, r2
 8005144:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b20      	cmp	r3, #32
 8005154:	d17c      	bne.n	8005250 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_UART_Transmit+0x2c>
 800515c:	88fb      	ldrh	r3, [r7, #6]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e075      	b.n	8005252 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_UART_Transmit+0x3e>
 8005170:	2302      	movs	r3, #2
 8005172:	e06e      	b.n	8005252 <HAL_UART_Transmit+0x11c>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2221      	movs	r2, #33	; 0x21
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800518a:	f7fc ffd9 	bl	8002140 <HAL_GetTick>
 800518e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	88fa      	ldrh	r2, [r7, #6]
 8005194:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	88fa      	ldrh	r2, [r7, #6]
 800519a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a4:	d108      	bne.n	80051b8 <HAL_UART_Transmit+0x82>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d104      	bne.n	80051b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e003      	b.n	80051c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051c8:	e02a      	b.n	8005220 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fb29 	bl	800582c <UART_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e036      	b.n	8005252 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3302      	adds	r3, #2
 80051fe:	61bb      	str	r3, [r7, #24]
 8005200:	e007      	b.n	8005212 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	781a      	ldrb	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	3301      	adds	r3, #1
 8005210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1cf      	bne.n	80051ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2200      	movs	r2, #0
 8005232:	2140      	movs	r1, #64	; 0x40
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 faf9 	bl	800582c <UART_WaitOnFlagUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e006      	b.n	8005252 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	e000      	b.n	8005252 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	4613      	mov	r3, r2
 8005266:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b20      	cmp	r3, #32
 8005272:	d11d      	bne.n	80052b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d002      	beq.n	8005280 <HAL_UART_Receive_IT+0x26>
 800527a:	88fb      	ldrh	r3, [r7, #6]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e016      	b.n	80052b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_UART_Receive_IT+0x38>
 800528e:	2302      	movs	r3, #2
 8005290:	e00f      	b.n	80052b2 <HAL_UART_Receive_IT+0x58>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	461a      	mov	r2, r3
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fb2e 	bl	8005908 <UART_Start_Receive_IT>
 80052ac:	4603      	mov	r3, r0
 80052ae:	e000      	b.n	80052b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b0ba      	sub	sp, #232	; 0xe8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10f      	bne.n	8005322 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_UART_IRQHandler+0x66>
 800530e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fc11 	bl	8005b42 <UART_Receive_IT>
      return;
 8005320:	e256      	b.n	80057d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 80de 	beq.w	80054e8 <HAL_UART_IRQHandler+0x22c>
 800532c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80d1 	beq.w	80054e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_UART_IRQHandler+0xae>
 8005352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00b      	beq.n	800538e <HAL_UART_IRQHandler+0xd2>
 8005376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	f043 0202 	orr.w	r2, r3, #2
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00b      	beq.n	80053b2 <HAL_UART_IRQHandler+0xf6>
 800539a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d005      	beq.n	80053b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f043 0204 	orr.w	r2, r3, #4
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d011      	beq.n	80053e2 <HAL_UART_IRQHandler+0x126>
 80053be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d105      	bne.n	80053d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f043 0208 	orr.w	r2, r3, #8
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 81ed 	beq.w	80057c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_UART_IRQHandler+0x14e>
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fb9c 	bl	8005b42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <HAL_UART_IRQHandler+0x17a>
 800542e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d04f      	beq.n	80054d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 faa4 	bl	8005984 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d141      	bne.n	80054ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3314      	adds	r3, #20
 8005450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3314      	adds	r3, #20
 8005472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005476:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800547a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800548e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1d9      	bne.n	800544a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	2b00      	cmp	r3, #0
 800549c:	d013      	beq.n	80054c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	4a7d      	ldr	r2, [pc, #500]	; (8005698 <HAL_UART_IRQHandler+0x3dc>)
 80054a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fd f8dc 	bl	8002668 <HAL_DMA_Abort_IT>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d016      	beq.n	80054e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054c0:	4610      	mov	r0, r2
 80054c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c4:	e00e      	b.n	80054e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f99a 	bl	8005800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054cc:	e00a      	b.n	80054e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f996 	bl	8005800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d4:	e006      	b.n	80054e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f992 	bl	8005800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054e2:	e170      	b.n	80057c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e4:	bf00      	nop
    return;
 80054e6:	e16e      	b.n	80057c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	f040 814a 	bne.w	8005786 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 8143 	beq.w	8005786 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 813c 	beq.w	8005786 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60bb      	str	r3, [r7, #8]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	f040 80b4 	bne.w	800569c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005540:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 8140 	beq.w	80057ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800554e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005552:	429a      	cmp	r2, r3
 8005554:	f080 8139 	bcs.w	80057ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800555e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556a:	f000 8088 	beq.w	800567e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800558c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800559a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800559e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1d9      	bne.n	800556e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e1      	bne.n	80055ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3314      	adds	r3, #20
 80055fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3314      	adds	r3, #20
 8005616:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800561a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800561c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005620:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e3      	bne.n	80055f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2220      	movs	r2, #32
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	330c      	adds	r3, #12
 8005642:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005646:	e853 3f00 	ldrex	r3, [r3]
 800564a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800564c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800564e:	f023 0310 	bic.w	r3, r3, #16
 8005652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	330c      	adds	r3, #12
 800565c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005660:	65ba      	str	r2, [r7, #88]	; 0x58
 8005662:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005666:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800566e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e3      	bne.n	800563c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	4618      	mov	r0, r3
 800567a:	f7fc ff85 	bl	8002588 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005686:	b29b      	uxth	r3, r3
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	b29b      	uxth	r3, r3
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f8c0 	bl	8005814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005694:	e099      	b.n	80057ca <HAL_UART_IRQHandler+0x50e>
 8005696:	bf00      	nop
 8005698:	08005a4b 	.word	0x08005a4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 808b 	beq.w	80057ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8086 	beq.w	80057ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	330c      	adds	r3, #12
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056e6:	647a      	str	r2, [r7, #68]	; 0x44
 80056e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e3      	bne.n	80056c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3314      	adds	r3, #20
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	623b      	str	r3, [r7, #32]
   return(result);
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3314      	adds	r3, #20
 800571a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800571e:	633a      	str	r2, [r7, #48]	; 0x30
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e3      	bne.n	80056fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0310 	bic.w	r3, r3, #16
 8005756:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	330c      	adds	r3, #12
 8005760:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005764:	61fa      	str	r2, [r7, #28]
 8005766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	69b9      	ldr	r1, [r7, #24]
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	617b      	str	r3, [r7, #20]
   return(result);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e3      	bne.n	8005740 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f848 	bl	8005814 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005784:	e023      	b.n	80057ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_UART_IRQHandler+0x4ea>
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f967 	bl	8005a72 <UART_Transmit_IT>
    return;
 80057a4:	e014      	b.n	80057d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00e      	beq.n	80057d0 <HAL_UART_IRQHandler+0x514>
 80057b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d008      	beq.n	80057d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f9a7 	bl	8005b12 <UART_EndTransmit_IT>
    return;
 80057c4:	e004      	b.n	80057d0 <HAL_UART_IRQHandler+0x514>
    return;
 80057c6:	bf00      	nop
 80057c8:	e002      	b.n	80057d0 <HAL_UART_IRQHandler+0x514>
      return;
 80057ca:	bf00      	nop
 80057cc:	e000      	b.n	80057d0 <HAL_UART_IRQHandler+0x514>
      return;
 80057ce:	bf00      	nop
  }
}
 80057d0:	37e8      	adds	r7, #232	; 0xe8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop

080057d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b090      	sub	sp, #64	; 0x40
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	4613      	mov	r3, r2
 800583a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583c:	e050      	b.n	80058e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005844:	d04c      	beq.n	80058e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <UART_WaitOnFlagUntilTimeout+0x30>
 800584c:	f7fc fc78 	bl	8002140 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005858:	429a      	cmp	r2, r3
 800585a:	d241      	bcs.n	80058e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	330c      	adds	r3, #12
 800587a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800587c:	637a      	str	r2, [r7, #52]	; 0x34
 800587e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e5      	bne.n	800585c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3314      	adds	r3, #20
 8005896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	e853 3f00 	ldrex	r3, [r3]
 800589e:	613b      	str	r3, [r7, #16]
   return(result);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f023 0301 	bic.w	r3, r3, #1
 80058a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3314      	adds	r3, #20
 80058ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058b0:	623a      	str	r2, [r7, #32]
 80058b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b4:	69f9      	ldr	r1, [r7, #28]
 80058b6:	6a3a      	ldr	r2, [r7, #32]
 80058b8:	e841 2300 	strex	r3, r2, [r1]
 80058bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1e5      	bne.n	8005890 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e00f      	b.n	8005900 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4013      	ands	r3, r2
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	bf0c      	ite	eq
 80058f0:	2301      	moveq	r3, #1
 80058f2:	2300      	movne	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d09f      	beq.n	800583e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3740      	adds	r7, #64	; 0x40
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	4613      	mov	r3, r2
 8005914:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	88fa      	ldrh	r2, [r7, #6]
 8005920:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	88fa      	ldrh	r2, [r7, #6]
 8005926:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2222      	movs	r2, #34	; 0x22
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005954:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0220 	orr.w	r2, r2, #32
 8005974:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b095      	sub	sp, #84	; 0x54
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059ac:	643a      	str	r2, [r7, #64]	; 0x40
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3314      	adds	r3, #20
 80059c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	e853 3f00 	ldrex	r3, [r3]
 80059ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f023 0301 	bic.w	r3, r3, #1
 80059d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3314      	adds	r3, #20
 80059de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e8:	e841 2300 	strex	r3, r2, [r1]
 80059ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e5      	bne.n	80059c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d119      	bne.n	8005a30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	330c      	adds	r3, #12
 8005a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 0310 	bic.w	r3, r3, #16
 8005a12:	647b      	str	r3, [r7, #68]	; 0x44
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a1c:	61ba      	str	r2, [r7, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6979      	ldr	r1, [r7, #20]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a3e:	bf00      	nop
 8005a40:	3754      	adds	r7, #84	; 0x54
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f7ff fecb 	bl	8005800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b085      	sub	sp, #20
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b21      	cmp	r3, #33	; 0x21
 8005a84:	d13e      	bne.n	8005b04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8e:	d114      	bne.n	8005aba <UART_Transmit_IT+0x48>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d110      	bne.n	8005aba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	881b      	ldrh	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	1c9a      	adds	r2, r3, #2
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	621a      	str	r2, [r3, #32]
 8005ab8:	e008      	b.n	8005acc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	1c59      	adds	r1, r3, #1
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6211      	str	r1, [r2, #32]
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10f      	bne.n	8005b00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e000      	b.n	8005b06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b04:	2302      	movs	r3, #2
  }
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff fe50 	bl	80057d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b08c      	sub	sp, #48	; 0x30
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b22      	cmp	r3, #34	; 0x22
 8005b54:	f040 80ab 	bne.w	8005cae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b60:	d117      	bne.n	8005b92 <UART_Receive_IT+0x50>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d113      	bne.n	8005b92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	1c9a      	adds	r2, r3, #2
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b90:	e026      	b.n	8005be0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba4:	d007      	beq.n	8005bb6 <UART_Receive_IT+0x74>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <UART_Receive_IT+0x82>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	701a      	strb	r2, [r3, #0]
 8005bc2:	e008      	b.n	8005bd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	4619      	mov	r1, r3
 8005bee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d15a      	bne.n	8005caa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0220 	bic.w	r2, r2, #32
 8005c02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d135      	bne.n	8005ca0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	330c      	adds	r3, #12
 8005c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f023 0310 	bic.w	r3, r3, #16
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	330c      	adds	r3, #12
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	623a      	str	r2, [r7, #32]
 8005c5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	69f9      	ldr	r1, [r7, #28]
 8005c60:	6a3a      	ldr	r2, [r7, #32]
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e5      	bne.n	8005c3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d10a      	bne.n	8005c92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff fdbb 	bl	8005814 <HAL_UARTEx_RxEventCallback>
 8005c9e:	e002      	b.n	8005ca6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fda3 	bl	80057ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e002      	b.n	8005cb0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e000      	b.n	8005cb0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3730      	adds	r7, #48	; 0x30
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cbc:	b0c0      	sub	sp, #256	; 0x100
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd4:	68d9      	ldr	r1, [r3, #12]
 8005cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	ea40 0301 	orr.w	r3, r0, r1
 8005ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce6:	689a      	ldr	r2, [r3, #8]
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d10:	f021 010c 	bic.w	r1, r1, #12
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d32:	6999      	ldr	r1, [r3, #24]
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	ea40 0301 	orr.w	r3, r0, r1
 8005d3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b8f      	ldr	r3, [pc, #572]	; (8005f84 <UART_SetConfig+0x2cc>)
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d005      	beq.n	8005d58 <UART_SetConfig+0xa0>
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	4b8d      	ldr	r3, [pc, #564]	; (8005f88 <UART_SetConfig+0x2d0>)
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d104      	bne.n	8005d62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d58:	f7fd fd4c 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 8005d5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d60:	e003      	b.n	8005d6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7fd fd33 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8005d66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d74:	f040 810c 	bne.w	8005f90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	462b      	mov	r3, r5
 8005d8e:	1891      	adds	r1, r2, r2
 8005d90:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d92:	415b      	adcs	r3, r3
 8005d94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	eb12 0801 	adds.w	r8, r2, r1
 8005da0:	4629      	mov	r1, r5
 8005da2:	eb43 0901 	adc.w	r9, r3, r1
 8005da6:	f04f 0200 	mov.w	r2, #0
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dba:	4690      	mov	r8, r2
 8005dbc:	4699      	mov	r9, r3
 8005dbe:	4623      	mov	r3, r4
 8005dc0:	eb18 0303 	adds.w	r3, r8, r3
 8005dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dc8:	462b      	mov	r3, r5
 8005dca:	eb49 0303 	adc.w	r3, r9, r3
 8005dce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005de6:	460b      	mov	r3, r1
 8005de8:	18db      	adds	r3, r3, r3
 8005dea:	653b      	str	r3, [r7, #80]	; 0x50
 8005dec:	4613      	mov	r3, r2
 8005dee:	eb42 0303 	adc.w	r3, r2, r3
 8005df2:	657b      	str	r3, [r7, #84]	; 0x54
 8005df4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005df8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005dfc:	f7fa fc5c 	bl	80006b8 <__aeabi_uldivmod>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	4b61      	ldr	r3, [pc, #388]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005e06:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	011c      	lsls	r4, r3, #4
 8005e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e20:	4642      	mov	r2, r8
 8005e22:	464b      	mov	r3, r9
 8005e24:	1891      	adds	r1, r2, r2
 8005e26:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e28:	415b      	adcs	r3, r3
 8005e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e30:	4641      	mov	r1, r8
 8005e32:	eb12 0a01 	adds.w	sl, r2, r1
 8005e36:	4649      	mov	r1, r9
 8005e38:	eb43 0b01 	adc.w	fp, r3, r1
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e50:	4692      	mov	sl, r2
 8005e52:	469b      	mov	fp, r3
 8005e54:	4643      	mov	r3, r8
 8005e56:	eb1a 0303 	adds.w	r3, sl, r3
 8005e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	eb4b 0303 	adc.w	r3, fp, r3
 8005e64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	18db      	adds	r3, r3, r3
 8005e80:	643b      	str	r3, [r7, #64]	; 0x40
 8005e82:	4613      	mov	r3, r2
 8005e84:	eb42 0303 	adc.w	r3, r2, r3
 8005e88:	647b      	str	r3, [r7, #68]	; 0x44
 8005e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e92:	f7fa fc11 	bl	80006b8 <__aeabi_uldivmod>
 8005e96:	4602      	mov	r2, r0
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4611      	mov	r1, r2
 8005e9c:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	2264      	movs	r2, #100	; 0x64
 8005ea6:	fb02 f303 	mul.w	r3, r2, r3
 8005eaa:	1acb      	subs	r3, r1, r3
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eb2:	4b36      	ldr	r3, [pc, #216]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ec0:	441c      	add	r4, r3
 8005ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ecc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ed0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	464b      	mov	r3, r9
 8005ed8:	1891      	adds	r1, r2, r2
 8005eda:	63b9      	str	r1, [r7, #56]	; 0x38
 8005edc:	415b      	adcs	r3, r3
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	1851      	adds	r1, r2, r1
 8005ee8:	6339      	str	r1, [r7, #48]	; 0x30
 8005eea:	4649      	mov	r1, r9
 8005eec:	414b      	adcs	r3, r1
 8005eee:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005efc:	4659      	mov	r1, fp
 8005efe:	00cb      	lsls	r3, r1, #3
 8005f00:	4651      	mov	r1, sl
 8005f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f06:	4651      	mov	r1, sl
 8005f08:	00ca      	lsls	r2, r1, #3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4642      	mov	r2, r8
 8005f12:	189b      	adds	r3, r3, r2
 8005f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f18:	464b      	mov	r3, r9
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	eb42 0303 	adc.w	r3, r2, r3
 8005f20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f38:	460b      	mov	r3, r1
 8005f3a:	18db      	adds	r3, r3, r3
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f3e:	4613      	mov	r3, r2
 8005f40:	eb42 0303 	adc.w	r3, r2, r3
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f4e:	f7fa fbb3 	bl	80006b8 <__aeabi_uldivmod>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005f58:	fba3 1302 	umull	r1, r3, r3, r2
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	2164      	movs	r1, #100	; 0x64
 8005f60:	fb01 f303 	mul.w	r3, r1, r3
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	3332      	adds	r3, #50	; 0x32
 8005f6a:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f70:	095b      	lsrs	r3, r3, #5
 8005f72:	f003 0207 	and.w	r2, r3, #7
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4422      	add	r2, r4
 8005f7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f80:	e105      	b.n	800618e <UART_SetConfig+0x4d6>
 8005f82:	bf00      	nop
 8005f84:	40011000 	.word	0x40011000
 8005f88:	40011400 	.word	0x40011400
 8005f8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fa2:	4642      	mov	r2, r8
 8005fa4:	464b      	mov	r3, r9
 8005fa6:	1891      	adds	r1, r2, r2
 8005fa8:	6239      	str	r1, [r7, #32]
 8005faa:	415b      	adcs	r3, r3
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
 8005fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	1854      	adds	r4, r2, r1
 8005fb6:	4649      	mov	r1, r9
 8005fb8:	eb43 0501 	adc.w	r5, r3, r1
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	00eb      	lsls	r3, r5, #3
 8005fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fca:	00e2      	lsls	r2, r4, #3
 8005fcc:	4614      	mov	r4, r2
 8005fce:	461d      	mov	r5, r3
 8005fd0:	4643      	mov	r3, r8
 8005fd2:	18e3      	adds	r3, r4, r3
 8005fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fd8:	464b      	mov	r3, r9
 8005fda:	eb45 0303 	adc.w	r3, r5, r3
 8005fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ffe:	4629      	mov	r1, r5
 8006000:	008b      	lsls	r3, r1, #2
 8006002:	4621      	mov	r1, r4
 8006004:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006008:	4621      	mov	r1, r4
 800600a:	008a      	lsls	r2, r1, #2
 800600c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006010:	f7fa fb52 	bl	80006b8 <__aeabi_uldivmod>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4b60      	ldr	r3, [pc, #384]	; (800619c <UART_SetConfig+0x4e4>)
 800601a:	fba3 2302 	umull	r2, r3, r3, r2
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	011c      	lsls	r4, r3, #4
 8006022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800602c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006030:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	1891      	adds	r1, r2, r2
 800603a:	61b9      	str	r1, [r7, #24]
 800603c:	415b      	adcs	r3, r3
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006044:	4641      	mov	r1, r8
 8006046:	1851      	adds	r1, r2, r1
 8006048:	6139      	str	r1, [r7, #16]
 800604a:	4649      	mov	r1, r9
 800604c:	414b      	adcs	r3, r1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800605c:	4659      	mov	r1, fp
 800605e:	00cb      	lsls	r3, r1, #3
 8006060:	4651      	mov	r1, sl
 8006062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006066:	4651      	mov	r1, sl
 8006068:	00ca      	lsls	r2, r1, #3
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	4603      	mov	r3, r0
 8006070:	4642      	mov	r2, r8
 8006072:	189b      	adds	r3, r3, r2
 8006074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006078:	464b      	mov	r3, r9
 800607a:	460a      	mov	r2, r1
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	67bb      	str	r3, [r7, #120]	; 0x78
 800608e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800609c:	4649      	mov	r1, r9
 800609e:	008b      	lsls	r3, r1, #2
 80060a0:	4641      	mov	r1, r8
 80060a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060a6:	4641      	mov	r1, r8
 80060a8:	008a      	lsls	r2, r1, #2
 80060aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060ae:	f7fa fb03 	bl	80006b8 <__aeabi_uldivmod>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	4b39      	ldr	r3, [pc, #228]	; (800619c <UART_SetConfig+0x4e4>)
 80060b8:	fba3 1302 	umull	r1, r3, r3, r2
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	2164      	movs	r1, #100	; 0x64
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	3332      	adds	r3, #50	; 0x32
 80060ca:	4a34      	ldr	r2, [pc, #208]	; (800619c <UART_SetConfig+0x4e4>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d6:	441c      	add	r4, r3
 80060d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060dc:	2200      	movs	r2, #0
 80060de:	673b      	str	r3, [r7, #112]	; 0x70
 80060e0:	677a      	str	r2, [r7, #116]	; 0x74
 80060e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060e6:	4642      	mov	r2, r8
 80060e8:	464b      	mov	r3, r9
 80060ea:	1891      	adds	r1, r2, r2
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	415b      	adcs	r3, r3
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060f6:	4641      	mov	r1, r8
 80060f8:	1851      	adds	r1, r2, r1
 80060fa:	6039      	str	r1, [r7, #0]
 80060fc:	4649      	mov	r1, r9
 80060fe:	414b      	adcs	r3, r1
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800610e:	4659      	mov	r1, fp
 8006110:	00cb      	lsls	r3, r1, #3
 8006112:	4651      	mov	r1, sl
 8006114:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006118:	4651      	mov	r1, sl
 800611a:	00ca      	lsls	r2, r1, #3
 800611c:	4610      	mov	r0, r2
 800611e:	4619      	mov	r1, r3
 8006120:	4603      	mov	r3, r0
 8006122:	4642      	mov	r2, r8
 8006124:	189b      	adds	r3, r3, r2
 8006126:	66bb      	str	r3, [r7, #104]	; 0x68
 8006128:	464b      	mov	r3, r9
 800612a:	460a      	mov	r2, r1
 800612c:	eb42 0303 	adc.w	r3, r2, r3
 8006130:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	663b      	str	r3, [r7, #96]	; 0x60
 800613c:	667a      	str	r2, [r7, #100]	; 0x64
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800614a:	4649      	mov	r1, r9
 800614c:	008b      	lsls	r3, r1, #2
 800614e:	4641      	mov	r1, r8
 8006150:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006154:	4641      	mov	r1, r8
 8006156:	008a      	lsls	r2, r1, #2
 8006158:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800615c:	f7fa faac 	bl	80006b8 <__aeabi_uldivmod>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <UART_SetConfig+0x4e4>)
 8006166:	fba3 1302 	umull	r1, r3, r3, r2
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	2164      	movs	r1, #100	; 0x64
 800616e:	fb01 f303 	mul.w	r3, r1, r3
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	3332      	adds	r3, #50	; 0x32
 8006178:	4a08      	ldr	r2, [pc, #32]	; (800619c <UART_SetConfig+0x4e4>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	095b      	lsrs	r3, r3, #5
 8006180:	f003 020f 	and.w	r2, r3, #15
 8006184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4422      	add	r2, r4
 800618c:	609a      	str	r2, [r3, #8]
}
 800618e:	bf00      	nop
 8006190:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006194:	46bd      	mov	sp, r7
 8006196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800619a:	bf00      	nop
 800619c:	51eb851f 	.word	0x51eb851f

080061a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80061a4:	4904      	ldr	r1, [pc, #16]	; (80061b8 <MX_FATFS_Init+0x18>)
 80061a6:	4805      	ldr	r0, [pc, #20]	; (80061bc <MX_FATFS_Init+0x1c>)
 80061a8:	f002 fec0 	bl	8008f2c <FATFS_LinkDriver>
 80061ac:	4603      	mov	r3, r0
 80061ae:	461a      	mov	r2, r3
 80061b0:	4b03      	ldr	r3, [pc, #12]	; (80061c0 <MX_FATFS_Init+0x20>)
 80061b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061b4:	bf00      	nop
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20013578 	.word	0x20013578
 80061bc:	200000c0 	.word	0x200000c0
 80061c0:	20013574 	.word	0x20013574

080061c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	4603      	mov	r3, r0
 80061dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 f9d9 	bl	8006598 <USER_SPI_initialize>
 80061e6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fab7 	bl	8006770 <USER_SPI_status>
 8006202:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	4603      	mov	r3, r0
 800621a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800621c:	7bf8      	ldrb	r0, [r7, #15]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	68b9      	ldr	r1, [r7, #8]
 8006224:	f000 faba 	bl	800679c <USER_SPI_read>
 8006228:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
 800623e:	4603      	mov	r3, r0
 8006240:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006242:	7bf8      	ldrb	r0, [r7, #15]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	f000 fb0d 	bl	8006868 <USER_SPI_write>
 800624e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	603a      	str	r2, [r7, #0]
 8006262:	71fb      	strb	r3, [r7, #7]
 8006264:	460b      	mov	r3, r1
 8006266:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006268:	79b9      	ldrb	r1, [r7, #6]
 800626a:	79fb      	ldrb	r3, [r7, #7]
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fb76 	bl	8006960 <USER_SPI_ioctl>
 8006274:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006288:	f7fb ff5a 	bl	8002140 <HAL_GetTick>
 800628c:	4603      	mov	r3, r0
 800628e:	4a04      	ldr	r2, [pc, #16]	; (80062a0 <SPI_Timer_On+0x20>)
 8006290:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006292:	4a04      	ldr	r2, [pc, #16]	; (80062a4 <SPI_Timer_On+0x24>)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6013      	str	r3, [r2, #0]
}
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20013580 	.word	0x20013580
 80062a4:	20013584 	.word	0x20013584

080062a8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80062ac:	f7fb ff48 	bl	8002140 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <SPI_Timer_Status+0x24>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	1ad2      	subs	r2, r2, r3
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <SPI_Timer_Status+0x28>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	bf34      	ite	cc
 80062c0:	2301      	movcc	r3, #1
 80062c2:	2300      	movcs	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20013580 	.word	0x20013580
 80062d0:	20013584 	.word	0x20013584

080062d4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af02      	add	r7, sp, #8
 80062da:	4603      	mov	r3, r0
 80062dc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80062de:	f107 020f 	add.w	r2, r7, #15
 80062e2:	1df9      	adds	r1, r7, #7
 80062e4:	2332      	movs	r3, #50	; 0x32
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	2301      	movs	r3, #1
 80062ea:	4804      	ldr	r0, [pc, #16]	; (80062fc <xchg_spi+0x28>)
 80062ec:	f7fd fb1f 	bl	800392e <HAL_SPI_TransmitReceive>
    return rxDat;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	200006e4 	.word	0x200006e4

08006300 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006300:	b590      	push	{r4, r7, lr}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	e00a      	b.n	8006326 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	18d4      	adds	r4, r2, r3
 8006316:	20ff      	movs	r0, #255	; 0xff
 8006318:	f7ff ffdc 	bl	80062d4 <xchg_spi>
 800631c:	4603      	mov	r3, r0
 800631e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3301      	adds	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3f0      	bcc.n	8006310 <rcvr_spi_multi+0x10>
	}
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	bd90      	pop	{r4, r7, pc}

08006338 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	e009      	b.n	800635c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff ffbf 	bl	80062d4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d3f1      	bcc.n	8006348 <xmit_spi_multi+0x10>
	}
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b086      	sub	sp, #24
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006376:	f7fb fee3 	bl	8002140 <HAL_GetTick>
 800637a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006380:	20ff      	movs	r0, #255	; 0xff
 8006382:	f7ff ffa7 	bl	80062d4 <xchg_spi>
 8006386:	4603      	mov	r3, r0
 8006388:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	2bff      	cmp	r3, #255	; 0xff
 800638e:	d007      	beq.n	80063a0 <wait_ready+0x32>
 8006390:	f7fb fed6 	bl	8002140 <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	429a      	cmp	r2, r3
 800639e:	d8ef      	bhi.n	8006380 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2bff      	cmp	r3, #255	; 0xff
 80063a4:	bf0c      	ite	eq
 80063a6:	2301      	moveq	r3, #1
 80063a8:	2300      	movne	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80063b8:	2201      	movs	r2, #1
 80063ba:	2102      	movs	r1, #2
 80063bc:	4803      	ldr	r0, [pc, #12]	; (80063cc <despiselect+0x18>)
 80063be:	f7fc fd7b 	bl	8002eb8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80063c2:	20ff      	movs	r0, #255	; 0xff
 80063c4:	f7ff ff86 	bl	80062d4 <xchg_spi>

}
 80063c8:	bf00      	nop
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40020000 	.word	0x40020000

080063d0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80063d4:	2200      	movs	r2, #0
 80063d6:	2102      	movs	r1, #2
 80063d8:	4809      	ldr	r0, [pc, #36]	; (8006400 <spiselect+0x30>)
 80063da:	f7fc fd6d 	bl	8002eb8 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80063de:	20ff      	movs	r0, #255	; 0xff
 80063e0:	f7ff ff78 	bl	80062d4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80063e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063e8:	f7ff ffc1 	bl	800636e <wait_ready>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <spiselect+0x26>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e002      	b.n	80063fc <spiselect+0x2c>

	despiselect();
 80063f6:	f7ff ffdd 	bl	80063b4 <despiselect>
	return 0;	/* Timeout */
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40020000 	.word	0x40020000

08006404 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800640e:	20c8      	movs	r0, #200	; 0xc8
 8006410:	f7ff ff36 	bl	8006280 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006414:	20ff      	movs	r0, #255	; 0xff
 8006416:	f7ff ff5d 	bl	80062d4 <xchg_spi>
 800641a:	4603      	mov	r3, r0
 800641c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2bff      	cmp	r3, #255	; 0xff
 8006422:	d104      	bne.n	800642e <rcvr_datablock+0x2a>
 8006424:	f7ff ff40 	bl	80062a8 <SPI_Timer_Status>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1f2      	bne.n	8006414 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	2bfe      	cmp	r3, #254	; 0xfe
 8006432:	d001      	beq.n	8006438 <rcvr_datablock+0x34>
 8006434:	2300      	movs	r3, #0
 8006436:	e00a      	b.n	800644e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff ff60 	bl	8006300 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006440:	20ff      	movs	r0, #255	; 0xff
 8006442:	f7ff ff47 	bl	80062d4 <xchg_spi>
 8006446:	20ff      	movs	r0, #255	; 0xff
 8006448:	f7ff ff44 	bl	80062d4 <xchg_spi>

	return 1;						/* Function succeeded */
 800644c:	2301      	movs	r3, #1
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	460b      	mov	r3, r1
 8006460:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006462:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006466:	f7ff ff82 	bl	800636e <wait_ready>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <xmit_datablock+0x1e>
 8006470:	2300      	movs	r3, #0
 8006472:	e01e      	b.n	80064b2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff ff2c 	bl	80062d4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	2bfd      	cmp	r3, #253	; 0xfd
 8006480:	d016      	beq.n	80064b0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff ff56 	bl	8006338 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800648c:	20ff      	movs	r0, #255	; 0xff
 800648e:	f7ff ff21 	bl	80062d4 <xchg_spi>
 8006492:	20ff      	movs	r0, #255	; 0xff
 8006494:	f7ff ff1e 	bl	80062d4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006498:	20ff      	movs	r0, #255	; 0xff
 800649a:	f7ff ff1b 	bl	80062d4 <xchg_spi>
 800649e:	4603      	mov	r3, r0
 80064a0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	f003 031f 	and.w	r3, r3, #31
 80064a8:	2b05      	cmp	r3, #5
 80064aa:	d001      	beq.n	80064b0 <xmit_datablock+0x5a>
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <xmit_datablock+0x5c>
	}
	return 1;
 80064b0:	2301      	movs	r3, #1
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b084      	sub	sp, #16
 80064be:	af00      	add	r7, sp, #0
 80064c0:	4603      	mov	r3, r0
 80064c2:	6039      	str	r1, [r7, #0]
 80064c4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80064c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	da0e      	bge.n	80064ec <send_cmd+0x32>
		cmd &= 0x7F;
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064d4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80064d6:	2100      	movs	r1, #0
 80064d8:	2037      	movs	r0, #55	; 0x37
 80064da:	f7ff ffee 	bl	80064ba <send_cmd>
 80064de:	4603      	mov	r3, r0
 80064e0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d901      	bls.n	80064ec <send_cmd+0x32>
 80064e8:	7bbb      	ldrb	r3, [r7, #14]
 80064ea:	e051      	b.n	8006590 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	2b0c      	cmp	r3, #12
 80064f0:	d008      	beq.n	8006504 <send_cmd+0x4a>
		despiselect();
 80064f2:	f7ff ff5f 	bl	80063b4 <despiselect>
		if (!spiselect()) return 0xFF;
 80064f6:	f7ff ff6b 	bl	80063d0 <spiselect>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <send_cmd+0x4a>
 8006500:	23ff      	movs	r3, #255	; 0xff
 8006502:	e045      	b.n	8006590 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650a:	b2db      	uxtb	r3, r3
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fee1 	bl	80062d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	0e1b      	lsrs	r3, r3, #24
 8006516:	b2db      	uxtb	r3, r3
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff fedb 	bl	80062d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	0c1b      	lsrs	r3, r3, #16
 8006522:	b2db      	uxtb	r3, r3
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fed5 	bl	80062d4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	0a1b      	lsrs	r3, r3, #8
 800652e:	b2db      	uxtb	r3, r3
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff fecf 	bl	80062d4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff feca 	bl	80062d4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <send_cmd+0x94>
 800654a:	2395      	movs	r3, #149	; 0x95
 800654c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	2b08      	cmp	r3, #8
 8006552:	d101      	bne.n	8006558 <send_cmd+0x9e>
 8006554:	2387      	movs	r3, #135	; 0x87
 8006556:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff feba 	bl	80062d4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006560:	79fb      	ldrb	r3, [r7, #7]
 8006562:	2b0c      	cmp	r3, #12
 8006564:	d102      	bne.n	800656c <send_cmd+0xb2>
 8006566:	20ff      	movs	r0, #255	; 0xff
 8006568:	f7ff feb4 	bl	80062d4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800656c:	230a      	movs	r3, #10
 800656e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006570:	20ff      	movs	r0, #255	; 0xff
 8006572:	f7ff feaf 	bl	80062d4 <xchg_spi>
 8006576:	4603      	mov	r3, r0
 8006578:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800657a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800657e:	2b00      	cmp	r3, #0
 8006580:	da05      	bge.n	800658e <send_cmd+0xd4>
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	3b01      	subs	r3, #1
 8006586:	73fb      	strb	r3, [r7, #15]
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1f0      	bne.n	8006570 <send_cmd+0xb6>

	return res;							/* Return received response */
 800658e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006590:	4618      	mov	r0, r3
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006598:	b590      	push	{r4, r7, lr}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <USER_SPI_initialize+0x14>
 80065a8:	2301      	movs	r3, #1
 80065aa:	e0d6      	b.n	800675a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80065ac:	4b6d      	ldr	r3, [pc, #436]	; (8006764 <USER_SPI_initialize+0x1cc>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <USER_SPI_initialize+0x2a>
 80065ba:	4b6a      	ldr	r3, [pc, #424]	; (8006764 <USER_SPI_initialize+0x1cc>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	e0cb      	b.n	800675a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80065c2:	4b69      	ldr	r3, [pc, #420]	; (8006768 <USER_SPI_initialize+0x1d0>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80065cc:	4b66      	ldr	r3, [pc, #408]	; (8006768 <USER_SPI_initialize+0x1d0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 80065d4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80065d6:	230a      	movs	r3, #10
 80065d8:	73fb      	strb	r3, [r7, #15]
 80065da:	e005      	b.n	80065e8 <USER_SPI_initialize+0x50>
 80065dc:	20ff      	movs	r0, #255	; 0xff
 80065de:	f7ff fe79 	bl	80062d4 <xchg_spi>
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	73fb      	strb	r3, [r7, #15]
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f6      	bne.n	80065dc <USER_SPI_initialize+0x44>

	ty = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80065f2:	2100      	movs	r1, #0
 80065f4:	2000      	movs	r0, #0
 80065f6:	f7ff ff60 	bl	80064ba <send_cmd>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	f040 808b 	bne.w	8006718 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006606:	f7ff fe3b 	bl	8006280 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800660a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800660e:	2008      	movs	r0, #8
 8006610:	f7ff ff53 	bl	80064ba <send_cmd>
 8006614:	4603      	mov	r3, r0
 8006616:	2b01      	cmp	r3, #1
 8006618:	d151      	bne.n	80066be <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]
 800661e:	e00d      	b.n	800663c <USER_SPI_initialize+0xa4>
 8006620:	7bfc      	ldrb	r4, [r7, #15]
 8006622:	20ff      	movs	r0, #255	; 0xff
 8006624:	f7ff fe56 	bl	80062d4 <xchg_spi>
 8006628:	4603      	mov	r3, r0
 800662a:	461a      	mov	r2, r3
 800662c:	f104 0310 	add.w	r3, r4, #16
 8006630:	443b      	add	r3, r7
 8006632:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	3301      	adds	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b03      	cmp	r3, #3
 8006640:	d9ee      	bls.n	8006620 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006642:	7abb      	ldrb	r3, [r7, #10]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d167      	bne.n	8006718 <USER_SPI_initialize+0x180>
 8006648:	7afb      	ldrb	r3, [r7, #11]
 800664a:	2baa      	cmp	r3, #170	; 0xaa
 800664c:	d164      	bne.n	8006718 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800664e:	bf00      	nop
 8006650:	f7ff fe2a 	bl	80062a8 <SPI_Timer_Status>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <USER_SPI_initialize+0xd2>
 800665a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800665e:	20a9      	movs	r0, #169	; 0xa9
 8006660:	f7ff ff2b 	bl	80064ba <send_cmd>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f2      	bne.n	8006650 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800666a:	f7ff fe1d 	bl	80062a8 <SPI_Timer_Status>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d051      	beq.n	8006718 <USER_SPI_initialize+0x180>
 8006674:	2100      	movs	r1, #0
 8006676:	203a      	movs	r0, #58	; 0x3a
 8006678:	f7ff ff1f 	bl	80064ba <send_cmd>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d14a      	bne.n	8006718 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
 8006686:	e00d      	b.n	80066a4 <USER_SPI_initialize+0x10c>
 8006688:	7bfc      	ldrb	r4, [r7, #15]
 800668a:	20ff      	movs	r0, #255	; 0xff
 800668c:	f7ff fe22 	bl	80062d4 <xchg_spi>
 8006690:	4603      	mov	r3, r0
 8006692:	461a      	mov	r2, r3
 8006694:	f104 0310 	add.w	r3, r4, #16
 8006698:	443b      	add	r3, r7
 800669a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	3301      	adds	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d9ee      	bls.n	8006688 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80066aa:	7a3b      	ldrb	r3, [r7, #8]
 80066ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <USER_SPI_initialize+0x120>
 80066b4:	230c      	movs	r3, #12
 80066b6:	e000      	b.n	80066ba <USER_SPI_initialize+0x122>
 80066b8:	2304      	movs	r3, #4
 80066ba:	737b      	strb	r3, [r7, #13]
 80066bc:	e02c      	b.n	8006718 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80066be:	2100      	movs	r1, #0
 80066c0:	20a9      	movs	r0, #169	; 0xa9
 80066c2:	f7ff fefa 	bl	80064ba <send_cmd>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d804      	bhi.n	80066d6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80066cc:	2302      	movs	r3, #2
 80066ce:	737b      	strb	r3, [r7, #13]
 80066d0:	23a9      	movs	r3, #169	; 0xa9
 80066d2:	73bb      	strb	r3, [r7, #14]
 80066d4:	e003      	b.n	80066de <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80066d6:	2301      	movs	r3, #1
 80066d8:	737b      	strb	r3, [r7, #13]
 80066da:	2301      	movs	r3, #1
 80066dc:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80066de:	bf00      	nop
 80066e0:	f7ff fde2 	bl	80062a8 <SPI_Timer_Status>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d007      	beq.n	80066fa <USER_SPI_initialize+0x162>
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fee3 	bl	80064ba <send_cmd>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f2      	bne.n	80066e0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80066fa:	f7ff fdd5 	bl	80062a8 <SPI_Timer_Status>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d007      	beq.n	8006714 <USER_SPI_initialize+0x17c>
 8006704:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006708:	2010      	movs	r0, #16
 800670a:	f7ff fed6 	bl	80064ba <send_cmd>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <USER_SPI_initialize+0x180>
				ty = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006718:	4a14      	ldr	r2, [pc, #80]	; (800676c <USER_SPI_initialize+0x1d4>)
 800671a:	7b7b      	ldrb	r3, [r7, #13]
 800671c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800671e:	f7ff fe49 	bl	80063b4 <despiselect>

	if (ty) {			/* OK */
 8006722:	7b7b      	ldrb	r3, [r7, #13]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d012      	beq.n	800674e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006728:	4b0f      	ldr	r3, [pc, #60]	; (8006768 <USER_SPI_initialize+0x1d0>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006732:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <USER_SPI_initialize+0x1d0>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0210 	orr.w	r2, r2, #16
 800673a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <USER_SPI_initialize+0x1cc>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	f023 0301 	bic.w	r3, r3, #1
 8006746:	b2da      	uxtb	r2, r3
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <USER_SPI_initialize+0x1cc>)
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	e002      	b.n	8006754 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800674e:	4b05      	ldr	r3, [pc, #20]	; (8006764 <USER_SPI_initialize+0x1cc>)
 8006750:	2201      	movs	r2, #1
 8006752:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006754:	4b03      	ldr	r3, [pc, #12]	; (8006764 <USER_SPI_initialize+0x1cc>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b2db      	uxtb	r3, r3
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	bd90      	pop	{r4, r7, pc}
 8006762:	bf00      	nop
 8006764:	200000d4 	.word	0x200000d4
 8006768:	200006e4 	.word	0x200006e4
 800676c:	2001357c 	.word	0x2001357c

08006770 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <USER_SPI_status+0x14>
 8006780:	2301      	movs	r3, #1
 8006782:	e002      	b.n	800678a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006784:	4b04      	ldr	r3, [pc, #16]	; (8006798 <USER_SPI_status+0x28>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b2db      	uxtb	r3, r3
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	200000d4 	.word	0x200000d4

0800679c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	607a      	str	r2, [r7, #4]
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d102      	bne.n	80067b8 <USER_SPI_read+0x1c>
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <USER_SPI_read+0x20>
 80067b8:	2304      	movs	r3, #4
 80067ba:	e04d      	b.n	8006858 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80067bc:	4b28      	ldr	r3, [pc, #160]	; (8006860 <USER_SPI_read+0xc4>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <USER_SPI_read+0x32>
 80067ca:	2303      	movs	r3, #3
 80067cc:	e044      	b.n	8006858 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80067ce:	4b25      	ldr	r3, [pc, #148]	; (8006864 <USER_SPI_read+0xc8>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	f003 0308 	and.w	r3, r3, #8
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <USER_SPI_read+0x44>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	025b      	lsls	r3, r3, #9
 80067de:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d111      	bne.n	800680a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	2011      	movs	r0, #17
 80067ea:	f7ff fe66 	bl	80064ba <send_cmd>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d129      	bne.n	8006848 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80067f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067f8:	68b8      	ldr	r0, [r7, #8]
 80067fa:	f7ff fe03 	bl	8006404 <rcvr_datablock>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d021      	beq.n	8006848 <USER_SPI_read+0xac>
			count = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	e01e      	b.n	8006848 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	2012      	movs	r0, #18
 800680e:	f7ff fe54 	bl	80064ba <send_cmd>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d117      	bne.n	8006848 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006818:	f44f 7100 	mov.w	r1, #512	; 0x200
 800681c:	68b8      	ldr	r0, [r7, #8]
 800681e:	f7ff fdf1 	bl	8006404 <rcvr_datablock>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <USER_SPI_read+0xa2>
				buff += 512;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800682e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	3b01      	subs	r3, #1
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1ed      	bne.n	8006818 <USER_SPI_read+0x7c>
 800683c:	e000      	b.n	8006840 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800683e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006840:	2100      	movs	r1, #0
 8006842:	200c      	movs	r0, #12
 8006844:	f7ff fe39 	bl	80064ba <send_cmd>
		}
	}
	despiselect();
 8006848:	f7ff fdb4 	bl	80063b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	bf14      	ite	ne
 8006852:	2301      	movne	r3, #1
 8006854:	2300      	moveq	r3, #0
 8006856:	b2db      	uxtb	r3, r3
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200000d4 	.word	0x200000d4
 8006864:	2001357c 	.word	0x2001357c

08006868 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	607a      	str	r2, [r7, #4]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	4603      	mov	r3, r0
 8006876:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d102      	bne.n	8006884 <USER_SPI_write+0x1c>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <USER_SPI_write+0x20>
 8006884:	2304      	movs	r3, #4
 8006886:	e063      	b.n	8006950 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006888:	4b33      	ldr	r3, [pc, #204]	; (8006958 <USER_SPI_write+0xf0>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d001      	beq.n	800689a <USER_SPI_write+0x32>
 8006896:	2303      	movs	r3, #3
 8006898:	e05a      	b.n	8006950 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800689a:	4b2f      	ldr	r3, [pc, #188]	; (8006958 <USER_SPI_write+0xf0>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f003 0304 	and.w	r3, r3, #4
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <USER_SPI_write+0x44>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e051      	b.n	8006950 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80068ac:	4b2b      	ldr	r3, [pc, #172]	; (800695c <USER_SPI_write+0xf4>)
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d102      	bne.n	80068be <USER_SPI_write+0x56>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	025b      	lsls	r3, r3, #9
 80068bc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d110      	bne.n	80068e6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	2018      	movs	r0, #24
 80068c8:	f7ff fdf7 	bl	80064ba <send_cmd>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d136      	bne.n	8006940 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80068d2:	21fe      	movs	r1, #254	; 0xfe
 80068d4:	68b8      	ldr	r0, [r7, #8]
 80068d6:	f7ff fdbe 	bl	8006456 <xmit_datablock>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d02f      	beq.n	8006940 <USER_SPI_write+0xd8>
			count = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	e02c      	b.n	8006940 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80068e6:	4b1d      	ldr	r3, [pc, #116]	; (800695c <USER_SPI_write+0xf4>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	f003 0306 	and.w	r3, r3, #6
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <USER_SPI_write+0x92>
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	2097      	movs	r0, #151	; 0x97
 80068f6:	f7ff fde0 	bl	80064ba <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	2019      	movs	r0, #25
 80068fe:	f7ff fddc 	bl	80064ba <send_cmd>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11b      	bne.n	8006940 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006908:	21fc      	movs	r1, #252	; 0xfc
 800690a:	68b8      	ldr	r0, [r7, #8]
 800690c:	f7ff fda3 	bl	8006456 <xmit_datablock>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <USER_SPI_write+0xc4>
				buff += 512;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800691c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	3b01      	subs	r3, #1
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1ee      	bne.n	8006908 <USER_SPI_write+0xa0>
 800692a:	e000      	b.n	800692e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800692c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800692e:	21fd      	movs	r1, #253	; 0xfd
 8006930:	2000      	movs	r0, #0
 8006932:	f7ff fd90 	bl	8006456 <xmit_datablock>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <USER_SPI_write+0xd8>
 800693c:	2301      	movs	r3, #1
 800693e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006940:	f7ff fd38 	bl	80063b4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	bf14      	ite	ne
 800694a:	2301      	movne	r3, #1
 800694c:	2300      	moveq	r3, #0
 800694e:	b2db      	uxtb	r3, r3
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	200000d4 	.word	0x200000d4
 800695c:	2001357c 	.word	0x2001357c

08006960 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08c      	sub	sp, #48	; 0x30
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	603a      	str	r2, [r7, #0]
 800696a:	71fb      	strb	r3, [r7, #7]
 800696c:	460b      	mov	r3, r1
 800696e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006970:	79fb      	ldrb	r3, [r7, #7]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <USER_SPI_ioctl+0x1a>
 8006976:	2304      	movs	r3, #4
 8006978:	e15a      	b.n	8006c30 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800697a:	4baf      	ldr	r3, [pc, #700]	; (8006c38 <USER_SPI_ioctl+0x2d8>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <USER_SPI_ioctl+0x2c>
 8006988:	2303      	movs	r3, #3
 800698a:	e151      	b.n	8006c30 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006992:	79bb      	ldrb	r3, [r7, #6]
 8006994:	2b04      	cmp	r3, #4
 8006996:	f200 8136 	bhi.w	8006c06 <USER_SPI_ioctl+0x2a6>
 800699a:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <USER_SPI_ioctl+0x40>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069b5 	.word	0x080069b5
 80069a4:	080069c9 	.word	0x080069c9
 80069a8:	08006c07 	.word	0x08006c07
 80069ac:	08006a75 	.word	0x08006a75
 80069b0:	08006b6b 	.word	0x08006b6b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80069b4:	f7ff fd0c 	bl	80063d0 <spiselect>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8127 	beq.w	8006c0e <USER_SPI_ioctl+0x2ae>
 80069c0:	2300      	movs	r3, #0
 80069c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80069c6:	e122      	b.n	8006c0e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80069c8:	2100      	movs	r1, #0
 80069ca:	2009      	movs	r0, #9
 80069cc:	f7ff fd75 	bl	80064ba <send_cmd>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 811d 	bne.w	8006c12 <USER_SPI_ioctl+0x2b2>
 80069d8:	f107 030c 	add.w	r3, r7, #12
 80069dc:	2110      	movs	r1, #16
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fd10 	bl	8006404 <rcvr_datablock>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 8113 	beq.w	8006c12 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80069ec:	7b3b      	ldrb	r3, [r7, #12]
 80069ee:	099b      	lsrs	r3, r3, #6
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d111      	bne.n	8006a1a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80069f6:	7d7b      	ldrb	r3, [r7, #21]
 80069f8:	461a      	mov	r2, r3
 80069fa:	7d3b      	ldrb	r3, [r7, #20]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	4413      	add	r3, r2
 8006a00:	461a      	mov	r2, r3
 8006a02:	7cfb      	ldrb	r3, [r7, #19]
 8006a04:	041b      	lsls	r3, r3, #16
 8006a06:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	029a      	lsls	r2, r3, #10
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	e028      	b.n	8006a6c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006a1a:	7c7b      	ldrb	r3, [r7, #17]
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	7dbb      	ldrb	r3, [r7, #22]
 8006a24:	09db      	lsrs	r3, r3, #7
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	4413      	add	r3, r2
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	7d7b      	ldrb	r3, [r7, #21]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f003 0306 	and.w	r3, r3, #6
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	4413      	add	r3, r2
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	3302      	adds	r3, #2
 8006a3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006a42:	7d3b      	ldrb	r3, [r7, #20]
 8006a44:	099b      	lsrs	r3, r3, #6
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	7cfb      	ldrb	r3, [r7, #19]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	441a      	add	r2, r3
 8006a50:	7cbb      	ldrb	r3, [r7, #18]
 8006a52:	029b      	lsls	r3, r3, #10
 8006a54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a58:	4413      	add	r3, r2
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006a5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a62:	3b09      	subs	r3, #9
 8006a64:	69fa      	ldr	r2, [r7, #28]
 8006a66:	409a      	lsls	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006a72:	e0ce      	b.n	8006c12 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006a74:	4b71      	ldr	r3, [pc, #452]	; (8006c3c <USER_SPI_ioctl+0x2dc>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d031      	beq.n	8006ae4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006a80:	2100      	movs	r1, #0
 8006a82:	208d      	movs	r0, #141	; 0x8d
 8006a84:	f7ff fd19 	bl	80064ba <send_cmd>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f040 80c3 	bne.w	8006c16 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006a90:	20ff      	movs	r0, #255	; 0xff
 8006a92:	f7ff fc1f 	bl	80062d4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006a96:	f107 030c 	add.w	r3, r7, #12
 8006a9a:	2110      	movs	r1, #16
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff fcb1 	bl	8006404 <rcvr_datablock>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 80b6 	beq.w	8006c16 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006aaa:	2330      	movs	r3, #48	; 0x30
 8006aac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006ab0:	e007      	b.n	8006ac2 <USER_SPI_ioctl+0x162>
 8006ab2:	20ff      	movs	r0, #255	; 0xff
 8006ab4:	f7ff fc0e 	bl	80062d4 <xchg_spi>
 8006ab8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006abc:	3b01      	subs	r3, #1
 8006abe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006ac2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f3      	bne.n	8006ab2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006aca:	7dbb      	ldrb	r3, [r7, #22]
 8006acc:	091b      	lsrs	r3, r3, #4
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	fa03 f202 	lsl.w	r2, r3, r2
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006ae2:	e098      	b.n	8006c16 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	2009      	movs	r0, #9
 8006ae8:	f7ff fce7 	bl	80064ba <send_cmd>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f040 8091 	bne.w	8006c16 <USER_SPI_ioctl+0x2b6>
 8006af4:	f107 030c 	add.w	r3, r7, #12
 8006af8:	2110      	movs	r1, #16
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff fc82 	bl	8006404 <rcvr_datablock>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8087 	beq.w	8006c16 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006b08:	4b4c      	ldr	r3, [pc, #304]	; (8006c3c <USER_SPI_ioctl+0x2dc>)
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d012      	beq.n	8006b3a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006b14:	7dbb      	ldrb	r3, [r7, #22]
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006b1c:	7dfa      	ldrb	r2, [r7, #23]
 8006b1e:	09d2      	lsrs	r2, r2, #7
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	4413      	add	r3, r2
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	7e7b      	ldrb	r3, [r7, #25]
 8006b28:	099b      	lsrs	r3, r3, #6
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	e013      	b.n	8006b62 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006b3a:	7dbb      	ldrb	r3, [r7, #22]
 8006b3c:	109b      	asrs	r3, r3, #2
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f003 031f 	and.w	r3, r3, #31
 8006b44:	3301      	adds	r3, #1
 8006b46:	7dfa      	ldrb	r2, [r7, #23]
 8006b48:	00d2      	lsls	r2, r2, #3
 8006b4a:	f002 0218 	and.w	r2, r2, #24
 8006b4e:	7df9      	ldrb	r1, [r7, #23]
 8006b50:	0949      	lsrs	r1, r1, #5
 8006b52:	b2c9      	uxtb	r1, r1
 8006b54:	440a      	add	r2, r1
 8006b56:	3201      	adds	r2, #1
 8006b58:	fb02 f303 	mul.w	r3, r2, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006b68:	e055      	b.n	8006c16 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006b6a:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <USER_SPI_ioctl+0x2dc>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	f003 0306 	and.w	r3, r3, #6
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d051      	beq.n	8006c1a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006b76:	f107 020c 	add.w	r2, r7, #12
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	210b      	movs	r1, #11
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff feee 	bl	8006960 <USER_SPI_ioctl>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d149      	bne.n	8006c1e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006b8a:	7b3b      	ldrb	r3, [r7, #12]
 8006b8c:	099b      	lsrs	r3, r3, #6
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <USER_SPI_ioctl+0x23e>
 8006b94:	7dbb      	ldrb	r3, [r7, #22]
 8006b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d041      	beq.n	8006c22 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	623b      	str	r3, [r7, #32]
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006bae:	4b23      	ldr	r3, [pc, #140]	; (8006c3c <USER_SPI_ioctl+0x2dc>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	f003 0308 	and.w	r3, r3, #8
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d105      	bne.n	8006bc6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	025b      	lsls	r3, r3, #9
 8006bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	025b      	lsls	r3, r3, #9
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc8:	2020      	movs	r0, #32
 8006bca:	f7ff fc76 	bl	80064ba <send_cmd>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d128      	bne.n	8006c26 <USER_SPI_ioctl+0x2c6>
 8006bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bd6:	2021      	movs	r0, #33	; 0x21
 8006bd8:	f7ff fc6f 	bl	80064ba <send_cmd>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d121      	bne.n	8006c26 <USER_SPI_ioctl+0x2c6>
 8006be2:	2100      	movs	r1, #0
 8006be4:	2026      	movs	r0, #38	; 0x26
 8006be6:	f7ff fc68 	bl	80064ba <send_cmd>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d11a      	bne.n	8006c26 <USER_SPI_ioctl+0x2c6>
 8006bf0:	f247 5030 	movw	r0, #30000	; 0x7530
 8006bf4:	f7ff fbbb 	bl	800636e <wait_ready>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d013      	beq.n	8006c26 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006c04:	e00f      	b.n	8006c26 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006c06:	2304      	movs	r3, #4
 8006c08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006c0c:	e00c      	b.n	8006c28 <USER_SPI_ioctl+0x2c8>
		break;
 8006c0e:	bf00      	nop
 8006c10:	e00a      	b.n	8006c28 <USER_SPI_ioctl+0x2c8>
		break;
 8006c12:	bf00      	nop
 8006c14:	e008      	b.n	8006c28 <USER_SPI_ioctl+0x2c8>
		break;
 8006c16:	bf00      	nop
 8006c18:	e006      	b.n	8006c28 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006c1a:	bf00      	nop
 8006c1c:	e004      	b.n	8006c28 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006c1e:	bf00      	nop
 8006c20:	e002      	b.n	8006c28 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006c22:	bf00      	nop
 8006c24:	e000      	b.n	8006c28 <USER_SPI_ioctl+0x2c8>
		break;
 8006c26:	bf00      	nop
	}

	despiselect();
 8006c28:	f7ff fbc4 	bl	80063b4 <despiselect>

	return res;
 8006c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3730      	adds	r7, #48	; 0x30
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	200000d4 	.word	0x200000d4
 8006c3c:	2001357c 	.word	0x2001357c

08006c40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	4a08      	ldr	r2, [pc, #32]	; (8006c70 <disk_status+0x30>)
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	79fa      	ldrb	r2, [r7, #7]
 8006c58:	4905      	ldr	r1, [pc, #20]	; (8006c70 <disk_status+0x30>)
 8006c5a:	440a      	add	r2, r1
 8006c5c:	7a12      	ldrb	r2, [r2, #8]
 8006c5e:	4610      	mov	r0, r2
 8006c60:	4798      	blx	r3
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	200135b0 	.word	0x200135b0

08006c74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	4a0d      	ldr	r2, [pc, #52]	; (8006cbc <disk_initialize+0x48>)
 8006c86:	5cd3      	ldrb	r3, [r2, r3]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d111      	bne.n	8006cb0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	4a0b      	ldr	r2, [pc, #44]	; (8006cbc <disk_initialize+0x48>)
 8006c90:	2101      	movs	r1, #1
 8006c92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	4a09      	ldr	r2, [pc, #36]	; (8006cbc <disk_initialize+0x48>)
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	79fa      	ldrb	r2, [r7, #7]
 8006ca2:	4906      	ldr	r1, [pc, #24]	; (8006cbc <disk_initialize+0x48>)
 8006ca4:	440a      	add	r2, r1
 8006ca6:	7a12      	ldrb	r2, [r2, #8]
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4798      	blx	r3
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	200135b0 	.word	0x200135b0

08006cc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006cc0:	b590      	push	{r4, r7, lr}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	607a      	str	r2, [r7, #4]
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	4a0a      	ldr	r2, [pc, #40]	; (8006cfc <disk_read+0x3c>)
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	689c      	ldr	r4, [r3, #8]
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	4a07      	ldr	r2, [pc, #28]	; (8006cfc <disk_read+0x3c>)
 8006ce0:	4413      	add	r3, r2
 8006ce2:	7a18      	ldrb	r0, [r3, #8]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	47a0      	blx	r4
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]
  return res;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd90      	pop	{r4, r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	200135b0 	.word	0x200135b0

08006d00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
 8006d0a:	603b      	str	r3, [r7, #0]
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	4a0a      	ldr	r2, [pc, #40]	; (8006d3c <disk_write+0x3c>)
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	68dc      	ldr	r4, [r3, #12]
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	4a07      	ldr	r2, [pc, #28]	; (8006d3c <disk_write+0x3c>)
 8006d20:	4413      	add	r3, r2
 8006d22:	7a18      	ldrb	r0, [r3, #8]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	47a0      	blx	r4
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	371c      	adds	r7, #28
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd90      	pop	{r4, r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	200135b0 	.word	0x200135b0

08006d40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	4603      	mov	r3, r0
 8006d48:	603a      	str	r2, [r7, #0]
 8006d4a:	71fb      	strb	r3, [r7, #7]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	4a09      	ldr	r2, [pc, #36]	; (8006d78 <disk_ioctl+0x38>)
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	79fa      	ldrb	r2, [r7, #7]
 8006d5e:	4906      	ldr	r1, [pc, #24]	; (8006d78 <disk_ioctl+0x38>)
 8006d60:	440a      	add	r2, r1
 8006d62:	7a10      	ldrb	r0, [r2, #8]
 8006d64:	79b9      	ldrb	r1, [r7, #6]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	4798      	blx	r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]
  return res;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	200135b0 	.word	0x200135b0

08006d7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3301      	adds	r3, #1
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006d8c:	89fb      	ldrh	r3, [r7, #14]
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	b21a      	sxth	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	b21b      	sxth	r3, r3
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	b21b      	sxth	r3, r3
 8006d9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006d9e:	89fb      	ldrh	r3, [r7, #14]
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3303      	adds	r3, #3
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	3202      	adds	r2, #2
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	3201      	adds	r2, #1
 8006dd2:	7812      	ldrb	r2, [r2, #0]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	7812      	ldrb	r2, [r2, #0]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
	return rv;
 8006de4:	68fb      	ldr	r3, [r7, #12]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	887a      	ldrh	r2, [r7, #2]
 8006e06:	b2d2      	uxtb	r2, r2
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	887b      	ldrh	r3, [r7, #2]
 8006e0c:	0a1b      	lsrs	r3, r3, #8
 8006e0e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	607a      	str	r2, [r7, #4]
 8006e16:	887a      	ldrh	r2, [r7, #2]
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	701a      	strb	r2, [r3, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	0a1b      	lsrs	r3, r3, #8
 8006e42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	b2d2      	uxtb	r2, r2
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	0a1b      	lsrs	r3, r3, #8
 8006e66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	1c5a      	adds	r2, r3, #1
 8006e6c:	607a      	str	r2, [r7, #4]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	b2d2      	uxtb	r2, r2
 8006e72:	701a      	strb	r2, [r3, #0]
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00d      	beq.n	8006eb6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	1c53      	adds	r3, r2, #1
 8006e9e:	613b      	str	r3, [r7, #16]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1c59      	adds	r1, r3, #1
 8006ea4:	6179      	str	r1, [r7, #20]
 8006ea6:	7812      	ldrb	r2, [r2, #0]
 8006ea8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	607b      	str	r3, [r7, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f1      	bne.n	8006e9a <mem_cpy+0x1a>
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006ec2:	b480      	push	{r7}
 8006ec4:	b087      	sub	sp, #28
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	617a      	str	r2, [r7, #20]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f3      	bne.n	8006ed2 <mem_set+0x10>
}
 8006eea:	bf00      	nop
 8006eec:	bf00      	nop
 8006eee:	371c      	adds	r7, #28
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006ef8:	b480      	push	{r7}
 8006efa:	b089      	sub	sp, #36	; 0x24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	61fb      	str	r3, [r7, #28]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	61fa      	str	r2, [r7, #28]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	61ba      	str	r2, [r7, #24]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	1acb      	subs	r3, r1, r3
 8006f24:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <mem_cmp+0x40>
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0eb      	beq.n	8006f10 <mem_cmp+0x18>

	return r;
 8006f38:	697b      	ldr	r3, [r7, #20]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3724      	adds	r7, #36	; 0x24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006f50:	e002      	b.n	8006f58 <chk_chr+0x12>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3301      	adds	r3, #1
 8006f56:	607b      	str	r3, [r7, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <chk_chr+0x26>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d1f2      	bne.n	8006f52 <chk_chr+0xc>
	return *str;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f86:	2300      	movs	r3, #0
 8006f88:	60bb      	str	r3, [r7, #8]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	e029      	b.n	8006fe4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006f90:	4a27      	ldr	r2, [pc, #156]	; (8007030 <chk_lock+0xb4>)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	4413      	add	r3, r2
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d01d      	beq.n	8006fda <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f9e:	4a24      	ldr	r2, [pc, #144]	; (8007030 <chk_lock+0xb4>)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	4413      	add	r3, r2
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d116      	bne.n	8006fde <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006fb0:	4a1f      	ldr	r2, [pc, #124]	; (8007030 <chk_lock+0xb4>)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	4413      	add	r3, r2
 8006fb8:	3304      	adds	r3, #4
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d10c      	bne.n	8006fde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006fc4:	4a1a      	ldr	r2, [pc, #104]	; (8007030 <chk_lock+0xb4>)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	4413      	add	r3, r2
 8006fcc:	3308      	adds	r3, #8
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d102      	bne.n	8006fde <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006fd8:	e007      	b.n	8006fea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d9d2      	bls.n	8006f90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d109      	bne.n	8007004 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d102      	bne.n	8006ffc <chk_lock+0x80>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d101      	bne.n	8007000 <chk_lock+0x84>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	e010      	b.n	8007022 <chk_lock+0xa6>
 8007000:	2312      	movs	r3, #18
 8007002:	e00e      	b.n	8007022 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d108      	bne.n	800701c <chk_lock+0xa0>
 800700a:	4a09      	ldr	r2, [pc, #36]	; (8007030 <chk_lock+0xb4>)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	4413      	add	r3, r2
 8007012:	330c      	adds	r3, #12
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701a:	d101      	bne.n	8007020 <chk_lock+0xa4>
 800701c:	2310      	movs	r3, #16
 800701e:	e000      	b.n	8007022 <chk_lock+0xa6>
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20013590 	.word	0x20013590

08007034 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800703a:	2300      	movs	r3, #0
 800703c:	607b      	str	r3, [r7, #4]
 800703e:	e002      	b.n	8007046 <enq_lock+0x12>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3301      	adds	r3, #1
 8007044:	607b      	str	r3, [r7, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d806      	bhi.n	800705a <enq_lock+0x26>
 800704c:	4a09      	ldr	r2, [pc, #36]	; (8007074 <enq_lock+0x40>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	4413      	add	r3, r2
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1f2      	bne.n	8007040 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b02      	cmp	r3, #2
 800705e:	bf14      	ite	ne
 8007060:	2301      	movne	r3, #1
 8007062:	2300      	moveq	r3, #0
 8007064:	b2db      	uxtb	r3, r3
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20013590 	.word	0x20013590

08007078 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007082:	2300      	movs	r3, #0
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	e01f      	b.n	80070c8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007088:	4a41      	ldr	r2, [pc, #260]	; (8007190 <inc_lock+0x118>)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	4413      	add	r3, r2
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d113      	bne.n	80070c2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800709a:	4a3d      	ldr	r2, [pc, #244]	; (8007190 <inc_lock+0x118>)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	4413      	add	r3, r2
 80070a2:	3304      	adds	r3, #4
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d109      	bne.n	80070c2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80070ae:	4a38      	ldr	r2, [pc, #224]	; (8007190 <inc_lock+0x118>)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	4413      	add	r3, r2
 80070b6:	3308      	adds	r3, #8
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80070be:	429a      	cmp	r2, r3
 80070c0:	d006      	beq.n	80070d0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3301      	adds	r3, #1
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d9dc      	bls.n	8007088 <inc_lock+0x10>
 80070ce:	e000      	b.n	80070d2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80070d0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d132      	bne.n	800713e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	e002      	b.n	80070e4 <inc_lock+0x6c>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3301      	adds	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d806      	bhi.n	80070f8 <inc_lock+0x80>
 80070ea:	4a29      	ldr	r2, [pc, #164]	; (8007190 <inc_lock+0x118>)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	4413      	add	r3, r2
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1f2      	bne.n	80070de <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d101      	bne.n	8007102 <inc_lock+0x8a>
 80070fe:	2300      	movs	r3, #0
 8007100:	e040      	b.n	8007184 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	4922      	ldr	r1, [pc, #136]	; (8007190 <inc_lock+0x118>)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	440b      	add	r3, r1
 800710e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	491e      	ldr	r1, [pc, #120]	; (8007190 <inc_lock+0x118>)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	011b      	lsls	r3, r3, #4
 800711a:	440b      	add	r3, r1
 800711c:	3304      	adds	r3, #4
 800711e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	695a      	ldr	r2, [r3, #20]
 8007124:	491a      	ldr	r1, [pc, #104]	; (8007190 <inc_lock+0x118>)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	440b      	add	r3, r1
 800712c:	3308      	adds	r3, #8
 800712e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007130:	4a17      	ldr	r2, [pc, #92]	; (8007190 <inc_lock+0x118>)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	011b      	lsls	r3, r3, #4
 8007136:	4413      	add	r3, r2
 8007138:	330c      	adds	r3, #12
 800713a:	2200      	movs	r2, #0
 800713c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d009      	beq.n	8007158 <inc_lock+0xe0>
 8007144:	4a12      	ldr	r2, [pc, #72]	; (8007190 <inc_lock+0x118>)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	4413      	add	r3, r2
 800714c:	330c      	adds	r3, #12
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <inc_lock+0xe0>
 8007154:	2300      	movs	r3, #0
 8007156:	e015      	b.n	8007184 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d108      	bne.n	8007170 <inc_lock+0xf8>
 800715e:	4a0c      	ldr	r2, [pc, #48]	; (8007190 <inc_lock+0x118>)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	4413      	add	r3, r2
 8007166:	330c      	adds	r3, #12
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	b29a      	uxth	r2, r3
 800716e:	e001      	b.n	8007174 <inc_lock+0xfc>
 8007170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007174:	4906      	ldr	r1, [pc, #24]	; (8007190 <inc_lock+0x118>)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	440b      	add	r3, r1
 800717c:	330c      	adds	r3, #12
 800717e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3301      	adds	r3, #1
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	20013590 	.word	0x20013590

08007194 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3b01      	subs	r3, #1
 80071a0:	607b      	str	r3, [r7, #4]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d825      	bhi.n	80071f4 <dec_lock+0x60>
		n = Files[i].ctr;
 80071a8:	4a17      	ldr	r2, [pc, #92]	; (8007208 <dec_lock+0x74>)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	011b      	lsls	r3, r3, #4
 80071ae:	4413      	add	r3, r2
 80071b0:	330c      	adds	r3, #12
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80071b6:	89fb      	ldrh	r3, [r7, #14]
 80071b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071bc:	d101      	bne.n	80071c2 <dec_lock+0x2e>
 80071be:	2300      	movs	r3, #0
 80071c0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80071c2:	89fb      	ldrh	r3, [r7, #14]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <dec_lock+0x3a>
 80071c8:	89fb      	ldrh	r3, [r7, #14]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80071ce:	4a0e      	ldr	r2, [pc, #56]	; (8007208 <dec_lock+0x74>)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	4413      	add	r3, r2
 80071d6:	330c      	adds	r3, #12
 80071d8:	89fa      	ldrh	r2, [r7, #14]
 80071da:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80071dc:	89fb      	ldrh	r3, [r7, #14]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d105      	bne.n	80071ee <dec_lock+0x5a>
 80071e2:	4a09      	ldr	r2, [pc, #36]	; (8007208 <dec_lock+0x74>)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	4413      	add	r3, r2
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	737b      	strb	r3, [r7, #13]
 80071f2:	e001      	b.n	80071f8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80071f4:	2302      	movs	r3, #2
 80071f6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80071f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	20013590 	.word	0x20013590

0800720c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e010      	b.n	800723c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800721a:	4a0d      	ldr	r2, [pc, #52]	; (8007250 <clear_lock+0x44>)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	4413      	add	r3, r2
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	429a      	cmp	r2, r3
 8007228:	d105      	bne.n	8007236 <clear_lock+0x2a>
 800722a:	4a09      	ldr	r2, [pc, #36]	; (8007250 <clear_lock+0x44>)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4413      	add	r3, r2
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	3301      	adds	r3, #1
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d9eb      	bls.n	800721a <clear_lock+0xe>
	}
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	20013590 	.word	0x20013590

08007254 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	78db      	ldrb	r3, [r3, #3]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d034      	beq.n	80072d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	7858      	ldrb	r0, [r3, #1]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007278:	2301      	movs	r3, #1
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	f7ff fd40 	bl	8006d00 <disk_write>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <sync_window+0x38>
			res = FR_DISK_ERR;
 8007286:	2301      	movs	r3, #1
 8007288:	73fb      	strb	r3, [r7, #15]
 800728a:	e022      	b.n	80072d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	1ad2      	subs	r2, r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d217      	bcs.n	80072d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	789b      	ldrb	r3, [r3, #2]
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	e010      	b.n	80072cc <sync_window+0x78>
					wsect += fs->fsize;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4413      	add	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	7858      	ldrb	r0, [r3, #1]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072be:	2301      	movs	r3, #1
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	f7ff fd1d 	bl	8006d00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d8eb      	bhi.n	80072aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d01b      	beq.n	800732c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff ffad 	bl	8007254 <sync_window>
 80072fa:	4603      	mov	r3, r0
 80072fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d113      	bne.n	800732c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	7858      	ldrb	r0, [r3, #1]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800730e:	2301      	movs	r3, #1
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	f7ff fcd5 	bl	8006cc0 <disk_read>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800731c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007320:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007322:	2301      	movs	r3, #1
 8007324:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff ff87 	bl	8007254 <sync_window>
 8007346:	4603      	mov	r3, r0
 8007348:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d158      	bne.n	8007402 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b03      	cmp	r3, #3
 8007356:	d148      	bne.n	80073ea <sync_fs+0xb2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	791b      	ldrb	r3, [r3, #4]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d144      	bne.n	80073ea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3330      	adds	r3, #48	; 0x30
 8007364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007368:	2100      	movs	r1, #0
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff fda9 	bl	8006ec2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3330      	adds	r3, #48	; 0x30
 8007374:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007378:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff fd38 	bl	8006df2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3330      	adds	r3, #48	; 0x30
 8007386:	4921      	ldr	r1, [pc, #132]	; (800740c <sync_fs+0xd4>)
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff fd4d 	bl	8006e28 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3330      	adds	r3, #48	; 0x30
 8007392:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007396:	491e      	ldr	r1, [pc, #120]	; (8007410 <sync_fs+0xd8>)
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fd45 	bl	8006e28 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3330      	adds	r3, #48	; 0x30
 80073a2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7ff fd3b 	bl	8006e28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3330      	adds	r3, #48	; 0x30
 80073b6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	4619      	mov	r1, r3
 80073c0:	4610      	mov	r0, r2
 80073c2:	f7ff fd31 	bl	8006e28 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	7858      	ldrb	r0, [r3, #1]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	2301      	movs	r3, #1
 80073e0:	f7ff fc8e 	bl	8006d00 <disk_write>
			fs->fsi_flag = 0;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2200      	movs	r2, #0
 80073f0:	2100      	movs	r1, #0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff fca4 	bl	8006d40 <disk_ioctl>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <sync_fs+0xca>
 80073fe:	2301      	movs	r3, #1
 8007400:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007402:	7bfb      	ldrb	r3, [r7, #15]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	41615252 	.word	0x41615252
 8007410:	61417272 	.word	0x61417272

08007414 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	3b02      	subs	r3, #2
 8007422:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	3b02      	subs	r3, #2
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d301      	bcc.n	8007434 <clust2sect+0x20>
 8007430:	2300      	movs	r3, #0
 8007432:	e008      	b.n	8007446 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	895b      	ldrh	r3, [r3, #10]
 8007438:	461a      	mov	r2, r3
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	fb03 f202 	mul.w	r2, r3, r2
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	4413      	add	r3, r2
}
 8007446:	4618      	mov	r0, r3
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d904      	bls.n	8007472 <get_fat+0x20>
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d302      	bcc.n	8007478 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007472:	2301      	movs	r3, #1
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	e08f      	b.n	8007598 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800747c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2b03      	cmp	r3, #3
 8007484:	d062      	beq.n	800754c <get_fat+0xfa>
 8007486:	2b03      	cmp	r3, #3
 8007488:	dc7c      	bgt.n	8007584 <get_fat+0x132>
 800748a:	2b01      	cmp	r3, #1
 800748c:	d002      	beq.n	8007494 <get_fat+0x42>
 800748e:	2b02      	cmp	r3, #2
 8007490:	d042      	beq.n	8007518 <get_fat+0xc6>
 8007492:	e077      	b.n	8007584 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6a1a      	ldr	r2, [r3, #32]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	0a5b      	lsrs	r3, r3, #9
 80074aa:	4413      	add	r3, r2
 80074ac:	4619      	mov	r1, r3
 80074ae:	6938      	ldr	r0, [r7, #16]
 80074b0:	f7ff ff14 	bl	80072dc <move_window>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d167      	bne.n	800758a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	60fa      	str	r2, [r7, #12]
 80074c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	4413      	add	r3, r2
 80074c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	6a1a      	ldr	r2, [r3, #32]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	0a5b      	lsrs	r3, r3, #9
 80074d6:	4413      	add	r3, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	6938      	ldr	r0, [r7, #16]
 80074dc:	f7ff fefe 	bl	80072dc <move_window>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d153      	bne.n	800758e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4413      	add	r3, r2
 80074f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	461a      	mov	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d002      	beq.n	800750e <get_fat+0xbc>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	091b      	lsrs	r3, r3, #4
 800750c:	e002      	b.n	8007514 <get_fat+0xc2>
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007514:	617b      	str	r3, [r7, #20]
			break;
 8007516:	e03f      	b.n	8007598 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	6a1a      	ldr	r2, [r3, #32]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	0a1b      	lsrs	r3, r3, #8
 8007520:	4413      	add	r3, r2
 8007522:	4619      	mov	r1, r3
 8007524:	6938      	ldr	r0, [r7, #16]
 8007526:	f7ff fed9 	bl	80072dc <move_window>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d130      	bne.n	8007592 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800753e:	4413      	add	r3, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff fc1b 	bl	8006d7c <ld_word>
 8007546:	4603      	mov	r3, r0
 8007548:	617b      	str	r3, [r7, #20]
			break;
 800754a:	e025      	b.n	8007598 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6a1a      	ldr	r2, [r3, #32]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	09db      	lsrs	r3, r3, #7
 8007554:	4413      	add	r3, r2
 8007556:	4619      	mov	r1, r3
 8007558:	6938      	ldr	r0, [r7, #16]
 800755a:	f7ff febf 	bl	80072dc <move_window>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d118      	bne.n	8007596 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007572:	4413      	add	r3, r2
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fc19 	bl	8006dac <ld_dword>
 800757a:	4603      	mov	r3, r0
 800757c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007580:	617b      	str	r3, [r7, #20]
			break;
 8007582:	e009      	b.n	8007598 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007584:	2301      	movs	r3, #1
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	e006      	b.n	8007598 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800758a:	bf00      	nop
 800758c:	e004      	b.n	8007598 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800758e:	bf00      	nop
 8007590:	e002      	b.n	8007598 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007592:	bf00      	nop
 8007594:	e000      	b.n	8007598 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007596:	bf00      	nop
		}
	}

	return val;
 8007598:	697b      	ldr	r3, [r7, #20]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80075a2:	b590      	push	{r4, r7, lr}
 80075a4:	b089      	sub	sp, #36	; 0x24
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80075ae:	2302      	movs	r3, #2
 80075b0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	f240 80d2 	bls.w	800775e <put_fat+0x1bc>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	f080 80cc 	bcs.w	800775e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	f000 8096 	beq.w	80076fc <put_fat+0x15a>
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	f300 80cd 	bgt.w	8007770 <put_fat+0x1ce>
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d002      	beq.n	80075e0 <put_fat+0x3e>
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d06e      	beq.n	80076bc <put_fat+0x11a>
 80075de:	e0c7      	b.n	8007770 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	61bb      	str	r3, [r7, #24]
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	085b      	lsrs	r3, r3, #1
 80075e8:	69ba      	ldr	r2, [r7, #24]
 80075ea:	4413      	add	r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6a1a      	ldr	r2, [r3, #32]
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	0a5b      	lsrs	r3, r3, #9
 80075f6:	4413      	add	r3, r2
 80075f8:	4619      	mov	r1, r3
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f7ff fe6e 	bl	80072dc <move_window>
 8007600:	4603      	mov	r3, r0
 8007602:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007604:	7ffb      	ldrb	r3, [r7, #31]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f040 80ab 	bne.w	8007762 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	1c59      	adds	r1, r3, #1
 8007616:	61b9      	str	r1, [r7, #24]
 8007618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761c:	4413      	add	r3, r2
 800761e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00d      	beq.n	8007646 <put_fat+0xa4>
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	b25b      	sxtb	r3, r3
 8007630:	f003 030f 	and.w	r3, r3, #15
 8007634:	b25a      	sxtb	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	b25b      	sxtb	r3, r3
 800763e:	4313      	orrs	r3, r2
 8007640:	b25b      	sxtb	r3, r3
 8007642:	b2db      	uxtb	r3, r3
 8007644:	e001      	b.n	800764a <put_fat+0xa8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a1a      	ldr	r2, [r3, #32]
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	0a5b      	lsrs	r3, r3, #9
 800765c:	4413      	add	r3, r2
 800765e:	4619      	mov	r1, r3
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7ff fe3b 	bl	80072dc <move_window>
 8007666:	4603      	mov	r3, r0
 8007668:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800766a:	7ffb      	ldrb	r3, [r7, #31]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d17a      	bne.n	8007766 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767c:	4413      	add	r3, r2
 800767e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <put_fat+0xf0>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	091b      	lsrs	r3, r3, #4
 800768e:	b2db      	uxtb	r3, r3
 8007690:	e00e      	b.n	80076b0 <put_fat+0x10e>
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	b25b      	sxtb	r3, r3
 8007698:	f023 030f 	bic.w	r3, r3, #15
 800769c:	b25a      	sxtb	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	0a1b      	lsrs	r3, r3, #8
 80076a2:	b25b      	sxtb	r3, r3
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	b25b      	sxtb	r3, r3
 80076aa:	4313      	orrs	r3, r2
 80076ac:	b25b      	sxtb	r3, r3
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	70da      	strb	r2, [r3, #3]
			break;
 80076ba:	e059      	b.n	8007770 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a1a      	ldr	r2, [r3, #32]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	0a1b      	lsrs	r3, r3, #8
 80076c4:	4413      	add	r3, r2
 80076c6:	4619      	mov	r1, r3
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7ff fe07 	bl	80072dc <move_window>
 80076ce:	4603      	mov	r3, r0
 80076d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076d2:	7ffb      	ldrb	r3, [r7, #31]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d148      	bne.n	800776a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80076e6:	4413      	add	r3, r2
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	b292      	uxth	r2, r2
 80076ec:	4611      	mov	r1, r2
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff fb7f 	bl	8006df2 <st_word>
			fs->wflag = 1;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2201      	movs	r2, #1
 80076f8:	70da      	strb	r2, [r3, #3]
			break;
 80076fa:	e039      	b.n	8007770 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a1a      	ldr	r2, [r3, #32]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	09db      	lsrs	r3, r3, #7
 8007704:	4413      	add	r3, r2
 8007706:	4619      	mov	r1, r3
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	f7ff fde7 	bl	80072dc <move_window>
 800770e:	4603      	mov	r3, r0
 8007710:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007712:	7ffb      	ldrb	r3, [r7, #31]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d12a      	bne.n	800776e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800772c:	4413      	add	r3, r2
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff fb3c 	bl	8006dac <ld_dword>
 8007734:	4603      	mov	r3, r0
 8007736:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800773a:	4323      	orrs	r3, r4
 800773c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800774c:	4413      	add	r3, r2
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff fb69 	bl	8006e28 <st_dword>
			fs->wflag = 1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2201      	movs	r2, #1
 800775a:	70da      	strb	r2, [r3, #3]
			break;
 800775c:	e008      	b.n	8007770 <put_fat+0x1ce>
		}
	}
 800775e:	bf00      	nop
 8007760:	e006      	b.n	8007770 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007762:	bf00      	nop
 8007764:	e004      	b.n	8007770 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007766:	bf00      	nop
 8007768:	e002      	b.n	8007770 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800776a:	bf00      	nop
 800776c:	e000      	b.n	8007770 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800776e:	bf00      	nop
	return res;
 8007770:	7ffb      	ldrb	r3, [r7, #31]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3724      	adds	r7, #36	; 0x24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd90      	pop	{r4, r7, pc}

0800777a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b088      	sub	sp, #32
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d904      	bls.n	80077a0 <remove_chain+0x26>
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	429a      	cmp	r2, r3
 800779e:	d301      	bcc.n	80077a4 <remove_chain+0x2a>
 80077a0:	2302      	movs	r3, #2
 80077a2:	e04b      	b.n	800783c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00c      	beq.n	80077c4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80077aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	69b8      	ldr	r0, [r7, #24]
 80077b2:	f7ff fef6 	bl	80075a2 <put_fat>
 80077b6:	4603      	mov	r3, r0
 80077b8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80077ba:	7ffb      	ldrb	r3, [r7, #31]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <remove_chain+0x4a>
 80077c0:	7ffb      	ldrb	r3, [r7, #31]
 80077c2:	e03b      	b.n	800783c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80077c4:	68b9      	ldr	r1, [r7, #8]
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f7ff fe43 	bl	8007452 <get_fat>
 80077cc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d031      	beq.n	8007838 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d101      	bne.n	80077de <remove_chain+0x64>
 80077da:	2302      	movs	r3, #2
 80077dc:	e02e      	b.n	800783c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077e4:	d101      	bne.n	80077ea <remove_chain+0x70>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e028      	b.n	800783c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80077ea:	2200      	movs	r2, #0
 80077ec:	68b9      	ldr	r1, [r7, #8]
 80077ee:	69b8      	ldr	r0, [r7, #24]
 80077f0:	f7ff fed7 	bl	80075a2 <put_fat>
 80077f4:	4603      	mov	r3, r0
 80077f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80077f8:	7ffb      	ldrb	r3, [r7, #31]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <remove_chain+0x88>
 80077fe:	7ffb      	ldrb	r3, [r7, #31]
 8007800:	e01c      	b.n	800783c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	695b      	ldr	r3, [r3, #20]
 800780a:	3b02      	subs	r3, #2
 800780c:	429a      	cmp	r2, r3
 800780e:	d20b      	bcs.n	8007828 <remove_chain+0xae>
			fs->free_clst++;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	791b      	ldrb	r3, [r3, #4]
 800781e:	f043 0301 	orr.w	r3, r3, #1
 8007822:	b2da      	uxtb	r2, r3
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	429a      	cmp	r2, r3
 8007834:	d3c6      	bcc.n	80077c4 <remove_chain+0x4a>
 8007836:	e000      	b.n	800783a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007838:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3720      	adds	r7, #32
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b088      	sub	sp, #32
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10d      	bne.n	8007876 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d004      	beq.n	8007870 <create_chain+0x2c>
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	429a      	cmp	r2, r3
 800786e:	d31b      	bcc.n	80078a8 <create_chain+0x64>
 8007870:	2301      	movs	r3, #1
 8007872:	61bb      	str	r3, [r7, #24]
 8007874:	e018      	b.n	80078a8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff fdea 	bl	8007452 <get_fat>
 800787e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d801      	bhi.n	800788a <create_chain+0x46>
 8007886:	2301      	movs	r3, #1
 8007888:	e070      	b.n	800796c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007890:	d101      	bne.n	8007896 <create_chain+0x52>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	e06a      	b.n	800796c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	429a      	cmp	r2, r3
 800789e:	d201      	bcs.n	80078a4 <create_chain+0x60>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	e063      	b.n	800796c <create_chain+0x128>
		scl = clst;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	3301      	adds	r3, #1
 80078b0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	69fa      	ldr	r2, [r7, #28]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d307      	bcc.n	80078cc <create_chain+0x88>
				ncl = 2;
 80078bc:	2302      	movs	r3, #2
 80078be:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80078c0:	69fa      	ldr	r2, [r7, #28]
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d901      	bls.n	80078cc <create_chain+0x88>
 80078c8:	2300      	movs	r3, #0
 80078ca:	e04f      	b.n	800796c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80078cc:	69f9      	ldr	r1, [r7, #28]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff fdbf 	bl	8007452 <get_fat>
 80078d4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00e      	beq.n	80078fa <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d003      	beq.n	80078ea <create_chain+0xa6>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078e8:	d101      	bne.n	80078ee <create_chain+0xaa>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	e03e      	b.n	800796c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d1da      	bne.n	80078ac <create_chain+0x68>
 80078f6:	2300      	movs	r3, #0
 80078f8:	e038      	b.n	800796c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80078fa:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80078fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007900:	69f9      	ldr	r1, [r7, #28]
 8007902:	6938      	ldr	r0, [r7, #16]
 8007904:	f7ff fe4d 	bl	80075a2 <put_fat>
 8007908:	4603      	mov	r3, r0
 800790a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800790c:	7dfb      	ldrb	r3, [r7, #23]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <create_chain+0xe2>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d006      	beq.n	8007926 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007918:	69fa      	ldr	r2, [r7, #28]
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6938      	ldr	r0, [r7, #16]
 800791e:	f7ff fe40 	bl	80075a2 <put_fat>
 8007922:	4603      	mov	r3, r0
 8007924:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d116      	bne.n	800795a <create_chain+0x116>
		fs->last_clst = ncl;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	3b02      	subs	r3, #2
 800793c:	429a      	cmp	r2, r3
 800793e:	d804      	bhi.n	800794a <create_chain+0x106>
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	1e5a      	subs	r2, r3, #1
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	791b      	ldrb	r3, [r3, #4]
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	b2da      	uxtb	r2, r3
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	711a      	strb	r2, [r3, #4]
 8007958:	e007      	b.n	800796a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d102      	bne.n	8007966 <create_chain+0x122>
 8007960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007964:	e000      	b.n	8007968 <create_chain+0x124>
 8007966:	2301      	movs	r3, #1
 8007968:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800796a:	69fb      	ldr	r3, [r7, #28]
}
 800796c:	4618      	mov	r0, r3
 800796e:	3720      	adds	r7, #32
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	3304      	adds	r3, #4
 800798a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	0a5b      	lsrs	r3, r3, #9
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	8952      	ldrh	r2, [r2, #10]
 8007994:	fbb3 f3f2 	udiv	r3, r3, r2
 8007998:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1d1a      	adds	r2, r3, #4
 800799e:	613a      	str	r2, [r7, #16]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <clmt_clust+0x3a>
 80079aa:	2300      	movs	r3, #0
 80079ac:	e010      	b.n	80079d0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d307      	bcc.n	80079c6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	3304      	adds	r3, #4
 80079c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079c4:	e7e9      	b.n	800799a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80079c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	4413      	add	r3, r2
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	371c      	adds	r7, #28
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f2:	d204      	bcs.n	80079fe <dir_sdi+0x22>
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <dir_sdi+0x26>
		return FR_INT_ERR;
 80079fe:	2302      	movs	r3, #2
 8007a00:	e063      	b.n	8007aca <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d106      	bne.n	8007a22 <dir_sdi+0x46>
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d902      	bls.n	8007a22 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10c      	bne.n	8007a42 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	095b      	lsrs	r3, r3, #5
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	8912      	ldrh	r2, [r2, #8]
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d301      	bcc.n	8007a38 <dir_sdi+0x5c>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e048      	b.n	8007aca <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	61da      	str	r2, [r3, #28]
 8007a40:	e029      	b.n	8007a96 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	895b      	ldrh	r3, [r3, #10]
 8007a46:	025b      	lsls	r3, r3, #9
 8007a48:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a4a:	e019      	b.n	8007a80 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6979      	ldr	r1, [r7, #20]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fcfe 	bl	8007452 <get_fat>
 8007a56:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a5e:	d101      	bne.n	8007a64 <dir_sdi+0x88>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e032      	b.n	8007aca <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d904      	bls.n	8007a74 <dir_sdi+0x98>
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d301      	bcc.n	8007a78 <dir_sdi+0x9c>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e028      	b.n	8007aca <dir_sdi+0xee>
			ofs -= csz;
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d2e1      	bcs.n	8007a4c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007a88:	6979      	ldr	r1, [r7, #20]
 8007a8a:	6938      	ldr	r0, [r7, #16]
 8007a8c:	f7ff fcc2 	bl	8007414 <clust2sect>
 8007a90:	4602      	mov	r2, r0
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <dir_sdi+0xcc>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e010      	b.n	8007aca <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	69da      	ldr	r2, [r3, #28]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	0a5b      	lsrs	r3, r3, #9
 8007ab0:	441a      	add	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac2:	441a      	add	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b086      	sub	sp, #24
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	3320      	adds	r3, #32
 8007ae8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <dir_next+0x28>
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007af8:	d301      	bcc.n	8007afe <dir_next+0x2c>
 8007afa:	2304      	movs	r3, #4
 8007afc:	e0aa      	b.n	8007c54 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 8098 	bne.w	8007c3a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	1c5a      	adds	r2, r3, #1
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10b      	bne.n	8007b34 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	095b      	lsrs	r3, r3, #5
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	8912      	ldrh	r2, [r2, #8]
 8007b24:	4293      	cmp	r3, r2
 8007b26:	f0c0 8088 	bcc.w	8007c3a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	61da      	str	r2, [r3, #28]
 8007b30:	2304      	movs	r3, #4
 8007b32:	e08f      	b.n	8007c54 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	0a5b      	lsrs	r3, r3, #9
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	8952      	ldrh	r2, [r2, #10]
 8007b3c:	3a01      	subs	r2, #1
 8007b3e:	4013      	ands	r3, r2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d17a      	bne.n	8007c3a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	f7ff fc80 	bl	8007452 <get_fat>
 8007b52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d801      	bhi.n	8007b5e <dir_next+0x8c>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	e07a      	b.n	8007c54 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b64:	d101      	bne.n	8007b6a <dir_next+0x98>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e074      	b.n	8007c54 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d358      	bcc.n	8007c26 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	61da      	str	r2, [r3, #28]
 8007b80:	2304      	movs	r3, #4
 8007b82:	e067      	b.n	8007c54 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f7ff fe59 	bl	8007844 <create_chain>
 8007b92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <dir_next+0xcc>
 8007b9a:	2307      	movs	r3, #7
 8007b9c:	e05a      	b.n	8007c54 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <dir_next+0xd6>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e055      	b.n	8007c54 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bae:	d101      	bne.n	8007bb4 <dir_next+0xe2>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e04f      	b.n	8007c54 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7ff fb4d 	bl	8007254 <sync_window>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <dir_next+0xf2>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e047      	b.n	8007c54 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3330      	adds	r3, #48	; 0x30
 8007bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff f977 	bl	8006ec2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	613b      	str	r3, [r7, #16]
 8007bd8:	6979      	ldr	r1, [r7, #20]
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7ff fc1a 	bl	8007414 <clust2sect>
 8007be0:	4602      	mov	r2, r0
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	62da      	str	r2, [r3, #44]	; 0x2c
 8007be6:	e012      	b.n	8007c0e <dir_next+0x13c>
						fs->wflag = 1;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7ff fb30 	bl	8007254 <sync_window>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <dir_next+0x12c>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e02a      	b.n	8007c54 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	3301      	adds	r3, #1
 8007c02:	613b      	str	r3, [r7, #16]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	895b      	ldrh	r3, [r3, #10]
 8007c12:	461a      	mov	r2, r3
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d3e6      	bcc.n	8007be8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad2      	subs	r2, r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007c2c:	6979      	ldr	r1, [r7, #20]
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7ff fbf0 	bl	8007414 <clust2sect>
 8007c34:	4602      	mov	r2, r0
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c4c:	441a      	add	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff feb4 	bl	80079dc <dir_sdi>
 8007c74:	4603      	mov	r3, r0
 8007c76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d12b      	bne.n	8007cd6 <dir_alloc+0x7a>
		n = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	4619      	mov	r1, r3
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f7ff fb27 	bl	80072dc <move_window>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007c92:	7dfb      	ldrb	r3, [r7, #23]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d11d      	bne.n	8007cd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2be5      	cmp	r3, #229	; 0xe5
 8007ca0:	d004      	beq.n	8007cac <dir_alloc+0x50>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d107      	bne.n	8007cbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	613b      	str	r3, [r7, #16]
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d102      	bne.n	8007cc0 <dir_alloc+0x64>
 8007cba:	e00c      	b.n	8007cd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff ff05 	bl	8007ad2 <dir_next>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0d7      	beq.n	8007c82 <dir_alloc+0x26>
 8007cd2:	e000      	b.n	8007cd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007cd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d101      	bne.n	8007ce0 <dir_alloc+0x84>
 8007cdc:	2307      	movs	r3, #7
 8007cde:	75fb      	strb	r3, [r7, #23]
	return res;
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	331a      	adds	r3, #26
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff f83f 	bl	8006d7c <ld_word>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d109      	bne.n	8007d1e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	3314      	adds	r3, #20
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff f834 	bl	8006d7c <ld_word>
 8007d14:	4603      	mov	r3, r0
 8007d16:	041b      	lsls	r3, r3, #16
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	60b9      	str	r1, [r7, #8]
 8007d32:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	331a      	adds	r3, #26
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	b292      	uxth	r2, r2
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff f857 	bl	8006df2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d109      	bne.n	8007d60 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f103 0214 	add.w	r2, r3, #20
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	0c1b      	lsrs	r3, r3, #16
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f7ff f849 	bl	8006df2 <st_word>
	}
}
 8007d60:	bf00      	nop
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d76:	2100      	movs	r1, #0
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff fe2f 	bl	80079dc <dir_sdi>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d001      	beq.n	8007d8c <dir_find+0x24>
 8007d88:	7dfb      	ldrb	r3, [r7, #23]
 8007d8a:	e03e      	b.n	8007e0a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	4619      	mov	r1, r3
 8007d92:	6938      	ldr	r0, [r7, #16]
 8007d94:	f7ff faa2 	bl	80072dc <move_window>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d12f      	bne.n	8007e02 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <dir_find+0x4e>
 8007db0:	2304      	movs	r3, #4
 8007db2:	75fb      	strb	r3, [r7, #23]
 8007db4:	e028      	b.n	8007e08 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	330b      	adds	r3, #11
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	330b      	adds	r3, #11
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <dir_find+0x86>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a18      	ldr	r0, [r3, #32]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3324      	adds	r3, #36	; 0x24
 8007de0:	220b      	movs	r2, #11
 8007de2:	4619      	mov	r1, r3
 8007de4:	f7ff f888 	bl	8006ef8 <mem_cmp>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007dee:	2100      	movs	r1, #0
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff fe6e 	bl	8007ad2 <dir_next>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0c5      	beq.n	8007d8c <dir_find+0x24>
 8007e00:	e002      	b.n	8007e08 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007e02:	bf00      	nop
 8007e04:	e000      	b.n	8007e08 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e06:	bf00      	nop

	return res;
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007e20:	2101      	movs	r1, #1
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ff1a 	bl	8007c5c <dir_alloc>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d11c      	bne.n	8007e6c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	4619      	mov	r1, r3
 8007e38:	68b8      	ldr	r0, [r7, #8]
 8007e3a:	f7ff fa4f 	bl	80072dc <move_window>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d111      	bne.n	8007e6c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff f836 	bl	8006ec2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a18      	ldr	r0, [r3, #32]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3324      	adds	r3, #36	; 0x24
 8007e5e:	220b      	movs	r2, #11
 8007e60:	4619      	mov	r1, r3
 8007e62:	f7ff f80d 	bl	8006e80 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3324      	adds	r3, #36	; 0x24
 8007e8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007e8e:	220b      	movs	r2, #11
 8007e90:	2120      	movs	r1, #32
 8007e92:	68b8      	ldr	r0, [r7, #8]
 8007e94:	f7ff f815 	bl	8006ec2 <mem_set>
	si = i = 0; ni = 8;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	2308      	movs	r3, #8
 8007ea2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	61fa      	str	r2, [r7, #28]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	4413      	add	r3, r2
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007eb2:	7efb      	ldrb	r3, [r7, #27]
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	d94e      	bls.n	8007f56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007eb8:	7efb      	ldrb	r3, [r7, #27]
 8007eba:	2b2f      	cmp	r3, #47	; 0x2f
 8007ebc:	d006      	beq.n	8007ecc <create_name+0x54>
 8007ebe:	7efb      	ldrb	r3, [r7, #27]
 8007ec0:	2b5c      	cmp	r3, #92	; 0x5c
 8007ec2:	d110      	bne.n	8007ee6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007ec4:	e002      	b.n	8007ecc <create_name+0x54>
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	3301      	adds	r3, #1
 8007eca:	61fb      	str	r3, [r7, #28]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b2f      	cmp	r3, #47	; 0x2f
 8007ed6:	d0f6      	beq.n	8007ec6 <create_name+0x4e>
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	4413      	add	r3, r2
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b5c      	cmp	r3, #92	; 0x5c
 8007ee2:	d0f0      	beq.n	8007ec6 <create_name+0x4e>
			break;
 8007ee4:	e038      	b.n	8007f58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007ee6:	7efb      	ldrb	r3, [r7, #27]
 8007ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8007eea:	d003      	beq.n	8007ef4 <create_name+0x7c>
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d30c      	bcc.n	8007f0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2b0b      	cmp	r3, #11
 8007ef8:	d002      	beq.n	8007f00 <create_name+0x88>
 8007efa:	7efb      	ldrb	r3, [r7, #27]
 8007efc:	2b2e      	cmp	r3, #46	; 0x2e
 8007efe:	d001      	beq.n	8007f04 <create_name+0x8c>
 8007f00:	2306      	movs	r3, #6
 8007f02:	e044      	b.n	8007f8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007f04:	2308      	movs	r3, #8
 8007f06:	613b      	str	r3, [r7, #16]
 8007f08:	230b      	movs	r3, #11
 8007f0a:	617b      	str	r3, [r7, #20]
			continue;
 8007f0c:	e022      	b.n	8007f54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007f0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	da04      	bge.n	8007f20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007f16:	7efb      	ldrb	r3, [r7, #27]
 8007f18:	3b80      	subs	r3, #128	; 0x80
 8007f1a:	4a1f      	ldr	r2, [pc, #124]	; (8007f98 <create_name+0x120>)
 8007f1c:	5cd3      	ldrb	r3, [r2, r3]
 8007f1e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007f20:	7efb      	ldrb	r3, [r7, #27]
 8007f22:	4619      	mov	r1, r3
 8007f24:	481d      	ldr	r0, [pc, #116]	; (8007f9c <create_name+0x124>)
 8007f26:	f7ff f80e 	bl	8006f46 <chk_chr>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <create_name+0xbc>
 8007f30:	2306      	movs	r3, #6
 8007f32:	e02c      	b.n	8007f8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007f34:	7efb      	ldrb	r3, [r7, #27]
 8007f36:	2b60      	cmp	r3, #96	; 0x60
 8007f38:	d905      	bls.n	8007f46 <create_name+0xce>
 8007f3a:	7efb      	ldrb	r3, [r7, #27]
 8007f3c:	2b7a      	cmp	r3, #122	; 0x7a
 8007f3e:	d802      	bhi.n	8007f46 <create_name+0xce>
 8007f40:	7efb      	ldrb	r3, [r7, #27]
 8007f42:	3b20      	subs	r3, #32
 8007f44:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	613a      	str	r2, [r7, #16]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	4413      	add	r3, r2
 8007f50:	7efa      	ldrb	r2, [r7, #27]
 8007f52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007f54:	e7a6      	b.n	8007ea4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	441a      	add	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <create_name+0xf4>
 8007f68:	2306      	movs	r3, #6
 8007f6a:	e010      	b.n	8007f8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2be5      	cmp	r3, #229	; 0xe5
 8007f72:	d102      	bne.n	8007f7a <create_name+0x102>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	2205      	movs	r2, #5
 8007f78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007f7a:	7efb      	ldrb	r3, [r7, #27]
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d801      	bhi.n	8007f84 <create_name+0x10c>
 8007f80:	2204      	movs	r2, #4
 8007f82:	e000      	b.n	8007f86 <create_name+0x10e>
 8007f84:	2200      	movs	r2, #0
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	330b      	adds	r3, #11
 8007f8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007f8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	0800a1f0 	.word	0x0800a1f0
 8007f9c:	0800a060 	.word	0x0800a060

08007fa0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007fb4:	e002      	b.n	8007fbc <follow_path+0x1c>
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b2f      	cmp	r3, #47	; 0x2f
 8007fc2:	d0f8      	beq.n	8007fb6 <follow_path+0x16>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	2b5c      	cmp	r3, #92	; 0x5c
 8007fca:	d0f4      	beq.n	8007fb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b1f      	cmp	r3, #31
 8007fd8:	d80a      	bhi.n	8007ff0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2280      	movs	r2, #128	; 0x80
 8007fde:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff fcf9 	bl	80079dc <dir_sdi>
 8007fea:	4603      	mov	r3, r0
 8007fec:	75fb      	strb	r3, [r7, #23]
 8007fee:	e043      	b.n	8008078 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ff0:	463b      	mov	r3, r7
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff ff3f 	bl	8007e78 <create_name>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d134      	bne.n	800806e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff feaf 	bl	8007d68 <dir_find>
 800800a:	4603      	mov	r3, r0
 800800c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008014:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b04      	cmp	r3, #4
 8008020:	d127      	bne.n	8008072 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008022:	7afb      	ldrb	r3, [r7, #11]
 8008024:	f003 0304 	and.w	r3, r3, #4
 8008028:	2b00      	cmp	r3, #0
 800802a:	d122      	bne.n	8008072 <follow_path+0xd2>
 800802c:	2305      	movs	r3, #5
 800802e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008030:	e01f      	b.n	8008072 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008032:	7afb      	ldrb	r3, [r7, #11]
 8008034:	f003 0304 	and.w	r3, r3, #4
 8008038:	2b00      	cmp	r3, #0
 800803a:	d11c      	bne.n	8008076 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	799b      	ldrb	r3, [r3, #6]
 8008040:	f003 0310 	and.w	r3, r3, #16
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008048:	2305      	movs	r3, #5
 800804a:	75fb      	strb	r3, [r7, #23]
 800804c:	e014      	b.n	8008078 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805c:	4413      	add	r3, r2
 800805e:	4619      	mov	r1, r3
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f7ff fe42 	bl	8007cea <ld_clust>
 8008066:	4602      	mov	r2, r0
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800806c:	e7c0      	b.n	8007ff0 <follow_path+0x50>
			if (res != FR_OK) break;
 800806e:	bf00      	nop
 8008070:	e002      	b.n	8008078 <follow_path+0xd8>
				break;
 8008072:	bf00      	nop
 8008074:	e000      	b.n	8008078 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008076:	bf00      	nop
			}
		}
	}

	return res;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008082:	b480      	push	{r7}
 8008084:	b087      	sub	sp, #28
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800808a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800808e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d031      	beq.n	80080fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	e002      	b.n	80080a6 <get_ldnumber+0x24>
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	3301      	adds	r3, #1
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	d903      	bls.n	80080b6 <get_ldnumber+0x34>
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b3a      	cmp	r3, #58	; 0x3a
 80080b4:	d1f4      	bne.n	80080a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b3a      	cmp	r3, #58	; 0x3a
 80080bc:	d11c      	bne.n	80080f8 <get_ldnumber+0x76>
			tp = *path;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	60fa      	str	r2, [r7, #12]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	3b30      	subs	r3, #48	; 0x30
 80080ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b09      	cmp	r3, #9
 80080d4:	d80e      	bhi.n	80080f4 <get_ldnumber+0x72>
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d10a      	bne.n	80080f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d107      	bne.n	80080f4 <get_ldnumber+0x72>
					vol = (int)i;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	3301      	adds	r3, #1
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	e002      	b.n	80080fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80080f8:	2300      	movs	r3, #0
 80080fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80080fc:	693b      	ldr	r3, [r7, #16]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	70da      	strb	r2, [r3, #3]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008122:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff f8d8 	bl	80072dc <move_window>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <check_fs+0x2a>
 8008132:	2304      	movs	r3, #4
 8008134:	e038      	b.n	80081a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	3330      	adds	r3, #48	; 0x30
 800813a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800813e:	4618      	mov	r0, r3
 8008140:	f7fe fe1c 	bl	8006d7c <ld_word>
 8008144:	4603      	mov	r3, r0
 8008146:	461a      	mov	r2, r3
 8008148:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800814c:	429a      	cmp	r2, r3
 800814e:	d001      	beq.n	8008154 <check_fs+0x48>
 8008150:	2303      	movs	r3, #3
 8008152:	e029      	b.n	80081a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800815a:	2be9      	cmp	r3, #233	; 0xe9
 800815c:	d009      	beq.n	8008172 <check_fs+0x66>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008164:	2beb      	cmp	r3, #235	; 0xeb
 8008166:	d11e      	bne.n	80081a6 <check_fs+0x9a>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800816e:	2b90      	cmp	r3, #144	; 0x90
 8008170:	d119      	bne.n	80081a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3330      	adds	r3, #48	; 0x30
 8008176:	3336      	adds	r3, #54	; 0x36
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe fe17 	bl	8006dac <ld_dword>
 800817e:	4603      	mov	r3, r0
 8008180:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008184:	4a0a      	ldr	r2, [pc, #40]	; (80081b0 <check_fs+0xa4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d101      	bne.n	800818e <check_fs+0x82>
 800818a:	2300      	movs	r3, #0
 800818c:	e00c      	b.n	80081a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3330      	adds	r3, #48	; 0x30
 8008192:	3352      	adds	r3, #82	; 0x52
 8008194:	4618      	mov	r0, r3
 8008196:	f7fe fe09 	bl	8006dac <ld_dword>
 800819a:	4603      	mov	r3, r0
 800819c:	4a05      	ldr	r2, [pc, #20]	; (80081b4 <check_fs+0xa8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d101      	bne.n	80081a6 <check_fs+0x9a>
 80081a2:	2300      	movs	r3, #0
 80081a4:	e000      	b.n	80081a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80081a6:	2302      	movs	r3, #2
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	00544146 	.word	0x00544146
 80081b4:	33544146 	.word	0x33544146

080081b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b096      	sub	sp, #88	; 0x58
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	4613      	mov	r3, r2
 80081c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f7ff ff58 	bl	8008082 <get_ldnumber>
 80081d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80081d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da01      	bge.n	80081de <find_volume+0x26>
 80081da:	230b      	movs	r3, #11
 80081dc:	e22d      	b.n	800863a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80081de:	4aa1      	ldr	r2, [pc, #644]	; (8008464 <find_volume+0x2ac>)
 80081e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <find_volume+0x3a>
 80081ee:	230c      	movs	r3, #12
 80081f0:	e223      	b.n	800863a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	f023 0301 	bic.w	r3, r3, #1
 80081fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01a      	beq.n	800823e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	4618      	mov	r0, r3
 800820e:	f7fe fd17 	bl	8006c40 <disk_status>
 8008212:	4603      	mov	r3, r0
 8008214:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008218:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10c      	bne.n	800823e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d007      	beq.n	800823a <find_volume+0x82>
 800822a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008236:	230a      	movs	r3, #10
 8008238:	e1ff      	b.n	800863a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800823a:	2300      	movs	r3, #0
 800823c:	e1fd      	b.n	800863a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	2200      	movs	r2, #0
 8008242:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008246:	b2da      	uxtb	r2, r3
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	785b      	ldrb	r3, [r3, #1]
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fd0f 	bl	8006c74 <disk_initialize>
 8008256:	4603      	mov	r3, r0
 8008258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800825c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008268:	2303      	movs	r3, #3
 800826a:	e1e6      	b.n	800863a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <find_volume+0xca>
 8008272:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008276:	f003 0304 	and.w	r3, r3, #4
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800827e:	230a      	movs	r3, #10
 8008280:	e1db      	b.n	800863a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008286:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800828a:	f7ff ff3f 	bl	800810c <check_fs>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008298:	2b02      	cmp	r3, #2
 800829a:	d149      	bne.n	8008330 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800829c:	2300      	movs	r3, #0
 800829e:	643b      	str	r3, [r7, #64]	; 0x40
 80082a0:	e01e      	b.n	80082e0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082aa:	011b      	lsls	r3, r3, #4
 80082ac:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80082b0:	4413      	add	r3, r2
 80082b2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80082b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b6:	3304      	adds	r3, #4
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d006      	beq.n	80082cc <find_volume+0x114>
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	3308      	adds	r3, #8
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fd72 	bl	8006dac <ld_dword>
 80082c8:	4602      	mov	r2, r0
 80082ca:	e000      	b.n	80082ce <find_volume+0x116>
 80082cc:	2200      	movs	r2, #0
 80082ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	3358      	adds	r3, #88	; 0x58
 80082d4:	443b      	add	r3, r7
 80082d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80082da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082dc:	3301      	adds	r3, #1
 80082de:	643b      	str	r3, [r7, #64]	; 0x40
 80082e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d9dd      	bls.n	80082a2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80082e6:	2300      	movs	r3, #0
 80082e8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80082ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <find_volume+0x13e>
 80082f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f2:	3b01      	subs	r3, #1
 80082f4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80082f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	3358      	adds	r3, #88	; 0x58
 80082fc:	443b      	add	r3, r7
 80082fe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008302:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <find_volume+0x15e>
 800830a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800830c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800830e:	f7ff fefd 	bl	800810c <check_fs>
 8008312:	4603      	mov	r3, r0
 8008314:	e000      	b.n	8008318 <find_volume+0x160>
 8008316:	2303      	movs	r3, #3
 8008318:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800831c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008320:	2b01      	cmp	r3, #1
 8008322:	d905      	bls.n	8008330 <find_volume+0x178>
 8008324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008326:	3301      	adds	r3, #1
 8008328:	643b      	str	r3, [r7, #64]	; 0x40
 800832a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800832c:	2b03      	cmp	r3, #3
 800832e:	d9e2      	bls.n	80082f6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008334:	2b04      	cmp	r3, #4
 8008336:	d101      	bne.n	800833c <find_volume+0x184>
 8008338:	2301      	movs	r3, #1
 800833a:	e17e      	b.n	800863a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800833c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008340:	2b01      	cmp	r3, #1
 8008342:	d901      	bls.n	8008348 <find_volume+0x190>
 8008344:	230d      	movs	r3, #13
 8008346:	e178      	b.n	800863a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834a:	3330      	adds	r3, #48	; 0x30
 800834c:	330b      	adds	r3, #11
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe fd14 	bl	8006d7c <ld_word>
 8008354:	4603      	mov	r3, r0
 8008356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800835a:	d001      	beq.n	8008360 <find_volume+0x1a8>
 800835c:	230d      	movs	r3, #13
 800835e:	e16c      	b.n	800863a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008362:	3330      	adds	r3, #48	; 0x30
 8008364:	3316      	adds	r3, #22
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fd08 	bl	8006d7c <ld_word>
 800836c:	4603      	mov	r3, r0
 800836e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008372:	2b00      	cmp	r3, #0
 8008374:	d106      	bne.n	8008384 <find_volume+0x1cc>
 8008376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008378:	3330      	adds	r3, #48	; 0x30
 800837a:	3324      	adds	r3, #36	; 0x24
 800837c:	4618      	mov	r0, r3
 800837e:	f7fe fd15 	bl	8006dac <ld_dword>
 8008382:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008388:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008392:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	789b      	ldrb	r3, [r3, #2]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d005      	beq.n	80083a8 <find_volume+0x1f0>
 800839c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839e:	789b      	ldrb	r3, [r3, #2]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d001      	beq.n	80083a8 <find_volume+0x1f0>
 80083a4:	230d      	movs	r3, #13
 80083a6:	e148      	b.n	800863a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	789b      	ldrb	r3, [r3, #2]
 80083ac:	461a      	mov	r2, r3
 80083ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b0:	fb02 f303 	mul.w	r3, r2, r3
 80083b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083bc:	b29a      	uxth	r2, r3
 80083be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	895b      	ldrh	r3, [r3, #10]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d008      	beq.n	80083dc <find_volume+0x224>
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	895b      	ldrh	r3, [r3, #10]
 80083ce:	461a      	mov	r2, r3
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	895b      	ldrh	r3, [r3, #10]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	4013      	ands	r3, r2
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <find_volume+0x228>
 80083dc:	230d      	movs	r3, #13
 80083de:	e12c      	b.n	800863a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	3330      	adds	r3, #48	; 0x30
 80083e4:	3311      	adds	r3, #17
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7fe fcc8 	bl	8006d7c <ld_word>
 80083ec:	4603      	mov	r3, r0
 80083ee:	461a      	mov	r2, r3
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	891b      	ldrh	r3, [r3, #8]
 80083f8:	f003 030f 	and.w	r3, r3, #15
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <find_volume+0x24e>
 8008402:	230d      	movs	r3, #13
 8008404:	e119      	b.n	800863a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	3330      	adds	r3, #48	; 0x30
 800840a:	3313      	adds	r3, #19
 800840c:	4618      	mov	r0, r3
 800840e:	f7fe fcb5 	bl	8006d7c <ld_word>
 8008412:	4603      	mov	r3, r0
 8008414:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008418:	2b00      	cmp	r3, #0
 800841a:	d106      	bne.n	800842a <find_volume+0x272>
 800841c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841e:	3330      	adds	r3, #48	; 0x30
 8008420:	3320      	adds	r3, #32
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fcc2 	bl	8006dac <ld_dword>
 8008428:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	3330      	adds	r3, #48	; 0x30
 800842e:	330e      	adds	r3, #14
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fca3 	bl	8006d7c <ld_word>
 8008436:	4603      	mov	r3, r0
 8008438:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800843a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <find_volume+0x28c>
 8008440:	230d      	movs	r3, #13
 8008442:	e0fa      	b.n	800863a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008444:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008448:	4413      	add	r3, r2
 800844a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800844c:	8912      	ldrh	r2, [r2, #8]
 800844e:	0912      	lsrs	r2, r2, #4
 8008450:	b292      	uxth	r2, r2
 8008452:	4413      	add	r3, r2
 8008454:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845a:	429a      	cmp	r2, r3
 800845c:	d204      	bcs.n	8008468 <find_volume+0x2b0>
 800845e:	230d      	movs	r3, #13
 8008460:	e0eb      	b.n	800863a <find_volume+0x482>
 8008462:	bf00      	nop
 8008464:	20013588 	.word	0x20013588
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008470:	8952      	ldrh	r2, [r2, #10]
 8008472:	fbb3 f3f2 	udiv	r3, r3, r2
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <find_volume+0x2ca>
 800847e:	230d      	movs	r3, #13
 8008480:	e0db      	b.n	800863a <find_volume+0x482>
		fmt = FS_FAT32;
 8008482:	2303      	movs	r3, #3
 8008484:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800848e:	4293      	cmp	r3, r2
 8008490:	d802      	bhi.n	8008498 <find_volume+0x2e0>
 8008492:	2302      	movs	r3, #2
 8008494:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800849e:	4293      	cmp	r3, r2
 80084a0:	d802      	bhi.n	80084a8 <find_volume+0x2f0>
 80084a2:	2301      	movs	r3, #1
 80084a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	1c9a      	adds	r2, r3, #2
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80084b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084b4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80084b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ba:	441a      	add	r2, r3
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80084c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c4:	441a      	add	r2, r3
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80084ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d11e      	bne.n	8008510 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	3330      	adds	r3, #48	; 0x30
 80084d6:	332a      	adds	r3, #42	; 0x2a
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fc4f 	bl	8006d7c <ld_word>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <find_volume+0x330>
 80084e4:	230d      	movs	r3, #13
 80084e6:	e0a8      	b.n	800863a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80084e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ea:	891b      	ldrh	r3, [r3, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d001      	beq.n	80084f4 <find_volume+0x33c>
 80084f0:	230d      	movs	r3, #13
 80084f2:	e0a2      	b.n	800863a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	3330      	adds	r3, #48	; 0x30
 80084f8:	332c      	adds	r3, #44	; 0x2c
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fc56 	bl	8006dac <ld_dword>
 8008500:	4602      	mov	r2, r0
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	647b      	str	r3, [r7, #68]	; 0x44
 800850e:	e01f      	b.n	8008550 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	891b      	ldrh	r3, [r3, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <find_volume+0x364>
 8008518:	230d      	movs	r3, #13
 800851a:	e08e      	b.n	800863a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	6a1a      	ldr	r2, [r3, #32]
 8008520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008522:	441a      	add	r2, r3
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800852c:	2b02      	cmp	r3, #2
 800852e:	d103      	bne.n	8008538 <find_volume+0x380>
 8008530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	e00a      	b.n	800854e <find_volume+0x396>
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	695a      	ldr	r2, [r3, #20]
 800853c:	4613      	mov	r3, r2
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	4413      	add	r3, r2
 8008542:	085a      	lsrs	r2, r3, #1
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	695b      	ldr	r3, [r3, #20]
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800854e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008552:	699a      	ldr	r2, [r3, #24]
 8008554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008556:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800855a:	0a5b      	lsrs	r3, r3, #9
 800855c:	429a      	cmp	r2, r3
 800855e:	d201      	bcs.n	8008564 <find_volume+0x3ac>
 8008560:	230d      	movs	r3, #13
 8008562:	e06a      	b.n	800863a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800856a:	611a      	str	r2, [r3, #16]
 800856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	2280      	movs	r2, #128	; 0x80
 8008578:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800857a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800857e:	2b03      	cmp	r3, #3
 8008580:	d149      	bne.n	8008616 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	3330      	adds	r3, #48	; 0x30
 8008586:	3330      	adds	r3, #48	; 0x30
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe fbf7 	bl	8006d7c <ld_word>
 800858e:	4603      	mov	r3, r0
 8008590:	2b01      	cmp	r3, #1
 8008592:	d140      	bne.n	8008616 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008596:	3301      	adds	r3, #1
 8008598:	4619      	mov	r1, r3
 800859a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800859c:	f7fe fe9e 	bl	80072dc <move_window>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d137      	bne.n	8008616 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	2200      	movs	r2, #0
 80085aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	3330      	adds	r3, #48	; 0x30
 80085b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7fe fbe1 	bl	8006d7c <ld_word>
 80085ba:	4603      	mov	r3, r0
 80085bc:	461a      	mov	r2, r3
 80085be:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d127      	bne.n	8008616 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	3330      	adds	r3, #48	; 0x30
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fbee 	bl	8006dac <ld_dword>
 80085d0:	4603      	mov	r3, r0
 80085d2:	4a1c      	ldr	r2, [pc, #112]	; (8008644 <find_volume+0x48c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d11e      	bne.n	8008616 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	3330      	adds	r3, #48	; 0x30
 80085dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fbe3 	bl	8006dac <ld_dword>
 80085e6:	4603      	mov	r3, r0
 80085e8:	4a17      	ldr	r2, [pc, #92]	; (8008648 <find_volume+0x490>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d113      	bne.n	8008616 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	3330      	adds	r3, #48	; 0x30
 80085f2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe fbd8 	bl	8006dac <ld_dword>
 80085fc:	4602      	mov	r2, r0
 80085fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008600:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	3330      	adds	r3, #48	; 0x30
 8008606:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fbce 	bl	8006dac <ld_dword>
 8008610:	4602      	mov	r2, r0
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800861c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800861e:	4b0b      	ldr	r3, [pc, #44]	; (800864c <find_volume+0x494>)
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	3301      	adds	r3, #1
 8008624:	b29a      	uxth	r2, r3
 8008626:	4b09      	ldr	r3, [pc, #36]	; (800864c <find_volume+0x494>)
 8008628:	801a      	strh	r2, [r3, #0]
 800862a:	4b08      	ldr	r3, [pc, #32]	; (800864c <find_volume+0x494>)
 800862c:	881a      	ldrh	r2, [r3, #0]
 800862e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008630:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008632:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008634:	f7fe fdea 	bl	800720c <clear_lock>
#endif
	return FR_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3758      	adds	r7, #88	; 0x58
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	41615252 	.word	0x41615252
 8008648:	61417272 	.word	0x61417272
 800864c:	2001358c 	.word	0x2001358c

08008650 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800865a:	2309      	movs	r3, #9
 800865c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d01c      	beq.n	800869e <validate+0x4e>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d018      	beq.n	800869e <validate+0x4e>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d013      	beq.n	800869e <validate+0x4e>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	889a      	ldrh	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	88db      	ldrh	r3, [r3, #6]
 8008680:	429a      	cmp	r2, r3
 8008682:	d10c      	bne.n	800869e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	785b      	ldrb	r3, [r3, #1]
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fad8 	bl	8006c40 <disk_status>
 8008690:	4603      	mov	r3, r0
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <validate+0x4e>
			res = FR_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800869e:	7bfb      	ldrb	r3, [r7, #15]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d102      	bne.n	80086aa <validate+0x5a>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	e000      	b.n	80086ac <validate+0x5c>
 80086aa:	2300      	movs	r3, #0
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	6013      	str	r3, [r2, #0]
	return res;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80086ce:	f107 0310 	add.w	r3, r7, #16
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fcd5 	bl	8008082 <get_ldnumber>
 80086d8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	da01      	bge.n	80086e4 <f_mount+0x28>
 80086e0:	230b      	movs	r3, #11
 80086e2:	e02b      	b.n	800873c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80086e4:	4a17      	ldr	r2, [pc, #92]	; (8008744 <f_mount+0x88>)
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80086f4:	69b8      	ldr	r0, [r7, #24]
 80086f6:	f7fe fd89 	bl	800720c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2200      	movs	r2, #0
 80086fe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	490d      	ldr	r1, [pc, #52]	; (8008744 <f_mount+0x88>)
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d002      	beq.n	8008722 <f_mount+0x66>
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d001      	beq.n	8008726 <f_mount+0x6a>
 8008722:	2300      	movs	r3, #0
 8008724:	e00a      	b.n	800873c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008726:	f107 010c 	add.w	r1, r7, #12
 800872a:	f107 0308 	add.w	r3, r7, #8
 800872e:	2200      	movs	r2, #0
 8008730:	4618      	mov	r0, r3
 8008732:	f7ff fd41 	bl	80081b8 <find_volume>
 8008736:	4603      	mov	r3, r0
 8008738:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800873a:	7dfb      	ldrb	r3, [r7, #23]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3720      	adds	r7, #32
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20013588 	.word	0x20013588

08008748 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b098      	sub	sp, #96	; 0x60
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	4613      	mov	r3, r2
 8008754:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <f_open+0x18>
 800875c:	2309      	movs	r3, #9
 800875e:	e1ad      	b.n	8008abc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008760:	79fb      	ldrb	r3, [r7, #7]
 8008762:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008766:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008768:	79fa      	ldrb	r2, [r7, #7]
 800876a:	f107 0110 	add.w	r1, r7, #16
 800876e:	f107 0308 	add.w	r3, r7, #8
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff fd20 	bl	80081b8 <find_volume>
 8008778:	4603      	mov	r3, r0
 800877a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800877e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008782:	2b00      	cmp	r3, #0
 8008784:	f040 8191 	bne.w	8008aaa <f_open+0x362>
		dj.obj.fs = fs;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	f107 0314 	add.w	r3, r7, #20
 8008792:	4611      	mov	r1, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff fc03 	bl	8007fa0 <follow_path>
 800879a:	4603      	mov	r3, r0
 800879c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80087a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d11a      	bne.n	80087de <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80087a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087ac:	b25b      	sxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	da03      	bge.n	80087ba <f_open+0x72>
				res = FR_INVALID_NAME;
 80087b2:	2306      	movs	r3, #6
 80087b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80087b8:	e011      	b.n	80087de <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	f023 0301 	bic.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	bf14      	ite	ne
 80087c4:	2301      	movne	r3, #1
 80087c6:	2300      	moveq	r3, #0
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	461a      	mov	r2, r3
 80087cc:	f107 0314 	add.w	r3, r7, #20
 80087d0:	4611      	mov	r1, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe fbd2 	bl	8006f7c <chk_lock>
 80087d8:	4603      	mov	r3, r0
 80087da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	f003 031c 	and.w	r3, r3, #28
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d07f      	beq.n	80088e8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80087e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d017      	beq.n	8008820 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80087f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	d10e      	bne.n	8008816 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80087f8:	f7fe fc1c 	bl	8007034 <enq_lock>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d006      	beq.n	8008810 <f_open+0xc8>
 8008802:	f107 0314 	add.w	r3, r7, #20
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fb03 	bl	8007e12 <dir_register>
 800880c:	4603      	mov	r3, r0
 800880e:	e000      	b.n	8008812 <f_open+0xca>
 8008810:	2312      	movs	r3, #18
 8008812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	f043 0308 	orr.w	r3, r3, #8
 800881c:	71fb      	strb	r3, [r7, #7]
 800881e:	e010      	b.n	8008842 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008820:	7ebb      	ldrb	r3, [r7, #26]
 8008822:	f003 0311 	and.w	r3, r3, #17
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <f_open+0xea>
					res = FR_DENIED;
 800882a:	2307      	movs	r3, #7
 800882c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008830:	e007      	b.n	8008842 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <f_open+0xfa>
 800883c:	2308      	movs	r3, #8
 800883e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008846:	2b00      	cmp	r3, #0
 8008848:	d168      	bne.n	800891c <f_open+0x1d4>
 800884a:	79fb      	ldrb	r3, [r7, #7]
 800884c:	f003 0308 	and.w	r3, r3, #8
 8008850:	2b00      	cmp	r3, #0
 8008852:	d063      	beq.n	800891c <f_open+0x1d4>
				dw = GET_FATTIME();
 8008854:	f7fd fcb6 	bl	80061c4 <get_fattime>
 8008858:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800885a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885c:	330e      	adds	r3, #14
 800885e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fae1 	bl	8006e28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008868:	3316      	adds	r3, #22
 800886a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe fadb 	bl	8006e28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008874:	330b      	adds	r3, #11
 8008876:	2220      	movs	r2, #32
 8008878:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800887e:	4611      	mov	r1, r2
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fa32 	bl	8007cea <ld_clust>
 8008886:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800888c:	2200      	movs	r2, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff fa4a 	bl	8007d28 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008896:	331c      	adds	r3, #28
 8008898:	2100      	movs	r1, #0
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fac4 	bl	8006e28 <st_dword>
					fs->wflag = 1;
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2201      	movs	r2, #1
 80088a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80088a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d037      	beq.n	800891c <f_open+0x1d4>
						dw = fs->winsect;
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80088b2:	f107 0314 	add.w	r3, r7, #20
 80088b6:	2200      	movs	r2, #0
 80088b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe ff5d 	bl	800777a <remove_chain>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80088c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d126      	bne.n	800891c <f_open+0x1d4>
							res = move_window(fs, dw);
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe fd02 	bl	80072dc <move_window>
 80088d8:	4603      	mov	r3, r0
 80088da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088e2:	3a01      	subs	r2, #1
 80088e4:	60da      	str	r2, [r3, #12]
 80088e6:	e019      	b.n	800891c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80088e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d115      	bne.n	800891c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80088f0:	7ebb      	ldrb	r3, [r7, #26]
 80088f2:	f003 0310 	and.w	r3, r3, #16
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <f_open+0x1ba>
					res = FR_NO_FILE;
 80088fa:	2304      	movs	r3, #4
 80088fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008900:	e00c      	b.n	800891c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d007      	beq.n	800891c <f_open+0x1d4>
 800890c:	7ebb      	ldrb	r3, [r7, #26]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <f_open+0x1d4>
						res = FR_DENIED;
 8008916:	2307      	movs	r3, #7
 8008918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800891c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008920:	2b00      	cmp	r3, #0
 8008922:	d128      	bne.n	8008976 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008934:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800893e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008944:	79fb      	ldrb	r3, [r7, #7]
 8008946:	f023 0301 	bic.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	bf14      	ite	ne
 800894e:	2301      	movne	r3, #1
 8008950:	2300      	moveq	r3, #0
 8008952:	b2db      	uxtb	r3, r3
 8008954:	461a      	mov	r2, r3
 8008956:	f107 0314 	add.w	r3, r7, #20
 800895a:	4611      	mov	r1, r2
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe fb8b 	bl	8007078 <inc_lock>
 8008962:	4602      	mov	r2, r0
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <f_open+0x22e>
 8008970:	2302      	movs	r3, #2
 8008972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008976:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800897a:	2b00      	cmp	r3, #0
 800897c:	f040 8095 	bne.w	8008aaa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008984:	4611      	mov	r1, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff f9af 	bl	8007cea <ld_clust>
 800898c:	4602      	mov	r2, r0
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	331c      	adds	r3, #28
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fa08 	bl	8006dac <ld_dword>
 800899c:	4602      	mov	r2, r0
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	88da      	ldrh	r2, [r3, #6]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	79fa      	ldrb	r2, [r7, #7]
 80089ba:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3330      	adds	r3, #48	; 0x30
 80089d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089d6:	2100      	movs	r1, #0
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fe fa72 	bl	8006ec2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	f003 0320 	and.w	r3, r3, #32
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d060      	beq.n	8008aaa <f_open+0x362>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d05c      	beq.n	8008aaa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	68da      	ldr	r2, [r3, #12]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	895b      	ldrh	r3, [r3, #10]
 80089fc:	025b      	lsls	r3, r3, #9
 80089fe:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a0c:	e016      	b.n	8008a3c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe fd1d 	bl	8007452 <get_fat>
 8008a18:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d802      	bhi.n	8008a26 <f_open+0x2de>
 8008a20:	2302      	movs	r3, #2
 8008a22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a2c:	d102      	bne.n	8008a34 <f_open+0x2ec>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d103      	bne.n	8008a4c <f_open+0x304>
 8008a44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d8e0      	bhi.n	8008a0e <f_open+0x2c6>
				}
				fp->clust = clst;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a50:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008a52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d127      	bne.n	8008aaa <f_open+0x362>
 8008a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d022      	beq.n	8008aaa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe fcd3 	bl	8007414 <clust2sect>
 8008a6e:	6478      	str	r0, [r7, #68]	; 0x44
 8008a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d103      	bne.n	8008a7e <f_open+0x336>
						res = FR_INT_ERR;
 8008a76:	2302      	movs	r3, #2
 8008a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a7c:	e015      	b.n	8008aaa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a80:	0a5a      	lsrs	r2, r3, #9
 8008a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a84:	441a      	add	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	7858      	ldrb	r0, [r3, #1]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	6a1a      	ldr	r2, [r3, #32]
 8008a98:	2301      	movs	r3, #1
 8008a9a:	f7fe f911 	bl	8006cc0 <disk_read>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d002      	beq.n	8008aaa <f_open+0x362>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d002      	beq.n	8008ab8 <f_open+0x370>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008ab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3760      	adds	r7, #96	; 0x60
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08e      	sub	sp, #56	; 0x38
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f107 0214 	add.w	r2, r7, #20
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fdb3 	bl	8008650 <validate>
 8008aea:	4603      	mov	r3, r0
 8008aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008af0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d107      	bne.n	8008b08 <f_read+0x44>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	7d5b      	ldrb	r3, [r3, #21]
 8008afc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <f_read+0x4a>
 8008b08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b0c:	e115      	b.n	8008d3a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	7d1b      	ldrb	r3, [r3, #20]
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <f_read+0x5a>
 8008b1a:	2307      	movs	r3, #7
 8008b1c:	e10d      	b.n	8008d3a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	68da      	ldr	r2, [r3, #12]
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	f240 80fe 	bls.w	8008d30 <f_read+0x26c>
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008b38:	e0fa      	b.n	8008d30 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f040 80c6 	bne.w	8008cd4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	0a5b      	lsrs	r3, r3, #9
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	8952      	ldrh	r2, [r2, #10]
 8008b52:	3a01      	subs	r2, #1
 8008b54:	4013      	ands	r3, r2
 8008b56:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d12f      	bne.n	8008bbe <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d103      	bne.n	8008b6e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b6c:	e013      	b.n	8008b96 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d007      	beq.n	8008b86 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f7fe fef9 	bl	8007974 <clmt_clust>
 8008b82:	6338      	str	r0, [r7, #48]	; 0x30
 8008b84:	e007      	b.n	8008b96 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f7fe fc5f 	bl	8007452 <get_fat>
 8008b94:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d804      	bhi.n	8008ba6 <f_read+0xe2>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	755a      	strb	r2, [r3, #21]
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	e0c9      	b.n	8008d3a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bac:	d104      	bne.n	8008bb8 <f_read+0xf4>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	755a      	strb	r2, [r3, #21]
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e0c0      	b.n	8008d3a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bbc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	69db      	ldr	r3, [r3, #28]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	f7fe fc24 	bl	8007414 <clust2sect>
 8008bcc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d104      	bne.n	8008bde <f_read+0x11a>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	755a      	strb	r2, [r3, #21]
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e0ad      	b.n	8008d3a <f_read+0x276>
			sect += csect;
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	4413      	add	r3, r2
 8008be4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	0a5b      	lsrs	r3, r3, #9
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d039      	beq.n	8008c66 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008bf2:	69fa      	ldr	r2, [r7, #28]
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf6:	4413      	add	r3, r2
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	8952      	ldrh	r2, [r2, #10]
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d905      	bls.n	8008c0c <f_read+0x148>
					cc = fs->csize - csect;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	895b      	ldrh	r3, [r3, #10]
 8008c04:	461a      	mov	r2, r3
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	7858      	ldrb	r0, [r3, #1]
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c16:	f7fe f853 	bl	8006cc0 <disk_read>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d004      	beq.n	8008c2a <f_read+0x166>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	755a      	strb	r2, [r3, #21]
 8008c26:	2301      	movs	r3, #1
 8008c28:	e087      	b.n	8008d3a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	7d1b      	ldrb	r3, [r3, #20]
 8008c2e:	b25b      	sxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	da14      	bge.n	8008c5e <f_read+0x19a>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6a1a      	ldr	r2, [r3, #32]
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d90d      	bls.n	8008c5e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6a1a      	ldr	r2, [r3, #32]
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	025b      	lsls	r3, r3, #9
 8008c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4e:	18d0      	adds	r0, r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3330      	adds	r3, #48	; 0x30
 8008c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f7fe f911 	bl	8006e80 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	025b      	lsls	r3, r3, #9
 8008c62:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008c64:	e050      	b.n	8008d08 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d02e      	beq.n	8008cce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	7d1b      	ldrb	r3, [r3, #20]
 8008c74:	b25b      	sxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da18      	bge.n	8008cac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	7858      	ldrb	r0, [r3, #1]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6a1a      	ldr	r2, [r3, #32]
 8008c88:	2301      	movs	r3, #1
 8008c8a:	f7fe f839 	bl	8006d00 <disk_write>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d004      	beq.n	8008c9e <f_read+0x1da>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	755a      	strb	r2, [r3, #21]
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e04d      	b.n	8008d3a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	7d1b      	ldrb	r3, [r3, #20]
 8008ca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	7858      	ldrb	r0, [r3, #1]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	f7fe f801 	bl	8006cc0 <disk_read>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <f_read+0x20a>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	755a      	strb	r2, [r3, #21]
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e035      	b.n	8008d3a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cdc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d901      	bls.n	8008cee <f_read+0x22a>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfc:	4413      	add	r3, r2
 8008cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d00:	4619      	mov	r1, r3
 8008d02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d04:	f7fe f8bc 	bl	8006e80 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	4413      	add	r3, r2
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	699a      	ldr	r2, [r3, #24]
 8008d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d16:	441a      	add	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	619a      	str	r2, [r3, #24]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	441a      	add	r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f47f af01 	bne.w	8008b3a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3738      	adds	r7, #56	; 0x38
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b086      	sub	sp, #24
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f107 0208 	add.w	r2, r7, #8
 8008d50:	4611      	mov	r1, r2
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff fc7c 	bl	8008650 <validate>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d168      	bne.n	8008e34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	7d1b      	ldrb	r3, [r3, #20]
 8008d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d062      	beq.n	8008e34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	7d1b      	ldrb	r3, [r3, #20]
 8008d72:	b25b      	sxtb	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	da15      	bge.n	8008da4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	7858      	ldrb	r0, [r3, #1]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1a      	ldr	r2, [r3, #32]
 8008d86:	2301      	movs	r3, #1
 8008d88:	f7fd ffba 	bl	8006d00 <disk_write>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <f_sync+0x54>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e04f      	b.n	8008e36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	7d1b      	ldrb	r3, [r3, #20]
 8008d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008da4:	f7fd fa0e 	bl	80061c4 <get_fattime>
 8008da8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7fe fa92 	bl	80072dc <move_window>
 8008db8:	4603      	mov	r3, r0
 8008dba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d138      	bne.n	8008e34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	330b      	adds	r3, #11
 8008dcc:	781a      	ldrb	r2, [r3, #0]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	330b      	adds	r3, #11
 8008dd2:	f042 0220 	orr.w	r2, r2, #32
 8008dd6:	b2d2      	uxtb	r2, r2
 8008dd8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	461a      	mov	r2, r3
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	f7fe ff9f 	bl	8007d28 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f103 021c 	add.w	r2, r3, #28
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	4619      	mov	r1, r3
 8008df6:	4610      	mov	r0, r2
 8008df8:	f7fe f816 	bl	8006e28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	3316      	adds	r3, #22
 8008e00:	6939      	ldr	r1, [r7, #16]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe f810 	bl	8006e28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3312      	adds	r3, #18
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fd ffef 	bl	8006df2 <st_word>
					fs->wflag = 1;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2201      	movs	r2, #1
 8008e18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fa8b 	bl	8007338 <sync_fs>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	7d1b      	ldrb	r3, [r3, #20]
 8008e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff ff7b 	bl	8008d42 <f_sync>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d118      	bne.n	8008e88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f107 0208 	add.w	r2, r7, #8
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff fbf6 	bl	8008650 <validate>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10c      	bne.n	8008e88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe f98e 	bl	8007194 <dec_lock>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d102      	bne.n	8008e88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008eaa:	4b1f      	ldr	r3, [pc, #124]	; (8008f28 <FATFS_LinkDriverEx+0x94>)
 8008eac:	7a5b      	ldrb	r3, [r3, #9]
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d131      	bne.n	8008f18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008eb4:	4b1c      	ldr	r3, [pc, #112]	; (8008f28 <FATFS_LinkDriverEx+0x94>)
 8008eb6:	7a5b      	ldrb	r3, [r3, #9]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	461a      	mov	r2, r3
 8008ebc:	4b1a      	ldr	r3, [pc, #104]	; (8008f28 <FATFS_LinkDriverEx+0x94>)
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008ec2:	4b19      	ldr	r3, [pc, #100]	; (8008f28 <FATFS_LinkDriverEx+0x94>)
 8008ec4:	7a5b      	ldrb	r3, [r3, #9]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	4a17      	ldr	r2, [pc, #92]	; (8008f28 <FATFS_LinkDriverEx+0x94>)
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008ed2:	4b15      	ldr	r3, [pc, #84]	; (8008f28 <FATFS_LinkDriverEx+0x94>)
 8008ed4:	7a5b      	ldrb	r3, [r3, #9]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	461a      	mov	r2, r3
 8008eda:	4b13      	ldr	r3, [pc, #76]	; (8008f28 <FATFS_LinkDriverEx+0x94>)
 8008edc:	4413      	add	r3, r2
 8008ede:	79fa      	ldrb	r2, [r7, #7]
 8008ee0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008ee2:	4b11      	ldr	r3, [pc, #68]	; (8008f28 <FATFS_LinkDriverEx+0x94>)
 8008ee4:	7a5b      	ldrb	r3, [r3, #9]
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	b2d1      	uxtb	r1, r2
 8008eec:	4a0e      	ldr	r2, [pc, #56]	; (8008f28 <FATFS_LinkDriverEx+0x94>)
 8008eee:	7251      	strb	r1, [r2, #9]
 8008ef0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008ef2:	7dbb      	ldrb	r3, [r7, #22]
 8008ef4:	3330      	adds	r3, #48	; 0x30
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	3301      	adds	r3, #1
 8008f00:	223a      	movs	r2, #58	; 0x3a
 8008f02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	3302      	adds	r3, #2
 8008f08:	222f      	movs	r2, #47	; 0x2f
 8008f0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	3303      	adds	r3, #3
 8008f10:	2200      	movs	r2, #0
 8008f12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	200135b0 	.word	0x200135b0

08008f2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f36:	2200      	movs	r2, #0
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7ff ffaa 	bl	8008e94 <FATFS_LinkDriverEx>
 8008f40:	4603      	mov	r3, r0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <__errno>:
 8008f4c:	4b01      	ldr	r3, [pc, #4]	; (8008f54 <__errno+0x8>)
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	200000d8 	.word	0x200000d8

08008f58 <__libc_init_array>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	4d0d      	ldr	r5, [pc, #52]	; (8008f90 <__libc_init_array+0x38>)
 8008f5c:	4c0d      	ldr	r4, [pc, #52]	; (8008f94 <__libc_init_array+0x3c>)
 8008f5e:	1b64      	subs	r4, r4, r5
 8008f60:	10a4      	asrs	r4, r4, #2
 8008f62:	2600      	movs	r6, #0
 8008f64:	42a6      	cmp	r6, r4
 8008f66:	d109      	bne.n	8008f7c <__libc_init_array+0x24>
 8008f68:	4d0b      	ldr	r5, [pc, #44]	; (8008f98 <__libc_init_array+0x40>)
 8008f6a:	4c0c      	ldr	r4, [pc, #48]	; (8008f9c <__libc_init_array+0x44>)
 8008f6c:	f001 f832 	bl	8009fd4 <_init>
 8008f70:	1b64      	subs	r4, r4, r5
 8008f72:	10a4      	asrs	r4, r4, #2
 8008f74:	2600      	movs	r6, #0
 8008f76:	42a6      	cmp	r6, r4
 8008f78:	d105      	bne.n	8008f86 <__libc_init_array+0x2e>
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f80:	4798      	blx	r3
 8008f82:	3601      	adds	r6, #1
 8008f84:	e7ee      	b.n	8008f64 <__libc_init_array+0xc>
 8008f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f8a:	4798      	blx	r3
 8008f8c:	3601      	adds	r6, #1
 8008f8e:	e7f2      	b.n	8008f76 <__libc_init_array+0x1e>
 8008f90:	0800a310 	.word	0x0800a310
 8008f94:	0800a310 	.word	0x0800a310
 8008f98:	0800a310 	.word	0x0800a310
 8008f9c:	0800a314 	.word	0x0800a314

08008fa0 <memcpy>:
 8008fa0:	440a      	add	r2, r1
 8008fa2:	4291      	cmp	r1, r2
 8008fa4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008fa8:	d100      	bne.n	8008fac <memcpy+0xc>
 8008faa:	4770      	bx	lr
 8008fac:	b510      	push	{r4, lr}
 8008fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fb6:	4291      	cmp	r1, r2
 8008fb8:	d1f9      	bne.n	8008fae <memcpy+0xe>
 8008fba:	bd10      	pop	{r4, pc}

08008fbc <memset>:
 8008fbc:	4402      	add	r2, r0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d100      	bne.n	8008fc6 <memset+0xa>
 8008fc4:	4770      	bx	lr
 8008fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8008fca:	e7f9      	b.n	8008fc0 <memset+0x4>

08008fcc <iprintf>:
 8008fcc:	b40f      	push	{r0, r1, r2, r3}
 8008fce:	4b0a      	ldr	r3, [pc, #40]	; (8008ff8 <iprintf+0x2c>)
 8008fd0:	b513      	push	{r0, r1, r4, lr}
 8008fd2:	681c      	ldr	r4, [r3, #0]
 8008fd4:	b124      	cbz	r4, 8008fe0 <iprintf+0x14>
 8008fd6:	69a3      	ldr	r3, [r4, #24]
 8008fd8:	b913      	cbnz	r3, 8008fe0 <iprintf+0x14>
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 fa5e 	bl	800949c <__sinit>
 8008fe0:	ab05      	add	r3, sp, #20
 8008fe2:	9a04      	ldr	r2, [sp, #16]
 8008fe4:	68a1      	ldr	r1, [r4, #8]
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f000 fc67 	bl	80098bc <_vfiprintf_r>
 8008fee:	b002      	add	sp, #8
 8008ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff4:	b004      	add	sp, #16
 8008ff6:	4770      	bx	lr
 8008ff8:	200000d8 	.word	0x200000d8

08008ffc <_puts_r>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	460e      	mov	r6, r1
 8009000:	4605      	mov	r5, r0
 8009002:	b118      	cbz	r0, 800900c <_puts_r+0x10>
 8009004:	6983      	ldr	r3, [r0, #24]
 8009006:	b90b      	cbnz	r3, 800900c <_puts_r+0x10>
 8009008:	f000 fa48 	bl	800949c <__sinit>
 800900c:	69ab      	ldr	r3, [r5, #24]
 800900e:	68ac      	ldr	r4, [r5, #8]
 8009010:	b913      	cbnz	r3, 8009018 <_puts_r+0x1c>
 8009012:	4628      	mov	r0, r5
 8009014:	f000 fa42 	bl	800949c <__sinit>
 8009018:	4b2c      	ldr	r3, [pc, #176]	; (80090cc <_puts_r+0xd0>)
 800901a:	429c      	cmp	r4, r3
 800901c:	d120      	bne.n	8009060 <_puts_r+0x64>
 800901e:	686c      	ldr	r4, [r5, #4]
 8009020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009022:	07db      	lsls	r3, r3, #31
 8009024:	d405      	bmi.n	8009032 <_puts_r+0x36>
 8009026:	89a3      	ldrh	r3, [r4, #12]
 8009028:	0598      	lsls	r0, r3, #22
 800902a:	d402      	bmi.n	8009032 <_puts_r+0x36>
 800902c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800902e:	f000 fad3 	bl	80095d8 <__retarget_lock_acquire_recursive>
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	0719      	lsls	r1, r3, #28
 8009036:	d51d      	bpl.n	8009074 <_puts_r+0x78>
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	b1db      	cbz	r3, 8009074 <_puts_r+0x78>
 800903c:	3e01      	subs	r6, #1
 800903e:	68a3      	ldr	r3, [r4, #8]
 8009040:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009044:	3b01      	subs	r3, #1
 8009046:	60a3      	str	r3, [r4, #8]
 8009048:	bb39      	cbnz	r1, 800909a <_puts_r+0x9e>
 800904a:	2b00      	cmp	r3, #0
 800904c:	da38      	bge.n	80090c0 <_puts_r+0xc4>
 800904e:	4622      	mov	r2, r4
 8009050:	210a      	movs	r1, #10
 8009052:	4628      	mov	r0, r5
 8009054:	f000 f848 	bl	80090e8 <__swbuf_r>
 8009058:	3001      	adds	r0, #1
 800905a:	d011      	beq.n	8009080 <_puts_r+0x84>
 800905c:	250a      	movs	r5, #10
 800905e:	e011      	b.n	8009084 <_puts_r+0x88>
 8009060:	4b1b      	ldr	r3, [pc, #108]	; (80090d0 <_puts_r+0xd4>)
 8009062:	429c      	cmp	r4, r3
 8009064:	d101      	bne.n	800906a <_puts_r+0x6e>
 8009066:	68ac      	ldr	r4, [r5, #8]
 8009068:	e7da      	b.n	8009020 <_puts_r+0x24>
 800906a:	4b1a      	ldr	r3, [pc, #104]	; (80090d4 <_puts_r+0xd8>)
 800906c:	429c      	cmp	r4, r3
 800906e:	bf08      	it	eq
 8009070:	68ec      	ldreq	r4, [r5, #12]
 8009072:	e7d5      	b.n	8009020 <_puts_r+0x24>
 8009074:	4621      	mov	r1, r4
 8009076:	4628      	mov	r0, r5
 8009078:	f000 f888 	bl	800918c <__swsetup_r>
 800907c:	2800      	cmp	r0, #0
 800907e:	d0dd      	beq.n	800903c <_puts_r+0x40>
 8009080:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009086:	07da      	lsls	r2, r3, #31
 8009088:	d405      	bmi.n	8009096 <_puts_r+0x9a>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	059b      	lsls	r3, r3, #22
 800908e:	d402      	bmi.n	8009096 <_puts_r+0x9a>
 8009090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009092:	f000 faa2 	bl	80095da <__retarget_lock_release_recursive>
 8009096:	4628      	mov	r0, r5
 8009098:	bd70      	pop	{r4, r5, r6, pc}
 800909a:	2b00      	cmp	r3, #0
 800909c:	da04      	bge.n	80090a8 <_puts_r+0xac>
 800909e:	69a2      	ldr	r2, [r4, #24]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	dc06      	bgt.n	80090b2 <_puts_r+0xb6>
 80090a4:	290a      	cmp	r1, #10
 80090a6:	d004      	beq.n	80090b2 <_puts_r+0xb6>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	6022      	str	r2, [r4, #0]
 80090ae:	7019      	strb	r1, [r3, #0]
 80090b0:	e7c5      	b.n	800903e <_puts_r+0x42>
 80090b2:	4622      	mov	r2, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	f000 f817 	bl	80090e8 <__swbuf_r>
 80090ba:	3001      	adds	r0, #1
 80090bc:	d1bf      	bne.n	800903e <_puts_r+0x42>
 80090be:	e7df      	b.n	8009080 <_puts_r+0x84>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	250a      	movs	r5, #10
 80090c4:	1c5a      	adds	r2, r3, #1
 80090c6:	6022      	str	r2, [r4, #0]
 80090c8:	701d      	strb	r5, [r3, #0]
 80090ca:	e7db      	b.n	8009084 <_puts_r+0x88>
 80090cc:	0800a294 	.word	0x0800a294
 80090d0:	0800a2b4 	.word	0x0800a2b4
 80090d4:	0800a274 	.word	0x0800a274

080090d8 <puts>:
 80090d8:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <puts+0xc>)
 80090da:	4601      	mov	r1, r0
 80090dc:	6818      	ldr	r0, [r3, #0]
 80090de:	f7ff bf8d 	b.w	8008ffc <_puts_r>
 80090e2:	bf00      	nop
 80090e4:	200000d8 	.word	0x200000d8

080090e8 <__swbuf_r>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	460e      	mov	r6, r1
 80090ec:	4614      	mov	r4, r2
 80090ee:	4605      	mov	r5, r0
 80090f0:	b118      	cbz	r0, 80090fa <__swbuf_r+0x12>
 80090f2:	6983      	ldr	r3, [r0, #24]
 80090f4:	b90b      	cbnz	r3, 80090fa <__swbuf_r+0x12>
 80090f6:	f000 f9d1 	bl	800949c <__sinit>
 80090fa:	4b21      	ldr	r3, [pc, #132]	; (8009180 <__swbuf_r+0x98>)
 80090fc:	429c      	cmp	r4, r3
 80090fe:	d12b      	bne.n	8009158 <__swbuf_r+0x70>
 8009100:	686c      	ldr	r4, [r5, #4]
 8009102:	69a3      	ldr	r3, [r4, #24]
 8009104:	60a3      	str	r3, [r4, #8]
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	071a      	lsls	r2, r3, #28
 800910a:	d52f      	bpl.n	800916c <__swbuf_r+0x84>
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	b36b      	cbz	r3, 800916c <__swbuf_r+0x84>
 8009110:	6923      	ldr	r3, [r4, #16]
 8009112:	6820      	ldr	r0, [r4, #0]
 8009114:	1ac0      	subs	r0, r0, r3
 8009116:	6963      	ldr	r3, [r4, #20]
 8009118:	b2f6      	uxtb	r6, r6
 800911a:	4283      	cmp	r3, r0
 800911c:	4637      	mov	r7, r6
 800911e:	dc04      	bgt.n	800912a <__swbuf_r+0x42>
 8009120:	4621      	mov	r1, r4
 8009122:	4628      	mov	r0, r5
 8009124:	f000 f926 	bl	8009374 <_fflush_r>
 8009128:	bb30      	cbnz	r0, 8009178 <__swbuf_r+0x90>
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	3b01      	subs	r3, #1
 800912e:	60a3      	str	r3, [r4, #8]
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	6022      	str	r2, [r4, #0]
 8009136:	701e      	strb	r6, [r3, #0]
 8009138:	6963      	ldr	r3, [r4, #20]
 800913a:	3001      	adds	r0, #1
 800913c:	4283      	cmp	r3, r0
 800913e:	d004      	beq.n	800914a <__swbuf_r+0x62>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	07db      	lsls	r3, r3, #31
 8009144:	d506      	bpl.n	8009154 <__swbuf_r+0x6c>
 8009146:	2e0a      	cmp	r6, #10
 8009148:	d104      	bne.n	8009154 <__swbuf_r+0x6c>
 800914a:	4621      	mov	r1, r4
 800914c:	4628      	mov	r0, r5
 800914e:	f000 f911 	bl	8009374 <_fflush_r>
 8009152:	b988      	cbnz	r0, 8009178 <__swbuf_r+0x90>
 8009154:	4638      	mov	r0, r7
 8009156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009158:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <__swbuf_r+0x9c>)
 800915a:	429c      	cmp	r4, r3
 800915c:	d101      	bne.n	8009162 <__swbuf_r+0x7a>
 800915e:	68ac      	ldr	r4, [r5, #8]
 8009160:	e7cf      	b.n	8009102 <__swbuf_r+0x1a>
 8009162:	4b09      	ldr	r3, [pc, #36]	; (8009188 <__swbuf_r+0xa0>)
 8009164:	429c      	cmp	r4, r3
 8009166:	bf08      	it	eq
 8009168:	68ec      	ldreq	r4, [r5, #12]
 800916a:	e7ca      	b.n	8009102 <__swbuf_r+0x1a>
 800916c:	4621      	mov	r1, r4
 800916e:	4628      	mov	r0, r5
 8009170:	f000 f80c 	bl	800918c <__swsetup_r>
 8009174:	2800      	cmp	r0, #0
 8009176:	d0cb      	beq.n	8009110 <__swbuf_r+0x28>
 8009178:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800917c:	e7ea      	b.n	8009154 <__swbuf_r+0x6c>
 800917e:	bf00      	nop
 8009180:	0800a294 	.word	0x0800a294
 8009184:	0800a2b4 	.word	0x0800a2b4
 8009188:	0800a274 	.word	0x0800a274

0800918c <__swsetup_r>:
 800918c:	4b32      	ldr	r3, [pc, #200]	; (8009258 <__swsetup_r+0xcc>)
 800918e:	b570      	push	{r4, r5, r6, lr}
 8009190:	681d      	ldr	r5, [r3, #0]
 8009192:	4606      	mov	r6, r0
 8009194:	460c      	mov	r4, r1
 8009196:	b125      	cbz	r5, 80091a2 <__swsetup_r+0x16>
 8009198:	69ab      	ldr	r3, [r5, #24]
 800919a:	b913      	cbnz	r3, 80091a2 <__swsetup_r+0x16>
 800919c:	4628      	mov	r0, r5
 800919e:	f000 f97d 	bl	800949c <__sinit>
 80091a2:	4b2e      	ldr	r3, [pc, #184]	; (800925c <__swsetup_r+0xd0>)
 80091a4:	429c      	cmp	r4, r3
 80091a6:	d10f      	bne.n	80091c8 <__swsetup_r+0x3c>
 80091a8:	686c      	ldr	r4, [r5, #4]
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091b0:	0719      	lsls	r1, r3, #28
 80091b2:	d42c      	bmi.n	800920e <__swsetup_r+0x82>
 80091b4:	06dd      	lsls	r5, r3, #27
 80091b6:	d411      	bmi.n	80091dc <__swsetup_r+0x50>
 80091b8:	2309      	movs	r3, #9
 80091ba:	6033      	str	r3, [r6, #0]
 80091bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091c0:	81a3      	strh	r3, [r4, #12]
 80091c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091c6:	e03e      	b.n	8009246 <__swsetup_r+0xba>
 80091c8:	4b25      	ldr	r3, [pc, #148]	; (8009260 <__swsetup_r+0xd4>)
 80091ca:	429c      	cmp	r4, r3
 80091cc:	d101      	bne.n	80091d2 <__swsetup_r+0x46>
 80091ce:	68ac      	ldr	r4, [r5, #8]
 80091d0:	e7eb      	b.n	80091aa <__swsetup_r+0x1e>
 80091d2:	4b24      	ldr	r3, [pc, #144]	; (8009264 <__swsetup_r+0xd8>)
 80091d4:	429c      	cmp	r4, r3
 80091d6:	bf08      	it	eq
 80091d8:	68ec      	ldreq	r4, [r5, #12]
 80091da:	e7e6      	b.n	80091aa <__swsetup_r+0x1e>
 80091dc:	0758      	lsls	r0, r3, #29
 80091de:	d512      	bpl.n	8009206 <__swsetup_r+0x7a>
 80091e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091e2:	b141      	cbz	r1, 80091f6 <__swsetup_r+0x6a>
 80091e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091e8:	4299      	cmp	r1, r3
 80091ea:	d002      	beq.n	80091f2 <__swsetup_r+0x66>
 80091ec:	4630      	mov	r0, r6
 80091ee:	f000 fa5b 	bl	80096a8 <_free_r>
 80091f2:	2300      	movs	r3, #0
 80091f4:	6363      	str	r3, [r4, #52]	; 0x34
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80091fc:	81a3      	strh	r3, [r4, #12]
 80091fe:	2300      	movs	r3, #0
 8009200:	6063      	str	r3, [r4, #4]
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	f043 0308 	orr.w	r3, r3, #8
 800920c:	81a3      	strh	r3, [r4, #12]
 800920e:	6923      	ldr	r3, [r4, #16]
 8009210:	b94b      	cbnz	r3, 8009226 <__swsetup_r+0x9a>
 8009212:	89a3      	ldrh	r3, [r4, #12]
 8009214:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800921c:	d003      	beq.n	8009226 <__swsetup_r+0x9a>
 800921e:	4621      	mov	r1, r4
 8009220:	4630      	mov	r0, r6
 8009222:	f000 fa01 	bl	8009628 <__smakebuf_r>
 8009226:	89a0      	ldrh	r0, [r4, #12]
 8009228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800922c:	f010 0301 	ands.w	r3, r0, #1
 8009230:	d00a      	beq.n	8009248 <__swsetup_r+0xbc>
 8009232:	2300      	movs	r3, #0
 8009234:	60a3      	str	r3, [r4, #8]
 8009236:	6963      	ldr	r3, [r4, #20]
 8009238:	425b      	negs	r3, r3
 800923a:	61a3      	str	r3, [r4, #24]
 800923c:	6923      	ldr	r3, [r4, #16]
 800923e:	b943      	cbnz	r3, 8009252 <__swsetup_r+0xc6>
 8009240:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009244:	d1ba      	bne.n	80091bc <__swsetup_r+0x30>
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	0781      	lsls	r1, r0, #30
 800924a:	bf58      	it	pl
 800924c:	6963      	ldrpl	r3, [r4, #20]
 800924e:	60a3      	str	r3, [r4, #8]
 8009250:	e7f4      	b.n	800923c <__swsetup_r+0xb0>
 8009252:	2000      	movs	r0, #0
 8009254:	e7f7      	b.n	8009246 <__swsetup_r+0xba>
 8009256:	bf00      	nop
 8009258:	200000d8 	.word	0x200000d8
 800925c:	0800a294 	.word	0x0800a294
 8009260:	0800a2b4 	.word	0x0800a2b4
 8009264:	0800a274 	.word	0x0800a274

08009268 <__sflush_r>:
 8009268:	898a      	ldrh	r2, [r1, #12]
 800926a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926e:	4605      	mov	r5, r0
 8009270:	0710      	lsls	r0, r2, #28
 8009272:	460c      	mov	r4, r1
 8009274:	d458      	bmi.n	8009328 <__sflush_r+0xc0>
 8009276:	684b      	ldr	r3, [r1, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	dc05      	bgt.n	8009288 <__sflush_r+0x20>
 800927c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800927e:	2b00      	cmp	r3, #0
 8009280:	dc02      	bgt.n	8009288 <__sflush_r+0x20>
 8009282:	2000      	movs	r0, #0
 8009284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800928a:	2e00      	cmp	r6, #0
 800928c:	d0f9      	beq.n	8009282 <__sflush_r+0x1a>
 800928e:	2300      	movs	r3, #0
 8009290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009294:	682f      	ldr	r7, [r5, #0]
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	d032      	beq.n	8009300 <__sflush_r+0x98>
 800929a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800929c:	89a3      	ldrh	r3, [r4, #12]
 800929e:	075a      	lsls	r2, r3, #29
 80092a0:	d505      	bpl.n	80092ae <__sflush_r+0x46>
 80092a2:	6863      	ldr	r3, [r4, #4]
 80092a4:	1ac0      	subs	r0, r0, r3
 80092a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092a8:	b10b      	cbz	r3, 80092ae <__sflush_r+0x46>
 80092aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092ac:	1ac0      	subs	r0, r0, r3
 80092ae:	2300      	movs	r3, #0
 80092b0:	4602      	mov	r2, r0
 80092b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092b4:	6a21      	ldr	r1, [r4, #32]
 80092b6:	4628      	mov	r0, r5
 80092b8:	47b0      	blx	r6
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	89a3      	ldrh	r3, [r4, #12]
 80092be:	d106      	bne.n	80092ce <__sflush_r+0x66>
 80092c0:	6829      	ldr	r1, [r5, #0]
 80092c2:	291d      	cmp	r1, #29
 80092c4:	d82c      	bhi.n	8009320 <__sflush_r+0xb8>
 80092c6:	4a2a      	ldr	r2, [pc, #168]	; (8009370 <__sflush_r+0x108>)
 80092c8:	40ca      	lsrs	r2, r1
 80092ca:	07d6      	lsls	r6, r2, #31
 80092cc:	d528      	bpl.n	8009320 <__sflush_r+0xb8>
 80092ce:	2200      	movs	r2, #0
 80092d0:	6062      	str	r2, [r4, #4]
 80092d2:	04d9      	lsls	r1, r3, #19
 80092d4:	6922      	ldr	r2, [r4, #16]
 80092d6:	6022      	str	r2, [r4, #0]
 80092d8:	d504      	bpl.n	80092e4 <__sflush_r+0x7c>
 80092da:	1c42      	adds	r2, r0, #1
 80092dc:	d101      	bne.n	80092e2 <__sflush_r+0x7a>
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	b903      	cbnz	r3, 80092e4 <__sflush_r+0x7c>
 80092e2:	6560      	str	r0, [r4, #84]	; 0x54
 80092e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092e6:	602f      	str	r7, [r5, #0]
 80092e8:	2900      	cmp	r1, #0
 80092ea:	d0ca      	beq.n	8009282 <__sflush_r+0x1a>
 80092ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092f0:	4299      	cmp	r1, r3
 80092f2:	d002      	beq.n	80092fa <__sflush_r+0x92>
 80092f4:	4628      	mov	r0, r5
 80092f6:	f000 f9d7 	bl	80096a8 <_free_r>
 80092fa:	2000      	movs	r0, #0
 80092fc:	6360      	str	r0, [r4, #52]	; 0x34
 80092fe:	e7c1      	b.n	8009284 <__sflush_r+0x1c>
 8009300:	6a21      	ldr	r1, [r4, #32]
 8009302:	2301      	movs	r3, #1
 8009304:	4628      	mov	r0, r5
 8009306:	47b0      	blx	r6
 8009308:	1c41      	adds	r1, r0, #1
 800930a:	d1c7      	bne.n	800929c <__sflush_r+0x34>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d0c4      	beq.n	800929c <__sflush_r+0x34>
 8009312:	2b1d      	cmp	r3, #29
 8009314:	d001      	beq.n	800931a <__sflush_r+0xb2>
 8009316:	2b16      	cmp	r3, #22
 8009318:	d101      	bne.n	800931e <__sflush_r+0xb6>
 800931a:	602f      	str	r7, [r5, #0]
 800931c:	e7b1      	b.n	8009282 <__sflush_r+0x1a>
 800931e:	89a3      	ldrh	r3, [r4, #12]
 8009320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009324:	81a3      	strh	r3, [r4, #12]
 8009326:	e7ad      	b.n	8009284 <__sflush_r+0x1c>
 8009328:	690f      	ldr	r7, [r1, #16]
 800932a:	2f00      	cmp	r7, #0
 800932c:	d0a9      	beq.n	8009282 <__sflush_r+0x1a>
 800932e:	0793      	lsls	r3, r2, #30
 8009330:	680e      	ldr	r6, [r1, #0]
 8009332:	bf08      	it	eq
 8009334:	694b      	ldreq	r3, [r1, #20]
 8009336:	600f      	str	r7, [r1, #0]
 8009338:	bf18      	it	ne
 800933a:	2300      	movne	r3, #0
 800933c:	eba6 0807 	sub.w	r8, r6, r7
 8009340:	608b      	str	r3, [r1, #8]
 8009342:	f1b8 0f00 	cmp.w	r8, #0
 8009346:	dd9c      	ble.n	8009282 <__sflush_r+0x1a>
 8009348:	6a21      	ldr	r1, [r4, #32]
 800934a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800934c:	4643      	mov	r3, r8
 800934e:	463a      	mov	r2, r7
 8009350:	4628      	mov	r0, r5
 8009352:	47b0      	blx	r6
 8009354:	2800      	cmp	r0, #0
 8009356:	dc06      	bgt.n	8009366 <__sflush_r+0xfe>
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009364:	e78e      	b.n	8009284 <__sflush_r+0x1c>
 8009366:	4407      	add	r7, r0
 8009368:	eba8 0800 	sub.w	r8, r8, r0
 800936c:	e7e9      	b.n	8009342 <__sflush_r+0xda>
 800936e:	bf00      	nop
 8009370:	20400001 	.word	0x20400001

08009374 <_fflush_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	690b      	ldr	r3, [r1, #16]
 8009378:	4605      	mov	r5, r0
 800937a:	460c      	mov	r4, r1
 800937c:	b913      	cbnz	r3, 8009384 <_fflush_r+0x10>
 800937e:	2500      	movs	r5, #0
 8009380:	4628      	mov	r0, r5
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	b118      	cbz	r0, 800938e <_fflush_r+0x1a>
 8009386:	6983      	ldr	r3, [r0, #24]
 8009388:	b90b      	cbnz	r3, 800938e <_fflush_r+0x1a>
 800938a:	f000 f887 	bl	800949c <__sinit>
 800938e:	4b14      	ldr	r3, [pc, #80]	; (80093e0 <_fflush_r+0x6c>)
 8009390:	429c      	cmp	r4, r3
 8009392:	d11b      	bne.n	80093cc <_fflush_r+0x58>
 8009394:	686c      	ldr	r4, [r5, #4]
 8009396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0ef      	beq.n	800937e <_fflush_r+0xa>
 800939e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093a0:	07d0      	lsls	r0, r2, #31
 80093a2:	d404      	bmi.n	80093ae <_fflush_r+0x3a>
 80093a4:	0599      	lsls	r1, r3, #22
 80093a6:	d402      	bmi.n	80093ae <_fflush_r+0x3a>
 80093a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093aa:	f000 f915 	bl	80095d8 <__retarget_lock_acquire_recursive>
 80093ae:	4628      	mov	r0, r5
 80093b0:	4621      	mov	r1, r4
 80093b2:	f7ff ff59 	bl	8009268 <__sflush_r>
 80093b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093b8:	07da      	lsls	r2, r3, #31
 80093ba:	4605      	mov	r5, r0
 80093bc:	d4e0      	bmi.n	8009380 <_fflush_r+0xc>
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	059b      	lsls	r3, r3, #22
 80093c2:	d4dd      	bmi.n	8009380 <_fflush_r+0xc>
 80093c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093c6:	f000 f908 	bl	80095da <__retarget_lock_release_recursive>
 80093ca:	e7d9      	b.n	8009380 <_fflush_r+0xc>
 80093cc:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <_fflush_r+0x70>)
 80093ce:	429c      	cmp	r4, r3
 80093d0:	d101      	bne.n	80093d6 <_fflush_r+0x62>
 80093d2:	68ac      	ldr	r4, [r5, #8]
 80093d4:	e7df      	b.n	8009396 <_fflush_r+0x22>
 80093d6:	4b04      	ldr	r3, [pc, #16]	; (80093e8 <_fflush_r+0x74>)
 80093d8:	429c      	cmp	r4, r3
 80093da:	bf08      	it	eq
 80093dc:	68ec      	ldreq	r4, [r5, #12]
 80093de:	e7da      	b.n	8009396 <_fflush_r+0x22>
 80093e0:	0800a294 	.word	0x0800a294
 80093e4:	0800a2b4 	.word	0x0800a2b4
 80093e8:	0800a274 	.word	0x0800a274

080093ec <std>:
 80093ec:	2300      	movs	r3, #0
 80093ee:	b510      	push	{r4, lr}
 80093f0:	4604      	mov	r4, r0
 80093f2:	e9c0 3300 	strd	r3, r3, [r0]
 80093f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093fa:	6083      	str	r3, [r0, #8]
 80093fc:	8181      	strh	r1, [r0, #12]
 80093fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009400:	81c2      	strh	r2, [r0, #14]
 8009402:	6183      	str	r3, [r0, #24]
 8009404:	4619      	mov	r1, r3
 8009406:	2208      	movs	r2, #8
 8009408:	305c      	adds	r0, #92	; 0x5c
 800940a:	f7ff fdd7 	bl	8008fbc <memset>
 800940e:	4b05      	ldr	r3, [pc, #20]	; (8009424 <std+0x38>)
 8009410:	6263      	str	r3, [r4, #36]	; 0x24
 8009412:	4b05      	ldr	r3, [pc, #20]	; (8009428 <std+0x3c>)
 8009414:	62a3      	str	r3, [r4, #40]	; 0x28
 8009416:	4b05      	ldr	r3, [pc, #20]	; (800942c <std+0x40>)
 8009418:	62e3      	str	r3, [r4, #44]	; 0x2c
 800941a:	4b05      	ldr	r3, [pc, #20]	; (8009430 <std+0x44>)
 800941c:	6224      	str	r4, [r4, #32]
 800941e:	6323      	str	r3, [r4, #48]	; 0x30
 8009420:	bd10      	pop	{r4, pc}
 8009422:	bf00      	nop
 8009424:	08009e65 	.word	0x08009e65
 8009428:	08009e87 	.word	0x08009e87
 800942c:	08009ebf 	.word	0x08009ebf
 8009430:	08009ee3 	.word	0x08009ee3

08009434 <_cleanup_r>:
 8009434:	4901      	ldr	r1, [pc, #4]	; (800943c <_cleanup_r+0x8>)
 8009436:	f000 b8af 	b.w	8009598 <_fwalk_reent>
 800943a:	bf00      	nop
 800943c:	08009375 	.word	0x08009375

08009440 <__sfmoreglue>:
 8009440:	b570      	push	{r4, r5, r6, lr}
 8009442:	2268      	movs	r2, #104	; 0x68
 8009444:	1e4d      	subs	r5, r1, #1
 8009446:	4355      	muls	r5, r2
 8009448:	460e      	mov	r6, r1
 800944a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800944e:	f000 f997 	bl	8009780 <_malloc_r>
 8009452:	4604      	mov	r4, r0
 8009454:	b140      	cbz	r0, 8009468 <__sfmoreglue+0x28>
 8009456:	2100      	movs	r1, #0
 8009458:	e9c0 1600 	strd	r1, r6, [r0]
 800945c:	300c      	adds	r0, #12
 800945e:	60a0      	str	r0, [r4, #8]
 8009460:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009464:	f7ff fdaa 	bl	8008fbc <memset>
 8009468:	4620      	mov	r0, r4
 800946a:	bd70      	pop	{r4, r5, r6, pc}

0800946c <__sfp_lock_acquire>:
 800946c:	4801      	ldr	r0, [pc, #4]	; (8009474 <__sfp_lock_acquire+0x8>)
 800946e:	f000 b8b3 	b.w	80095d8 <__retarget_lock_acquire_recursive>
 8009472:	bf00      	nop
 8009474:	200135bd 	.word	0x200135bd

08009478 <__sfp_lock_release>:
 8009478:	4801      	ldr	r0, [pc, #4]	; (8009480 <__sfp_lock_release+0x8>)
 800947a:	f000 b8ae 	b.w	80095da <__retarget_lock_release_recursive>
 800947e:	bf00      	nop
 8009480:	200135bd 	.word	0x200135bd

08009484 <__sinit_lock_acquire>:
 8009484:	4801      	ldr	r0, [pc, #4]	; (800948c <__sinit_lock_acquire+0x8>)
 8009486:	f000 b8a7 	b.w	80095d8 <__retarget_lock_acquire_recursive>
 800948a:	bf00      	nop
 800948c:	200135be 	.word	0x200135be

08009490 <__sinit_lock_release>:
 8009490:	4801      	ldr	r0, [pc, #4]	; (8009498 <__sinit_lock_release+0x8>)
 8009492:	f000 b8a2 	b.w	80095da <__retarget_lock_release_recursive>
 8009496:	bf00      	nop
 8009498:	200135be 	.word	0x200135be

0800949c <__sinit>:
 800949c:	b510      	push	{r4, lr}
 800949e:	4604      	mov	r4, r0
 80094a0:	f7ff fff0 	bl	8009484 <__sinit_lock_acquire>
 80094a4:	69a3      	ldr	r3, [r4, #24]
 80094a6:	b11b      	cbz	r3, 80094b0 <__sinit+0x14>
 80094a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094ac:	f7ff bff0 	b.w	8009490 <__sinit_lock_release>
 80094b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094b4:	6523      	str	r3, [r4, #80]	; 0x50
 80094b6:	4b13      	ldr	r3, [pc, #76]	; (8009504 <__sinit+0x68>)
 80094b8:	4a13      	ldr	r2, [pc, #76]	; (8009508 <__sinit+0x6c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80094be:	42a3      	cmp	r3, r4
 80094c0:	bf04      	itt	eq
 80094c2:	2301      	moveq	r3, #1
 80094c4:	61a3      	streq	r3, [r4, #24]
 80094c6:	4620      	mov	r0, r4
 80094c8:	f000 f820 	bl	800950c <__sfp>
 80094cc:	6060      	str	r0, [r4, #4]
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 f81c 	bl	800950c <__sfp>
 80094d4:	60a0      	str	r0, [r4, #8]
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 f818 	bl	800950c <__sfp>
 80094dc:	2200      	movs	r2, #0
 80094de:	60e0      	str	r0, [r4, #12]
 80094e0:	2104      	movs	r1, #4
 80094e2:	6860      	ldr	r0, [r4, #4]
 80094e4:	f7ff ff82 	bl	80093ec <std>
 80094e8:	68a0      	ldr	r0, [r4, #8]
 80094ea:	2201      	movs	r2, #1
 80094ec:	2109      	movs	r1, #9
 80094ee:	f7ff ff7d 	bl	80093ec <std>
 80094f2:	68e0      	ldr	r0, [r4, #12]
 80094f4:	2202      	movs	r2, #2
 80094f6:	2112      	movs	r1, #18
 80094f8:	f7ff ff78 	bl	80093ec <std>
 80094fc:	2301      	movs	r3, #1
 80094fe:	61a3      	str	r3, [r4, #24]
 8009500:	e7d2      	b.n	80094a8 <__sinit+0xc>
 8009502:	bf00      	nop
 8009504:	0800a270 	.word	0x0800a270
 8009508:	08009435 	.word	0x08009435

0800950c <__sfp>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	4607      	mov	r7, r0
 8009510:	f7ff ffac 	bl	800946c <__sfp_lock_acquire>
 8009514:	4b1e      	ldr	r3, [pc, #120]	; (8009590 <__sfp+0x84>)
 8009516:	681e      	ldr	r6, [r3, #0]
 8009518:	69b3      	ldr	r3, [r6, #24]
 800951a:	b913      	cbnz	r3, 8009522 <__sfp+0x16>
 800951c:	4630      	mov	r0, r6
 800951e:	f7ff ffbd 	bl	800949c <__sinit>
 8009522:	3648      	adds	r6, #72	; 0x48
 8009524:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009528:	3b01      	subs	r3, #1
 800952a:	d503      	bpl.n	8009534 <__sfp+0x28>
 800952c:	6833      	ldr	r3, [r6, #0]
 800952e:	b30b      	cbz	r3, 8009574 <__sfp+0x68>
 8009530:	6836      	ldr	r6, [r6, #0]
 8009532:	e7f7      	b.n	8009524 <__sfp+0x18>
 8009534:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009538:	b9d5      	cbnz	r5, 8009570 <__sfp+0x64>
 800953a:	4b16      	ldr	r3, [pc, #88]	; (8009594 <__sfp+0x88>)
 800953c:	60e3      	str	r3, [r4, #12]
 800953e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009542:	6665      	str	r5, [r4, #100]	; 0x64
 8009544:	f000 f847 	bl	80095d6 <__retarget_lock_init_recursive>
 8009548:	f7ff ff96 	bl	8009478 <__sfp_lock_release>
 800954c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009550:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009554:	6025      	str	r5, [r4, #0]
 8009556:	61a5      	str	r5, [r4, #24]
 8009558:	2208      	movs	r2, #8
 800955a:	4629      	mov	r1, r5
 800955c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009560:	f7ff fd2c 	bl	8008fbc <memset>
 8009564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800956c:	4620      	mov	r0, r4
 800956e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009570:	3468      	adds	r4, #104	; 0x68
 8009572:	e7d9      	b.n	8009528 <__sfp+0x1c>
 8009574:	2104      	movs	r1, #4
 8009576:	4638      	mov	r0, r7
 8009578:	f7ff ff62 	bl	8009440 <__sfmoreglue>
 800957c:	4604      	mov	r4, r0
 800957e:	6030      	str	r0, [r6, #0]
 8009580:	2800      	cmp	r0, #0
 8009582:	d1d5      	bne.n	8009530 <__sfp+0x24>
 8009584:	f7ff ff78 	bl	8009478 <__sfp_lock_release>
 8009588:	230c      	movs	r3, #12
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	e7ee      	b.n	800956c <__sfp+0x60>
 800958e:	bf00      	nop
 8009590:	0800a270 	.word	0x0800a270
 8009594:	ffff0001 	.word	0xffff0001

08009598 <_fwalk_reent>:
 8009598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800959c:	4606      	mov	r6, r0
 800959e:	4688      	mov	r8, r1
 80095a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095a4:	2700      	movs	r7, #0
 80095a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095aa:	f1b9 0901 	subs.w	r9, r9, #1
 80095ae:	d505      	bpl.n	80095bc <_fwalk_reent+0x24>
 80095b0:	6824      	ldr	r4, [r4, #0]
 80095b2:	2c00      	cmp	r4, #0
 80095b4:	d1f7      	bne.n	80095a6 <_fwalk_reent+0xe>
 80095b6:	4638      	mov	r0, r7
 80095b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095bc:	89ab      	ldrh	r3, [r5, #12]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d907      	bls.n	80095d2 <_fwalk_reent+0x3a>
 80095c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095c6:	3301      	adds	r3, #1
 80095c8:	d003      	beq.n	80095d2 <_fwalk_reent+0x3a>
 80095ca:	4629      	mov	r1, r5
 80095cc:	4630      	mov	r0, r6
 80095ce:	47c0      	blx	r8
 80095d0:	4307      	orrs	r7, r0
 80095d2:	3568      	adds	r5, #104	; 0x68
 80095d4:	e7e9      	b.n	80095aa <_fwalk_reent+0x12>

080095d6 <__retarget_lock_init_recursive>:
 80095d6:	4770      	bx	lr

080095d8 <__retarget_lock_acquire_recursive>:
 80095d8:	4770      	bx	lr

080095da <__retarget_lock_release_recursive>:
 80095da:	4770      	bx	lr

080095dc <__swhatbuf_r>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	460e      	mov	r6, r1
 80095e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e4:	2900      	cmp	r1, #0
 80095e6:	b096      	sub	sp, #88	; 0x58
 80095e8:	4614      	mov	r4, r2
 80095ea:	461d      	mov	r5, r3
 80095ec:	da08      	bge.n	8009600 <__swhatbuf_r+0x24>
 80095ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	602a      	str	r2, [r5, #0]
 80095f6:	061a      	lsls	r2, r3, #24
 80095f8:	d410      	bmi.n	800961c <__swhatbuf_r+0x40>
 80095fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095fe:	e00e      	b.n	800961e <__swhatbuf_r+0x42>
 8009600:	466a      	mov	r2, sp
 8009602:	f000 fc95 	bl	8009f30 <_fstat_r>
 8009606:	2800      	cmp	r0, #0
 8009608:	dbf1      	blt.n	80095ee <__swhatbuf_r+0x12>
 800960a:	9a01      	ldr	r2, [sp, #4]
 800960c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009610:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009614:	425a      	negs	r2, r3
 8009616:	415a      	adcs	r2, r3
 8009618:	602a      	str	r2, [r5, #0]
 800961a:	e7ee      	b.n	80095fa <__swhatbuf_r+0x1e>
 800961c:	2340      	movs	r3, #64	; 0x40
 800961e:	2000      	movs	r0, #0
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	b016      	add	sp, #88	; 0x58
 8009624:	bd70      	pop	{r4, r5, r6, pc}
	...

08009628 <__smakebuf_r>:
 8009628:	898b      	ldrh	r3, [r1, #12]
 800962a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800962c:	079d      	lsls	r5, r3, #30
 800962e:	4606      	mov	r6, r0
 8009630:	460c      	mov	r4, r1
 8009632:	d507      	bpl.n	8009644 <__smakebuf_r+0x1c>
 8009634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	6123      	str	r3, [r4, #16]
 800963c:	2301      	movs	r3, #1
 800963e:	6163      	str	r3, [r4, #20]
 8009640:	b002      	add	sp, #8
 8009642:	bd70      	pop	{r4, r5, r6, pc}
 8009644:	ab01      	add	r3, sp, #4
 8009646:	466a      	mov	r2, sp
 8009648:	f7ff ffc8 	bl	80095dc <__swhatbuf_r>
 800964c:	9900      	ldr	r1, [sp, #0]
 800964e:	4605      	mov	r5, r0
 8009650:	4630      	mov	r0, r6
 8009652:	f000 f895 	bl	8009780 <_malloc_r>
 8009656:	b948      	cbnz	r0, 800966c <__smakebuf_r+0x44>
 8009658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800965c:	059a      	lsls	r2, r3, #22
 800965e:	d4ef      	bmi.n	8009640 <__smakebuf_r+0x18>
 8009660:	f023 0303 	bic.w	r3, r3, #3
 8009664:	f043 0302 	orr.w	r3, r3, #2
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	e7e3      	b.n	8009634 <__smakebuf_r+0xc>
 800966c:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <__smakebuf_r+0x7c>)
 800966e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	6020      	str	r0, [r4, #0]
 8009674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009678:	81a3      	strh	r3, [r4, #12]
 800967a:	9b00      	ldr	r3, [sp, #0]
 800967c:	6163      	str	r3, [r4, #20]
 800967e:	9b01      	ldr	r3, [sp, #4]
 8009680:	6120      	str	r0, [r4, #16]
 8009682:	b15b      	cbz	r3, 800969c <__smakebuf_r+0x74>
 8009684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009688:	4630      	mov	r0, r6
 800968a:	f000 fc63 	bl	8009f54 <_isatty_r>
 800968e:	b128      	cbz	r0, 800969c <__smakebuf_r+0x74>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	f023 0303 	bic.w	r3, r3, #3
 8009696:	f043 0301 	orr.w	r3, r3, #1
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	89a0      	ldrh	r0, [r4, #12]
 800969e:	4305      	orrs	r5, r0
 80096a0:	81a5      	strh	r5, [r4, #12]
 80096a2:	e7cd      	b.n	8009640 <__smakebuf_r+0x18>
 80096a4:	08009435 	.word	0x08009435

080096a8 <_free_r>:
 80096a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096aa:	2900      	cmp	r1, #0
 80096ac:	d044      	beq.n	8009738 <_free_r+0x90>
 80096ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b2:	9001      	str	r0, [sp, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f1a1 0404 	sub.w	r4, r1, #4
 80096ba:	bfb8      	it	lt
 80096bc:	18e4      	addlt	r4, r4, r3
 80096be:	f000 fc6b 	bl	8009f98 <__malloc_lock>
 80096c2:	4a1e      	ldr	r2, [pc, #120]	; (800973c <_free_r+0x94>)
 80096c4:	9801      	ldr	r0, [sp, #4]
 80096c6:	6813      	ldr	r3, [r2, #0]
 80096c8:	b933      	cbnz	r3, 80096d8 <_free_r+0x30>
 80096ca:	6063      	str	r3, [r4, #4]
 80096cc:	6014      	str	r4, [r2, #0]
 80096ce:	b003      	add	sp, #12
 80096d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096d4:	f000 bc66 	b.w	8009fa4 <__malloc_unlock>
 80096d8:	42a3      	cmp	r3, r4
 80096da:	d908      	bls.n	80096ee <_free_r+0x46>
 80096dc:	6825      	ldr	r5, [r4, #0]
 80096de:	1961      	adds	r1, r4, r5
 80096e0:	428b      	cmp	r3, r1
 80096e2:	bf01      	itttt	eq
 80096e4:	6819      	ldreq	r1, [r3, #0]
 80096e6:	685b      	ldreq	r3, [r3, #4]
 80096e8:	1949      	addeq	r1, r1, r5
 80096ea:	6021      	streq	r1, [r4, #0]
 80096ec:	e7ed      	b.n	80096ca <_free_r+0x22>
 80096ee:	461a      	mov	r2, r3
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	b10b      	cbz	r3, 80096f8 <_free_r+0x50>
 80096f4:	42a3      	cmp	r3, r4
 80096f6:	d9fa      	bls.n	80096ee <_free_r+0x46>
 80096f8:	6811      	ldr	r1, [r2, #0]
 80096fa:	1855      	adds	r5, r2, r1
 80096fc:	42a5      	cmp	r5, r4
 80096fe:	d10b      	bne.n	8009718 <_free_r+0x70>
 8009700:	6824      	ldr	r4, [r4, #0]
 8009702:	4421      	add	r1, r4
 8009704:	1854      	adds	r4, r2, r1
 8009706:	42a3      	cmp	r3, r4
 8009708:	6011      	str	r1, [r2, #0]
 800970a:	d1e0      	bne.n	80096ce <_free_r+0x26>
 800970c:	681c      	ldr	r4, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	6053      	str	r3, [r2, #4]
 8009712:	4421      	add	r1, r4
 8009714:	6011      	str	r1, [r2, #0]
 8009716:	e7da      	b.n	80096ce <_free_r+0x26>
 8009718:	d902      	bls.n	8009720 <_free_r+0x78>
 800971a:	230c      	movs	r3, #12
 800971c:	6003      	str	r3, [r0, #0]
 800971e:	e7d6      	b.n	80096ce <_free_r+0x26>
 8009720:	6825      	ldr	r5, [r4, #0]
 8009722:	1961      	adds	r1, r4, r5
 8009724:	428b      	cmp	r3, r1
 8009726:	bf04      	itt	eq
 8009728:	6819      	ldreq	r1, [r3, #0]
 800972a:	685b      	ldreq	r3, [r3, #4]
 800972c:	6063      	str	r3, [r4, #4]
 800972e:	bf04      	itt	eq
 8009730:	1949      	addeq	r1, r1, r5
 8009732:	6021      	streq	r1, [r4, #0]
 8009734:	6054      	str	r4, [r2, #4]
 8009736:	e7ca      	b.n	80096ce <_free_r+0x26>
 8009738:	b003      	add	sp, #12
 800973a:	bd30      	pop	{r4, r5, pc}
 800973c:	200135c0 	.word	0x200135c0

08009740 <sbrk_aligned>:
 8009740:	b570      	push	{r4, r5, r6, lr}
 8009742:	4e0e      	ldr	r6, [pc, #56]	; (800977c <sbrk_aligned+0x3c>)
 8009744:	460c      	mov	r4, r1
 8009746:	6831      	ldr	r1, [r6, #0]
 8009748:	4605      	mov	r5, r0
 800974a:	b911      	cbnz	r1, 8009752 <sbrk_aligned+0x12>
 800974c:	f000 fb7a 	bl	8009e44 <_sbrk_r>
 8009750:	6030      	str	r0, [r6, #0]
 8009752:	4621      	mov	r1, r4
 8009754:	4628      	mov	r0, r5
 8009756:	f000 fb75 	bl	8009e44 <_sbrk_r>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	d00a      	beq.n	8009774 <sbrk_aligned+0x34>
 800975e:	1cc4      	adds	r4, r0, #3
 8009760:	f024 0403 	bic.w	r4, r4, #3
 8009764:	42a0      	cmp	r0, r4
 8009766:	d007      	beq.n	8009778 <sbrk_aligned+0x38>
 8009768:	1a21      	subs	r1, r4, r0
 800976a:	4628      	mov	r0, r5
 800976c:	f000 fb6a 	bl	8009e44 <_sbrk_r>
 8009770:	3001      	adds	r0, #1
 8009772:	d101      	bne.n	8009778 <sbrk_aligned+0x38>
 8009774:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009778:	4620      	mov	r0, r4
 800977a:	bd70      	pop	{r4, r5, r6, pc}
 800977c:	200135c4 	.word	0x200135c4

08009780 <_malloc_r>:
 8009780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009784:	1ccd      	adds	r5, r1, #3
 8009786:	f025 0503 	bic.w	r5, r5, #3
 800978a:	3508      	adds	r5, #8
 800978c:	2d0c      	cmp	r5, #12
 800978e:	bf38      	it	cc
 8009790:	250c      	movcc	r5, #12
 8009792:	2d00      	cmp	r5, #0
 8009794:	4607      	mov	r7, r0
 8009796:	db01      	blt.n	800979c <_malloc_r+0x1c>
 8009798:	42a9      	cmp	r1, r5
 800979a:	d905      	bls.n	80097a8 <_malloc_r+0x28>
 800979c:	230c      	movs	r3, #12
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	2600      	movs	r6, #0
 80097a2:	4630      	mov	r0, r6
 80097a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a8:	4e2e      	ldr	r6, [pc, #184]	; (8009864 <_malloc_r+0xe4>)
 80097aa:	f000 fbf5 	bl	8009f98 <__malloc_lock>
 80097ae:	6833      	ldr	r3, [r6, #0]
 80097b0:	461c      	mov	r4, r3
 80097b2:	bb34      	cbnz	r4, 8009802 <_malloc_r+0x82>
 80097b4:	4629      	mov	r1, r5
 80097b6:	4638      	mov	r0, r7
 80097b8:	f7ff ffc2 	bl	8009740 <sbrk_aligned>
 80097bc:	1c43      	adds	r3, r0, #1
 80097be:	4604      	mov	r4, r0
 80097c0:	d14d      	bne.n	800985e <_malloc_r+0xde>
 80097c2:	6834      	ldr	r4, [r6, #0]
 80097c4:	4626      	mov	r6, r4
 80097c6:	2e00      	cmp	r6, #0
 80097c8:	d140      	bne.n	800984c <_malloc_r+0xcc>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	4631      	mov	r1, r6
 80097ce:	4638      	mov	r0, r7
 80097d0:	eb04 0803 	add.w	r8, r4, r3
 80097d4:	f000 fb36 	bl	8009e44 <_sbrk_r>
 80097d8:	4580      	cmp	r8, r0
 80097da:	d13a      	bne.n	8009852 <_malloc_r+0xd2>
 80097dc:	6821      	ldr	r1, [r4, #0]
 80097de:	3503      	adds	r5, #3
 80097e0:	1a6d      	subs	r5, r5, r1
 80097e2:	f025 0503 	bic.w	r5, r5, #3
 80097e6:	3508      	adds	r5, #8
 80097e8:	2d0c      	cmp	r5, #12
 80097ea:	bf38      	it	cc
 80097ec:	250c      	movcc	r5, #12
 80097ee:	4629      	mov	r1, r5
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7ff ffa5 	bl	8009740 <sbrk_aligned>
 80097f6:	3001      	adds	r0, #1
 80097f8:	d02b      	beq.n	8009852 <_malloc_r+0xd2>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	442b      	add	r3, r5
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	e00e      	b.n	8009820 <_malloc_r+0xa0>
 8009802:	6822      	ldr	r2, [r4, #0]
 8009804:	1b52      	subs	r2, r2, r5
 8009806:	d41e      	bmi.n	8009846 <_malloc_r+0xc6>
 8009808:	2a0b      	cmp	r2, #11
 800980a:	d916      	bls.n	800983a <_malloc_r+0xba>
 800980c:	1961      	adds	r1, r4, r5
 800980e:	42a3      	cmp	r3, r4
 8009810:	6025      	str	r5, [r4, #0]
 8009812:	bf18      	it	ne
 8009814:	6059      	strne	r1, [r3, #4]
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	bf08      	it	eq
 800981a:	6031      	streq	r1, [r6, #0]
 800981c:	5162      	str	r2, [r4, r5]
 800981e:	604b      	str	r3, [r1, #4]
 8009820:	4638      	mov	r0, r7
 8009822:	f104 060b 	add.w	r6, r4, #11
 8009826:	f000 fbbd 	bl	8009fa4 <__malloc_unlock>
 800982a:	f026 0607 	bic.w	r6, r6, #7
 800982e:	1d23      	adds	r3, r4, #4
 8009830:	1af2      	subs	r2, r6, r3
 8009832:	d0b6      	beq.n	80097a2 <_malloc_r+0x22>
 8009834:	1b9b      	subs	r3, r3, r6
 8009836:	50a3      	str	r3, [r4, r2]
 8009838:	e7b3      	b.n	80097a2 <_malloc_r+0x22>
 800983a:	6862      	ldr	r2, [r4, #4]
 800983c:	42a3      	cmp	r3, r4
 800983e:	bf0c      	ite	eq
 8009840:	6032      	streq	r2, [r6, #0]
 8009842:	605a      	strne	r2, [r3, #4]
 8009844:	e7ec      	b.n	8009820 <_malloc_r+0xa0>
 8009846:	4623      	mov	r3, r4
 8009848:	6864      	ldr	r4, [r4, #4]
 800984a:	e7b2      	b.n	80097b2 <_malloc_r+0x32>
 800984c:	4634      	mov	r4, r6
 800984e:	6876      	ldr	r6, [r6, #4]
 8009850:	e7b9      	b.n	80097c6 <_malloc_r+0x46>
 8009852:	230c      	movs	r3, #12
 8009854:	603b      	str	r3, [r7, #0]
 8009856:	4638      	mov	r0, r7
 8009858:	f000 fba4 	bl	8009fa4 <__malloc_unlock>
 800985c:	e7a1      	b.n	80097a2 <_malloc_r+0x22>
 800985e:	6025      	str	r5, [r4, #0]
 8009860:	e7de      	b.n	8009820 <_malloc_r+0xa0>
 8009862:	bf00      	nop
 8009864:	200135c0 	.word	0x200135c0

08009868 <__sfputc_r>:
 8009868:	6893      	ldr	r3, [r2, #8]
 800986a:	3b01      	subs	r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	b410      	push	{r4}
 8009870:	6093      	str	r3, [r2, #8]
 8009872:	da08      	bge.n	8009886 <__sfputc_r+0x1e>
 8009874:	6994      	ldr	r4, [r2, #24]
 8009876:	42a3      	cmp	r3, r4
 8009878:	db01      	blt.n	800987e <__sfputc_r+0x16>
 800987a:	290a      	cmp	r1, #10
 800987c:	d103      	bne.n	8009886 <__sfputc_r+0x1e>
 800987e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009882:	f7ff bc31 	b.w	80090e8 <__swbuf_r>
 8009886:	6813      	ldr	r3, [r2, #0]
 8009888:	1c58      	adds	r0, r3, #1
 800988a:	6010      	str	r0, [r2, #0]
 800988c:	7019      	strb	r1, [r3, #0]
 800988e:	4608      	mov	r0, r1
 8009890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009894:	4770      	bx	lr

08009896 <__sfputs_r>:
 8009896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009898:	4606      	mov	r6, r0
 800989a:	460f      	mov	r7, r1
 800989c:	4614      	mov	r4, r2
 800989e:	18d5      	adds	r5, r2, r3
 80098a0:	42ac      	cmp	r4, r5
 80098a2:	d101      	bne.n	80098a8 <__sfputs_r+0x12>
 80098a4:	2000      	movs	r0, #0
 80098a6:	e007      	b.n	80098b8 <__sfputs_r+0x22>
 80098a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ac:	463a      	mov	r2, r7
 80098ae:	4630      	mov	r0, r6
 80098b0:	f7ff ffda 	bl	8009868 <__sfputc_r>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	d1f3      	bne.n	80098a0 <__sfputs_r+0xa>
 80098b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098bc <_vfiprintf_r>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	460d      	mov	r5, r1
 80098c2:	b09d      	sub	sp, #116	; 0x74
 80098c4:	4614      	mov	r4, r2
 80098c6:	4698      	mov	r8, r3
 80098c8:	4606      	mov	r6, r0
 80098ca:	b118      	cbz	r0, 80098d4 <_vfiprintf_r+0x18>
 80098cc:	6983      	ldr	r3, [r0, #24]
 80098ce:	b90b      	cbnz	r3, 80098d4 <_vfiprintf_r+0x18>
 80098d0:	f7ff fde4 	bl	800949c <__sinit>
 80098d4:	4b89      	ldr	r3, [pc, #548]	; (8009afc <_vfiprintf_r+0x240>)
 80098d6:	429d      	cmp	r5, r3
 80098d8:	d11b      	bne.n	8009912 <_vfiprintf_r+0x56>
 80098da:	6875      	ldr	r5, [r6, #4]
 80098dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098de:	07d9      	lsls	r1, r3, #31
 80098e0:	d405      	bmi.n	80098ee <_vfiprintf_r+0x32>
 80098e2:	89ab      	ldrh	r3, [r5, #12]
 80098e4:	059a      	lsls	r2, r3, #22
 80098e6:	d402      	bmi.n	80098ee <_vfiprintf_r+0x32>
 80098e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ea:	f7ff fe75 	bl	80095d8 <__retarget_lock_acquire_recursive>
 80098ee:	89ab      	ldrh	r3, [r5, #12]
 80098f0:	071b      	lsls	r3, r3, #28
 80098f2:	d501      	bpl.n	80098f8 <_vfiprintf_r+0x3c>
 80098f4:	692b      	ldr	r3, [r5, #16]
 80098f6:	b9eb      	cbnz	r3, 8009934 <_vfiprintf_r+0x78>
 80098f8:	4629      	mov	r1, r5
 80098fa:	4630      	mov	r0, r6
 80098fc:	f7ff fc46 	bl	800918c <__swsetup_r>
 8009900:	b1c0      	cbz	r0, 8009934 <_vfiprintf_r+0x78>
 8009902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009904:	07dc      	lsls	r4, r3, #31
 8009906:	d50e      	bpl.n	8009926 <_vfiprintf_r+0x6a>
 8009908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800990c:	b01d      	add	sp, #116	; 0x74
 800990e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009912:	4b7b      	ldr	r3, [pc, #492]	; (8009b00 <_vfiprintf_r+0x244>)
 8009914:	429d      	cmp	r5, r3
 8009916:	d101      	bne.n	800991c <_vfiprintf_r+0x60>
 8009918:	68b5      	ldr	r5, [r6, #8]
 800991a:	e7df      	b.n	80098dc <_vfiprintf_r+0x20>
 800991c:	4b79      	ldr	r3, [pc, #484]	; (8009b04 <_vfiprintf_r+0x248>)
 800991e:	429d      	cmp	r5, r3
 8009920:	bf08      	it	eq
 8009922:	68f5      	ldreq	r5, [r6, #12]
 8009924:	e7da      	b.n	80098dc <_vfiprintf_r+0x20>
 8009926:	89ab      	ldrh	r3, [r5, #12]
 8009928:	0598      	lsls	r0, r3, #22
 800992a:	d4ed      	bmi.n	8009908 <_vfiprintf_r+0x4c>
 800992c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800992e:	f7ff fe54 	bl	80095da <__retarget_lock_release_recursive>
 8009932:	e7e9      	b.n	8009908 <_vfiprintf_r+0x4c>
 8009934:	2300      	movs	r3, #0
 8009936:	9309      	str	r3, [sp, #36]	; 0x24
 8009938:	2320      	movs	r3, #32
 800993a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800993e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009942:	2330      	movs	r3, #48	; 0x30
 8009944:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b08 <_vfiprintf_r+0x24c>
 8009948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800994c:	f04f 0901 	mov.w	r9, #1
 8009950:	4623      	mov	r3, r4
 8009952:	469a      	mov	sl, r3
 8009954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009958:	b10a      	cbz	r2, 800995e <_vfiprintf_r+0xa2>
 800995a:	2a25      	cmp	r2, #37	; 0x25
 800995c:	d1f9      	bne.n	8009952 <_vfiprintf_r+0x96>
 800995e:	ebba 0b04 	subs.w	fp, sl, r4
 8009962:	d00b      	beq.n	800997c <_vfiprintf_r+0xc0>
 8009964:	465b      	mov	r3, fp
 8009966:	4622      	mov	r2, r4
 8009968:	4629      	mov	r1, r5
 800996a:	4630      	mov	r0, r6
 800996c:	f7ff ff93 	bl	8009896 <__sfputs_r>
 8009970:	3001      	adds	r0, #1
 8009972:	f000 80aa 	beq.w	8009aca <_vfiprintf_r+0x20e>
 8009976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009978:	445a      	add	r2, fp
 800997a:	9209      	str	r2, [sp, #36]	; 0x24
 800997c:	f89a 3000 	ldrb.w	r3, [sl]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 80a2 	beq.w	8009aca <_vfiprintf_r+0x20e>
 8009986:	2300      	movs	r3, #0
 8009988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800998c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009990:	f10a 0a01 	add.w	sl, sl, #1
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	9307      	str	r3, [sp, #28]
 8009998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800999c:	931a      	str	r3, [sp, #104]	; 0x68
 800999e:	4654      	mov	r4, sl
 80099a0:	2205      	movs	r2, #5
 80099a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a6:	4858      	ldr	r0, [pc, #352]	; (8009b08 <_vfiprintf_r+0x24c>)
 80099a8:	f7f6 fc2a 	bl	8000200 <memchr>
 80099ac:	9a04      	ldr	r2, [sp, #16]
 80099ae:	b9d8      	cbnz	r0, 80099e8 <_vfiprintf_r+0x12c>
 80099b0:	06d1      	lsls	r1, r2, #27
 80099b2:	bf44      	itt	mi
 80099b4:	2320      	movmi	r3, #32
 80099b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ba:	0713      	lsls	r3, r2, #28
 80099bc:	bf44      	itt	mi
 80099be:	232b      	movmi	r3, #43	; 0x2b
 80099c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099c4:	f89a 3000 	ldrb.w	r3, [sl]
 80099c8:	2b2a      	cmp	r3, #42	; 0x2a
 80099ca:	d015      	beq.n	80099f8 <_vfiprintf_r+0x13c>
 80099cc:	9a07      	ldr	r2, [sp, #28]
 80099ce:	4654      	mov	r4, sl
 80099d0:	2000      	movs	r0, #0
 80099d2:	f04f 0c0a 	mov.w	ip, #10
 80099d6:	4621      	mov	r1, r4
 80099d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099dc:	3b30      	subs	r3, #48	; 0x30
 80099de:	2b09      	cmp	r3, #9
 80099e0:	d94e      	bls.n	8009a80 <_vfiprintf_r+0x1c4>
 80099e2:	b1b0      	cbz	r0, 8009a12 <_vfiprintf_r+0x156>
 80099e4:	9207      	str	r2, [sp, #28]
 80099e6:	e014      	b.n	8009a12 <_vfiprintf_r+0x156>
 80099e8:	eba0 0308 	sub.w	r3, r0, r8
 80099ec:	fa09 f303 	lsl.w	r3, r9, r3
 80099f0:	4313      	orrs	r3, r2
 80099f2:	9304      	str	r3, [sp, #16]
 80099f4:	46a2      	mov	sl, r4
 80099f6:	e7d2      	b.n	800999e <_vfiprintf_r+0xe2>
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	1d19      	adds	r1, r3, #4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	9103      	str	r1, [sp, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bfbb      	ittet	lt
 8009a04:	425b      	neglt	r3, r3
 8009a06:	f042 0202 	orrlt.w	r2, r2, #2
 8009a0a:	9307      	strge	r3, [sp, #28]
 8009a0c:	9307      	strlt	r3, [sp, #28]
 8009a0e:	bfb8      	it	lt
 8009a10:	9204      	strlt	r2, [sp, #16]
 8009a12:	7823      	ldrb	r3, [r4, #0]
 8009a14:	2b2e      	cmp	r3, #46	; 0x2e
 8009a16:	d10c      	bne.n	8009a32 <_vfiprintf_r+0x176>
 8009a18:	7863      	ldrb	r3, [r4, #1]
 8009a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a1c:	d135      	bne.n	8009a8a <_vfiprintf_r+0x1ce>
 8009a1e:	9b03      	ldr	r3, [sp, #12]
 8009a20:	1d1a      	adds	r2, r3, #4
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	9203      	str	r2, [sp, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	bfb8      	it	lt
 8009a2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a2e:	3402      	adds	r4, #2
 8009a30:	9305      	str	r3, [sp, #20]
 8009a32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b18 <_vfiprintf_r+0x25c>
 8009a36:	7821      	ldrb	r1, [r4, #0]
 8009a38:	2203      	movs	r2, #3
 8009a3a:	4650      	mov	r0, sl
 8009a3c:	f7f6 fbe0 	bl	8000200 <memchr>
 8009a40:	b140      	cbz	r0, 8009a54 <_vfiprintf_r+0x198>
 8009a42:	2340      	movs	r3, #64	; 0x40
 8009a44:	eba0 000a 	sub.w	r0, r0, sl
 8009a48:	fa03 f000 	lsl.w	r0, r3, r0
 8009a4c:	9b04      	ldr	r3, [sp, #16]
 8009a4e:	4303      	orrs	r3, r0
 8009a50:	3401      	adds	r4, #1
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a58:	482c      	ldr	r0, [pc, #176]	; (8009b0c <_vfiprintf_r+0x250>)
 8009a5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a5e:	2206      	movs	r2, #6
 8009a60:	f7f6 fbce 	bl	8000200 <memchr>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d03f      	beq.n	8009ae8 <_vfiprintf_r+0x22c>
 8009a68:	4b29      	ldr	r3, [pc, #164]	; (8009b10 <_vfiprintf_r+0x254>)
 8009a6a:	bb1b      	cbnz	r3, 8009ab4 <_vfiprintf_r+0x1f8>
 8009a6c:	9b03      	ldr	r3, [sp, #12]
 8009a6e:	3307      	adds	r3, #7
 8009a70:	f023 0307 	bic.w	r3, r3, #7
 8009a74:	3308      	adds	r3, #8
 8009a76:	9303      	str	r3, [sp, #12]
 8009a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a7a:	443b      	add	r3, r7
 8009a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7e:	e767      	b.n	8009950 <_vfiprintf_r+0x94>
 8009a80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a84:	460c      	mov	r4, r1
 8009a86:	2001      	movs	r0, #1
 8009a88:	e7a5      	b.n	80099d6 <_vfiprintf_r+0x11a>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	3401      	adds	r4, #1
 8009a8e:	9305      	str	r3, [sp, #20]
 8009a90:	4619      	mov	r1, r3
 8009a92:	f04f 0c0a 	mov.w	ip, #10
 8009a96:	4620      	mov	r0, r4
 8009a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a9c:	3a30      	subs	r2, #48	; 0x30
 8009a9e:	2a09      	cmp	r2, #9
 8009aa0:	d903      	bls.n	8009aaa <_vfiprintf_r+0x1ee>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0c5      	beq.n	8009a32 <_vfiprintf_r+0x176>
 8009aa6:	9105      	str	r1, [sp, #20]
 8009aa8:	e7c3      	b.n	8009a32 <_vfiprintf_r+0x176>
 8009aaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009aae:	4604      	mov	r4, r0
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e7f0      	b.n	8009a96 <_vfiprintf_r+0x1da>
 8009ab4:	ab03      	add	r3, sp, #12
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	462a      	mov	r2, r5
 8009aba:	4b16      	ldr	r3, [pc, #88]	; (8009b14 <_vfiprintf_r+0x258>)
 8009abc:	a904      	add	r1, sp, #16
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f3af 8000 	nop.w
 8009ac4:	4607      	mov	r7, r0
 8009ac6:	1c78      	adds	r0, r7, #1
 8009ac8:	d1d6      	bne.n	8009a78 <_vfiprintf_r+0x1bc>
 8009aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009acc:	07d9      	lsls	r1, r3, #31
 8009ace:	d405      	bmi.n	8009adc <_vfiprintf_r+0x220>
 8009ad0:	89ab      	ldrh	r3, [r5, #12]
 8009ad2:	059a      	lsls	r2, r3, #22
 8009ad4:	d402      	bmi.n	8009adc <_vfiprintf_r+0x220>
 8009ad6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ad8:	f7ff fd7f 	bl	80095da <__retarget_lock_release_recursive>
 8009adc:	89ab      	ldrh	r3, [r5, #12]
 8009ade:	065b      	lsls	r3, r3, #25
 8009ae0:	f53f af12 	bmi.w	8009908 <_vfiprintf_r+0x4c>
 8009ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ae6:	e711      	b.n	800990c <_vfiprintf_r+0x50>
 8009ae8:	ab03      	add	r3, sp, #12
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	462a      	mov	r2, r5
 8009aee:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <_vfiprintf_r+0x258>)
 8009af0:	a904      	add	r1, sp, #16
 8009af2:	4630      	mov	r0, r6
 8009af4:	f000 f880 	bl	8009bf8 <_printf_i>
 8009af8:	e7e4      	b.n	8009ac4 <_vfiprintf_r+0x208>
 8009afa:	bf00      	nop
 8009afc:	0800a294 	.word	0x0800a294
 8009b00:	0800a2b4 	.word	0x0800a2b4
 8009b04:	0800a274 	.word	0x0800a274
 8009b08:	0800a2d4 	.word	0x0800a2d4
 8009b0c:	0800a2de 	.word	0x0800a2de
 8009b10:	00000000 	.word	0x00000000
 8009b14:	08009897 	.word	0x08009897
 8009b18:	0800a2da 	.word	0x0800a2da

08009b1c <_printf_common>:
 8009b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b20:	4616      	mov	r6, r2
 8009b22:	4699      	mov	r9, r3
 8009b24:	688a      	ldr	r2, [r1, #8]
 8009b26:	690b      	ldr	r3, [r1, #16]
 8009b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	bfb8      	it	lt
 8009b30:	4613      	movlt	r3, r2
 8009b32:	6033      	str	r3, [r6, #0]
 8009b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b38:	4607      	mov	r7, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	b10a      	cbz	r2, 8009b42 <_printf_common+0x26>
 8009b3e:	3301      	adds	r3, #1
 8009b40:	6033      	str	r3, [r6, #0]
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	0699      	lsls	r1, r3, #26
 8009b46:	bf42      	ittt	mi
 8009b48:	6833      	ldrmi	r3, [r6, #0]
 8009b4a:	3302      	addmi	r3, #2
 8009b4c:	6033      	strmi	r3, [r6, #0]
 8009b4e:	6825      	ldr	r5, [r4, #0]
 8009b50:	f015 0506 	ands.w	r5, r5, #6
 8009b54:	d106      	bne.n	8009b64 <_printf_common+0x48>
 8009b56:	f104 0a19 	add.w	sl, r4, #25
 8009b5a:	68e3      	ldr	r3, [r4, #12]
 8009b5c:	6832      	ldr	r2, [r6, #0]
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	dc26      	bgt.n	8009bb2 <_printf_common+0x96>
 8009b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b68:	1e13      	subs	r3, r2, #0
 8009b6a:	6822      	ldr	r2, [r4, #0]
 8009b6c:	bf18      	it	ne
 8009b6e:	2301      	movne	r3, #1
 8009b70:	0692      	lsls	r2, r2, #26
 8009b72:	d42b      	bmi.n	8009bcc <_printf_common+0xb0>
 8009b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b78:	4649      	mov	r1, r9
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	47c0      	blx	r8
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d01e      	beq.n	8009bc0 <_printf_common+0xa4>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	68e5      	ldr	r5, [r4, #12]
 8009b86:	6832      	ldr	r2, [r6, #0]
 8009b88:	f003 0306 	and.w	r3, r3, #6
 8009b8c:	2b04      	cmp	r3, #4
 8009b8e:	bf08      	it	eq
 8009b90:	1aad      	subeq	r5, r5, r2
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	6922      	ldr	r2, [r4, #16]
 8009b96:	bf0c      	ite	eq
 8009b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b9c:	2500      	movne	r5, #0
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	bfc4      	itt	gt
 8009ba2:	1a9b      	subgt	r3, r3, r2
 8009ba4:	18ed      	addgt	r5, r5, r3
 8009ba6:	2600      	movs	r6, #0
 8009ba8:	341a      	adds	r4, #26
 8009baa:	42b5      	cmp	r5, r6
 8009bac:	d11a      	bne.n	8009be4 <_printf_common+0xc8>
 8009bae:	2000      	movs	r0, #0
 8009bb0:	e008      	b.n	8009bc4 <_printf_common+0xa8>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4638      	mov	r0, r7
 8009bba:	47c0      	blx	r8
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d103      	bne.n	8009bc8 <_printf_common+0xac>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc8:	3501      	adds	r5, #1
 8009bca:	e7c6      	b.n	8009b5a <_printf_common+0x3e>
 8009bcc:	18e1      	adds	r1, r4, r3
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	2030      	movs	r0, #48	; 0x30
 8009bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bd6:	4422      	add	r2, r4
 8009bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009be0:	3302      	adds	r3, #2
 8009be2:	e7c7      	b.n	8009b74 <_printf_common+0x58>
 8009be4:	2301      	movs	r3, #1
 8009be6:	4622      	mov	r2, r4
 8009be8:	4649      	mov	r1, r9
 8009bea:	4638      	mov	r0, r7
 8009bec:	47c0      	blx	r8
 8009bee:	3001      	adds	r0, #1
 8009bf0:	d0e6      	beq.n	8009bc0 <_printf_common+0xa4>
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	e7d9      	b.n	8009baa <_printf_common+0x8e>
	...

08009bf8 <_printf_i>:
 8009bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bfc:	7e0f      	ldrb	r7, [r1, #24]
 8009bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c00:	2f78      	cmp	r7, #120	; 0x78
 8009c02:	4691      	mov	r9, r2
 8009c04:	4680      	mov	r8, r0
 8009c06:	460c      	mov	r4, r1
 8009c08:	469a      	mov	sl, r3
 8009c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c0e:	d807      	bhi.n	8009c20 <_printf_i+0x28>
 8009c10:	2f62      	cmp	r7, #98	; 0x62
 8009c12:	d80a      	bhi.n	8009c2a <_printf_i+0x32>
 8009c14:	2f00      	cmp	r7, #0
 8009c16:	f000 80d8 	beq.w	8009dca <_printf_i+0x1d2>
 8009c1a:	2f58      	cmp	r7, #88	; 0x58
 8009c1c:	f000 80a3 	beq.w	8009d66 <_printf_i+0x16e>
 8009c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c28:	e03a      	b.n	8009ca0 <_printf_i+0xa8>
 8009c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c2e:	2b15      	cmp	r3, #21
 8009c30:	d8f6      	bhi.n	8009c20 <_printf_i+0x28>
 8009c32:	a101      	add	r1, pc, #4	; (adr r1, 8009c38 <_printf_i+0x40>)
 8009c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c38:	08009c91 	.word	0x08009c91
 8009c3c:	08009ca5 	.word	0x08009ca5
 8009c40:	08009c21 	.word	0x08009c21
 8009c44:	08009c21 	.word	0x08009c21
 8009c48:	08009c21 	.word	0x08009c21
 8009c4c:	08009c21 	.word	0x08009c21
 8009c50:	08009ca5 	.word	0x08009ca5
 8009c54:	08009c21 	.word	0x08009c21
 8009c58:	08009c21 	.word	0x08009c21
 8009c5c:	08009c21 	.word	0x08009c21
 8009c60:	08009c21 	.word	0x08009c21
 8009c64:	08009db1 	.word	0x08009db1
 8009c68:	08009cd5 	.word	0x08009cd5
 8009c6c:	08009d93 	.word	0x08009d93
 8009c70:	08009c21 	.word	0x08009c21
 8009c74:	08009c21 	.word	0x08009c21
 8009c78:	08009dd3 	.word	0x08009dd3
 8009c7c:	08009c21 	.word	0x08009c21
 8009c80:	08009cd5 	.word	0x08009cd5
 8009c84:	08009c21 	.word	0x08009c21
 8009c88:	08009c21 	.word	0x08009c21
 8009c8c:	08009d9b 	.word	0x08009d9b
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	1d1a      	adds	r2, r3, #4
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	602a      	str	r2, [r5, #0]
 8009c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e0a3      	b.n	8009dec <_printf_i+0x1f4>
 8009ca4:	6820      	ldr	r0, [r4, #0]
 8009ca6:	6829      	ldr	r1, [r5, #0]
 8009ca8:	0606      	lsls	r6, r0, #24
 8009caa:	f101 0304 	add.w	r3, r1, #4
 8009cae:	d50a      	bpl.n	8009cc6 <_printf_i+0xce>
 8009cb0:	680e      	ldr	r6, [r1, #0]
 8009cb2:	602b      	str	r3, [r5, #0]
 8009cb4:	2e00      	cmp	r6, #0
 8009cb6:	da03      	bge.n	8009cc0 <_printf_i+0xc8>
 8009cb8:	232d      	movs	r3, #45	; 0x2d
 8009cba:	4276      	negs	r6, r6
 8009cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc0:	485e      	ldr	r0, [pc, #376]	; (8009e3c <_printf_i+0x244>)
 8009cc2:	230a      	movs	r3, #10
 8009cc4:	e019      	b.n	8009cfa <_printf_i+0x102>
 8009cc6:	680e      	ldr	r6, [r1, #0]
 8009cc8:	602b      	str	r3, [r5, #0]
 8009cca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cce:	bf18      	it	ne
 8009cd0:	b236      	sxthne	r6, r6
 8009cd2:	e7ef      	b.n	8009cb4 <_printf_i+0xbc>
 8009cd4:	682b      	ldr	r3, [r5, #0]
 8009cd6:	6820      	ldr	r0, [r4, #0]
 8009cd8:	1d19      	adds	r1, r3, #4
 8009cda:	6029      	str	r1, [r5, #0]
 8009cdc:	0601      	lsls	r1, r0, #24
 8009cde:	d501      	bpl.n	8009ce4 <_printf_i+0xec>
 8009ce0:	681e      	ldr	r6, [r3, #0]
 8009ce2:	e002      	b.n	8009cea <_printf_i+0xf2>
 8009ce4:	0646      	lsls	r6, r0, #25
 8009ce6:	d5fb      	bpl.n	8009ce0 <_printf_i+0xe8>
 8009ce8:	881e      	ldrh	r6, [r3, #0]
 8009cea:	4854      	ldr	r0, [pc, #336]	; (8009e3c <_printf_i+0x244>)
 8009cec:	2f6f      	cmp	r7, #111	; 0x6f
 8009cee:	bf0c      	ite	eq
 8009cf0:	2308      	moveq	r3, #8
 8009cf2:	230a      	movne	r3, #10
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cfa:	6865      	ldr	r5, [r4, #4]
 8009cfc:	60a5      	str	r5, [r4, #8]
 8009cfe:	2d00      	cmp	r5, #0
 8009d00:	bfa2      	ittt	ge
 8009d02:	6821      	ldrge	r1, [r4, #0]
 8009d04:	f021 0104 	bicge.w	r1, r1, #4
 8009d08:	6021      	strge	r1, [r4, #0]
 8009d0a:	b90e      	cbnz	r6, 8009d10 <_printf_i+0x118>
 8009d0c:	2d00      	cmp	r5, #0
 8009d0e:	d04d      	beq.n	8009dac <_printf_i+0x1b4>
 8009d10:	4615      	mov	r5, r2
 8009d12:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d16:	fb03 6711 	mls	r7, r3, r1, r6
 8009d1a:	5dc7      	ldrb	r7, [r0, r7]
 8009d1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d20:	4637      	mov	r7, r6
 8009d22:	42bb      	cmp	r3, r7
 8009d24:	460e      	mov	r6, r1
 8009d26:	d9f4      	bls.n	8009d12 <_printf_i+0x11a>
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d10b      	bne.n	8009d44 <_printf_i+0x14c>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	07de      	lsls	r6, r3, #31
 8009d30:	d508      	bpl.n	8009d44 <_printf_i+0x14c>
 8009d32:	6923      	ldr	r3, [r4, #16]
 8009d34:	6861      	ldr	r1, [r4, #4]
 8009d36:	4299      	cmp	r1, r3
 8009d38:	bfde      	ittt	le
 8009d3a:	2330      	movle	r3, #48	; 0x30
 8009d3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d44:	1b52      	subs	r2, r2, r5
 8009d46:	6122      	str	r2, [r4, #16]
 8009d48:	f8cd a000 	str.w	sl, [sp]
 8009d4c:	464b      	mov	r3, r9
 8009d4e:	aa03      	add	r2, sp, #12
 8009d50:	4621      	mov	r1, r4
 8009d52:	4640      	mov	r0, r8
 8009d54:	f7ff fee2 	bl	8009b1c <_printf_common>
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d14c      	bne.n	8009df6 <_printf_i+0x1fe>
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d60:	b004      	add	sp, #16
 8009d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d66:	4835      	ldr	r0, [pc, #212]	; (8009e3c <_printf_i+0x244>)
 8009d68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d6c:	6829      	ldr	r1, [r5, #0]
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d74:	6029      	str	r1, [r5, #0]
 8009d76:	061d      	lsls	r5, r3, #24
 8009d78:	d514      	bpl.n	8009da4 <_printf_i+0x1ac>
 8009d7a:	07df      	lsls	r7, r3, #31
 8009d7c:	bf44      	itt	mi
 8009d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d82:	6023      	strmi	r3, [r4, #0]
 8009d84:	b91e      	cbnz	r6, 8009d8e <_printf_i+0x196>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	f023 0320 	bic.w	r3, r3, #32
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	2310      	movs	r3, #16
 8009d90:	e7b0      	b.n	8009cf4 <_printf_i+0xfc>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	f043 0320 	orr.w	r3, r3, #32
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	2378      	movs	r3, #120	; 0x78
 8009d9c:	4828      	ldr	r0, [pc, #160]	; (8009e40 <_printf_i+0x248>)
 8009d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009da2:	e7e3      	b.n	8009d6c <_printf_i+0x174>
 8009da4:	0659      	lsls	r1, r3, #25
 8009da6:	bf48      	it	mi
 8009da8:	b2b6      	uxthmi	r6, r6
 8009daa:	e7e6      	b.n	8009d7a <_printf_i+0x182>
 8009dac:	4615      	mov	r5, r2
 8009dae:	e7bb      	b.n	8009d28 <_printf_i+0x130>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	6826      	ldr	r6, [r4, #0]
 8009db4:	6961      	ldr	r1, [r4, #20]
 8009db6:	1d18      	adds	r0, r3, #4
 8009db8:	6028      	str	r0, [r5, #0]
 8009dba:	0635      	lsls	r5, r6, #24
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	d501      	bpl.n	8009dc4 <_printf_i+0x1cc>
 8009dc0:	6019      	str	r1, [r3, #0]
 8009dc2:	e002      	b.n	8009dca <_printf_i+0x1d2>
 8009dc4:	0670      	lsls	r0, r6, #25
 8009dc6:	d5fb      	bpl.n	8009dc0 <_printf_i+0x1c8>
 8009dc8:	8019      	strh	r1, [r3, #0]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6123      	str	r3, [r4, #16]
 8009dce:	4615      	mov	r5, r2
 8009dd0:	e7ba      	b.n	8009d48 <_printf_i+0x150>
 8009dd2:	682b      	ldr	r3, [r5, #0]
 8009dd4:	1d1a      	adds	r2, r3, #4
 8009dd6:	602a      	str	r2, [r5, #0]
 8009dd8:	681d      	ldr	r5, [r3, #0]
 8009dda:	6862      	ldr	r2, [r4, #4]
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4628      	mov	r0, r5
 8009de0:	f7f6 fa0e 	bl	8000200 <memchr>
 8009de4:	b108      	cbz	r0, 8009dea <_printf_i+0x1f2>
 8009de6:	1b40      	subs	r0, r0, r5
 8009de8:	6060      	str	r0, [r4, #4]
 8009dea:	6863      	ldr	r3, [r4, #4]
 8009dec:	6123      	str	r3, [r4, #16]
 8009dee:	2300      	movs	r3, #0
 8009df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df4:	e7a8      	b.n	8009d48 <_printf_i+0x150>
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	462a      	mov	r2, r5
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	47d0      	blx	sl
 8009e00:	3001      	adds	r0, #1
 8009e02:	d0ab      	beq.n	8009d5c <_printf_i+0x164>
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	079b      	lsls	r3, r3, #30
 8009e08:	d413      	bmi.n	8009e32 <_printf_i+0x23a>
 8009e0a:	68e0      	ldr	r0, [r4, #12]
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	4298      	cmp	r0, r3
 8009e10:	bfb8      	it	lt
 8009e12:	4618      	movlt	r0, r3
 8009e14:	e7a4      	b.n	8009d60 <_printf_i+0x168>
 8009e16:	2301      	movs	r3, #1
 8009e18:	4632      	mov	r2, r6
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	47d0      	blx	sl
 8009e20:	3001      	adds	r0, #1
 8009e22:	d09b      	beq.n	8009d5c <_printf_i+0x164>
 8009e24:	3501      	adds	r5, #1
 8009e26:	68e3      	ldr	r3, [r4, #12]
 8009e28:	9903      	ldr	r1, [sp, #12]
 8009e2a:	1a5b      	subs	r3, r3, r1
 8009e2c:	42ab      	cmp	r3, r5
 8009e2e:	dcf2      	bgt.n	8009e16 <_printf_i+0x21e>
 8009e30:	e7eb      	b.n	8009e0a <_printf_i+0x212>
 8009e32:	2500      	movs	r5, #0
 8009e34:	f104 0619 	add.w	r6, r4, #25
 8009e38:	e7f5      	b.n	8009e26 <_printf_i+0x22e>
 8009e3a:	bf00      	nop
 8009e3c:	0800a2e5 	.word	0x0800a2e5
 8009e40:	0800a2f6 	.word	0x0800a2f6

08009e44 <_sbrk_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4d06      	ldr	r5, [pc, #24]	; (8009e60 <_sbrk_r+0x1c>)
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	f7f7 fe24 	bl	8001a9c <_sbrk>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d102      	bne.n	8009e5e <_sbrk_r+0x1a>
 8009e58:	682b      	ldr	r3, [r5, #0]
 8009e5a:	b103      	cbz	r3, 8009e5e <_sbrk_r+0x1a>
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	200135c8 	.word	0x200135c8

08009e64 <__sread>:
 8009e64:	b510      	push	{r4, lr}
 8009e66:	460c      	mov	r4, r1
 8009e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e6c:	f000 f8a0 	bl	8009fb0 <_read_r>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	bfab      	itete	ge
 8009e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e76:	89a3      	ldrhlt	r3, [r4, #12]
 8009e78:	181b      	addge	r3, r3, r0
 8009e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e7e:	bfac      	ite	ge
 8009e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e82:	81a3      	strhlt	r3, [r4, #12]
 8009e84:	bd10      	pop	{r4, pc}

08009e86 <__swrite>:
 8009e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8a:	461f      	mov	r7, r3
 8009e8c:	898b      	ldrh	r3, [r1, #12]
 8009e8e:	05db      	lsls	r3, r3, #23
 8009e90:	4605      	mov	r5, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	4616      	mov	r6, r2
 8009e96:	d505      	bpl.n	8009ea4 <__swrite+0x1e>
 8009e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f000 f868 	bl	8009f74 <_lseek_r>
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eae:	81a3      	strh	r3, [r4, #12]
 8009eb0:	4632      	mov	r2, r6
 8009eb2:	463b      	mov	r3, r7
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eba:	f000 b817 	b.w	8009eec <_write_r>

08009ebe <__sseek>:
 8009ebe:	b510      	push	{r4, lr}
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec6:	f000 f855 	bl	8009f74 <_lseek_r>
 8009eca:	1c43      	adds	r3, r0, #1
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	bf15      	itete	ne
 8009ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eda:	81a3      	strheq	r3, [r4, #12]
 8009edc:	bf18      	it	ne
 8009ede:	81a3      	strhne	r3, [r4, #12]
 8009ee0:	bd10      	pop	{r4, pc}

08009ee2 <__sclose>:
 8009ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee6:	f000 b813 	b.w	8009f10 <_close_r>
	...

08009eec <_write_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4d07      	ldr	r5, [pc, #28]	; (8009f0c <_write_r+0x20>)
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	602a      	str	r2, [r5, #0]
 8009efa:	461a      	mov	r2, r3
 8009efc:	f7f7 fd7d 	bl	80019fa <_write>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d102      	bne.n	8009f0a <_write_r+0x1e>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	b103      	cbz	r3, 8009f0a <_write_r+0x1e>
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
 8009f0c:	200135c8 	.word	0x200135c8

08009f10 <_close_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d06      	ldr	r5, [pc, #24]	; (8009f2c <_close_r+0x1c>)
 8009f14:	2300      	movs	r3, #0
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	602b      	str	r3, [r5, #0]
 8009f1c:	f7f7 fd89 	bl	8001a32 <_close>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_close_r+0x1a>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_close_r+0x1a>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	200135c8 	.word	0x200135c8

08009f30 <_fstat_r>:
 8009f30:	b538      	push	{r3, r4, r5, lr}
 8009f32:	4d07      	ldr	r5, [pc, #28]	; (8009f50 <_fstat_r+0x20>)
 8009f34:	2300      	movs	r3, #0
 8009f36:	4604      	mov	r4, r0
 8009f38:	4608      	mov	r0, r1
 8009f3a:	4611      	mov	r1, r2
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	f7f7 fd84 	bl	8001a4a <_fstat>
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	d102      	bne.n	8009f4c <_fstat_r+0x1c>
 8009f46:	682b      	ldr	r3, [r5, #0]
 8009f48:	b103      	cbz	r3, 8009f4c <_fstat_r+0x1c>
 8009f4a:	6023      	str	r3, [r4, #0]
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	bf00      	nop
 8009f50:	200135c8 	.word	0x200135c8

08009f54 <_isatty_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4d06      	ldr	r5, [pc, #24]	; (8009f70 <_isatty_r+0x1c>)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4608      	mov	r0, r1
 8009f5e:	602b      	str	r3, [r5, #0]
 8009f60:	f7f7 fd83 	bl	8001a6a <_isatty>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	d102      	bne.n	8009f6e <_isatty_r+0x1a>
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	b103      	cbz	r3, 8009f6e <_isatty_r+0x1a>
 8009f6c:	6023      	str	r3, [r4, #0]
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	200135c8 	.word	0x200135c8

08009f74 <_lseek_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	4d07      	ldr	r5, [pc, #28]	; (8009f94 <_lseek_r+0x20>)
 8009f78:	4604      	mov	r4, r0
 8009f7a:	4608      	mov	r0, r1
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	2200      	movs	r2, #0
 8009f80:	602a      	str	r2, [r5, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	f7f7 fd7c 	bl	8001a80 <_lseek>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_lseek_r+0x1e>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_lseek_r+0x1e>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	200135c8 	.word	0x200135c8

08009f98 <__malloc_lock>:
 8009f98:	4801      	ldr	r0, [pc, #4]	; (8009fa0 <__malloc_lock+0x8>)
 8009f9a:	f7ff bb1d 	b.w	80095d8 <__retarget_lock_acquire_recursive>
 8009f9e:	bf00      	nop
 8009fa0:	200135bc 	.word	0x200135bc

08009fa4 <__malloc_unlock>:
 8009fa4:	4801      	ldr	r0, [pc, #4]	; (8009fac <__malloc_unlock+0x8>)
 8009fa6:	f7ff bb18 	b.w	80095da <__retarget_lock_release_recursive>
 8009faa:	bf00      	nop
 8009fac:	200135bc 	.word	0x200135bc

08009fb0 <_read_r>:
 8009fb0:	b538      	push	{r3, r4, r5, lr}
 8009fb2:	4d07      	ldr	r5, [pc, #28]	; (8009fd0 <_read_r+0x20>)
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	4608      	mov	r0, r1
 8009fb8:	4611      	mov	r1, r2
 8009fba:	2200      	movs	r2, #0
 8009fbc:	602a      	str	r2, [r5, #0]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f7f7 fcfe 	bl	80019c0 <_read>
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	d102      	bne.n	8009fce <_read_r+0x1e>
 8009fc8:	682b      	ldr	r3, [r5, #0]
 8009fca:	b103      	cbz	r3, 8009fce <_read_r+0x1e>
 8009fcc:	6023      	str	r3, [r4, #0]
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	200135c8 	.word	0x200135c8

08009fd4 <_init>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	bf00      	nop
 8009fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fda:	bc08      	pop	{r3}
 8009fdc:	469e      	mov	lr, r3
 8009fde:	4770      	bx	lr

08009fe0 <_fini>:
 8009fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe2:	bf00      	nop
 8009fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe6:	bc08      	pop	{r3}
 8009fe8:	469e      	mov	lr, r3
 8009fea:	4770      	bx	lr
