
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800ad98  0800ad98  0001ad98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af80  0800af80  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800af80  0800af80  0001af80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af88  0800af88  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af88  0800af88  0001af88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af8c  0800af8c  0001af8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800af90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000132fc  20000088  0800b018  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013384  0800b018  00023384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168d6  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fd  00000000  00000000  0003698e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003a090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  0003b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026596  00000000  00000000  0003c5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea39  00000000  00000000  00062b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d103c  00000000  00000000  000815a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001525e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca0  00000000  00000000  00152634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad7c 	.word	0x0800ad7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800ad7c 	.word	0x0800ad7c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	0000      	movs	r0, r0
	...

08000ea0 <API_draw_circle>:
//	}
//
//}

int API_draw_circle(uint16_t x_c, uint16_t y_c, uint16_t radius, uint8_t color)
{
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4623      	mov	r3, r4
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	807b      	strh	r3, [r7, #2]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	707b      	strb	r3, [r7, #1]
    int i;
    int j;
    int rads;
    int rad = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]


    for (j = -radius; j <= radius; j++)
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	425b      	negs	r3, r3
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	e056      	b.n	8000f78 <API_draw_circle+0xd8>
    {
        for (i = -radius; i <= radius; i++)
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	425b      	negs	r3, r3
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e04b      	b.n	8000f6a <API_draw_circle+0xca>
        {
            rads = (pow(i, 2) + pow(j, 2));
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff fb1e 	bl	8000514 <__aeabi_i2d>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8000f90 <API_draw_circle+0xf0>
 8000ee0:	ec43 2b10 	vmov	d0, r2, r3
 8000ee4:	f009 f804 	bl	8009ef0 <pow>
 8000ee8:	ec55 4b10 	vmov	r4, r5, d0
 8000eec:	6938      	ldr	r0, [r7, #16]
 8000eee:	f7ff fb11 	bl	8000514 <__aeabi_i2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8000f90 <API_draw_circle+0xf0>
 8000efa:	ec43 2b10 	vmov	d0, r2, r3
 8000efe:	f008 fff7 	bl	8009ef0 <pow>
 8000f02:	ec53 2b10 	vmov	r2, r3, d0
 8000f06:	4620      	mov	r0, r4
 8000f08:	4629      	mov	r1, r5
 8000f0a:	f7ff f9b7 	bl	800027c <__adddf3>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fe17 	bl	8000b48 <__aeabi_d2iz>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	60bb      	str	r3, [r7, #8]
            rad = sqrt(rads);
 8000f1e:	68b8      	ldr	r0, [r7, #8]
 8000f20:	f7ff faf8 	bl	8000514 <__aeabi_i2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	ec43 2b10 	vmov	d0, r2, r3
 8000f2c:	f009 f850 	bl	8009fd0 <sqrt>
 8000f30:	ec53 2b10 	vmov	r2, r3, d0
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fe06 	bl	8000b48 <__aeabi_d2iz>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60fb      	str	r3, [r7, #12]

            if (rad == radius)
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d10d      	bne.n	8000f64 <API_draw_circle+0xc4>
            {
                UB_VGA_SetPixel((x_c + i), (y_c + j), color);
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	4413      	add	r3, r2
 8000f50:	b298      	uxth	r0, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	88bb      	ldrh	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	787a      	ldrb	r2, [r7, #1]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f000 fffc 	bl	8001f5c <UB_VGA_SetPixel>
        for (i = -radius; i <= radius; i++)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	887b      	ldrh	r3, [r7, #2]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	ddaf      	ble.n	8000ed2 <API_draw_circle+0x32>
    for (j = -radius; j <= radius; j++)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3301      	adds	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dda4      	ble.n	8000eca <API_draw_circle+0x2a>
            }
        }
    }
}
 8000f80:	bf00      	nop
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bdb0      	pop	{r4, r5, r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	f3af 8000 	nop.w
 8000f90:	00000000 	.word	0x00000000
 8000f94:	40000000 	.word	0x40000000

08000f98 <API_read_bitmap_SD>:
//	}
	return error;
}

int API_read_bitmap_SD(char *nr, uint16_t x_lup, uint16_t y_lup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000fa4:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8000fa8:	6018      	str	r0, [r3, #0]
 8000faa:	4608      	mov	r0, r1
 8000fac:	4611      	mov	r1, r2
 8000fae:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000fb2:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	801a      	strh	r2, [r3, #0]
 8000fba:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000fbe:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8000fc2:	460a      	mov	r2, r1
 8000fc4:	801a      	strh	r2, [r3, #0]

	// Fatfs variables
	FATFS FatFs;
    FIL fil; 		//File handle
    FRESULT fres; 	//Result after operations
    UINT SizeofBuffer = 30;
 8000fc6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000fca:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8000fce:	221e      	movs	r2, #30
 8000fd0:	601a      	str	r2, [r3, #0]

    //Reading buffer
    uint k = 0; // kijken welk variable we zijn
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

    //Position vga
    uint16_t xp,yp,xp2,yp2;

    xp2 = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
    yp2 = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac

    //Information from file system
    unsigned int Height,Width;

    //Creating decimal shift register
	unsigned int ColourFile = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	unsigned int DecimalshiftBuff = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498

	unsigned char i;

	char readBuf[30];

	TCHAR File[] = "00.txt";
 8000ff0:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000ff4:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000ff8:	4a91      	ldr	r2, [pc, #580]	; (8001240 <API_read_bitmap_SD+0x2a8>)
 8000ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffe:	6018      	str	r0, [r3, #0]
 8001000:	3304      	adds	r3, #4
 8001002:	8019      	strh	r1, [r3, #0]
 8001004:	3302      	adds	r3, #2
 8001006:	0c0a      	lsrs	r2, r1, #16
 8001008:	701a      	strb	r2, [r3, #0]

	File[0] = nr[0];		// checked
 800100a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800100e:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800101a:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800101e:	701a      	strb	r2, [r3, #0]
	File[1] = nr[1];
 8001020:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001024:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	785a      	ldrb	r2, [r3, #1]
 800102c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001030:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001034:	705a      	strb	r2, [r3, #1]

	xp = x_lup;
 8001036:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800103a:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
	yp = y_lup;
 8001044:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001048:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0


    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001052:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001056:	2201      	movs	r2, #1
 8001058:	497a      	ldr	r1, [pc, #488]	; (8001244 <API_read_bitmap_SD+0x2ac>)
 800105a:	4618      	mov	r0, r3
 800105c:	f007 faca 	bl	80085f4 <f_mount>
 8001060:	4603      	mov	r3, r0
 8001062:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK) {
 8001066:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800106a:	2b00      	cmp	r3, #0
 800106c:	d006      	beq.n	800107c <API_read_bitmap_SD+0xe4>
   	printf("f_mount error (%i)\r\n", fres);
 800106e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001072:	4619      	mov	r1, r3
 8001074:	4874      	ldr	r0, [pc, #464]	; (8001248 <API_read_bitmap_SD+0x2b0>)
 8001076:	f007 ff37 	bl	8008ee8 <iprintf>
   	while(1);
 800107a:	e7fe      	b.n	800107a <API_read_bitmap_SD+0xe2>
    }

	fres = f_open(&fil, File, FA_READ);
 800107c:	f107 0108 	add.w	r1, r7, #8
 8001080:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001084:	2201      	movs	r2, #1
 8001086:	4618      	mov	r0, r3
 8001088:	f007 fafa 	bl	8008680 <f_open>
 800108c:	4603      	mov	r3, r0
 800108e:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	if (fres != FR_OK) {
 8001092:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 80b9 	beq.w	800120e <API_read_bitmap_SD+0x276>
	printf("f_open error (%i)\r\n",fres);
 800109c:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80010a0:	4619      	mov	r1, r3
 80010a2:	486a      	ldr	r0, [pc, #424]	; (800124c <API_read_bitmap_SD+0x2b4>)
 80010a4:	f007 ff20 	bl	8008ee8 <iprintf>
	while(1);
 80010a8:	e7fe      	b.n	80010a8 <API_read_bitmap_SD+0x110>
	}


	while (SizeofBuffer == 30)
	{
		f_read(&fil,(void*)readBuf, 30, &SizeofBuffer);
 80010aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ae:	f107 0110 	add.w	r1, r7, #16
 80010b2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80010b6:	221e      	movs	r2, #30
 80010b8:	f007 fca0 	bl	80089fc <f_read>
		for (i=0; i<SizeofBuffer; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 80010c2:	e09a      	b.n	80011fa <API_read_bitmap_SD+0x262>
		{

			if (readBuf[i] != 32)
 80010c4:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80010c8:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80010cc:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	2b20      	cmp	r3, #32
 80010d4:	d019      	beq.n	800110a <API_read_bitmap_SD+0x172>
			{
				DecimalshiftBuff = readBuf[i]-'0';
 80010d6:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80010da:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80010de:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 80010e2:	5cd3      	ldrb	r3, [r2, r3]
 80010e4:	3b30      	subs	r3, #48	; 0x30
 80010e6:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
				ColourFile *= 10;
 80010ea:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
				ColourFile += DecimalshiftBuff;
 80010fa:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80010fe:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8001102:	4413      	add	r3, r2
 8001104:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8001108:	e072      	b.n	80011f0 <API_read_bitmap_SD+0x258>
			}

			else if(readBuf[i] == 32)
 800110a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800110e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8001112:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8001116:	5cd3      	ldrb	r3, [r2, r3]
 8001118:	2b20      	cmp	r3, #32
 800111a:	d169      	bne.n	80011f0 <API_read_bitmap_SD+0x258>
			{
				if (k > 1)
 800111c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001120:	2b01      	cmp	r3, #1
 8001122:	d94c      	bls.n	80011be <API_read_bitmap_SD+0x226>
				{
					if (xp < VGA_DISPLAY_X && yp < VGA_DISPLAY_Y)
 8001124:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001128:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800112c:	d212      	bcs.n	8001154 <API_read_bitmap_SD+0x1bc>
 800112e:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8001132:	2bef      	cmp	r3, #239	; 0xef
 8001134:	d80e      	bhi.n	8001154 <API_read_bitmap_SD+0x1bc>
					{
						VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = ColourFile;
 8001136:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	; 0x4b0
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	019b      	lsls	r3, r3, #6
 8001142:	441a      	add	r2, r3
 8001144:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001148:	4413      	add	r3, r2
 800114a:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800114e:	b2d1      	uxtb	r1, r2
 8001150:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <API_read_bitmap_SD+0x2b8>)
 8001152:	54d1      	strb	r1, [r2, r3]
					}

					UB_VGA_SetPixel(xp, yp, ColourFile);
 8001154:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001158:	b2da      	uxtb	r2, r3
 800115a:	f8b7 14b0 	ldrh.w	r1, [r7, #1200]	; 0x4b0
 800115e:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fefa 	bl	8001f5c <UB_VGA_SetPixel>
					xp++;
 8001168:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 800116c:	3301      	adds	r3, #1
 800116e:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
					xp2++;
 8001172:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8001176:	3301      	adds	r3, #1
 8001178:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					if (xp2 >= Width)
 800117c:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8001180:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8001184:	429a      	cmp	r2, r3
 8001186:	d813      	bhi.n	80011b0 <API_read_bitmap_SD+0x218>
					{
						yp++;
 8001188:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 800118c:	3301      	adds	r3, #1
 800118e:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0
						yp2++;
 8001192:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8001196:	3301      	adds	r3, #1
 8001198:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac
						xp = x_lup;
 800119c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80011a0:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
						xp2 = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					}
					if (yp2 == Height)
 80011b0:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 80011b4:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d111      	bne.n	80011e0 <API_read_bitmap_SD+0x248>
					{
						break;
 80011bc:	e027      	b.n	800120e <API_read_bitmap_SD+0x276>
					}
				}
				else if (k == 0) // Hoogte van de bit map
 80011be:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d104      	bne.n	80011d0 <API_read_bitmap_SD+0x238>
				{
					Height = ColourFile;
 80011c6:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80011ca:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 80011ce:	e007      	b.n	80011e0 <API_read_bitmap_SD+0x248>
				}
				else if (k == 1)
 80011d0:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d103      	bne.n	80011e0 <API_read_bitmap_SD+0x248>
				{
					Width = ColourFile;
 80011d8:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80011dc:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
				}

				k++;
 80011e0:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80011e4:	3301      	adds	r3, #1
 80011e6:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
				ColourFile = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
		for (i=0; i<SizeofBuffer; i++)
 80011f0:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80011f4:	3301      	adds	r3, #1
 80011f6:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 80011fa:	f897 249f 	ldrb.w	r2, [r7, #1183]	; 0x49f
 80011fe:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001202:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	f4ff af5b 	bcc.w	80010c4 <API_read_bitmap_SD+0x12c>
	while (SizeofBuffer == 30)
 800120e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001212:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b1e      	cmp	r3, #30
 800121a:	f43f af46 	beq.w	80010aa <API_read_bitmap_SD+0x112>
			}

		}
	}

	f_close(&fil);
 800121e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001222:	4618      	mov	r0, r3
 8001224:	f007 fda7 	bl	8008d76 <f_close>

    f_mount(NULL, "", 0);
 8001228:	2200      	movs	r2, #0
 800122a:	4906      	ldr	r1, [pc, #24]	; (8001244 <API_read_bitmap_SD+0x2ac>)
 800122c:	2000      	movs	r0, #0
 800122e:	f007 f9e1 	bl	80085f4 <f_mount>

	return 0;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	f507 6797 	add.w	r7, r7, #1208	; 0x4b8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	0800adc8 	.word	0x0800adc8
 8001244:	0800ad98 	.word	0x0800ad98
 8001248:	0800ad9c 	.word	0x0800ad9c
 800124c:	0800adb4 	.word	0x0800adb4
 8001250:	2000062c 	.word	0x2000062c

08001254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_DMA_Init+0x3c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <MX_DMA_Init+0x3c>)
 8001264:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_DMA_Init+0x3c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2044      	movs	r0, #68	; 0x44
 800127c:	f000 ffe3 	bl	8002246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001280:	2044      	movs	r0, #68	; 0x44
 8001282:	f000 fffc 	bl	800227e <HAL_NVIC_EnableIRQ>

}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <MX_GPIO_Init+0x108>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a3a      	ldr	r2, [pc, #232]	; (800139c <MX_GPIO_Init+0x108>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b38      	ldr	r3, [pc, #224]	; (800139c <MX_GPIO_Init+0x108>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <MX_GPIO_Init+0x108>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a33      	ldr	r2, [pc, #204]	; (800139c <MX_GPIO_Init+0x108>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <MX_GPIO_Init+0x108>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <MX_GPIO_Init+0x108>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a2c      	ldr	r2, [pc, #176]	; (800139c <MX_GPIO_Init+0x108>)
 80012ec:	f043 0310 	orr.w	r3, r3, #16
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <MX_GPIO_Init+0x108>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <MX_GPIO_Init+0x108>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a25      	ldr	r2, [pc, #148]	; (800139c <MX_GPIO_Init+0x108>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_GPIO_Init+0x108>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2102      	movs	r1, #2
 800131e:	4820      	ldr	r0, [pc, #128]	; (80013a0 <MX_GPIO_Init+0x10c>)
 8001320:	f001 fd66 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800132a:	481e      	ldr	r0, [pc, #120]	; (80013a4 <MX_GPIO_Init+0x110>)
 800132c:	f001 fd60 	bl	8002df0 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001336:	481c      	ldr	r0, [pc, #112]	; (80013a8 <MX_GPIO_Init+0x114>)
 8001338:	f001 fd5a 	bl	8002df0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800133c:	2302      	movs	r3, #2
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001344:	2301      	movs	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <MX_GPIO_Init+0x10c>)
 8001354:	f001 fbb0 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001358:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800135c:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_GPIO_Init+0x110>)
 8001372:	f001 fba1 	bl	8002ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <MX_GPIO_Init+0x114>)
 8001390:	f001 fb92 	bl	8002ab8 <HAL_GPIO_Init>

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40020400 	.word	0x40020400

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013b2:	f000 fdfb 	bl	8001fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b6:	f000 f85d 	bl	8001474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ba:	f7ff ff6b 	bl	8001294 <MX_GPIO_Init>
  MX_DMA_Init();
 80013be:	f7ff ff49 	bl	8001254 <MX_DMA_Init>
  MX_TIM1_Init();
 80013c2:	f000 fb49 	bl	8001a58 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013c6:	f000 fb97 	bl	8001af8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80013ca:	f000 fcad 	bl	8001d28 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80013ce:	f004 fe83 	bl	80060d8 <MX_FATFS_Init>
  MX_SPI1_Init();
 80013d2:	f000 f8d3 	bl	800157c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80013d6:	f000 fd4b 	bl	8001e70 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 fd9a 	bl	8001f14 <UB_VGA_FillScreen>
  //API_read_bitmap_SD(&input.line_rx_buffer, 0, 0);
  //API_draw_bitmap(0,0,0);
  API_draw_circle(100, 100, 40, VGA_COL_WHITE);
 80013e0:	23ff      	movs	r3, #255	; 0xff
 80013e2:	2228      	movs	r2, #40	; 0x28
 80013e4:	2164      	movs	r1, #100	; 0x64
 80013e6:	2064      	movs	r0, #100	; 0x64
 80013e8:	f7ff fd5a 	bl	8000ea0 <API_draw_circle>



  unsigned int i = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]


  for(i = 0; i < LINE_BUFLEN; i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	e008      	b.n	8001408 <main+0x5c>
	  input.line_rx_buffer[i] = 0;
 80013f6:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <main+0xb8>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	3301      	adds	r3, #1
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3301      	adds	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800140e:	d3f2      	bcc.n	80013f6 <main+0x4a>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <main+0xb8>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <main+0xb8>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
  input.command_execute_flag = FALSE;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <main+0xb8>)
 8001420:	2200      	movs	r2, #0
 8001422:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, &input.byte_buffer_rx, LINE_BUFLEN);
 8001426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800142a:	490e      	ldr	r1, [pc, #56]	; (8001464 <main+0xb8>)
 800142c:	480e      	ldr	r0, [pc, #56]	; (8001468 <main+0xbc>)
 800142e:	f003 feb0 	bl	8005192 <HAL_UART_Receive_IT>


  //API_read_bitmap_SD("01", 0, 0);

  int j = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <main+0xb8>)
 8001438:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800143c:	2bff      	cmp	r3, #255	; 0xff
 800143e:	d1fa      	bne.n	8001436 <main+0x8a>
	  {
		  i = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
		  API_read_bitmap_SD(&input.line_rx_buffer, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	4808      	ldr	r0, [pc, #32]	; (800146c <main+0xc0>)
 800144a:	f7ff fda5 	bl	8000f98 <API_read_bitmap_SD>


		  j = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
		  //Debugging = LogicLayer_Parser(&input.line_rx_buffer, LINE_BUFLEN);


		  // Do some stuff
		  printf("yes\n");
 8001452:	4807      	ldr	r0, [pc, #28]	; (8001470 <main+0xc4>)
 8001454:	f007 fdce 	bl	8008ff4 <puts>
		  //UB_VGA_FillScreen(colorTest);


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <main+0xb8>)
 800145a:	2200      	movs	r2, #0
 800145c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	  if(input.command_execute_flag == TRUE)
 8001460:	e7e9      	b.n	8001436 <main+0x8a>
 8001462:	bf00      	nop
 8001464:	200000a4 	.word	0x200000a4
 8001468:	200005e8 	.word	0x200005e8
 800146c:	200000a5 	.word	0x200000a5
 8001470:	0800add0 	.word	0x0800add0

08001474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b094      	sub	sp, #80	; 0x50
 8001478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	2230      	movs	r2, #48	; 0x30
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f007 fd28 	bl	8008ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <SystemClock_Config+0xcc>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a27      	ldr	r2, [pc, #156]	; (8001540 <SystemClock_Config+0xcc>)
 80014a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <SystemClock_Config+0xcc>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b4:	2300      	movs	r3, #0
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	4b22      	ldr	r3, [pc, #136]	; (8001544 <SystemClock_Config+0xd0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a21      	ldr	r2, [pc, #132]	; (8001544 <SystemClock_Config+0xd0>)
 80014be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <SystemClock_Config+0xd0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014da:	2302      	movs	r3, #2
 80014dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014e4:	2304      	movs	r3, #4
 80014e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014e8:	23a8      	movs	r3, #168	; 0xa8
 80014ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014f0:	2307      	movs	r3, #7
 80014f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f4:	f107 0320 	add.w	r3, r7, #32
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 fc93 	bl	8002e24 <HAL_RCC_OscConfig>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001504:	f000 f832 	bl	800156c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001508:	230f      	movs	r3, #15
 800150a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150c:	2302      	movs	r3, #2
 800150e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001514:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001518:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2105      	movs	r1, #5
 8001526:	4618      	mov	r0, r3
 8001528:	f001 fef4 	bl	8003314 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001532:	f000 f81b 	bl	800156c <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3750      	adds	r7, #80	; 0x50
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000

08001548 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8001550:	1d39      	adds	r1, r7, #4
 8001552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001556:	2201      	movs	r2, #1
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <__io_putchar+0x20>)
 800155a:	f003 fd88 	bl	800506e <HAL_UART_Transmit>
	return ch;												//Return the character
 800155e:	687b      	ldr	r3, [r7, #4]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200005e8 	.word	0x200005e8

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001580:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <MX_SPI1_Init+0x64>)
 8001582:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <MX_SPI1_Init+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001586:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_SPI1_Init+0x64>)
 8001588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800158c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_SPI1_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_SPI1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_SPI1_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015b0:	2238      	movs	r2, #56	; 0x38
 80015b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015c8:	220a      	movs	r2, #10
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	; (80015e0 <MX_SPI1_Init+0x64>)
 80015ce:	f002 f8c1 	bl	8003754 <HAL_SPI_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015d8:	f7ff ffc8 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000049c 	.word	0x2000049c
 80015e4:	40013000 	.word	0x40013000

080015e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a28      	ldr	r2, [pc, #160]	; (80016a8 <HAL_SPI_MspInit+0xc0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d149      	bne.n	800169e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_SPI_MspInit+0xc4>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	4a26      	ldr	r2, [pc, #152]	; (80016ac <HAL_SPI_MspInit+0xc4>)
 8001614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001618:	6453      	str	r3, [r2, #68]	; 0x44
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HAL_SPI_MspInit+0xc4>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b20      	ldr	r3, [pc, #128]	; (80016ac <HAL_SPI_MspInit+0xc4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <HAL_SPI_MspInit+0xc4>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HAL_SPI_MspInit+0xc4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_SPI_MspInit+0xc4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a18      	ldr	r2, [pc, #96]	; (80016ac <HAL_SPI_MspInit+0xc4>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_SPI_MspInit+0xc4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800165e:	23c0      	movs	r3, #192	; 0xc0
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001666:	2301      	movs	r3, #1
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166e:	2305      	movs	r3, #5
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	480d      	ldr	r0, [pc, #52]	; (80016b0 <HAL_SPI_MspInit+0xc8>)
 800167a:	f001 fa1d 	bl	8002ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800167e:	2308      	movs	r3, #8
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001686:	2301      	movs	r3, #1
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800168e:	2305      	movs	r3, #5
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <HAL_SPI_MspInit+0xcc>)
 800169a:	f001 fa0d 	bl	8002ab8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40013000 	.word	0x40013000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020400 	.word	0x40020400

080016b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_MspInit+0x4c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a0f      	ldr	r2, [pc, #60]	; (8001704 <HAL_MspInit+0x4c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_MspInit+0x4c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	603b      	str	r3, [r7, #0]
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_MspInit+0x4c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_MspInit+0x4c>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_MspInit+0x4c>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <MemManage_Handler+0x4>

08001722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <BusFault_Handler+0x4>

08001728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <UsageFault_Handler+0x4>

0800172e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175c:	f000 fc78 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}

08001764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001768:	4828      	ldr	r0, [pc, #160]	; (800180c <TIM2_IRQHandler+0xa8>)
 800176a:	f002 fdcf 	bl	800430c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 800176e:	4b27      	ldr	r3, [pc, #156]	; (800180c <TIM2_IRQHandler+0xa8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f06f 0208 	mvn.w	r2, #8
 8001776:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <TIM2_IRQHandler+0xac>)
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	b29a      	uxth	r2, r3
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <TIM2_IRQHandler+0xac>)
 8001782:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8001784:	4b22      	ldr	r3, [pc, #136]	; (8001810 <TIM2_IRQHandler+0xac>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800178c:	d905      	bls.n	800179a <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <TIM2_IRQHandler+0xac>)
 8001790:	2200      	movs	r2, #0
 8001792:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <TIM2_IRQHandler+0xb0>)
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <TIM2_IRQHandler+0xac>)
 8001798:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <TIM2_IRQHandler+0xac>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d802      	bhi.n	80017a8 <TIM2_IRQHandler+0x44>
 80017a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017a6:	e001      	b.n	80017ac <TIM2_IRQHandler+0x48>
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	4a1a      	ldr	r2, [pc, #104]	; (8001818 <TIM2_IRQHandler+0xb4>)
 80017ae:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80017b0:	4b17      	ldr	r3, [pc, #92]	; (8001810 <TIM2_IRQHandler+0xac>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	2b23      	cmp	r3, #35	; 0x23
 80017b6:	d927      	bls.n	8001808 <TIM2_IRQHandler+0xa4>
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <TIM2_IRQHandler+0xac>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	f240 2202 	movw	r2, #514	; 0x202
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d821      	bhi.n	8001808 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80017c4:	4a15      	ldr	r2, [pc, #84]	; (800181c <TIM2_IRQHandler+0xb8>)
 80017c6:	4b12      	ldr	r3, [pc, #72]	; (8001810 <TIM2_IRQHandler+0xac>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80017cc:	4a13      	ldr	r2, [pc, #76]	; (800181c <TIM2_IRQHandler+0xb8>)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <TIM2_IRQHandler+0xac>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <TIM2_IRQHandler+0xbc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a11      	ldr	r2, [pc, #68]	; (8001820 <TIM2_IRQHandler+0xbc>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <TIM2_IRQHandler+0xc0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <TIM2_IRQHandler+0xc0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <TIM2_IRQHandler+0xac>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <TIM2_IRQHandler+0xac>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001804:	4a02      	ldr	r2, [pc, #8]	; (8001810 <TIM2_IRQHandler+0xac>)
 8001806:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000540 	.word	0x20000540
 8001810:	2001331c 	.word	0x2001331c
 8001814:	2000062c 	.word	0x2000062c
 8001818:	40020400 	.word	0x40020400
 800181c:	40026488 	.word	0x40026488
 8001820:	40010000 	.word	0x40010000
 8001824:	20000588 	.word	0x20000588

08001828 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <USART2_IRQHandler+0x70>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	2b0a      	cmp	r3, #10
 8001838:	d026      	beq.n	8001888 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b0d      	cmp	r3, #13
 800183e:	d002      	beq.n	8001846 <USART2_IRQHandler+0x1e>
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b2e      	cmp	r3, #46	; 0x2e
 8001844:	d10e      	bne.n	8001864 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <USART2_IRQHandler+0x74>)
 8001848:	22ff      	movs	r2, #255	; 0xff
 800184a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			// Store the message length for processing
			input.msglen = input.char_counter;
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <USART2_IRQHandler+0x74>)
 8001850:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <USART2_IRQHandler+0x74>)
 8001856:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
			// Reset the counter for the next line
			input.char_counter = 0;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <USART2_IRQHandler+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
 8001862:	e011      	b.n	8001888 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <USART2_IRQHandler+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			input.line_rx_buffer[input.char_counter] = uart_char;
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <USART2_IRQHandler+0x74>)
 800186e:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <USART2_IRQHandler+0x74>)
 8001874:	4413      	add	r3, r2
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <USART2_IRQHandler+0x74>)
 800187c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8001880:	3301      	adds	r3, #1
 8001882:	4a06      	ldr	r2, [pc, #24]	; (800189c <USART2_IRQHandler+0x74>)
 8001884:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <USART2_IRQHandler+0x78>)
 800188a:	f003 fcb3 	bl	80051f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40004400 	.word	0x40004400
 800189c:	200000a4 	.word	0x200000a4
 80018a0:	200005e8 	.word	0x200005e8

080018a4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <DMA2_Stream5_IRQHandler+0x48>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6a1a      	ldr	r2, [r3, #32]
 80018ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10f      	bne.n	80018d8 <DMA2_Stream5_IRQHandler+0x34>
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <DMA2_Stream5_IRQHandler+0x48>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6a1a      	ldr	r2, [r3, #32]
 80018be:	f240 4344 	movw	r3, #1092	; 0x444
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <DMA2_Stream5_IRQHandler+0x34>
 80018c8:	4b08      	ldr	r3, [pc, #32]	; (80018ec <DMA2_Stream5_IRQHandler+0x48>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <DMA2_Stream5_IRQHandler+0x48>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <DMA2_Stream5_IRQHandler+0x4c>)
 80018da:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80018de:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <DMA2_Stream5_IRQHandler+0x50>)
 80018e2:	f000 fe7f 	bl	80025e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200004f8 	.word	0x200004f8
 80018f0:	40021000 	.word	0x40021000
 80018f4:	20000588 	.word	0x20000588

080018f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	e00a      	b.n	8001920 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800190a:	f3af 8000 	nop.w
 800190e:	4601      	mov	r1, r0
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	60ba      	str	r2, [r7, #8]
 8001916:	b2ca      	uxtb	r2, r1
 8001918:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbf0      	blt.n	800190a <_read+0x12>
	}

return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e009      	b.n	8001958 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fdfb 	bl	8001548 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3301      	adds	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	dbf1      	blt.n	8001944 <_write+0x12>
	}
	return len;
 8001960:	687b      	ldr	r3, [r7, #4]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_close>:

int _close(int file)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	return -1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001992:	605a      	str	r2, [r3, #4]
	return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_isatty>:

int _isatty(int file)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	return 1;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <_sbrk+0x50>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x16>
		heap_end = &end;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <_sbrk+0x50>)
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <_sbrk+0x54>)
 80019e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <_sbrk+0x50>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <_sbrk+0x50>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4413      	add	r3, r2
 80019f8:	466a      	mov	r2, sp
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d907      	bls.n	8001a0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80019fe:	f007 fa41 	bl	8008e84 <__errno>
 8001a02:	4603      	mov	r3, r0
 8001a04:	220c      	movs	r2, #12
 8001a06:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0c:	e006      	b.n	8001a1c <_sbrk+0x48>
	}

	heap_end += incr;
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <_sbrk+0x50>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <_sbrk+0x50>)
 8001a18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200004f4 	.word	0x200004f4
 8001a28:	20013388 	.word	0x20013388

08001a2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <SystemInit+0x28>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <SystemInit+0x28>)
 8001a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SystemInit+0x28>)
 8001a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a46:	609a      	str	r2, [r3, #8]
#endif
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a76:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <MX_TIM1_Init+0x9c>)
 8001a78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a88:	220b      	movs	r2, #11
 8001a8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a9e:	4814      	ldr	r0, [pc, #80]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001aa0:	f002 f94e 	bl	8003d40 <HAL_TIM_Base_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001aaa:	f7ff fd5f 	bl	800156c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480d      	ldr	r0, [pc, #52]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001abc:	f002 fdf0 	bl	80046a0 <HAL_TIM_ConfigClockSource>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001ac6:	f7ff fd51 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4806      	ldr	r0, [pc, #24]	; (8001af0 <MX_TIM1_Init+0x98>)
 8001ad8:	f003 f9ec 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001ae2:	f7ff fd43 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200004f8 	.word	0x200004f8
 8001af4:	40010000 	.word	0x40010000

08001af8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afe:	f107 0320 	add.w	r3, r7, #32
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001b1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001b22:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001b2e:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001b30:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001b34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b42:	4820      	ldr	r0, [pc, #128]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001b44:	f002 f9b4 	bl	8003eb0 <HAL_TIM_PWM_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b4e:	f7ff fd0d 	bl	800156c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5a:	f107 0320 	add.w	r3, r7, #32
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4818      	ldr	r0, [pc, #96]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001b62:	f003 f9a7 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b6c:	f7ff fcfe 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b70:	2360      	movs	r3, #96	; 0x60
 8001b72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001b74:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001b78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	2208      	movs	r2, #8
 8001b86:	4619      	mov	r1, r3
 8001b88:	480e      	ldr	r0, [pc, #56]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001b8a:	f002 fcc7 	bl	800451c <HAL_TIM_PWM_ConfigChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001b94:	f7ff fcea 	bl	800156c <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001b98:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001ba6:	f002 fcb9 	bl	800451c <HAL_TIM_PWM_ConfigChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001bb0:	f7ff fcdc 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <MX_TIM2_Init+0xcc>)
 8001bb6:	f000 f87f 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000540 	.word	0x20000540

08001bc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_TIM_Base_MspInit+0x94>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d13c      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_TIM_Base_MspInit+0x98>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <HAL_TIM_Base_MspInit+0x98>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_TIM_Base_MspInit+0x98>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_TIM_Base_MspInit+0xa0>)
 8001bfa:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001bfc:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001bfe:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001c02:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c16:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c30:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001c38:	480a      	ldr	r0, [pc, #40]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c3a:	f000 fb3b 	bl	80022b4 <HAL_DMA_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001c44:	f7ff fc92 	bl	800156c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c4c:	621a      	str	r2, [r3, #32]
 8001c4e:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <HAL_TIM_Base_MspInit+0x9c>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40023800 	.word	0x40023800
 8001c64:	20000588 	.word	0x20000588
 8001c68:	40026488 	.word	0x40026488

08001c6c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7c:	d115      	bne.n	8001caa <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_TIM_PWM_MspInit+0x48>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <HAL_TIM_PWM_MspInit+0x48>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_TIM_PWM_MspInit+0x48>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	201c      	movs	r0, #28
 8001ca0:	f000 fad1 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca4:	201c      	movs	r0, #28
 8001ca6:	f000 faea 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d11e      	bne.n	8001d18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <HAL_TIM_MspPostInit+0x68>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <HAL_TIM_MspPostInit+0x68>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_TIM_MspPostInit+0x68>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8001cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4619      	mov	r1, r3
 8001d12:	4804      	ldr	r0, [pc, #16]	; (8001d24 <HAL_TIM_MspPostInit+0x6c>)
 8001d14:	f000 fed0 	bl	8002ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d18:	bf00      	nop
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40020400 	.word	0x40020400

08001d28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_USART2_UART_Init+0x4c>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <MX_USART2_UART_Init+0x50>)
 8001d30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <MX_USART2_UART_Init+0x4c>)
 8001d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_USART2_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MX_USART2_UART_Init+0x4c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <MX_USART2_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <MX_USART2_UART_Init+0x4c>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MX_USART2_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <MX_USART2_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_USART2_UART_Init+0x4c>)
 8001d60:	f003 f938 	bl	8004fd4 <HAL_UART_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d6a:	f7ff fbff 	bl	800156c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200005e8 	.word	0x200005e8
 8001d78:	40004400 	.word	0x40004400

08001d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_UART_MspInit+0x94>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d133      	bne.n	8001e06 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <HAL_UART_MspInit+0x98>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_UART_MspInit+0x98>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_UART_MspInit+0x98>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_UART_MspInit+0x98>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_UART_MspInit+0x98>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_UART_MspInit+0x98>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dd6:	230c      	movs	r3, #12
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de2:	2303      	movs	r3, #3
 8001de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de6:	2307      	movs	r3, #7
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	4809      	ldr	r0, [pc, #36]	; (8001e18 <HAL_UART_MspInit+0x9c>)
 8001df2:	f000 fe61 	bl	8002ab8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2026      	movs	r0, #38	; 0x26
 8001dfc:	f000 fa23 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e00:	2026      	movs	r0, #38	; 0x26
 8001e02:	f000 fa3c 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40004400 	.word	0x40004400
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40020000 	.word	0x40020000

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e22:	e003      	b.n	8001e2c <LoopCopyDataInit>

08001e24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e2a:	3104      	adds	r1, #4

08001e2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e34:	d3f6      	bcc.n	8001e24 <CopyDataInit>
  ldr  r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e38:	e002      	b.n	8001e40 <LoopFillZerobss>

08001e3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e3c:	f842 3b04 	str.w	r3, [r2], #4

08001e40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e44:	d3f9      	bcc.n	8001e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e46:	f7ff fdf1 	bl	8001a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f007 f821 	bl	8008e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7ff faad 	bl	80013ac <main>
  bx  lr    
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e58:	0800af90 	.word	0x0800af90
  ldr  r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e60:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8001e64:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8001e68:	20013384 	.word	0x20013384

08001e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>
	...

08001e70 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001e74:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <UB_VGA_Screen_Init+0x84>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <UB_VGA_Screen_Init+0x84>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001e80:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <UB_VGA_Screen_Init+0x84>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <UB_VGA_Screen_Init+0x88>)
 8001e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8c:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001e8e:	481b      	ldr	r0, [pc, #108]	; (8001efc <UB_VGA_Screen_Init+0x8c>)
 8001e90:	f001 ffa6 	bl	8003de0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001e94:	210c      	movs	r1, #12
 8001e96:	4819      	ldr	r0, [pc, #100]	; (8001efc <UB_VGA_Screen_Init+0x8c>)
 8001e98:	f002 f85a 	bl	8003f50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	4817      	ldr	r0, [pc, #92]	; (8001efc <UB_VGA_Screen_Init+0x8c>)
 8001ea0:	f002 f91e 	bl	80040e0 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <UB_VGA_Screen_Init+0x90>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <UB_VGA_Screen_Init+0x90>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eb2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <UB_VGA_Screen_Init+0x90>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <UB_VGA_Screen_Init+0x90>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001ec4:	490f      	ldr	r1, [pc, #60]	; (8001f04 <UB_VGA_Screen_Init+0x94>)
 8001ec6:	f240 1341 	movw	r3, #321	; 0x141
 8001eca:	4a0f      	ldr	r2, [pc, #60]	; (8001f08 <UB_VGA_Screen_Init+0x98>)
 8001ecc:	480f      	ldr	r0, [pc, #60]	; (8001f0c <UB_VGA_Screen_Init+0x9c>)
 8001ece:	f000 fa9f 	bl	8002410 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001ed2:	480e      	ldr	r0, [pc, #56]	; (8001f0c <UB_VGA_Screen_Init+0x9c>)
 8001ed4:	f000 f9ee 	bl	80022b4 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <UB_VGA_Screen_Init+0x9c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <UB_VGA_Screen_Init+0x9c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0210 	orr.w	r2, r2, #16
 8001ee6:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <UB_VGA_Screen_Init+0xa0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a01      	ldr	r2, [pc, #4]	; (8001ef4 <UB_VGA_Screen_Init+0x84>)
 8001eee:	6093      	str	r3, [r2, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2001331c 	.word	0x2001331c
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	20000540 	.word	0x20000540
 8001f00:	200004f8 	.word	0x200004f8
 8001f04:	2000062c 	.word	0x2000062c
 8001f08:	40021015 	.word	0x40021015
 8001f0c:	20000588 	.word	0x20000588
 8001f10:	40026488 	.word	0x40026488

08001f14 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001f1e:	2300      	movs	r3, #0
 8001f20:	81bb      	strh	r3, [r7, #12]
 8001f22:	e012      	b.n	8001f4a <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	81fb      	strh	r3, [r7, #14]
 8001f28:	e008      	b.n	8001f3c <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001f2a:	79fa      	ldrb	r2, [r7, #7]
 8001f2c:	89b9      	ldrh	r1, [r7, #12]
 8001f2e:	89fb      	ldrh	r3, [r7, #14]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 f813 	bl	8001f5c <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001f36:	89fb      	ldrh	r3, [r7, #14]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	81fb      	strh	r3, [r7, #14]
 8001f3c:	89fb      	ldrh	r3, [r7, #14]
 8001f3e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f42:	d3f2      	bcc.n	8001f2a <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001f44:	89bb      	ldrh	r3, [r7, #12]
 8001f46:	3301      	adds	r3, #1
 8001f48:	81bb      	strh	r3, [r7, #12]
 8001f4a:	89bb      	ldrh	r3, [r7, #12]
 8001f4c:	2bef      	cmp	r3, #239	; 0xef
 8001f4e:	d9e9      	bls.n	8001f24 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]
 8001f66:	460b      	mov	r3, r1
 8001f68:	80bb      	strh	r3, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f74:	d301      	bcc.n	8001f7a <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001f7a:	88bb      	ldrh	r3, [r7, #4]
 8001f7c:	2bef      	cmp	r3, #239	; 0xef
 8001f7e:	d901      	bls.n	8001f84 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001f84:	88ba      	ldrh	r2, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	019b      	lsls	r3, r3, #6
 8001f8e:	441a      	add	r2, r3
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	4413      	add	r3, r2
 8001f94:	4904      	ldr	r1, [pc, #16]	; (8001fa8 <UB_VGA_SetPixel+0x4c>)
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	54ca      	strb	r2, [r1, r3]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	2000062c 	.word	0x2000062c

08001fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_Init+0x40>)
 8001fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <HAL_Init+0x40>)
 8001fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_Init+0x40>)
 8001fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f000 f92b 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f808 	bl	8001ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe0:	f7ff fb6a 	bl	80016b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x54>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_InitTick+0x58>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f943 	bl	800229a <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00e      	b.n	800203c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d80a      	bhi.n	800203a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002024:	2200      	movs	r2, #0
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f000 f90b 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <HAL_InitTick+0x5c>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000000 	.word	0x20000000
 8002048:	20000008 	.word	0x20000008
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x20>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_IncTick+0x24>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_IncTick+0x24>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000008 	.word	0x20000008
 8002074:	20013328 	.word	0x20013328

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20013328 	.word	0x20013328

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff3e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff31 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa2 	bl	80021ec <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022c0:	f7ff feda 	bl	8002078 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e099      	b.n	8002404 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f0:	e00f      	b.n	8002312 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022f2:	f7ff fec1 	bl	8002078 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d908      	bls.n	8002312 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2203      	movs	r2, #3
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e078      	b.n	8002404 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1e8      	bne.n	80022f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4b38      	ldr	r3, [pc, #224]	; (800240c <HAL_DMA_Init+0x158>)
 800232c:	4013      	ands	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4313      	orrs	r3, r2
 8002362:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	2b04      	cmp	r3, #4
 800236a:	d107      	bne.n	800237c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4313      	orrs	r3, r2
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f023 0307 	bic.w	r3, r3, #7
 8002392:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d117      	bne.n	80023d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fb01 	bl	80029c0 <DMA_CheckFifoParam>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d008      	beq.n	80023d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2240      	movs	r2, #64	; 0x40
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023d2:	2301      	movs	r3, #1
 80023d4:	e016      	b.n	8002404 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fab8 	bl	8002954 <DMA_CalcBaseAndBitshift>
 80023e4:	4603      	mov	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	223f      	movs	r2, #63	; 0x3f
 80023ee:	409a      	lsls	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	f010803f 	.word	0xf010803f

08002410 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_DMA_Start_IT+0x26>
 8002432:	2302      	movs	r3, #2
 8002434:	e040      	b.n	80024b8 <HAL_DMA_Start_IT+0xa8>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d12f      	bne.n	80024aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68b9      	ldr	r1, [r7, #8]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fa4a 	bl	80028f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	223f      	movs	r2, #63	; 0x3f
 800246a:	409a      	lsls	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0216 	orr.w	r2, r2, #22
 800247e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0208 	orr.w	r2, r2, #8
 8002496:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e005      	b.n	80024b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
 80024b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024ce:	f7ff fdd3 	bl	8002078 <HAL_GetTick>
 80024d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d008      	beq.n	80024f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e052      	b.n	8002598 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0216 	bic.w	r2, r2, #22
 8002500:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002510:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_DMA_Abort+0x62>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0208 	bic.w	r2, r2, #8
 8002530:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002542:	e013      	b.n	800256c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002544:	f7ff fd98 	bl	8002078 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b05      	cmp	r3, #5
 8002550:	d90c      	bls.n	800256c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2220      	movs	r2, #32
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2203      	movs	r2, #3
 800255c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e015      	b.n	8002598 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1e4      	bne.n	8002544 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	223f      	movs	r2, #63	; 0x3f
 8002580:	409a      	lsls	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d004      	beq.n	80025be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2280      	movs	r2, #128	; 0x80
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00c      	b.n	80025d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2205      	movs	r2, #5
 80025c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025f0:	4b8e      	ldr	r3, [pc, #568]	; (800282c <HAL_DMA_IRQHandler+0x248>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a8e      	ldr	r2, [pc, #568]	; (8002830 <HAL_DMA_IRQHandler+0x24c>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	0a9b      	lsrs	r3, r3, #10
 80025fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2208      	movs	r2, #8
 8002610:	409a      	lsls	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01a      	beq.n	8002650 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d013      	beq.n	8002650 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0204 	bic.w	r2, r2, #4
 8002636:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	2208      	movs	r2, #8
 800263e:	409a      	lsls	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	2201      	movs	r2, #1
 8002656:	409a      	lsls	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d012      	beq.n	8002686 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002672:	2201      	movs	r2, #1
 8002674:	409a      	lsls	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	f043 0202 	orr.w	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268a:	2204      	movs	r2, #4
 800268c:	409a      	lsls	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d012      	beq.n	80026bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a8:	2204      	movs	r2, #4
 80026aa:	409a      	lsls	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f043 0204 	orr.w	r2, r3, #4
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	2210      	movs	r2, #16
 80026c2:	409a      	lsls	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d043      	beq.n	8002754 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d03c      	beq.n	8002754 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026de:	2210      	movs	r2, #16
 80026e0:	409a      	lsls	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d018      	beq.n	8002726 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d108      	bne.n	8002714 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	2b00      	cmp	r3, #0
 8002708:	d024      	beq.n	8002754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
 8002712:	e01f      	b.n	8002754 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002718:	2b00      	cmp	r3, #0
 800271a:	d01b      	beq.n	8002754 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4798      	blx	r3
 8002724:	e016      	b.n	8002754 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d107      	bne.n	8002744 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0208 	bic.w	r2, r2, #8
 8002742:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	2220      	movs	r2, #32
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 808f 	beq.w	8002884 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8087 	beq.w	8002884 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277a:	2220      	movs	r2, #32
 800277c:	409a      	lsls	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b05      	cmp	r3, #5
 800278c:	d136      	bne.n	80027fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0216 	bic.w	r2, r2, #22
 800279c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d103      	bne.n	80027be <HAL_DMA_IRQHandler+0x1da>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0208 	bic.w	r2, r2, #8
 80027cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d2:	223f      	movs	r2, #63	; 0x3f
 80027d4:	409a      	lsls	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d07e      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
        }
        return;
 80027fa:	e079      	b.n	80028f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01d      	beq.n	8002846 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10d      	bne.n	8002834 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	2b00      	cmp	r3, #0
 800281e:	d031      	beq.n	8002884 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
 8002828:	e02c      	b.n	8002884 <HAL_DMA_IRQHandler+0x2a0>
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000
 8002830:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d023      	beq.n	8002884 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
 8002844:	e01e      	b.n	8002884 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10f      	bne.n	8002874 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0210 	bic.w	r2, r2, #16
 8002862:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	2b00      	cmp	r3, #0
 800288a:	d032      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d022      	beq.n	80028de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2205      	movs	r2, #5
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	3301      	adds	r3, #1
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d307      	bcc.n	80028cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f2      	bne.n	80028b0 <HAL_DMA_IRQHandler+0x2cc>
 80028ca:	e000      	b.n	80028ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
 80028ee:	e000      	b.n	80028f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028f0:	bf00      	nop
    }
  }
}
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002914:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d108      	bne.n	8002938 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002936:	e007      	b.n	8002948 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3b10      	subs	r3, #16
 8002964:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	091b      	lsrs	r3, r3, #4
 800296c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800296e:	4a13      	ldr	r2, [pc, #76]	; (80029bc <DMA_CalcBaseAndBitshift+0x68>)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d909      	bls.n	8002996 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	1d1a      	adds	r2, r3, #4
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	659a      	str	r2, [r3, #88]	; 0x58
 8002994:	e007      	b.n	80029a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800299e:	f023 0303 	bic.w	r3, r3, #3
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	aaaaaaab 	.word	0xaaaaaaab
 80029bc:	0800ae30 	.word	0x0800ae30

080029c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d11f      	bne.n	8002a1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d856      	bhi.n	8002a8e <DMA_CheckFifoParam+0xce>
 80029e0:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <DMA_CheckFifoParam+0x28>)
 80029e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e6:	bf00      	nop
 80029e8:	080029f9 	.word	0x080029f9
 80029ec:	08002a0b 	.word	0x08002a0b
 80029f0:	080029f9 	.word	0x080029f9
 80029f4:	08002a8f 	.word	0x08002a8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d046      	beq.n	8002a92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a08:	e043      	b.n	8002a92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a12:	d140      	bne.n	8002a96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a18:	e03d      	b.n	8002a96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a22:	d121      	bne.n	8002a68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d837      	bhi.n	8002a9a <DMA_CheckFifoParam+0xda>
 8002a2a:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <DMA_CheckFifoParam+0x70>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002a47 	.word	0x08002a47
 8002a38:	08002a41 	.word	0x08002a41
 8002a3c:	08002a59 	.word	0x08002a59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      break;
 8002a44:	e030      	b.n	8002aa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d025      	beq.n	8002a9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a56:	e022      	b.n	8002a9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a60:	d11f      	bne.n	8002aa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a66:	e01c      	b.n	8002aa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d903      	bls.n	8002a76 <DMA_CheckFifoParam+0xb6>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d003      	beq.n	8002a7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a74:	e018      	b.n	8002aa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7a:	e015      	b.n	8002aa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00e      	beq.n	8002aa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8c:	e00b      	b.n	8002aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8002a8e:	bf00      	nop
 8002a90:	e00a      	b.n	8002aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002a92:	bf00      	nop
 8002a94:	e008      	b.n	8002aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002a96:	bf00      	nop
 8002a98:	e006      	b.n	8002aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e004      	b.n	8002aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e002      	b.n	8002aa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8002aa6:	bf00      	nop
    }
  } 
  
  return status; 
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop

08002ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b089      	sub	sp, #36	; 0x24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	e16b      	b.n	8002dac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	f040 815a 	bne.w	8002da6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d005      	beq.n	8002b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d130      	bne.n	8002b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	2203      	movs	r2, #3
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 0201 	and.w	r2, r3, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d017      	beq.n	8002ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	2203      	movs	r2, #3
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d123      	bne.n	8002bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	08da      	lsrs	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3208      	adds	r2, #8
 8002bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	08da      	lsrs	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3208      	adds	r2, #8
 8002bf6:	69b9      	ldr	r1, [r7, #24]
 8002bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	2203      	movs	r2, #3
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0203 	and.w	r2, r3, #3
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80b4 	beq.w	8002da6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b60      	ldr	r3, [pc, #384]	; (8002dc4 <HAL_GPIO_Init+0x30c>)
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	4a5f      	ldr	r2, [pc, #380]	; (8002dc4 <HAL_GPIO_Init+0x30c>)
 8002c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c4e:	4b5d      	ldr	r3, [pc, #372]	; (8002dc4 <HAL_GPIO_Init+0x30c>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c5a:	4a5b      	ldr	r2, [pc, #364]	; (8002dc8 <HAL_GPIO_Init+0x310>)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	220f      	movs	r2, #15
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_GPIO_Init+0x314>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d02b      	beq.n	8002cde <HAL_GPIO_Init+0x226>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a51      	ldr	r2, [pc, #324]	; (8002dd0 <HAL_GPIO_Init+0x318>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d025      	beq.n	8002cda <HAL_GPIO_Init+0x222>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a50      	ldr	r2, [pc, #320]	; (8002dd4 <HAL_GPIO_Init+0x31c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <HAL_GPIO_Init+0x21e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4f      	ldr	r2, [pc, #316]	; (8002dd8 <HAL_GPIO_Init+0x320>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d019      	beq.n	8002cd2 <HAL_GPIO_Init+0x21a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4e      	ldr	r2, [pc, #312]	; (8002ddc <HAL_GPIO_Init+0x324>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_GPIO_Init+0x216>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <HAL_GPIO_Init+0x328>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00d      	beq.n	8002cca <HAL_GPIO_Init+0x212>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4c      	ldr	r2, [pc, #304]	; (8002de4 <HAL_GPIO_Init+0x32c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d007      	beq.n	8002cc6 <HAL_GPIO_Init+0x20e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4b      	ldr	r2, [pc, #300]	; (8002de8 <HAL_GPIO_Init+0x330>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d101      	bne.n	8002cc2 <HAL_GPIO_Init+0x20a>
 8002cbe:	2307      	movs	r3, #7
 8002cc0:	e00e      	b.n	8002ce0 <HAL_GPIO_Init+0x228>
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	e00c      	b.n	8002ce0 <HAL_GPIO_Init+0x228>
 8002cc6:	2306      	movs	r3, #6
 8002cc8:	e00a      	b.n	8002ce0 <HAL_GPIO_Init+0x228>
 8002cca:	2305      	movs	r3, #5
 8002ccc:	e008      	b.n	8002ce0 <HAL_GPIO_Init+0x228>
 8002cce:	2304      	movs	r3, #4
 8002cd0:	e006      	b.n	8002ce0 <HAL_GPIO_Init+0x228>
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e004      	b.n	8002ce0 <HAL_GPIO_Init+0x228>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e002      	b.n	8002ce0 <HAL_GPIO_Init+0x228>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_GPIO_Init+0x228>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	f002 0203 	and.w	r2, r2, #3
 8002ce6:	0092      	lsls	r2, r2, #2
 8002ce8:	4093      	lsls	r3, r2
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf0:	4935      	ldr	r1, [pc, #212]	; (8002dc8 <HAL_GPIO_Init+0x310>)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_GPIO_Init+0x334>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d22:	4a32      	ldr	r2, [pc, #200]	; (8002dec <HAL_GPIO_Init+0x334>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d28:	4b30      	ldr	r3, [pc, #192]	; (8002dec <HAL_GPIO_Init+0x334>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d4c:	4a27      	ldr	r2, [pc, #156]	; (8002dec <HAL_GPIO_Init+0x334>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d52:	4b26      	ldr	r3, [pc, #152]	; (8002dec <HAL_GPIO_Init+0x334>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d76:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_GPIO_Init+0x334>)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_GPIO_Init+0x334>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da0:	4a12      	ldr	r2, [pc, #72]	; (8002dec <HAL_GPIO_Init+0x334>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3301      	adds	r3, #1
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	f67f ae90 	bls.w	8002ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3724      	adds	r7, #36	; 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40013800 	.word	0x40013800
 8002dcc:	40020000 	.word	0x40020000
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	40020800 	.word	0x40020800
 8002dd8:	40020c00 	.word	0x40020c00
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40021400 	.word	0x40021400
 8002de4:	40021800 	.word	0x40021800
 8002de8:	40021c00 	.word	0x40021c00
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e00:	787b      	ldrb	r3, [r7, #1]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e06:	887a      	ldrh	r2, [r7, #2]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e0c:	e003      	b.n	8002e16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e0e:	887b      	ldrh	r3, [r7, #2]
 8002e10:	041a      	lsls	r2, r3, #16
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e267      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d075      	beq.n	8002f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e42:	4b88      	ldr	r3, [pc, #544]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d00c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4e:	4b85      	ldr	r3, [pc, #532]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d112      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	4b7e      	ldr	r3, [pc, #504]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d05b      	beq.n	8002f2c <HAL_RCC_OscConfig+0x108>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d157      	bne.n	8002f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e242      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e88:	d106      	bne.n	8002e98 <HAL_RCC_OscConfig+0x74>
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x98>
 8002ea2:	4b70      	ldr	r3, [pc, #448]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6f      	ldr	r2, [pc, #444]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6d      	ldr	r3, [pc, #436]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6c      	ldr	r2, [pc, #432]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002ebc:	4b69      	ldr	r3, [pc, #420]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a68      	ldr	r2, [pc, #416]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b66      	ldr	r3, [pc, #408]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a65      	ldr	r2, [pc, #404]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7ff f8cc 	bl	8002078 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7ff f8c8 	bl	8002078 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e207      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xc0>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7ff f8b8 	bl	8002078 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7ff f8b4 	bl	8002078 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1f3      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0xe8>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f52:	4b44      	ldr	r3, [pc, #272]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c7      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4937      	ldr	r1, [pc, #220]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_RCC_OscConfig+0x244>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7ff f86d 	bl	8002078 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7ff f869 	bl	8002078 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1a8      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4925      	ldr	r1, [pc, #148]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_OscConfig+0x244>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7ff f84c 	bl	8002078 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7ff f848 	bl	8002078 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e187      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d036      	beq.n	800307c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCC_OscConfig+0x248>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7ff f82c 	bl	8002078 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003024:	f7ff f828 	bl	8002078 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e167      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8003038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x200>
 8003042:	e01b      	b.n	800307c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_OscConfig+0x248>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7ff f815 	bl	8002078 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	e00e      	b.n	8003070 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003052:	f7ff f811 	bl	8002078 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d907      	bls.n	8003070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e150      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003064:	40023800 	.word	0x40023800
 8003068:	42470000 	.word	0x42470000
 800306c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ea      	bne.n	8003052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8097 	beq.w	80031b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b81      	ldr	r3, [pc, #516]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4b7d      	ldr	r3, [pc, #500]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	4a7c      	ldr	r2, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a8:	6413      	str	r3, [r2, #64]	; 0x40
 80030aa:	4b7a      	ldr	r3, [pc, #488]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b77      	ldr	r3, [pc, #476]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c6:	4b74      	ldr	r3, [pc, #464]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a73      	ldr	r2, [pc, #460]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7fe ffd1 	bl	8002078 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fe ffcd 	bl	8002078 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e10c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x2ea>
 8003100:	4b64      	ldr	r3, [pc, #400]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a63      	ldr	r2, [pc, #396]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x30c>
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a5e      	ldr	r2, [pc, #376]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
 8003122:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a5b      	ldr	r2, [pc, #364]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 8003130:	4b58      	ldr	r3, [pc, #352]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a57      	ldr	r2, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
 800313c:	4b55      	ldr	r3, [pc, #340]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a54      	ldr	r2, [pc, #336]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003142:	f023 0304 	bic.w	r3, r3, #4
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe ff92 	bl	8002078 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe ff8e 	bl	8002078 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0cb      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	4b49      	ldr	r3, [pc, #292]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ee      	beq.n	8003158 <HAL_RCC_OscConfig+0x334>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7fe ff7c 	bl	8002078 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe ff78 	bl	8002078 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0b5      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ee      	bne.n	8003184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	4a38      	ldr	r2, [pc, #224]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a1 	beq.w	8003304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c2:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d05c      	beq.n	8003288 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d141      	bne.n	800325a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_RCC_OscConfig+0x478>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe ff4c 	bl	8002078 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe ff48 	bl	8002078 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e087      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	491b      	ldr	r1, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x478>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe ff21 	bl	8002078 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe ff1d 	bl	8002078 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e05c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x416>
 8003258:	e054      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCC_OscConfig+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe ff0a 	bl	8002078 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe ff06 	bl	8002078 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e045      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x444>
 8003286:	e03d      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e038      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000
 800329c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x4ec>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d028      	beq.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d121      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11a      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800

08003314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0cc      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d90c      	bls.n	8003350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b65      	ldr	r3, [pc, #404]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800338a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d044      	beq.n	8003434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d119      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e067      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4934      	ldr	r1, [pc, #208]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fe fe38 	bl	8002078 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fe fe34 	bl	8002078 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e04f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20c      	bcs.n	800345c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fd98 	bl	8001ff0 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023c00 	.word	0x40023c00
 80034d0:	40023800 	.word	0x40023800
 80034d4:	0800ae18 	.word	0x0800ae18
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000004 	.word	0x20000004

080034e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b094      	sub	sp, #80	; 0x50
 80034e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	647b      	str	r3, [r7, #68]	; 0x44
 80034ec:	2300      	movs	r3, #0
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f0:	2300      	movs	r3, #0
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f8:	4b79      	ldr	r3, [pc, #484]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d00d      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x40>
 8003504:	2b08      	cmp	r3, #8
 8003506:	f200 80e1 	bhi.w	80036cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x34>
 800350e:	2b04      	cmp	r3, #4
 8003510:	d003      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x3a>
 8003512:	e0db      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b73      	ldr	r3, [pc, #460]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003516:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003518:	e0db      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351a:	4b73      	ldr	r3, [pc, #460]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800351c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800351e:	e0d8      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	4b6d      	ldr	r3, [pc, #436]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d063      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003540:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003548:	633b      	str	r3, [r7, #48]	; 0x30
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
 800354e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003552:	4622      	mov	r2, r4
 8003554:	462b      	mov	r3, r5
 8003556:	f04f 0000 	mov.w	r0, #0
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	0159      	lsls	r1, r3, #5
 8003560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003564:	0150      	lsls	r0, r2, #5
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4621      	mov	r1, r4
 800356c:	1a51      	subs	r1, r2, r1
 800356e:	6139      	str	r1, [r7, #16]
 8003570:	4629      	mov	r1, r5
 8003572:	eb63 0301 	sbc.w	r3, r3, r1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003584:	4659      	mov	r1, fp
 8003586:	018b      	lsls	r3, r1, #6
 8003588:	4651      	mov	r1, sl
 800358a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800358e:	4651      	mov	r1, sl
 8003590:	018a      	lsls	r2, r1, #6
 8003592:	4651      	mov	r1, sl
 8003594:	ebb2 0801 	subs.w	r8, r2, r1
 8003598:	4659      	mov	r1, fp
 800359a:	eb63 0901 	sbc.w	r9, r3, r1
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035b2:	4690      	mov	r8, r2
 80035b4:	4699      	mov	r9, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	eb18 0303 	adds.w	r3, r8, r3
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	462b      	mov	r3, r5
 80035c0:	eb49 0303 	adc.w	r3, r9, r3
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035d2:	4629      	mov	r1, r5
 80035d4:	024b      	lsls	r3, r1, #9
 80035d6:	4621      	mov	r1, r4
 80035d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035dc:	4621      	mov	r1, r4
 80035de:	024a      	lsls	r2, r1, #9
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e6:	2200      	movs	r2, #0
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035f0:	f7fd fad2 	bl	8000b98 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035fc:	e058      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b38      	ldr	r3, [pc, #224]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	2200      	movs	r2, #0
 8003606:	4618      	mov	r0, r3
 8003608:	4611      	mov	r1, r2
 800360a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
 8003614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	f04f 0000 	mov.w	r0, #0
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	0159      	lsls	r1, r3, #5
 8003626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362a:	0150      	lsls	r0, r2, #5
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4641      	mov	r1, r8
 8003632:	ebb2 0a01 	subs.w	sl, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb63 0b01 	sbc.w	fp, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003648:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800364c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003650:	ebb2 040a 	subs.w	r4, r2, sl
 8003654:	eb63 050b 	sbc.w	r5, r3, fp
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	00eb      	lsls	r3, r5, #3
 8003662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003666:	00e2      	lsls	r2, r4, #3
 8003668:	4614      	mov	r4, r2
 800366a:	461d      	mov	r5, r3
 800366c:	4643      	mov	r3, r8
 800366e:	18e3      	adds	r3, r4, r3
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	464b      	mov	r3, r9
 8003674:	eb45 0303 	adc.w	r3, r5, r3
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003686:	4629      	mov	r1, r5
 8003688:	028b      	lsls	r3, r1, #10
 800368a:	4621      	mov	r1, r4
 800368c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003690:	4621      	mov	r1, r4
 8003692:	028a      	lsls	r2, r1, #10
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369a:	2200      	movs	r2, #0
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	61fa      	str	r2, [r7, #28]
 80036a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a4:	f7fd fa78 	bl	8000b98 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80036c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3750      	adds	r7, #80	; 0x50
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000000 	.word	0x20000000

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a9b      	lsrs	r3, r3, #10
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	0800ae28 	.word	0x0800ae28

0800372c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003730:	f7ff ffdc 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	0b5b      	lsrs	r3, r3, #13
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	; (8003750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	0800ae28 	.word	0x0800ae28

08003754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07b      	b.n	800385e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003776:	d009      	beq.n	800378c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]
 800377e:	e005      	b.n	800378c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd ff1e 	bl	80015e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2202      	movs	r2, #2
 80037b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fc:	431a      	orrs	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	ea42 0103 	orr.w	r1, r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	f003 0104 	and.w	r1, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	f003 0210 	and.w	r2, r3, #16
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800384c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b08c      	sub	sp, #48	; 0x30
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003874:	2301      	movs	r3, #1
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_SPI_TransmitReceive+0x26>
 8003888:	2302      	movs	r3, #2
 800388a:	e18a      	b.n	8003ba2 <HAL_SPI_TransmitReceive+0x33c>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003894:	f7fe fbf0 	bl	8002078 <HAL_GetTick>
 8003898:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038aa:	887b      	ldrh	r3, [r7, #2]
 80038ac:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d00f      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x70>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038bc:	d107      	bne.n	80038ce <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d103      	bne.n	80038ce <HAL_SPI_TransmitReceive+0x68>
 80038c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d003      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
 80038d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038d4:	e15b      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_SPI_TransmitReceive+0x82>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_SPI_TransmitReceive+0x82>
 80038e2:	887b      	ldrh	r3, [r7, #2]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d103      	bne.n	80038f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80038ee:	e14e      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d003      	beq.n	8003904 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2205      	movs	r2, #5
 8003900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	887a      	ldrh	r2, [r7, #2]
 8003914:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	887a      	ldrh	r2, [r7, #2]
 800391a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	887a      	ldrh	r2, [r7, #2]
 8003926:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d007      	beq.n	8003958 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003956:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003960:	d178      	bne.n	8003a54 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_SPI_TransmitReceive+0x10a>
 800396a:	8b7b      	ldrh	r3, [r7, #26]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d166      	bne.n	8003a3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	881a      	ldrh	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	1c9a      	adds	r2, r3, #2
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003994:	e053      	b.n	8003a3e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d11b      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x176>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d016      	beq.n	80039dc <HAL_SPI_TransmitReceive+0x176>
 80039ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d113      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	881a      	ldrh	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	1c9a      	adds	r2, r3, #2
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d119      	bne.n	8003a1e <HAL_SPI_TransmitReceive+0x1b8>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d014      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	b292      	uxth	r2, r2
 8003a00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	1c9a      	adds	r2, r3, #2
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a1e:	f7fe fb2b 	bl	8002078 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d807      	bhi.n	8003a3e <HAL_SPI_TransmitReceive+0x1d8>
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d003      	beq.n	8003a3e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a3c:	e0a7      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1a6      	bne.n	8003996 <HAL_SPI_TransmitReceive+0x130>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1a1      	bne.n	8003996 <HAL_SPI_TransmitReceive+0x130>
 8003a52:	e07c      	b.n	8003b4e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_SPI_TransmitReceive+0x1fc>
 8003a5c:	8b7b      	ldrh	r3, [r7, #26]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d16b      	bne.n	8003b3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	330c      	adds	r3, #12
 8003a6c:	7812      	ldrb	r2, [r2, #0]
 8003a6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a88:	e057      	b.n	8003b3a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d11c      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x26c>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d017      	beq.n	8003ad2 <HAL_SPI_TransmitReceive+0x26c>
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d114      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d119      	bne.n	8003b14 <HAL_SPI_TransmitReceive+0x2ae>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d014      	beq.n	8003b14 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b10:	2301      	movs	r3, #1
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b14:	f7fe fab0 	bl	8002078 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d803      	bhi.n	8003b2c <HAL_SPI_TransmitReceive+0x2c6>
 8003b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2a:	d102      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x2cc>
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b38:	e029      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1a2      	bne.n	8003a8a <HAL_SPI_TransmitReceive+0x224>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d19d      	bne.n	8003a8a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f8b2 	bl	8003cbc <SPI_EndRxTxTransaction>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003b6a:	e010      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	617b      	str	r3, [r7, #20]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	e000      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3730      	adds	r7, #48	; 0x30
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bbc:	f7fe fa5c 	bl	8002078 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	4413      	add	r3, r2
 8003bca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bcc:	f7fe fa54 	bl	8002078 <HAL_GetTick>
 8003bd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bd2:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	015b      	lsls	r3, r3, #5
 8003bd8:	0d1b      	lsrs	r3, r3, #20
 8003bda:	69fa      	ldr	r2, [r7, #28]
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003be2:	e054      	b.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d050      	beq.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bec:	f7fe fa44 	bl	8002078 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d902      	bls.n	8003c02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d13d      	bne.n	8003c7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c1a:	d111      	bne.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c24:	d004      	beq.n	8003c30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2e:	d107      	bne.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c48:	d10f      	bne.n	8003c6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e017      	b.n	8003cae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4013      	ands	r3, r2
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d19b      	bne.n	8003be4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000000 	.word	0x20000000

08003cbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <SPI_EndRxTxTransaction+0x7c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <SPI_EndRxTxTransaction+0x80>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0d5b      	lsrs	r3, r3, #21
 8003cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cd8:	fb02 f303 	mul.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce6:	d112      	bne.n	8003d0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff ff5a 	bl	8003bac <SPI_WaitFlagStateUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d016      	beq.n	8003d2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e00f      	b.n	8003d2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d24:	2b80      	cmp	r3, #128	; 0x80
 8003d26:	d0f2      	beq.n	8003d0e <SPI_EndRxTxTransaction+0x52>
 8003d28:	e000      	b.n	8003d2c <SPI_EndRxTxTransaction+0x70>
        break;
 8003d2a:	bf00      	nop
  }

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	165e9f81 	.word	0x165e9f81

08003d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e041      	b.n	8003dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fd ff2e 	bl	8001bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f000 fd88 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d001      	beq.n	8003df8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e046      	b.n	8003e86 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a23      	ldr	r2, [pc, #140]	; (8003e94 <HAL_TIM_Base_Start+0xb4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d022      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e12:	d01d      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1f      	ldr	r2, [pc, #124]	; (8003e98 <HAL_TIM_Base_Start+0xb8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <HAL_TIM_Base_Start+0xbc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <HAL_TIM_Base_Start+0xc0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <HAL_TIM_Base_Start+0xc4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <HAL_TIM_Base_Start+0xc8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_TIM_Base_Start+0x70>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a18      	ldr	r2, [pc, #96]	; (8003eac <HAL_TIM_Base_Start+0xcc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d111      	bne.n	8003e74 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d010      	beq.n	8003e84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0201 	orr.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e72:	e007      	b.n	8003e84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40010400 	.word	0x40010400
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40001800 	.word	0x40001800

08003eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e041      	b.n	8003f46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd fec8 	bl	8001c6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f000 fcd0 	bl	8004894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <HAL_TIM_PWM_Start+0x24>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e022      	b.n	8003fba <HAL_TIM_PWM_Start+0x6a>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d109      	bne.n	8003f8e <HAL_TIM_PWM_Start+0x3e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e015      	b.n	8003fba <HAL_TIM_PWM_Start+0x6a>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d109      	bne.n	8003fa8 <HAL_TIM_PWM_Start+0x58>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e008      	b.n	8003fba <HAL_TIM_PWM_Start+0x6a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07c      	b.n	80040bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_PWM_Start+0x82>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	e013      	b.n	8003ffa <HAL_TIM_PWM_Start+0xaa>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0x92>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe0:	e00b      	b.n	8003ffa <HAL_TIM_PWM_Start+0xaa>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0xa2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff0:	e003      	b.n	8003ffa <HAL_TIM_PWM_Start+0xaa>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2201      	movs	r2, #1
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 ff30 	bl	8004e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2d      	ldr	r2, [pc, #180]	; (80040c4 <HAL_TIM_PWM_Start+0x174>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_TIM_PWM_Start+0xcc>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2c      	ldr	r2, [pc, #176]	; (80040c8 <HAL_TIM_PWM_Start+0x178>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d101      	bne.n	8004020 <HAL_TIM_PWM_Start+0xd0>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_TIM_PWM_Start+0xd2>
 8004020:	2300      	movs	r3, #0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d007      	beq.n	8004036 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <HAL_TIM_PWM_Start+0x174>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d022      	beq.n	8004086 <HAL_TIM_PWM_Start+0x136>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004048:	d01d      	beq.n	8004086 <HAL_TIM_PWM_Start+0x136>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <HAL_TIM_PWM_Start+0x17c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d018      	beq.n	8004086 <HAL_TIM_PWM_Start+0x136>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_TIM_PWM_Start+0x180>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <HAL_TIM_PWM_Start+0x136>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <HAL_TIM_PWM_Start+0x184>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00e      	beq.n	8004086 <HAL_TIM_PWM_Start+0x136>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <HAL_TIM_PWM_Start+0x178>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d009      	beq.n	8004086 <HAL_TIM_PWM_Start+0x136>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <HAL_TIM_PWM_Start+0x188>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <HAL_TIM_PWM_Start+0x136>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a16      	ldr	r2, [pc, #88]	; (80040dc <HAL_TIM_PWM_Start+0x18c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d111      	bne.n	80040aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b06      	cmp	r3, #6
 8004096:	d010      	beq.n	80040ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a8:	e007      	b.n	80040ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40010400 	.word	0x40010400
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40014000 	.word	0x40014000
 80040dc:	40001800 	.word	0x40001800

080040e0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HAL_TIM_PWM_Start_IT+0x28>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e022      	b.n	800414e <HAL_TIM_PWM_Start_IT+0x6e>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b04      	cmp	r3, #4
 800410c:	d109      	bne.n	8004122 <HAL_TIM_PWM_Start_IT+0x42>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	bf14      	ite	ne
 800411a:	2301      	movne	r3, #1
 800411c:	2300      	moveq	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	e015      	b.n	800414e <HAL_TIM_PWM_Start_IT+0x6e>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b08      	cmp	r3, #8
 8004126:	d109      	bne.n	800413c <HAL_TIM_PWM_Start_IT+0x5c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b01      	cmp	r3, #1
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e008      	b.n	800414e <HAL_TIM_PWM_Start_IT+0x6e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e0c7      	b.n	80042e6 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <HAL_TIM_PWM_Start_IT+0x86>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004164:	e013      	b.n	800418e <HAL_TIM_PWM_Start_IT+0xae>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d104      	bne.n	8004176 <HAL_TIM_PWM_Start_IT+0x96>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004174:	e00b      	b.n	800418e <HAL_TIM_PWM_Start_IT+0xae>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d104      	bne.n	8004186 <HAL_TIM_PWM_Start_IT+0xa6>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004184:	e003      	b.n	800418e <HAL_TIM_PWM_Start_IT+0xae>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d841      	bhi.n	8004218 <HAL_TIM_PWM_Start_IT+0x138>
 8004194:	a201      	add	r2, pc, #4	; (adr r2, 800419c <HAL_TIM_PWM_Start_IT+0xbc>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041d1 	.word	0x080041d1
 80041a0:	08004219 	.word	0x08004219
 80041a4:	08004219 	.word	0x08004219
 80041a8:	08004219 	.word	0x08004219
 80041ac:	080041e3 	.word	0x080041e3
 80041b0:	08004219 	.word	0x08004219
 80041b4:	08004219 	.word	0x08004219
 80041b8:	08004219 	.word	0x08004219
 80041bc:	080041f5 	.word	0x080041f5
 80041c0:	08004219 	.word	0x08004219
 80041c4:	08004219 	.word	0x08004219
 80041c8:	08004219 	.word	0x08004219
 80041cc:	08004207 	.word	0x08004207
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0202 	orr.w	r2, r2, #2
 80041de:	60da      	str	r2, [r3, #12]
      break;
 80041e0:	e01d      	b.n	800421e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0204 	orr.w	r2, r2, #4
 80041f0:	60da      	str	r2, [r3, #12]
      break;
 80041f2:	e014      	b.n	800421e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0208 	orr.w	r2, r2, #8
 8004202:	60da      	str	r2, [r3, #12]
      break;
 8004204:	e00b      	b.n	800421e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0210 	orr.w	r2, r2, #16
 8004214:	60da      	str	r2, [r3, #12]
      break;
 8004216:	e002      	b.n	800421e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      break;
 800421c:	bf00      	nop
  }

  if (status == HAL_OK)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d15f      	bne.n	80042e4 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2201      	movs	r2, #1
 800422a:	6839      	ldr	r1, [r7, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fe1b 	bl	8004e68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a2e      	ldr	r2, [pc, #184]	; (80042f0 <HAL_TIM_PWM_Start_IT+0x210>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_TIM_PWM_Start_IT+0x166>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <HAL_TIM_PWM_Start_IT+0x214>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <HAL_TIM_PWM_Start_IT+0x16a>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <HAL_TIM_PWM_Start_IT+0x16c>
 800424a:	2300      	movs	r3, #0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800425e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <HAL_TIM_PWM_Start_IT+0x210>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d022      	beq.n	80042b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004272:	d01d      	beq.n	80042b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <HAL_TIM_PWM_Start_IT+0x218>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d018      	beq.n	80042b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <HAL_TIM_PWM_Start_IT+0x21c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d013      	beq.n	80042b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <HAL_TIM_PWM_Start_IT+0x220>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00e      	beq.n	80042b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <HAL_TIM_PWM_Start_IT+0x214>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d009      	beq.n	80042b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_TIM_PWM_Start_IT+0x224>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d004      	beq.n	80042b0 <HAL_TIM_PWM_Start_IT+0x1d0>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <HAL_TIM_PWM_Start_IT+0x228>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d111      	bne.n	80042d4 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b06      	cmp	r3, #6
 80042c0:	d010      	beq.n	80042e4 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	e007      	b.n	80042e4 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40010000 	.word	0x40010000
 80042f4:	40010400 	.word	0x40010400
 80042f8:	40000400 	.word	0x40000400
 80042fc:	40000800 	.word	0x40000800
 8004300:	40000c00 	.word	0x40000c00
 8004304:	40014000 	.word	0x40014000
 8004308:	40001800 	.word	0x40001800

0800430c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b02      	cmp	r3, #2
 8004320:	d122      	bne.n	8004368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b02      	cmp	r3, #2
 800432e:	d11b      	bne.n	8004368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0202 	mvn.w	r2, #2
 8004338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fa81 	bl	8004856 <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa73 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fa84 	bl	800486a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b04      	cmp	r3, #4
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0204 	mvn.w	r2, #4
 800438c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fa57 	bl	8004856 <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fa49 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fa5a 	bl	800486a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0208 	mvn.w	r2, #8
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2204      	movs	r2, #4
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa2d 	bl	8004856 <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa1f 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fa30 	bl	800486a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b10      	cmp	r3, #16
 800441c:	d122      	bne.n	8004464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b10      	cmp	r3, #16
 800442a:	d11b      	bne.n	8004464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0210 	mvn.w	r2, #16
 8004434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2208      	movs	r2, #8
 800443a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa03 	bl	8004856 <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9f5 	bl	8004842 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fa06 	bl	800486a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d10e      	bne.n	8004490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0201 	mvn.w	r2, #1
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f9cf 	bl	800482e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b80      	cmp	r3, #128	; 0x80
 800449c:	d10e      	bne.n	80044bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fd82 	bl	8004fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d10e      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f9cb 	bl	800487e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d10e      	bne.n	8004514 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b20      	cmp	r3, #32
 8004502:	d107      	bne.n	8004514 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0220 	mvn.w	r2, #32
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fd4c 	bl	8004fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004536:	2302      	movs	r3, #2
 8004538:	e0ae      	b.n	8004698 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b0c      	cmp	r3, #12
 8004546:	f200 809f 	bhi.w	8004688 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	08004585 	.word	0x08004585
 8004554:	08004689 	.word	0x08004689
 8004558:	08004689 	.word	0x08004689
 800455c:	08004689 	.word	0x08004689
 8004560:	080045c5 	.word	0x080045c5
 8004564:	08004689 	.word	0x08004689
 8004568:	08004689 	.word	0x08004689
 800456c:	08004689 	.word	0x08004689
 8004570:	08004607 	.word	0x08004607
 8004574:	08004689 	.word	0x08004689
 8004578:	08004689 	.word	0x08004689
 800457c:	08004689 	.word	0x08004689
 8004580:	08004647 	.word	0x08004647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fa22 	bl	80049d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0208 	orr.w	r2, r2, #8
 800459e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	619a      	str	r2, [r3, #24]
      break;
 80045c2:	e064      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68b9      	ldr	r1, [r7, #8]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fa72 	bl	8004ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699a      	ldr	r2, [r3, #24]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6999      	ldr	r1, [r3, #24]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	021a      	lsls	r2, r3, #8
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	619a      	str	r2, [r3, #24]
      break;
 8004604:	e043      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68b9      	ldr	r1, [r7, #8]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 fac7 	bl	8004ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0208 	orr.w	r2, r2, #8
 8004620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69da      	ldr	r2, [r3, #28]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0204 	bic.w	r2, r2, #4
 8004630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69d9      	ldr	r1, [r3, #28]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	61da      	str	r2, [r3, #28]
      break;
 8004644:	e023      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fb1b 	bl	8004c88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69d9      	ldr	r1, [r3, #28]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	021a      	lsls	r2, r3, #8
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	61da      	str	r2, [r3, #28]
      break;
 8004686:	e002      	b.n	800468e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	75fb      	strb	r3, [r7, #23]
      break;
 800468c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004696:	7dfb      	ldrb	r3, [r7, #23]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_TIM_ConfigClockSource+0x1c>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e0b4      	b.n	8004826 <HAL_TIM_ConfigClockSource+0x186>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f4:	d03e      	beq.n	8004774 <HAL_TIM_ConfigClockSource+0xd4>
 80046f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046fa:	f200 8087 	bhi.w	800480c <HAL_TIM_ConfigClockSource+0x16c>
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	f000 8086 	beq.w	8004812 <HAL_TIM_ConfigClockSource+0x172>
 8004706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470a:	d87f      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b70      	cmp	r3, #112	; 0x70
 800470e:	d01a      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0xa6>
 8004710:	2b70      	cmp	r3, #112	; 0x70
 8004712:	d87b      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b60      	cmp	r3, #96	; 0x60
 8004716:	d050      	beq.n	80047ba <HAL_TIM_ConfigClockSource+0x11a>
 8004718:	2b60      	cmp	r3, #96	; 0x60
 800471a:	d877      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b50      	cmp	r3, #80	; 0x50
 800471e:	d03c      	beq.n	800479a <HAL_TIM_ConfigClockSource+0xfa>
 8004720:	2b50      	cmp	r3, #80	; 0x50
 8004722:	d873      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d058      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x13a>
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d86f      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800472c:	2b30      	cmp	r3, #48	; 0x30
 800472e:	d064      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004730:	2b30      	cmp	r3, #48	; 0x30
 8004732:	d86b      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 8004734:	2b20      	cmp	r3, #32
 8004736:	d060      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004738:	2b20      	cmp	r3, #32
 800473a:	d867      	bhi.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d05c      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004740:	2b10      	cmp	r3, #16
 8004742:	d05a      	beq.n	80047fa <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	e062      	b.n	800480c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6899      	ldr	r1, [r3, #8]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f000 fb67 	bl	8004e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	609a      	str	r2, [r3, #8]
      break;
 8004772:	e04f      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6899      	ldr	r1, [r3, #8]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f000 fb50 	bl	8004e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004796:	609a      	str	r2, [r3, #8]
      break;
 8004798:	e03c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6859      	ldr	r1, [r3, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f000 fac4 	bl	8004d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2150      	movs	r1, #80	; 0x50
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fb1d 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 80047b8:	e02c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	6859      	ldr	r1, [r3, #4]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f000 fae3 	bl	8004d92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2160      	movs	r1, #96	; 0x60
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fb0d 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 80047d8:	e01c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6859      	ldr	r1, [r3, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	461a      	mov	r2, r3
 80047e8:	f000 faa4 	bl	8004d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2140      	movs	r1, #64	; 0x40
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fafd 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 80047f8:	e00c      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f000 faf4 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 800480a:	e003      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      break;
 8004810:	e000      	b.n	8004814 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004824:	7bfb      	ldrb	r3, [r7, #15]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b2:	d00f      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a3d      	ldr	r2, [pc, #244]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00b      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a3b      	ldr	r2, [pc, #236]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0x40>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a3a      	ldr	r2, [pc, #232]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d108      	bne.n	80048e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2f      	ldr	r2, [pc, #188]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d02b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f4:	d027      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <TIM_Base_SetConfig+0x118>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d023      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <TIM_Base_SetConfig+0x11c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a2a      	ldr	r2, [pc, #168]	; (80049b4 <TIM_Base_SetConfig+0x120>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a29      	ldr	r2, [pc, #164]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d017      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <TIM_Base_SetConfig+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a27      	ldr	r2, [pc, #156]	; (80049c0 <TIM_Base_SetConfig+0x12c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00f      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <TIM_Base_SetConfig+0x130>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d00b      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a25      	ldr	r2, [pc, #148]	; (80049c8 <TIM_Base_SetConfig+0x134>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d007      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <TIM_Base_SetConfig+0x138>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <TIM_Base_SetConfig+0x13c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d108      	bne.n	8004958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800494c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <TIM_Base_SetConfig+0x114>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d003      	beq.n	800498c <TIM_Base_SetConfig+0xf8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <TIM_Base_SetConfig+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d103      	bne.n	8004994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	615a      	str	r2, [r3, #20]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40001800 	.word	0x40001800
 80049cc:	40001c00 	.word	0x40001c00
 80049d0:	40002000 	.word	0x40002000

080049d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 0302 	bic.w	r3, r3, #2
 8004a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a20      	ldr	r2, [pc, #128]	; (8004aac <TIM_OC1_SetConfig+0xd8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_OC1_SetConfig+0x64>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <TIM_OC1_SetConfig+0xdc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d10c      	bne.n	8004a52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f023 0308 	bic.w	r3, r3, #8
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f023 0304 	bic.w	r3, r3, #4
 8004a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a15      	ldr	r2, [pc, #84]	; (8004aac <TIM_OC1_SetConfig+0xd8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_OC1_SetConfig+0x8e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <TIM_OC1_SetConfig+0xdc>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d111      	bne.n	8004a86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40010400 	.word	0x40010400

08004ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f023 0210 	bic.w	r2, r3, #16
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f023 0320 	bic.w	r3, r3, #32
 8004afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a22      	ldr	r2, [pc, #136]	; (8004b98 <TIM_OC2_SetConfig+0xe4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d003      	beq.n	8004b1c <TIM_OC2_SetConfig+0x68>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <TIM_OC2_SetConfig+0xe8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d10d      	bne.n	8004b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a17      	ldr	r2, [pc, #92]	; (8004b98 <TIM_OC2_SetConfig+0xe4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d003      	beq.n	8004b48 <TIM_OC2_SetConfig+0x94>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <TIM_OC2_SetConfig+0xe8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d113      	bne.n	8004b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40010400 	.word	0x40010400

08004ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <TIM_OC3_SetConfig+0xe0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_OC3_SetConfig+0x66>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <TIM_OC3_SetConfig+0xe4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d10d      	bne.n	8004c22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a16      	ldr	r2, [pc, #88]	; (8004c80 <TIM_OC3_SetConfig+0xe0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_OC3_SetConfig+0x92>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <TIM_OC3_SetConfig+0xe4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d113      	bne.n	8004c5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	011b      	lsls	r3, r3, #4
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40010400 	.word	0x40010400

08004c88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	031b      	lsls	r3, r3, #12
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <TIM_OC4_SetConfig+0xa4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC4_SetConfig+0x68>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a11      	ldr	r2, [pc, #68]	; (8004d30 <TIM_OC4_SetConfig+0xa8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d109      	bne.n	8004d04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	019b      	lsls	r3, r3, #6
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40010400 	.word	0x40010400

08004d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 030a 	bic.w	r3, r3, #10
 8004d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d92:	b480      	push	{r7}
 8004d94:	b087      	sub	sp, #28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0210 	bic.w	r2, r3, #16
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	031b      	lsls	r3, r3, #12
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f043 0307 	orr.w	r3, r3, #7
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	021a      	lsls	r2, r3, #8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	609a      	str	r2, [r3, #8]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a1a      	ldr	r2, [r3, #32]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e05a      	b.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a21      	ldr	r2, [pc, #132]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d022      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d01d      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1d      	ldr	r2, [pc, #116]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d018      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d013      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a17      	ldr	r2, [pc, #92]	; (8004fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a15      	ldr	r2, [pc, #84]	; (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10c      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40010400 	.word	0x40010400
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40001800 	.word	0x40001800

08004fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e03f      	b.n	8005066 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc febe 	bl	8001d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	; 0x24
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fde9 	bl	8005bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800502c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695a      	ldr	r2, [r3, #20]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800503c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800504c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3708      	adds	r7, #8
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b08a      	sub	sp, #40	; 0x28
 8005072:	af02      	add	r7, sp, #8
 8005074:	60f8      	str	r0, [r7, #12]
 8005076:	60b9      	str	r1, [r7, #8]
 8005078:	603b      	str	r3, [r7, #0]
 800507a:	4613      	mov	r3, r2
 800507c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b20      	cmp	r3, #32
 800508c:	d17c      	bne.n	8005188 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_UART_Transmit+0x2c>
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e075      	b.n	800518a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_UART_Transmit+0x3e>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e06e      	b.n	800518a <HAL_UART_Transmit+0x11c>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2221      	movs	r2, #33	; 0x21
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050c2:	f7fc ffd9 	bl	8002078 <HAL_GetTick>
 80050c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	88fa      	ldrh	r2, [r7, #6]
 80050d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050dc:	d108      	bne.n	80050f0 <HAL_UART_Transmit+0x82>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d104      	bne.n	80050f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e003      	b.n	80050f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005100:	e02a      	b.n	8005158 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2200      	movs	r2, #0
 800510a:	2180      	movs	r1, #128	; 0x80
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fb29 	bl	8005764 <UART_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e036      	b.n	800518a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10b      	bne.n	800513a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005130:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	3302      	adds	r3, #2
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	e007      	b.n	800514a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3301      	adds	r3, #1
 8005148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800515c:	b29b      	uxth	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1cf      	bne.n	8005102 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2200      	movs	r2, #0
 800516a:	2140      	movs	r1, #64	; 0x40
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 faf9 	bl	8005764 <UART_WaitOnFlagUntilTimeout>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e006      	b.n	800518a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	4613      	mov	r3, r2
 800519e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d11d      	bne.n	80051e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_UART_Receive_IT+0x26>
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e016      	b.n	80051ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_UART_Receive_IT+0x38>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e00f      	b.n	80051ea <HAL_UART_Receive_IT+0x58>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	461a      	mov	r2, r3
 80051dc:	68b9      	ldr	r1, [r7, #8]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fb2e 	bl	8005840 <UART_Start_Receive_IT>
 80051e4:	4603      	mov	r3, r0
 80051e6:	e000      	b.n	80051ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
  }
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b0ba      	sub	sp, #232	; 0xe8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800521a:	2300      	movs	r3, #0
 800521c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005220:	2300      	movs	r3, #0
 8005222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10f      	bne.n	800525a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800523a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <HAL_UART_IRQHandler+0x66>
 8005246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800524a:	f003 0320 	and.w	r3, r3, #32
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fc11 	bl	8005a7a <UART_Receive_IT>
      return;
 8005258:	e256      	b.n	8005708 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800525a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80de 	beq.w	8005420 <HAL_UART_IRQHandler+0x22c>
 8005264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005274:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80d1 	beq.w	8005420 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <HAL_UART_IRQHandler+0xae>
 800528a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f043 0201 	orr.w	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_UART_IRQHandler+0xd2>
 80052ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f043 0202 	orr.w	r2, r3, #2
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <HAL_UART_IRQHandler+0xf6>
 80052d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f043 0204 	orr.w	r2, r3, #4
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d011      	beq.n	800531a <HAL_UART_IRQHandler+0x126>
 80052f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d105      	bne.n	800530e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f043 0208 	orr.w	r2, r3, #8
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 81ed 	beq.w	80056fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <HAL_UART_IRQHandler+0x14e>
 8005330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fb9c 	bl	8005a7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	bf0c      	ite	eq
 8005350:	2301      	moveq	r3, #1
 8005352:	2300      	movne	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f003 0308 	and.w	r3, r3, #8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <HAL_UART_IRQHandler+0x17a>
 8005366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d04f      	beq.n	800540e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 faa4 	bl	80058bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d141      	bne.n	8005406 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3314      	adds	r3, #20
 8005388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800539c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3314      	adds	r3, #20
 80053aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80053ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1d9      	bne.n	8005382 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d013      	beq.n	80053fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	4a7d      	ldr	r2, [pc, #500]	; (80055d0 <HAL_UART_IRQHandler+0x3dc>)
 80053dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fd f8dc 	bl	80025a0 <HAL_DMA_Abort_IT>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053f8:	4610      	mov	r0, r2
 80053fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	e00e      	b.n	800541c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f99a 	bl	8005738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005404:	e00a      	b.n	800541c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f996 	bl	8005738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	e006      	b.n	800541c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f992 	bl	8005738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800541a:	e170      	b.n	80056fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541c:	bf00      	nop
    return;
 800541e:	e16e      	b.n	80056fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	2b01      	cmp	r3, #1
 8005426:	f040 814a 	bne.w	80056be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8143 	beq.w	80056be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 813c 	beq.w	80056be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005446:	2300      	movs	r3, #0
 8005448:	60bb      	str	r3, [r7, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	f040 80b4 	bne.w	80055d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 8140 	beq.w	8005702 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800548a:	429a      	cmp	r2, r3
 800548c:	f080 8139 	bcs.w	8005702 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005496:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a2:	f000 8088 	beq.w	80055b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	330c      	adds	r3, #12
 80054ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80054d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1d9      	bne.n	80054a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3314      	adds	r3, #20
 80054f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005502:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3314      	adds	r3, #20
 8005512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005516:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800551a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800551e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e1      	bne.n	80054f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3314      	adds	r3, #20
 8005534:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800553e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3314      	adds	r3, #20
 800554e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005552:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005554:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005558:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e3      	bne.n	800552e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005586:	f023 0310 	bic.w	r3, r3, #16
 800558a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	330c      	adds	r3, #12
 8005594:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005598:	65ba      	str	r2, [r7, #88]	; 0x58
 800559a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800559e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055a0:	e841 2300 	strex	r3, r2, [r1]
 80055a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80055a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e3      	bne.n	8005574 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fc ff85 	bl	80024c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055be:	b29b      	uxth	r3, r3
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f8c0 	bl	800574c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055cc:	e099      	b.n	8005702 <HAL_UART_IRQHandler+0x50e>
 80055ce:	bf00      	nop
 80055d0:	08005983 	.word	0x08005983
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055dc:	b29b      	uxth	r3, r3
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 808b 	beq.w	8005706 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80055f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8086 	beq.w	8005706 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	330c      	adds	r3, #12
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800560a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005610:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800561e:	647a      	str	r2, [r7, #68]	; 0x44
 8005620:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e3      	bne.n	80055fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3314      	adds	r3, #20
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	623b      	str	r3, [r7, #32]
   return(result);
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3314      	adds	r3, #20
 8005652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005656:	633a      	str	r2, [r7, #48]	; 0x30
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800565c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e3      	bne.n	8005632 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	60fb      	str	r3, [r7, #12]
   return(result);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0310 	bic.w	r3, r3, #16
 800568e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	330c      	adds	r3, #12
 8005698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800569c:	61fa      	str	r2, [r7, #28]
 800569e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	69b9      	ldr	r1, [r7, #24]
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	e841 2300 	strex	r3, r2, [r1]
 80056a8:	617b      	str	r3, [r7, #20]
   return(result);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e3      	bne.n	8005678 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f848 	bl	800574c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056bc:	e023      	b.n	8005706 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_UART_IRQHandler+0x4ea>
 80056ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f967 	bl	80059aa <UART_Transmit_IT>
    return;
 80056dc:	e014      	b.n	8005708 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00e      	beq.n	8005708 <HAL_UART_IRQHandler+0x514>
 80056ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f9a7 	bl	8005a4a <UART_EndTransmit_IT>
    return;
 80056fc:	e004      	b.n	8005708 <HAL_UART_IRQHandler+0x514>
    return;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <HAL_UART_IRQHandler+0x514>
      return;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_UART_IRQHandler+0x514>
      return;
 8005706:	bf00      	nop
  }
}
 8005708:	37e8      	adds	r7, #232	; 0xe8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop

08005710 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b090      	sub	sp, #64	; 0x40
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005774:	e050      	b.n	8005818 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d04c      	beq.n	8005818 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800577e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <UART_WaitOnFlagUntilTimeout+0x30>
 8005784:	f7fc fc78 	bl	8002078 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005790:	429a      	cmp	r2, r3
 8005792:	d241      	bcs.n	8005818 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	330c      	adds	r3, #12
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057b4:	637a      	str	r2, [r7, #52]	; 0x34
 80057b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e5      	bne.n	8005794 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3314      	adds	r3, #20
 80057ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	613b      	str	r3, [r7, #16]
   return(result);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f023 0301 	bic.w	r3, r3, #1
 80057de:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057e8:	623a      	str	r2, [r7, #32]
 80057ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	69f9      	ldr	r1, [r7, #28]
 80057ee:	6a3a      	ldr	r2, [r7, #32]
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e5      	bne.n	80057c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e00f      	b.n	8005838 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	429a      	cmp	r2, r3
 8005834:	d09f      	beq.n	8005776 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3740      	adds	r7, #64	; 0x40
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	88fa      	ldrh	r2, [r7, #6]
 8005858:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	88fa      	ldrh	r2, [r7, #6]
 800585e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2222      	movs	r2, #34	; 0x22
 800586a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800588c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0201 	orr.w	r2, r2, #1
 800589c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0220 	orr.w	r2, r2, #32
 80058ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b095      	sub	sp, #84	; 0x54
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	330c      	adds	r3, #12
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058e4:	643a      	str	r2, [r7, #64]	; 0x40
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e5      	bne.n	80058c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3314      	adds	r3, #20
 80058fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	61fb      	str	r3, [r7, #28]
   return(result);
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3314      	adds	r3, #20
 8005916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005918:	62fa      	str	r2, [r7, #44]	; 0x2c
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800591e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e5      	bne.n	80058f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	2b01      	cmp	r3, #1
 8005932:	d119      	bne.n	8005968 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	60bb      	str	r3, [r7, #8]
   return(result);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f023 0310 	bic.w	r3, r3, #16
 800594a:	647b      	str	r3, [r7, #68]	; 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005954:	61ba      	str	r2, [r7, #24]
 8005956:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6979      	ldr	r1, [r7, #20]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	613b      	str	r3, [r7, #16]
   return(result);
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e5      	bne.n	8005934 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005976:	bf00      	nop
 8005978:	3754      	adds	r7, #84	; 0x54
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff fecb 	bl	8005738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b21      	cmp	r3, #33	; 0x21
 80059bc:	d13e      	bne.n	8005a3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c6:	d114      	bne.n	80059f2 <UART_Transmit_IT+0x48>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d110      	bne.n	80059f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	1c9a      	adds	r2, r3, #2
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	621a      	str	r2, [r3, #32]
 80059f0:	e008      	b.n	8005a04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	1c59      	adds	r1, r3, #1
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6211      	str	r1, [r2, #32]
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	4619      	mov	r1, r3
 8005a12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10f      	bne.n	8005a38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e000      	b.n	8005a3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a3c:	2302      	movs	r3, #2
  }
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff fe50 	bl	8005710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b08c      	sub	sp, #48	; 0x30
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b22      	cmp	r3, #34	; 0x22
 8005a8c:	f040 80ab 	bne.w	8005be6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a98:	d117      	bne.n	8005aca <UART_Receive_IT+0x50>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d113      	bne.n	8005aca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	1c9a      	adds	r2, r3, #2
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ac8:	e026      	b.n	8005b18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005adc:	d007      	beq.n	8005aee <UART_Receive_IT+0x74>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10a      	bne.n	8005afc <UART_Receive_IT+0x82>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	e008      	b.n	8005b0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	1c5a      	adds	r2, r3, #1
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	4619      	mov	r1, r3
 8005b26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d15a      	bne.n	8005be2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0220 	bic.w	r2, r2, #32
 8005b3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0201 	bic.w	r2, r2, #1
 8005b5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d135      	bne.n	8005bd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	613b      	str	r3, [r7, #16]
   return(result);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f023 0310 	bic.w	r3, r3, #16
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b92:	623a      	str	r2, [r7, #32]
 8005b94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	69f9      	ldr	r1, [r7, #28]
 8005b98:	6a3a      	ldr	r2, [r7, #32]
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e5      	bne.n	8005b72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d10a      	bne.n	8005bca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fdbb 	bl	800574c <HAL_UARTEx_RxEventCallback>
 8005bd6:	e002      	b.n	8005bde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fda3 	bl	8005724 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e002      	b.n	8005be8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e000      	b.n	8005be8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005be6:	2302      	movs	r3, #2
  }
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3730      	adds	r7, #48	; 0x30
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf4:	b0c0      	sub	sp, #256	; 0x100
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	68d9      	ldr	r1, [r3, #12]
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	ea40 0301 	orr.w	r3, r0, r1
 8005c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c48:	f021 010c 	bic.w	r1, r1, #12
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c56:	430b      	orrs	r3, r1
 8005c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6a:	6999      	ldr	r1, [r3, #24]
 8005c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	ea40 0301 	orr.w	r3, r0, r1
 8005c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b8f      	ldr	r3, [pc, #572]	; (8005ebc <UART_SetConfig+0x2cc>)
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d005      	beq.n	8005c90 <UART_SetConfig+0xa0>
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b8d      	ldr	r3, [pc, #564]	; (8005ec0 <UART_SetConfig+0x2d0>)
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d104      	bne.n	8005c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c90:	f7fd fd4c 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8005c94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c98:	e003      	b.n	8005ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c9a:	f7fd fd33 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 8005c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cac:	f040 810c 	bne.w	8005ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cc2:	4622      	mov	r2, r4
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	1891      	adds	r1, r2, r2
 8005cc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cca:	415b      	adcs	r3, r3
 8005ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cd2:	4621      	mov	r1, r4
 8005cd4:	eb12 0801 	adds.w	r8, r2, r1
 8005cd8:	4629      	mov	r1, r5
 8005cda:	eb43 0901 	adc.w	r9, r3, r1
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cf2:	4690      	mov	r8, r2
 8005cf4:	4699      	mov	r9, r3
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	eb18 0303 	adds.w	r3, r8, r3
 8005cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d00:	462b      	mov	r3, r5
 8005d02:	eb49 0303 	adc.w	r3, r9, r3
 8005d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d1e:	460b      	mov	r3, r1
 8005d20:	18db      	adds	r3, r3, r3
 8005d22:	653b      	str	r3, [r7, #80]	; 0x50
 8005d24:	4613      	mov	r3, r2
 8005d26:	eb42 0303 	adc.w	r3, r2, r3
 8005d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d34:	f7fa ff30 	bl	8000b98 <__aeabi_uldivmod>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4b61      	ldr	r3, [pc, #388]	; (8005ec4 <UART_SetConfig+0x2d4>)
 8005d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	011c      	lsls	r4, r3, #4
 8005d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	1891      	adds	r1, r2, r2
 8005d5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d60:	415b      	adcs	r3, r3
 8005d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d68:	4641      	mov	r1, r8
 8005d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8005d6e:	4649      	mov	r1, r9
 8005d70:	eb43 0b01 	adc.w	fp, r3, r1
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d88:	4692      	mov	sl, r2
 8005d8a:	469b      	mov	fp, r3
 8005d8c:	4643      	mov	r3, r8
 8005d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8005d92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d96:	464b      	mov	r3, r9
 8005d98:	eb4b 0303 	adc.w	r3, fp, r3
 8005d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005db4:	460b      	mov	r3, r1
 8005db6:	18db      	adds	r3, r3, r3
 8005db8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dba:	4613      	mov	r3, r2
 8005dbc:	eb42 0303 	adc.w	r3, r2, r3
 8005dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005dca:	f7fa fee5 	bl	8000b98 <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	; (8005ec4 <UART_SetConfig+0x2d4>)
 8005dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	2264      	movs	r2, #100	; 0x64
 8005dde:	fb02 f303 	mul.w	r3, r2, r3
 8005de2:	1acb      	subs	r3, r1, r3
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005dea:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <UART_SetConfig+0x2d4>)
 8005dec:	fba3 2302 	umull	r2, r3, r3, r2
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005df8:	441c      	add	r4, r3
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e14:	415b      	adcs	r3, r3
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	1851      	adds	r1, r2, r1
 8005e20:	6339      	str	r1, [r7, #48]	; 0x30
 8005e22:	4649      	mov	r1, r9
 8005e24:	414b      	adcs	r3, r1
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e34:	4659      	mov	r1, fp
 8005e36:	00cb      	lsls	r3, r1, #3
 8005e38:	4651      	mov	r1, sl
 8005e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3e:	4651      	mov	r1, sl
 8005e40:	00ca      	lsls	r2, r1, #3
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	4642      	mov	r2, r8
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e50:	464b      	mov	r3, r9
 8005e52:	460a      	mov	r2, r1
 8005e54:	eb42 0303 	adc.w	r3, r2, r3
 8005e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e70:	460b      	mov	r3, r1
 8005e72:	18db      	adds	r3, r3, r3
 8005e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e76:	4613      	mov	r3, r2
 8005e78:	eb42 0303 	adc.w	r3, r2, r3
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e86:	f7fa fe87 	bl	8000b98 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <UART_SetConfig+0x2d4>)
 8005e90:	fba3 1302 	umull	r1, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	2164      	movs	r1, #100	; 0x64
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	3332      	adds	r3, #50	; 0x32
 8005ea2:	4a08      	ldr	r2, [pc, #32]	; (8005ec4 <UART_SetConfig+0x2d4>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	095b      	lsrs	r3, r3, #5
 8005eaa:	f003 0207 	and.w	r2, r3, #7
 8005eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4422      	add	r2, r4
 8005eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005eb8:	e105      	b.n	80060c6 <UART_SetConfig+0x4d6>
 8005eba:	bf00      	nop
 8005ebc:	40011000 	.word	0x40011000
 8005ec0:	40011400 	.word	0x40011400
 8005ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005eda:	4642      	mov	r2, r8
 8005edc:	464b      	mov	r3, r9
 8005ede:	1891      	adds	r1, r2, r2
 8005ee0:	6239      	str	r1, [r7, #32]
 8005ee2:	415b      	adcs	r3, r3
 8005ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eea:	4641      	mov	r1, r8
 8005eec:	1854      	adds	r4, r2, r1
 8005eee:	4649      	mov	r1, r9
 8005ef0:	eb43 0501 	adc.w	r5, r3, r1
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	00eb      	lsls	r3, r5, #3
 8005efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f02:	00e2      	lsls	r2, r4, #3
 8005f04:	4614      	mov	r4, r2
 8005f06:	461d      	mov	r5, r3
 8005f08:	4643      	mov	r3, r8
 8005f0a:	18e3      	adds	r3, r4, r3
 8005f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f10:	464b      	mov	r3, r9
 8005f12:	eb45 0303 	adc.w	r3, r5, r3
 8005f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f36:	4629      	mov	r1, r5
 8005f38:	008b      	lsls	r3, r1, #2
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f40:	4621      	mov	r1, r4
 8005f42:	008a      	lsls	r2, r1, #2
 8005f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f48:	f7fa fe26 	bl	8000b98 <__aeabi_uldivmod>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4b60      	ldr	r3, [pc, #384]	; (80060d4 <UART_SetConfig+0x4e4>)
 8005f52:	fba3 2302 	umull	r2, r3, r3, r2
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	011c      	lsls	r4, r3, #4
 8005f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	464b      	mov	r3, r9
 8005f70:	1891      	adds	r1, r2, r2
 8005f72:	61b9      	str	r1, [r7, #24]
 8005f74:	415b      	adcs	r3, r3
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	1851      	adds	r1, r2, r1
 8005f80:	6139      	str	r1, [r7, #16]
 8005f82:	4649      	mov	r1, r9
 8005f84:	414b      	adcs	r3, r1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f94:	4659      	mov	r1, fp
 8005f96:	00cb      	lsls	r3, r1, #3
 8005f98:	4651      	mov	r1, sl
 8005f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f9e:	4651      	mov	r1, sl
 8005fa0:	00ca      	lsls	r2, r1, #3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4642      	mov	r2, r8
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fb0:	464b      	mov	r3, r9
 8005fb2:	460a      	mov	r2, r1
 8005fb4:	eb42 0303 	adc.w	r3, r2, r3
 8005fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	008b      	lsls	r3, r1, #2
 8005fd8:	4641      	mov	r1, r8
 8005fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fde:	4641      	mov	r1, r8
 8005fe0:	008a      	lsls	r2, r1, #2
 8005fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fe6:	f7fa fdd7 	bl	8000b98 <__aeabi_uldivmod>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <UART_SetConfig+0x4e4>)
 8005ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	2164      	movs	r1, #100	; 0x64
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	3332      	adds	r3, #50	; 0x32
 8006002:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <UART_SetConfig+0x4e4>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800600e:	441c      	add	r4, r3
 8006010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006014:	2200      	movs	r2, #0
 8006016:	673b      	str	r3, [r7, #112]	; 0x70
 8006018:	677a      	str	r2, [r7, #116]	; 0x74
 800601a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800601e:	4642      	mov	r2, r8
 8006020:	464b      	mov	r3, r9
 8006022:	1891      	adds	r1, r2, r2
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	415b      	adcs	r3, r3
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800602e:	4641      	mov	r1, r8
 8006030:	1851      	adds	r1, r2, r1
 8006032:	6039      	str	r1, [r7, #0]
 8006034:	4649      	mov	r1, r9
 8006036:	414b      	adcs	r3, r1
 8006038:	607b      	str	r3, [r7, #4]
 800603a:	f04f 0200 	mov.w	r2, #0
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006046:	4659      	mov	r1, fp
 8006048:	00cb      	lsls	r3, r1, #3
 800604a:	4651      	mov	r1, sl
 800604c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006050:	4651      	mov	r1, sl
 8006052:	00ca      	lsls	r2, r1, #3
 8006054:	4610      	mov	r0, r2
 8006056:	4619      	mov	r1, r3
 8006058:	4603      	mov	r3, r0
 800605a:	4642      	mov	r2, r8
 800605c:	189b      	adds	r3, r3, r2
 800605e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006060:	464b      	mov	r3, r9
 8006062:	460a      	mov	r2, r1
 8006064:	eb42 0303 	adc.w	r3, r2, r3
 8006068:	66fb      	str	r3, [r7, #108]	; 0x6c
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	663b      	str	r3, [r7, #96]	; 0x60
 8006074:	667a      	str	r2, [r7, #100]	; 0x64
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006082:	4649      	mov	r1, r9
 8006084:	008b      	lsls	r3, r1, #2
 8006086:	4641      	mov	r1, r8
 8006088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608c:	4641      	mov	r1, r8
 800608e:	008a      	lsls	r2, r1, #2
 8006090:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006094:	f7fa fd80 	bl	8000b98 <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <UART_SetConfig+0x4e4>)
 800609e:	fba3 1302 	umull	r1, r3, r3, r2
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	2164      	movs	r1, #100	; 0x64
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	3332      	adds	r3, #50	; 0x32
 80060b0:	4a08      	ldr	r2, [pc, #32]	; (80060d4 <UART_SetConfig+0x4e4>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	f003 020f 	and.w	r2, r3, #15
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4422      	add	r2, r4
 80060c4:	609a      	str	r2, [r3, #8]
}
 80060c6:	bf00      	nop
 80060c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060cc:	46bd      	mov	sp, r7
 80060ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060d2:	bf00      	nop
 80060d4:	51eb851f 	.word	0x51eb851f

080060d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80060dc:	4904      	ldr	r1, [pc, #16]	; (80060f0 <MX_FATFS_Init+0x18>)
 80060de:	4805      	ldr	r0, [pc, #20]	; (80060f4 <MX_FATFS_Init+0x1c>)
 80060e0:	f002 fec0 	bl	8008e64 <FATFS_LinkDriver>
 80060e4:	4603      	mov	r3, r0
 80060e6:	461a      	mov	r2, r3
 80060e8:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <MX_FATFS_Init+0x20>)
 80060ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80060ec:	bf00      	nop
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20013330 	.word	0x20013330
 80060f4:	2000000c 	.word	0x2000000c
 80060f8:	2001332c 	.word	0x2001332c

080060fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006100:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006102:	4618      	mov	r0, r3
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006116:	79fb      	ldrb	r3, [r7, #7]
 8006118:	4618      	mov	r0, r3
 800611a:	f000 f9d9 	bl	80064d0 <USER_SPI_initialize>
 800611e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fab7 	bl	80066a8 <USER_SPI_status>
 800613a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006154:	7bf8      	ldrb	r0, [r7, #15]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	f000 faba 	bl	80066d4 <USER_SPI_read>
 8006160:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
 8006176:	4603      	mov	r3, r0
 8006178:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800617a:	7bf8      	ldrb	r0, [r7, #15]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	f000 fb0d 	bl	80067a0 <USER_SPI_write>
 8006186:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	4603      	mov	r3, r0
 8006198:	603a      	str	r2, [r7, #0]
 800619a:	71fb      	strb	r3, [r7, #7]
 800619c:	460b      	mov	r3, r1
 800619e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80061a0:	79b9      	ldrb	r1, [r7, #6]
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fb76 	bl	8006898 <USER_SPI_ioctl>
 80061ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80061c0:	f7fb ff5a 	bl	8002078 <HAL_GetTick>
 80061c4:	4603      	mov	r3, r0
 80061c6:	4a04      	ldr	r2, [pc, #16]	; (80061d8 <SPI_Timer_On+0x20>)
 80061c8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80061ca:	4a04      	ldr	r2, [pc, #16]	; (80061dc <SPI_Timer_On+0x24>)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6013      	str	r3, [r2, #0]
}
 80061d0:	bf00      	nop
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20013338 	.word	0x20013338
 80061dc:	2001333c 	.word	0x2001333c

080061e0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80061e4:	f7fb ff48 	bl	8002078 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	4b06      	ldr	r3, [pc, #24]	; (8006204 <SPI_Timer_Status+0x24>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	1ad2      	subs	r2, r2, r3
 80061f0:	4b05      	ldr	r3, [pc, #20]	; (8006208 <SPI_Timer_Status+0x28>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	bf34      	ite	cc
 80061f8:	2301      	movcc	r3, #1
 80061fa:	2300      	movcs	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
}
 80061fe:	4618      	mov	r0, r3
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20013338 	.word	0x20013338
 8006208:	2001333c 	.word	0x2001333c

0800620c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af02      	add	r7, sp, #8
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006216:	f107 020f 	add.w	r2, r7, #15
 800621a:	1df9      	adds	r1, r7, #7
 800621c:	2332      	movs	r3, #50	; 0x32
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	2301      	movs	r3, #1
 8006222:	4804      	ldr	r0, [pc, #16]	; (8006234 <xchg_spi+0x28>)
 8006224:	f7fd fb1f 	bl	8003866 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	2000049c 	.word	0x2000049c

08006238 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	e00a      	b.n	800625e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	18d4      	adds	r4, r2, r3
 800624e:	20ff      	movs	r0, #255	; 0xff
 8006250:	f7ff ffdc 	bl	800620c <xchg_spi>
 8006254:	4603      	mov	r3, r0
 8006256:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d3f0      	bcc.n	8006248 <rcvr_spi_multi+0x10>
	}
}
 8006266:	bf00      	nop
 8006268:	bf00      	nop
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	bd90      	pop	{r4, r7, pc}

08006270 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e009      	b.n	8006294 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff ffbf 	bl	800620c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	429a      	cmp	r2, r3
 800629a:	d3f1      	bcc.n	8006280 <xmit_spi_multi+0x10>
	}
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80062ae:	f7fb fee3 	bl	8002078 <HAL_GetTick>
 80062b2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80062b8:	20ff      	movs	r0, #255	; 0xff
 80062ba:	f7ff ffa7 	bl	800620c <xchg_spi>
 80062be:	4603      	mov	r3, r0
 80062c0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2bff      	cmp	r3, #255	; 0xff
 80062c6:	d007      	beq.n	80062d8 <wait_ready+0x32>
 80062c8:	f7fb fed6 	bl	8002078 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d8ef      	bhi.n	80062b8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2bff      	cmp	r3, #255	; 0xff
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80062f0:	2201      	movs	r2, #1
 80062f2:	2102      	movs	r1, #2
 80062f4:	4803      	ldr	r0, [pc, #12]	; (8006304 <despiselect+0x18>)
 80062f6:	f7fc fd7b 	bl	8002df0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80062fa:	20ff      	movs	r0, #255	; 0xff
 80062fc:	f7ff ff86 	bl	800620c <xchg_spi>

}
 8006300:	bf00      	nop
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40020000 	.word	0x40020000

08006308 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800630c:	2200      	movs	r2, #0
 800630e:	2102      	movs	r1, #2
 8006310:	4809      	ldr	r0, [pc, #36]	; (8006338 <spiselect+0x30>)
 8006312:	f7fc fd6d 	bl	8002df0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006316:	20ff      	movs	r0, #255	; 0xff
 8006318:	f7ff ff78 	bl	800620c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800631c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006320:	f7ff ffc1 	bl	80062a6 <wait_ready>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d001      	beq.n	800632e <spiselect+0x26>
 800632a:	2301      	movs	r3, #1
 800632c:	e002      	b.n	8006334 <spiselect+0x2c>

	despiselect();
 800632e:	f7ff ffdd 	bl	80062ec <despiselect>
	return 0;	/* Timeout */
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40020000 	.word	0x40020000

0800633c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006346:	20c8      	movs	r0, #200	; 0xc8
 8006348:	f7ff ff36 	bl	80061b8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800634c:	20ff      	movs	r0, #255	; 0xff
 800634e:	f7ff ff5d 	bl	800620c <xchg_spi>
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2bff      	cmp	r3, #255	; 0xff
 800635a:	d104      	bne.n	8006366 <rcvr_datablock+0x2a>
 800635c:	f7ff ff40 	bl	80061e0 <SPI_Timer_Status>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1f2      	bne.n	800634c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	2bfe      	cmp	r3, #254	; 0xfe
 800636a:	d001      	beq.n	8006370 <rcvr_datablock+0x34>
 800636c:	2300      	movs	r3, #0
 800636e:	e00a      	b.n	8006386 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff ff60 	bl	8006238 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006378:	20ff      	movs	r0, #255	; 0xff
 800637a:	f7ff ff47 	bl	800620c <xchg_spi>
 800637e:	20ff      	movs	r0, #255	; 0xff
 8006380:	f7ff ff44 	bl	800620c <xchg_spi>

	return 1;						/* Function succeeded */
 8006384:	2301      	movs	r3, #1
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	460b      	mov	r3, r1
 8006398:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800639a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800639e:	f7ff ff82 	bl	80062a6 <wait_ready>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <xmit_datablock+0x1e>
 80063a8:	2300      	movs	r3, #0
 80063aa:	e01e      	b.n	80063ea <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff ff2c 	bl	800620c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2bfd      	cmp	r3, #253	; 0xfd
 80063b8:	d016      	beq.n	80063e8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80063ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff ff56 	bl	8006270 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80063c4:	20ff      	movs	r0, #255	; 0xff
 80063c6:	f7ff ff21 	bl	800620c <xchg_spi>
 80063ca:	20ff      	movs	r0, #255	; 0xff
 80063cc:	f7ff ff1e 	bl	800620c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80063d0:	20ff      	movs	r0, #255	; 0xff
 80063d2:	f7ff ff1b 	bl	800620c <xchg_spi>
 80063d6:	4603      	mov	r3, r0
 80063d8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2b05      	cmp	r3, #5
 80063e2:	d001      	beq.n	80063e8 <xmit_datablock+0x5a>
 80063e4:	2300      	movs	r3, #0
 80063e6:	e000      	b.n	80063ea <xmit_datablock+0x5c>
	}
	return 1;
 80063e8:	2301      	movs	r3, #1
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	4603      	mov	r3, r0
 80063fa:	6039      	str	r1, [r7, #0]
 80063fc:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80063fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006402:	2b00      	cmp	r3, #0
 8006404:	da0e      	bge.n	8006424 <send_cmd+0x32>
		cmd &= 0x7F;
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800640e:	2100      	movs	r1, #0
 8006410:	2037      	movs	r0, #55	; 0x37
 8006412:	f7ff ffee 	bl	80063f2 <send_cmd>
 8006416:	4603      	mov	r3, r0
 8006418:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800641a:	7bbb      	ldrb	r3, [r7, #14]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d901      	bls.n	8006424 <send_cmd+0x32>
 8006420:	7bbb      	ldrb	r3, [r7, #14]
 8006422:	e051      	b.n	80064c8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006424:	79fb      	ldrb	r3, [r7, #7]
 8006426:	2b0c      	cmp	r3, #12
 8006428:	d008      	beq.n	800643c <send_cmd+0x4a>
		despiselect();
 800642a:	f7ff ff5f 	bl	80062ec <despiselect>
		if (!spiselect()) return 0xFF;
 800642e:	f7ff ff6b 	bl	8006308 <spiselect>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <send_cmd+0x4a>
 8006438:	23ff      	movs	r3, #255	; 0xff
 800643a:	e045      	b.n	80064c8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006442:	b2db      	uxtb	r3, r3
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fee1 	bl	800620c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	0e1b      	lsrs	r3, r3, #24
 800644e:	b2db      	uxtb	r3, r3
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fedb 	bl	800620c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	0c1b      	lsrs	r3, r3, #16
 800645a:	b2db      	uxtb	r3, r3
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff fed5 	bl	800620c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	0a1b      	lsrs	r3, r3, #8
 8006466:	b2db      	uxtb	r3, r3
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff fecf 	bl	800620c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff feca 	bl	800620c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006478:	2301      	movs	r3, #1
 800647a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <send_cmd+0x94>
 8006482:	2395      	movs	r3, #149	; 0x95
 8006484:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d101      	bne.n	8006490 <send_cmd+0x9e>
 800648c:	2387      	movs	r3, #135	; 0x87
 800648e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff feba 	bl	800620c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	2b0c      	cmp	r3, #12
 800649c:	d102      	bne.n	80064a4 <send_cmd+0xb2>
 800649e:	20ff      	movs	r0, #255	; 0xff
 80064a0:	f7ff feb4 	bl	800620c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80064a4:	230a      	movs	r3, #10
 80064a6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80064a8:	20ff      	movs	r0, #255	; 0xff
 80064aa:	f7ff feaf 	bl	800620c <xchg_spi>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80064b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	da05      	bge.n	80064c6 <send_cmd+0xd4>
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	3b01      	subs	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <send_cmd+0xb6>

	return res;							/* Return received response */
 80064c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4603      	mov	r3, r0
 80064d8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80064da:	79fb      	ldrb	r3, [r7, #7]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <USER_SPI_initialize+0x14>
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0d6      	b.n	8006692 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80064e4:	4b6d      	ldr	r3, [pc, #436]	; (800669c <USER_SPI_initialize+0x1cc>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <USER_SPI_initialize+0x2a>
 80064f2:	4b6a      	ldr	r3, [pc, #424]	; (800669c <USER_SPI_initialize+0x1cc>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	e0cb      	b.n	8006692 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80064fa:	4b69      	ldr	r3, [pc, #420]	; (80066a0 <USER_SPI_initialize+0x1d0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006504:	4b66      	ldr	r3, [pc, #408]	; (80066a0 <USER_SPI_initialize+0x1d0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800650c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800650e:	230a      	movs	r3, #10
 8006510:	73fb      	strb	r3, [r7, #15]
 8006512:	e005      	b.n	8006520 <USER_SPI_initialize+0x50>
 8006514:	20ff      	movs	r0, #255	; 0xff
 8006516:	f7ff fe79 	bl	800620c <xchg_spi>
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	3b01      	subs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1f6      	bne.n	8006514 <USER_SPI_initialize+0x44>

	ty = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800652a:	2100      	movs	r1, #0
 800652c:	2000      	movs	r0, #0
 800652e:	f7ff ff60 	bl	80063f2 <send_cmd>
 8006532:	4603      	mov	r3, r0
 8006534:	2b01      	cmp	r3, #1
 8006536:	f040 808b 	bne.w	8006650 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800653a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800653e:	f7ff fe3b 	bl	80061b8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006542:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006546:	2008      	movs	r0, #8
 8006548:	f7ff ff53 	bl	80063f2 <send_cmd>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d151      	bne.n	80065f6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
 8006556:	e00d      	b.n	8006574 <USER_SPI_initialize+0xa4>
 8006558:	7bfc      	ldrb	r4, [r7, #15]
 800655a:	20ff      	movs	r0, #255	; 0xff
 800655c:	f7ff fe56 	bl	800620c <xchg_spi>
 8006560:	4603      	mov	r3, r0
 8006562:	461a      	mov	r2, r3
 8006564:	f104 0310 	add.w	r3, r4, #16
 8006568:	443b      	add	r3, r7
 800656a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	3301      	adds	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	2b03      	cmp	r3, #3
 8006578:	d9ee      	bls.n	8006558 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800657a:	7abb      	ldrb	r3, [r7, #10]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d167      	bne.n	8006650 <USER_SPI_initialize+0x180>
 8006580:	7afb      	ldrb	r3, [r7, #11]
 8006582:	2baa      	cmp	r3, #170	; 0xaa
 8006584:	d164      	bne.n	8006650 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006586:	bf00      	nop
 8006588:	f7ff fe2a 	bl	80061e0 <SPI_Timer_Status>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <USER_SPI_initialize+0xd2>
 8006592:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006596:	20a9      	movs	r0, #169	; 0xa9
 8006598:	f7ff ff2b 	bl	80063f2 <send_cmd>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f2      	bne.n	8006588 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80065a2:	f7ff fe1d 	bl	80061e0 <SPI_Timer_Status>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d051      	beq.n	8006650 <USER_SPI_initialize+0x180>
 80065ac:	2100      	movs	r1, #0
 80065ae:	203a      	movs	r0, #58	; 0x3a
 80065b0:	f7ff ff1f 	bl	80063f2 <send_cmd>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d14a      	bne.n	8006650 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]
 80065be:	e00d      	b.n	80065dc <USER_SPI_initialize+0x10c>
 80065c0:	7bfc      	ldrb	r4, [r7, #15]
 80065c2:	20ff      	movs	r0, #255	; 0xff
 80065c4:	f7ff fe22 	bl	800620c <xchg_spi>
 80065c8:	4603      	mov	r3, r0
 80065ca:	461a      	mov	r2, r3
 80065cc:	f104 0310 	add.w	r3, r4, #16
 80065d0:	443b      	add	r3, r7
 80065d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	3301      	adds	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d9ee      	bls.n	80065c0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80065e2:	7a3b      	ldrb	r3, [r7, #8]
 80065e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <USER_SPI_initialize+0x120>
 80065ec:	230c      	movs	r3, #12
 80065ee:	e000      	b.n	80065f2 <USER_SPI_initialize+0x122>
 80065f0:	2304      	movs	r3, #4
 80065f2:	737b      	strb	r3, [r7, #13]
 80065f4:	e02c      	b.n	8006650 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80065f6:	2100      	movs	r1, #0
 80065f8:	20a9      	movs	r0, #169	; 0xa9
 80065fa:	f7ff fefa 	bl	80063f2 <send_cmd>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d804      	bhi.n	800660e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006604:	2302      	movs	r3, #2
 8006606:	737b      	strb	r3, [r7, #13]
 8006608:	23a9      	movs	r3, #169	; 0xa9
 800660a:	73bb      	strb	r3, [r7, #14]
 800660c:	e003      	b.n	8006616 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800660e:	2301      	movs	r3, #1
 8006610:	737b      	strb	r3, [r7, #13]
 8006612:	2301      	movs	r3, #1
 8006614:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006616:	bf00      	nop
 8006618:	f7ff fde2 	bl	80061e0 <SPI_Timer_Status>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d007      	beq.n	8006632 <USER_SPI_initialize+0x162>
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2100      	movs	r1, #0
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff fee3 	bl	80063f2 <send_cmd>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f2      	bne.n	8006618 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006632:	f7ff fdd5 	bl	80061e0 <SPI_Timer_Status>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d007      	beq.n	800664c <USER_SPI_initialize+0x17c>
 800663c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006640:	2010      	movs	r0, #16
 8006642:	f7ff fed6 	bl	80063f2 <send_cmd>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <USER_SPI_initialize+0x180>
				ty = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006650:	4a14      	ldr	r2, [pc, #80]	; (80066a4 <USER_SPI_initialize+0x1d4>)
 8006652:	7b7b      	ldrb	r3, [r7, #13]
 8006654:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006656:	f7ff fe49 	bl	80062ec <despiselect>

	if (ty) {			/* OK */
 800665a:	7b7b      	ldrb	r3, [r7, #13]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d012      	beq.n	8006686 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006660:	4b0f      	ldr	r3, [pc, #60]	; (80066a0 <USER_SPI_initialize+0x1d0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800666a:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <USER_SPI_initialize+0x1d0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0210 	orr.w	r2, r2, #16
 8006672:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006674:	4b09      	ldr	r3, [pc, #36]	; (800669c <USER_SPI_initialize+0x1cc>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	b2da      	uxtb	r2, r3
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <USER_SPI_initialize+0x1cc>)
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	e002      	b.n	800668c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006686:	4b05      	ldr	r3, [pc, #20]	; (800669c <USER_SPI_initialize+0x1cc>)
 8006688:	2201      	movs	r2, #1
 800668a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800668c:	4b03      	ldr	r3, [pc, #12]	; (800669c <USER_SPI_initialize+0x1cc>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	b2db      	uxtb	r3, r3
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	bd90      	pop	{r4, r7, pc}
 800669a:	bf00      	nop
 800669c:	20000020 	.word	0x20000020
 80066a0:	2000049c 	.word	0x2000049c
 80066a4:	20013334 	.word	0x20013334

080066a8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80066b2:	79fb      	ldrb	r3, [r7, #7]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <USER_SPI_status+0x14>
 80066b8:	2301      	movs	r3, #1
 80066ba:	e002      	b.n	80066c2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80066bc:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <USER_SPI_status+0x28>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	b2db      	uxtb	r3, r3
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	20000020 	.word	0x20000020

080066d4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60b9      	str	r1, [r7, #8]
 80066dc:	607a      	str	r2, [r7, #4]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d102      	bne.n	80066f0 <USER_SPI_read+0x1c>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <USER_SPI_read+0x20>
 80066f0:	2304      	movs	r3, #4
 80066f2:	e04d      	b.n	8006790 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80066f4:	4b28      	ldr	r3, [pc, #160]	; (8006798 <USER_SPI_read+0xc4>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <USER_SPI_read+0x32>
 8006702:	2303      	movs	r3, #3
 8006704:	e044      	b.n	8006790 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006706:	4b25      	ldr	r3, [pc, #148]	; (800679c <USER_SPI_read+0xc8>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	f003 0308 	and.w	r3, r3, #8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <USER_SPI_read+0x44>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	025b      	lsls	r3, r3, #9
 8006716:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d111      	bne.n	8006742 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	2011      	movs	r0, #17
 8006722:	f7ff fe66 	bl	80063f2 <send_cmd>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d129      	bne.n	8006780 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800672c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006730:	68b8      	ldr	r0, [r7, #8]
 8006732:	f7ff fe03 	bl	800633c <rcvr_datablock>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d021      	beq.n	8006780 <USER_SPI_read+0xac>
			count = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	e01e      	b.n	8006780 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006742:	6879      	ldr	r1, [r7, #4]
 8006744:	2012      	movs	r0, #18
 8006746:	f7ff fe54 	bl	80063f2 <send_cmd>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d117      	bne.n	8006780 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006754:	68b8      	ldr	r0, [r7, #8]
 8006756:	f7ff fdf1 	bl	800633c <rcvr_datablock>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00a      	beq.n	8006776 <USER_SPI_read+0xa2>
				buff += 512;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006766:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	3b01      	subs	r3, #1
 800676c:	603b      	str	r3, [r7, #0]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1ed      	bne.n	8006750 <USER_SPI_read+0x7c>
 8006774:	e000      	b.n	8006778 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006776:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006778:	2100      	movs	r1, #0
 800677a:	200c      	movs	r0, #12
 800677c:	f7ff fe39 	bl	80063f2 <send_cmd>
		}
	}
	despiselect();
 8006780:	f7ff fdb4 	bl	80062ec <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf14      	ite	ne
 800678a:	2301      	movne	r3, #1
 800678c:	2300      	moveq	r3, #0
 800678e:	b2db      	uxtb	r3, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20000020 	.word	0x20000020
 800679c:	20013334 	.word	0x20013334

080067a0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	607a      	str	r2, [r7, #4]
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	4603      	mov	r3, r0
 80067ae:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <USER_SPI_write+0x1c>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <USER_SPI_write+0x20>
 80067bc:	2304      	movs	r3, #4
 80067be:	e063      	b.n	8006888 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80067c0:	4b33      	ldr	r3, [pc, #204]	; (8006890 <USER_SPI_write+0xf0>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <USER_SPI_write+0x32>
 80067ce:	2303      	movs	r3, #3
 80067d0:	e05a      	b.n	8006888 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80067d2:	4b2f      	ldr	r3, [pc, #188]	; (8006890 <USER_SPI_write+0xf0>)
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <USER_SPI_write+0x44>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e051      	b.n	8006888 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80067e4:	4b2b      	ldr	r3, [pc, #172]	; (8006894 <USER_SPI_write+0xf4>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d102      	bne.n	80067f6 <USER_SPI_write+0x56>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	025b      	lsls	r3, r3, #9
 80067f4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d110      	bne.n	800681e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	2018      	movs	r0, #24
 8006800:	f7ff fdf7 	bl	80063f2 <send_cmd>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d136      	bne.n	8006878 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800680a:	21fe      	movs	r1, #254	; 0xfe
 800680c:	68b8      	ldr	r0, [r7, #8]
 800680e:	f7ff fdbe 	bl	800638e <xmit_datablock>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d02f      	beq.n	8006878 <USER_SPI_write+0xd8>
			count = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	e02c      	b.n	8006878 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800681e:	4b1d      	ldr	r3, [pc, #116]	; (8006894 <USER_SPI_write+0xf4>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	f003 0306 	and.w	r3, r3, #6
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <USER_SPI_write+0x92>
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	2097      	movs	r0, #151	; 0x97
 800682e:	f7ff fde0 	bl	80063f2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	2019      	movs	r0, #25
 8006836:	f7ff fddc 	bl	80063f2 <send_cmd>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d11b      	bne.n	8006878 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006840:	21fc      	movs	r1, #252	; 0xfc
 8006842:	68b8      	ldr	r0, [r7, #8]
 8006844:	f7ff fda3 	bl	800638e <xmit_datablock>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <USER_SPI_write+0xc4>
				buff += 512;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006854:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	3b01      	subs	r3, #1
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1ee      	bne.n	8006840 <USER_SPI_write+0xa0>
 8006862:	e000      	b.n	8006866 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006864:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006866:	21fd      	movs	r1, #253	; 0xfd
 8006868:	2000      	movs	r0, #0
 800686a:	f7ff fd90 	bl	800638e <xmit_datablock>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <USER_SPI_write+0xd8>
 8006874:	2301      	movs	r3, #1
 8006876:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006878:	f7ff fd38 	bl	80062ec <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	bf14      	ite	ne
 8006882:	2301      	movne	r3, #1
 8006884:	2300      	moveq	r3, #0
 8006886:	b2db      	uxtb	r3, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20000020 	.word	0x20000020
 8006894:	20013334 	.word	0x20013334

08006898 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08c      	sub	sp, #48	; 0x30
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	603a      	str	r2, [r7, #0]
 80068a2:	71fb      	strb	r3, [r7, #7]
 80068a4:	460b      	mov	r3, r1
 80068a6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80068a8:	79fb      	ldrb	r3, [r7, #7]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <USER_SPI_ioctl+0x1a>
 80068ae:	2304      	movs	r3, #4
 80068b0:	e15a      	b.n	8006b68 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80068b2:	4baf      	ldr	r3, [pc, #700]	; (8006b70 <USER_SPI_ioctl+0x2d8>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <USER_SPI_ioctl+0x2c>
 80068c0:	2303      	movs	r3, #3
 80068c2:	e151      	b.n	8006b68 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80068ca:	79bb      	ldrb	r3, [r7, #6]
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	f200 8136 	bhi.w	8006b3e <USER_SPI_ioctl+0x2a6>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <USER_SPI_ioctl+0x40>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	080068ed 	.word	0x080068ed
 80068dc:	08006901 	.word	0x08006901
 80068e0:	08006b3f 	.word	0x08006b3f
 80068e4:	080069ad 	.word	0x080069ad
 80068e8:	08006aa3 	.word	0x08006aa3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80068ec:	f7ff fd0c 	bl	8006308 <spiselect>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 8127 	beq.w	8006b46 <USER_SPI_ioctl+0x2ae>
 80068f8:	2300      	movs	r3, #0
 80068fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80068fe:	e122      	b.n	8006b46 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006900:	2100      	movs	r1, #0
 8006902:	2009      	movs	r0, #9
 8006904:	f7ff fd75 	bl	80063f2 <send_cmd>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	f040 811d 	bne.w	8006b4a <USER_SPI_ioctl+0x2b2>
 8006910:	f107 030c 	add.w	r3, r7, #12
 8006914:	2110      	movs	r1, #16
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fd10 	bl	800633c <rcvr_datablock>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 8113 	beq.w	8006b4a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006924:	7b3b      	ldrb	r3, [r7, #12]
 8006926:	099b      	lsrs	r3, r3, #6
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	d111      	bne.n	8006952 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800692e:	7d7b      	ldrb	r3, [r7, #21]
 8006930:	461a      	mov	r2, r3
 8006932:	7d3b      	ldrb	r3, [r7, #20]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	4413      	add	r3, r2
 8006938:	461a      	mov	r2, r3
 800693a:	7cfb      	ldrb	r3, [r7, #19]
 800693c:	041b      	lsls	r3, r3, #16
 800693e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006942:	4413      	add	r3, r2
 8006944:	3301      	adds	r3, #1
 8006946:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	029a      	lsls	r2, r3, #10
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e028      	b.n	80069a4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006952:	7c7b      	ldrb	r3, [r7, #17]
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	b2da      	uxtb	r2, r3
 800695a:	7dbb      	ldrb	r3, [r7, #22]
 800695c:	09db      	lsrs	r3, r3, #7
 800695e:	b2db      	uxtb	r3, r3
 8006960:	4413      	add	r3, r2
 8006962:	b2da      	uxtb	r2, r3
 8006964:	7d7b      	ldrb	r3, [r7, #21]
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0306 	and.w	r3, r3, #6
 800696e:	b2db      	uxtb	r3, r3
 8006970:	4413      	add	r3, r2
 8006972:	b2db      	uxtb	r3, r3
 8006974:	3302      	adds	r3, #2
 8006976:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800697a:	7d3b      	ldrb	r3, [r7, #20]
 800697c:	099b      	lsrs	r3, r3, #6
 800697e:	b2db      	uxtb	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	7cfb      	ldrb	r3, [r7, #19]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	441a      	add	r2, r3
 8006988:	7cbb      	ldrb	r3, [r7, #18]
 800698a:	029b      	lsls	r3, r3, #10
 800698c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006990:	4413      	add	r3, r2
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006996:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800699a:	3b09      	subs	r3, #9
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	409a      	lsls	r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80069aa:	e0ce      	b.n	8006b4a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80069ac:	4b71      	ldr	r3, [pc, #452]	; (8006b74 <USER_SPI_ioctl+0x2dc>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d031      	beq.n	8006a1c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80069b8:	2100      	movs	r1, #0
 80069ba:	208d      	movs	r0, #141	; 0x8d
 80069bc:	f7ff fd19 	bl	80063f2 <send_cmd>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 80c3 	bne.w	8006b4e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80069c8:	20ff      	movs	r0, #255	; 0xff
 80069ca:	f7ff fc1f 	bl	800620c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80069ce:	f107 030c 	add.w	r3, r7, #12
 80069d2:	2110      	movs	r1, #16
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff fcb1 	bl	800633c <rcvr_datablock>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 80b6 	beq.w	8006b4e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80069e2:	2330      	movs	r3, #48	; 0x30
 80069e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80069e8:	e007      	b.n	80069fa <USER_SPI_ioctl+0x162>
 80069ea:	20ff      	movs	r0, #255	; 0xff
 80069ec:	f7ff fc0e 	bl	800620c <xchg_spi>
 80069f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069f4:	3b01      	subs	r3, #1
 80069f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80069fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f3      	bne.n	80069ea <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006a02:	7dbb      	ldrb	r3, [r7, #22]
 8006a04:	091b      	lsrs	r3, r3, #4
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	461a      	mov	r2, r3
 8006a0a:	2310      	movs	r3, #16
 8006a0c:	fa03 f202 	lsl.w	r2, r3, r2
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006a1a:	e098      	b.n	8006b4e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	2009      	movs	r0, #9
 8006a20:	f7ff fce7 	bl	80063f2 <send_cmd>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f040 8091 	bne.w	8006b4e <USER_SPI_ioctl+0x2b6>
 8006a2c:	f107 030c 	add.w	r3, r7, #12
 8006a30:	2110      	movs	r1, #16
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fc82 	bl	800633c <rcvr_datablock>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 8087 	beq.w	8006b4e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006a40:	4b4c      	ldr	r3, [pc, #304]	; (8006b74 <USER_SPI_ioctl+0x2dc>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d012      	beq.n	8006a72 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006a4c:	7dbb      	ldrb	r3, [r7, #22]
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006a54:	7dfa      	ldrb	r2, [r7, #23]
 8006a56:	09d2      	lsrs	r2, r2, #7
 8006a58:	b2d2      	uxtb	r2, r2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	7e7b      	ldrb	r3, [r7, #25]
 8006a60:	099b      	lsrs	r3, r3, #6
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	3b01      	subs	r3, #1
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	e013      	b.n	8006a9a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006a72:	7dbb      	ldrb	r3, [r7, #22]
 8006a74:	109b      	asrs	r3, r3, #2
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	7dfa      	ldrb	r2, [r7, #23]
 8006a80:	00d2      	lsls	r2, r2, #3
 8006a82:	f002 0218 	and.w	r2, r2, #24
 8006a86:	7df9      	ldrb	r1, [r7, #23]
 8006a88:	0949      	lsrs	r1, r1, #5
 8006a8a:	b2c9      	uxtb	r1, r1
 8006a8c:	440a      	add	r2, r1
 8006a8e:	3201      	adds	r2, #1
 8006a90:	fb02 f303 	mul.w	r3, r2, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006aa0:	e055      	b.n	8006b4e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006aa2:	4b34      	ldr	r3, [pc, #208]	; (8006b74 <USER_SPI_ioctl+0x2dc>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f003 0306 	and.w	r3, r3, #6
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d051      	beq.n	8006b52 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006aae:	f107 020c 	add.w	r2, r7, #12
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	210b      	movs	r1, #11
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7ff feee 	bl	8006898 <USER_SPI_ioctl>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d149      	bne.n	8006b56 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006ac2:	7b3b      	ldrb	r3, [r7, #12]
 8006ac4:	099b      	lsrs	r3, r3, #6
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d104      	bne.n	8006ad6 <USER_SPI_ioctl+0x23e>
 8006acc:	7dbb      	ldrb	r3, [r7, #22]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d041      	beq.n	8006b5a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	623b      	str	r3, [r7, #32]
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ae0:	6a3b      	ldr	r3, [r7, #32]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006ae6:	4b23      	ldr	r3, [pc, #140]	; (8006b74 <USER_SPI_ioctl+0x2dc>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d105      	bne.n	8006afe <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	025b      	lsls	r3, r3, #9
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	025b      	lsls	r3, r3, #9
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006afe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b00:	2020      	movs	r0, #32
 8006b02:	f7ff fc76 	bl	80063f2 <send_cmd>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d128      	bne.n	8006b5e <USER_SPI_ioctl+0x2c6>
 8006b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b0e:	2021      	movs	r0, #33	; 0x21
 8006b10:	f7ff fc6f 	bl	80063f2 <send_cmd>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d121      	bne.n	8006b5e <USER_SPI_ioctl+0x2c6>
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	2026      	movs	r0, #38	; 0x26
 8006b1e:	f7ff fc68 	bl	80063f2 <send_cmd>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d11a      	bne.n	8006b5e <USER_SPI_ioctl+0x2c6>
 8006b28:	f247 5030 	movw	r0, #30000	; 0x7530
 8006b2c:	f7ff fbbb 	bl	80062a6 <wait_ready>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d013      	beq.n	8006b5e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006b3c:	e00f      	b.n	8006b5e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006b3e:	2304      	movs	r3, #4
 8006b40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b44:	e00c      	b.n	8006b60 <USER_SPI_ioctl+0x2c8>
		break;
 8006b46:	bf00      	nop
 8006b48:	e00a      	b.n	8006b60 <USER_SPI_ioctl+0x2c8>
		break;
 8006b4a:	bf00      	nop
 8006b4c:	e008      	b.n	8006b60 <USER_SPI_ioctl+0x2c8>
		break;
 8006b4e:	bf00      	nop
 8006b50:	e006      	b.n	8006b60 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006b52:	bf00      	nop
 8006b54:	e004      	b.n	8006b60 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006b56:	bf00      	nop
 8006b58:	e002      	b.n	8006b60 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006b5a:	bf00      	nop
 8006b5c:	e000      	b.n	8006b60 <USER_SPI_ioctl+0x2c8>
		break;
 8006b5e:	bf00      	nop
	}

	despiselect();
 8006b60:	f7ff fbc4 	bl	80062ec <despiselect>

	return res;
 8006b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3730      	adds	r7, #48	; 0x30
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000020 	.word	0x20000020
 8006b74:	20013334 	.word	0x20013334

08006b78 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b82:	79fb      	ldrb	r3, [r7, #7]
 8006b84:	4a08      	ldr	r2, [pc, #32]	; (8006ba8 <disk_status+0x30>)
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	79fa      	ldrb	r2, [r7, #7]
 8006b90:	4905      	ldr	r1, [pc, #20]	; (8006ba8 <disk_status+0x30>)
 8006b92:	440a      	add	r2, r1
 8006b94:	7a12      	ldrb	r2, [r2, #8]
 8006b96:	4610      	mov	r0, r2
 8006b98:	4798      	blx	r3
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20013368 	.word	0x20013368

08006bac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	4a0d      	ldr	r2, [pc, #52]	; (8006bf4 <disk_initialize+0x48>)
 8006bbe:	5cd3      	ldrb	r3, [r2, r3]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d111      	bne.n	8006be8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006bc4:	79fb      	ldrb	r3, [r7, #7]
 8006bc6:	4a0b      	ldr	r2, [pc, #44]	; (8006bf4 <disk_initialize+0x48>)
 8006bc8:	2101      	movs	r1, #1
 8006bca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <disk_initialize+0x48>)
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	79fa      	ldrb	r2, [r7, #7]
 8006bda:	4906      	ldr	r1, [pc, #24]	; (8006bf4 <disk_initialize+0x48>)
 8006bdc:	440a      	add	r2, r1
 8006bde:	7a12      	ldrb	r2, [r2, #8]
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20013368 	.word	0x20013368

08006bf8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006bf8:	b590      	push	{r4, r7, lr}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60b9      	str	r1, [r7, #8]
 8006c00:	607a      	str	r2, [r7, #4]
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	4603      	mov	r3, r0
 8006c06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	4a0a      	ldr	r2, [pc, #40]	; (8006c34 <disk_read+0x3c>)
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	689c      	ldr	r4, [r3, #8]
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	4a07      	ldr	r2, [pc, #28]	; (8006c34 <disk_read+0x3c>)
 8006c18:	4413      	add	r3, r2
 8006c1a:	7a18      	ldrb	r0, [r3, #8]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	68b9      	ldr	r1, [r7, #8]
 8006c22:	47a0      	blx	r4
 8006c24:	4603      	mov	r3, r0
 8006c26:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd90      	pop	{r4, r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20013368 	.word	0x20013368

08006c38 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	4a0a      	ldr	r2, [pc, #40]	; (8006c74 <disk_write+0x3c>)
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	68dc      	ldr	r4, [r3, #12]
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
 8006c56:	4a07      	ldr	r2, [pc, #28]	; (8006c74 <disk_write+0x3c>)
 8006c58:	4413      	add	r3, r2
 8006c5a:	7a18      	ldrb	r0, [r3, #8]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	47a0      	blx	r4
 8006c64:	4603      	mov	r3, r0
 8006c66:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd90      	pop	{r4, r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20013368 	.word	0x20013368

08006c78 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	603a      	str	r2, [r7, #0]
 8006c82:	71fb      	strb	r3, [r7, #7]
 8006c84:	460b      	mov	r3, r1
 8006c86:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <disk_ioctl+0x38>)
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	79fa      	ldrb	r2, [r7, #7]
 8006c96:	4906      	ldr	r1, [pc, #24]	; (8006cb0 <disk_ioctl+0x38>)
 8006c98:	440a      	add	r2, r1
 8006c9a:	7a10      	ldrb	r0, [r2, #8]
 8006c9c:	79b9      	ldrb	r1, [r7, #6]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	4798      	blx	r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73fb      	strb	r3, [r7, #15]
  return res;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20013368 	.word	0x20013368

08006cb4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006cc4:	89fb      	ldrh	r3, [r7, #14]
 8006cc6:	021b      	lsls	r3, r3, #8
 8006cc8:	b21a      	sxth	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b21b      	sxth	r3, r3
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	b21b      	sxth	r3, r3
 8006cd4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006cd6:	89fb      	ldrh	r3, [r7, #14]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3303      	adds	r3, #3
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	3202      	adds	r2, #2
 8006cfc:	7812      	ldrb	r2, [r2, #0]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	021b      	lsls	r3, r3, #8
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	3201      	adds	r2, #1
 8006d0a:	7812      	ldrb	r2, [r2, #0]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	7812      	ldrb	r2, [r2, #0]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
	return rv;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	887a      	ldrh	r2, [r7, #2]
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	887b      	ldrh	r3, [r7, #2]
 8006d44:	0a1b      	lsrs	r3, r3, #8
 8006d46:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	607a      	str	r2, [r7, #4]
 8006d4e:	887a      	ldrh	r2, [r7, #2]
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	0a1b      	lsrs	r3, r3, #8
 8006d7a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	b2d2      	uxtb	r2, r2
 8006d86:	701a      	strb	r2, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	607a      	str	r2, [r7, #4]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	0a1b      	lsrs	r3, r3, #8
 8006d9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	607a      	str	r2, [r7, #4]
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00d      	beq.n	8006dee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	1c53      	adds	r3, r2, #1
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	1c59      	adds	r1, r3, #1
 8006ddc:	6179      	str	r1, [r7, #20]
 8006dde:	7812      	ldrb	r2, [r2, #0]
 8006de0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	607b      	str	r3, [r7, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f1      	bne.n	8006dd2 <mem_cpy+0x1a>
	}
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006dfa:	b480      	push	{r7}
 8006dfc:	b087      	sub	sp, #28
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	617a      	str	r2, [r7, #20]
 8006e10:	68ba      	ldr	r2, [r7, #8]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	607b      	str	r3, [r7, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f3      	bne.n	8006e0a <mem_set+0x10>
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	371c      	adds	r7, #28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e30:	b480      	push	{r7}
 8006e32:	b089      	sub	sp, #36	; 0x24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	61fb      	str	r3, [r7, #28]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006e44:	2300      	movs	r3, #0
 8006e46:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	61fa      	str	r2, [r7, #28]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	4619      	mov	r1, r3
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	1c5a      	adds	r2, r3, #1
 8006e56:	61ba      	str	r2, [r7, #24]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	1acb      	subs	r3, r1, r3
 8006e5c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <mem_cmp+0x40>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0eb      	beq.n	8006e48 <mem_cmp+0x18>

	return r;
 8006e70:	697b      	ldr	r3, [r7, #20]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3724      	adds	r7, #36	; 0x24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
 8006e86:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006e88:	e002      	b.n	8006e90 <chk_chr+0x12>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	607b      	str	r3, [r7, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d005      	beq.n	8006ea4 <chk_chr+0x26>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d1f2      	bne.n	8006e8a <chk_chr+0xc>
	return *str;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60bb      	str	r3, [r7, #8]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	e029      	b.n	8006f1c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006ec8:	4a27      	ldr	r2, [pc, #156]	; (8006f68 <chk_lock+0xb4>)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	4413      	add	r3, r2
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d01d      	beq.n	8006f12 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ed6:	4a24      	ldr	r2, [pc, #144]	; (8006f68 <chk_lock+0xb4>)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	4413      	add	r3, r2
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d116      	bne.n	8006f16 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006ee8:	4a1f      	ldr	r2, [pc, #124]	; (8006f68 <chk_lock+0xb4>)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	011b      	lsls	r3, r3, #4
 8006eee:	4413      	add	r3, r2
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d10c      	bne.n	8006f16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006efc:	4a1a      	ldr	r2, [pc, #104]	; (8006f68 <chk_lock+0xb4>)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	011b      	lsls	r3, r3, #4
 8006f02:	4413      	add	r3, r2
 8006f04:	3308      	adds	r3, #8
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d102      	bne.n	8006f16 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f10:	e007      	b.n	8006f22 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006f12:	2301      	movs	r3, #1
 8006f14:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d9d2      	bls.n	8006ec8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d109      	bne.n	8006f3c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <chk_lock+0x80>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d101      	bne.n	8006f38 <chk_lock+0x84>
 8006f34:	2300      	movs	r3, #0
 8006f36:	e010      	b.n	8006f5a <chk_lock+0xa6>
 8006f38:	2312      	movs	r3, #18
 8006f3a:	e00e      	b.n	8006f5a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d108      	bne.n	8006f54 <chk_lock+0xa0>
 8006f42:	4a09      	ldr	r2, [pc, #36]	; (8006f68 <chk_lock+0xb4>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	4413      	add	r3, r2
 8006f4a:	330c      	adds	r3, #12
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f52:	d101      	bne.n	8006f58 <chk_lock+0xa4>
 8006f54:	2310      	movs	r3, #16
 8006f56:	e000      	b.n	8006f5a <chk_lock+0xa6>
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	20013348 	.word	0x20013348

08006f6c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f72:	2300      	movs	r3, #0
 8006f74:	607b      	str	r3, [r7, #4]
 8006f76:	e002      	b.n	8006f7e <enq_lock+0x12>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	607b      	str	r3, [r7, #4]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d806      	bhi.n	8006f92 <enq_lock+0x26>
 8006f84:	4a09      	ldr	r2, [pc, #36]	; (8006fac <enq_lock+0x40>)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	011b      	lsls	r3, r3, #4
 8006f8a:	4413      	add	r3, r2
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f2      	bne.n	8006f78 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	bf14      	ite	ne
 8006f98:	2301      	movne	r3, #1
 8006f9a:	2300      	moveq	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20013348 	.word	0x20013348

08006fb0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e01f      	b.n	8007000 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006fc0:	4a41      	ldr	r2, [pc, #260]	; (80070c8 <inc_lock+0x118>)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	011b      	lsls	r3, r3, #4
 8006fc6:	4413      	add	r3, r2
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d113      	bne.n	8006ffa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006fd2:	4a3d      	ldr	r2, [pc, #244]	; (80070c8 <inc_lock+0x118>)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	4413      	add	r3, r2
 8006fda:	3304      	adds	r3, #4
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d109      	bne.n	8006ffa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006fe6:	4a38      	ldr	r2, [pc, #224]	; (80070c8 <inc_lock+0x118>)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	4413      	add	r3, r2
 8006fee:	3308      	adds	r3, #8
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d006      	beq.n	8007008 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d9dc      	bls.n	8006fc0 <inc_lock+0x10>
 8007006:	e000      	b.n	800700a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007008:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d132      	bne.n	8007076 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	e002      	b.n	800701c <inc_lock+0x6c>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3301      	adds	r3, #1
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d806      	bhi.n	8007030 <inc_lock+0x80>
 8007022:	4a29      	ldr	r2, [pc, #164]	; (80070c8 <inc_lock+0x118>)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	4413      	add	r3, r2
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1f2      	bne.n	8007016 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d101      	bne.n	800703a <inc_lock+0x8a>
 8007036:	2300      	movs	r3, #0
 8007038:	e040      	b.n	80070bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4922      	ldr	r1, [pc, #136]	; (80070c8 <inc_lock+0x118>)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	440b      	add	r3, r1
 8007046:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	491e      	ldr	r1, [pc, #120]	; (80070c8 <inc_lock+0x118>)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	440b      	add	r3, r1
 8007054:	3304      	adds	r3, #4
 8007056:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	695a      	ldr	r2, [r3, #20]
 800705c:	491a      	ldr	r1, [pc, #104]	; (80070c8 <inc_lock+0x118>)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	440b      	add	r3, r1
 8007064:	3308      	adds	r3, #8
 8007066:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007068:	4a17      	ldr	r2, [pc, #92]	; (80070c8 <inc_lock+0x118>)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	011b      	lsls	r3, r3, #4
 800706e:	4413      	add	r3, r2
 8007070:	330c      	adds	r3, #12
 8007072:	2200      	movs	r2, #0
 8007074:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d009      	beq.n	8007090 <inc_lock+0xe0>
 800707c:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <inc_lock+0x118>)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	4413      	add	r3, r2
 8007084:	330c      	adds	r3, #12
 8007086:	881b      	ldrh	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <inc_lock+0xe0>
 800708c:	2300      	movs	r3, #0
 800708e:	e015      	b.n	80070bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d108      	bne.n	80070a8 <inc_lock+0xf8>
 8007096:	4a0c      	ldr	r2, [pc, #48]	; (80070c8 <inc_lock+0x118>)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	4413      	add	r3, r2
 800709e:	330c      	adds	r3, #12
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	e001      	b.n	80070ac <inc_lock+0xfc>
 80070a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ac:	4906      	ldr	r1, [pc, #24]	; (80070c8 <inc_lock+0x118>)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	440b      	add	r3, r1
 80070b4:	330c      	adds	r3, #12
 80070b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3714      	adds	r7, #20
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	20013348 	.word	0x20013348

080070cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	607b      	str	r3, [r7, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d825      	bhi.n	800712c <dec_lock+0x60>
		n = Files[i].ctr;
 80070e0:	4a17      	ldr	r2, [pc, #92]	; (8007140 <dec_lock+0x74>)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	4413      	add	r3, r2
 80070e8:	330c      	adds	r3, #12
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80070ee:	89fb      	ldrh	r3, [r7, #14]
 80070f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f4:	d101      	bne.n	80070fa <dec_lock+0x2e>
 80070f6:	2300      	movs	r3, #0
 80070f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80070fa:	89fb      	ldrh	r3, [r7, #14]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <dec_lock+0x3a>
 8007100:	89fb      	ldrh	r3, [r7, #14]
 8007102:	3b01      	subs	r3, #1
 8007104:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007106:	4a0e      	ldr	r2, [pc, #56]	; (8007140 <dec_lock+0x74>)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	4413      	add	r3, r2
 800710e:	330c      	adds	r3, #12
 8007110:	89fa      	ldrh	r2, [r7, #14]
 8007112:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007114:	89fb      	ldrh	r3, [r7, #14]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <dec_lock+0x5a>
 800711a:	4a09      	ldr	r2, [pc, #36]	; (8007140 <dec_lock+0x74>)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	4413      	add	r3, r2
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	737b      	strb	r3, [r7, #13]
 800712a:	e001      	b.n	8007130 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800712c:	2302      	movs	r3, #2
 800712e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007130:	7b7b      	ldrb	r3, [r7, #13]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20013348 	.word	0x20013348

08007144 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e010      	b.n	8007174 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007152:	4a0d      	ldr	r2, [pc, #52]	; (8007188 <clear_lock+0x44>)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	4413      	add	r3, r2
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	429a      	cmp	r2, r3
 8007160:	d105      	bne.n	800716e <clear_lock+0x2a>
 8007162:	4a09      	ldr	r2, [pc, #36]	; (8007188 <clear_lock+0x44>)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	4413      	add	r3, r2
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d9eb      	bls.n	8007152 <clear_lock+0xe>
	}
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	20013348 	.word	0x20013348

0800718c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	78db      	ldrb	r3, [r3, #3]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d034      	beq.n	800720a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	7858      	ldrb	r0, [r3, #1]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071b0:	2301      	movs	r3, #1
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	f7ff fd40 	bl	8006c38 <disk_write>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80071be:	2301      	movs	r3, #1
 80071c0:	73fb      	strb	r3, [r7, #15]
 80071c2:	e022      	b.n	800720a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	1ad2      	subs	r2, r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d217      	bcs.n	800720a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	789b      	ldrb	r3, [r3, #2]
 80071de:	613b      	str	r3, [r7, #16]
 80071e0:	e010      	b.n	8007204 <sync_window+0x78>
					wsect += fs->fsize;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4413      	add	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	7858      	ldrb	r0, [r3, #1]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071f6:	2301      	movs	r3, #1
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	f7ff fd1d 	bl	8006c38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	3b01      	subs	r3, #1
 8007202:	613b      	str	r3, [r7, #16]
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d8eb      	bhi.n	80071e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800720a:	7bfb      	ldrb	r3, [r7, #15]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d01b      	beq.n	8007264 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7ff ffad 	bl	800718c <sync_window>
 8007232:	4603      	mov	r3, r0
 8007234:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d113      	bne.n	8007264 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	7858      	ldrb	r0, [r3, #1]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007246:	2301      	movs	r3, #1
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	f7ff fcd5 	bl	8006bf8 <disk_read>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d004      	beq.n	800725e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007254:	f04f 33ff 	mov.w	r3, #4294967295
 8007258:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800725a:	2301      	movs	r3, #1
 800725c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	683a      	ldr	r2, [r7, #0]
 8007262:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007264:	7bfb      	ldrb	r3, [r7, #15]
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff ff87 	bl	800718c <sync_window>
 800727e:	4603      	mov	r3, r0
 8007280:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d158      	bne.n	800733a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	2b03      	cmp	r3, #3
 800728e:	d148      	bne.n	8007322 <sync_fs+0xb2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	791b      	ldrb	r3, [r3, #4]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d144      	bne.n	8007322 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3330      	adds	r3, #48	; 0x30
 800729c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff fda9 	bl	8006dfa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	3330      	adds	r3, #48	; 0x30
 80072ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072b0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fd38 	bl	8006d2a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3330      	adds	r3, #48	; 0x30
 80072be:	4921      	ldr	r1, [pc, #132]	; (8007344 <sync_fs+0xd4>)
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7ff fd4d 	bl	8006d60 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3330      	adds	r3, #48	; 0x30
 80072ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80072ce:	491e      	ldr	r1, [pc, #120]	; (8007348 <sync_fs+0xd8>)
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff fd45 	bl	8006d60 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	3330      	adds	r3, #48	; 0x30
 80072da:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	4619      	mov	r1, r3
 80072e4:	4610      	mov	r0, r2
 80072e6:	f7ff fd3b 	bl	8006d60 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3330      	adds	r3, #48	; 0x30
 80072ee:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	4619      	mov	r1, r3
 80072f8:	4610      	mov	r0, r2
 80072fa:	f7ff fd31 	bl	8006d60 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7858      	ldrb	r0, [r3, #1]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007316:	2301      	movs	r3, #1
 8007318:	f7ff fc8e 	bl	8006c38 <disk_write>
			fs->fsi_flag = 0;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	2200      	movs	r2, #0
 8007328:	2100      	movs	r1, #0
 800732a:	4618      	mov	r0, r3
 800732c:	f7ff fca4 	bl	8006c78 <disk_ioctl>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <sync_fs+0xca>
 8007336:	2301      	movs	r3, #1
 8007338:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800733a:	7bfb      	ldrb	r3, [r7, #15]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	41615252 	.word	0x41615252
 8007348:	61417272 	.word	0x61417272

0800734c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	3b02      	subs	r3, #2
 800735a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	3b02      	subs	r3, #2
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d301      	bcc.n	800736c <clust2sect+0x20>
 8007368:	2300      	movs	r3, #0
 800736a:	e008      	b.n	800737e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	895b      	ldrh	r3, [r3, #10]
 8007370:	461a      	mov	r2, r3
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	fb03 f202 	mul.w	r2, r3, r2
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	4413      	add	r3, r2
}
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d904      	bls.n	80073aa <get_fat+0x20>
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d302      	bcc.n	80073b0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80073aa:	2301      	movs	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	e08f      	b.n	80074d0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80073b0:	f04f 33ff 	mov.w	r3, #4294967295
 80073b4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d062      	beq.n	8007484 <get_fat+0xfa>
 80073be:	2b03      	cmp	r3, #3
 80073c0:	dc7c      	bgt.n	80074bc <get_fat+0x132>
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d002      	beq.n	80073cc <get_fat+0x42>
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d042      	beq.n	8007450 <get_fat+0xc6>
 80073ca:	e077      	b.n	80074bc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6a1a      	ldr	r2, [r3, #32]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	0a5b      	lsrs	r3, r3, #9
 80073e2:	4413      	add	r3, r2
 80073e4:	4619      	mov	r1, r3
 80073e6:	6938      	ldr	r0, [r7, #16]
 80073e8:	f7ff ff14 	bl	8007214 <move_window>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d167      	bne.n	80074c2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	60fa      	str	r2, [r7, #12]
 80073f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4413      	add	r3, r2
 8007400:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007404:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	6a1a      	ldr	r2, [r3, #32]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	0a5b      	lsrs	r3, r3, #9
 800740e:	4413      	add	r3, r2
 8007410:	4619      	mov	r1, r3
 8007412:	6938      	ldr	r0, [r7, #16]
 8007414:	f7ff fefe 	bl	8007214 <move_window>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d153      	bne.n	80074c6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	4413      	add	r3, r2
 8007428:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	461a      	mov	r2, r3
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4313      	orrs	r3, r2
 8007434:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <get_fat+0xbc>
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	091b      	lsrs	r3, r3, #4
 8007444:	e002      	b.n	800744c <get_fat+0xc2>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800744c:	617b      	str	r3, [r7, #20]
			break;
 800744e:	e03f      	b.n	80074d0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	6a1a      	ldr	r2, [r3, #32]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	0a1b      	lsrs	r3, r3, #8
 8007458:	4413      	add	r3, r2
 800745a:	4619      	mov	r1, r3
 800745c:	6938      	ldr	r0, [r7, #16]
 800745e:	f7ff fed9 	bl	8007214 <move_window>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d130      	bne.n	80074ca <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007476:	4413      	add	r3, r2
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff fc1b 	bl	8006cb4 <ld_word>
 800747e:	4603      	mov	r3, r0
 8007480:	617b      	str	r3, [r7, #20]
			break;
 8007482:	e025      	b.n	80074d0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6a1a      	ldr	r2, [r3, #32]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	09db      	lsrs	r3, r3, #7
 800748c:	4413      	add	r3, r2
 800748e:	4619      	mov	r1, r3
 8007490:	6938      	ldr	r0, [r7, #16]
 8007492:	f7ff febf 	bl	8007214 <move_window>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d118      	bne.n	80074ce <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80074aa:	4413      	add	r3, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff fc19 	bl	8006ce4 <ld_dword>
 80074b2:	4603      	mov	r3, r0
 80074b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074b8:	617b      	str	r3, [r7, #20]
			break;
 80074ba:	e009      	b.n	80074d0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80074bc:	2301      	movs	r3, #1
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	e006      	b.n	80074d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074c2:	bf00      	nop
 80074c4:	e004      	b.n	80074d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074c6:	bf00      	nop
 80074c8:	e002      	b.n	80074d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074ca:	bf00      	nop
 80074cc:	e000      	b.n	80074d0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074ce:	bf00      	nop
		}
	}

	return val;
 80074d0:	697b      	ldr	r3, [r7, #20]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80074da:	b590      	push	{r4, r7, lr}
 80074dc:	b089      	sub	sp, #36	; 0x24
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80074e6:	2302      	movs	r3, #2
 80074e8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	f240 80d2 	bls.w	8007696 <put_fat+0x1bc>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	f080 80cc 	bcs.w	8007696 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b03      	cmp	r3, #3
 8007504:	f000 8096 	beq.w	8007634 <put_fat+0x15a>
 8007508:	2b03      	cmp	r3, #3
 800750a:	f300 80cd 	bgt.w	80076a8 <put_fat+0x1ce>
 800750e:	2b01      	cmp	r3, #1
 8007510:	d002      	beq.n	8007518 <put_fat+0x3e>
 8007512:	2b02      	cmp	r3, #2
 8007514:	d06e      	beq.n	80075f4 <put_fat+0x11a>
 8007516:	e0c7      	b.n	80076a8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	4413      	add	r3, r2
 8007524:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6a1a      	ldr	r2, [r3, #32]
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	0a5b      	lsrs	r3, r3, #9
 800752e:	4413      	add	r3, r2
 8007530:	4619      	mov	r1, r3
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff fe6e 	bl	8007214 <move_window>
 8007538:	4603      	mov	r3, r0
 800753a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800753c:	7ffb      	ldrb	r3, [r7, #31]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f040 80ab 	bne.w	800769a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	1c59      	adds	r1, r3, #1
 800754e:	61b9      	str	r1, [r7, #24]
 8007550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007554:	4413      	add	r3, r2
 8007556:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00d      	beq.n	800757e <put_fat+0xa4>
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b25b      	sxtb	r3, r3
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	b25a      	sxtb	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	b25b      	sxtb	r3, r3
 8007576:	4313      	orrs	r3, r2
 8007578:	b25b      	sxtb	r3, r3
 800757a:	b2db      	uxtb	r3, r3
 800757c:	e001      	b.n	8007582 <put_fat+0xa8>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2201      	movs	r2, #1
 800758a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a1a      	ldr	r2, [r3, #32]
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	0a5b      	lsrs	r3, r3, #9
 8007594:	4413      	add	r3, r2
 8007596:	4619      	mov	r1, r3
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7ff fe3b 	bl	8007214 <move_window>
 800759e:	4603      	mov	r3, r0
 80075a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075a2:	7ffb      	ldrb	r3, [r7, #31]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d17a      	bne.n	800769e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b4:	4413      	add	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <put_fat+0xf0>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	091b      	lsrs	r3, r3, #4
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	e00e      	b.n	80075e8 <put_fat+0x10e>
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b25b      	sxtb	r3, r3
 80075d0:	f023 030f 	bic.w	r3, r3, #15
 80075d4:	b25a      	sxtb	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	0a1b      	lsrs	r3, r3, #8
 80075da:	b25b      	sxtb	r3, r3
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	b25b      	sxtb	r3, r3
 80075e2:	4313      	orrs	r3, r2
 80075e4:	b25b      	sxtb	r3, r3
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	70da      	strb	r2, [r3, #3]
			break;
 80075f2:	e059      	b.n	80076a8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a1a      	ldr	r2, [r3, #32]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	4413      	add	r3, r2
 80075fe:	4619      	mov	r1, r3
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f7ff fe07 	bl	8007214 <move_window>
 8007606:	4603      	mov	r3, r0
 8007608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800760a:	7ffb      	ldrb	r3, [r7, #31]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d148      	bne.n	80076a2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800761e:	4413      	add	r3, r2
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	b292      	uxth	r2, r2
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f7ff fb7f 	bl	8006d2a <st_word>
			fs->wflag = 1;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	70da      	strb	r2, [r3, #3]
			break;
 8007632:	e039      	b.n	80076a8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a1a      	ldr	r2, [r3, #32]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	09db      	lsrs	r3, r3, #7
 800763c:	4413      	add	r3, r2
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff fde7 	bl	8007214 <move_window>
 8007646:	4603      	mov	r3, r0
 8007648:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800764a:	7ffb      	ldrb	r3, [r7, #31]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d12a      	bne.n	80076a6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007664:	4413      	add	r3, r2
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fb3c 	bl	8006ce4 <ld_dword>
 800766c:	4603      	mov	r3, r0
 800766e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007672:	4323      	orrs	r3, r4
 8007674:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007684:	4413      	add	r3, r2
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	4618      	mov	r0, r3
 800768a:	f7ff fb69 	bl	8006d60 <st_dword>
			fs->wflag = 1;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	70da      	strb	r2, [r3, #3]
			break;
 8007694:	e008      	b.n	80076a8 <put_fat+0x1ce>
		}
	}
 8007696:	bf00      	nop
 8007698:	e006      	b.n	80076a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800769a:	bf00      	nop
 800769c:	e004      	b.n	80076a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800769e:	bf00      	nop
 80076a0:	e002      	b.n	80076a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80076a2:	bf00      	nop
 80076a4:	e000      	b.n	80076a8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80076a6:	bf00      	nop
	return res;
 80076a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3724      	adds	r7, #36	; 0x24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd90      	pop	{r4, r7, pc}

080076b2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b088      	sub	sp, #32
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d904      	bls.n	80076d8 <remove_chain+0x26>
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d301      	bcc.n	80076dc <remove_chain+0x2a>
 80076d8:	2302      	movs	r3, #2
 80076da:	e04b      	b.n	8007774 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00c      	beq.n	80076fc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80076e2:	f04f 32ff 	mov.w	r2, #4294967295
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	69b8      	ldr	r0, [r7, #24]
 80076ea:	f7ff fef6 	bl	80074da <put_fat>
 80076ee:	4603      	mov	r3, r0
 80076f0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80076f2:	7ffb      	ldrb	r3, [r7, #31]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <remove_chain+0x4a>
 80076f8:	7ffb      	ldrb	r3, [r7, #31]
 80076fa:	e03b      	b.n	8007774 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f7ff fe43 	bl	800738a <get_fat>
 8007704:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d031      	beq.n	8007770 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <remove_chain+0x64>
 8007712:	2302      	movs	r3, #2
 8007714:	e02e      	b.n	8007774 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771c:	d101      	bne.n	8007722 <remove_chain+0x70>
 800771e:	2301      	movs	r3, #1
 8007720:	e028      	b.n	8007774 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007722:	2200      	movs	r2, #0
 8007724:	68b9      	ldr	r1, [r7, #8]
 8007726:	69b8      	ldr	r0, [r7, #24]
 8007728:	f7ff fed7 	bl	80074da <put_fat>
 800772c:	4603      	mov	r3, r0
 800772e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007730:	7ffb      	ldrb	r3, [r7, #31]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <remove_chain+0x88>
 8007736:	7ffb      	ldrb	r3, [r7, #31]
 8007738:	e01c      	b.n	8007774 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	3b02      	subs	r3, #2
 8007744:	429a      	cmp	r2, r3
 8007746:	d20b      	bcs.n	8007760 <remove_chain+0xae>
			fs->free_clst++;
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	1c5a      	adds	r2, r3, #1
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	791b      	ldrb	r3, [r3, #4]
 8007756:	f043 0301 	orr.w	r3, r3, #1
 800775a:	b2da      	uxtb	r2, r3
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	429a      	cmp	r2, r3
 800776c:	d3c6      	bcc.n	80076fc <remove_chain+0x4a>
 800776e:	e000      	b.n	8007772 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007770:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3720      	adds	r7, #32
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10d      	bne.n	80077ae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d004      	beq.n	80077a8 <create_chain+0x2c>
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d31b      	bcc.n	80077e0 <create_chain+0x64>
 80077a8:	2301      	movs	r3, #1
 80077aa:	61bb      	str	r3, [r7, #24]
 80077ac:	e018      	b.n	80077e0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff fdea 	bl	800738a <get_fat>
 80077b6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d801      	bhi.n	80077c2 <create_chain+0x46>
 80077be:	2301      	movs	r3, #1
 80077c0:	e070      	b.n	80078a4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c8:	d101      	bne.n	80077ce <create_chain+0x52>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	e06a      	b.n	80078a4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d201      	bcs.n	80077dc <create_chain+0x60>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	e063      	b.n	80078a4 <create_chain+0x128>
		scl = clst;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	3301      	adds	r3, #1
 80077e8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d307      	bcc.n	8007804 <create_chain+0x88>
				ncl = 2;
 80077f4:	2302      	movs	r3, #2
 80077f6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d901      	bls.n	8007804 <create_chain+0x88>
 8007800:	2300      	movs	r3, #0
 8007802:	e04f      	b.n	80078a4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7ff fdbf 	bl	800738a <get_fat>
 800780c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00e      	beq.n	8007832 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d003      	beq.n	8007822 <create_chain+0xa6>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007820:	d101      	bne.n	8007826 <create_chain+0xaa>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	e03e      	b.n	80078a4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	429a      	cmp	r2, r3
 800782c:	d1da      	bne.n	80077e4 <create_chain+0x68>
 800782e:	2300      	movs	r3, #0
 8007830:	e038      	b.n	80078a4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007832:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007834:	f04f 32ff 	mov.w	r2, #4294967295
 8007838:	69f9      	ldr	r1, [r7, #28]
 800783a:	6938      	ldr	r0, [r7, #16]
 800783c:	f7ff fe4d 	bl	80074da <put_fat>
 8007840:	4603      	mov	r3, r0
 8007842:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007844:	7dfb      	ldrb	r3, [r7, #23]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d109      	bne.n	800785e <create_chain+0xe2>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d006      	beq.n	800785e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6938      	ldr	r0, [r7, #16]
 8007856:	f7ff fe40 	bl	80074da <put_fat>
 800785a:	4603      	mov	r3, r0
 800785c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d116      	bne.n	8007892 <create_chain+0x116>
		fs->last_clst = ncl;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	691a      	ldr	r2, [r3, #16]
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	3b02      	subs	r3, #2
 8007874:	429a      	cmp	r2, r3
 8007876:	d804      	bhi.n	8007882 <create_chain+0x106>
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	1e5a      	subs	r2, r3, #1
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	791b      	ldrb	r3, [r3, #4]
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	b2da      	uxtb	r2, r3
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	711a      	strb	r2, [r3, #4]
 8007890:	e007      	b.n	80078a2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d102      	bne.n	800789e <create_chain+0x122>
 8007898:	f04f 33ff 	mov.w	r3, #4294967295
 800789c:	e000      	b.n	80078a0 <create_chain+0x124>
 800789e:	2301      	movs	r3, #1
 80078a0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80078a2:	69fb      	ldr	r3, [r7, #28]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3720      	adds	r7, #32
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	3304      	adds	r3, #4
 80078c2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	0a5b      	lsrs	r3, r3, #9
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	8952      	ldrh	r2, [r2, #10]
 80078cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	1d1a      	adds	r2, r3, #4
 80078d6:	613a      	str	r2, [r7, #16]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <clmt_clust+0x3a>
 80078e2:	2300      	movs	r3, #0
 80078e4:	e010      	b.n	8007908 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d307      	bcc.n	80078fe <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	617b      	str	r3, [r7, #20]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	3304      	adds	r3, #4
 80078fa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078fc:	e7e9      	b.n	80078d2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80078fe:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	4413      	add	r3, r2
}
 8007908:	4618      	mov	r0, r3
 800790a:	371c      	adds	r7, #28
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800792a:	d204      	bcs.n	8007936 <dir_sdi+0x22>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007936:	2302      	movs	r3, #2
 8007938:	e063      	b.n	8007a02 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d106      	bne.n	800795a <dir_sdi+0x46>
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	2b02      	cmp	r3, #2
 8007952:	d902      	bls.n	800795a <dir_sdi+0x46>
		clst = fs->dirbase;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10c      	bne.n	800797a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	8912      	ldrh	r2, [r2, #8]
 8007968:	4293      	cmp	r3, r2
 800796a:	d301      	bcc.n	8007970 <dir_sdi+0x5c>
 800796c:	2302      	movs	r3, #2
 800796e:	e048      	b.n	8007a02 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	61da      	str	r2, [r3, #28]
 8007978:	e029      	b.n	80079ce <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	895b      	ldrh	r3, [r3, #10]
 800797e:	025b      	lsls	r3, r3, #9
 8007980:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007982:	e019      	b.n	80079b8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6979      	ldr	r1, [r7, #20]
 8007988:	4618      	mov	r0, r3
 800798a:	f7ff fcfe 	bl	800738a <get_fat>
 800798e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d101      	bne.n	800799c <dir_sdi+0x88>
 8007998:	2301      	movs	r3, #1
 800799a:	e032      	b.n	8007a02 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d904      	bls.n	80079ac <dir_sdi+0x98>
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d301      	bcc.n	80079b0 <dir_sdi+0x9c>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e028      	b.n	8007a02 <dir_sdi+0xee>
			ofs -= csz;
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d2e1      	bcs.n	8007984 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80079c0:	6979      	ldr	r1, [r7, #20]
 80079c2:	6938      	ldr	r0, [r7, #16]
 80079c4:	f7ff fcc2 	bl	800734c <clust2sect>
 80079c8:	4602      	mov	r2, r0
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d101      	bne.n	80079e0 <dir_sdi+0xcc>
 80079dc:	2302      	movs	r3, #2
 80079de:	e010      	b.n	8007a02 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	69da      	ldr	r2, [r3, #28]
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	0a5b      	lsrs	r3, r3, #9
 80079e8:	441a      	add	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079fa:	441a      	add	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b086      	sub	sp, #24
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	3320      	adds	r3, #32
 8007a20:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <dir_next+0x28>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a30:	d301      	bcc.n	8007a36 <dir_next+0x2c>
 8007a32:	2304      	movs	r3, #4
 8007a34:	e0aa      	b.n	8007b8c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f040 8098 	bne.w	8007b72 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69db      	ldr	r3, [r3, #28]
 8007a46:	1c5a      	adds	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d10b      	bne.n	8007a6c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	095b      	lsrs	r3, r3, #5
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	8912      	ldrh	r2, [r2, #8]
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	f0c0 8088 	bcc.w	8007b72 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	61da      	str	r2, [r3, #28]
 8007a68:	2304      	movs	r3, #4
 8007a6a:	e08f      	b.n	8007b8c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	0a5b      	lsrs	r3, r3, #9
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	8952      	ldrh	r2, [r2, #10]
 8007a74:	3a01      	subs	r2, #1
 8007a76:	4013      	ands	r3, r2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d17a      	bne.n	8007b72 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7ff fc80 	bl	800738a <get_fat>
 8007a8a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d801      	bhi.n	8007a96 <dir_next+0x8c>
 8007a92:	2302      	movs	r3, #2
 8007a94:	e07a      	b.n	8007b8c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d101      	bne.n	8007aa2 <dir_next+0x98>
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e074      	b.n	8007b8c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d358      	bcc.n	8007b5e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d104      	bne.n	8007abc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	61da      	str	r2, [r3, #28]
 8007ab8:	2304      	movs	r3, #4
 8007aba:	e067      	b.n	8007b8c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	f7ff fe59 	bl	800777c <create_chain>
 8007aca:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <dir_next+0xcc>
 8007ad2:	2307      	movs	r3, #7
 8007ad4:	e05a      	b.n	8007b8c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <dir_next+0xd6>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e055      	b.n	8007b8c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae6:	d101      	bne.n	8007aec <dir_next+0xe2>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e04f      	b.n	8007b8c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f7ff fb4d 	bl	800718c <sync_window>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <dir_next+0xf2>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e047      	b.n	8007b8c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3330      	adds	r3, #48	; 0x30
 8007b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff f977 	bl	8006dfa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	613b      	str	r3, [r7, #16]
 8007b10:	6979      	ldr	r1, [r7, #20]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff fc1a 	bl	800734c <clust2sect>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b1e:	e012      	b.n	8007b46 <dir_next+0x13c>
						fs->wflag = 1;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2201      	movs	r2, #1
 8007b24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff fb30 	bl	800718c <sync_window>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <dir_next+0x12c>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e02a      	b.n	8007b8c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	895b      	ldrh	r3, [r3, #10]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d3e6      	bcc.n	8007b20 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	1ad2      	subs	r2, r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007b64:	6979      	ldr	r1, [r7, #20]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f7ff fbf0 	bl	800734c <clust2sect>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff feb4 	bl	8007914 <dir_sdi>
 8007bac:	4603      	mov	r3, r0
 8007bae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d12b      	bne.n	8007c0e <dir_alloc+0x7a>
		n = 0;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f7ff fb27 	bl	8007214 <move_window>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d11d      	bne.n	8007c0c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2be5      	cmp	r3, #229	; 0xe5
 8007bd8:	d004      	beq.n	8007be4 <dir_alloc+0x50>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d107      	bne.n	8007bf4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	3301      	adds	r3, #1
 8007be8:	613b      	str	r3, [r7, #16]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d102      	bne.n	8007bf8 <dir_alloc+0x64>
 8007bf2:	e00c      	b.n	8007c0e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff ff05 	bl	8007a0a <dir_next>
 8007c00:	4603      	mov	r3, r0
 8007c02:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0d7      	beq.n	8007bba <dir_alloc+0x26>
 8007c0a:	e000      	b.n	8007c0e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007c0c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d101      	bne.n	8007c18 <dir_alloc+0x84>
 8007c14:	2307      	movs	r3, #7
 8007c16:	75fb      	strb	r3, [r7, #23]
	return res;
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	331a      	adds	r3, #26
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff f83f 	bl	8006cb4 <ld_word>
 8007c36:	4603      	mov	r3, r0
 8007c38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d109      	bne.n	8007c56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	3314      	adds	r3, #20
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff f834 	bl	8006cb4 <ld_word>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007c56:	68fb      	ldr	r3, [r7, #12]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	331a      	adds	r3, #26
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	b292      	uxth	r2, r2
 8007c74:	4611      	mov	r1, r2
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff f857 	bl	8006d2a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d109      	bne.n	8007c98 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f103 0214 	add.w	r2, r3, #20
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	0c1b      	lsrs	r3, r3, #16
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	4619      	mov	r1, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	f7ff f849 	bl	8006d2a <st_word>
	}
}
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007cae:	2100      	movs	r1, #0
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff fe2f 	bl	8007914 <dir_sdi>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <dir_find+0x24>
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	e03e      	b.n	8007d42 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	4619      	mov	r1, r3
 8007cca:	6938      	ldr	r0, [r7, #16]
 8007ccc:	f7ff faa2 	bl	8007214 <move_window>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d12f      	bne.n	8007d3a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d102      	bne.n	8007cee <dir_find+0x4e>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	75fb      	strb	r3, [r7, #23]
 8007cec:	e028      	b.n	8007d40 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	330b      	adds	r3, #11
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	330b      	adds	r3, #11
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	f003 0308 	and.w	r3, r3, #8
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <dir_find+0x86>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a18      	ldr	r0, [r3, #32]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3324      	adds	r3, #36	; 0x24
 8007d18:	220b      	movs	r2, #11
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f7ff f888 	bl	8006e30 <mem_cmp>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007d26:	2100      	movs	r1, #0
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff fe6e 	bl	8007a0a <dir_next>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0c5      	beq.n	8007cc4 <dir_find+0x24>
 8007d38:	e002      	b.n	8007d40 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007d3a:	bf00      	nop
 8007d3c:	e000      	b.n	8007d40 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d3e:	bf00      	nop

	return res;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007d58:	2101      	movs	r1, #1
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff ff1a 	bl	8007b94 <dir_alloc>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d11c      	bne.n	8007da4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	68b8      	ldr	r0, [r7, #8]
 8007d72:	f7ff fa4f 	bl	8007214 <move_window>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d111      	bne.n	8007da4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	2220      	movs	r2, #32
 8007d86:	2100      	movs	r1, #0
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff f836 	bl	8006dfa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a18      	ldr	r0, [r3, #32]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3324      	adds	r3, #36	; 0x24
 8007d96:	220b      	movs	r2, #11
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f7ff f80d 	bl	8006db8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2201      	movs	r2, #1
 8007da2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3324      	adds	r3, #36	; 0x24
 8007dc4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007dc6:	220b      	movs	r2, #11
 8007dc8:	2120      	movs	r1, #32
 8007dca:	68b8      	ldr	r0, [r7, #8]
 8007dcc:	f7ff f815 	bl	8006dfa <mem_set>
	si = i = 0; ni = 8;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	2308      	movs	r3, #8
 8007dda:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	1c5a      	adds	r2, r3, #1
 8007de0:	61fa      	str	r2, [r7, #28]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4413      	add	r3, r2
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007dea:	7efb      	ldrb	r3, [r7, #27]
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d94e      	bls.n	8007e8e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007df0:	7efb      	ldrb	r3, [r7, #27]
 8007df2:	2b2f      	cmp	r3, #47	; 0x2f
 8007df4:	d006      	beq.n	8007e04 <create_name+0x54>
 8007df6:	7efb      	ldrb	r3, [r7, #27]
 8007df8:	2b5c      	cmp	r3, #92	; 0x5c
 8007dfa:	d110      	bne.n	8007e1e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007dfc:	e002      	b.n	8007e04 <create_name+0x54>
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	3301      	adds	r3, #1
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	4413      	add	r3, r2
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b2f      	cmp	r3, #47	; 0x2f
 8007e0e:	d0f6      	beq.n	8007dfe <create_name+0x4e>
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	4413      	add	r3, r2
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b5c      	cmp	r3, #92	; 0x5c
 8007e1a:	d0f0      	beq.n	8007dfe <create_name+0x4e>
			break;
 8007e1c:	e038      	b.n	8007e90 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007e1e:	7efb      	ldrb	r3, [r7, #27]
 8007e20:	2b2e      	cmp	r3, #46	; 0x2e
 8007e22:	d003      	beq.n	8007e2c <create_name+0x7c>
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d30c      	bcc.n	8007e46 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2b0b      	cmp	r3, #11
 8007e30:	d002      	beq.n	8007e38 <create_name+0x88>
 8007e32:	7efb      	ldrb	r3, [r7, #27]
 8007e34:	2b2e      	cmp	r3, #46	; 0x2e
 8007e36:	d001      	beq.n	8007e3c <create_name+0x8c>
 8007e38:	2306      	movs	r3, #6
 8007e3a:	e044      	b.n	8007ec6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	230b      	movs	r3, #11
 8007e42:	617b      	str	r3, [r7, #20]
			continue;
 8007e44:	e022      	b.n	8007e8c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007e46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da04      	bge.n	8007e58 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007e4e:	7efb      	ldrb	r3, [r7, #27]
 8007e50:	3b80      	subs	r3, #128	; 0x80
 8007e52:	4a1f      	ldr	r2, [pc, #124]	; (8007ed0 <create_name+0x120>)
 8007e54:	5cd3      	ldrb	r3, [r2, r3]
 8007e56:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007e58:	7efb      	ldrb	r3, [r7, #27]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	481d      	ldr	r0, [pc, #116]	; (8007ed4 <create_name+0x124>)
 8007e5e:	f7ff f80e 	bl	8006e7e <chk_chr>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <create_name+0xbc>
 8007e68:	2306      	movs	r3, #6
 8007e6a:	e02c      	b.n	8007ec6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007e6c:	7efb      	ldrb	r3, [r7, #27]
 8007e6e:	2b60      	cmp	r3, #96	; 0x60
 8007e70:	d905      	bls.n	8007e7e <create_name+0xce>
 8007e72:	7efb      	ldrb	r3, [r7, #27]
 8007e74:	2b7a      	cmp	r3, #122	; 0x7a
 8007e76:	d802      	bhi.n	8007e7e <create_name+0xce>
 8007e78:	7efb      	ldrb	r3, [r7, #27]
 8007e7a:	3b20      	subs	r3, #32
 8007e7c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	613a      	str	r2, [r7, #16]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	4413      	add	r3, r2
 8007e88:	7efa      	ldrb	r2, [r7, #27]
 8007e8a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007e8c:	e7a6      	b.n	8007ddc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007e8e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	441a      	add	r2, r3
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <create_name+0xf4>
 8007ea0:	2306      	movs	r3, #6
 8007ea2:	e010      	b.n	8007ec6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2be5      	cmp	r3, #229	; 0xe5
 8007eaa:	d102      	bne.n	8007eb2 <create_name+0x102>
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2205      	movs	r2, #5
 8007eb0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007eb2:	7efb      	ldrb	r3, [r7, #27]
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	d801      	bhi.n	8007ebc <create_name+0x10c>
 8007eb8:	2204      	movs	r2, #4
 8007eba:	e000      	b.n	8007ebe <create_name+0x10e>
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	330b      	adds	r3, #11
 8007ec2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007ec4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3720      	adds	r7, #32
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	0800ae38 	.word	0x0800ae38
 8007ed4:	0800add4 	.word	0x0800add4

08007ed8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007eec:	e002      	b.n	8007ef4 <follow_path+0x1c>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b2f      	cmp	r3, #47	; 0x2f
 8007efa:	d0f8      	beq.n	8007eee <follow_path+0x16>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b5c      	cmp	r3, #92	; 0x5c
 8007f02:	d0f4      	beq.n	8007eee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2200      	movs	r2, #0
 8007f08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b1f      	cmp	r3, #31
 8007f10:	d80a      	bhi.n	8007f28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2280      	movs	r2, #128	; 0x80
 8007f16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f7ff fcf9 	bl	8007914 <dir_sdi>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]
 8007f26:	e043      	b.n	8007fb0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f28:	463b      	mov	r3, r7
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ff3f 	bl	8007db0 <create_name>
 8007f32:	4603      	mov	r3, r0
 8007f34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d134      	bne.n	8007fa6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f7ff feaf 	bl	8007ca0 <dir_find>
 8007f42:	4603      	mov	r3, r0
 8007f44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00a      	beq.n	8007f6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d127      	bne.n	8007faa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f5a:	7afb      	ldrb	r3, [r7, #11]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d122      	bne.n	8007faa <follow_path+0xd2>
 8007f64:	2305      	movs	r3, #5
 8007f66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007f68:	e01f      	b.n	8007faa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d11c      	bne.n	8007fae <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	799b      	ldrb	r3, [r3, #6]
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007f80:	2305      	movs	r3, #5
 8007f82:	75fb      	strb	r3, [r7, #23]
 8007f84:	e014      	b.n	8007fb0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f94:	4413      	add	r3, r2
 8007f96:	4619      	mov	r1, r3
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7ff fe42 	bl	8007c22 <ld_clust>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fa4:	e7c0      	b.n	8007f28 <follow_path+0x50>
			if (res != FR_OK) break;
 8007fa6:	bf00      	nop
 8007fa8:	e002      	b.n	8007fb0 <follow_path+0xd8>
				break;
 8007faa:	bf00      	nop
 8007fac:	e000      	b.n	8007fb0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fae:	bf00      	nop
			}
		}
	}

	return res;
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3718      	adds	r7, #24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b087      	sub	sp, #28
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d031      	beq.n	8008034 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	617b      	str	r3, [r7, #20]
 8007fd6:	e002      	b.n	8007fde <get_ldnumber+0x24>
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d903      	bls.n	8007fee <get_ldnumber+0x34>
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2b3a      	cmp	r3, #58	; 0x3a
 8007fec:	d1f4      	bne.n	8007fd8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b3a      	cmp	r3, #58	; 0x3a
 8007ff4:	d11c      	bne.n	8008030 <get_ldnumber+0x76>
			tp = *path;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	60fa      	str	r2, [r7, #12]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	3b30      	subs	r3, #48	; 0x30
 8008006:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	2b09      	cmp	r3, #9
 800800c:	d80e      	bhi.n	800802c <get_ldnumber+0x72>
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	429a      	cmp	r2, r3
 8008014:	d10a      	bne.n	800802c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d107      	bne.n	800802c <get_ldnumber+0x72>
					vol = (int)i;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	3301      	adds	r3, #1
 8008024:	617b      	str	r3, [r7, #20]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	e002      	b.n	8008036 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008030:	2300      	movs	r3, #0
 8008032:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008034:	693b      	ldr	r3, [r7, #16]
}
 8008036:	4618      	mov	r0, r3
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
	...

08008044 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	70da      	strb	r2, [r3, #3]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f04f 32ff 	mov.w	r2, #4294967295
 800805a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7ff f8d8 	bl	8007214 <move_window>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <check_fs+0x2a>
 800806a:	2304      	movs	r3, #4
 800806c:	e038      	b.n	80080e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3330      	adds	r3, #48	; 0x30
 8008072:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008076:	4618      	mov	r0, r3
 8008078:	f7fe fe1c 	bl	8006cb4 <ld_word>
 800807c:	4603      	mov	r3, r0
 800807e:	461a      	mov	r2, r3
 8008080:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008084:	429a      	cmp	r2, r3
 8008086:	d001      	beq.n	800808c <check_fs+0x48>
 8008088:	2303      	movs	r3, #3
 800808a:	e029      	b.n	80080e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008092:	2be9      	cmp	r3, #233	; 0xe9
 8008094:	d009      	beq.n	80080aa <check_fs+0x66>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800809c:	2beb      	cmp	r3, #235	; 0xeb
 800809e:	d11e      	bne.n	80080de <check_fs+0x9a>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80080a6:	2b90      	cmp	r3, #144	; 0x90
 80080a8:	d119      	bne.n	80080de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3330      	adds	r3, #48	; 0x30
 80080ae:	3336      	adds	r3, #54	; 0x36
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe fe17 	bl	8006ce4 <ld_dword>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80080bc:	4a0a      	ldr	r2, [pc, #40]	; (80080e8 <check_fs+0xa4>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d101      	bne.n	80080c6 <check_fs+0x82>
 80080c2:	2300      	movs	r3, #0
 80080c4:	e00c      	b.n	80080e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3330      	adds	r3, #48	; 0x30
 80080ca:	3352      	adds	r3, #82	; 0x52
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fe fe09 	bl	8006ce4 <ld_dword>
 80080d2:	4603      	mov	r3, r0
 80080d4:	4a05      	ldr	r2, [pc, #20]	; (80080ec <check_fs+0xa8>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d101      	bne.n	80080de <check_fs+0x9a>
 80080da:	2300      	movs	r3, #0
 80080dc:	e000      	b.n	80080e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80080de:	2302      	movs	r3, #2
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	00544146 	.word	0x00544146
 80080ec:	33544146 	.word	0x33544146

080080f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b096      	sub	sp, #88	; 0x58
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4613      	mov	r3, r2
 80080fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f7ff ff58 	bl	8007fba <get_ldnumber>
 800810a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800810c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800810e:	2b00      	cmp	r3, #0
 8008110:	da01      	bge.n	8008116 <find_volume+0x26>
 8008112:	230b      	movs	r3, #11
 8008114:	e22d      	b.n	8008572 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008116:	4aa1      	ldr	r2, [pc, #644]	; (800839c <find_volume+0x2ac>)
 8008118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800811a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <find_volume+0x3a>
 8008126:	230c      	movs	r3, #12
 8008128:	e223      	b.n	8008572 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800812e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	f023 0301 	bic.w	r3, r3, #1
 8008136:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d01a      	beq.n	8008176 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	785b      	ldrb	r3, [r3, #1]
 8008144:	4618      	mov	r0, r3
 8008146:	f7fe fd17 	bl	8006b78 <disk_status>
 800814a:	4603      	mov	r3, r0
 800814c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008154:	f003 0301 	and.w	r3, r3, #1
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10c      	bne.n	8008176 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d007      	beq.n	8008172 <find_volume+0x82>
 8008162:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008166:	f003 0304 	and.w	r3, r3, #4
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800816e:	230a      	movs	r3, #10
 8008170:	e1ff      	b.n	8008572 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008172:	2300      	movs	r3, #0
 8008174:	e1fd      	b.n	8008572 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	2200      	movs	r2, #0
 800817a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800817c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800817e:	b2da      	uxtb	r2, r3
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	785b      	ldrb	r3, [r3, #1]
 8008188:	4618      	mov	r0, r3
 800818a:	f7fe fd0f 	bl	8006bac <disk_initialize>
 800818e:	4603      	mov	r3, r0
 8008190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80081a0:	2303      	movs	r3, #3
 80081a2:	e1e6      	b.n	8008572 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d007      	beq.n	80081ba <find_volume+0xca>
 80081aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80081b6:	230a      	movs	r3, #10
 80081b8:	e1db      	b.n	8008572 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80081be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081c2:	f7ff ff3f 	bl	8008044 <check_fs>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80081cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d149      	bne.n	8008268 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081d4:	2300      	movs	r3, #0
 80081d6:	643b      	str	r3, [r7, #64]	; 0x40
 80081d8:	e01e      	b.n	8008218 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80081e8:	4413      	add	r3, r2
 80081ea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80081ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ee:	3304      	adds	r3, #4
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d006      	beq.n	8008204 <find_volume+0x114>
 80081f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f8:	3308      	adds	r3, #8
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fd72 	bl	8006ce4 <ld_dword>
 8008200:	4602      	mov	r2, r0
 8008202:	e000      	b.n	8008206 <find_volume+0x116>
 8008204:	2200      	movs	r2, #0
 8008206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	3358      	adds	r3, #88	; 0x58
 800820c:	443b      	add	r3, r7
 800820e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008214:	3301      	adds	r3, #1
 8008216:	643b      	str	r3, [r7, #64]	; 0x40
 8008218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800821a:	2b03      	cmp	r3, #3
 800821c:	d9dd      	bls.n	80081da <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800821e:	2300      	movs	r3, #0
 8008220:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <find_volume+0x13e>
 8008228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822a:	3b01      	subs	r3, #1
 800822c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800822e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	3358      	adds	r3, #88	; 0x58
 8008234:	443b      	add	r3, r7
 8008236:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800823a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800823c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <find_volume+0x15e>
 8008242:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008244:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008246:	f7ff fefd 	bl	8008044 <check_fs>
 800824a:	4603      	mov	r3, r0
 800824c:	e000      	b.n	8008250 <find_volume+0x160>
 800824e:	2303      	movs	r3, #3
 8008250:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008254:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008258:	2b01      	cmp	r3, #1
 800825a:	d905      	bls.n	8008268 <find_volume+0x178>
 800825c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800825e:	3301      	adds	r3, #1
 8008260:	643b      	str	r3, [r7, #64]	; 0x40
 8008262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008264:	2b03      	cmp	r3, #3
 8008266:	d9e2      	bls.n	800822e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800826c:	2b04      	cmp	r3, #4
 800826e:	d101      	bne.n	8008274 <find_volume+0x184>
 8008270:	2301      	movs	r3, #1
 8008272:	e17e      	b.n	8008572 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008274:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008278:	2b01      	cmp	r3, #1
 800827a:	d901      	bls.n	8008280 <find_volume+0x190>
 800827c:	230d      	movs	r3, #13
 800827e:	e178      	b.n	8008572 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	3330      	adds	r3, #48	; 0x30
 8008284:	330b      	adds	r3, #11
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fd14 	bl	8006cb4 <ld_word>
 800828c:	4603      	mov	r3, r0
 800828e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008292:	d001      	beq.n	8008298 <find_volume+0x1a8>
 8008294:	230d      	movs	r3, #13
 8008296:	e16c      	b.n	8008572 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	3330      	adds	r3, #48	; 0x30
 800829c:	3316      	adds	r3, #22
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe fd08 	bl	8006cb4 <ld_word>
 80082a4:	4603      	mov	r3, r0
 80082a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80082a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <find_volume+0x1cc>
 80082ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b0:	3330      	adds	r3, #48	; 0x30
 80082b2:	3324      	adds	r3, #36	; 0x24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fe fd15 	bl	8006ce4 <ld_dword>
 80082ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082c0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80082c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80082cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ce:	789b      	ldrb	r3, [r3, #2]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d005      	beq.n	80082e0 <find_volume+0x1f0>
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	789b      	ldrb	r3, [r3, #2]
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d001      	beq.n	80082e0 <find_volume+0x1f0>
 80082dc:	230d      	movs	r3, #13
 80082de:	e148      	b.n	8008572 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80082e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e2:	789b      	ldrb	r3, [r3, #2]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082e8:	fb02 f303 	mul.w	r3, r2, r3
 80082ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80082ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	895b      	ldrh	r3, [r3, #10]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d008      	beq.n	8008314 <find_volume+0x224>
 8008302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008304:	895b      	ldrh	r3, [r3, #10]
 8008306:	461a      	mov	r2, r3
 8008308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830a:	895b      	ldrh	r3, [r3, #10]
 800830c:	3b01      	subs	r3, #1
 800830e:	4013      	ands	r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <find_volume+0x228>
 8008314:	230d      	movs	r3, #13
 8008316:	e12c      	b.n	8008572 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	3330      	adds	r3, #48	; 0x30
 800831c:	3311      	adds	r3, #17
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fcc8 	bl	8006cb4 <ld_word>
 8008324:	4603      	mov	r3, r0
 8008326:	461a      	mov	r2, r3
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	891b      	ldrh	r3, [r3, #8]
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <find_volume+0x24e>
 800833a:	230d      	movs	r3, #13
 800833c:	e119      	b.n	8008572 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800833e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008340:	3330      	adds	r3, #48	; 0x30
 8008342:	3313      	adds	r3, #19
 8008344:	4618      	mov	r0, r3
 8008346:	f7fe fcb5 	bl	8006cb4 <ld_word>
 800834a:	4603      	mov	r3, r0
 800834c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800834e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008350:	2b00      	cmp	r3, #0
 8008352:	d106      	bne.n	8008362 <find_volume+0x272>
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	3330      	adds	r3, #48	; 0x30
 8008358:	3320      	adds	r3, #32
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fcc2 	bl	8006ce4 <ld_dword>
 8008360:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	3330      	adds	r3, #48	; 0x30
 8008366:	330e      	adds	r3, #14
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe fca3 	bl	8006cb4 <ld_word>
 800836e:	4603      	mov	r3, r0
 8008370:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008372:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <find_volume+0x28c>
 8008378:	230d      	movs	r3, #13
 800837a:	e0fa      	b.n	8008572 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800837c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800837e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008380:	4413      	add	r3, r2
 8008382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008384:	8912      	ldrh	r2, [r2, #8]
 8008386:	0912      	lsrs	r2, r2, #4
 8008388:	b292      	uxth	r2, r2
 800838a:	4413      	add	r3, r2
 800838c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800838e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	429a      	cmp	r2, r3
 8008394:	d204      	bcs.n	80083a0 <find_volume+0x2b0>
 8008396:	230d      	movs	r3, #13
 8008398:	e0eb      	b.n	8008572 <find_volume+0x482>
 800839a:	bf00      	nop
 800839c:	20013340 	.word	0x20013340
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80083a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083a8:	8952      	ldrh	r2, [r2, #10]
 80083aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <find_volume+0x2ca>
 80083b6:	230d      	movs	r3, #13
 80083b8:	e0db      	b.n	8008572 <find_volume+0x482>
		fmt = FS_FAT32;
 80083ba:	2303      	movs	r3, #3
 80083bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d802      	bhi.n	80083d0 <find_volume+0x2e0>
 80083ca:	2302      	movs	r3, #2
 80083cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d802      	bhi.n	80083e0 <find_volume+0x2f0>
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	1c9a      	adds	r2, r3, #2
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083ec:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80083ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083f2:	441a      	add	r2, r3
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80083f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	441a      	add	r2, r3
 80083fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008400:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008402:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008406:	2b03      	cmp	r3, #3
 8008408:	d11e      	bne.n	8008448 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	3330      	adds	r3, #48	; 0x30
 800840e:	332a      	adds	r3, #42	; 0x2a
 8008410:	4618      	mov	r0, r3
 8008412:	f7fe fc4f 	bl	8006cb4 <ld_word>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d001      	beq.n	8008420 <find_volume+0x330>
 800841c:	230d      	movs	r3, #13
 800841e:	e0a8      	b.n	8008572 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008422:	891b      	ldrh	r3, [r3, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <find_volume+0x33c>
 8008428:	230d      	movs	r3, #13
 800842a:	e0a2      	b.n	8008572 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	3330      	adds	r3, #48	; 0x30
 8008430:	332c      	adds	r3, #44	; 0x2c
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fc56 	bl	8006ce4 <ld_dword>
 8008438:	4602      	mov	r2, r0
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	647b      	str	r3, [r7, #68]	; 0x44
 8008446:	e01f      	b.n	8008488 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	891b      	ldrh	r3, [r3, #8]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d101      	bne.n	8008454 <find_volume+0x364>
 8008450:	230d      	movs	r3, #13
 8008452:	e08e      	b.n	8008572 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008456:	6a1a      	ldr	r2, [r3, #32]
 8008458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800845a:	441a      	add	r2, r3
 800845c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008464:	2b02      	cmp	r3, #2
 8008466:	d103      	bne.n	8008470 <find_volume+0x380>
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	005b      	lsls	r3, r3, #1
 800846e:	e00a      	b.n	8008486 <find_volume+0x396>
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	695a      	ldr	r2, [r3, #20]
 8008474:	4613      	mov	r3, r2
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	4413      	add	r3, r2
 800847a:	085a      	lsrs	r2, r3, #1
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008486:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	699a      	ldr	r2, [r3, #24]
 800848c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008492:	0a5b      	lsrs	r3, r3, #9
 8008494:	429a      	cmp	r2, r3
 8008496:	d201      	bcs.n	800849c <find_volume+0x3ac>
 8008498:	230d      	movs	r3, #13
 800849a:	e06a      	b.n	8008572 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800849c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849e:	f04f 32ff 	mov.w	r2, #4294967295
 80084a2:	611a      	str	r2, [r3, #16]
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	691a      	ldr	r2, [r3, #16]
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	2280      	movs	r2, #128	; 0x80
 80084b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80084b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d149      	bne.n	800854e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80084ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084bc:	3330      	adds	r3, #48	; 0x30
 80084be:	3330      	adds	r3, #48	; 0x30
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fe fbf7 	bl	8006cb4 <ld_word>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d140      	bne.n	800854e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80084cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ce:	3301      	adds	r3, #1
 80084d0:	4619      	mov	r1, r3
 80084d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084d4:	f7fe fe9e 	bl	8007214 <move_window>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d137      	bne.n	800854e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	2200      	movs	r2, #0
 80084e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80084e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e6:	3330      	adds	r3, #48	; 0x30
 80084e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe fbe1 	bl	8006cb4 <ld_word>
 80084f2:	4603      	mov	r3, r0
 80084f4:	461a      	mov	r2, r3
 80084f6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d127      	bne.n	800854e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80084fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008500:	3330      	adds	r3, #48	; 0x30
 8008502:	4618      	mov	r0, r3
 8008504:	f7fe fbee 	bl	8006ce4 <ld_dword>
 8008508:	4603      	mov	r3, r0
 800850a:	4a1c      	ldr	r2, [pc, #112]	; (800857c <find_volume+0x48c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d11e      	bne.n	800854e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008512:	3330      	adds	r3, #48	; 0x30
 8008514:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe fbe3 	bl	8006ce4 <ld_dword>
 800851e:	4603      	mov	r3, r0
 8008520:	4a17      	ldr	r2, [pc, #92]	; (8008580 <find_volume+0x490>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d113      	bne.n	800854e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	3330      	adds	r3, #48	; 0x30
 800852a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe fbd8 	bl	8006ce4 <ld_dword>
 8008534:	4602      	mov	r2, r0
 8008536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008538:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	3330      	adds	r3, #48	; 0x30
 800853e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fbce 	bl	8006ce4 <ld_dword>
 8008548:	4602      	mov	r2, r0
 800854a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008554:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008556:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <find_volume+0x494>)
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	b29a      	uxth	r2, r3
 800855e:	4b09      	ldr	r3, [pc, #36]	; (8008584 <find_volume+0x494>)
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <find_volume+0x494>)
 8008564:	881a      	ldrh	r2, [r3, #0]
 8008566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008568:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800856a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800856c:	f7fe fdea 	bl	8007144 <clear_lock>
#endif
	return FR_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3758      	adds	r7, #88	; 0x58
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	41615252 	.word	0x41615252
 8008580:	61417272 	.word	0x61417272
 8008584:	20013344 	.word	0x20013344

08008588 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008592:	2309      	movs	r3, #9
 8008594:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01c      	beq.n	80085d6 <validate+0x4e>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d018      	beq.n	80085d6 <validate+0x4e>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d013      	beq.n	80085d6 <validate+0x4e>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	889a      	ldrh	r2, [r3, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	88db      	ldrh	r3, [r3, #6]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d10c      	bne.n	80085d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	785b      	ldrb	r3, [r3, #1]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fad8 	bl	8006b78 <disk_status>
 80085c8:	4603      	mov	r3, r0
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <validate+0x4e>
			res = FR_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d102      	bne.n	80085e2 <validate+0x5a>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	e000      	b.n	80085e4 <validate+0x5c>
 80085e2:	2300      	movs	r3, #0
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	6013      	str	r3, [r2, #0]
	return res;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
	...

080085f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b088      	sub	sp, #32
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	4613      	mov	r3, r2
 8008600:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008606:	f107 0310 	add.w	r3, r7, #16
 800860a:	4618      	mov	r0, r3
 800860c:	f7ff fcd5 	bl	8007fba <get_ldnumber>
 8008610:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	2b00      	cmp	r3, #0
 8008616:	da01      	bge.n	800861c <f_mount+0x28>
 8008618:	230b      	movs	r3, #11
 800861a:	e02b      	b.n	8008674 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800861c:	4a17      	ldr	r2, [pc, #92]	; (800867c <f_mount+0x88>)
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008624:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d005      	beq.n	8008638 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800862c:	69b8      	ldr	r0, [r7, #24]
 800862e:	f7fe fd89 	bl	8007144 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	490d      	ldr	r1, [pc, #52]	; (800867c <f_mount+0x88>)
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <f_mount+0x66>
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d001      	beq.n	800865e <f_mount+0x6a>
 800865a:	2300      	movs	r3, #0
 800865c:	e00a      	b.n	8008674 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800865e:	f107 010c 	add.w	r1, r7, #12
 8008662:	f107 0308 	add.w	r3, r7, #8
 8008666:	2200      	movs	r2, #0
 8008668:	4618      	mov	r0, r3
 800866a:	f7ff fd41 	bl	80080f0 <find_volume>
 800866e:	4603      	mov	r3, r0
 8008670:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008672:	7dfb      	ldrb	r3, [r7, #23]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3720      	adds	r7, #32
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	20013340 	.word	0x20013340

08008680 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b098      	sub	sp, #96	; 0x60
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d101      	bne.n	8008698 <f_open+0x18>
 8008694:	2309      	movs	r3, #9
 8008696:	e1ad      	b.n	80089f4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800869e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80086a0:	79fa      	ldrb	r2, [r7, #7]
 80086a2:	f107 0110 	add.w	r1, r7, #16
 80086a6:	f107 0308 	add.w	r3, r7, #8
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff fd20 	bl	80080f0 <find_volume>
 80086b0:	4603      	mov	r3, r0
 80086b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80086b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f040 8191 	bne.w	80089e2 <f_open+0x362>
		dj.obj.fs = fs;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	f107 0314 	add.w	r3, r7, #20
 80086ca:	4611      	mov	r1, r2
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff fc03 	bl	8007ed8 <follow_path>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80086d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d11a      	bne.n	8008716 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80086e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80086e4:	b25b      	sxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da03      	bge.n	80086f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80086ea:	2306      	movs	r3, #6
 80086ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80086f0:	e011      	b.n	8008716 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	f023 0301 	bic.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bf14      	ite	ne
 80086fc:	2301      	movne	r3, #1
 80086fe:	2300      	moveq	r3, #0
 8008700:	b2db      	uxtb	r3, r3
 8008702:	461a      	mov	r2, r3
 8008704:	f107 0314 	add.w	r3, r7, #20
 8008708:	4611      	mov	r1, r2
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fbd2 	bl	8006eb4 <chk_lock>
 8008710:	4603      	mov	r3, r0
 8008712:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008716:	79fb      	ldrb	r3, [r7, #7]
 8008718:	f003 031c 	and.w	r3, r3, #28
 800871c:	2b00      	cmp	r3, #0
 800871e:	d07f      	beq.n	8008820 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008724:	2b00      	cmp	r3, #0
 8008726:	d017      	beq.n	8008758 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800872c:	2b04      	cmp	r3, #4
 800872e:	d10e      	bne.n	800874e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008730:	f7fe fc1c 	bl	8006f6c <enq_lock>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d006      	beq.n	8008748 <f_open+0xc8>
 800873a:	f107 0314 	add.w	r3, r7, #20
 800873e:	4618      	mov	r0, r3
 8008740:	f7ff fb03 	bl	8007d4a <dir_register>
 8008744:	4603      	mov	r3, r0
 8008746:	e000      	b.n	800874a <f_open+0xca>
 8008748:	2312      	movs	r3, #18
 800874a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	f043 0308 	orr.w	r3, r3, #8
 8008754:	71fb      	strb	r3, [r7, #7]
 8008756:	e010      	b.n	800877a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008758:	7ebb      	ldrb	r3, [r7, #26]
 800875a:	f003 0311 	and.w	r3, r3, #17
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <f_open+0xea>
					res = FR_DENIED;
 8008762:	2307      	movs	r3, #7
 8008764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008768:	e007      	b.n	800877a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	f003 0304 	and.w	r3, r3, #4
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <f_open+0xfa>
 8008774:	2308      	movs	r3, #8
 8008776:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800877a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800877e:	2b00      	cmp	r3, #0
 8008780:	d168      	bne.n	8008854 <f_open+0x1d4>
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	f003 0308 	and.w	r3, r3, #8
 8008788:	2b00      	cmp	r3, #0
 800878a:	d063      	beq.n	8008854 <f_open+0x1d4>
				dw = GET_FATTIME();
 800878c:	f7fd fcb6 	bl	80060fc <get_fattime>
 8008790:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008794:	330e      	adds	r3, #14
 8008796:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008798:	4618      	mov	r0, r3
 800879a:	f7fe fae1 	bl	8006d60 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800879e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a0:	3316      	adds	r3, #22
 80087a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fadb 	bl	8006d60 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80087aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ac:	330b      	adds	r3, #11
 80087ae:	2220      	movs	r2, #32
 80087b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087b6:	4611      	mov	r1, r2
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fa32 	bl	8007c22 <ld_clust>
 80087be:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80087c4:	2200      	movs	r2, #0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff fa4a 	bl	8007c60 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80087cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ce:	331c      	adds	r3, #28
 80087d0:	2100      	movs	r1, #0
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe fac4 	bl	8006d60 <st_dword>
					fs->wflag = 1;
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	2201      	movs	r2, #1
 80087dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80087de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d037      	beq.n	8008854 <f_open+0x1d4>
						dw = fs->winsect;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80087ea:	f107 0314 	add.w	r3, r7, #20
 80087ee:	2200      	movs	r2, #0
 80087f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fe ff5d 	bl	80076b2 <remove_chain>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80087fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008802:	2b00      	cmp	r3, #0
 8008804:	d126      	bne.n	8008854 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe fd02 	bl	8007214 <move_window>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800881a:	3a01      	subs	r2, #1
 800881c:	60da      	str	r2, [r3, #12]
 800881e:	e019      	b.n	8008854 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008824:	2b00      	cmp	r3, #0
 8008826:	d115      	bne.n	8008854 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008828:	7ebb      	ldrb	r3, [r7, #26]
 800882a:	f003 0310 	and.w	r3, r3, #16
 800882e:	2b00      	cmp	r3, #0
 8008830:	d003      	beq.n	800883a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008832:	2304      	movs	r3, #4
 8008834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008838:	e00c      	b.n	8008854 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d007      	beq.n	8008854 <f_open+0x1d4>
 8008844:	7ebb      	ldrb	r3, [r7, #26]
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	d002      	beq.n	8008854 <f_open+0x1d4>
						res = FR_DENIED;
 800884e:	2307      	movs	r3, #7
 8008850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008854:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008858:	2b00      	cmp	r3, #0
 800885a:	d128      	bne.n	80088ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800885c:	79fb      	ldrb	r3, [r7, #7]
 800885e:	f003 0308 	and.w	r3, r3, #8
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800886c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	f023 0301 	bic.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	bf14      	ite	ne
 8008886:	2301      	movne	r3, #1
 8008888:	2300      	moveq	r3, #0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	461a      	mov	r2, r3
 800888e:	f107 0314 	add.w	r3, r7, #20
 8008892:	4611      	mov	r1, r2
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe fb8b 	bl	8006fb0 <inc_lock>
 800889a:	4602      	mov	r2, r0
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d102      	bne.n	80088ae <f_open+0x22e>
 80088a8:	2302      	movs	r3, #2
 80088aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80088ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f040 8095 	bne.w	80089e2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff f9af 	bl	8007c22 <ld_clust>
 80088c4:	4602      	mov	r2, r0
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80088ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088cc:	331c      	adds	r3, #28
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fa08 	bl	8006ce4 <ld_dword>
 80088d4:	4602      	mov	r2, r0
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	88da      	ldrh	r2, [r3, #6]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	79fa      	ldrb	r2, [r7, #7]
 80088f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	3330      	adds	r3, #48	; 0x30
 800890a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800890e:	2100      	movs	r1, #0
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe fa72 	bl	8006dfa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	f003 0320 	and.w	r3, r3, #32
 800891c:	2b00      	cmp	r3, #0
 800891e:	d060      	beq.n	80089e2 <f_open+0x362>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d05c      	beq.n	80089e2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	895b      	ldrh	r3, [r3, #10]
 8008934:	025b      	lsls	r3, r3, #9
 8008936:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	657b      	str	r3, [r7, #84]	; 0x54
 8008944:	e016      	b.n	8008974 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800894a:	4618      	mov	r0, r3
 800894c:	f7fe fd1d 	bl	800738a <get_fat>
 8008950:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008954:	2b01      	cmp	r3, #1
 8008956:	d802      	bhi.n	800895e <f_open+0x2de>
 8008958:	2302      	movs	r3, #2
 800895a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800895e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008964:	d102      	bne.n	800896c <f_open+0x2ec>
 8008966:	2301      	movs	r3, #1
 8008968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800896c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800896e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	657b      	str	r3, [r7, #84]	; 0x54
 8008974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008978:	2b00      	cmp	r3, #0
 800897a:	d103      	bne.n	8008984 <f_open+0x304>
 800897c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800897e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008980:	429a      	cmp	r2, r3
 8008982:	d8e0      	bhi.n	8008946 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008988:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800898a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800898e:	2b00      	cmp	r3, #0
 8008990:	d127      	bne.n	80089e2 <f_open+0x362>
 8008992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008998:	2b00      	cmp	r3, #0
 800899a:	d022      	beq.n	80089e2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fe fcd3 	bl	800734c <clust2sect>
 80089a6:	6478      	str	r0, [r7, #68]	; 0x44
 80089a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <f_open+0x336>
						res = FR_INT_ERR;
 80089ae:	2302      	movs	r3, #2
 80089b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80089b4:	e015      	b.n	80089e2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80089b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089b8:	0a5a      	lsrs	r2, r3, #9
 80089ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089bc:	441a      	add	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	7858      	ldrb	r0, [r3, #1]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6a1a      	ldr	r2, [r3, #32]
 80089d0:	2301      	movs	r3, #1
 80089d2:	f7fe f911 	bl	8006bf8 <disk_read>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <f_open+0x362>
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80089e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <f_open+0x370>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80089f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3760      	adds	r7, #96	; 0x60
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08e      	sub	sp, #56	; 0x38
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
 8008a08:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2200      	movs	r2, #0
 8008a12:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f107 0214 	add.w	r2, r7, #20
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff fdb3 	bl	8008588 <validate>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d107      	bne.n	8008a40 <f_read+0x44>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	7d5b      	ldrb	r3, [r3, #21]
 8008a34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <f_read+0x4a>
 8008a40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a44:	e115      	b.n	8008c72 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	7d1b      	ldrb	r3, [r3, #20]
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <f_read+0x5a>
 8008a52:	2307      	movs	r3, #7
 8008a54:	e10d      	b.n	8008c72 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	f240 80fe 	bls.w	8008c68 <f_read+0x26c>
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008a70:	e0fa      	b.n	8008c68 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f040 80c6 	bne.w	8008c0c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	0a5b      	lsrs	r3, r3, #9
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	8952      	ldrh	r2, [r2, #10]
 8008a8a:	3a01      	subs	r2, #1
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d12f      	bne.n	8008af6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d103      	bne.n	8008aa6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8008aa4:	e013      	b.n	8008ace <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d007      	beq.n	8008abe <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f7fe fef9 	bl	80078ac <clmt_clust>
 8008aba:	6338      	str	r0, [r7, #48]	; 0x30
 8008abc:	e007      	b.n	8008ace <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	f7fe fc5f 	bl	800738a <get_fat>
 8008acc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d804      	bhi.n	8008ade <f_read+0xe2>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	755a      	strb	r2, [r3, #21]
 8008ada:	2302      	movs	r3, #2
 8008adc:	e0c9      	b.n	8008c72 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae4:	d104      	bne.n	8008af0 <f_read+0xf4>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	755a      	strb	r2, [r3, #21]
 8008aec:	2301      	movs	r3, #1
 8008aee:	e0c0      	b.n	8008c72 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008af4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	69db      	ldr	r3, [r3, #28]
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f7fe fc24 	bl	800734c <clust2sect>
 8008b04:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <f_read+0x11a>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	755a      	strb	r2, [r3, #21]
 8008b12:	2302      	movs	r3, #2
 8008b14:	e0ad      	b.n	8008c72 <f_read+0x276>
			sect += csect;
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	0a5b      	lsrs	r3, r3, #9
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d039      	beq.n	8008b9e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b2a:	69fa      	ldr	r2, [r7, #28]
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	4413      	add	r3, r2
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	8952      	ldrh	r2, [r2, #10]
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d905      	bls.n	8008b44 <f_read+0x148>
					cc = fs->csize - csect;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	895b      	ldrh	r3, [r3, #10]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	7858      	ldrb	r0, [r3, #1]
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b4e:	f7fe f853 	bl	8006bf8 <disk_read>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <f_read+0x166>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	755a      	strb	r2, [r3, #21]
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e087      	b.n	8008c72 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	7d1b      	ldrb	r3, [r3, #20]
 8008b66:	b25b      	sxtb	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	da14      	bge.n	8008b96 <f_read+0x19a>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6a1a      	ldr	r2, [r3, #32]
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d90d      	bls.n	8008b96 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6a1a      	ldr	r2, [r3, #32]
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	025b      	lsls	r3, r3, #9
 8008b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b86:	18d0      	adds	r0, r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3330      	adds	r3, #48	; 0x30
 8008b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b90:	4619      	mov	r1, r3
 8008b92:	f7fe f911 	bl	8006db8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b98:	025b      	lsls	r3, r3, #9
 8008b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008b9c:	e050      	b.n	8008c40 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d02e      	beq.n	8008c06 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	7d1b      	ldrb	r3, [r3, #20]
 8008bac:	b25b      	sxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	da18      	bge.n	8008be4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	7858      	ldrb	r0, [r3, #1]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6a1a      	ldr	r2, [r3, #32]
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f7fe f839 	bl	8006c38 <disk_write>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <f_read+0x1da>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	755a      	strb	r2, [r3, #21]
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e04d      	b.n	8008c72 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	7d1b      	ldrb	r3, [r3, #20]
 8008bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	7858      	ldrb	r0, [r3, #1]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bee:	2301      	movs	r3, #1
 8008bf0:	69ba      	ldr	r2, [r7, #24]
 8008bf2:	f7fe f801 	bl	8006bf8 <disk_read>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d004      	beq.n	8008c06 <f_read+0x20a>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	755a      	strb	r2, [r3, #21]
 8008c02:	2301      	movs	r3, #1
 8008c04:	e035      	b.n	8008c72 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008c18:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d901      	bls.n	8008c26 <f_read+0x22a>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c34:	4413      	add	r3, r2
 8008c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c3c:	f7fe f8bc 	bl	8006db8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c44:	4413      	add	r3, r2
 8008c46:	627b      	str	r3, [r7, #36]	; 0x24
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4e:	441a      	add	r2, r3
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	619a      	str	r2, [r3, #24]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5a:	441a      	add	r2, r3
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f47f af01 	bne.w	8008a72 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3738      	adds	r7, #56	; 0x38
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b086      	sub	sp, #24
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f107 0208 	add.w	r2, r7, #8
 8008c88:	4611      	mov	r1, r2
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff fc7c 	bl	8008588 <validate>
 8008c90:	4603      	mov	r3, r0
 8008c92:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008c94:	7dfb      	ldrb	r3, [r7, #23]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d168      	bne.n	8008d6c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	7d1b      	ldrb	r3, [r3, #20]
 8008c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d062      	beq.n	8008d6c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	7d1b      	ldrb	r3, [r3, #20]
 8008caa:	b25b      	sxtb	r3, r3
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	da15      	bge.n	8008cdc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	7858      	ldrb	r0, [r3, #1]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1a      	ldr	r2, [r3, #32]
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f7fd ffba 	bl	8006c38 <disk_write>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <f_sync+0x54>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e04f      	b.n	8008d6e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	7d1b      	ldrb	r3, [r3, #20]
 8008cd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008cdc:	f7fd fa0e 	bl	80060fc <get_fattime>
 8008ce0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ce2:	68ba      	ldr	r2, [r7, #8]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4610      	mov	r0, r2
 8008cec:	f7fe fa92 	bl	8007214 <move_window>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d138      	bne.n	8008d6c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	330b      	adds	r3, #11
 8008d04:	781a      	ldrb	r2, [r3, #0]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	330b      	adds	r3, #11
 8008d0a:	f042 0220 	orr.w	r2, r2, #32
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6818      	ldr	r0, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68f9      	ldr	r1, [r7, #12]
 8008d1e:	f7fe ff9f 	bl	8007c60 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f103 021c 	add.w	r2, r3, #28
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7fe f816 	bl	8006d60 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3316      	adds	r3, #22
 8008d38:	6939      	ldr	r1, [r7, #16]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe f810 	bl	8006d60 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3312      	adds	r3, #18
 8008d44:	2100      	movs	r1, #0
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fd ffef 	bl	8006d2a <st_word>
					fs->wflag = 1;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fe fa8b 	bl	8007270 <sync_fs>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	7d1b      	ldrb	r3, [r3, #20]
 8008d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff ff7b 	bl	8008c7a <f_sync>
 8008d84:	4603      	mov	r3, r0
 8008d86:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d118      	bne.n	8008dc0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f107 0208 	add.w	r2, r7, #8
 8008d94:	4611      	mov	r1, r2
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff fbf6 	bl	8008588 <validate>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10c      	bne.n	8008dc0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe f98e 	bl	80070cc <dec_lock>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d102      	bne.n	8008dc0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008de2:	4b1f      	ldr	r3, [pc, #124]	; (8008e60 <FATFS_LinkDriverEx+0x94>)
 8008de4:	7a5b      	ldrb	r3, [r3, #9]
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d131      	bne.n	8008e50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008dec:	4b1c      	ldr	r3, [pc, #112]	; (8008e60 <FATFS_LinkDriverEx+0x94>)
 8008dee:	7a5b      	ldrb	r3, [r3, #9]
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	461a      	mov	r2, r3
 8008df4:	4b1a      	ldr	r3, [pc, #104]	; (8008e60 <FATFS_LinkDriverEx+0x94>)
 8008df6:	2100      	movs	r1, #0
 8008df8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008dfa:	4b19      	ldr	r3, [pc, #100]	; (8008e60 <FATFS_LinkDriverEx+0x94>)
 8008dfc:	7a5b      	ldrb	r3, [r3, #9]
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	4a17      	ldr	r2, [pc, #92]	; (8008e60 <FATFS_LinkDriverEx+0x94>)
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008e0a:	4b15      	ldr	r3, [pc, #84]	; (8008e60 <FATFS_LinkDriverEx+0x94>)
 8008e0c:	7a5b      	ldrb	r3, [r3, #9]
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	461a      	mov	r2, r3
 8008e12:	4b13      	ldr	r3, [pc, #76]	; (8008e60 <FATFS_LinkDriverEx+0x94>)
 8008e14:	4413      	add	r3, r2
 8008e16:	79fa      	ldrb	r2, [r7, #7]
 8008e18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008e1a:	4b11      	ldr	r3, [pc, #68]	; (8008e60 <FATFS_LinkDriverEx+0x94>)
 8008e1c:	7a5b      	ldrb	r3, [r3, #9]
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	b2d1      	uxtb	r1, r2
 8008e24:	4a0e      	ldr	r2, [pc, #56]	; (8008e60 <FATFS_LinkDriverEx+0x94>)
 8008e26:	7251      	strb	r1, [r2, #9]
 8008e28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008e2a:	7dbb      	ldrb	r3, [r7, #22]
 8008e2c:	3330      	adds	r3, #48	; 0x30
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	3301      	adds	r3, #1
 8008e38:	223a      	movs	r2, #58	; 0x3a
 8008e3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	3302      	adds	r3, #2
 8008e40:	222f      	movs	r2, #47	; 0x2f
 8008e42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	3303      	adds	r3, #3
 8008e48:	2200      	movs	r2, #0
 8008e4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	20013368 	.word	0x20013368

08008e64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e6e:	2200      	movs	r2, #0
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7ff ffaa 	bl	8008dcc <FATFS_LinkDriverEx>
 8008e78:	4603      	mov	r3, r0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3708      	adds	r7, #8
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <__errno>:
 8008e84:	4b01      	ldr	r3, [pc, #4]	; (8008e8c <__errno+0x8>)
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	20000024 	.word	0x20000024

08008e90 <__libc_init_array>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	4d0d      	ldr	r5, [pc, #52]	; (8008ec8 <__libc_init_array+0x38>)
 8008e94:	4c0d      	ldr	r4, [pc, #52]	; (8008ecc <__libc_init_array+0x3c>)
 8008e96:	1b64      	subs	r4, r4, r5
 8008e98:	10a4      	asrs	r4, r4, #2
 8008e9a:	2600      	movs	r6, #0
 8008e9c:	42a6      	cmp	r6, r4
 8008e9e:	d109      	bne.n	8008eb4 <__libc_init_array+0x24>
 8008ea0:	4d0b      	ldr	r5, [pc, #44]	; (8008ed0 <__libc_init_array+0x40>)
 8008ea2:	4c0c      	ldr	r4, [pc, #48]	; (8008ed4 <__libc_init_array+0x44>)
 8008ea4:	f001 ff6a 	bl	800ad7c <_init>
 8008ea8:	1b64      	subs	r4, r4, r5
 8008eaa:	10a4      	asrs	r4, r4, #2
 8008eac:	2600      	movs	r6, #0
 8008eae:	42a6      	cmp	r6, r4
 8008eb0:	d105      	bne.n	8008ebe <__libc_init_array+0x2e>
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008eb8:	4798      	blx	r3
 8008eba:	3601      	adds	r6, #1
 8008ebc:	e7ee      	b.n	8008e9c <__libc_init_array+0xc>
 8008ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec2:	4798      	blx	r3
 8008ec4:	3601      	adds	r6, #1
 8008ec6:	e7f2      	b.n	8008eae <__libc_init_array+0x1e>
 8008ec8:	0800af88 	.word	0x0800af88
 8008ecc:	0800af88 	.word	0x0800af88
 8008ed0:	0800af88 	.word	0x0800af88
 8008ed4:	0800af8c 	.word	0x0800af8c

08008ed8 <memset>:
 8008ed8:	4402      	add	r2, r0
 8008eda:	4603      	mov	r3, r0
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d100      	bne.n	8008ee2 <memset+0xa>
 8008ee0:	4770      	bx	lr
 8008ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee6:	e7f9      	b.n	8008edc <memset+0x4>

08008ee8 <iprintf>:
 8008ee8:	b40f      	push	{r0, r1, r2, r3}
 8008eea:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <iprintf+0x2c>)
 8008eec:	b513      	push	{r0, r1, r4, lr}
 8008eee:	681c      	ldr	r4, [r3, #0]
 8008ef0:	b124      	cbz	r4, 8008efc <iprintf+0x14>
 8008ef2:	69a3      	ldr	r3, [r4, #24]
 8008ef4:	b913      	cbnz	r3, 8008efc <iprintf+0x14>
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 fa5e 	bl	80093b8 <__sinit>
 8008efc:	ab05      	add	r3, sp, #20
 8008efe:	9a04      	ldr	r2, [sp, #16]
 8008f00:	68a1      	ldr	r1, [r4, #8]
 8008f02:	9301      	str	r3, [sp, #4]
 8008f04:	4620      	mov	r0, r4
 8008f06:	f000 fc67 	bl	80097d8 <_vfiprintf_r>
 8008f0a:	b002      	add	sp, #8
 8008f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f10:	b004      	add	sp, #16
 8008f12:	4770      	bx	lr
 8008f14:	20000024 	.word	0x20000024

08008f18 <_puts_r>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	460e      	mov	r6, r1
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	b118      	cbz	r0, 8008f28 <_puts_r+0x10>
 8008f20:	6983      	ldr	r3, [r0, #24]
 8008f22:	b90b      	cbnz	r3, 8008f28 <_puts_r+0x10>
 8008f24:	f000 fa48 	bl	80093b8 <__sinit>
 8008f28:	69ab      	ldr	r3, [r5, #24]
 8008f2a:	68ac      	ldr	r4, [r5, #8]
 8008f2c:	b913      	cbnz	r3, 8008f34 <_puts_r+0x1c>
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 fa42 	bl	80093b8 <__sinit>
 8008f34:	4b2c      	ldr	r3, [pc, #176]	; (8008fe8 <_puts_r+0xd0>)
 8008f36:	429c      	cmp	r4, r3
 8008f38:	d120      	bne.n	8008f7c <_puts_r+0x64>
 8008f3a:	686c      	ldr	r4, [r5, #4]
 8008f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f3e:	07db      	lsls	r3, r3, #31
 8008f40:	d405      	bmi.n	8008f4e <_puts_r+0x36>
 8008f42:	89a3      	ldrh	r3, [r4, #12]
 8008f44:	0598      	lsls	r0, r3, #22
 8008f46:	d402      	bmi.n	8008f4e <_puts_r+0x36>
 8008f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f4a:	f000 fad3 	bl	80094f4 <__retarget_lock_acquire_recursive>
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	0719      	lsls	r1, r3, #28
 8008f52:	d51d      	bpl.n	8008f90 <_puts_r+0x78>
 8008f54:	6923      	ldr	r3, [r4, #16]
 8008f56:	b1db      	cbz	r3, 8008f90 <_puts_r+0x78>
 8008f58:	3e01      	subs	r6, #1
 8008f5a:	68a3      	ldr	r3, [r4, #8]
 8008f5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f60:	3b01      	subs	r3, #1
 8008f62:	60a3      	str	r3, [r4, #8]
 8008f64:	bb39      	cbnz	r1, 8008fb6 <_puts_r+0x9e>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	da38      	bge.n	8008fdc <_puts_r+0xc4>
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	210a      	movs	r1, #10
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f000 f848 	bl	8009004 <__swbuf_r>
 8008f74:	3001      	adds	r0, #1
 8008f76:	d011      	beq.n	8008f9c <_puts_r+0x84>
 8008f78:	250a      	movs	r5, #10
 8008f7a:	e011      	b.n	8008fa0 <_puts_r+0x88>
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	; (8008fec <_puts_r+0xd4>)
 8008f7e:	429c      	cmp	r4, r3
 8008f80:	d101      	bne.n	8008f86 <_puts_r+0x6e>
 8008f82:	68ac      	ldr	r4, [r5, #8]
 8008f84:	e7da      	b.n	8008f3c <_puts_r+0x24>
 8008f86:	4b1a      	ldr	r3, [pc, #104]	; (8008ff0 <_puts_r+0xd8>)
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	bf08      	it	eq
 8008f8c:	68ec      	ldreq	r4, [r5, #12]
 8008f8e:	e7d5      	b.n	8008f3c <_puts_r+0x24>
 8008f90:	4621      	mov	r1, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	f000 f888 	bl	80090a8 <__swsetup_r>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d0dd      	beq.n	8008f58 <_puts_r+0x40>
 8008f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8008fa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fa2:	07da      	lsls	r2, r3, #31
 8008fa4:	d405      	bmi.n	8008fb2 <_puts_r+0x9a>
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	059b      	lsls	r3, r3, #22
 8008faa:	d402      	bmi.n	8008fb2 <_puts_r+0x9a>
 8008fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fae:	f000 faa2 	bl	80094f6 <__retarget_lock_release_recursive>
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	bd70      	pop	{r4, r5, r6, pc}
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	da04      	bge.n	8008fc4 <_puts_r+0xac>
 8008fba:	69a2      	ldr	r2, [r4, #24]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	dc06      	bgt.n	8008fce <_puts_r+0xb6>
 8008fc0:	290a      	cmp	r1, #10
 8008fc2:	d004      	beq.n	8008fce <_puts_r+0xb6>
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	6022      	str	r2, [r4, #0]
 8008fca:	7019      	strb	r1, [r3, #0]
 8008fcc:	e7c5      	b.n	8008f5a <_puts_r+0x42>
 8008fce:	4622      	mov	r2, r4
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f000 f817 	bl	8009004 <__swbuf_r>
 8008fd6:	3001      	adds	r0, #1
 8008fd8:	d1bf      	bne.n	8008f5a <_puts_r+0x42>
 8008fda:	e7df      	b.n	8008f9c <_puts_r+0x84>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	250a      	movs	r5, #10
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	6022      	str	r2, [r4, #0]
 8008fe4:	701d      	strb	r5, [r3, #0]
 8008fe6:	e7db      	b.n	8008fa0 <_puts_r+0x88>
 8008fe8:	0800aedc 	.word	0x0800aedc
 8008fec:	0800aefc 	.word	0x0800aefc
 8008ff0:	0800aebc 	.word	0x0800aebc

08008ff4 <puts>:
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <puts+0xc>)
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	f7ff bf8d 	b.w	8008f18 <_puts_r>
 8008ffe:	bf00      	nop
 8009000:	20000024 	.word	0x20000024

08009004 <__swbuf_r>:
 8009004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009006:	460e      	mov	r6, r1
 8009008:	4614      	mov	r4, r2
 800900a:	4605      	mov	r5, r0
 800900c:	b118      	cbz	r0, 8009016 <__swbuf_r+0x12>
 800900e:	6983      	ldr	r3, [r0, #24]
 8009010:	b90b      	cbnz	r3, 8009016 <__swbuf_r+0x12>
 8009012:	f000 f9d1 	bl	80093b8 <__sinit>
 8009016:	4b21      	ldr	r3, [pc, #132]	; (800909c <__swbuf_r+0x98>)
 8009018:	429c      	cmp	r4, r3
 800901a:	d12b      	bne.n	8009074 <__swbuf_r+0x70>
 800901c:	686c      	ldr	r4, [r5, #4]
 800901e:	69a3      	ldr	r3, [r4, #24]
 8009020:	60a3      	str	r3, [r4, #8]
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	071a      	lsls	r2, r3, #28
 8009026:	d52f      	bpl.n	8009088 <__swbuf_r+0x84>
 8009028:	6923      	ldr	r3, [r4, #16]
 800902a:	b36b      	cbz	r3, 8009088 <__swbuf_r+0x84>
 800902c:	6923      	ldr	r3, [r4, #16]
 800902e:	6820      	ldr	r0, [r4, #0]
 8009030:	1ac0      	subs	r0, r0, r3
 8009032:	6963      	ldr	r3, [r4, #20]
 8009034:	b2f6      	uxtb	r6, r6
 8009036:	4283      	cmp	r3, r0
 8009038:	4637      	mov	r7, r6
 800903a:	dc04      	bgt.n	8009046 <__swbuf_r+0x42>
 800903c:	4621      	mov	r1, r4
 800903e:	4628      	mov	r0, r5
 8009040:	f000 f926 	bl	8009290 <_fflush_r>
 8009044:	bb30      	cbnz	r0, 8009094 <__swbuf_r+0x90>
 8009046:	68a3      	ldr	r3, [r4, #8]
 8009048:	3b01      	subs	r3, #1
 800904a:	60a3      	str	r3, [r4, #8]
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	6022      	str	r2, [r4, #0]
 8009052:	701e      	strb	r6, [r3, #0]
 8009054:	6963      	ldr	r3, [r4, #20]
 8009056:	3001      	adds	r0, #1
 8009058:	4283      	cmp	r3, r0
 800905a:	d004      	beq.n	8009066 <__swbuf_r+0x62>
 800905c:	89a3      	ldrh	r3, [r4, #12]
 800905e:	07db      	lsls	r3, r3, #31
 8009060:	d506      	bpl.n	8009070 <__swbuf_r+0x6c>
 8009062:	2e0a      	cmp	r6, #10
 8009064:	d104      	bne.n	8009070 <__swbuf_r+0x6c>
 8009066:	4621      	mov	r1, r4
 8009068:	4628      	mov	r0, r5
 800906a:	f000 f911 	bl	8009290 <_fflush_r>
 800906e:	b988      	cbnz	r0, 8009094 <__swbuf_r+0x90>
 8009070:	4638      	mov	r0, r7
 8009072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009074:	4b0a      	ldr	r3, [pc, #40]	; (80090a0 <__swbuf_r+0x9c>)
 8009076:	429c      	cmp	r4, r3
 8009078:	d101      	bne.n	800907e <__swbuf_r+0x7a>
 800907a:	68ac      	ldr	r4, [r5, #8]
 800907c:	e7cf      	b.n	800901e <__swbuf_r+0x1a>
 800907e:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <__swbuf_r+0xa0>)
 8009080:	429c      	cmp	r4, r3
 8009082:	bf08      	it	eq
 8009084:	68ec      	ldreq	r4, [r5, #12]
 8009086:	e7ca      	b.n	800901e <__swbuf_r+0x1a>
 8009088:	4621      	mov	r1, r4
 800908a:	4628      	mov	r0, r5
 800908c:	f000 f80c 	bl	80090a8 <__swsetup_r>
 8009090:	2800      	cmp	r0, #0
 8009092:	d0cb      	beq.n	800902c <__swbuf_r+0x28>
 8009094:	f04f 37ff 	mov.w	r7, #4294967295
 8009098:	e7ea      	b.n	8009070 <__swbuf_r+0x6c>
 800909a:	bf00      	nop
 800909c:	0800aedc 	.word	0x0800aedc
 80090a0:	0800aefc 	.word	0x0800aefc
 80090a4:	0800aebc 	.word	0x0800aebc

080090a8 <__swsetup_r>:
 80090a8:	4b32      	ldr	r3, [pc, #200]	; (8009174 <__swsetup_r+0xcc>)
 80090aa:	b570      	push	{r4, r5, r6, lr}
 80090ac:	681d      	ldr	r5, [r3, #0]
 80090ae:	4606      	mov	r6, r0
 80090b0:	460c      	mov	r4, r1
 80090b2:	b125      	cbz	r5, 80090be <__swsetup_r+0x16>
 80090b4:	69ab      	ldr	r3, [r5, #24]
 80090b6:	b913      	cbnz	r3, 80090be <__swsetup_r+0x16>
 80090b8:	4628      	mov	r0, r5
 80090ba:	f000 f97d 	bl	80093b8 <__sinit>
 80090be:	4b2e      	ldr	r3, [pc, #184]	; (8009178 <__swsetup_r+0xd0>)
 80090c0:	429c      	cmp	r4, r3
 80090c2:	d10f      	bne.n	80090e4 <__swsetup_r+0x3c>
 80090c4:	686c      	ldr	r4, [r5, #4]
 80090c6:	89a3      	ldrh	r3, [r4, #12]
 80090c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090cc:	0719      	lsls	r1, r3, #28
 80090ce:	d42c      	bmi.n	800912a <__swsetup_r+0x82>
 80090d0:	06dd      	lsls	r5, r3, #27
 80090d2:	d411      	bmi.n	80090f8 <__swsetup_r+0x50>
 80090d4:	2309      	movs	r3, #9
 80090d6:	6033      	str	r3, [r6, #0]
 80090d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090dc:	81a3      	strh	r3, [r4, #12]
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	e03e      	b.n	8009162 <__swsetup_r+0xba>
 80090e4:	4b25      	ldr	r3, [pc, #148]	; (800917c <__swsetup_r+0xd4>)
 80090e6:	429c      	cmp	r4, r3
 80090e8:	d101      	bne.n	80090ee <__swsetup_r+0x46>
 80090ea:	68ac      	ldr	r4, [r5, #8]
 80090ec:	e7eb      	b.n	80090c6 <__swsetup_r+0x1e>
 80090ee:	4b24      	ldr	r3, [pc, #144]	; (8009180 <__swsetup_r+0xd8>)
 80090f0:	429c      	cmp	r4, r3
 80090f2:	bf08      	it	eq
 80090f4:	68ec      	ldreq	r4, [r5, #12]
 80090f6:	e7e6      	b.n	80090c6 <__swsetup_r+0x1e>
 80090f8:	0758      	lsls	r0, r3, #29
 80090fa:	d512      	bpl.n	8009122 <__swsetup_r+0x7a>
 80090fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090fe:	b141      	cbz	r1, 8009112 <__swsetup_r+0x6a>
 8009100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009104:	4299      	cmp	r1, r3
 8009106:	d002      	beq.n	800910e <__swsetup_r+0x66>
 8009108:	4630      	mov	r0, r6
 800910a:	f000 fa5b 	bl	80095c4 <_free_r>
 800910e:	2300      	movs	r3, #0
 8009110:	6363      	str	r3, [r4, #52]	; 0x34
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009118:	81a3      	strh	r3, [r4, #12]
 800911a:	2300      	movs	r3, #0
 800911c:	6063      	str	r3, [r4, #4]
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	f043 0308 	orr.w	r3, r3, #8
 8009128:	81a3      	strh	r3, [r4, #12]
 800912a:	6923      	ldr	r3, [r4, #16]
 800912c:	b94b      	cbnz	r3, 8009142 <__swsetup_r+0x9a>
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009138:	d003      	beq.n	8009142 <__swsetup_r+0x9a>
 800913a:	4621      	mov	r1, r4
 800913c:	4630      	mov	r0, r6
 800913e:	f000 fa01 	bl	8009544 <__smakebuf_r>
 8009142:	89a0      	ldrh	r0, [r4, #12]
 8009144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009148:	f010 0301 	ands.w	r3, r0, #1
 800914c:	d00a      	beq.n	8009164 <__swsetup_r+0xbc>
 800914e:	2300      	movs	r3, #0
 8009150:	60a3      	str	r3, [r4, #8]
 8009152:	6963      	ldr	r3, [r4, #20]
 8009154:	425b      	negs	r3, r3
 8009156:	61a3      	str	r3, [r4, #24]
 8009158:	6923      	ldr	r3, [r4, #16]
 800915a:	b943      	cbnz	r3, 800916e <__swsetup_r+0xc6>
 800915c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009160:	d1ba      	bne.n	80090d8 <__swsetup_r+0x30>
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	0781      	lsls	r1, r0, #30
 8009166:	bf58      	it	pl
 8009168:	6963      	ldrpl	r3, [r4, #20]
 800916a:	60a3      	str	r3, [r4, #8]
 800916c:	e7f4      	b.n	8009158 <__swsetup_r+0xb0>
 800916e:	2000      	movs	r0, #0
 8009170:	e7f7      	b.n	8009162 <__swsetup_r+0xba>
 8009172:	bf00      	nop
 8009174:	20000024 	.word	0x20000024
 8009178:	0800aedc 	.word	0x0800aedc
 800917c:	0800aefc 	.word	0x0800aefc
 8009180:	0800aebc 	.word	0x0800aebc

08009184 <__sflush_r>:
 8009184:	898a      	ldrh	r2, [r1, #12]
 8009186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800918a:	4605      	mov	r5, r0
 800918c:	0710      	lsls	r0, r2, #28
 800918e:	460c      	mov	r4, r1
 8009190:	d458      	bmi.n	8009244 <__sflush_r+0xc0>
 8009192:	684b      	ldr	r3, [r1, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	dc05      	bgt.n	80091a4 <__sflush_r+0x20>
 8009198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800919a:	2b00      	cmp	r3, #0
 800919c:	dc02      	bgt.n	80091a4 <__sflush_r+0x20>
 800919e:	2000      	movs	r0, #0
 80091a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091a6:	2e00      	cmp	r6, #0
 80091a8:	d0f9      	beq.n	800919e <__sflush_r+0x1a>
 80091aa:	2300      	movs	r3, #0
 80091ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091b0:	682f      	ldr	r7, [r5, #0]
 80091b2:	602b      	str	r3, [r5, #0]
 80091b4:	d032      	beq.n	800921c <__sflush_r+0x98>
 80091b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	075a      	lsls	r2, r3, #29
 80091bc:	d505      	bpl.n	80091ca <__sflush_r+0x46>
 80091be:	6863      	ldr	r3, [r4, #4]
 80091c0:	1ac0      	subs	r0, r0, r3
 80091c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091c4:	b10b      	cbz	r3, 80091ca <__sflush_r+0x46>
 80091c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80091c8:	1ac0      	subs	r0, r0, r3
 80091ca:	2300      	movs	r3, #0
 80091cc:	4602      	mov	r2, r0
 80091ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091d0:	6a21      	ldr	r1, [r4, #32]
 80091d2:	4628      	mov	r0, r5
 80091d4:	47b0      	blx	r6
 80091d6:	1c43      	adds	r3, r0, #1
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	d106      	bne.n	80091ea <__sflush_r+0x66>
 80091dc:	6829      	ldr	r1, [r5, #0]
 80091de:	291d      	cmp	r1, #29
 80091e0:	d82c      	bhi.n	800923c <__sflush_r+0xb8>
 80091e2:	4a2a      	ldr	r2, [pc, #168]	; (800928c <__sflush_r+0x108>)
 80091e4:	40ca      	lsrs	r2, r1
 80091e6:	07d6      	lsls	r6, r2, #31
 80091e8:	d528      	bpl.n	800923c <__sflush_r+0xb8>
 80091ea:	2200      	movs	r2, #0
 80091ec:	6062      	str	r2, [r4, #4]
 80091ee:	04d9      	lsls	r1, r3, #19
 80091f0:	6922      	ldr	r2, [r4, #16]
 80091f2:	6022      	str	r2, [r4, #0]
 80091f4:	d504      	bpl.n	8009200 <__sflush_r+0x7c>
 80091f6:	1c42      	adds	r2, r0, #1
 80091f8:	d101      	bne.n	80091fe <__sflush_r+0x7a>
 80091fa:	682b      	ldr	r3, [r5, #0]
 80091fc:	b903      	cbnz	r3, 8009200 <__sflush_r+0x7c>
 80091fe:	6560      	str	r0, [r4, #84]	; 0x54
 8009200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009202:	602f      	str	r7, [r5, #0]
 8009204:	2900      	cmp	r1, #0
 8009206:	d0ca      	beq.n	800919e <__sflush_r+0x1a>
 8009208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800920c:	4299      	cmp	r1, r3
 800920e:	d002      	beq.n	8009216 <__sflush_r+0x92>
 8009210:	4628      	mov	r0, r5
 8009212:	f000 f9d7 	bl	80095c4 <_free_r>
 8009216:	2000      	movs	r0, #0
 8009218:	6360      	str	r0, [r4, #52]	; 0x34
 800921a:	e7c1      	b.n	80091a0 <__sflush_r+0x1c>
 800921c:	6a21      	ldr	r1, [r4, #32]
 800921e:	2301      	movs	r3, #1
 8009220:	4628      	mov	r0, r5
 8009222:	47b0      	blx	r6
 8009224:	1c41      	adds	r1, r0, #1
 8009226:	d1c7      	bne.n	80091b8 <__sflush_r+0x34>
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0c4      	beq.n	80091b8 <__sflush_r+0x34>
 800922e:	2b1d      	cmp	r3, #29
 8009230:	d001      	beq.n	8009236 <__sflush_r+0xb2>
 8009232:	2b16      	cmp	r3, #22
 8009234:	d101      	bne.n	800923a <__sflush_r+0xb6>
 8009236:	602f      	str	r7, [r5, #0]
 8009238:	e7b1      	b.n	800919e <__sflush_r+0x1a>
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	e7ad      	b.n	80091a0 <__sflush_r+0x1c>
 8009244:	690f      	ldr	r7, [r1, #16]
 8009246:	2f00      	cmp	r7, #0
 8009248:	d0a9      	beq.n	800919e <__sflush_r+0x1a>
 800924a:	0793      	lsls	r3, r2, #30
 800924c:	680e      	ldr	r6, [r1, #0]
 800924e:	bf08      	it	eq
 8009250:	694b      	ldreq	r3, [r1, #20]
 8009252:	600f      	str	r7, [r1, #0]
 8009254:	bf18      	it	ne
 8009256:	2300      	movne	r3, #0
 8009258:	eba6 0807 	sub.w	r8, r6, r7
 800925c:	608b      	str	r3, [r1, #8]
 800925e:	f1b8 0f00 	cmp.w	r8, #0
 8009262:	dd9c      	ble.n	800919e <__sflush_r+0x1a>
 8009264:	6a21      	ldr	r1, [r4, #32]
 8009266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009268:	4643      	mov	r3, r8
 800926a:	463a      	mov	r2, r7
 800926c:	4628      	mov	r0, r5
 800926e:	47b0      	blx	r6
 8009270:	2800      	cmp	r0, #0
 8009272:	dc06      	bgt.n	8009282 <__sflush_r+0xfe>
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800927a:	81a3      	strh	r3, [r4, #12]
 800927c:	f04f 30ff 	mov.w	r0, #4294967295
 8009280:	e78e      	b.n	80091a0 <__sflush_r+0x1c>
 8009282:	4407      	add	r7, r0
 8009284:	eba8 0800 	sub.w	r8, r8, r0
 8009288:	e7e9      	b.n	800925e <__sflush_r+0xda>
 800928a:	bf00      	nop
 800928c:	20400001 	.word	0x20400001

08009290 <_fflush_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	690b      	ldr	r3, [r1, #16]
 8009294:	4605      	mov	r5, r0
 8009296:	460c      	mov	r4, r1
 8009298:	b913      	cbnz	r3, 80092a0 <_fflush_r+0x10>
 800929a:	2500      	movs	r5, #0
 800929c:	4628      	mov	r0, r5
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	b118      	cbz	r0, 80092aa <_fflush_r+0x1a>
 80092a2:	6983      	ldr	r3, [r0, #24]
 80092a4:	b90b      	cbnz	r3, 80092aa <_fflush_r+0x1a>
 80092a6:	f000 f887 	bl	80093b8 <__sinit>
 80092aa:	4b14      	ldr	r3, [pc, #80]	; (80092fc <_fflush_r+0x6c>)
 80092ac:	429c      	cmp	r4, r3
 80092ae:	d11b      	bne.n	80092e8 <_fflush_r+0x58>
 80092b0:	686c      	ldr	r4, [r5, #4]
 80092b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0ef      	beq.n	800929a <_fflush_r+0xa>
 80092ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092bc:	07d0      	lsls	r0, r2, #31
 80092be:	d404      	bmi.n	80092ca <_fflush_r+0x3a>
 80092c0:	0599      	lsls	r1, r3, #22
 80092c2:	d402      	bmi.n	80092ca <_fflush_r+0x3a>
 80092c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092c6:	f000 f915 	bl	80094f4 <__retarget_lock_acquire_recursive>
 80092ca:	4628      	mov	r0, r5
 80092cc:	4621      	mov	r1, r4
 80092ce:	f7ff ff59 	bl	8009184 <__sflush_r>
 80092d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80092d4:	07da      	lsls	r2, r3, #31
 80092d6:	4605      	mov	r5, r0
 80092d8:	d4e0      	bmi.n	800929c <_fflush_r+0xc>
 80092da:	89a3      	ldrh	r3, [r4, #12]
 80092dc:	059b      	lsls	r3, r3, #22
 80092de:	d4dd      	bmi.n	800929c <_fflush_r+0xc>
 80092e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092e2:	f000 f908 	bl	80094f6 <__retarget_lock_release_recursive>
 80092e6:	e7d9      	b.n	800929c <_fflush_r+0xc>
 80092e8:	4b05      	ldr	r3, [pc, #20]	; (8009300 <_fflush_r+0x70>)
 80092ea:	429c      	cmp	r4, r3
 80092ec:	d101      	bne.n	80092f2 <_fflush_r+0x62>
 80092ee:	68ac      	ldr	r4, [r5, #8]
 80092f0:	e7df      	b.n	80092b2 <_fflush_r+0x22>
 80092f2:	4b04      	ldr	r3, [pc, #16]	; (8009304 <_fflush_r+0x74>)
 80092f4:	429c      	cmp	r4, r3
 80092f6:	bf08      	it	eq
 80092f8:	68ec      	ldreq	r4, [r5, #12]
 80092fa:	e7da      	b.n	80092b2 <_fflush_r+0x22>
 80092fc:	0800aedc 	.word	0x0800aedc
 8009300:	0800aefc 	.word	0x0800aefc
 8009304:	0800aebc 	.word	0x0800aebc

08009308 <std>:
 8009308:	2300      	movs	r3, #0
 800930a:	b510      	push	{r4, lr}
 800930c:	4604      	mov	r4, r0
 800930e:	e9c0 3300 	strd	r3, r3, [r0]
 8009312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009316:	6083      	str	r3, [r0, #8]
 8009318:	8181      	strh	r1, [r0, #12]
 800931a:	6643      	str	r3, [r0, #100]	; 0x64
 800931c:	81c2      	strh	r2, [r0, #14]
 800931e:	6183      	str	r3, [r0, #24]
 8009320:	4619      	mov	r1, r3
 8009322:	2208      	movs	r2, #8
 8009324:	305c      	adds	r0, #92	; 0x5c
 8009326:	f7ff fdd7 	bl	8008ed8 <memset>
 800932a:	4b05      	ldr	r3, [pc, #20]	; (8009340 <std+0x38>)
 800932c:	6263      	str	r3, [r4, #36]	; 0x24
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <std+0x3c>)
 8009330:	62a3      	str	r3, [r4, #40]	; 0x28
 8009332:	4b05      	ldr	r3, [pc, #20]	; (8009348 <std+0x40>)
 8009334:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009336:	4b05      	ldr	r3, [pc, #20]	; (800934c <std+0x44>)
 8009338:	6224      	str	r4, [r4, #32]
 800933a:	6323      	str	r3, [r4, #48]	; 0x30
 800933c:	bd10      	pop	{r4, pc}
 800933e:	bf00      	nop
 8009340:	08009d81 	.word	0x08009d81
 8009344:	08009da3 	.word	0x08009da3
 8009348:	08009ddb 	.word	0x08009ddb
 800934c:	08009dff 	.word	0x08009dff

08009350 <_cleanup_r>:
 8009350:	4901      	ldr	r1, [pc, #4]	; (8009358 <_cleanup_r+0x8>)
 8009352:	f000 b8af 	b.w	80094b4 <_fwalk_reent>
 8009356:	bf00      	nop
 8009358:	08009291 	.word	0x08009291

0800935c <__sfmoreglue>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	2268      	movs	r2, #104	; 0x68
 8009360:	1e4d      	subs	r5, r1, #1
 8009362:	4355      	muls	r5, r2
 8009364:	460e      	mov	r6, r1
 8009366:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800936a:	f000 f997 	bl	800969c <_malloc_r>
 800936e:	4604      	mov	r4, r0
 8009370:	b140      	cbz	r0, 8009384 <__sfmoreglue+0x28>
 8009372:	2100      	movs	r1, #0
 8009374:	e9c0 1600 	strd	r1, r6, [r0]
 8009378:	300c      	adds	r0, #12
 800937a:	60a0      	str	r0, [r4, #8]
 800937c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009380:	f7ff fdaa 	bl	8008ed8 <memset>
 8009384:	4620      	mov	r0, r4
 8009386:	bd70      	pop	{r4, r5, r6, pc}

08009388 <__sfp_lock_acquire>:
 8009388:	4801      	ldr	r0, [pc, #4]	; (8009390 <__sfp_lock_acquire+0x8>)
 800938a:	f000 b8b3 	b.w	80094f4 <__retarget_lock_acquire_recursive>
 800938e:	bf00      	nop
 8009390:	20013375 	.word	0x20013375

08009394 <__sfp_lock_release>:
 8009394:	4801      	ldr	r0, [pc, #4]	; (800939c <__sfp_lock_release+0x8>)
 8009396:	f000 b8ae 	b.w	80094f6 <__retarget_lock_release_recursive>
 800939a:	bf00      	nop
 800939c:	20013375 	.word	0x20013375

080093a0 <__sinit_lock_acquire>:
 80093a0:	4801      	ldr	r0, [pc, #4]	; (80093a8 <__sinit_lock_acquire+0x8>)
 80093a2:	f000 b8a7 	b.w	80094f4 <__retarget_lock_acquire_recursive>
 80093a6:	bf00      	nop
 80093a8:	20013376 	.word	0x20013376

080093ac <__sinit_lock_release>:
 80093ac:	4801      	ldr	r0, [pc, #4]	; (80093b4 <__sinit_lock_release+0x8>)
 80093ae:	f000 b8a2 	b.w	80094f6 <__retarget_lock_release_recursive>
 80093b2:	bf00      	nop
 80093b4:	20013376 	.word	0x20013376

080093b8 <__sinit>:
 80093b8:	b510      	push	{r4, lr}
 80093ba:	4604      	mov	r4, r0
 80093bc:	f7ff fff0 	bl	80093a0 <__sinit_lock_acquire>
 80093c0:	69a3      	ldr	r3, [r4, #24]
 80093c2:	b11b      	cbz	r3, 80093cc <__sinit+0x14>
 80093c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093c8:	f7ff bff0 	b.w	80093ac <__sinit_lock_release>
 80093cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80093d0:	6523      	str	r3, [r4, #80]	; 0x50
 80093d2:	4b13      	ldr	r3, [pc, #76]	; (8009420 <__sinit+0x68>)
 80093d4:	4a13      	ldr	r2, [pc, #76]	; (8009424 <__sinit+0x6c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80093da:	42a3      	cmp	r3, r4
 80093dc:	bf04      	itt	eq
 80093de:	2301      	moveq	r3, #1
 80093e0:	61a3      	streq	r3, [r4, #24]
 80093e2:	4620      	mov	r0, r4
 80093e4:	f000 f820 	bl	8009428 <__sfp>
 80093e8:	6060      	str	r0, [r4, #4]
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 f81c 	bl	8009428 <__sfp>
 80093f0:	60a0      	str	r0, [r4, #8]
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 f818 	bl	8009428 <__sfp>
 80093f8:	2200      	movs	r2, #0
 80093fa:	60e0      	str	r0, [r4, #12]
 80093fc:	2104      	movs	r1, #4
 80093fe:	6860      	ldr	r0, [r4, #4]
 8009400:	f7ff ff82 	bl	8009308 <std>
 8009404:	68a0      	ldr	r0, [r4, #8]
 8009406:	2201      	movs	r2, #1
 8009408:	2109      	movs	r1, #9
 800940a:	f7ff ff7d 	bl	8009308 <std>
 800940e:	68e0      	ldr	r0, [r4, #12]
 8009410:	2202      	movs	r2, #2
 8009412:	2112      	movs	r1, #18
 8009414:	f7ff ff78 	bl	8009308 <std>
 8009418:	2301      	movs	r3, #1
 800941a:	61a3      	str	r3, [r4, #24]
 800941c:	e7d2      	b.n	80093c4 <__sinit+0xc>
 800941e:	bf00      	nop
 8009420:	0800aeb8 	.word	0x0800aeb8
 8009424:	08009351 	.word	0x08009351

08009428 <__sfp>:
 8009428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800942a:	4607      	mov	r7, r0
 800942c:	f7ff ffac 	bl	8009388 <__sfp_lock_acquire>
 8009430:	4b1e      	ldr	r3, [pc, #120]	; (80094ac <__sfp+0x84>)
 8009432:	681e      	ldr	r6, [r3, #0]
 8009434:	69b3      	ldr	r3, [r6, #24]
 8009436:	b913      	cbnz	r3, 800943e <__sfp+0x16>
 8009438:	4630      	mov	r0, r6
 800943a:	f7ff ffbd 	bl	80093b8 <__sinit>
 800943e:	3648      	adds	r6, #72	; 0x48
 8009440:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009444:	3b01      	subs	r3, #1
 8009446:	d503      	bpl.n	8009450 <__sfp+0x28>
 8009448:	6833      	ldr	r3, [r6, #0]
 800944a:	b30b      	cbz	r3, 8009490 <__sfp+0x68>
 800944c:	6836      	ldr	r6, [r6, #0]
 800944e:	e7f7      	b.n	8009440 <__sfp+0x18>
 8009450:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009454:	b9d5      	cbnz	r5, 800948c <__sfp+0x64>
 8009456:	4b16      	ldr	r3, [pc, #88]	; (80094b0 <__sfp+0x88>)
 8009458:	60e3      	str	r3, [r4, #12]
 800945a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800945e:	6665      	str	r5, [r4, #100]	; 0x64
 8009460:	f000 f847 	bl	80094f2 <__retarget_lock_init_recursive>
 8009464:	f7ff ff96 	bl	8009394 <__sfp_lock_release>
 8009468:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800946c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009470:	6025      	str	r5, [r4, #0]
 8009472:	61a5      	str	r5, [r4, #24]
 8009474:	2208      	movs	r2, #8
 8009476:	4629      	mov	r1, r5
 8009478:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800947c:	f7ff fd2c 	bl	8008ed8 <memset>
 8009480:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009484:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009488:	4620      	mov	r0, r4
 800948a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800948c:	3468      	adds	r4, #104	; 0x68
 800948e:	e7d9      	b.n	8009444 <__sfp+0x1c>
 8009490:	2104      	movs	r1, #4
 8009492:	4638      	mov	r0, r7
 8009494:	f7ff ff62 	bl	800935c <__sfmoreglue>
 8009498:	4604      	mov	r4, r0
 800949a:	6030      	str	r0, [r6, #0]
 800949c:	2800      	cmp	r0, #0
 800949e:	d1d5      	bne.n	800944c <__sfp+0x24>
 80094a0:	f7ff ff78 	bl	8009394 <__sfp_lock_release>
 80094a4:	230c      	movs	r3, #12
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	e7ee      	b.n	8009488 <__sfp+0x60>
 80094aa:	bf00      	nop
 80094ac:	0800aeb8 	.word	0x0800aeb8
 80094b0:	ffff0001 	.word	0xffff0001

080094b4 <_fwalk_reent>:
 80094b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b8:	4606      	mov	r6, r0
 80094ba:	4688      	mov	r8, r1
 80094bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094c0:	2700      	movs	r7, #0
 80094c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094c6:	f1b9 0901 	subs.w	r9, r9, #1
 80094ca:	d505      	bpl.n	80094d8 <_fwalk_reent+0x24>
 80094cc:	6824      	ldr	r4, [r4, #0]
 80094ce:	2c00      	cmp	r4, #0
 80094d0:	d1f7      	bne.n	80094c2 <_fwalk_reent+0xe>
 80094d2:	4638      	mov	r0, r7
 80094d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d8:	89ab      	ldrh	r3, [r5, #12]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d907      	bls.n	80094ee <_fwalk_reent+0x3a>
 80094de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094e2:	3301      	adds	r3, #1
 80094e4:	d003      	beq.n	80094ee <_fwalk_reent+0x3a>
 80094e6:	4629      	mov	r1, r5
 80094e8:	4630      	mov	r0, r6
 80094ea:	47c0      	blx	r8
 80094ec:	4307      	orrs	r7, r0
 80094ee:	3568      	adds	r5, #104	; 0x68
 80094f0:	e7e9      	b.n	80094c6 <_fwalk_reent+0x12>

080094f2 <__retarget_lock_init_recursive>:
 80094f2:	4770      	bx	lr

080094f4 <__retarget_lock_acquire_recursive>:
 80094f4:	4770      	bx	lr

080094f6 <__retarget_lock_release_recursive>:
 80094f6:	4770      	bx	lr

080094f8 <__swhatbuf_r>:
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	460e      	mov	r6, r1
 80094fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009500:	2900      	cmp	r1, #0
 8009502:	b096      	sub	sp, #88	; 0x58
 8009504:	4614      	mov	r4, r2
 8009506:	461d      	mov	r5, r3
 8009508:	da08      	bge.n	800951c <__swhatbuf_r+0x24>
 800950a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	602a      	str	r2, [r5, #0]
 8009512:	061a      	lsls	r2, r3, #24
 8009514:	d410      	bmi.n	8009538 <__swhatbuf_r+0x40>
 8009516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800951a:	e00e      	b.n	800953a <__swhatbuf_r+0x42>
 800951c:	466a      	mov	r2, sp
 800951e:	f000 fc95 	bl	8009e4c <_fstat_r>
 8009522:	2800      	cmp	r0, #0
 8009524:	dbf1      	blt.n	800950a <__swhatbuf_r+0x12>
 8009526:	9a01      	ldr	r2, [sp, #4]
 8009528:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800952c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009530:	425a      	negs	r2, r3
 8009532:	415a      	adcs	r2, r3
 8009534:	602a      	str	r2, [r5, #0]
 8009536:	e7ee      	b.n	8009516 <__swhatbuf_r+0x1e>
 8009538:	2340      	movs	r3, #64	; 0x40
 800953a:	2000      	movs	r0, #0
 800953c:	6023      	str	r3, [r4, #0]
 800953e:	b016      	add	sp, #88	; 0x58
 8009540:	bd70      	pop	{r4, r5, r6, pc}
	...

08009544 <__smakebuf_r>:
 8009544:	898b      	ldrh	r3, [r1, #12]
 8009546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009548:	079d      	lsls	r5, r3, #30
 800954a:	4606      	mov	r6, r0
 800954c:	460c      	mov	r4, r1
 800954e:	d507      	bpl.n	8009560 <__smakebuf_r+0x1c>
 8009550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009554:	6023      	str	r3, [r4, #0]
 8009556:	6123      	str	r3, [r4, #16]
 8009558:	2301      	movs	r3, #1
 800955a:	6163      	str	r3, [r4, #20]
 800955c:	b002      	add	sp, #8
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	ab01      	add	r3, sp, #4
 8009562:	466a      	mov	r2, sp
 8009564:	f7ff ffc8 	bl	80094f8 <__swhatbuf_r>
 8009568:	9900      	ldr	r1, [sp, #0]
 800956a:	4605      	mov	r5, r0
 800956c:	4630      	mov	r0, r6
 800956e:	f000 f895 	bl	800969c <_malloc_r>
 8009572:	b948      	cbnz	r0, 8009588 <__smakebuf_r+0x44>
 8009574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009578:	059a      	lsls	r2, r3, #22
 800957a:	d4ef      	bmi.n	800955c <__smakebuf_r+0x18>
 800957c:	f023 0303 	bic.w	r3, r3, #3
 8009580:	f043 0302 	orr.w	r3, r3, #2
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	e7e3      	b.n	8009550 <__smakebuf_r+0xc>
 8009588:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <__smakebuf_r+0x7c>)
 800958a:	62b3      	str	r3, [r6, #40]	; 0x28
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	6020      	str	r0, [r4, #0]
 8009590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009594:	81a3      	strh	r3, [r4, #12]
 8009596:	9b00      	ldr	r3, [sp, #0]
 8009598:	6163      	str	r3, [r4, #20]
 800959a:	9b01      	ldr	r3, [sp, #4]
 800959c:	6120      	str	r0, [r4, #16]
 800959e:	b15b      	cbz	r3, 80095b8 <__smakebuf_r+0x74>
 80095a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095a4:	4630      	mov	r0, r6
 80095a6:	f000 fc63 	bl	8009e70 <_isatty_r>
 80095aa:	b128      	cbz	r0, 80095b8 <__smakebuf_r+0x74>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	f023 0303 	bic.w	r3, r3, #3
 80095b2:	f043 0301 	orr.w	r3, r3, #1
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	89a0      	ldrh	r0, [r4, #12]
 80095ba:	4305      	orrs	r5, r0
 80095bc:	81a5      	strh	r5, [r4, #12]
 80095be:	e7cd      	b.n	800955c <__smakebuf_r+0x18>
 80095c0:	08009351 	.word	0x08009351

080095c4 <_free_r>:
 80095c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095c6:	2900      	cmp	r1, #0
 80095c8:	d044      	beq.n	8009654 <_free_r+0x90>
 80095ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ce:	9001      	str	r0, [sp, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f1a1 0404 	sub.w	r4, r1, #4
 80095d6:	bfb8      	it	lt
 80095d8:	18e4      	addlt	r4, r4, r3
 80095da:	f000 fc6b 	bl	8009eb4 <__malloc_lock>
 80095de:	4a1e      	ldr	r2, [pc, #120]	; (8009658 <_free_r+0x94>)
 80095e0:	9801      	ldr	r0, [sp, #4]
 80095e2:	6813      	ldr	r3, [r2, #0]
 80095e4:	b933      	cbnz	r3, 80095f4 <_free_r+0x30>
 80095e6:	6063      	str	r3, [r4, #4]
 80095e8:	6014      	str	r4, [r2, #0]
 80095ea:	b003      	add	sp, #12
 80095ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095f0:	f000 bc66 	b.w	8009ec0 <__malloc_unlock>
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	d908      	bls.n	800960a <_free_r+0x46>
 80095f8:	6825      	ldr	r5, [r4, #0]
 80095fa:	1961      	adds	r1, r4, r5
 80095fc:	428b      	cmp	r3, r1
 80095fe:	bf01      	itttt	eq
 8009600:	6819      	ldreq	r1, [r3, #0]
 8009602:	685b      	ldreq	r3, [r3, #4]
 8009604:	1949      	addeq	r1, r1, r5
 8009606:	6021      	streq	r1, [r4, #0]
 8009608:	e7ed      	b.n	80095e6 <_free_r+0x22>
 800960a:	461a      	mov	r2, r3
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	b10b      	cbz	r3, 8009614 <_free_r+0x50>
 8009610:	42a3      	cmp	r3, r4
 8009612:	d9fa      	bls.n	800960a <_free_r+0x46>
 8009614:	6811      	ldr	r1, [r2, #0]
 8009616:	1855      	adds	r5, r2, r1
 8009618:	42a5      	cmp	r5, r4
 800961a:	d10b      	bne.n	8009634 <_free_r+0x70>
 800961c:	6824      	ldr	r4, [r4, #0]
 800961e:	4421      	add	r1, r4
 8009620:	1854      	adds	r4, r2, r1
 8009622:	42a3      	cmp	r3, r4
 8009624:	6011      	str	r1, [r2, #0]
 8009626:	d1e0      	bne.n	80095ea <_free_r+0x26>
 8009628:	681c      	ldr	r4, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	6053      	str	r3, [r2, #4]
 800962e:	4421      	add	r1, r4
 8009630:	6011      	str	r1, [r2, #0]
 8009632:	e7da      	b.n	80095ea <_free_r+0x26>
 8009634:	d902      	bls.n	800963c <_free_r+0x78>
 8009636:	230c      	movs	r3, #12
 8009638:	6003      	str	r3, [r0, #0]
 800963a:	e7d6      	b.n	80095ea <_free_r+0x26>
 800963c:	6825      	ldr	r5, [r4, #0]
 800963e:	1961      	adds	r1, r4, r5
 8009640:	428b      	cmp	r3, r1
 8009642:	bf04      	itt	eq
 8009644:	6819      	ldreq	r1, [r3, #0]
 8009646:	685b      	ldreq	r3, [r3, #4]
 8009648:	6063      	str	r3, [r4, #4]
 800964a:	bf04      	itt	eq
 800964c:	1949      	addeq	r1, r1, r5
 800964e:	6021      	streq	r1, [r4, #0]
 8009650:	6054      	str	r4, [r2, #4]
 8009652:	e7ca      	b.n	80095ea <_free_r+0x26>
 8009654:	b003      	add	sp, #12
 8009656:	bd30      	pop	{r4, r5, pc}
 8009658:	20013378 	.word	0x20013378

0800965c <sbrk_aligned>:
 800965c:	b570      	push	{r4, r5, r6, lr}
 800965e:	4e0e      	ldr	r6, [pc, #56]	; (8009698 <sbrk_aligned+0x3c>)
 8009660:	460c      	mov	r4, r1
 8009662:	6831      	ldr	r1, [r6, #0]
 8009664:	4605      	mov	r5, r0
 8009666:	b911      	cbnz	r1, 800966e <sbrk_aligned+0x12>
 8009668:	f000 fb7a 	bl	8009d60 <_sbrk_r>
 800966c:	6030      	str	r0, [r6, #0]
 800966e:	4621      	mov	r1, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f000 fb75 	bl	8009d60 <_sbrk_r>
 8009676:	1c43      	adds	r3, r0, #1
 8009678:	d00a      	beq.n	8009690 <sbrk_aligned+0x34>
 800967a:	1cc4      	adds	r4, r0, #3
 800967c:	f024 0403 	bic.w	r4, r4, #3
 8009680:	42a0      	cmp	r0, r4
 8009682:	d007      	beq.n	8009694 <sbrk_aligned+0x38>
 8009684:	1a21      	subs	r1, r4, r0
 8009686:	4628      	mov	r0, r5
 8009688:	f000 fb6a 	bl	8009d60 <_sbrk_r>
 800968c:	3001      	adds	r0, #1
 800968e:	d101      	bne.n	8009694 <sbrk_aligned+0x38>
 8009690:	f04f 34ff 	mov.w	r4, #4294967295
 8009694:	4620      	mov	r0, r4
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	2001337c 	.word	0x2001337c

0800969c <_malloc_r>:
 800969c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a0:	1ccd      	adds	r5, r1, #3
 80096a2:	f025 0503 	bic.w	r5, r5, #3
 80096a6:	3508      	adds	r5, #8
 80096a8:	2d0c      	cmp	r5, #12
 80096aa:	bf38      	it	cc
 80096ac:	250c      	movcc	r5, #12
 80096ae:	2d00      	cmp	r5, #0
 80096b0:	4607      	mov	r7, r0
 80096b2:	db01      	blt.n	80096b8 <_malloc_r+0x1c>
 80096b4:	42a9      	cmp	r1, r5
 80096b6:	d905      	bls.n	80096c4 <_malloc_r+0x28>
 80096b8:	230c      	movs	r3, #12
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	2600      	movs	r6, #0
 80096be:	4630      	mov	r0, r6
 80096c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c4:	4e2e      	ldr	r6, [pc, #184]	; (8009780 <_malloc_r+0xe4>)
 80096c6:	f000 fbf5 	bl	8009eb4 <__malloc_lock>
 80096ca:	6833      	ldr	r3, [r6, #0]
 80096cc:	461c      	mov	r4, r3
 80096ce:	bb34      	cbnz	r4, 800971e <_malloc_r+0x82>
 80096d0:	4629      	mov	r1, r5
 80096d2:	4638      	mov	r0, r7
 80096d4:	f7ff ffc2 	bl	800965c <sbrk_aligned>
 80096d8:	1c43      	adds	r3, r0, #1
 80096da:	4604      	mov	r4, r0
 80096dc:	d14d      	bne.n	800977a <_malloc_r+0xde>
 80096de:	6834      	ldr	r4, [r6, #0]
 80096e0:	4626      	mov	r6, r4
 80096e2:	2e00      	cmp	r6, #0
 80096e4:	d140      	bne.n	8009768 <_malloc_r+0xcc>
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	4631      	mov	r1, r6
 80096ea:	4638      	mov	r0, r7
 80096ec:	eb04 0803 	add.w	r8, r4, r3
 80096f0:	f000 fb36 	bl	8009d60 <_sbrk_r>
 80096f4:	4580      	cmp	r8, r0
 80096f6:	d13a      	bne.n	800976e <_malloc_r+0xd2>
 80096f8:	6821      	ldr	r1, [r4, #0]
 80096fa:	3503      	adds	r5, #3
 80096fc:	1a6d      	subs	r5, r5, r1
 80096fe:	f025 0503 	bic.w	r5, r5, #3
 8009702:	3508      	adds	r5, #8
 8009704:	2d0c      	cmp	r5, #12
 8009706:	bf38      	it	cc
 8009708:	250c      	movcc	r5, #12
 800970a:	4629      	mov	r1, r5
 800970c:	4638      	mov	r0, r7
 800970e:	f7ff ffa5 	bl	800965c <sbrk_aligned>
 8009712:	3001      	adds	r0, #1
 8009714:	d02b      	beq.n	800976e <_malloc_r+0xd2>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	442b      	add	r3, r5
 800971a:	6023      	str	r3, [r4, #0]
 800971c:	e00e      	b.n	800973c <_malloc_r+0xa0>
 800971e:	6822      	ldr	r2, [r4, #0]
 8009720:	1b52      	subs	r2, r2, r5
 8009722:	d41e      	bmi.n	8009762 <_malloc_r+0xc6>
 8009724:	2a0b      	cmp	r2, #11
 8009726:	d916      	bls.n	8009756 <_malloc_r+0xba>
 8009728:	1961      	adds	r1, r4, r5
 800972a:	42a3      	cmp	r3, r4
 800972c:	6025      	str	r5, [r4, #0]
 800972e:	bf18      	it	ne
 8009730:	6059      	strne	r1, [r3, #4]
 8009732:	6863      	ldr	r3, [r4, #4]
 8009734:	bf08      	it	eq
 8009736:	6031      	streq	r1, [r6, #0]
 8009738:	5162      	str	r2, [r4, r5]
 800973a:	604b      	str	r3, [r1, #4]
 800973c:	4638      	mov	r0, r7
 800973e:	f104 060b 	add.w	r6, r4, #11
 8009742:	f000 fbbd 	bl	8009ec0 <__malloc_unlock>
 8009746:	f026 0607 	bic.w	r6, r6, #7
 800974a:	1d23      	adds	r3, r4, #4
 800974c:	1af2      	subs	r2, r6, r3
 800974e:	d0b6      	beq.n	80096be <_malloc_r+0x22>
 8009750:	1b9b      	subs	r3, r3, r6
 8009752:	50a3      	str	r3, [r4, r2]
 8009754:	e7b3      	b.n	80096be <_malloc_r+0x22>
 8009756:	6862      	ldr	r2, [r4, #4]
 8009758:	42a3      	cmp	r3, r4
 800975a:	bf0c      	ite	eq
 800975c:	6032      	streq	r2, [r6, #0]
 800975e:	605a      	strne	r2, [r3, #4]
 8009760:	e7ec      	b.n	800973c <_malloc_r+0xa0>
 8009762:	4623      	mov	r3, r4
 8009764:	6864      	ldr	r4, [r4, #4]
 8009766:	e7b2      	b.n	80096ce <_malloc_r+0x32>
 8009768:	4634      	mov	r4, r6
 800976a:	6876      	ldr	r6, [r6, #4]
 800976c:	e7b9      	b.n	80096e2 <_malloc_r+0x46>
 800976e:	230c      	movs	r3, #12
 8009770:	603b      	str	r3, [r7, #0]
 8009772:	4638      	mov	r0, r7
 8009774:	f000 fba4 	bl	8009ec0 <__malloc_unlock>
 8009778:	e7a1      	b.n	80096be <_malloc_r+0x22>
 800977a:	6025      	str	r5, [r4, #0]
 800977c:	e7de      	b.n	800973c <_malloc_r+0xa0>
 800977e:	bf00      	nop
 8009780:	20013378 	.word	0x20013378

08009784 <__sfputc_r>:
 8009784:	6893      	ldr	r3, [r2, #8]
 8009786:	3b01      	subs	r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	b410      	push	{r4}
 800978c:	6093      	str	r3, [r2, #8]
 800978e:	da08      	bge.n	80097a2 <__sfputc_r+0x1e>
 8009790:	6994      	ldr	r4, [r2, #24]
 8009792:	42a3      	cmp	r3, r4
 8009794:	db01      	blt.n	800979a <__sfputc_r+0x16>
 8009796:	290a      	cmp	r1, #10
 8009798:	d103      	bne.n	80097a2 <__sfputc_r+0x1e>
 800979a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979e:	f7ff bc31 	b.w	8009004 <__swbuf_r>
 80097a2:	6813      	ldr	r3, [r2, #0]
 80097a4:	1c58      	adds	r0, r3, #1
 80097a6:	6010      	str	r0, [r2, #0]
 80097a8:	7019      	strb	r1, [r3, #0]
 80097aa:	4608      	mov	r0, r1
 80097ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <__sfputs_r>:
 80097b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b4:	4606      	mov	r6, r0
 80097b6:	460f      	mov	r7, r1
 80097b8:	4614      	mov	r4, r2
 80097ba:	18d5      	adds	r5, r2, r3
 80097bc:	42ac      	cmp	r4, r5
 80097be:	d101      	bne.n	80097c4 <__sfputs_r+0x12>
 80097c0:	2000      	movs	r0, #0
 80097c2:	e007      	b.n	80097d4 <__sfputs_r+0x22>
 80097c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c8:	463a      	mov	r2, r7
 80097ca:	4630      	mov	r0, r6
 80097cc:	f7ff ffda 	bl	8009784 <__sfputc_r>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d1f3      	bne.n	80097bc <__sfputs_r+0xa>
 80097d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097d8 <_vfiprintf_r>:
 80097d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	460d      	mov	r5, r1
 80097de:	b09d      	sub	sp, #116	; 0x74
 80097e0:	4614      	mov	r4, r2
 80097e2:	4698      	mov	r8, r3
 80097e4:	4606      	mov	r6, r0
 80097e6:	b118      	cbz	r0, 80097f0 <_vfiprintf_r+0x18>
 80097e8:	6983      	ldr	r3, [r0, #24]
 80097ea:	b90b      	cbnz	r3, 80097f0 <_vfiprintf_r+0x18>
 80097ec:	f7ff fde4 	bl	80093b8 <__sinit>
 80097f0:	4b89      	ldr	r3, [pc, #548]	; (8009a18 <_vfiprintf_r+0x240>)
 80097f2:	429d      	cmp	r5, r3
 80097f4:	d11b      	bne.n	800982e <_vfiprintf_r+0x56>
 80097f6:	6875      	ldr	r5, [r6, #4]
 80097f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097fa:	07d9      	lsls	r1, r3, #31
 80097fc:	d405      	bmi.n	800980a <_vfiprintf_r+0x32>
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	059a      	lsls	r2, r3, #22
 8009802:	d402      	bmi.n	800980a <_vfiprintf_r+0x32>
 8009804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009806:	f7ff fe75 	bl	80094f4 <__retarget_lock_acquire_recursive>
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	071b      	lsls	r3, r3, #28
 800980e:	d501      	bpl.n	8009814 <_vfiprintf_r+0x3c>
 8009810:	692b      	ldr	r3, [r5, #16]
 8009812:	b9eb      	cbnz	r3, 8009850 <_vfiprintf_r+0x78>
 8009814:	4629      	mov	r1, r5
 8009816:	4630      	mov	r0, r6
 8009818:	f7ff fc46 	bl	80090a8 <__swsetup_r>
 800981c:	b1c0      	cbz	r0, 8009850 <_vfiprintf_r+0x78>
 800981e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009820:	07dc      	lsls	r4, r3, #31
 8009822:	d50e      	bpl.n	8009842 <_vfiprintf_r+0x6a>
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	b01d      	add	sp, #116	; 0x74
 800982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	4b7b      	ldr	r3, [pc, #492]	; (8009a1c <_vfiprintf_r+0x244>)
 8009830:	429d      	cmp	r5, r3
 8009832:	d101      	bne.n	8009838 <_vfiprintf_r+0x60>
 8009834:	68b5      	ldr	r5, [r6, #8]
 8009836:	e7df      	b.n	80097f8 <_vfiprintf_r+0x20>
 8009838:	4b79      	ldr	r3, [pc, #484]	; (8009a20 <_vfiprintf_r+0x248>)
 800983a:	429d      	cmp	r5, r3
 800983c:	bf08      	it	eq
 800983e:	68f5      	ldreq	r5, [r6, #12]
 8009840:	e7da      	b.n	80097f8 <_vfiprintf_r+0x20>
 8009842:	89ab      	ldrh	r3, [r5, #12]
 8009844:	0598      	lsls	r0, r3, #22
 8009846:	d4ed      	bmi.n	8009824 <_vfiprintf_r+0x4c>
 8009848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800984a:	f7ff fe54 	bl	80094f6 <__retarget_lock_release_recursive>
 800984e:	e7e9      	b.n	8009824 <_vfiprintf_r+0x4c>
 8009850:	2300      	movs	r3, #0
 8009852:	9309      	str	r3, [sp, #36]	; 0x24
 8009854:	2320      	movs	r3, #32
 8009856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800985a:	f8cd 800c 	str.w	r8, [sp, #12]
 800985e:	2330      	movs	r3, #48	; 0x30
 8009860:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a24 <_vfiprintf_r+0x24c>
 8009864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009868:	f04f 0901 	mov.w	r9, #1
 800986c:	4623      	mov	r3, r4
 800986e:	469a      	mov	sl, r3
 8009870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009874:	b10a      	cbz	r2, 800987a <_vfiprintf_r+0xa2>
 8009876:	2a25      	cmp	r2, #37	; 0x25
 8009878:	d1f9      	bne.n	800986e <_vfiprintf_r+0x96>
 800987a:	ebba 0b04 	subs.w	fp, sl, r4
 800987e:	d00b      	beq.n	8009898 <_vfiprintf_r+0xc0>
 8009880:	465b      	mov	r3, fp
 8009882:	4622      	mov	r2, r4
 8009884:	4629      	mov	r1, r5
 8009886:	4630      	mov	r0, r6
 8009888:	f7ff ff93 	bl	80097b2 <__sfputs_r>
 800988c:	3001      	adds	r0, #1
 800988e:	f000 80aa 	beq.w	80099e6 <_vfiprintf_r+0x20e>
 8009892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009894:	445a      	add	r2, fp
 8009896:	9209      	str	r2, [sp, #36]	; 0x24
 8009898:	f89a 3000 	ldrb.w	r3, [sl]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 80a2 	beq.w	80099e6 <_vfiprintf_r+0x20e>
 80098a2:	2300      	movs	r3, #0
 80098a4:	f04f 32ff 	mov.w	r2, #4294967295
 80098a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098ac:	f10a 0a01 	add.w	sl, sl, #1
 80098b0:	9304      	str	r3, [sp, #16]
 80098b2:	9307      	str	r3, [sp, #28]
 80098b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098b8:	931a      	str	r3, [sp, #104]	; 0x68
 80098ba:	4654      	mov	r4, sl
 80098bc:	2205      	movs	r2, #5
 80098be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c2:	4858      	ldr	r0, [pc, #352]	; (8009a24 <_vfiprintf_r+0x24c>)
 80098c4:	f7f6 fc84 	bl	80001d0 <memchr>
 80098c8:	9a04      	ldr	r2, [sp, #16]
 80098ca:	b9d8      	cbnz	r0, 8009904 <_vfiprintf_r+0x12c>
 80098cc:	06d1      	lsls	r1, r2, #27
 80098ce:	bf44      	itt	mi
 80098d0:	2320      	movmi	r3, #32
 80098d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098d6:	0713      	lsls	r3, r2, #28
 80098d8:	bf44      	itt	mi
 80098da:	232b      	movmi	r3, #43	; 0x2b
 80098dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098e0:	f89a 3000 	ldrb.w	r3, [sl]
 80098e4:	2b2a      	cmp	r3, #42	; 0x2a
 80098e6:	d015      	beq.n	8009914 <_vfiprintf_r+0x13c>
 80098e8:	9a07      	ldr	r2, [sp, #28]
 80098ea:	4654      	mov	r4, sl
 80098ec:	2000      	movs	r0, #0
 80098ee:	f04f 0c0a 	mov.w	ip, #10
 80098f2:	4621      	mov	r1, r4
 80098f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f8:	3b30      	subs	r3, #48	; 0x30
 80098fa:	2b09      	cmp	r3, #9
 80098fc:	d94e      	bls.n	800999c <_vfiprintf_r+0x1c4>
 80098fe:	b1b0      	cbz	r0, 800992e <_vfiprintf_r+0x156>
 8009900:	9207      	str	r2, [sp, #28]
 8009902:	e014      	b.n	800992e <_vfiprintf_r+0x156>
 8009904:	eba0 0308 	sub.w	r3, r0, r8
 8009908:	fa09 f303 	lsl.w	r3, r9, r3
 800990c:	4313      	orrs	r3, r2
 800990e:	9304      	str	r3, [sp, #16]
 8009910:	46a2      	mov	sl, r4
 8009912:	e7d2      	b.n	80098ba <_vfiprintf_r+0xe2>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	1d19      	adds	r1, r3, #4
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	9103      	str	r1, [sp, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	bfbb      	ittet	lt
 8009920:	425b      	neglt	r3, r3
 8009922:	f042 0202 	orrlt.w	r2, r2, #2
 8009926:	9307      	strge	r3, [sp, #28]
 8009928:	9307      	strlt	r3, [sp, #28]
 800992a:	bfb8      	it	lt
 800992c:	9204      	strlt	r2, [sp, #16]
 800992e:	7823      	ldrb	r3, [r4, #0]
 8009930:	2b2e      	cmp	r3, #46	; 0x2e
 8009932:	d10c      	bne.n	800994e <_vfiprintf_r+0x176>
 8009934:	7863      	ldrb	r3, [r4, #1]
 8009936:	2b2a      	cmp	r3, #42	; 0x2a
 8009938:	d135      	bne.n	80099a6 <_vfiprintf_r+0x1ce>
 800993a:	9b03      	ldr	r3, [sp, #12]
 800993c:	1d1a      	adds	r2, r3, #4
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	9203      	str	r2, [sp, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	bfb8      	it	lt
 8009946:	f04f 33ff 	movlt.w	r3, #4294967295
 800994a:	3402      	adds	r4, #2
 800994c:	9305      	str	r3, [sp, #20]
 800994e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a34 <_vfiprintf_r+0x25c>
 8009952:	7821      	ldrb	r1, [r4, #0]
 8009954:	2203      	movs	r2, #3
 8009956:	4650      	mov	r0, sl
 8009958:	f7f6 fc3a 	bl	80001d0 <memchr>
 800995c:	b140      	cbz	r0, 8009970 <_vfiprintf_r+0x198>
 800995e:	2340      	movs	r3, #64	; 0x40
 8009960:	eba0 000a 	sub.w	r0, r0, sl
 8009964:	fa03 f000 	lsl.w	r0, r3, r0
 8009968:	9b04      	ldr	r3, [sp, #16]
 800996a:	4303      	orrs	r3, r0
 800996c:	3401      	adds	r4, #1
 800996e:	9304      	str	r3, [sp, #16]
 8009970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009974:	482c      	ldr	r0, [pc, #176]	; (8009a28 <_vfiprintf_r+0x250>)
 8009976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800997a:	2206      	movs	r2, #6
 800997c:	f7f6 fc28 	bl	80001d0 <memchr>
 8009980:	2800      	cmp	r0, #0
 8009982:	d03f      	beq.n	8009a04 <_vfiprintf_r+0x22c>
 8009984:	4b29      	ldr	r3, [pc, #164]	; (8009a2c <_vfiprintf_r+0x254>)
 8009986:	bb1b      	cbnz	r3, 80099d0 <_vfiprintf_r+0x1f8>
 8009988:	9b03      	ldr	r3, [sp, #12]
 800998a:	3307      	adds	r3, #7
 800998c:	f023 0307 	bic.w	r3, r3, #7
 8009990:	3308      	adds	r3, #8
 8009992:	9303      	str	r3, [sp, #12]
 8009994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009996:	443b      	add	r3, r7
 8009998:	9309      	str	r3, [sp, #36]	; 0x24
 800999a:	e767      	b.n	800986c <_vfiprintf_r+0x94>
 800999c:	fb0c 3202 	mla	r2, ip, r2, r3
 80099a0:	460c      	mov	r4, r1
 80099a2:	2001      	movs	r0, #1
 80099a4:	e7a5      	b.n	80098f2 <_vfiprintf_r+0x11a>
 80099a6:	2300      	movs	r3, #0
 80099a8:	3401      	adds	r4, #1
 80099aa:	9305      	str	r3, [sp, #20]
 80099ac:	4619      	mov	r1, r3
 80099ae:	f04f 0c0a 	mov.w	ip, #10
 80099b2:	4620      	mov	r0, r4
 80099b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b8:	3a30      	subs	r2, #48	; 0x30
 80099ba:	2a09      	cmp	r2, #9
 80099bc:	d903      	bls.n	80099c6 <_vfiprintf_r+0x1ee>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0c5      	beq.n	800994e <_vfiprintf_r+0x176>
 80099c2:	9105      	str	r1, [sp, #20]
 80099c4:	e7c3      	b.n	800994e <_vfiprintf_r+0x176>
 80099c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ca:	4604      	mov	r4, r0
 80099cc:	2301      	movs	r3, #1
 80099ce:	e7f0      	b.n	80099b2 <_vfiprintf_r+0x1da>
 80099d0:	ab03      	add	r3, sp, #12
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	462a      	mov	r2, r5
 80099d6:	4b16      	ldr	r3, [pc, #88]	; (8009a30 <_vfiprintf_r+0x258>)
 80099d8:	a904      	add	r1, sp, #16
 80099da:	4630      	mov	r0, r6
 80099dc:	f3af 8000 	nop.w
 80099e0:	4607      	mov	r7, r0
 80099e2:	1c78      	adds	r0, r7, #1
 80099e4:	d1d6      	bne.n	8009994 <_vfiprintf_r+0x1bc>
 80099e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099e8:	07d9      	lsls	r1, r3, #31
 80099ea:	d405      	bmi.n	80099f8 <_vfiprintf_r+0x220>
 80099ec:	89ab      	ldrh	r3, [r5, #12]
 80099ee:	059a      	lsls	r2, r3, #22
 80099f0:	d402      	bmi.n	80099f8 <_vfiprintf_r+0x220>
 80099f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099f4:	f7ff fd7f 	bl	80094f6 <__retarget_lock_release_recursive>
 80099f8:	89ab      	ldrh	r3, [r5, #12]
 80099fa:	065b      	lsls	r3, r3, #25
 80099fc:	f53f af12 	bmi.w	8009824 <_vfiprintf_r+0x4c>
 8009a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a02:	e711      	b.n	8009828 <_vfiprintf_r+0x50>
 8009a04:	ab03      	add	r3, sp, #12
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	462a      	mov	r2, r5
 8009a0a:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <_vfiprintf_r+0x258>)
 8009a0c:	a904      	add	r1, sp, #16
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f000 f880 	bl	8009b14 <_printf_i>
 8009a14:	e7e4      	b.n	80099e0 <_vfiprintf_r+0x208>
 8009a16:	bf00      	nop
 8009a18:	0800aedc 	.word	0x0800aedc
 8009a1c:	0800aefc 	.word	0x0800aefc
 8009a20:	0800aebc 	.word	0x0800aebc
 8009a24:	0800af1c 	.word	0x0800af1c
 8009a28:	0800af26 	.word	0x0800af26
 8009a2c:	00000000 	.word	0x00000000
 8009a30:	080097b3 	.word	0x080097b3
 8009a34:	0800af22 	.word	0x0800af22

08009a38 <_printf_common>:
 8009a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3c:	4616      	mov	r6, r2
 8009a3e:	4699      	mov	r9, r3
 8009a40:	688a      	ldr	r2, [r1, #8]
 8009a42:	690b      	ldr	r3, [r1, #16]
 8009a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	bfb8      	it	lt
 8009a4c:	4613      	movlt	r3, r2
 8009a4e:	6033      	str	r3, [r6, #0]
 8009a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a54:	4607      	mov	r7, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	b10a      	cbz	r2, 8009a5e <_printf_common+0x26>
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	6033      	str	r3, [r6, #0]
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	0699      	lsls	r1, r3, #26
 8009a62:	bf42      	ittt	mi
 8009a64:	6833      	ldrmi	r3, [r6, #0]
 8009a66:	3302      	addmi	r3, #2
 8009a68:	6033      	strmi	r3, [r6, #0]
 8009a6a:	6825      	ldr	r5, [r4, #0]
 8009a6c:	f015 0506 	ands.w	r5, r5, #6
 8009a70:	d106      	bne.n	8009a80 <_printf_common+0x48>
 8009a72:	f104 0a19 	add.w	sl, r4, #25
 8009a76:	68e3      	ldr	r3, [r4, #12]
 8009a78:	6832      	ldr	r2, [r6, #0]
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	42ab      	cmp	r3, r5
 8009a7e:	dc26      	bgt.n	8009ace <_printf_common+0x96>
 8009a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a84:	1e13      	subs	r3, r2, #0
 8009a86:	6822      	ldr	r2, [r4, #0]
 8009a88:	bf18      	it	ne
 8009a8a:	2301      	movne	r3, #1
 8009a8c:	0692      	lsls	r2, r2, #26
 8009a8e:	d42b      	bmi.n	8009ae8 <_printf_common+0xb0>
 8009a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a94:	4649      	mov	r1, r9
 8009a96:	4638      	mov	r0, r7
 8009a98:	47c0      	blx	r8
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	d01e      	beq.n	8009adc <_printf_common+0xa4>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	68e5      	ldr	r5, [r4, #12]
 8009aa2:	6832      	ldr	r2, [r6, #0]
 8009aa4:	f003 0306 	and.w	r3, r3, #6
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	bf08      	it	eq
 8009aac:	1aad      	subeq	r5, r5, r2
 8009aae:	68a3      	ldr	r3, [r4, #8]
 8009ab0:	6922      	ldr	r2, [r4, #16]
 8009ab2:	bf0c      	ite	eq
 8009ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab8:	2500      	movne	r5, #0
 8009aba:	4293      	cmp	r3, r2
 8009abc:	bfc4      	itt	gt
 8009abe:	1a9b      	subgt	r3, r3, r2
 8009ac0:	18ed      	addgt	r5, r5, r3
 8009ac2:	2600      	movs	r6, #0
 8009ac4:	341a      	adds	r4, #26
 8009ac6:	42b5      	cmp	r5, r6
 8009ac8:	d11a      	bne.n	8009b00 <_printf_common+0xc8>
 8009aca:	2000      	movs	r0, #0
 8009acc:	e008      	b.n	8009ae0 <_printf_common+0xa8>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	4652      	mov	r2, sl
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	47c0      	blx	r8
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d103      	bne.n	8009ae4 <_printf_common+0xac>
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae4:	3501      	adds	r5, #1
 8009ae6:	e7c6      	b.n	8009a76 <_printf_common+0x3e>
 8009ae8:	18e1      	adds	r1, r4, r3
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	2030      	movs	r0, #48	; 0x30
 8009aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009af2:	4422      	add	r2, r4
 8009af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009afc:	3302      	adds	r3, #2
 8009afe:	e7c7      	b.n	8009a90 <_printf_common+0x58>
 8009b00:	2301      	movs	r3, #1
 8009b02:	4622      	mov	r2, r4
 8009b04:	4649      	mov	r1, r9
 8009b06:	4638      	mov	r0, r7
 8009b08:	47c0      	blx	r8
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	d0e6      	beq.n	8009adc <_printf_common+0xa4>
 8009b0e:	3601      	adds	r6, #1
 8009b10:	e7d9      	b.n	8009ac6 <_printf_common+0x8e>
	...

08009b14 <_printf_i>:
 8009b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b18:	7e0f      	ldrb	r7, [r1, #24]
 8009b1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b1c:	2f78      	cmp	r7, #120	; 0x78
 8009b1e:	4691      	mov	r9, r2
 8009b20:	4680      	mov	r8, r0
 8009b22:	460c      	mov	r4, r1
 8009b24:	469a      	mov	sl, r3
 8009b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b2a:	d807      	bhi.n	8009b3c <_printf_i+0x28>
 8009b2c:	2f62      	cmp	r7, #98	; 0x62
 8009b2e:	d80a      	bhi.n	8009b46 <_printf_i+0x32>
 8009b30:	2f00      	cmp	r7, #0
 8009b32:	f000 80d8 	beq.w	8009ce6 <_printf_i+0x1d2>
 8009b36:	2f58      	cmp	r7, #88	; 0x58
 8009b38:	f000 80a3 	beq.w	8009c82 <_printf_i+0x16e>
 8009b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b44:	e03a      	b.n	8009bbc <_printf_i+0xa8>
 8009b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b4a:	2b15      	cmp	r3, #21
 8009b4c:	d8f6      	bhi.n	8009b3c <_printf_i+0x28>
 8009b4e:	a101      	add	r1, pc, #4	; (adr r1, 8009b54 <_printf_i+0x40>)
 8009b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b54:	08009bad 	.word	0x08009bad
 8009b58:	08009bc1 	.word	0x08009bc1
 8009b5c:	08009b3d 	.word	0x08009b3d
 8009b60:	08009b3d 	.word	0x08009b3d
 8009b64:	08009b3d 	.word	0x08009b3d
 8009b68:	08009b3d 	.word	0x08009b3d
 8009b6c:	08009bc1 	.word	0x08009bc1
 8009b70:	08009b3d 	.word	0x08009b3d
 8009b74:	08009b3d 	.word	0x08009b3d
 8009b78:	08009b3d 	.word	0x08009b3d
 8009b7c:	08009b3d 	.word	0x08009b3d
 8009b80:	08009ccd 	.word	0x08009ccd
 8009b84:	08009bf1 	.word	0x08009bf1
 8009b88:	08009caf 	.word	0x08009caf
 8009b8c:	08009b3d 	.word	0x08009b3d
 8009b90:	08009b3d 	.word	0x08009b3d
 8009b94:	08009cef 	.word	0x08009cef
 8009b98:	08009b3d 	.word	0x08009b3d
 8009b9c:	08009bf1 	.word	0x08009bf1
 8009ba0:	08009b3d 	.word	0x08009b3d
 8009ba4:	08009b3d 	.word	0x08009b3d
 8009ba8:	08009cb7 	.word	0x08009cb7
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	1d1a      	adds	r2, r3, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	602a      	str	r2, [r5, #0]
 8009bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e0a3      	b.n	8009d08 <_printf_i+0x1f4>
 8009bc0:	6820      	ldr	r0, [r4, #0]
 8009bc2:	6829      	ldr	r1, [r5, #0]
 8009bc4:	0606      	lsls	r6, r0, #24
 8009bc6:	f101 0304 	add.w	r3, r1, #4
 8009bca:	d50a      	bpl.n	8009be2 <_printf_i+0xce>
 8009bcc:	680e      	ldr	r6, [r1, #0]
 8009bce:	602b      	str	r3, [r5, #0]
 8009bd0:	2e00      	cmp	r6, #0
 8009bd2:	da03      	bge.n	8009bdc <_printf_i+0xc8>
 8009bd4:	232d      	movs	r3, #45	; 0x2d
 8009bd6:	4276      	negs	r6, r6
 8009bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bdc:	485e      	ldr	r0, [pc, #376]	; (8009d58 <_printf_i+0x244>)
 8009bde:	230a      	movs	r3, #10
 8009be0:	e019      	b.n	8009c16 <_printf_i+0x102>
 8009be2:	680e      	ldr	r6, [r1, #0]
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009bea:	bf18      	it	ne
 8009bec:	b236      	sxthne	r6, r6
 8009bee:	e7ef      	b.n	8009bd0 <_printf_i+0xbc>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	6820      	ldr	r0, [r4, #0]
 8009bf4:	1d19      	adds	r1, r3, #4
 8009bf6:	6029      	str	r1, [r5, #0]
 8009bf8:	0601      	lsls	r1, r0, #24
 8009bfa:	d501      	bpl.n	8009c00 <_printf_i+0xec>
 8009bfc:	681e      	ldr	r6, [r3, #0]
 8009bfe:	e002      	b.n	8009c06 <_printf_i+0xf2>
 8009c00:	0646      	lsls	r6, r0, #25
 8009c02:	d5fb      	bpl.n	8009bfc <_printf_i+0xe8>
 8009c04:	881e      	ldrh	r6, [r3, #0]
 8009c06:	4854      	ldr	r0, [pc, #336]	; (8009d58 <_printf_i+0x244>)
 8009c08:	2f6f      	cmp	r7, #111	; 0x6f
 8009c0a:	bf0c      	ite	eq
 8009c0c:	2308      	moveq	r3, #8
 8009c0e:	230a      	movne	r3, #10
 8009c10:	2100      	movs	r1, #0
 8009c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c16:	6865      	ldr	r5, [r4, #4]
 8009c18:	60a5      	str	r5, [r4, #8]
 8009c1a:	2d00      	cmp	r5, #0
 8009c1c:	bfa2      	ittt	ge
 8009c1e:	6821      	ldrge	r1, [r4, #0]
 8009c20:	f021 0104 	bicge.w	r1, r1, #4
 8009c24:	6021      	strge	r1, [r4, #0]
 8009c26:	b90e      	cbnz	r6, 8009c2c <_printf_i+0x118>
 8009c28:	2d00      	cmp	r5, #0
 8009c2a:	d04d      	beq.n	8009cc8 <_printf_i+0x1b4>
 8009c2c:	4615      	mov	r5, r2
 8009c2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c32:	fb03 6711 	mls	r7, r3, r1, r6
 8009c36:	5dc7      	ldrb	r7, [r0, r7]
 8009c38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c3c:	4637      	mov	r7, r6
 8009c3e:	42bb      	cmp	r3, r7
 8009c40:	460e      	mov	r6, r1
 8009c42:	d9f4      	bls.n	8009c2e <_printf_i+0x11a>
 8009c44:	2b08      	cmp	r3, #8
 8009c46:	d10b      	bne.n	8009c60 <_printf_i+0x14c>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	07de      	lsls	r6, r3, #31
 8009c4c:	d508      	bpl.n	8009c60 <_printf_i+0x14c>
 8009c4e:	6923      	ldr	r3, [r4, #16]
 8009c50:	6861      	ldr	r1, [r4, #4]
 8009c52:	4299      	cmp	r1, r3
 8009c54:	bfde      	ittt	le
 8009c56:	2330      	movle	r3, #48	; 0x30
 8009c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c60:	1b52      	subs	r2, r2, r5
 8009c62:	6122      	str	r2, [r4, #16]
 8009c64:	f8cd a000 	str.w	sl, [sp]
 8009c68:	464b      	mov	r3, r9
 8009c6a:	aa03      	add	r2, sp, #12
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	4640      	mov	r0, r8
 8009c70:	f7ff fee2 	bl	8009a38 <_printf_common>
 8009c74:	3001      	adds	r0, #1
 8009c76:	d14c      	bne.n	8009d12 <_printf_i+0x1fe>
 8009c78:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7c:	b004      	add	sp, #16
 8009c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c82:	4835      	ldr	r0, [pc, #212]	; (8009d58 <_printf_i+0x244>)
 8009c84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c88:	6829      	ldr	r1, [r5, #0]
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c90:	6029      	str	r1, [r5, #0]
 8009c92:	061d      	lsls	r5, r3, #24
 8009c94:	d514      	bpl.n	8009cc0 <_printf_i+0x1ac>
 8009c96:	07df      	lsls	r7, r3, #31
 8009c98:	bf44      	itt	mi
 8009c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8009c9e:	6023      	strmi	r3, [r4, #0]
 8009ca0:	b91e      	cbnz	r6, 8009caa <_printf_i+0x196>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	f023 0320 	bic.w	r3, r3, #32
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	2310      	movs	r3, #16
 8009cac:	e7b0      	b.n	8009c10 <_printf_i+0xfc>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	f043 0320 	orr.w	r3, r3, #32
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	2378      	movs	r3, #120	; 0x78
 8009cb8:	4828      	ldr	r0, [pc, #160]	; (8009d5c <_printf_i+0x248>)
 8009cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cbe:	e7e3      	b.n	8009c88 <_printf_i+0x174>
 8009cc0:	0659      	lsls	r1, r3, #25
 8009cc2:	bf48      	it	mi
 8009cc4:	b2b6      	uxthmi	r6, r6
 8009cc6:	e7e6      	b.n	8009c96 <_printf_i+0x182>
 8009cc8:	4615      	mov	r5, r2
 8009cca:	e7bb      	b.n	8009c44 <_printf_i+0x130>
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	6826      	ldr	r6, [r4, #0]
 8009cd0:	6961      	ldr	r1, [r4, #20]
 8009cd2:	1d18      	adds	r0, r3, #4
 8009cd4:	6028      	str	r0, [r5, #0]
 8009cd6:	0635      	lsls	r5, r6, #24
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	d501      	bpl.n	8009ce0 <_printf_i+0x1cc>
 8009cdc:	6019      	str	r1, [r3, #0]
 8009cde:	e002      	b.n	8009ce6 <_printf_i+0x1d2>
 8009ce0:	0670      	lsls	r0, r6, #25
 8009ce2:	d5fb      	bpl.n	8009cdc <_printf_i+0x1c8>
 8009ce4:	8019      	strh	r1, [r3, #0]
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	6123      	str	r3, [r4, #16]
 8009cea:	4615      	mov	r5, r2
 8009cec:	e7ba      	b.n	8009c64 <_printf_i+0x150>
 8009cee:	682b      	ldr	r3, [r5, #0]
 8009cf0:	1d1a      	adds	r2, r3, #4
 8009cf2:	602a      	str	r2, [r5, #0]
 8009cf4:	681d      	ldr	r5, [r3, #0]
 8009cf6:	6862      	ldr	r2, [r4, #4]
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	f7f6 fa68 	bl	80001d0 <memchr>
 8009d00:	b108      	cbz	r0, 8009d06 <_printf_i+0x1f2>
 8009d02:	1b40      	subs	r0, r0, r5
 8009d04:	6060      	str	r0, [r4, #4]
 8009d06:	6863      	ldr	r3, [r4, #4]
 8009d08:	6123      	str	r3, [r4, #16]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d10:	e7a8      	b.n	8009c64 <_printf_i+0x150>
 8009d12:	6923      	ldr	r3, [r4, #16]
 8009d14:	462a      	mov	r2, r5
 8009d16:	4649      	mov	r1, r9
 8009d18:	4640      	mov	r0, r8
 8009d1a:	47d0      	blx	sl
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d0ab      	beq.n	8009c78 <_printf_i+0x164>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	079b      	lsls	r3, r3, #30
 8009d24:	d413      	bmi.n	8009d4e <_printf_i+0x23a>
 8009d26:	68e0      	ldr	r0, [r4, #12]
 8009d28:	9b03      	ldr	r3, [sp, #12]
 8009d2a:	4298      	cmp	r0, r3
 8009d2c:	bfb8      	it	lt
 8009d2e:	4618      	movlt	r0, r3
 8009d30:	e7a4      	b.n	8009c7c <_printf_i+0x168>
 8009d32:	2301      	movs	r3, #1
 8009d34:	4632      	mov	r2, r6
 8009d36:	4649      	mov	r1, r9
 8009d38:	4640      	mov	r0, r8
 8009d3a:	47d0      	blx	sl
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d09b      	beq.n	8009c78 <_printf_i+0x164>
 8009d40:	3501      	adds	r5, #1
 8009d42:	68e3      	ldr	r3, [r4, #12]
 8009d44:	9903      	ldr	r1, [sp, #12]
 8009d46:	1a5b      	subs	r3, r3, r1
 8009d48:	42ab      	cmp	r3, r5
 8009d4a:	dcf2      	bgt.n	8009d32 <_printf_i+0x21e>
 8009d4c:	e7eb      	b.n	8009d26 <_printf_i+0x212>
 8009d4e:	2500      	movs	r5, #0
 8009d50:	f104 0619 	add.w	r6, r4, #25
 8009d54:	e7f5      	b.n	8009d42 <_printf_i+0x22e>
 8009d56:	bf00      	nop
 8009d58:	0800af2d 	.word	0x0800af2d
 8009d5c:	0800af3e 	.word	0x0800af3e

08009d60 <_sbrk_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4d06      	ldr	r5, [pc, #24]	; (8009d7c <_sbrk_r+0x1c>)
 8009d64:	2300      	movs	r3, #0
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	602b      	str	r3, [r5, #0]
 8009d6c:	f7f7 fe32 	bl	80019d4 <_sbrk>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_sbrk_r+0x1a>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_sbrk_r+0x1a>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	20013380 	.word	0x20013380

08009d80 <__sread>:
 8009d80:	b510      	push	{r4, lr}
 8009d82:	460c      	mov	r4, r1
 8009d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d88:	f000 f8a0 	bl	8009ecc <_read_r>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	bfab      	itete	ge
 8009d90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d92:	89a3      	ldrhlt	r3, [r4, #12]
 8009d94:	181b      	addge	r3, r3, r0
 8009d96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d9a:	bfac      	ite	ge
 8009d9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d9e:	81a3      	strhlt	r3, [r4, #12]
 8009da0:	bd10      	pop	{r4, pc}

08009da2 <__swrite>:
 8009da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da6:	461f      	mov	r7, r3
 8009da8:	898b      	ldrh	r3, [r1, #12]
 8009daa:	05db      	lsls	r3, r3, #23
 8009dac:	4605      	mov	r5, r0
 8009dae:	460c      	mov	r4, r1
 8009db0:	4616      	mov	r6, r2
 8009db2:	d505      	bpl.n	8009dc0 <__swrite+0x1e>
 8009db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db8:	2302      	movs	r3, #2
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f000 f868 	bl	8009e90 <_lseek_r>
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	4632      	mov	r2, r6
 8009dce:	463b      	mov	r3, r7
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd6:	f000 b817 	b.w	8009e08 <_write_r>

08009dda <__sseek>:
 8009dda:	b510      	push	{r4, lr}
 8009ddc:	460c      	mov	r4, r1
 8009dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de2:	f000 f855 	bl	8009e90 <_lseek_r>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	89a3      	ldrh	r3, [r4, #12]
 8009dea:	bf15      	itete	ne
 8009dec:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009df6:	81a3      	strheq	r3, [r4, #12]
 8009df8:	bf18      	it	ne
 8009dfa:	81a3      	strhne	r3, [r4, #12]
 8009dfc:	bd10      	pop	{r4, pc}

08009dfe <__sclose>:
 8009dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e02:	f000 b813 	b.w	8009e2c <_close_r>
	...

08009e08 <_write_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d07      	ldr	r5, [pc, #28]	; (8009e28 <_write_r+0x20>)
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	4608      	mov	r0, r1
 8009e10:	4611      	mov	r1, r2
 8009e12:	2200      	movs	r2, #0
 8009e14:	602a      	str	r2, [r5, #0]
 8009e16:	461a      	mov	r2, r3
 8009e18:	f7f7 fd8b 	bl	8001932 <_write>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_write_r+0x1e>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_write_r+0x1e>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	20013380 	.word	0x20013380

08009e2c <_close_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d06      	ldr	r5, [pc, #24]	; (8009e48 <_close_r+0x1c>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	f7f7 fd97 	bl	800196a <_close>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_close_r+0x1a>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_close_r+0x1a>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20013380 	.word	0x20013380

08009e4c <_fstat_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4d07      	ldr	r5, [pc, #28]	; (8009e6c <_fstat_r+0x20>)
 8009e50:	2300      	movs	r3, #0
 8009e52:	4604      	mov	r4, r0
 8009e54:	4608      	mov	r0, r1
 8009e56:	4611      	mov	r1, r2
 8009e58:	602b      	str	r3, [r5, #0]
 8009e5a:	f7f7 fd92 	bl	8001982 <_fstat>
 8009e5e:	1c43      	adds	r3, r0, #1
 8009e60:	d102      	bne.n	8009e68 <_fstat_r+0x1c>
 8009e62:	682b      	ldr	r3, [r5, #0]
 8009e64:	b103      	cbz	r3, 8009e68 <_fstat_r+0x1c>
 8009e66:	6023      	str	r3, [r4, #0]
 8009e68:	bd38      	pop	{r3, r4, r5, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20013380 	.word	0x20013380

08009e70 <_isatty_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d06      	ldr	r5, [pc, #24]	; (8009e8c <_isatty_r+0x1c>)
 8009e74:	2300      	movs	r3, #0
 8009e76:	4604      	mov	r4, r0
 8009e78:	4608      	mov	r0, r1
 8009e7a:	602b      	str	r3, [r5, #0]
 8009e7c:	f7f7 fd91 	bl	80019a2 <_isatty>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d102      	bne.n	8009e8a <_isatty_r+0x1a>
 8009e84:	682b      	ldr	r3, [r5, #0]
 8009e86:	b103      	cbz	r3, 8009e8a <_isatty_r+0x1a>
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	20013380 	.word	0x20013380

08009e90 <_lseek_r>:
 8009e90:	b538      	push	{r3, r4, r5, lr}
 8009e92:	4d07      	ldr	r5, [pc, #28]	; (8009eb0 <_lseek_r+0x20>)
 8009e94:	4604      	mov	r4, r0
 8009e96:	4608      	mov	r0, r1
 8009e98:	4611      	mov	r1, r2
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	602a      	str	r2, [r5, #0]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	f7f7 fd8a 	bl	80019b8 <_lseek>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d102      	bne.n	8009eae <_lseek_r+0x1e>
 8009ea8:	682b      	ldr	r3, [r5, #0]
 8009eaa:	b103      	cbz	r3, 8009eae <_lseek_r+0x1e>
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	bd38      	pop	{r3, r4, r5, pc}
 8009eb0:	20013380 	.word	0x20013380

08009eb4 <__malloc_lock>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	; (8009ebc <__malloc_lock+0x8>)
 8009eb6:	f7ff bb1d 	b.w	80094f4 <__retarget_lock_acquire_recursive>
 8009eba:	bf00      	nop
 8009ebc:	20013374 	.word	0x20013374

08009ec0 <__malloc_unlock>:
 8009ec0:	4801      	ldr	r0, [pc, #4]	; (8009ec8 <__malloc_unlock+0x8>)
 8009ec2:	f7ff bb18 	b.w	80094f6 <__retarget_lock_release_recursive>
 8009ec6:	bf00      	nop
 8009ec8:	20013374 	.word	0x20013374

08009ecc <_read_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4d07      	ldr	r5, [pc, #28]	; (8009eec <_read_r+0x20>)
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	4608      	mov	r0, r1
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	602a      	str	r2, [r5, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	f7f7 fd0c 	bl	80018f8 <_read>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_read_r+0x1e>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_read_r+0x1e>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	20013380 	.word	0x20013380

08009ef0 <pow>:
 8009ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef2:	ed2d 8b02 	vpush	{d8}
 8009ef6:	eeb0 8a40 	vmov.f32	s16, s0
 8009efa:	eef0 8a60 	vmov.f32	s17, s1
 8009efe:	ec55 4b11 	vmov	r4, r5, d1
 8009f02:	f000 f891 	bl	800a028 <__ieee754_pow>
 8009f06:	4622      	mov	r2, r4
 8009f08:	462b      	mov	r3, r5
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	ec57 6b10 	vmov	r6, r7, d0
 8009f12:	f7f6 fe03 	bl	8000b1c <__aeabi_dcmpun>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d13b      	bne.n	8009f92 <pow+0xa2>
 8009f1a:	ec51 0b18 	vmov	r0, r1, d8
 8009f1e:	2200      	movs	r2, #0
 8009f20:	2300      	movs	r3, #0
 8009f22:	f7f6 fdc9 	bl	8000ab8 <__aeabi_dcmpeq>
 8009f26:	b1b8      	cbz	r0, 8009f58 <pow+0x68>
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	4629      	mov	r1, r5
 8009f30:	f7f6 fdc2 	bl	8000ab8 <__aeabi_dcmpeq>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d146      	bne.n	8009fc6 <pow+0xd6>
 8009f38:	ec45 4b10 	vmov	d0, r4, r5
 8009f3c:	f000 fe8d 	bl	800ac5a <finite>
 8009f40:	b338      	cbz	r0, 8009f92 <pow+0xa2>
 8009f42:	2200      	movs	r2, #0
 8009f44:	2300      	movs	r3, #0
 8009f46:	4620      	mov	r0, r4
 8009f48:	4629      	mov	r1, r5
 8009f4a:	f7f6 fdbf 	bl	8000acc <__aeabi_dcmplt>
 8009f4e:	b300      	cbz	r0, 8009f92 <pow+0xa2>
 8009f50:	f7fe ff98 	bl	8008e84 <__errno>
 8009f54:	2322      	movs	r3, #34	; 0x22
 8009f56:	e01b      	b.n	8009f90 <pow+0xa0>
 8009f58:	ec47 6b10 	vmov	d0, r6, r7
 8009f5c:	f000 fe7d 	bl	800ac5a <finite>
 8009f60:	b9e0      	cbnz	r0, 8009f9c <pow+0xac>
 8009f62:	eeb0 0a48 	vmov.f32	s0, s16
 8009f66:	eef0 0a68 	vmov.f32	s1, s17
 8009f6a:	f000 fe76 	bl	800ac5a <finite>
 8009f6e:	b1a8      	cbz	r0, 8009f9c <pow+0xac>
 8009f70:	ec45 4b10 	vmov	d0, r4, r5
 8009f74:	f000 fe71 	bl	800ac5a <finite>
 8009f78:	b180      	cbz	r0, 8009f9c <pow+0xac>
 8009f7a:	4632      	mov	r2, r6
 8009f7c:	463b      	mov	r3, r7
 8009f7e:	4630      	mov	r0, r6
 8009f80:	4639      	mov	r1, r7
 8009f82:	f7f6 fdcb 	bl	8000b1c <__aeabi_dcmpun>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d0e2      	beq.n	8009f50 <pow+0x60>
 8009f8a:	f7fe ff7b 	bl	8008e84 <__errno>
 8009f8e:	2321      	movs	r3, #33	; 0x21
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	ecbd 8b02 	vpop	{d8}
 8009f96:	ec47 6b10 	vmov	d0, r6, r7
 8009f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	4639      	mov	r1, r7
 8009fa4:	f7f6 fd88 	bl	8000ab8 <__aeabi_dcmpeq>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d0f2      	beq.n	8009f92 <pow+0xa2>
 8009fac:	eeb0 0a48 	vmov.f32	s0, s16
 8009fb0:	eef0 0a68 	vmov.f32	s1, s17
 8009fb4:	f000 fe51 	bl	800ac5a <finite>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d0ea      	beq.n	8009f92 <pow+0xa2>
 8009fbc:	ec45 4b10 	vmov	d0, r4, r5
 8009fc0:	f000 fe4b 	bl	800ac5a <finite>
 8009fc4:	e7c3      	b.n	8009f4e <pow+0x5e>
 8009fc6:	4f01      	ldr	r7, [pc, #4]	; (8009fcc <pow+0xdc>)
 8009fc8:	2600      	movs	r6, #0
 8009fca:	e7e2      	b.n	8009f92 <pow+0xa2>
 8009fcc:	3ff00000 	.word	0x3ff00000

08009fd0 <sqrt>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	ed2d 8b02 	vpush	{d8}
 8009fd6:	ec55 4b10 	vmov	r4, r5, d0
 8009fda:	f000 fd53 	bl	800aa84 <__ieee754_sqrt>
 8009fde:	4622      	mov	r2, r4
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	eeb0 8a40 	vmov.f32	s16, s0
 8009fea:	eef0 8a60 	vmov.f32	s17, s1
 8009fee:	f7f6 fd95 	bl	8000b1c <__aeabi_dcmpun>
 8009ff2:	b990      	cbnz	r0, 800a01a <sqrt+0x4a>
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	f7f6 fd66 	bl	8000acc <__aeabi_dcmplt>
 800a000:	b158      	cbz	r0, 800a01a <sqrt+0x4a>
 800a002:	f7fe ff3f 	bl	8008e84 <__errno>
 800a006:	2321      	movs	r3, #33	; 0x21
 800a008:	6003      	str	r3, [r0, #0]
 800a00a:	2200      	movs	r2, #0
 800a00c:	2300      	movs	r3, #0
 800a00e:	4610      	mov	r0, r2
 800a010:	4619      	mov	r1, r3
 800a012:	f7f6 fc13 	bl	800083c <__aeabi_ddiv>
 800a016:	ec41 0b18 	vmov	d8, r0, r1
 800a01a:	eeb0 0a48 	vmov.f32	s0, s16
 800a01e:	eef0 0a68 	vmov.f32	s1, s17
 800a022:	ecbd 8b02 	vpop	{d8}
 800a026:	bd38      	pop	{r3, r4, r5, pc}

0800a028 <__ieee754_pow>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	ed2d 8b06 	vpush	{d8-d10}
 800a030:	b089      	sub	sp, #36	; 0x24
 800a032:	ed8d 1b00 	vstr	d1, [sp]
 800a036:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a03a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a03e:	ea58 0102 	orrs.w	r1, r8, r2
 800a042:	ec57 6b10 	vmov	r6, r7, d0
 800a046:	d115      	bne.n	800a074 <__ieee754_pow+0x4c>
 800a048:	19b3      	adds	r3, r6, r6
 800a04a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a04e:	4152      	adcs	r2, r2
 800a050:	4299      	cmp	r1, r3
 800a052:	4b89      	ldr	r3, [pc, #548]	; (800a278 <__ieee754_pow+0x250>)
 800a054:	4193      	sbcs	r3, r2
 800a056:	f080 84d2 	bcs.w	800a9fe <__ieee754_pow+0x9d6>
 800a05a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 f90b 	bl	800027c <__adddf3>
 800a066:	ec41 0b10 	vmov	d0, r0, r1
 800a06a:	b009      	add	sp, #36	; 0x24
 800a06c:	ecbd 8b06 	vpop	{d8-d10}
 800a070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a074:	4b81      	ldr	r3, [pc, #516]	; (800a27c <__ieee754_pow+0x254>)
 800a076:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a07a:	429c      	cmp	r4, r3
 800a07c:	ee10 aa10 	vmov	sl, s0
 800a080:	463d      	mov	r5, r7
 800a082:	dc06      	bgt.n	800a092 <__ieee754_pow+0x6a>
 800a084:	d101      	bne.n	800a08a <__ieee754_pow+0x62>
 800a086:	2e00      	cmp	r6, #0
 800a088:	d1e7      	bne.n	800a05a <__ieee754_pow+0x32>
 800a08a:	4598      	cmp	r8, r3
 800a08c:	dc01      	bgt.n	800a092 <__ieee754_pow+0x6a>
 800a08e:	d10f      	bne.n	800a0b0 <__ieee754_pow+0x88>
 800a090:	b172      	cbz	r2, 800a0b0 <__ieee754_pow+0x88>
 800a092:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a096:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a09a:	ea55 050a 	orrs.w	r5, r5, sl
 800a09e:	d1dc      	bne.n	800a05a <__ieee754_pow+0x32>
 800a0a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a0a4:	18db      	adds	r3, r3, r3
 800a0a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a0aa:	4152      	adcs	r2, r2
 800a0ac:	429d      	cmp	r5, r3
 800a0ae:	e7d0      	b.n	800a052 <__ieee754_pow+0x2a>
 800a0b0:	2d00      	cmp	r5, #0
 800a0b2:	da3b      	bge.n	800a12c <__ieee754_pow+0x104>
 800a0b4:	4b72      	ldr	r3, [pc, #456]	; (800a280 <__ieee754_pow+0x258>)
 800a0b6:	4598      	cmp	r8, r3
 800a0b8:	dc51      	bgt.n	800a15e <__ieee754_pow+0x136>
 800a0ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a0be:	4598      	cmp	r8, r3
 800a0c0:	f340 84ac 	ble.w	800aa1c <__ieee754_pow+0x9f4>
 800a0c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a0c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a0cc:	2b14      	cmp	r3, #20
 800a0ce:	dd0f      	ble.n	800a0f0 <__ieee754_pow+0xc8>
 800a0d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a0d4:	fa22 f103 	lsr.w	r1, r2, r3
 800a0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	f040 849d 	bne.w	800aa1c <__ieee754_pow+0x9f4>
 800a0e2:	f001 0101 	and.w	r1, r1, #1
 800a0e6:	f1c1 0302 	rsb	r3, r1, #2
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	b182      	cbz	r2, 800a110 <__ieee754_pow+0xe8>
 800a0ee:	e05f      	b.n	800a1b0 <__ieee754_pow+0x188>
 800a0f0:	2a00      	cmp	r2, #0
 800a0f2:	d15b      	bne.n	800a1ac <__ieee754_pow+0x184>
 800a0f4:	f1c3 0314 	rsb	r3, r3, #20
 800a0f8:	fa48 f103 	asr.w	r1, r8, r3
 800a0fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a100:	4543      	cmp	r3, r8
 800a102:	f040 8488 	bne.w	800aa16 <__ieee754_pow+0x9ee>
 800a106:	f001 0101 	and.w	r1, r1, #1
 800a10a:	f1c1 0302 	rsb	r3, r1, #2
 800a10e:	9304      	str	r3, [sp, #16]
 800a110:	4b5c      	ldr	r3, [pc, #368]	; (800a284 <__ieee754_pow+0x25c>)
 800a112:	4598      	cmp	r8, r3
 800a114:	d132      	bne.n	800a17c <__ieee754_pow+0x154>
 800a116:	f1b9 0f00 	cmp.w	r9, #0
 800a11a:	f280 8478 	bge.w	800aa0e <__ieee754_pow+0x9e6>
 800a11e:	4959      	ldr	r1, [pc, #356]	; (800a284 <__ieee754_pow+0x25c>)
 800a120:	4632      	mov	r2, r6
 800a122:	463b      	mov	r3, r7
 800a124:	2000      	movs	r0, #0
 800a126:	f7f6 fb89 	bl	800083c <__aeabi_ddiv>
 800a12a:	e79c      	b.n	800a066 <__ieee754_pow+0x3e>
 800a12c:	2300      	movs	r3, #0
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	2a00      	cmp	r2, #0
 800a132:	d13d      	bne.n	800a1b0 <__ieee754_pow+0x188>
 800a134:	4b51      	ldr	r3, [pc, #324]	; (800a27c <__ieee754_pow+0x254>)
 800a136:	4598      	cmp	r8, r3
 800a138:	d1ea      	bne.n	800a110 <__ieee754_pow+0xe8>
 800a13a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a13e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a142:	ea53 030a 	orrs.w	r3, r3, sl
 800a146:	f000 845a 	beq.w	800a9fe <__ieee754_pow+0x9d6>
 800a14a:	4b4f      	ldr	r3, [pc, #316]	; (800a288 <__ieee754_pow+0x260>)
 800a14c:	429c      	cmp	r4, r3
 800a14e:	dd08      	ble.n	800a162 <__ieee754_pow+0x13a>
 800a150:	f1b9 0f00 	cmp.w	r9, #0
 800a154:	f2c0 8457 	blt.w	800aa06 <__ieee754_pow+0x9de>
 800a158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a15c:	e783      	b.n	800a066 <__ieee754_pow+0x3e>
 800a15e:	2302      	movs	r3, #2
 800a160:	e7e5      	b.n	800a12e <__ieee754_pow+0x106>
 800a162:	f1b9 0f00 	cmp.w	r9, #0
 800a166:	f04f 0000 	mov.w	r0, #0
 800a16a:	f04f 0100 	mov.w	r1, #0
 800a16e:	f6bf af7a 	bge.w	800a066 <__ieee754_pow+0x3e>
 800a172:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a176:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a17a:	e774      	b.n	800a066 <__ieee754_pow+0x3e>
 800a17c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a180:	d106      	bne.n	800a190 <__ieee754_pow+0x168>
 800a182:	4632      	mov	r2, r6
 800a184:	463b      	mov	r3, r7
 800a186:	4630      	mov	r0, r6
 800a188:	4639      	mov	r1, r7
 800a18a:	f7f6 fa2d 	bl	80005e8 <__aeabi_dmul>
 800a18e:	e76a      	b.n	800a066 <__ieee754_pow+0x3e>
 800a190:	4b3e      	ldr	r3, [pc, #248]	; (800a28c <__ieee754_pow+0x264>)
 800a192:	4599      	cmp	r9, r3
 800a194:	d10c      	bne.n	800a1b0 <__ieee754_pow+0x188>
 800a196:	2d00      	cmp	r5, #0
 800a198:	db0a      	blt.n	800a1b0 <__ieee754_pow+0x188>
 800a19a:	ec47 6b10 	vmov	d0, r6, r7
 800a19e:	b009      	add	sp, #36	; 0x24
 800a1a0:	ecbd 8b06 	vpop	{d8-d10}
 800a1a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a8:	f000 bc6c 	b.w	800aa84 <__ieee754_sqrt>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	ec47 6b10 	vmov	d0, r6, r7
 800a1b4:	f000 fd48 	bl	800ac48 <fabs>
 800a1b8:	ec51 0b10 	vmov	r0, r1, d0
 800a1bc:	f1ba 0f00 	cmp.w	sl, #0
 800a1c0:	d129      	bne.n	800a216 <__ieee754_pow+0x1ee>
 800a1c2:	b124      	cbz	r4, 800a1ce <__ieee754_pow+0x1a6>
 800a1c4:	4b2f      	ldr	r3, [pc, #188]	; (800a284 <__ieee754_pow+0x25c>)
 800a1c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d123      	bne.n	800a216 <__ieee754_pow+0x1ee>
 800a1ce:	f1b9 0f00 	cmp.w	r9, #0
 800a1d2:	da05      	bge.n	800a1e0 <__ieee754_pow+0x1b8>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	2000      	movs	r0, #0
 800a1da:	492a      	ldr	r1, [pc, #168]	; (800a284 <__ieee754_pow+0x25c>)
 800a1dc:	f7f6 fb2e 	bl	800083c <__aeabi_ddiv>
 800a1e0:	2d00      	cmp	r5, #0
 800a1e2:	f6bf af40 	bge.w	800a066 <__ieee754_pow+0x3e>
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a1ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a1f0:	4323      	orrs	r3, r4
 800a1f2:	d108      	bne.n	800a206 <__ieee754_pow+0x1de>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	f7f6 f83c 	bl	8000278 <__aeabi_dsub>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	e78f      	b.n	800a126 <__ieee754_pow+0xfe>
 800a206:	9b04      	ldr	r3, [sp, #16]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	f47f af2c 	bne.w	800a066 <__ieee754_pow+0x3e>
 800a20e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a212:	4619      	mov	r1, r3
 800a214:	e727      	b.n	800a066 <__ieee754_pow+0x3e>
 800a216:	0feb      	lsrs	r3, r5, #31
 800a218:	3b01      	subs	r3, #1
 800a21a:	9306      	str	r3, [sp, #24]
 800a21c:	9a06      	ldr	r2, [sp, #24]
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	4313      	orrs	r3, r2
 800a222:	d102      	bne.n	800a22a <__ieee754_pow+0x202>
 800a224:	4632      	mov	r2, r6
 800a226:	463b      	mov	r3, r7
 800a228:	e7e6      	b.n	800a1f8 <__ieee754_pow+0x1d0>
 800a22a:	4b19      	ldr	r3, [pc, #100]	; (800a290 <__ieee754_pow+0x268>)
 800a22c:	4598      	cmp	r8, r3
 800a22e:	f340 80fb 	ble.w	800a428 <__ieee754_pow+0x400>
 800a232:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a236:	4598      	cmp	r8, r3
 800a238:	4b13      	ldr	r3, [pc, #76]	; (800a288 <__ieee754_pow+0x260>)
 800a23a:	dd0c      	ble.n	800a256 <__ieee754_pow+0x22e>
 800a23c:	429c      	cmp	r4, r3
 800a23e:	dc0f      	bgt.n	800a260 <__ieee754_pow+0x238>
 800a240:	f1b9 0f00 	cmp.w	r9, #0
 800a244:	da0f      	bge.n	800a266 <__ieee754_pow+0x23e>
 800a246:	2000      	movs	r0, #0
 800a248:	b009      	add	sp, #36	; 0x24
 800a24a:	ecbd 8b06 	vpop	{d8-d10}
 800a24e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a252:	f000 bcf0 	b.w	800ac36 <__math_oflow>
 800a256:	429c      	cmp	r4, r3
 800a258:	dbf2      	blt.n	800a240 <__ieee754_pow+0x218>
 800a25a:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <__ieee754_pow+0x25c>)
 800a25c:	429c      	cmp	r4, r3
 800a25e:	dd19      	ble.n	800a294 <__ieee754_pow+0x26c>
 800a260:	f1b9 0f00 	cmp.w	r9, #0
 800a264:	dcef      	bgt.n	800a246 <__ieee754_pow+0x21e>
 800a266:	2000      	movs	r0, #0
 800a268:	b009      	add	sp, #36	; 0x24
 800a26a:	ecbd 8b06 	vpop	{d8-d10}
 800a26e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a272:	f000 bcd7 	b.w	800ac24 <__math_uflow>
 800a276:	bf00      	nop
 800a278:	fff00000 	.word	0xfff00000
 800a27c:	7ff00000 	.word	0x7ff00000
 800a280:	433fffff 	.word	0x433fffff
 800a284:	3ff00000 	.word	0x3ff00000
 800a288:	3fefffff 	.word	0x3fefffff
 800a28c:	3fe00000 	.word	0x3fe00000
 800a290:	41e00000 	.word	0x41e00000
 800a294:	4b60      	ldr	r3, [pc, #384]	; (800a418 <__ieee754_pow+0x3f0>)
 800a296:	2200      	movs	r2, #0
 800a298:	f7f5 ffee 	bl	8000278 <__aeabi_dsub>
 800a29c:	a354      	add	r3, pc, #336	; (adr r3, 800a3f0 <__ieee754_pow+0x3c8>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	f7f6 f99f 	bl	80005e8 <__aeabi_dmul>
 800a2aa:	a353      	add	r3, pc, #332	; (adr r3, 800a3f8 <__ieee754_pow+0x3d0>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	460f      	mov	r7, r1
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f7f6 f996 	bl	80005e8 <__aeabi_dmul>
 800a2bc:	4b57      	ldr	r3, [pc, #348]	; (800a41c <__ieee754_pow+0x3f4>)
 800a2be:	4682      	mov	sl, r0
 800a2c0:	468b      	mov	fp, r1
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f7f6 f98e 	bl	80005e8 <__aeabi_dmul>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	a14b      	add	r1, pc, #300	; (adr r1, 800a400 <__ieee754_pow+0x3d8>)
 800a2d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2d6:	f7f5 ffcf 	bl	8000278 <__aeabi_dsub>
 800a2da:	4622      	mov	r2, r4
 800a2dc:	462b      	mov	r3, r5
 800a2de:	f7f6 f983 	bl	80005e8 <__aeabi_dmul>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	494d      	ldr	r1, [pc, #308]	; (800a420 <__ieee754_pow+0x3f8>)
 800a2ea:	f7f5 ffc5 	bl	8000278 <__aeabi_dsub>
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	4689      	mov	r9, r1
 800a2f4:	462b      	mov	r3, r5
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	f7f6 f975 	bl	80005e8 <__aeabi_dmul>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4640      	mov	r0, r8
 800a304:	4649      	mov	r1, r9
 800a306:	f7f6 f96f 	bl	80005e8 <__aeabi_dmul>
 800a30a:	a33f      	add	r3, pc, #252	; (adr r3, 800a408 <__ieee754_pow+0x3e0>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f7f6 f96a 	bl	80005e8 <__aeabi_dmul>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4650      	mov	r0, sl
 800a31a:	4659      	mov	r1, fp
 800a31c:	f7f5 ffac 	bl	8000278 <__aeabi_dsub>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4680      	mov	r8, r0
 800a326:	4689      	mov	r9, r1
 800a328:	4630      	mov	r0, r6
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f5 ffa6 	bl	800027c <__adddf3>
 800a330:	2000      	movs	r0, #0
 800a332:	4632      	mov	r2, r6
 800a334:	463b      	mov	r3, r7
 800a336:	4604      	mov	r4, r0
 800a338:	460d      	mov	r5, r1
 800a33a:	f7f5 ff9d 	bl	8000278 <__aeabi_dsub>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	4640      	mov	r0, r8
 800a344:	4649      	mov	r1, r9
 800a346:	f7f5 ff97 	bl	8000278 <__aeabi_dsub>
 800a34a:	9b04      	ldr	r3, [sp, #16]
 800a34c:	9a06      	ldr	r2, [sp, #24]
 800a34e:	3b01      	subs	r3, #1
 800a350:	4313      	orrs	r3, r2
 800a352:	4682      	mov	sl, r0
 800a354:	468b      	mov	fp, r1
 800a356:	f040 81e7 	bne.w	800a728 <__ieee754_pow+0x700>
 800a35a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a410 <__ieee754_pow+0x3e8>
 800a35e:	eeb0 8a47 	vmov.f32	s16, s14
 800a362:	eef0 8a67 	vmov.f32	s17, s15
 800a366:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a36a:	2600      	movs	r6, #0
 800a36c:	4632      	mov	r2, r6
 800a36e:	463b      	mov	r3, r7
 800a370:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a374:	f7f5 ff80 	bl	8000278 <__aeabi_dsub>
 800a378:	4622      	mov	r2, r4
 800a37a:	462b      	mov	r3, r5
 800a37c:	f7f6 f934 	bl	80005e8 <__aeabi_dmul>
 800a380:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a384:	4680      	mov	r8, r0
 800a386:	4689      	mov	r9, r1
 800a388:	4650      	mov	r0, sl
 800a38a:	4659      	mov	r1, fp
 800a38c:	f7f6 f92c 	bl	80005e8 <__aeabi_dmul>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	4640      	mov	r0, r8
 800a396:	4649      	mov	r1, r9
 800a398:	f7f5 ff70 	bl	800027c <__adddf3>
 800a39c:	4632      	mov	r2, r6
 800a39e:	463b      	mov	r3, r7
 800a3a0:	4680      	mov	r8, r0
 800a3a2:	4689      	mov	r9, r1
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f7f6 f91e 	bl	80005e8 <__aeabi_dmul>
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	460d      	mov	r5, r1
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	f7f5 ff60 	bl	800027c <__adddf3>
 800a3bc:	4b19      	ldr	r3, [pc, #100]	; (800a424 <__ieee754_pow+0x3fc>)
 800a3be:	4299      	cmp	r1, r3
 800a3c0:	ec45 4b19 	vmov	d9, r4, r5
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	460f      	mov	r7, r1
 800a3c8:	468b      	mov	fp, r1
 800a3ca:	f340 82f1 	ble.w	800a9b0 <__ieee754_pow+0x988>
 800a3ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a3d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a3d6:	4303      	orrs	r3, r0
 800a3d8:	f000 81e4 	beq.w	800a7a4 <__ieee754_pow+0x77c>
 800a3dc:	ec51 0b18 	vmov	r0, r1, d8
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f7f6 fb72 	bl	8000acc <__aeabi_dcmplt>
 800a3e8:	3800      	subs	r0, #0
 800a3ea:	bf18      	it	ne
 800a3ec:	2001      	movne	r0, #1
 800a3ee:	e72b      	b.n	800a248 <__ieee754_pow+0x220>
 800a3f0:	60000000 	.word	0x60000000
 800a3f4:	3ff71547 	.word	0x3ff71547
 800a3f8:	f85ddf44 	.word	0xf85ddf44
 800a3fc:	3e54ae0b 	.word	0x3e54ae0b
 800a400:	55555555 	.word	0x55555555
 800a404:	3fd55555 	.word	0x3fd55555
 800a408:	652b82fe 	.word	0x652b82fe
 800a40c:	3ff71547 	.word	0x3ff71547
 800a410:	00000000 	.word	0x00000000
 800a414:	bff00000 	.word	0xbff00000
 800a418:	3ff00000 	.word	0x3ff00000
 800a41c:	3fd00000 	.word	0x3fd00000
 800a420:	3fe00000 	.word	0x3fe00000
 800a424:	408fffff 	.word	0x408fffff
 800a428:	4bd5      	ldr	r3, [pc, #852]	; (800a780 <__ieee754_pow+0x758>)
 800a42a:	402b      	ands	r3, r5
 800a42c:	2200      	movs	r2, #0
 800a42e:	b92b      	cbnz	r3, 800a43c <__ieee754_pow+0x414>
 800a430:	4bd4      	ldr	r3, [pc, #848]	; (800a784 <__ieee754_pow+0x75c>)
 800a432:	f7f6 f8d9 	bl	80005e8 <__aeabi_dmul>
 800a436:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a43a:	460c      	mov	r4, r1
 800a43c:	1523      	asrs	r3, r4, #20
 800a43e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a442:	4413      	add	r3, r2
 800a444:	9305      	str	r3, [sp, #20]
 800a446:	4bd0      	ldr	r3, [pc, #832]	; (800a788 <__ieee754_pow+0x760>)
 800a448:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a44c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a450:	429c      	cmp	r4, r3
 800a452:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a456:	dd08      	ble.n	800a46a <__ieee754_pow+0x442>
 800a458:	4bcc      	ldr	r3, [pc, #816]	; (800a78c <__ieee754_pow+0x764>)
 800a45a:	429c      	cmp	r4, r3
 800a45c:	f340 8162 	ble.w	800a724 <__ieee754_pow+0x6fc>
 800a460:	9b05      	ldr	r3, [sp, #20]
 800a462:	3301      	adds	r3, #1
 800a464:	9305      	str	r3, [sp, #20]
 800a466:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a46a:	2400      	movs	r4, #0
 800a46c:	00e3      	lsls	r3, r4, #3
 800a46e:	9307      	str	r3, [sp, #28]
 800a470:	4bc7      	ldr	r3, [pc, #796]	; (800a790 <__ieee754_pow+0x768>)
 800a472:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a476:	ed93 7b00 	vldr	d7, [r3]
 800a47a:	4629      	mov	r1, r5
 800a47c:	ec53 2b17 	vmov	r2, r3, d7
 800a480:	eeb0 9a47 	vmov.f32	s18, s14
 800a484:	eef0 9a67 	vmov.f32	s19, s15
 800a488:	4682      	mov	sl, r0
 800a48a:	f7f5 fef5 	bl	8000278 <__aeabi_dsub>
 800a48e:	4652      	mov	r2, sl
 800a490:	4606      	mov	r6, r0
 800a492:	460f      	mov	r7, r1
 800a494:	462b      	mov	r3, r5
 800a496:	ec51 0b19 	vmov	r0, r1, d9
 800a49a:	f7f5 feef 	bl	800027c <__adddf3>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	49bb      	ldr	r1, [pc, #748]	; (800a794 <__ieee754_pow+0x76c>)
 800a4a6:	f7f6 f9c9 	bl	800083c <__aeabi_ddiv>
 800a4aa:	ec41 0b1a 	vmov	d10, r0, r1
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	f7f6 f897 	bl	80005e8 <__aeabi_dmul>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4c0:	9302      	str	r3, [sp, #8]
 800a4c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a4c6:	46ab      	mov	fp, r5
 800a4c8:	106d      	asrs	r5, r5, #1
 800a4ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a4ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a4d2:	ec41 0b18 	vmov	d8, r0, r1
 800a4d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a4da:	2200      	movs	r2, #0
 800a4dc:	4640      	mov	r0, r8
 800a4de:	4649      	mov	r1, r9
 800a4e0:	4614      	mov	r4, r2
 800a4e2:	461d      	mov	r5, r3
 800a4e4:	f7f6 f880 	bl	80005e8 <__aeabi_dmul>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	f7f5 fec2 	bl	8000278 <__aeabi_dsub>
 800a4f4:	ec53 2b19 	vmov	r2, r3, d9
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	460f      	mov	r7, r1
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	f7f5 feba 	bl	8000278 <__aeabi_dsub>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4650      	mov	r0, sl
 800a50a:	4659      	mov	r1, fp
 800a50c:	f7f5 feb4 	bl	8000278 <__aeabi_dsub>
 800a510:	4642      	mov	r2, r8
 800a512:	464b      	mov	r3, r9
 800a514:	f7f6 f868 	bl	80005e8 <__aeabi_dmul>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4630      	mov	r0, r6
 800a51e:	4639      	mov	r1, r7
 800a520:	f7f5 feaa 	bl	8000278 <__aeabi_dsub>
 800a524:	ec53 2b1a 	vmov	r2, r3, d10
 800a528:	f7f6 f85e 	bl	80005e8 <__aeabi_dmul>
 800a52c:	ec53 2b18 	vmov	r2, r3, d8
 800a530:	ec41 0b19 	vmov	d9, r0, r1
 800a534:	ec51 0b18 	vmov	r0, r1, d8
 800a538:	f7f6 f856 	bl	80005e8 <__aeabi_dmul>
 800a53c:	a37c      	add	r3, pc, #496	; (adr r3, 800a730 <__ieee754_pow+0x708>)
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	4604      	mov	r4, r0
 800a544:	460d      	mov	r5, r1
 800a546:	f7f6 f84f 	bl	80005e8 <__aeabi_dmul>
 800a54a:	a37b      	add	r3, pc, #492	; (adr r3, 800a738 <__ieee754_pow+0x710>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f7f5 fe94 	bl	800027c <__adddf3>
 800a554:	4622      	mov	r2, r4
 800a556:	462b      	mov	r3, r5
 800a558:	f7f6 f846 	bl	80005e8 <__aeabi_dmul>
 800a55c:	a378      	add	r3, pc, #480	; (adr r3, 800a740 <__ieee754_pow+0x718>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f5 fe8b 	bl	800027c <__adddf3>
 800a566:	4622      	mov	r2, r4
 800a568:	462b      	mov	r3, r5
 800a56a:	f7f6 f83d 	bl	80005e8 <__aeabi_dmul>
 800a56e:	a376      	add	r3, pc, #472	; (adr r3, 800a748 <__ieee754_pow+0x720>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f7f5 fe82 	bl	800027c <__adddf3>
 800a578:	4622      	mov	r2, r4
 800a57a:	462b      	mov	r3, r5
 800a57c:	f7f6 f834 	bl	80005e8 <__aeabi_dmul>
 800a580:	a373      	add	r3, pc, #460	; (adr r3, 800a750 <__ieee754_pow+0x728>)
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	f7f5 fe79 	bl	800027c <__adddf3>
 800a58a:	4622      	mov	r2, r4
 800a58c:	462b      	mov	r3, r5
 800a58e:	f7f6 f82b 	bl	80005e8 <__aeabi_dmul>
 800a592:	a371      	add	r3, pc, #452	; (adr r3, 800a758 <__ieee754_pow+0x730>)
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f7f5 fe70 	bl	800027c <__adddf3>
 800a59c:	4622      	mov	r2, r4
 800a59e:	4606      	mov	r6, r0
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	462b      	mov	r3, r5
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f7f6 f81e 	bl	80005e8 <__aeabi_dmul>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	4639      	mov	r1, r7
 800a5b4:	f7f6 f818 	bl	80005e8 <__aeabi_dmul>
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	460d      	mov	r5, r1
 800a5be:	464b      	mov	r3, r9
 800a5c0:	ec51 0b18 	vmov	r0, r1, d8
 800a5c4:	f7f5 fe5a 	bl	800027c <__adddf3>
 800a5c8:	ec53 2b19 	vmov	r2, r3, d9
 800a5cc:	f7f6 f80c 	bl	80005e8 <__aeabi_dmul>
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	462b      	mov	r3, r5
 800a5d4:	f7f5 fe52 	bl	800027c <__adddf3>
 800a5d8:	4642      	mov	r2, r8
 800a5da:	4682      	mov	sl, r0
 800a5dc:	468b      	mov	fp, r1
 800a5de:	464b      	mov	r3, r9
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	f7f6 f800 	bl	80005e8 <__aeabi_dmul>
 800a5e8:	4b6b      	ldr	r3, [pc, #428]	; (800a798 <__ieee754_pow+0x770>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	460f      	mov	r7, r1
 800a5f0:	f7f5 fe44 	bl	800027c <__adddf3>
 800a5f4:	4652      	mov	r2, sl
 800a5f6:	465b      	mov	r3, fp
 800a5f8:	f7f5 fe40 	bl	800027c <__adddf3>
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	460d      	mov	r5, r1
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4640      	mov	r0, r8
 800a608:	4649      	mov	r1, r9
 800a60a:	f7f5 ffed 	bl	80005e8 <__aeabi_dmul>
 800a60e:	4b62      	ldr	r3, [pc, #392]	; (800a798 <__ieee754_pow+0x770>)
 800a610:	4680      	mov	r8, r0
 800a612:	4689      	mov	r9, r1
 800a614:	2200      	movs	r2, #0
 800a616:	4620      	mov	r0, r4
 800a618:	4629      	mov	r1, r5
 800a61a:	f7f5 fe2d 	bl	8000278 <__aeabi_dsub>
 800a61e:	4632      	mov	r2, r6
 800a620:	463b      	mov	r3, r7
 800a622:	f7f5 fe29 	bl	8000278 <__aeabi_dsub>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4650      	mov	r0, sl
 800a62c:	4659      	mov	r1, fp
 800a62e:	f7f5 fe23 	bl	8000278 <__aeabi_dsub>
 800a632:	ec53 2b18 	vmov	r2, r3, d8
 800a636:	f7f5 ffd7 	bl	80005e8 <__aeabi_dmul>
 800a63a:	4622      	mov	r2, r4
 800a63c:	4606      	mov	r6, r0
 800a63e:	460f      	mov	r7, r1
 800a640:	462b      	mov	r3, r5
 800a642:	ec51 0b19 	vmov	r0, r1, d9
 800a646:	f7f5 ffcf 	bl	80005e8 <__aeabi_dmul>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4630      	mov	r0, r6
 800a650:	4639      	mov	r1, r7
 800a652:	f7f5 fe13 	bl	800027c <__adddf3>
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4640      	mov	r0, r8
 800a660:	4649      	mov	r1, r9
 800a662:	f7f5 fe0b 	bl	800027c <__adddf3>
 800a666:	a33e      	add	r3, pc, #248	; (adr r3, 800a760 <__ieee754_pow+0x738>)
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	2000      	movs	r0, #0
 800a66e:	4604      	mov	r4, r0
 800a670:	460d      	mov	r5, r1
 800a672:	f7f5 ffb9 	bl	80005e8 <__aeabi_dmul>
 800a676:	4642      	mov	r2, r8
 800a678:	ec41 0b18 	vmov	d8, r0, r1
 800a67c:	464b      	mov	r3, r9
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	f7f5 fdf9 	bl	8000278 <__aeabi_dsub>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4630      	mov	r0, r6
 800a68c:	4639      	mov	r1, r7
 800a68e:	f7f5 fdf3 	bl	8000278 <__aeabi_dsub>
 800a692:	a335      	add	r3, pc, #212	; (adr r3, 800a768 <__ieee754_pow+0x740>)
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f7f5 ffa6 	bl	80005e8 <__aeabi_dmul>
 800a69c:	a334      	add	r3, pc, #208	; (adr r3, 800a770 <__ieee754_pow+0x748>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	f7f5 ff9d 	bl	80005e8 <__aeabi_dmul>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	f7f5 fde1 	bl	800027c <__adddf3>
 800a6ba:	9a07      	ldr	r2, [sp, #28]
 800a6bc:	4b37      	ldr	r3, [pc, #220]	; (800a79c <__ieee754_pow+0x774>)
 800a6be:	4413      	add	r3, r2
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	f7f5 fdda 	bl	800027c <__adddf3>
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	9805      	ldr	r0, [sp, #20]
 800a6cc:	468b      	mov	fp, r1
 800a6ce:	f7f5 ff21 	bl	8000514 <__aeabi_i2d>
 800a6d2:	9a07      	ldr	r2, [sp, #28]
 800a6d4:	4b32      	ldr	r3, [pc, #200]	; (800a7a0 <__ieee754_pow+0x778>)
 800a6d6:	4413      	add	r3, r2
 800a6d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6dc:	4606      	mov	r6, r0
 800a6de:	460f      	mov	r7, r1
 800a6e0:	4652      	mov	r2, sl
 800a6e2:	465b      	mov	r3, fp
 800a6e4:	ec51 0b18 	vmov	r0, r1, d8
 800a6e8:	f7f5 fdc8 	bl	800027c <__adddf3>
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	f7f5 fdc4 	bl	800027c <__adddf3>
 800a6f4:	4632      	mov	r2, r6
 800a6f6:	463b      	mov	r3, r7
 800a6f8:	f7f5 fdc0 	bl	800027c <__adddf3>
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	4632      	mov	r2, r6
 800a700:	463b      	mov	r3, r7
 800a702:	4604      	mov	r4, r0
 800a704:	460d      	mov	r5, r1
 800a706:	f7f5 fdb7 	bl	8000278 <__aeabi_dsub>
 800a70a:	4642      	mov	r2, r8
 800a70c:	464b      	mov	r3, r9
 800a70e:	f7f5 fdb3 	bl	8000278 <__aeabi_dsub>
 800a712:	ec53 2b18 	vmov	r2, r3, d8
 800a716:	f7f5 fdaf 	bl	8000278 <__aeabi_dsub>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4650      	mov	r0, sl
 800a720:	4659      	mov	r1, fp
 800a722:	e610      	b.n	800a346 <__ieee754_pow+0x31e>
 800a724:	2401      	movs	r4, #1
 800a726:	e6a1      	b.n	800a46c <__ieee754_pow+0x444>
 800a728:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a778 <__ieee754_pow+0x750>
 800a72c:	e617      	b.n	800a35e <__ieee754_pow+0x336>
 800a72e:	bf00      	nop
 800a730:	4a454eef 	.word	0x4a454eef
 800a734:	3fca7e28 	.word	0x3fca7e28
 800a738:	93c9db65 	.word	0x93c9db65
 800a73c:	3fcd864a 	.word	0x3fcd864a
 800a740:	a91d4101 	.word	0xa91d4101
 800a744:	3fd17460 	.word	0x3fd17460
 800a748:	518f264d 	.word	0x518f264d
 800a74c:	3fd55555 	.word	0x3fd55555
 800a750:	db6fabff 	.word	0xdb6fabff
 800a754:	3fdb6db6 	.word	0x3fdb6db6
 800a758:	33333303 	.word	0x33333303
 800a75c:	3fe33333 	.word	0x3fe33333
 800a760:	e0000000 	.word	0xe0000000
 800a764:	3feec709 	.word	0x3feec709
 800a768:	dc3a03fd 	.word	0xdc3a03fd
 800a76c:	3feec709 	.word	0x3feec709
 800a770:	145b01f5 	.word	0x145b01f5
 800a774:	be3e2fe0 	.word	0xbe3e2fe0
 800a778:	00000000 	.word	0x00000000
 800a77c:	3ff00000 	.word	0x3ff00000
 800a780:	7ff00000 	.word	0x7ff00000
 800a784:	43400000 	.word	0x43400000
 800a788:	0003988e 	.word	0x0003988e
 800a78c:	000bb679 	.word	0x000bb679
 800a790:	0800af50 	.word	0x0800af50
 800a794:	3ff00000 	.word	0x3ff00000
 800a798:	40080000 	.word	0x40080000
 800a79c:	0800af70 	.word	0x0800af70
 800a7a0:	0800af60 	.word	0x0800af60
 800a7a4:	a3b5      	add	r3, pc, #724	; (adr r3, 800aa7c <__ieee754_pow+0xa54>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	f7f5 fd65 	bl	800027c <__adddf3>
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	ec41 0b1a 	vmov	d10, r0, r1
 800a7b8:	462b      	mov	r3, r5
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f5 fd5b 	bl	8000278 <__aeabi_dsub>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	ec51 0b1a 	vmov	r0, r1, d10
 800a7ca:	f7f6 f99d 	bl	8000b08 <__aeabi_dcmpgt>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f47f ae04 	bne.w	800a3dc <__ieee754_pow+0x3b4>
 800a7d4:	4aa4      	ldr	r2, [pc, #656]	; (800aa68 <__ieee754_pow+0xa40>)
 800a7d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	f340 8108 	ble.w	800a9f0 <__ieee754_pow+0x9c8>
 800a7e0:	151b      	asrs	r3, r3, #20
 800a7e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a7e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a7ea:	fa4a f303 	asr.w	r3, sl, r3
 800a7ee:	445b      	add	r3, fp
 800a7f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a7f4:	4e9d      	ldr	r6, [pc, #628]	; (800aa6c <__ieee754_pow+0xa44>)
 800a7f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a7fa:	4116      	asrs	r6, r2
 800a7fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a800:	2000      	movs	r0, #0
 800a802:	ea23 0106 	bic.w	r1, r3, r6
 800a806:	f1c2 0214 	rsb	r2, r2, #20
 800a80a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a80e:	fa4a fa02 	asr.w	sl, sl, r2
 800a812:	f1bb 0f00 	cmp.w	fp, #0
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	4620      	mov	r0, r4
 800a81c:	4629      	mov	r1, r5
 800a81e:	bfb8      	it	lt
 800a820:	f1ca 0a00 	rsblt	sl, sl, #0
 800a824:	f7f5 fd28 	bl	8000278 <__aeabi_dsub>
 800a828:	ec41 0b19 	vmov	d9, r0, r1
 800a82c:	4642      	mov	r2, r8
 800a82e:	464b      	mov	r3, r9
 800a830:	ec51 0b19 	vmov	r0, r1, d9
 800a834:	f7f5 fd22 	bl	800027c <__adddf3>
 800a838:	a37b      	add	r3, pc, #492	; (adr r3, 800aa28 <__ieee754_pow+0xa00>)
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	2000      	movs	r0, #0
 800a840:	4604      	mov	r4, r0
 800a842:	460d      	mov	r5, r1
 800a844:	f7f5 fed0 	bl	80005e8 <__aeabi_dmul>
 800a848:	ec53 2b19 	vmov	r2, r3, d9
 800a84c:	4606      	mov	r6, r0
 800a84e:	460f      	mov	r7, r1
 800a850:	4620      	mov	r0, r4
 800a852:	4629      	mov	r1, r5
 800a854:	f7f5 fd10 	bl	8000278 <__aeabi_dsub>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	4640      	mov	r0, r8
 800a85e:	4649      	mov	r1, r9
 800a860:	f7f5 fd0a 	bl	8000278 <__aeabi_dsub>
 800a864:	a372      	add	r3, pc, #456	; (adr r3, 800aa30 <__ieee754_pow+0xa08>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	f7f5 febd 	bl	80005e8 <__aeabi_dmul>
 800a86e:	a372      	add	r3, pc, #456	; (adr r3, 800aa38 <__ieee754_pow+0xa10>)
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	4680      	mov	r8, r0
 800a876:	4689      	mov	r9, r1
 800a878:	4620      	mov	r0, r4
 800a87a:	4629      	mov	r1, r5
 800a87c:	f7f5 feb4 	bl	80005e8 <__aeabi_dmul>
 800a880:	4602      	mov	r2, r0
 800a882:	460b      	mov	r3, r1
 800a884:	4640      	mov	r0, r8
 800a886:	4649      	mov	r1, r9
 800a888:	f7f5 fcf8 	bl	800027c <__adddf3>
 800a88c:	4604      	mov	r4, r0
 800a88e:	460d      	mov	r5, r1
 800a890:	4602      	mov	r2, r0
 800a892:	460b      	mov	r3, r1
 800a894:	4630      	mov	r0, r6
 800a896:	4639      	mov	r1, r7
 800a898:	f7f5 fcf0 	bl	800027c <__adddf3>
 800a89c:	4632      	mov	r2, r6
 800a89e:	463b      	mov	r3, r7
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	4689      	mov	r9, r1
 800a8a4:	f7f5 fce8 	bl	8000278 <__aeabi_dsub>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	f7f5 fce2 	bl	8000278 <__aeabi_dsub>
 800a8b4:	4642      	mov	r2, r8
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	460f      	mov	r7, r1
 800a8ba:	464b      	mov	r3, r9
 800a8bc:	4640      	mov	r0, r8
 800a8be:	4649      	mov	r1, r9
 800a8c0:	f7f5 fe92 	bl	80005e8 <__aeabi_dmul>
 800a8c4:	a35e      	add	r3, pc, #376	; (adr r3, 800aa40 <__ieee754_pow+0xa18>)
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	460d      	mov	r5, r1
 800a8ce:	f7f5 fe8b 	bl	80005e8 <__aeabi_dmul>
 800a8d2:	a35d      	add	r3, pc, #372	; (adr r3, 800aa48 <__ieee754_pow+0xa20>)
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f7f5 fcce 	bl	8000278 <__aeabi_dsub>
 800a8dc:	4622      	mov	r2, r4
 800a8de:	462b      	mov	r3, r5
 800a8e0:	f7f5 fe82 	bl	80005e8 <__aeabi_dmul>
 800a8e4:	a35a      	add	r3, pc, #360	; (adr r3, 800aa50 <__ieee754_pow+0xa28>)
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	f7f5 fcc7 	bl	800027c <__adddf3>
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	462b      	mov	r3, r5
 800a8f2:	f7f5 fe79 	bl	80005e8 <__aeabi_dmul>
 800a8f6:	a358      	add	r3, pc, #352	; (adr r3, 800aa58 <__ieee754_pow+0xa30>)
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	f7f5 fcbc 	bl	8000278 <__aeabi_dsub>
 800a900:	4622      	mov	r2, r4
 800a902:	462b      	mov	r3, r5
 800a904:	f7f5 fe70 	bl	80005e8 <__aeabi_dmul>
 800a908:	a355      	add	r3, pc, #340	; (adr r3, 800aa60 <__ieee754_pow+0xa38>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f7f5 fcb5 	bl	800027c <__adddf3>
 800a912:	4622      	mov	r2, r4
 800a914:	462b      	mov	r3, r5
 800a916:	f7f5 fe67 	bl	80005e8 <__aeabi_dmul>
 800a91a:	4602      	mov	r2, r0
 800a91c:	460b      	mov	r3, r1
 800a91e:	4640      	mov	r0, r8
 800a920:	4649      	mov	r1, r9
 800a922:	f7f5 fca9 	bl	8000278 <__aeabi_dsub>
 800a926:	4604      	mov	r4, r0
 800a928:	460d      	mov	r5, r1
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	4640      	mov	r0, r8
 800a930:	4649      	mov	r1, r9
 800a932:	f7f5 fe59 	bl	80005e8 <__aeabi_dmul>
 800a936:	2200      	movs	r2, #0
 800a938:	ec41 0b19 	vmov	d9, r0, r1
 800a93c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a940:	4620      	mov	r0, r4
 800a942:	4629      	mov	r1, r5
 800a944:	f7f5 fc98 	bl	8000278 <__aeabi_dsub>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	ec51 0b19 	vmov	r0, r1, d9
 800a950:	f7f5 ff74 	bl	800083c <__aeabi_ddiv>
 800a954:	4632      	mov	r2, r6
 800a956:	4604      	mov	r4, r0
 800a958:	460d      	mov	r5, r1
 800a95a:	463b      	mov	r3, r7
 800a95c:	4640      	mov	r0, r8
 800a95e:	4649      	mov	r1, r9
 800a960:	f7f5 fe42 	bl	80005e8 <__aeabi_dmul>
 800a964:	4632      	mov	r2, r6
 800a966:	463b      	mov	r3, r7
 800a968:	f7f5 fc88 	bl	800027c <__adddf3>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4620      	mov	r0, r4
 800a972:	4629      	mov	r1, r5
 800a974:	f7f5 fc80 	bl	8000278 <__aeabi_dsub>
 800a978:	4642      	mov	r2, r8
 800a97a:	464b      	mov	r3, r9
 800a97c:	f7f5 fc7c 	bl	8000278 <__aeabi_dsub>
 800a980:	460b      	mov	r3, r1
 800a982:	4602      	mov	r2, r0
 800a984:	493a      	ldr	r1, [pc, #232]	; (800aa70 <__ieee754_pow+0xa48>)
 800a986:	2000      	movs	r0, #0
 800a988:	f7f5 fc76 	bl	8000278 <__aeabi_dsub>
 800a98c:	ec41 0b10 	vmov	d0, r0, r1
 800a990:	ee10 3a90 	vmov	r3, s1
 800a994:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a99c:	da2b      	bge.n	800a9f6 <__ieee754_pow+0x9ce>
 800a99e:	4650      	mov	r0, sl
 800a9a0:	f000 f966 	bl	800ac70 <scalbn>
 800a9a4:	ec51 0b10 	vmov	r0, r1, d0
 800a9a8:	ec53 2b18 	vmov	r2, r3, d8
 800a9ac:	f7ff bbed 	b.w	800a18a <__ieee754_pow+0x162>
 800a9b0:	4b30      	ldr	r3, [pc, #192]	; (800aa74 <__ieee754_pow+0xa4c>)
 800a9b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a9b6:	429e      	cmp	r6, r3
 800a9b8:	f77f af0c 	ble.w	800a7d4 <__ieee754_pow+0x7ac>
 800a9bc:	4b2e      	ldr	r3, [pc, #184]	; (800aa78 <__ieee754_pow+0xa50>)
 800a9be:	440b      	add	r3, r1
 800a9c0:	4303      	orrs	r3, r0
 800a9c2:	d009      	beq.n	800a9d8 <__ieee754_pow+0x9b0>
 800a9c4:	ec51 0b18 	vmov	r0, r1, d8
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f7f6 f87e 	bl	8000acc <__aeabi_dcmplt>
 800a9d0:	3800      	subs	r0, #0
 800a9d2:	bf18      	it	ne
 800a9d4:	2001      	movne	r0, #1
 800a9d6:	e447      	b.n	800a268 <__ieee754_pow+0x240>
 800a9d8:	4622      	mov	r2, r4
 800a9da:	462b      	mov	r3, r5
 800a9dc:	f7f5 fc4c 	bl	8000278 <__aeabi_dsub>
 800a9e0:	4642      	mov	r2, r8
 800a9e2:	464b      	mov	r3, r9
 800a9e4:	f7f6 f886 	bl	8000af4 <__aeabi_dcmpge>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	f43f aef3 	beq.w	800a7d4 <__ieee754_pow+0x7ac>
 800a9ee:	e7e9      	b.n	800a9c4 <__ieee754_pow+0x99c>
 800a9f0:	f04f 0a00 	mov.w	sl, #0
 800a9f4:	e71a      	b.n	800a82c <__ieee754_pow+0x804>
 800a9f6:	ec51 0b10 	vmov	r0, r1, d0
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	e7d4      	b.n	800a9a8 <__ieee754_pow+0x980>
 800a9fe:	491c      	ldr	r1, [pc, #112]	; (800aa70 <__ieee754_pow+0xa48>)
 800aa00:	2000      	movs	r0, #0
 800aa02:	f7ff bb30 	b.w	800a066 <__ieee754_pow+0x3e>
 800aa06:	2000      	movs	r0, #0
 800aa08:	2100      	movs	r1, #0
 800aa0a:	f7ff bb2c 	b.w	800a066 <__ieee754_pow+0x3e>
 800aa0e:	4630      	mov	r0, r6
 800aa10:	4639      	mov	r1, r7
 800aa12:	f7ff bb28 	b.w	800a066 <__ieee754_pow+0x3e>
 800aa16:	9204      	str	r2, [sp, #16]
 800aa18:	f7ff bb7a 	b.w	800a110 <__ieee754_pow+0xe8>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	f7ff bb64 	b.w	800a0ea <__ieee754_pow+0xc2>
 800aa22:	bf00      	nop
 800aa24:	f3af 8000 	nop.w
 800aa28:	00000000 	.word	0x00000000
 800aa2c:	3fe62e43 	.word	0x3fe62e43
 800aa30:	fefa39ef 	.word	0xfefa39ef
 800aa34:	3fe62e42 	.word	0x3fe62e42
 800aa38:	0ca86c39 	.word	0x0ca86c39
 800aa3c:	be205c61 	.word	0xbe205c61
 800aa40:	72bea4d0 	.word	0x72bea4d0
 800aa44:	3e663769 	.word	0x3e663769
 800aa48:	c5d26bf1 	.word	0xc5d26bf1
 800aa4c:	3ebbbd41 	.word	0x3ebbbd41
 800aa50:	af25de2c 	.word	0xaf25de2c
 800aa54:	3f11566a 	.word	0x3f11566a
 800aa58:	16bebd93 	.word	0x16bebd93
 800aa5c:	3f66c16c 	.word	0x3f66c16c
 800aa60:	5555553e 	.word	0x5555553e
 800aa64:	3fc55555 	.word	0x3fc55555
 800aa68:	3fe00000 	.word	0x3fe00000
 800aa6c:	000fffff 	.word	0x000fffff
 800aa70:	3ff00000 	.word	0x3ff00000
 800aa74:	4090cbff 	.word	0x4090cbff
 800aa78:	3f6f3400 	.word	0x3f6f3400
 800aa7c:	652b82fe 	.word	0x652b82fe
 800aa80:	3c971547 	.word	0x3c971547

0800aa84 <__ieee754_sqrt>:
 800aa84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa88:	ec55 4b10 	vmov	r4, r5, d0
 800aa8c:	4e55      	ldr	r6, [pc, #340]	; (800abe4 <__ieee754_sqrt+0x160>)
 800aa8e:	43ae      	bics	r6, r5
 800aa90:	ee10 0a10 	vmov	r0, s0
 800aa94:	ee10 3a10 	vmov	r3, s0
 800aa98:	462a      	mov	r2, r5
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	d110      	bne.n	800aac0 <__ieee754_sqrt+0x3c>
 800aa9e:	ee10 2a10 	vmov	r2, s0
 800aaa2:	462b      	mov	r3, r5
 800aaa4:	f7f5 fda0 	bl	80005e8 <__aeabi_dmul>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4620      	mov	r0, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	f7f5 fbe4 	bl	800027c <__adddf3>
 800aab4:	4604      	mov	r4, r0
 800aab6:	460d      	mov	r5, r1
 800aab8:	ec45 4b10 	vmov	d0, r4, r5
 800aabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac0:	2d00      	cmp	r5, #0
 800aac2:	dc10      	bgt.n	800aae6 <__ieee754_sqrt+0x62>
 800aac4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800aac8:	4330      	orrs	r0, r6
 800aaca:	d0f5      	beq.n	800aab8 <__ieee754_sqrt+0x34>
 800aacc:	b15d      	cbz	r5, 800aae6 <__ieee754_sqrt+0x62>
 800aace:	ee10 2a10 	vmov	r2, s0
 800aad2:	462b      	mov	r3, r5
 800aad4:	ee10 0a10 	vmov	r0, s0
 800aad8:	f7f5 fbce 	bl	8000278 <__aeabi_dsub>
 800aadc:	4602      	mov	r2, r0
 800aade:	460b      	mov	r3, r1
 800aae0:	f7f5 feac 	bl	800083c <__aeabi_ddiv>
 800aae4:	e7e6      	b.n	800aab4 <__ieee754_sqrt+0x30>
 800aae6:	1512      	asrs	r2, r2, #20
 800aae8:	d074      	beq.n	800abd4 <__ieee754_sqrt+0x150>
 800aaea:	07d4      	lsls	r4, r2, #31
 800aaec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aaf0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800aaf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800aaf8:	bf5e      	ittt	pl
 800aafa:	0fda      	lsrpl	r2, r3, #31
 800aafc:	005b      	lslpl	r3, r3, #1
 800aafe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ab02:	2400      	movs	r4, #0
 800ab04:	0fda      	lsrs	r2, r3, #31
 800ab06:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ab0a:	107f      	asrs	r7, r7, #1
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	2516      	movs	r5, #22
 800ab10:	4620      	mov	r0, r4
 800ab12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ab16:	1886      	adds	r6, r0, r2
 800ab18:	428e      	cmp	r6, r1
 800ab1a:	bfde      	ittt	le
 800ab1c:	1b89      	suble	r1, r1, r6
 800ab1e:	18b0      	addle	r0, r6, r2
 800ab20:	18a4      	addle	r4, r4, r2
 800ab22:	0049      	lsls	r1, r1, #1
 800ab24:	3d01      	subs	r5, #1
 800ab26:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ab2a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ab2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab32:	d1f0      	bne.n	800ab16 <__ieee754_sqrt+0x92>
 800ab34:	462a      	mov	r2, r5
 800ab36:	f04f 0e20 	mov.w	lr, #32
 800ab3a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ab3e:	4281      	cmp	r1, r0
 800ab40:	eb06 0c05 	add.w	ip, r6, r5
 800ab44:	dc02      	bgt.n	800ab4c <__ieee754_sqrt+0xc8>
 800ab46:	d113      	bne.n	800ab70 <__ieee754_sqrt+0xec>
 800ab48:	459c      	cmp	ip, r3
 800ab4a:	d811      	bhi.n	800ab70 <__ieee754_sqrt+0xec>
 800ab4c:	f1bc 0f00 	cmp.w	ip, #0
 800ab50:	eb0c 0506 	add.w	r5, ip, r6
 800ab54:	da43      	bge.n	800abde <__ieee754_sqrt+0x15a>
 800ab56:	2d00      	cmp	r5, #0
 800ab58:	db41      	blt.n	800abde <__ieee754_sqrt+0x15a>
 800ab5a:	f100 0801 	add.w	r8, r0, #1
 800ab5e:	1a09      	subs	r1, r1, r0
 800ab60:	459c      	cmp	ip, r3
 800ab62:	bf88      	it	hi
 800ab64:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ab68:	eba3 030c 	sub.w	r3, r3, ip
 800ab6c:	4432      	add	r2, r6
 800ab6e:	4640      	mov	r0, r8
 800ab70:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ab74:	f1be 0e01 	subs.w	lr, lr, #1
 800ab78:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ab7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab80:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ab84:	d1db      	bne.n	800ab3e <__ieee754_sqrt+0xba>
 800ab86:	430b      	orrs	r3, r1
 800ab88:	d006      	beq.n	800ab98 <__ieee754_sqrt+0x114>
 800ab8a:	1c50      	adds	r0, r2, #1
 800ab8c:	bf13      	iteet	ne
 800ab8e:	3201      	addne	r2, #1
 800ab90:	3401      	addeq	r4, #1
 800ab92:	4672      	moveq	r2, lr
 800ab94:	f022 0201 	bicne.w	r2, r2, #1
 800ab98:	1063      	asrs	r3, r4, #1
 800ab9a:	0852      	lsrs	r2, r2, #1
 800ab9c:	07e1      	lsls	r1, r4, #31
 800ab9e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aba2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aba6:	bf48      	it	mi
 800aba8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800abac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800abb0:	4614      	mov	r4, r2
 800abb2:	e781      	b.n	800aab8 <__ieee754_sqrt+0x34>
 800abb4:	0ad9      	lsrs	r1, r3, #11
 800abb6:	3815      	subs	r0, #21
 800abb8:	055b      	lsls	r3, r3, #21
 800abba:	2900      	cmp	r1, #0
 800abbc:	d0fa      	beq.n	800abb4 <__ieee754_sqrt+0x130>
 800abbe:	02cd      	lsls	r5, r1, #11
 800abc0:	d50a      	bpl.n	800abd8 <__ieee754_sqrt+0x154>
 800abc2:	f1c2 0420 	rsb	r4, r2, #32
 800abc6:	fa23 f404 	lsr.w	r4, r3, r4
 800abca:	1e55      	subs	r5, r2, #1
 800abcc:	4093      	lsls	r3, r2
 800abce:	4321      	orrs	r1, r4
 800abd0:	1b42      	subs	r2, r0, r5
 800abd2:	e78a      	b.n	800aaea <__ieee754_sqrt+0x66>
 800abd4:	4610      	mov	r0, r2
 800abd6:	e7f0      	b.n	800abba <__ieee754_sqrt+0x136>
 800abd8:	0049      	lsls	r1, r1, #1
 800abda:	3201      	adds	r2, #1
 800abdc:	e7ef      	b.n	800abbe <__ieee754_sqrt+0x13a>
 800abde:	4680      	mov	r8, r0
 800abe0:	e7bd      	b.n	800ab5e <__ieee754_sqrt+0xda>
 800abe2:	bf00      	nop
 800abe4:	7ff00000 	.word	0x7ff00000

0800abe8 <with_errno>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	4604      	mov	r4, r0
 800abec:	460d      	mov	r5, r1
 800abee:	4616      	mov	r6, r2
 800abf0:	f7fe f948 	bl	8008e84 <__errno>
 800abf4:	4629      	mov	r1, r5
 800abf6:	6006      	str	r6, [r0, #0]
 800abf8:	4620      	mov	r0, r4
 800abfa:	bd70      	pop	{r4, r5, r6, pc}

0800abfc <xflow>:
 800abfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abfe:	4614      	mov	r4, r2
 800ac00:	461d      	mov	r5, r3
 800ac02:	b108      	cbz	r0, 800ac08 <xflow+0xc>
 800ac04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac08:	e9cd 2300 	strd	r2, r3, [sp]
 800ac0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac10:	4620      	mov	r0, r4
 800ac12:	4629      	mov	r1, r5
 800ac14:	f7f5 fce8 	bl	80005e8 <__aeabi_dmul>
 800ac18:	2222      	movs	r2, #34	; 0x22
 800ac1a:	b003      	add	sp, #12
 800ac1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac20:	f7ff bfe2 	b.w	800abe8 <with_errno>

0800ac24 <__math_uflow>:
 800ac24:	b508      	push	{r3, lr}
 800ac26:	2200      	movs	r2, #0
 800ac28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ac2c:	f7ff ffe6 	bl	800abfc <xflow>
 800ac30:	ec41 0b10 	vmov	d0, r0, r1
 800ac34:	bd08      	pop	{r3, pc}

0800ac36 <__math_oflow>:
 800ac36:	b508      	push	{r3, lr}
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800ac3e:	f7ff ffdd 	bl	800abfc <xflow>
 800ac42:	ec41 0b10 	vmov	d0, r0, r1
 800ac46:	bd08      	pop	{r3, pc}

0800ac48 <fabs>:
 800ac48:	ec51 0b10 	vmov	r0, r1, d0
 800ac4c:	ee10 2a10 	vmov	r2, s0
 800ac50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac54:	ec43 2b10 	vmov	d0, r2, r3
 800ac58:	4770      	bx	lr

0800ac5a <finite>:
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	ed8d 0b00 	vstr	d0, [sp]
 800ac60:	9801      	ldr	r0, [sp, #4]
 800ac62:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ac66:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ac6a:	0fc0      	lsrs	r0, r0, #31
 800ac6c:	b002      	add	sp, #8
 800ac6e:	4770      	bx	lr

0800ac70 <scalbn>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	ec55 4b10 	vmov	r4, r5, d0
 800ac76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	b99a      	cbnz	r2, 800aca8 <scalbn+0x38>
 800ac80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ac84:	4323      	orrs	r3, r4
 800ac86:	d036      	beq.n	800acf6 <scalbn+0x86>
 800ac88:	4b39      	ldr	r3, [pc, #228]	; (800ad70 <scalbn+0x100>)
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	ee10 0a10 	vmov	r0, s0
 800ac90:	2200      	movs	r2, #0
 800ac92:	f7f5 fca9 	bl	80005e8 <__aeabi_dmul>
 800ac96:	4b37      	ldr	r3, [pc, #220]	; (800ad74 <scalbn+0x104>)
 800ac98:	429e      	cmp	r6, r3
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	460d      	mov	r5, r1
 800ac9e:	da10      	bge.n	800acc2 <scalbn+0x52>
 800aca0:	a32b      	add	r3, pc, #172	; (adr r3, 800ad50 <scalbn+0xe0>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	e03a      	b.n	800ad1e <scalbn+0xae>
 800aca8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800acac:	428a      	cmp	r2, r1
 800acae:	d10c      	bne.n	800acca <scalbn+0x5a>
 800acb0:	ee10 2a10 	vmov	r2, s0
 800acb4:	4620      	mov	r0, r4
 800acb6:	4629      	mov	r1, r5
 800acb8:	f7f5 fae0 	bl	800027c <__adddf3>
 800acbc:	4604      	mov	r4, r0
 800acbe:	460d      	mov	r5, r1
 800acc0:	e019      	b.n	800acf6 <scalbn+0x86>
 800acc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800acc6:	460b      	mov	r3, r1
 800acc8:	3a36      	subs	r2, #54	; 0x36
 800acca:	4432      	add	r2, r6
 800accc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800acd0:	428a      	cmp	r2, r1
 800acd2:	dd08      	ble.n	800ace6 <scalbn+0x76>
 800acd4:	2d00      	cmp	r5, #0
 800acd6:	a120      	add	r1, pc, #128	; (adr r1, 800ad58 <scalbn+0xe8>)
 800acd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acdc:	da1c      	bge.n	800ad18 <scalbn+0xa8>
 800acde:	a120      	add	r1, pc, #128	; (adr r1, 800ad60 <scalbn+0xf0>)
 800ace0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ace4:	e018      	b.n	800ad18 <scalbn+0xa8>
 800ace6:	2a00      	cmp	r2, #0
 800ace8:	dd08      	ble.n	800acfc <scalbn+0x8c>
 800acea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800acee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800acf2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800acf6:	ec45 4b10 	vmov	d0, r4, r5
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ad00:	da19      	bge.n	800ad36 <scalbn+0xc6>
 800ad02:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ad06:	429e      	cmp	r6, r3
 800ad08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ad0c:	dd0a      	ble.n	800ad24 <scalbn+0xb4>
 800ad0e:	a112      	add	r1, pc, #72	; (adr r1, 800ad58 <scalbn+0xe8>)
 800ad10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d1e2      	bne.n	800acde <scalbn+0x6e>
 800ad18:	a30f      	add	r3, pc, #60	; (adr r3, 800ad58 <scalbn+0xe8>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	f7f5 fc63 	bl	80005e8 <__aeabi_dmul>
 800ad22:	e7cb      	b.n	800acbc <scalbn+0x4c>
 800ad24:	a10a      	add	r1, pc, #40	; (adr r1, 800ad50 <scalbn+0xe0>)
 800ad26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0b8      	beq.n	800aca0 <scalbn+0x30>
 800ad2e:	a10e      	add	r1, pc, #56	; (adr r1, 800ad68 <scalbn+0xf8>)
 800ad30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad34:	e7b4      	b.n	800aca0 <scalbn+0x30>
 800ad36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad3a:	3236      	adds	r2, #54	; 0x36
 800ad3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ad40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ad44:	4620      	mov	r0, r4
 800ad46:	4b0c      	ldr	r3, [pc, #48]	; (800ad78 <scalbn+0x108>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	e7e8      	b.n	800ad1e <scalbn+0xae>
 800ad4c:	f3af 8000 	nop.w
 800ad50:	c2f8f359 	.word	0xc2f8f359
 800ad54:	01a56e1f 	.word	0x01a56e1f
 800ad58:	8800759c 	.word	0x8800759c
 800ad5c:	7e37e43c 	.word	0x7e37e43c
 800ad60:	8800759c 	.word	0x8800759c
 800ad64:	fe37e43c 	.word	0xfe37e43c
 800ad68:	c2f8f359 	.word	0xc2f8f359
 800ad6c:	81a56e1f 	.word	0x81a56e1f
 800ad70:	43500000 	.word	0x43500000
 800ad74:	ffff3cb0 	.word	0xffff3cb0
 800ad78:	3c900000 	.word	0x3c900000

0800ad7c <_init>:
 800ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7e:	bf00      	nop
 800ad80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad82:	bc08      	pop	{r3}
 800ad84:	469e      	mov	lr, r3
 800ad86:	4770      	bx	lr

0800ad88 <_fini>:
 800ad88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8a:	bf00      	nop
 800ad8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad8e:	bc08      	pop	{r3}
 800ad90:	469e      	mov	lr, r3
 800ad92:	4770      	bx	lr
