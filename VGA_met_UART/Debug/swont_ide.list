
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a084  0800a084  00022798  2**0
                  CONTENTS
  4 .ARM          00000008  0800a084  0800a084  0001a084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a08c  0800a08c  00022798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a090  0800a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002798  20000000  0800a094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013590  20002798  0800c82c  00022798  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20015d28  0800c82c  00025d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022798  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167db  00000000  00000000  000227c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e4  00000000  00000000  00038fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003c688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026766  00000000  00000000  0003ebb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d131  00000000  00000000  00065316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d07f0  00000000  00000000  00082447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152c37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005784  00000000  00000000  00152c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002798 	.word	0x20002798
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cfc 	.word	0x08009cfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000279c 	.word	0x2000279c
 80001cc:	08009cfc 	.word	0x08009cfc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <API_draw_bitmap>:
	}
	return error;
}

int API_draw_bitmap(uint16_t nr, uint16_t x_lup, uint16_t y_lup)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
 800058e:	460b      	mov	r3, r1
 8000590:	80bb      	strh	r3, [r7, #4]
 8000592:	4613      	mov	r3, r2
 8000594:	807b      	strh	r3, [r7, #2]
	int error = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
	uint16_t xp,yp,xp2,yp2 = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	823b      	strh	r3, [r7, #16]
	yp2=0;
 800059e:	2300      	movs	r3, #0
 80005a0:	823b      	strh	r3, [r7, #16]
	  for(yp = 20; yp < 120; yp++)
 80005a2:	2314      	movs	r3, #20
 80005a4:	82bb      	strh	r3, [r7, #20]
 80005a6:	e021      	b.n	80005ec <API_draw_bitmap+0x68>
	  {
	    for(xp = 0, xp2 = 0; xp < 100; xp++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	82fb      	strh	r3, [r7, #22]
 80005ac:	2300      	movs	r3, #0
 80005ae:	827b      	strh	r3, [r7, #18]
 80005b0:	e013      	b.n	80005da <API_draw_bitmap+0x56>
	    {
	      UB_VGA_SetPixel(xp, yp, bitmap[yp2][xp2]);
 80005b2:	8a3a      	ldrh	r2, [r7, #16]
 80005b4:	8a7b      	ldrh	r3, [r7, #18]
 80005b6:	4911      	ldr	r1, [pc, #68]	; (80005fc <API_draw_bitmap+0x78>)
 80005b8:	2064      	movs	r0, #100	; 0x64
 80005ba:	fb00 f202 	mul.w	r2, r0, r2
 80005be:	440a      	add	r2, r1
 80005c0:	4413      	add	r3, r2
 80005c2:	781a      	ldrb	r2, [r3, #0]
 80005c4:	8ab9      	ldrh	r1, [r7, #20]
 80005c6:	8afb      	ldrh	r3, [r7, #22]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 f8bf 	bl	800174c <UB_VGA_SetPixel>
	      xp2++;
 80005ce:	8a7b      	ldrh	r3, [r7, #18]
 80005d0:	3301      	adds	r3, #1
 80005d2:	827b      	strh	r3, [r7, #18]
	    for(xp = 0, xp2 = 0; xp < 100; xp++)
 80005d4:	8afb      	ldrh	r3, [r7, #22]
 80005d6:	3301      	adds	r3, #1
 80005d8:	82fb      	strh	r3, [r7, #22]
 80005da:	8afb      	ldrh	r3, [r7, #22]
 80005dc:	2b63      	cmp	r3, #99	; 0x63
 80005de:	d9e8      	bls.n	80005b2 <API_draw_bitmap+0x2e>
	    }
	    yp2++;
 80005e0:	8a3b      	ldrh	r3, [r7, #16]
 80005e2:	3301      	adds	r3, #1
 80005e4:	823b      	strh	r3, [r7, #16]
	  for(yp = 20; yp < 120; yp++)
 80005e6:	8abb      	ldrh	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	82bb      	strh	r3, [r7, #20]
 80005ec:	8abb      	ldrh	r3, [r7, #20]
 80005ee:	2b77      	cmp	r3, #119	; 0x77
 80005f0:	d9da      	bls.n	80005a8 <API_draw_bitmap+0x24>
//
//		break;
//	}
//
//	}
	return error;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000000 	.word	0x20000000

08000600 <LogicLayer_Parser>:


Message_parser LogicLayer_Parser(char*, unsigned int);

Message_parser LogicLayer_Parser(char *Message, unsigned int Messagelength)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b0ee      	sub	sp, #440	; 0x1b8
 8000604:	af00      	add	r7, sp, #0
 8000606:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800060a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800060e:	6018      	str	r0, [r3, #0]
 8000610:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000614:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000618:	6019      	str	r1, [r3, #0]
 800061a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800061e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8000622:	601a      	str	r2, [r3, #0]
	unsigned int i,j,k,l = 0;			// Maak iterators aan voor het maken van een moving window langs de buffer message
 8000624:	2300      	movs	r3, #0
 8000626:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	Message_parser localParser;

	  while (Message[i] != 0) 	// Kijk voor line end
 800062a:	e08d      	b.n	8000748 <LogicLayer_Parser+0x148>
	  {

		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 800062c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000630:	3301      	adds	r3, #1
 8000632:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 8000636:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800063a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800063e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	429a      	cmp	r2, r3
 8000646:	d903      	bls.n	8000650 <LogicLayer_Parser+0x50>
			  {
				  printf("Error , not detected \n");
 8000648:	4856      	ldr	r0, [pc, #344]	; (80007a4 <LogicLayer_Parser+0x1a4>)
 800064a:	f008 fb4b 	bl	8008ce4 <puts>
				  break;
 800064e:	e015      	b.n	800067c <LogicLayer_Parser+0x7c>
		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
 8000650:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000654:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b2c      	cmp	r3, #44	; 0x2c
 8000664:	d00a      	beq.n	800067c <LogicLayer_Parser+0x7c>
 8000666:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800066a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000674:	4413      	add	r3, r2
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1d7      	bne.n	800062c <LogicLayer_Parser+0x2c>
			  }
		  }

	  	  for (l=0; j<i; j++)
 800067c:	2300      	movs	r3, #0
 800067e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000682:	e023      	b.n	80006cc <LogicLayer_Parser+0xcc>
	  	  {
	  		localParser.Parser_Message[k][l] = Message[j];
 8000684:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000688:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000692:	4413      	add	r3, r2
 8000694:	7818      	ldrb	r0, [r3, #0]
 8000696:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800069a:	f5a3 71d2 	sub.w	r1, r3, #420	; 0x1a4
 800069e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	18ca      	adds	r2, r1, r3
 80006ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80006b0:	4413      	add	r3, r2
 80006b2:	3301      	adds	r3, #1
 80006b4:	4602      	mov	r2, r0
 80006b6:	701a      	strb	r2, [r3, #0]
	  		l++;
 80006b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80006bc:	3301      	adds	r3, #1
 80006be:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  	  for (l=0; j<i; j++)
 80006c2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80006c6:	3301      	adds	r3, #1
 80006c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80006cc:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80006d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d3d5      	bcc.n	8000684 <LogicLayer_Parser+0x84>
	  	  }

	  	  j = i+1;
 80006d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80006dc:	3301      	adds	r3, #1
 80006de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	  	  if (Message[j] == 0x20)	// checking for spaces between lines
 80006e2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80006e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b20      	cmp	r3, #32
 80006f6:	d104      	bne.n	8000702 <LogicLayer_Parser+0x102>
	  	  {
	  		  j++;
 80006f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80006fc:	3301      	adds	r3, #1
 80006fe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  	  }

	  	  localParser.Parser_Message[k][l] = '\0';
 8000702:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000706:	f5a3 71d2 	sub.w	r1, r3, #420	; 0x1a4
 800070a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	18ca      	adds	r2, r1, r3
 8000718:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800071c:	4413      	add	r3, r2
 800071e:	3301      	adds	r3, #1
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]

	  	  i++;		//verhoog de iterator om niet in een oneindige loop te komen ivm while loop en komma detectie
 8000724:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000728:	3301      	adds	r3, #1
 800072a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

	  	  k=(k+1);	//verhoog iterator voor meerdere berichten opslag
 800072e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000732:	3301      	adds	r3, #1
 8000734:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 8000738:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800073c:	2b14      	cmp	r3, #20
 800073e:	d903      	bls.n	8000748 <LogicLayer_Parser+0x148>
	  	  	  {
	  		  	  printf("Error no message end detected \n");
 8000740:	4819      	ldr	r0, [pc, #100]	; (80007a8 <LogicLayer_Parser+0x1a8>)
 8000742:	f008 facf 	bl	8008ce4 <puts>
	  		  	  break;
 8000746:	e00b      	b.n	8000760 <LogicLayer_Parser+0x160>
	  while (Message[i] != 0) 	// Kijk voor line end
 8000748:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800074c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	f47f af78 	bne.w	8000650 <LogicLayer_Parser+0x50>
	  	  	  }

	  }

	localParser.Variable_length = k;
 8000760:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000764:	b2da      	uxtb	r2, r3
 8000766:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800076a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800076e:	701a      	strb	r2, [r3, #0]

	return localParser;
 8000770:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000774:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800077e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8000782:	4610      	mov	r0, r2
 8000784:	4619      	mov	r1, r3
 8000786:	f240 1391 	movw	r3, #401	; 0x191
 800078a:	461a      	mov	r2, r3
 800078c:	f008 fa26 	bl	8008bdc <memcpy>
}
 8000790:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000794:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	08009d14 	.word	0x08009d14
 80007a8:	08009d2c 	.word	0x08009d2c

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_DMA_Init+0x3c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <MX_DMA_Init+0x3c>)
 80007bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_DMA_Init+0x3c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2044      	movs	r0, #68	; 0x44
 80007d4:	f001 f953 	bl	8001a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80007d8:	2044      	movs	r0, #68	; 0x44
 80007da:	f001 f96c 	bl	8001ab6 <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <MX_GPIO_Init+0x108>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a3a      	ldr	r2, [pc, #232]	; (80008f4 <MX_GPIO_Init+0x108>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <MX_GPIO_Init+0x108>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <MX_GPIO_Init+0x108>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a33      	ldr	r2, [pc, #204]	; (80008f4 <MX_GPIO_Init+0x108>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_GPIO_Init+0x108>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_GPIO_Init+0x108>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2c      	ldr	r2, [pc, #176]	; (80008f4 <MX_GPIO_Init+0x108>)
 8000844:	f043 0310 	orr.w	r3, r3, #16
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_GPIO_Init+0x108>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_GPIO_Init+0x108>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <MX_GPIO_Init+0x108>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_GPIO_Init+0x108>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2102      	movs	r1, #2
 8000876:	4820      	ldr	r0, [pc, #128]	; (80008f8 <MX_GPIO_Init+0x10c>)
 8000878:	f001 fed6 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <MX_GPIO_Init+0x110>)
 8000884:	f001 fed0 	bl	8002628 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088e:	481c      	ldr	r0, [pc, #112]	; (8000900 <MX_GPIO_Init+0x114>)
 8000890:	f001 feca 	bl	8002628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000894:	2302      	movs	r3, #2
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_GPIO_Init+0x10c>)
 80008ac:	f001 fd20 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80008b0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80008b4:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_GPIO_Init+0x110>)
 80008ca:	f001 fd11 	bl	80022f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80008ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <MX_GPIO_Init+0x114>)
 80008e8:	f001 fd02 	bl	80022f0 <HAL_GPIO_Init>

}
 80008ec:	bf00      	nop
 80008ee:	3728      	adds	r7, #40	; 0x28
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40021000 	.word	0x40021000
 8000900:	40020400 	.word	0x40020400

08000904 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000904:	b40f      	push	{r0, r1, r2, r3}
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	f44f 7180 	mov.w	r1, #256	; 0x100
 800091a:	480b      	ldr	r0, [pc, #44]	; (8000948 <myprintf+0x44>)
 800091c:	f008 fa16 	bl	8008d4c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <myprintf+0x44>)
 8000922:	f7ff fc55 	bl	80001d0 <strlen>
 8000926:	4603      	mov	r3, r0
 8000928:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	b29a      	uxth	r2, r3
 800092e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000932:	4905      	ldr	r1, [pc, #20]	; (8000948 <myprintf+0x44>)
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <myprintf+0x48>)
 8000936:	f003 ffb6 	bl	80048a6 <HAL_UART_Transmit>

}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000944:	b004      	add	sp, #16
 8000946:	4770      	bx	lr
 8000948:	20002d40 	.word	0x20002d40
 800094c:	20002f8c 	.word	0x20002f8c

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b5b0      	push	{r4, r5, r7, lr}
 8000952:	f5ad 6dc7 	sub.w	sp, sp, #1592	; 0x638
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 ff20 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f982 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f7ff ff44 	bl	80007ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000964:	f7ff ff22 	bl	80007ac <MX_DMA_Init>
  MX_TIM1_Init();
 8000968:	f000 fc6e 	bl	8001248 <MX_TIM1_Init>
  MX_TIM2_Init();
 800096c:	f000 fcbc 	bl	80012e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000970:	f000 fdd2 	bl	8001518 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000974:	f004 ffcc 	bl	8005910 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000978:	f000 f9f8 	bl	8000d6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 800097c:	f000 fe70 	bl	8001660 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_RED);
 8000980:	20e0      	movs	r0, #224	; 0xe0
 8000982:	f000 febf 	bl	8001704 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8000986:	220a      	movs	r2, #10
 8000988:	210a      	movs	r1, #10
 800098a:	200a      	movs	r0, #10
 800098c:	f000 fede 	bl	800174c <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	2000      	movs	r0, #0
 8000996:	f000 fed9 	bl	800174c <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	f240 103f 	movw	r0, #319	; 0x13f
 80009a2:	f000 fed3 	bl	800174c <UB_VGA_SetPixel>

  API_draw_bitmap(0,0,0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2000      	movs	r0, #0
 80009ac:	f7ff fdea 	bl	8000584 <API_draw_bitmap>



  unsigned int i = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634


  for(i = 0; i < LINE_BUFLEN; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 80009bc:	e00b      	b.n	80009d6 <main+0x86>
	  input.line_rx_buffer[i] = 0;
 80009be:	4a95      	ldr	r2, [pc, #596]	; (8000c14 <main+0x2c4>)
 80009c0:	f8d7 3634 	ldr.w	r3, [r7, #1588]	; 0x634
 80009c4:	4413      	add	r3, r2
 80009c6:	3301      	adds	r3, #1
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 80009cc:	f8d7 3634 	ldr.w	r3, [r7, #1588]	; 0x634
 80009d0:	3301      	adds	r3, #1
 80009d2:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 80009d6:	f8d7 3634 	ldr.w	r3, [r7, #1588]	; 0x634
 80009da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009de:	d3ee      	bcc.n	80009be <main+0x6e>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 80009e0:	4b8c      	ldr	r3, [pc, #560]	; (8000c14 <main+0x2c4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 80009e6:	4b8b      	ldr	r3, [pc, #556]	; (8000c14 <main+0x2c4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
  input.command_execute_flag = FALSE;
 80009ee:	4b89      	ldr	r3, [pc, #548]	; (8000c14 <main+0x2c4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, &input.byte_buffer_rx, LINE_BUFLEN);
 80009f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009fa:	4986      	ldr	r1, [pc, #536]	; (8000c14 <main+0x2c4>)
 80009fc:	4886      	ldr	r0, [pc, #536]	; (8000c18 <main+0x2c8>)
 80009fe:	f003 ffe4 	bl	80049ca <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 8000a02:	23ff      	movs	r3, #255	; 0xff
 8000a04:	f887 3633 	strb.w	r3, [r7, #1587]	; 0x633


  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000a08:	4884      	ldr	r0, [pc, #528]	; (8000c1c <main+0x2cc>)
 8000a0a:	f7ff ff7b 	bl	8000904 <myprintf>

    HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a12:	f000 ff35 	bl	8001880 <HAL_Delay>
    FATFS FatFs; 	//Fatfs handle
    FIL fil; 		//File handle
    FRESULT fres; //Result after operations

    //Open the file system
    fres = f_mount(&FatFs, "", 1); //1=mount now
 8000a16:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4980      	ldr	r1, [pc, #512]	; (8000c20 <main+0x2d0>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f007 fa04 	bl	8007e2c <f_mount>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f887 3632 	strb.w	r3, [r7, #1586]	; 0x632
    if (fres != FR_OK) {
 8000a2a:	f897 3632 	ldrb.w	r3, [r7, #1586]	; 0x632
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <main+0xf0>
  	myprintf("f_mount error (%i)\r\n", fres);
 8000a32:	f897 3632 	ldrb.w	r3, [r7, #1586]	; 0x632
 8000a36:	4619      	mov	r1, r3
 8000a38:	487a      	ldr	r0, [pc, #488]	; (8000c24 <main+0x2d4>)
 8000a3a:	f7ff ff63 	bl	8000904 <myprintf>
  	while(1);
 8000a3e:	e7fe      	b.n	8000a3e <main+0xee>
    //Let's get some statistics from the SD card
    DWORD free_clusters, free_sectors, total_sectors;

    FATFS* getFreeFs;

    fres = f_getfree("", &free_clusters, &getFreeFs);
 8000a40:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8000a44:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4875      	ldr	r0, [pc, #468]	; (8000c20 <main+0x2d0>)
 8000a4c:	f007 ff4e 	bl	80088ec <f_getfree>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f887 3632 	strb.w	r3, [r7, #1586]	; 0x632
    if (fres != FR_OK) {
 8000a56:	f897 3632 	ldrb.w	r3, [r7, #1586]	; 0x632
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <main+0x11c>
  	myprintf("f_getfree error (%i)\r\n", fres);
 8000a5e:	f897 3632 	ldrb.w	r3, [r7, #1586]	; 0x632
 8000a62:	4619      	mov	r1, r3
 8000a64:	4870      	ldr	r0, [pc, #448]	; (8000c28 <main+0x2d8>)
 8000a66:	f7ff ff4d 	bl	8000904 <myprintf>
  	while(1);
 8000a6a:	e7fe      	b.n	8000a6a <main+0x11a>
    }

    //Formula comes from ChaN's documentation
    total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000a6c:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8000a70:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	3b02      	subs	r3, #2
 8000a7a:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 8000a7e:	f2a2 427c 	subw	r2, r2, #1148	; 0x47c
 8000a82:	6812      	ldr	r2, [r2, #0]
 8000a84:	8952      	ldrh	r2, [r2, #10]
 8000a86:	fb02 f303 	mul.w	r3, r2, r3
 8000a8a:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
    free_sectors = free_clusters * getFreeFs->csize;
 8000a8e:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8000a92:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	895b      	ldrh	r3, [r3, #10]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8000aa0:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	fb02 f303 	mul.w	r3, r2, r3
 8000aaa:	f8c7 3628 	str.w	r3, [r7, #1576]	; 0x628

    myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000aae:	f8d7 362c 	ldr.w	r3, [r7, #1580]	; 0x62c
 8000ab2:	0859      	lsrs	r1, r3, #1
 8000ab4:	f8d7 3628 	ldr.w	r3, [r7, #1576]	; 0x628
 8000ab8:	085b      	lsrs	r3, r3, #1
 8000aba:	461a      	mov	r2, r3
 8000abc:	485b      	ldr	r0, [pc, #364]	; (8000c2c <main+0x2dc>)
 8000abe:	f7ff ff21 	bl	8000904 <myprintf>

    //Now let's try to open file "test.txt"
    fres = f_open(&fil, "test.txt", FA_READ);
 8000ac2:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4959      	ldr	r1, [pc, #356]	; (8000c30 <main+0x2e0>)
 8000aca:	4618      	mov	r0, r3
 8000acc:	f007 f9f4 	bl	8007eb8 <f_open>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 3632 	strb.w	r3, [r7, #1586]	; 0x632
    if (fres != FR_OK) {
 8000ad6:	f897 3632 	ldrb.w	r3, [r7, #1586]	; 0x632
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <main+0x196>
  	myprintf("f_open error (%i)\r\n");
 8000ade:	4855      	ldr	r0, [pc, #340]	; (8000c34 <main+0x2e4>)
 8000ae0:	f7ff ff10 	bl	8000904 <myprintf>
  	while(1);
 8000ae4:	e7fe      	b.n	8000ae4 <main+0x194>
    }
    myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000ae6:	4854      	ldr	r0, [pc, #336]	; (8000c38 <main+0x2e8>)
 8000ae8:	f7ff ff0c 	bl	8000904 <myprintf>
    //Read 30 bytes from "test.txt" on the SD card
    BYTE readBuf[30];

    //We can either use f_read OR f_gets to get data out of files
    //f_gets is a wrapper on f_read that does some string formatting for us
    TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000aec:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8000af0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000af4:	211e      	movs	r1, #30
 8000af6:	4618      	mov	r0, r3
 8000af8:	f007 ffad 	bl	8008a56 <f_gets>
 8000afc:	f8c7 0624 	str.w	r0, [r7, #1572]	; 0x624
    if(rres != 0) {
 8000b00:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d006      	beq.n	8000b16 <main+0x1c6>
  	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000b08:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	484b      	ldr	r0, [pc, #300]	; (8000c3c <main+0x2ec>)
 8000b10:	f7ff fef8 	bl	8000904 <myprintf>
 8000b14:	e005      	b.n	8000b22 <main+0x1d2>
    } else {
  	myprintf("f_gets error (%i)\r\n", fres);
 8000b16:	f897 3632 	ldrb.w	r3, [r7, #1586]	; 0x632
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4848      	ldr	r0, [pc, #288]	; (8000c40 <main+0x2f0>)
 8000b1e:	f7ff fef1 	bl	8000904 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8000b22:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000b26:	4618      	mov	r0, r3
 8000b28:	f007 feb6 	bl	8008898 <f_close>

    //Now let's try and write a file "write.txt"
    fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000b2c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000b30:	221a      	movs	r2, #26
 8000b32:	4944      	ldr	r1, [pc, #272]	; (8000c44 <main+0x2f4>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f007 f9bf 	bl	8007eb8 <f_open>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f887 3632 	strb.w	r3, [r7, #1586]	; 0x632
    if(fres == FR_OK) {
 8000b40:	f897 3632 	ldrb.w	r3, [r7, #1586]	; 0x632
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d103      	bne.n	8000b50 <main+0x200>
  	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000b48:	483f      	ldr	r0, [pc, #252]	; (8000c48 <main+0x2f8>)
 8000b4a:	f7ff fedb 	bl	8000904 <myprintf>
 8000b4e:	e005      	b.n	8000b5c <main+0x20c>
    } else {
  	myprintf("f_open error (%i)\r\n", fres);
 8000b50:	f897 3632 	ldrb.w	r3, [r7, #1586]	; 0x632
 8000b54:	4619      	mov	r1, r3
 8000b56:	4837      	ldr	r0, [pc, #220]	; (8000c34 <main+0x2e4>)
 8000b58:	f7ff fed4 	bl	8000904 <myprintf>
    }

    //Copy in a string
    strncpy((char*)readBuf, "a new file is made!", 19);
 8000b5c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000b60:	4a3a      	ldr	r2, [pc, #232]	; (8000c4c <main+0x2fc>)
 8000b62:	461c      	mov	r4, r3
 8000b64:	4615      	mov	r5, r2
 8000b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6a:	682b      	ldr	r3, [r5, #0]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	8022      	strh	r2, [r4, #0]
 8000b70:	3402      	adds	r4, #2
 8000b72:	0c1b      	lsrs	r3, r3, #16
 8000b74:	7023      	strb	r3, [r4, #0]
    UINT bytesWrote;
    fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000b76:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8000b7a:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8000b7e:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8000b82:	2213      	movs	r2, #19
 8000b84:	f007 fc95 	bl	80084b2 <f_write>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f887 3632 	strb.w	r3, [r7, #1586]	; 0x632
    if(fres == FR_OK) {
 8000b8e:	f897 3632 	ldrb.w	r3, [r7, #1586]	; 0x632
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d109      	bne.n	8000baa <main+0x25a>
  	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000b96:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8000b9a:	f5a3 6394 	sub.w	r3, r3, #1184	; 0x4a0
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	482b      	ldr	r0, [pc, #172]	; (8000c50 <main+0x300>)
 8000ba4:	f7ff feae 	bl	8000904 <myprintf>
 8000ba8:	e002      	b.n	8000bb0 <main+0x260>
    } else {
  	myprintf("f_write error (%i)\r\n");
 8000baa:	482a      	ldr	r0, [pc, #168]	; (8000c54 <main+0x304>)
 8000bac:	f7ff feaa 	bl	8000904 <myprintf>
    }

    //Be a tidy kiwi - don't forget to close your file!
    f_close(&fil);
 8000bb0:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 fe6f 	bl	8008898 <f_close>

    //We're done, so de-mount the drive
    f_mount(NULL, "", 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4918      	ldr	r1, [pc, #96]	; (8000c20 <main+0x2d0>)
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f007 f934 	bl	8007e2c <f_mount>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <main+0x2c4>)
 8000bc6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8000bca:	2bff      	cmp	r3, #255	; 0xff
 8000bcc:	d1fa      	bne.n	8000bc4 <main+0x274>
	  {
		  i = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634

		  Debugging = LogicLayer_Parser(&input.line_rx_buffer, LINE_BUFLEN);
 8000bd4:	4c20      	ldr	r4, [pc, #128]	; (8000c58 <main+0x308>)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bdc:	491f      	ldr	r1, [pc, #124]	; (8000c5c <main+0x30c>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fd0e 	bl	8000600 <LogicLayer_Parser>
 8000be4:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8000be8:	f5a3 63c7 	sub.w	r3, r3, #1592	; 0x638
 8000bec:	4620      	mov	r0, r4
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f240 1391 	movw	r3, #401	; 0x191
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	f007 fff1 	bl	8008bdc <memcpy>


		  // Do some stuff
		  printf("yes\n");
 8000bfa:	4819      	ldr	r0, [pc, #100]	; (8000c60 <main+0x310>)
 8000bfc:	f008 f872 	bl	8008ce4 <puts>
		  UB_VGA_FillScreen(colorTest);
 8000c00:	f897 3633 	ldrb.w	r3, [r7, #1587]	; 0x633
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fd7d 	bl	8001704 <UB_VGA_FillScreen>


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8000c0a:	4b02      	ldr	r3, [pc, #8]	; (8000c14 <main+0x2c4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	  if(input.command_execute_flag == TRUE)
 8000c12:	e7d7      	b.n	8000bc4 <main+0x274>
 8000c14:	200027b4 	.word	0x200027b4
 8000c18:	20002f8c 	.word	0x20002f8c
 8000c1c:	08009d4c 	.word	0x08009d4c
 8000c20:	08009d6c 	.word	0x08009d6c
 8000c24:	08009d70 	.word	0x08009d70
 8000c28:	08009d88 	.word	0x08009d88
 8000c2c:	08009da0 	.word	0x08009da0
 8000c30:	08009de8 	.word	0x08009de8
 8000c34:	08009df4 	.word	0x08009df4
 8000c38:	08009e08 	.word	0x08009e08
 8000c3c:	08009e38 	.word	0x08009e38
 8000c40:	08009e64 	.word	0x08009e64
 8000c44:	08009e78 	.word	0x08009e78
 8000c48:	08009e84 	.word	0x08009e84
 8000c4c:	08009eb4 	.word	0x08009eb4
 8000c50:	08009ec8 	.word	0x08009ec8
 8000c54:	08009eec 	.word	0x08009eec
 8000c58:	20002bac 	.word	0x20002bac
 8000c5c:	200027b5 	.word	0x200027b5
 8000c60:	08009f04 	.word	0x08009f04

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	; 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	2230      	movs	r2, #48	; 0x30
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f007 ffc0 	bl	8008bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <SystemClock_Config+0xcc>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <SystemClock_Config+0xd0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <SystemClock_Config+0xd0>)
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <SystemClock_Config+0xd0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cd8:	23a8      	movs	r3, #168	; 0xa8
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fcb7 	bl	800265c <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cf4:	f000 f832 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d04:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	2105      	movs	r1, #5
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 ff18 	bl	8002b4c <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d22:	f000 f81b 	bl	8000d5c <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	; 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8000d40:	1d39      	adds	r1, r7, #4
 8000d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d46:	2201      	movs	r2, #1
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <__io_putchar+0x20>)
 8000d4a:	f003 fdac 	bl	80048a6 <HAL_UART_Transmit>
	return ch;												//Return the character
 8000d4e:	687b      	ldr	r3, [r7, #4]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20002f8c 	.word	0x20002f8c

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
	...

08000d6c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d70:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d72:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <MX_SPI1_Init+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000da0:	2238      	movs	r2, #56	; 0x38
 8000da2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000db8:	220a      	movs	r2, #10
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <MX_SPI1_Init+0x64>)
 8000dbe:	f002 f8e5 	bl	8002f8c <HAL_SPI_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dc8:	f7ff ffc8 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20002e40 	.word	0x20002e40
 8000dd4:	40013000 	.word	0x40013000

08000dd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a28      	ldr	r2, [pc, #160]	; (8000e98 <HAL_SPI_MspInit+0xc0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d149      	bne.n	8000e8e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b27      	ldr	r3, [pc, #156]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <HAL_SPI_MspInit+0xc4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4e:	23c0      	movs	r3, #192	; 0xc0
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e5e:	2305      	movs	r3, #5
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <HAL_SPI_MspInit+0xc8>)
 8000e6a:	f001 fa41 	bl	80022f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e6e:	2308      	movs	r3, #8
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <HAL_SPI_MspInit+0xcc>)
 8000e8a:	f001 fa31 	bl	80022f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40013000 	.word	0x40013000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 fc78 	bl	8001840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f58:	4828      	ldr	r0, [pc, #160]	; (8000ffc <TIM2_IRQHandler+0xa8>)
 8000f5a:	f002 fdf3 	bl	8003b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <TIM2_IRQHandler+0xa8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f06f 0208 	mvn.w	r2, #8
 8000f66:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000f72:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000f74:	4b22      	ldr	r3, [pc, #136]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000f7c:	d905      	bls.n	8000f8a <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000f84:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <TIM2_IRQHandler+0xb0>)
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000f88:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d802      	bhi.n	8000f98 <TIM2_IRQHandler+0x44>
 8000f92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f96:	e001      	b.n	8000f9c <TIM2_IRQHandler+0x48>
 8000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <TIM2_IRQHandler+0xb4>)
 8000f9e:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	2b23      	cmp	r3, #35	; 0x23
 8000fa6:	d927      	bls.n	8000ff8 <TIM2_IRQHandler+0xa4>
 8000fa8:	4b15      	ldr	r3, [pc, #84]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	f240 2202 	movw	r2, #514	; 0x202
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d821      	bhi.n	8000ff8 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000fb4:	4a15      	ldr	r2, [pc, #84]	; (800100c <TIM2_IRQHandler+0xb8>)
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000fbc:	4a13      	ldr	r2, [pc, #76]	; (800100c <TIM2_IRQHandler+0xb8>)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <TIM2_IRQHandler+0xbc>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a11      	ldr	r2, [pc, #68]	; (8001010 <TIM2_IRQHandler+0xbc>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <TIM2_IRQHandler+0xc0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <TIM2_IRQHandler+0xc0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0201 	orr.w	r2, r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000ff4:	4a02      	ldr	r2, [pc, #8]	; (8001000 <TIM2_IRQHandler+0xac>)
 8000ff6:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20002ee4 	.word	0x20002ee4
 8001000:	20015cc0 	.word	0x20015cc0
 8001004:	20002fd0 	.word	0x20002fd0
 8001008:	40020400 	.word	0x40020400
 800100c:	40026488 	.word	0x40026488
 8001010:	40010000 	.word	0x40010000
 8001014:	20002f2c 	.word	0x20002f2c

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 800101e:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <USART2_IRQHandler+0x70>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b0a      	cmp	r3, #10
 8001028:	d026      	beq.n	8001078 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b0d      	cmp	r3, #13
 800102e:	d002      	beq.n	8001036 <USART2_IRQHandler+0x1e>
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b2e      	cmp	r3, #46	; 0x2e
 8001034:	d10e      	bne.n	8001054 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <USART2_IRQHandler+0x74>)
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			// Store the message length for processing
			input.msglen = input.char_counter;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <USART2_IRQHandler+0x74>)
 8001040:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <USART2_IRQHandler+0x74>)
 8001046:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
			// Reset the counter for the next line
			input.char_counter = 0;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <USART2_IRQHandler+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
 8001052:	e011      	b.n	8001078 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <USART2_IRQHandler+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			input.line_rx_buffer[input.char_counter] = uart_char;
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <USART2_IRQHandler+0x74>)
 800105e:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8001062:	4a0a      	ldr	r2, [pc, #40]	; (800108c <USART2_IRQHandler+0x74>)
 8001064:	4413      	add	r3, r2
 8001066:	79fa      	ldrb	r2, [r7, #7]
 8001068:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <USART2_IRQHandler+0x74>)
 800106c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8001070:	3301      	adds	r3, #1
 8001072:	4a06      	ldr	r2, [pc, #24]	; (800108c <USART2_IRQHandler+0x74>)
 8001074:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <USART2_IRQHandler+0x78>)
 800107a:	f003 fcd7 	bl	8004a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40004400 	.word	0x40004400
 800108c:	200027b4 	.word	0x200027b4
 8001090:	20002f8c 	.word	0x20002f8c

08001094 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <DMA2_Stream5_IRQHandler+0x48>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6a1a      	ldr	r2, [r3, #32]
 800109e:	f241 1311 	movw	r3, #4369	; 0x1111
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10f      	bne.n	80010c8 <DMA2_Stream5_IRQHandler+0x34>
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <DMA2_Stream5_IRQHandler+0x48>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6a1a      	ldr	r2, [r3, #32]
 80010ae:	f240 4344 	movw	r3, #1092	; 0x444
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <DMA2_Stream5_IRQHandler+0x34>
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <DMA2_Stream5_IRQHandler+0x48>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <DMA2_Stream5_IRQHandler+0x48>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0201 	bic.w	r2, r2, #1
 80010c6:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <DMA2_Stream5_IRQHandler+0x4c>)
 80010ca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80010ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <DMA2_Stream5_IRQHandler+0x50>)
 80010d2:	f000 fea3 	bl	8001e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20002e9c 	.word	0x20002e9c
 80010e0:	40021000 	.word	0x40021000
 80010e4:	20002f2c 	.word	0x20002f2c

080010e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e00a      	b.n	8001110 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010fa:	f3af 8000 	nop.w
 80010fe:	4601      	mov	r1, r0
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	60ba      	str	r2, [r7, #8]
 8001106:	b2ca      	uxtb	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	dbf0      	blt.n	80010fa <_read+0x12>
	}

return len;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e009      	b.n	8001148 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	60ba      	str	r2, [r7, #8]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fdfb 	bl	8000d38 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf1      	blt.n	8001134 <_write+0x12>
	}
	return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_close>:

int _close(int file)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001182:	605a      	str	r2, [r3, #4]
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_isatty>:

int _isatty(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	return 1;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011cc:	4b11      	ldr	r3, [pc, #68]	; (8001214 <_sbrk+0x50>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x16>
		heap_end = &end;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <_sbrk+0x50>)
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <_sbrk+0x54>)
 80011d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <_sbrk+0x50>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <_sbrk+0x50>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4413      	add	r3, r2
 80011e8:	466a      	mov	r2, sp
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d907      	bls.n	80011fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ee:	f007 fccb 	bl	8008b88 <__errno>
 80011f2:	4603      	mov	r3, r0
 80011f4:	220c      	movs	r2, #12
 80011f6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80011f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011fc:	e006      	b.n	800120c <_sbrk+0x48>
	}

	heap_end += incr;
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <_sbrk+0x50>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a03      	ldr	r2, [pc, #12]	; (8001214 <_sbrk+0x50>)
 8001208:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20002e98 	.word	0x20002e98
 8001218:	20015d28 	.word	0x20015d28

0800121c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <SystemInit+0x28>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001226:	4a07      	ldr	r2, [pc, #28]	; (8001244 <SystemInit+0x28>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SystemInit+0x28>)
 8001232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001236:	609a      	str	r2, [r3, #8]
#endif
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125c:	463b      	mov	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001264:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_TIM1_Init+0x98>)
 8001266:	4a1f      	ldr	r2, [pc, #124]	; (80012e4 <MX_TIM1_Init+0x9c>)
 8001268:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_TIM1_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_TIM1_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_TIM1_Init+0x98>)
 8001278:	220b      	movs	r2, #11
 800127a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_TIM1_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_TIM1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_TIM1_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800128e:	4814      	ldr	r0, [pc, #80]	; (80012e0 <MX_TIM1_Init+0x98>)
 8001290:	f002 f972 	bl	8003578 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800129a:	f7ff fd5f 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_TIM1_Init+0x98>)
 80012ac:	f002 fe14 	bl	8003ed8 <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80012b6:	f7ff fd51 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_TIM1_Init+0x98>)
 80012c8:	f003 fa10 	bl	80046ec <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80012d2:	f7ff fd43 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20002e9c 	.word	0x20002e9c
 80012e4:	40010000 	.word	0x40010000

080012e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <MX_TIM2_Init+0xcc>)
 800130c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001310:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <MX_TIM2_Init+0xcc>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <MX_TIM2_Init+0xcc>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 800131e:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <MX_TIM2_Init+0xcc>)
 8001320:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001324:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <MX_TIM2_Init+0xcc>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <MX_TIM2_Init+0xcc>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001332:	4820      	ldr	r0, [pc, #128]	; (80013b4 <MX_TIM2_Init+0xcc>)
 8001334:	f002 f9d8 	bl	80036e8 <HAL_TIM_PWM_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800133e:	f7ff fd0d 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	4619      	mov	r1, r3
 8001350:	4818      	ldr	r0, [pc, #96]	; (80013b4 <MX_TIM2_Init+0xcc>)
 8001352:	f003 f9cb 	bl	80046ec <HAL_TIMEx_MasterConfigSynchronization>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800135c:	f7ff fcfe 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001360:	2360      	movs	r3, #96	; 0x60
 8001362:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001364:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001368:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800136a:	2302      	movs	r3, #2
 800136c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2208      	movs	r2, #8
 8001376:	4619      	mov	r1, r3
 8001378:	480e      	ldr	r0, [pc, #56]	; (80013b4 <MX_TIM2_Init+0xcc>)
 800137a:	f002 fceb 	bl	8003d54 <HAL_TIM_PWM_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001384:	f7ff fcea 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001388:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800138c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	220c      	movs	r2, #12
 8001392:	4619      	mov	r1, r3
 8001394:	4807      	ldr	r0, [pc, #28]	; (80013b4 <MX_TIM2_Init+0xcc>)
 8001396:	f002 fcdd 	bl	8003d54 <HAL_TIM_PWM_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80013a0:	f7ff fcdc 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <MX_TIM2_Init+0xcc>)
 80013a6:	f000 f87f 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20002ee4 	.word	0x20002ee4

080013b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a21      	ldr	r2, [pc, #132]	; (800144c <HAL_TIM_Base_MspInit+0x94>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d13c      	bne.n	8001444 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_TIM_Base_MspInit+0x98>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <HAL_TIM_Base_MspInit+0x98>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_TIM_Base_MspInit+0x98>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <HAL_TIM_Base_MspInit+0xa0>)
 80013ea:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 80013ee:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80013f2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 80013f6:	2240      	movs	r2, #64	; 0x40
 80013f8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 8001402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001406:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 800141c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001420:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001428:	480a      	ldr	r0, [pc, #40]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 800142a:	f000 fb5f 	bl	8001aec <HAL_DMA_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8001434:	f7ff fc92 	bl	8000d5c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 800143c:	621a      	str	r2, [r3, #32]
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_TIM_Base_MspInit+0x9c>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010000 	.word	0x40010000
 8001450:	40023800 	.word	0x40023800
 8001454:	20002f2c 	.word	0x20002f2c
 8001458:	40026488 	.word	0x40026488

0800145c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146c:	d115      	bne.n	800149a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_TIM_PWM_MspInit+0x48>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_TIM_PWM_MspInit+0x48>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6413      	str	r3, [r2, #64]	; 0x40
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_TIM_PWM_MspInit+0x48>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	201c      	movs	r0, #28
 8001490:	f000 faf5 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001494:	201c      	movs	r0, #28
 8001496:	f000 fb0e 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014c8:	d11e      	bne.n	8001508 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_TIM_MspPostInit+0x68>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 80014e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <HAL_TIM_MspPostInit+0x6c>)
 8001504:	f000 fef4 	bl	80022f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400

08001518 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <MX_USART2_UART_Init+0x50>)
 8001520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART2_UART_Init+0x4c>)
 8001550:	f003 f95c 	bl	800480c <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800155a:	f7ff fbff 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20002f8c 	.word	0x20002f8c
 8001568:	40004400 	.word	0x40004400

0800156c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a1d      	ldr	r2, [pc, #116]	; (8001600 <HAL_UART_MspInit+0x94>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d133      	bne.n	80015f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_UART_MspInit+0x98>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <HAL_UART_MspInit+0x98>)
 8001598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_UART_MspInit+0x98>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_UART_MspInit+0x98>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a14      	ldr	r2, [pc, #80]	; (8001604 <HAL_UART_MspInit+0x98>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_UART_MspInit+0x98>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015c6:	230c      	movs	r3, #12
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d6:	2307      	movs	r3, #7
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	4619      	mov	r1, r3
 80015e0:	4809      	ldr	r0, [pc, #36]	; (8001608 <HAL_UART_MspInit+0x9c>)
 80015e2:	f000 fe85 	bl	80022f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2026      	movs	r0, #38	; 0x26
 80015ec:	f000 fa47 	bl	8001a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015f0:	2026      	movs	r0, #38	; 0x26
 80015f2:	f000 fa60 	bl	8001ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40004400 	.word	0x40004400
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000

0800160c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800160c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001644 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001610:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001612:	e003      	b.n	800161c <LoopCopyDataInit>

08001614 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001616:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001618:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800161a:	3104      	adds	r1, #4

0800161c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800161c:	480b      	ldr	r0, [pc, #44]	; (800164c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001620:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001622:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001624:	d3f6      	bcc.n	8001614 <CopyDataInit>
  ldr  r2, =_sbss
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001628:	e002      	b.n	8001630 <LoopFillZerobss>

0800162a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800162a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800162c:	f842 3b04 	str.w	r3, [r2], #4

08001630 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001632:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001634:	d3f9      	bcc.n	800162a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001636:	f7ff fdf1 	bl	800121c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f007 faab 	bl	8008b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163e:	f7ff f987 	bl	8000950 <main>
  bx  lr    
 8001642:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001644:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001648:	0800a094 	.word	0x0800a094
  ldr  r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001650:	20002798 	.word	0x20002798
  ldr  r2, =_sbss
 8001654:	20002798 	.word	0x20002798
  ldr  r3, = _ebss
 8001658:	20015d28 	.word	0x20015d28

0800165c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC_IRQHandler>
	...

08001660 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <UB_VGA_Screen_Init+0x84>)
 8001666:	2200      	movs	r2, #0
 8001668:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <UB_VGA_Screen_Init+0x84>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <UB_VGA_Screen_Init+0x84>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <UB_VGA_Screen_Init+0x88>)
 8001678:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800167c:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800167e:	481b      	ldr	r0, [pc, #108]	; (80016ec <UB_VGA_Screen_Init+0x8c>)
 8001680:	f001 ffca 	bl	8003618 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001684:	210c      	movs	r1, #12
 8001686:	4819      	ldr	r0, [pc, #100]	; (80016ec <UB_VGA_Screen_Init+0x8c>)
 8001688:	f002 f87e 	bl	8003788 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 800168c:	2108      	movs	r1, #8
 800168e:	4817      	ldr	r0, [pc, #92]	; (80016ec <UB_VGA_Screen_Init+0x8c>)
 8001690:	f002 f942 	bl	8003918 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <UB_VGA_Screen_Init+0x90>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <UB_VGA_Screen_Init+0x90>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016a2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <UB_VGA_Screen_Init+0x90>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <UB_VGA_Screen_Init+0x90>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80016b4:	490f      	ldr	r1, [pc, #60]	; (80016f4 <UB_VGA_Screen_Init+0x94>)
 80016b6:	f240 1341 	movw	r3, #321	; 0x141
 80016ba:	4a0f      	ldr	r2, [pc, #60]	; (80016f8 <UB_VGA_Screen_Init+0x98>)
 80016bc:	480f      	ldr	r0, [pc, #60]	; (80016fc <UB_VGA_Screen_Init+0x9c>)
 80016be:	f000 fac3 	bl	8001c48 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80016c2:	480e      	ldr	r0, [pc, #56]	; (80016fc <UB_VGA_Screen_Init+0x9c>)
 80016c4:	f000 fa12 	bl	8001aec <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <UB_VGA_Screen_Init+0x9c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <UB_VGA_Screen_Init+0x9c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0210 	orr.w	r2, r2, #16
 80016d6:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <UB_VGA_Screen_Init+0xa0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a01      	ldr	r2, [pc, #4]	; (80016e4 <UB_VGA_Screen_Init+0x84>)
 80016de:	6093      	str	r3, [r2, #8]
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20015cc0 	.word	0x20015cc0
 80016e8:	40020400 	.word	0x40020400
 80016ec:	20002ee4 	.word	0x20002ee4
 80016f0:	20002e9c 	.word	0x20002e9c
 80016f4:	20002fd0 	.word	0x20002fd0
 80016f8:	40021015 	.word	0x40021015
 80016fc:	20002f2c 	.word	0x20002f2c
 8001700:	40026488 	.word	0x40026488

08001704 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800170e:	2300      	movs	r3, #0
 8001710:	81bb      	strh	r3, [r7, #12]
 8001712:	e012      	b.n	800173a <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
 8001718:	e008      	b.n	800172c <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800171a:	79fa      	ldrb	r2, [r7, #7]
 800171c:	89b9      	ldrh	r1, [r7, #12]
 800171e:	89fb      	ldrh	r3, [r7, #14]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f813 	bl	800174c <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	3301      	adds	r3, #1
 800172a:	81fb      	strh	r3, [r7, #14]
 800172c:	89fb      	ldrh	r3, [r7, #14]
 800172e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001732:	d3f2      	bcc.n	800171a <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001734:	89bb      	ldrh	r3, [r7, #12]
 8001736:	3301      	adds	r3, #1
 8001738:	81bb      	strh	r3, [r7, #12]
 800173a:	89bb      	ldrh	r3, [r7, #12]
 800173c:	2bef      	cmp	r3, #239	; 0xef
 800173e:	d9e9      	bls.n	8001714 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
 8001756:	460b      	mov	r3, r1
 8001758:	80bb      	strh	r3, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001764:	d301      	bcc.n	800176a <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800176a:	88bb      	ldrh	r3, [r7, #4]
 800176c:	2bef      	cmp	r3, #239	; 0xef
 800176e:	d901      	bls.n	8001774 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001774:	88ba      	ldrh	r2, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	019b      	lsls	r3, r3, #6
 800177e:	441a      	add	r2, r3
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	4413      	add	r3, r2
 8001784:	4904      	ldr	r1, [pc, #16]	; (8001798 <UB_VGA_SetPixel+0x4c>)
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	54ca      	strb	r2, [r1, r3]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20002fd0 	.word	0x20002fd0

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a0:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_Init+0x40>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <HAL_Init+0x40>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_Init+0x40>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_Init+0x40>)
 80017b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <HAL_Init+0x40>)
 80017be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c4:	2003      	movs	r0, #3
 80017c6:	f000 f94f 	bl	8001a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ca:	2000      	movs	r0, #0
 80017cc:	f000 f808 	bl	80017e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d0:	f7ff fb6a 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023c00 	.word	0x40023c00

080017e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x54>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x58>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f967 	bl	8001ad2 <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e00e      	b.n	800182c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	d80a      	bhi.n	800182a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001814:	2200      	movs	r2, #0
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800181c:	f000 f92f 	bl	8001a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001820:	4a06      	ldr	r2, [pc, #24]	; (800183c <HAL_InitTick+0x5c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	e000      	b.n	800182c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20002710 	.word	0x20002710
 8001838:	20002718 	.word	0x20002718
 800183c:	20002714 	.word	0x20002714

08001840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x20>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	461a      	mov	r2, r3
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_IncTick+0x24>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4413      	add	r3, r2
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_IncTick+0x24>)
 8001852:	6013      	str	r3, [r2, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20002718 	.word	0x20002718
 8001864:	20015ccc 	.word	0x20015ccc

08001868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetTick+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20015ccc 	.word	0x20015ccc

08001880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff ffee 	bl	8001868 <HAL_GetTick>
 800188c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001898:	d005      	beq.n	80018a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_Delay+0x44>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a6:	bf00      	nop
 80018a8:	f7ff ffde 	bl	8001868 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d8f7      	bhi.n	80018a8 <HAL_Delay+0x28>
  {
  }
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20002718 	.word	0x20002718

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	db0b      	blt.n	8001956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	f003 021f 	and.w	r2, r3, #31
 8001944:	4907      	ldr	r1, [pc, #28]	; (8001964 <__NVIC_EnableIRQ+0x38>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	2001      	movs	r0, #1
 800194e:	fa00 f202 	lsl.w	r2, r0, r2
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a34:	d301      	bcc.n	8001a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <SysTick_Config+0x40>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a42:	210f      	movs	r1, #15
 8001a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a48:	f7ff ff8e 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <SysTick_Config+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <SysTick_Config+0x40>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	e000e010 	.word	0xe000e010

08001a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff29 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	4603      	mov	r3, r0
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a90:	f7ff ff3e 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	6978      	ldr	r0, [r7, #20]
 8001a9c:	f7ff ff8e 	bl	80019bc <NVIC_EncodePriority>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff5d 	bl	8001968 <__NVIC_SetPriority>
}
 8001aae:	bf00      	nop
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff31 	bl	800192c <__NVIC_EnableIRQ>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ffa2 	bl	8001a24 <SysTick_Config>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff feb6 	bl	8001868 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e099      	b.n	8001c3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b28:	e00f      	b.n	8001b4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2a:	f7ff fe9d 	bl	8001868 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b05      	cmp	r3, #5
 8001b36:	d908      	bls.n	8001b4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2203      	movs	r2, #3
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e078      	b.n	8001c3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1e8      	bne.n	8001b2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <HAL_DMA_Init+0x158>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d107      	bne.n	8001bb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bac:	4313      	orrs	r3, r2
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f023 0307 	bic.w	r3, r3, #7
 8001bca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d117      	bne.n	8001c0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00e      	beq.n	8001c0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fb01 	bl	80021f8 <DMA_CheckFifoParam>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d008      	beq.n	8001c0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e016      	b.n	8001c3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 fab8 	bl	800218c <DMA_CalcBaseAndBitshift>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c24:	223f      	movs	r2, #63	; 0x3f
 8001c26:	409a      	lsls	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	f010803f 	.word	0xf010803f

08001c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_DMA_Start_IT+0x26>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e040      	b.n	8001cf0 <HAL_DMA_Start_IT+0xa8>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d12f      	bne.n	8001ce2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2202      	movs	r2, #2
 8001c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 fa4a 	bl	8002130 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	223f      	movs	r2, #63	; 0x3f
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0216 	orr.w	r2, r2, #22
 8001cb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d007      	beq.n	8001cd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0208 	orr.w	r2, r2, #8
 8001cce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e005      	b.n	8001cee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cea:	2302      	movs	r3, #2
 8001cec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d06:	f7ff fdaf 	bl	8001868 <HAL_GetTick>
 8001d0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d008      	beq.n	8001d2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2280      	movs	r2, #128	; 0x80
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e052      	b.n	8001dd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0216 	bic.w	r2, r2, #22
 8001d38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <HAL_DMA_Abort+0x62>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0208 	bic.w	r2, r2, #8
 8001d68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0201 	bic.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d7a:	e013      	b.n	8001da4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d7c:	f7ff fd74 	bl	8001868 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d90c      	bls.n	8001da4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e015      	b.n	8001dd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1e4      	bne.n	8001d7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db6:	223f      	movs	r2, #63	; 0x3f
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d004      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00c      	b.n	8001e10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2205      	movs	r2, #5
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e28:	4b8e      	ldr	r3, [pc, #568]	; (8002064 <HAL_DMA_IRQHandler+0x248>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a8e      	ldr	r2, [pc, #568]	; (8002068 <HAL_DMA_IRQHandler+0x24c>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0a9b      	lsrs	r3, r3, #10
 8001e34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e46:	2208      	movs	r2, #8
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01a      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d013      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0204 	bic.w	r2, r2, #4
 8001e6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	2208      	movs	r2, #8
 8001e76:	409a      	lsls	r2, r3
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d012      	beq.n	8001ebe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eaa:	2201      	movs	r2, #1
 8001eac:	409a      	lsls	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb6:	f043 0202 	orr.w	r2, r3, #2
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d012      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00b      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	f043 0204 	orr.w	r2, r3, #4
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	2210      	movs	r2, #16
 8001efa:	409a      	lsls	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d043      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d03c      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	2210      	movs	r2, #16
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d018      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d108      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d024      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	4798      	blx	r3
 8001f4a:	e01f      	b.n	8001f8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01b      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
 8001f5c:	e016      	b.n	8001f8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d107      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0208 	bic.w	r2, r2, #8
 8001f7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	2220      	movs	r2, #32
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 808f 	beq.w	80020bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8087 	beq.w	80020bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d136      	bne.n	8002034 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0216 	bic.w	r2, r2, #22
 8001fd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d103      	bne.n	8001ff6 <HAL_DMA_IRQHandler+0x1da>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0208 	bic.w	r2, r2, #8
 8002004:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200a:	223f      	movs	r2, #63	; 0x3f
 800200c:	409a      	lsls	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002026:	2b00      	cmp	r3, #0
 8002028:	d07e      	beq.n	8002128 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	4798      	blx	r3
        }
        return;
 8002032:	e079      	b.n	8002128 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d01d      	beq.n	800207e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	2b00      	cmp	r3, #0
 8002056:	d031      	beq.n	80020bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	4798      	blx	r3
 8002060:	e02c      	b.n	80020bc <HAL_DMA_IRQHandler+0x2a0>
 8002062:	bf00      	nop
 8002064:	20002710 	.word	0x20002710
 8002068:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002070:	2b00      	cmp	r3, #0
 8002072:	d023      	beq.n	80020bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
 800207c:	e01e      	b.n	80020bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10f      	bne.n	80020ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0210 	bic.w	r2, r2, #16
 800209a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d032      	beq.n	800212a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d022      	beq.n	8002116 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2205      	movs	r2, #5
 80020d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	3301      	adds	r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d307      	bcc.n	8002104 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f2      	bne.n	80020e8 <HAL_DMA_IRQHandler+0x2cc>
 8002102:	e000      	b.n	8002106 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002104:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
 8002126:	e000      	b.n	800212a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002128:	bf00      	nop
    }
  }
}
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800214c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d108      	bne.n	8002170 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800216e:	e007      	b.n	8002180 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b2db      	uxtb	r3, r3
 800219a:	3b10      	subs	r3, #16
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <DMA_CalcBaseAndBitshift+0x64>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021a6:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <DMA_CalcBaseAndBitshift+0x68>)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	461a      	mov	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d909      	bls.n	80021ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	1d1a      	adds	r2, r3, #4
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	659a      	str	r2, [r3, #88]	; 0x58
 80021cc:	e007      	b.n	80021de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021d6:	f023 0303 	bic.w	r3, r3, #3
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	aaaaaaab 	.word	0xaaaaaaab
 80021f4:	08009f64 	.word	0x08009f64

080021f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d11f      	bne.n	8002252 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d856      	bhi.n	80022c6 <DMA_CheckFifoParam+0xce>
 8002218:	a201      	add	r2, pc, #4	; (adr r2, 8002220 <DMA_CheckFifoParam+0x28>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002231 	.word	0x08002231
 8002224:	08002243 	.word	0x08002243
 8002228:	08002231 	.word	0x08002231
 800222c:	080022c7 	.word	0x080022c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d046      	beq.n	80022ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002240:	e043      	b.n	80022ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800224a:	d140      	bne.n	80022ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002250:	e03d      	b.n	80022ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800225a:	d121      	bne.n	80022a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d837      	bhi.n	80022d2 <DMA_CheckFifoParam+0xda>
 8002262:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <DMA_CheckFifoParam+0x70>)
 8002264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002268:	08002279 	.word	0x08002279
 800226c:	0800227f 	.word	0x0800227f
 8002270:	08002279 	.word	0x08002279
 8002274:	08002291 	.word	0x08002291
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	e030      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d025      	beq.n	80022d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228e:	e022      	b.n	80022d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002298:	d11f      	bne.n	80022da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800229e:	e01c      	b.n	80022da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d903      	bls.n	80022ae <DMA_CheckFifoParam+0xb6>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d003      	beq.n	80022b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022ac:	e018      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
      break;
 80022b2:	e015      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      break;
 80022c4:	e00b      	b.n	80022de <DMA_CheckFifoParam+0xe6>
      break;
 80022c6:	bf00      	nop
 80022c8:	e00a      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
 80022cc:	e008      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ce:	bf00      	nop
 80022d0:	e006      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e004      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e002      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80022da:	bf00      	nop
 80022dc:	e000      	b.n	80022e0 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
    }
  } 
  
  return status; 
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	; 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
 800230a:	e16b      	b.n	80025e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800230c:	2201      	movs	r2, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	f040 815a 	bne.w	80025de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d005      	beq.n	8002342 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233e:	2b02      	cmp	r3, #2
 8002340:	d130      	bne.n	80023a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 0201 	and.w	r2, r3, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d017      	beq.n	80023e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	2203      	movs	r2, #3
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d123      	bne.n	8002434 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	08da      	lsrs	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3208      	adds	r2, #8
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	69b9      	ldr	r1, [r7, #24]
 8002430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2203      	movs	r2, #3
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 0203 	and.w	r2, r3, #3
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80b4 	beq.w	80025de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b60      	ldr	r3, [pc, #384]	; (80025fc <HAL_GPIO_Init+0x30c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a5f      	ldr	r2, [pc, #380]	; (80025fc <HAL_GPIO_Init+0x30c>)
 8002480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <HAL_GPIO_Init+0x30c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002492:	4a5b      	ldr	r2, [pc, #364]	; (8002600 <HAL_GPIO_Init+0x310>)
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	3302      	adds	r3, #2
 800249a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a52      	ldr	r2, [pc, #328]	; (8002604 <HAL_GPIO_Init+0x314>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d02b      	beq.n	8002516 <HAL_GPIO_Init+0x226>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a51      	ldr	r2, [pc, #324]	; (8002608 <HAL_GPIO_Init+0x318>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d025      	beq.n	8002512 <HAL_GPIO_Init+0x222>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a50      	ldr	r2, [pc, #320]	; (800260c <HAL_GPIO_Init+0x31c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01f      	beq.n	800250e <HAL_GPIO_Init+0x21e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4f      	ldr	r2, [pc, #316]	; (8002610 <HAL_GPIO_Init+0x320>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d019      	beq.n	800250a <HAL_GPIO_Init+0x21a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4e      	ldr	r2, [pc, #312]	; (8002614 <HAL_GPIO_Init+0x324>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_GPIO_Init+0x216>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4d      	ldr	r2, [pc, #308]	; (8002618 <HAL_GPIO_Init+0x328>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00d      	beq.n	8002502 <HAL_GPIO_Init+0x212>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4c      	ldr	r2, [pc, #304]	; (800261c <HAL_GPIO_Init+0x32c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <HAL_GPIO_Init+0x20e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4b      	ldr	r2, [pc, #300]	; (8002620 <HAL_GPIO_Init+0x330>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_GPIO_Init+0x20a>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e00e      	b.n	8002518 <HAL_GPIO_Init+0x228>
 80024fa:	2308      	movs	r3, #8
 80024fc:	e00c      	b.n	8002518 <HAL_GPIO_Init+0x228>
 80024fe:	2306      	movs	r3, #6
 8002500:	e00a      	b.n	8002518 <HAL_GPIO_Init+0x228>
 8002502:	2305      	movs	r3, #5
 8002504:	e008      	b.n	8002518 <HAL_GPIO_Init+0x228>
 8002506:	2304      	movs	r3, #4
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x228>
 800250a:	2303      	movs	r3, #3
 800250c:	e004      	b.n	8002518 <HAL_GPIO_Init+0x228>
 800250e:	2302      	movs	r3, #2
 8002510:	e002      	b.n	8002518 <HAL_GPIO_Init+0x228>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_GPIO_Init+0x228>
 8002516:	2300      	movs	r3, #0
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	f002 0203 	and.w	r2, r2, #3
 800251e:	0092      	lsls	r2, r2, #2
 8002520:	4093      	lsls	r3, r2
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002528:	4935      	ldr	r1, [pc, #212]	; (8002600 <HAL_GPIO_Init+0x310>)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_GPIO_Init+0x334>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255a:	4a32      	ldr	r2, [pc, #200]	; (8002624 <HAL_GPIO_Init+0x334>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002560:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_GPIO_Init+0x334>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002584:	4a27      	ldr	r2, [pc, #156]	; (8002624 <HAL_GPIO_Init+0x334>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800258a:	4b26      	ldr	r3, [pc, #152]	; (8002624 <HAL_GPIO_Init+0x334>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ae:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <HAL_GPIO_Init+0x334>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_GPIO_Init+0x334>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_GPIO_Init+0x334>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	f67f ae90 	bls.w	800230c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40013800 	.word	0x40013800
 8002604:	40020000 	.word	0x40020000
 8002608:	40020400 	.word	0x40020400
 800260c:	40020800 	.word	0x40020800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021000 	.word	0x40021000
 8002618:	40021400 	.word	0x40021400
 800261c:	40021800 	.word	0x40021800
 8002620:	40021c00 	.word	0x40021c00
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	807b      	strh	r3, [r7, #2]
 8002634:	4613      	mov	r3, r2
 8002636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002638:	787b      	ldrb	r3, [r7, #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002644:	e003      	b.n	800264e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	041a      	lsls	r2, r3, #16
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	619a      	str	r2, [r3, #24]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e267      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d075      	beq.n	8002766 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800267a:	4b88      	ldr	r3, [pc, #544]	; (800289c <HAL_RCC_OscConfig+0x240>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d00c      	beq.n	80026a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b85      	ldr	r3, [pc, #532]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268e:	2b08      	cmp	r3, #8
 8002690:	d112      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002692:	4b82      	ldr	r3, [pc, #520]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800269e:	d10b      	bne.n	80026b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	4b7e      	ldr	r3, [pc, #504]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d05b      	beq.n	8002764 <HAL_RCC_OscConfig+0x108>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d157      	bne.n	8002764 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e242      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c0:	d106      	bne.n	80026d0 <HAL_RCC_OscConfig+0x74>
 80026c2:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a75      	ldr	r2, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e01d      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x98>
 80026da:	4b70      	ldr	r3, [pc, #448]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6f      	ldr	r2, [pc, #444]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b6d      	ldr	r3, [pc, #436]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a6c      	ldr	r2, [pc, #432]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e00b      	b.n	800270c <HAL_RCC_OscConfig+0xb0>
 80026f4:	4b69      	ldr	r3, [pc, #420]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a68      	ldr	r2, [pc, #416]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80026fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	4b66      	ldr	r3, [pc, #408]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff f8a8 	bl	8001868 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271c:	f7ff f8a4 	bl	8001868 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e207      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b5b      	ldr	r3, [pc, #364]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0xc0>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff f894 	bl	8001868 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff f890 	bl	8001868 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1f3      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	4b51      	ldr	r3, [pc, #324]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0xe8>
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d063      	beq.n	800283a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002772:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002786:	2b08      	cmp	r3, #8
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278a:	4b44      	ldr	r3, [pc, #272]	; (800289c <HAL_RCC_OscConfig+0x240>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d116      	bne.n	80027c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1c7      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4937      	ldr	r1, [pc, #220]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c2:	e03a      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027cc:	4b34      	ldr	r3, [pc, #208]	; (80028a0 <HAL_RCC_OscConfig+0x244>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7ff f849 	bl	8001868 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027da:	f7ff f845 	bl	8001868 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1a8      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b28      	ldr	r3, [pc, #160]	; (800289c <HAL_RCC_OscConfig+0x240>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4925      	ldr	r1, [pc, #148]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]
 800280c:	e015      	b.n	800283a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b24      	ldr	r3, [pc, #144]	; (80028a0 <HAL_RCC_OscConfig+0x244>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff f828 	bl	8001868 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281c:	f7ff f824 	bl	8001868 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e187      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d036      	beq.n	80028b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d016      	beq.n	800287c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_RCC_OscConfig+0x248>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7ff f808 	bl	8001868 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285c:	f7ff f804 	bl	8001868 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e167      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_OscConfig+0x240>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x200>
 800287a:	e01b      	b.n	80028b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_OscConfig+0x248>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fff1 	bl	8001868 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	e00e      	b.n	80028a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288a:	f7fe ffed 	bl	8001868 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d907      	bls.n	80028a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e150      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
 800289c:	40023800 	.word	0x40023800
 80028a0:	42470000 	.word	0x42470000
 80028a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	4b88      	ldr	r3, [pc, #544]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ea      	bne.n	800288a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 8097 	beq.w	80029f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c6:	4b81      	ldr	r3, [pc, #516]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	4b7d      	ldr	r3, [pc, #500]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	4a7c      	ldr	r2, [pc, #496]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6413      	str	r3, [r2, #64]	; 0x40
 80028e2:	4b7a      	ldr	r3, [pc, #488]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ee:	2301      	movs	r3, #1
 80028f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f2:	4b77      	ldr	r3, [pc, #476]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d118      	bne.n	8002930 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fe:	4b74      	ldr	r3, [pc, #464]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a73      	ldr	r2, [pc, #460]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800290a:	f7fe ffad 	bl	8001868 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002912:	f7fe ffa9 	bl	8001868 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e10c      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b6a      	ldr	r3, [pc, #424]	; (8002ad0 <HAL_RCC_OscConfig+0x474>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x2ea>
 8002938:	4b64      	ldr	r3, [pc, #400]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	4a63      	ldr	r2, [pc, #396]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6713      	str	r3, [r2, #112]	; 0x70
 8002944:	e01c      	b.n	8002980 <HAL_RCC_OscConfig+0x324>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0x30c>
 800294e:	4b5f      	ldr	r3, [pc, #380]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a5e      	ldr	r2, [pc, #376]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 0304 	orr.w	r3, r3, #4
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	4b5c      	ldr	r3, [pc, #368]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295e:	4a5b      	ldr	r2, [pc, #364]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6713      	str	r3, [r2, #112]	; 0x70
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0x324>
 8002968:	4b58      	ldr	r3, [pc, #352]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	4b55      	ldr	r3, [pc, #340]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002978:	4a54      	ldr	r2, [pc, #336]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 800297a:	f023 0304 	bic.w	r3, r3, #4
 800297e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002988:	f7fe ff6e 	bl	8001868 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002990:	f7fe ff6a 	bl	8001868 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e0cb      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	4b49      	ldr	r3, [pc, #292]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ee      	beq.n	8002990 <HAL_RCC_OscConfig+0x334>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fe ff58 	bl	8001868 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe ff54 	bl	8001868 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0b5      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	4b3e      	ldr	r3, [pc, #248]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ee      	bne.n	80029bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d105      	bne.n	80029f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	4a38      	ldr	r2, [pc, #224]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80a1 	beq.w	8002b3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029fa:	4b34      	ldr	r3, [pc, #208]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d05c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d141      	bne.n	8002a92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0e:	4b31      	ldr	r3, [pc, #196]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe ff28 	bl	8001868 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe ff24 	bl	8001868 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e087      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	3b01      	subs	r3, #1
 8002a54:	041b      	lsls	r3, r3, #16
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	491b      	ldr	r1, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fefd 	bl	8001868 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a72:	f7fe fef9 	bl	8001868 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e05c      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_RCC_OscConfig+0x416>
 8002a90:	e054      	b.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_RCC_OscConfig+0x478>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe fee6 	bl	8001868 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa0:	f7fe fee2 	bl	8001868 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e045      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_RCC_OscConfig+0x470>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x444>
 8002abe:	e03d      	b.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e038      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40007000 	.word	0x40007000
 8002ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x4ec>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d028      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d121      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d11a      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b08:	4013      	ands	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d111      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	085b      	lsrs	r3, r3, #1
 8002b20:	3b01      	subs	r3, #1
 8002b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d107      	bne.n	8002b38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800

08002b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0cc      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d90c      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0b8      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d020      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba0:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002baa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b50      	ldr	r3, [pc, #320]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	494d      	ldr	r1, [pc, #308]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d044      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d119      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e07f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d003      	beq.n	8002c0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e06f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e067      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4934      	ldr	r1, [pc, #208]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fe14 	bl	8001868 <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fe fe10 	bl	8001868 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e04f      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 020c 	and.w	r2, r3, #12
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20c      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e032      	b.n	8002cfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4916      	ldr	r1, [pc, #88]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	490e      	ldr	r1, [pc, #56]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cd2:	f000 f821 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	490a      	ldr	r1, [pc, #40]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fd74 	bl	80017e0 <HAL_InitTick>

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023c00 	.word	0x40023c00
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08009f4c 	.word	0x08009f4c
 8002d10:	20002710 	.word	0x20002710
 8002d14:	20002714 	.word	0x20002714

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d1c:	b094      	sub	sp, #80	; 0x50
 8002d1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	647b      	str	r3, [r7, #68]	; 0x44
 8002d24:	2300      	movs	r3, #0
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d28:	2300      	movs	r3, #0
 8002d2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d30:	4b79      	ldr	r3, [pc, #484]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d00d      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x40>
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	f200 80e1 	bhi.w	8002f04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x34>
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d003      	beq.n	8002d52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d4a:	e0db      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d4c:	4b73      	ldr	r3, [pc, #460]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d50:	e0db      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d56:	e0d8      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d58:	4b6f      	ldr	r3, [pc, #444]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d62:	4b6d      	ldr	r3, [pc, #436]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d063      	beq.n	8002e36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d6e:	4b6a      	ldr	r3, [pc, #424]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	099b      	lsrs	r3, r3, #6
 8002d74:	2200      	movs	r2, #0
 8002d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
 8002d82:	2300      	movs	r3, #0
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
 8002d86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d8a:	4622      	mov	r2, r4
 8002d8c:	462b      	mov	r3, r5
 8002d8e:	f04f 0000 	mov.w	r0, #0
 8002d92:	f04f 0100 	mov.w	r1, #0
 8002d96:	0159      	lsls	r1, r3, #5
 8002d98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9c:	0150      	lsls	r0, r2, #5
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4621      	mov	r1, r4
 8002da4:	1a51      	subs	r1, r2, r1
 8002da6:	6139      	str	r1, [r7, #16]
 8002da8:	4629      	mov	r1, r5
 8002daa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dbc:	4659      	mov	r1, fp
 8002dbe:	018b      	lsls	r3, r1, #6
 8002dc0:	4651      	mov	r1, sl
 8002dc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dc6:	4651      	mov	r1, sl
 8002dc8:	018a      	lsls	r2, r1, #6
 8002dca:	4651      	mov	r1, sl
 8002dcc:	ebb2 0801 	subs.w	r8, r2, r1
 8002dd0:	4659      	mov	r1, fp
 8002dd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002de2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dea:	4690      	mov	r8, r2
 8002dec:	4699      	mov	r9, r3
 8002dee:	4623      	mov	r3, r4
 8002df0:	eb18 0303 	adds.w	r3, r8, r3
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	462b      	mov	r3, r5
 8002df8:	eb49 0303 	adc.w	r3, r9, r3
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	024b      	lsls	r3, r1, #9
 8002e0e:	4621      	mov	r1, r4
 8002e10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e14:	4621      	mov	r1, r4
 8002e16:	024a      	lsls	r2, r1, #9
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1e:	2200      	movs	r2, #0
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e28:	f7fd fa2a 	bl	8000280 <__aeabi_uldivmod>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4613      	mov	r3, r2
 8002e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e34:	e058      	b.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e36:	4b38      	ldr	r3, [pc, #224]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	4611      	mov	r1, r2
 8002e42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e46:	623b      	str	r3, [r7, #32]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	f04f 0000 	mov.w	r0, #0
 8002e58:	f04f 0100 	mov.w	r1, #0
 8002e5c:	0159      	lsls	r1, r3, #5
 8002e5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e62:	0150      	lsls	r0, r2, #5
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4641      	mov	r1, r8
 8002e6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e6e:	4649      	mov	r1, r9
 8002e70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e88:	ebb2 040a 	subs.w	r4, r2, sl
 8002e8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	00eb      	lsls	r3, r5, #3
 8002e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e9e:	00e2      	lsls	r2, r4, #3
 8002ea0:	4614      	mov	r4, r2
 8002ea2:	461d      	mov	r5, r3
 8002ea4:	4643      	mov	r3, r8
 8002ea6:	18e3      	adds	r3, r4, r3
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	464b      	mov	r3, r9
 8002eac:	eb45 0303 	adc.w	r3, r5, r3
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	028b      	lsls	r3, r1, #10
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec8:	4621      	mov	r1, r4
 8002eca:	028a      	lsls	r2, r1, #10
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	61fa      	str	r2, [r7, #28]
 8002ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002edc:	f7fd f9d0 	bl	8000280 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	0c1b      	lsrs	r3, r3, #16
 8002eee:	f003 0303 	and.w	r3, r3, #3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ef8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f02:	e002      	b.n	8002f0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3750      	adds	r7, #80	; 0x50
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f16:	bf00      	nop
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	00f42400 	.word	0x00f42400
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20002710 	.word	0x20002710

08002f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f40:	f7ff fff0 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	4903      	ldr	r1, [pc, #12]	; (8002f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	08009f5c 	.word	0x08009f5c

08002f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f68:	f7ff ffdc 	bl	8002f24 <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0b5b      	lsrs	r3, r3, #13
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	08009f5c 	.word	0x08009f5c

08002f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e07b      	b.n	8003096 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fae:	d009      	beq.n	8002fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
 8002fb6:	e005      	b.n	8002fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fefa 	bl	8000dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	ea42 0103 	orr.w	r1, r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	f003 0104 	and.w	r1, r3, #4
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f003 0210 	and.w	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003084:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b08c      	sub	sp, #48	; 0x30
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	60b9      	str	r1, [r7, #8]
 80030a8:	607a      	str	r2, [r7, #4]
 80030aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030ac:	2301      	movs	r3, #1
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_SPI_TransmitReceive+0x26>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e18a      	b.n	80033da <HAL_SPI_TransmitReceive+0x33c>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030cc:	f7fe fbcc 	bl	8001868 <HAL_GetTick>
 80030d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030e2:	887b      	ldrh	r3, [r7, #2]
 80030e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d00f      	beq.n	800310e <HAL_SPI_TransmitReceive+0x70>
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f4:	d107      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d103      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x68>
 80030fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003102:	2b04      	cmp	r3, #4
 8003104:	d003      	beq.n	800310e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003106:	2302      	movs	r3, #2
 8003108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800310c:	e15b      	b.n	80033c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_SPI_TransmitReceive+0x82>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d002      	beq.n	8003120 <HAL_SPI_TransmitReceive+0x82>
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003126:	e14e      	b.n	80033c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b04      	cmp	r3, #4
 8003132:	d003      	beq.n	800313c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2205      	movs	r2, #5
 8003138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	887a      	ldrh	r2, [r7, #2]
 8003152:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	887a      	ldrh	r2, [r7, #2]
 800315e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d007      	beq.n	8003190 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800318e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003198:	d178      	bne.n	800328c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <HAL_SPI_TransmitReceive+0x10a>
 80031a2:	8b7b      	ldrh	r3, [r7, #26]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d166      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	1c9a      	adds	r2, r3, #2
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031cc:	e053      	b.n	8003276 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d11b      	bne.n	8003214 <HAL_SPI_TransmitReceive+0x176>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d016      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x176>
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d113      	bne.n	8003214 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b01      	cmp	r3, #1
 8003220:	d119      	bne.n	8003256 <HAL_SPI_TransmitReceive+0x1b8>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	d014      	beq.n	8003256 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	b292      	uxth	r2, r2
 8003238:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	1c9a      	adds	r2, r3, #2
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003252:	2301      	movs	r3, #1
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003256:	f7fe fb07 	bl	8001868 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003262:	429a      	cmp	r2, r3
 8003264:	d807      	bhi.n	8003276 <HAL_SPI_TransmitReceive+0x1d8>
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800326c:	d003      	beq.n	8003276 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003274:	e0a7      	b.n	80033c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1a6      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x130>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1a1      	bne.n	80031ce <HAL_SPI_TransmitReceive+0x130>
 800328a:	e07c      	b.n	8003386 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_SPI_TransmitReceive+0x1fc>
 8003294:	8b7b      	ldrh	r3, [r7, #26]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d16b      	bne.n	8003372 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	7812      	ldrb	r2, [r2, #0]
 80032a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c0:	e057      	b.n	8003372 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d11c      	bne.n	800330a <HAL_SPI_TransmitReceive+0x26c>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d017      	beq.n	800330a <HAL_SPI_TransmitReceive+0x26c>
 80032da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d114      	bne.n	800330a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	330c      	adds	r3, #12
 80032ea:	7812      	ldrb	r2, [r2, #0]
 80032ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d119      	bne.n	800334c <HAL_SPI_TransmitReceive+0x2ae>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d014      	beq.n	800334c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003348:	2301      	movs	r3, #1
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800334c:	f7fe fa8c 	bl	8001868 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003358:	429a      	cmp	r2, r3
 800335a:	d803      	bhi.n	8003364 <HAL_SPI_TransmitReceive+0x2c6>
 800335c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003362:	d102      	bne.n	800336a <HAL_SPI_TransmitReceive+0x2cc>
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	2b00      	cmp	r3, #0
 8003368:	d103      	bne.n	8003372 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003370:	e029      	b.n	80033c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1a2      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x224>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d19d      	bne.n	80032c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f8b2 	bl	80034f4 <SPI_EndRxTxTransaction>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033a2:	e010      	b.n	80033c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	e000      	b.n	80033c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80033c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3730      	adds	r7, #48	; 0x30
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	4613      	mov	r3, r2
 80033f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033f4:	f7fe fa38 	bl	8001868 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	4413      	add	r3, r2
 8003402:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003404:	f7fe fa30 	bl	8001868 <HAL_GetTick>
 8003408:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	015b      	lsls	r3, r3, #5
 8003410:	0d1b      	lsrs	r3, r3, #20
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800341a:	e054      	b.n	80034c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003422:	d050      	beq.n	80034c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003424:	f7fe fa20 	bl	8001868 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	429a      	cmp	r2, r3
 8003432:	d902      	bls.n	800343a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d13d      	bne.n	80034b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003448:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003452:	d111      	bne.n	8003478 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345c:	d004      	beq.n	8003468 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003466:	d107      	bne.n	8003478 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003476:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003480:	d10f      	bne.n	80034a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e017      	b.n	80034e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4013      	ands	r3, r2
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	bf0c      	ite	eq
 80034d6:	2301      	moveq	r3, #1
 80034d8:	2300      	movne	r3, #0
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	461a      	mov	r2, r3
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d19b      	bne.n	800341c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20002710 	.word	0x20002710

080034f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <SPI_EndRxTxTransaction+0x7c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1b      	ldr	r2, [pc, #108]	; (8003574 <SPI_EndRxTxTransaction+0x80>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0d5b      	lsrs	r3, r3, #21
 800350c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003510:	fb02 f303 	mul.w	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351e:	d112      	bne.n	8003546 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2200      	movs	r2, #0
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff ff5a 	bl	80033e4 <SPI_WaitFlagStateUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e00f      	b.n	8003566 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3b01      	subs	r3, #1
 8003550:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d0f2      	beq.n	8003546 <SPI_EndRxTxTransaction+0x52>
 8003560:	e000      	b.n	8003564 <SPI_EndRxTxTransaction+0x70>
        break;
 8003562:	bf00      	nop
  }

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20002710 	.word	0x20002710
 8003574:	165e9f81 	.word	0x165e9f81

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e041      	b.n	800360e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd ff0a 	bl	80013b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fd88 	bl	80040cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e046      	b.n	80036be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a23      	ldr	r2, [pc, #140]	; (80036cc <HAL_TIM_Base_Start+0xb4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d022      	beq.n	8003688 <HAL_TIM_Base_Start+0x70>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364a:	d01d      	beq.n	8003688 <HAL_TIM_Base_Start+0x70>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <HAL_TIM_Base_Start+0xb8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d018      	beq.n	8003688 <HAL_TIM_Base_Start+0x70>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1e      	ldr	r2, [pc, #120]	; (80036d4 <HAL_TIM_Base_Start+0xbc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d013      	beq.n	8003688 <HAL_TIM_Base_Start+0x70>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <HAL_TIM_Base_Start+0xc0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00e      	beq.n	8003688 <HAL_TIM_Base_Start+0x70>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a1b      	ldr	r2, [pc, #108]	; (80036dc <HAL_TIM_Base_Start+0xc4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d009      	beq.n	8003688 <HAL_TIM_Base_Start+0x70>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <HAL_TIM_Base_Start+0xc8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d004      	beq.n	8003688 <HAL_TIM_Base_Start+0x70>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a18      	ldr	r2, [pc, #96]	; (80036e4 <HAL_TIM_Base_Start+0xcc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d111      	bne.n	80036ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b06      	cmp	r3, #6
 8003698:	d010      	beq.n	80036bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0201 	orr.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036aa:	e007      	b.n	80036bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000
 80036d0:	40000400 	.word	0x40000400
 80036d4:	40000800 	.word	0x40000800
 80036d8:	40000c00 	.word	0x40000c00
 80036dc:	40010400 	.word	0x40010400
 80036e0:	40014000 	.word	0x40014000
 80036e4:	40001800 	.word	0x40001800

080036e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e041      	b.n	800377e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fea4 	bl	800145c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3304      	adds	r3, #4
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f000 fcd0 	bl	80040cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x24>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e022      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d109      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x3e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e015      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d109      	bne.n	80037e0 <HAL_TIM_PWM_Start+0x58>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e008      	b.n	80037f2 <HAL_TIM_PWM_Start+0x6a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07c      	b.n	80038f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0x82>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	e013      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0x92>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003818:	e00b      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start+0xa2>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003828:	e003      	b.n	8003832 <HAL_TIM_PWM_Start+0xaa>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2202      	movs	r2, #2
 800382e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 ff30 	bl	80046a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2d      	ldr	r2, [pc, #180]	; (80038fc <HAL_TIM_PWM_Start+0x174>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIM_PWM_Start+0xcc>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2c      	ldr	r2, [pc, #176]	; (8003900 <HAL_TIM_PWM_Start+0x178>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_TIM_PWM_Start+0xd0>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_TIM_PWM_Start+0xd2>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a22      	ldr	r2, [pc, #136]	; (80038fc <HAL_TIM_PWM_Start+0x174>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003880:	d01d      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1f      	ldr	r2, [pc, #124]	; (8003904 <HAL_TIM_PWM_Start+0x17c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <HAL_TIM_PWM_Start+0x180>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1c      	ldr	r2, [pc, #112]	; (800390c <HAL_TIM_PWM_Start+0x184>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_TIM_PWM_Start+0x178>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_TIM_PWM_Start+0x188>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_TIM_PWM_Start+0x136>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a16      	ldr	r2, [pc, #88]	; (8003914 <HAL_TIM_PWM_Start+0x18c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d111      	bne.n	80038e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b06      	cmp	r3, #6
 80038ce:	d010      	beq.n	80038f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e0:	e007      	b.n	80038f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010000 	.word	0x40010000
 8003900:	40010400 	.word	0x40010400
 8003904:	40000400 	.word	0x40000400
 8003908:	40000800 	.word	0x40000800
 800390c:	40000c00 	.word	0x40000c00
 8003910:	40014000 	.word	0x40014000
 8003914:	40001800 	.word	0x40001800

08003918 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_TIM_PWM_Start_IT+0x28>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	e022      	b.n	8003986 <HAL_TIM_PWM_Start_IT+0x6e>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b04      	cmp	r3, #4
 8003944:	d109      	bne.n	800395a <HAL_TIM_PWM_Start_IT+0x42>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	bf14      	ite	ne
 8003952:	2301      	movne	r3, #1
 8003954:	2300      	moveq	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	e015      	b.n	8003986 <HAL_TIM_PWM_Start_IT+0x6e>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d109      	bne.n	8003974 <HAL_TIM_PWM_Start_IT+0x5c>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e008      	b.n	8003986 <HAL_TIM_PWM_Start_IT+0x6e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	bf14      	ite	ne
 8003980:	2301      	movne	r3, #1
 8003982:	2300      	moveq	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0c7      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <HAL_TIM_PWM_Start_IT+0x86>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800399c:	e013      	b.n	80039c6 <HAL_TIM_PWM_Start_IT+0xae>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d104      	bne.n	80039ae <HAL_TIM_PWM_Start_IT+0x96>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ac:	e00b      	b.n	80039c6 <HAL_TIM_PWM_Start_IT+0xae>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d104      	bne.n	80039be <HAL_TIM_PWM_Start_IT+0xa6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039bc:	e003      	b.n	80039c6 <HAL_TIM_PWM_Start_IT+0xae>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2202      	movs	r2, #2
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b0c      	cmp	r3, #12
 80039ca:	d841      	bhi.n	8003a50 <HAL_TIM_PWM_Start_IT+0x138>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	08003a09 	.word	0x08003a09
 80039d8:	08003a51 	.word	0x08003a51
 80039dc:	08003a51 	.word	0x08003a51
 80039e0:	08003a51 	.word	0x08003a51
 80039e4:	08003a1b 	.word	0x08003a1b
 80039e8:	08003a51 	.word	0x08003a51
 80039ec:	08003a51 	.word	0x08003a51
 80039f0:	08003a51 	.word	0x08003a51
 80039f4:	08003a2d 	.word	0x08003a2d
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a3f 	.word	0x08003a3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0202 	orr.w	r2, r2, #2
 8003a16:	60da      	str	r2, [r3, #12]
      break;
 8003a18:	e01d      	b.n	8003a56 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0204 	orr.w	r2, r2, #4
 8003a28:	60da      	str	r2, [r3, #12]
      break;
 8003a2a:	e014      	b.n	8003a56 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0208 	orr.w	r2, r2, #8
 8003a3a:	60da      	str	r2, [r3, #12]
      break;
 8003a3c:	e00b      	b.n	8003a56 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0210 	orr.w	r2, r2, #16
 8003a4c:	60da      	str	r2, [r3, #12]
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d15f      	bne.n	8003b1c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2201      	movs	r2, #1
 8003a62:	6839      	ldr	r1, [r7, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fe1b 	bl	80046a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2e      	ldr	r2, [pc, #184]	; (8003b28 <HAL_TIM_PWM_Start_IT+0x210>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <HAL_TIM_PWM_Start_IT+0x166>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a2c      	ldr	r2, [pc, #176]	; (8003b2c <HAL_TIM_PWM_Start_IT+0x214>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_PWM_Start_IT+0x16a>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_TIM_PWM_Start_IT+0x16c>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d007      	beq.n	8003a98 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a22      	ldr	r2, [pc, #136]	; (8003b28 <HAL_TIM_PWM_Start_IT+0x210>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d022      	beq.n	8003ae8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d01d      	beq.n	8003ae8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <HAL_TIM_PWM_Start_IT+0x218>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d018      	beq.n	8003ae8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1e      	ldr	r2, [pc, #120]	; (8003b34 <HAL_TIM_PWM_Start_IT+0x21c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <HAL_TIM_PWM_Start_IT+0x220>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d00e      	beq.n	8003ae8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a17      	ldr	r2, [pc, #92]	; (8003b2c <HAL_TIM_PWM_Start_IT+0x214>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <HAL_TIM_PWM_Start_IT+0x224>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_TIM_PWM_Start_IT+0x1d0>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <HAL_TIM_PWM_Start_IT+0x228>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d111      	bne.n	8003b0c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b06      	cmp	r3, #6
 8003af8:	d010      	beq.n	8003b1c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	e007      	b.n	8003b1c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40010400 	.word	0x40010400
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40001800 	.word	0x40001800

08003b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d122      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d11b      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f06f 0202 	mvn.w	r2, #2
 8003b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fa81 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003b8c:	e005      	b.n	8003b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 fa73 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fa84 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d122      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d11b      	bne.n	8003bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0204 	mvn.w	r2, #4
 8003bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2202      	movs	r2, #2
 8003bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fa57 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003be0:	e005      	b.n	8003bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fa49 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fa5a 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d122      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d11b      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0208 	mvn.w	r2, #8
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2204      	movs	r2, #4
 8003c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fa2d 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa1f 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fa30 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d122      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d11b      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0210 	mvn.w	r2, #16
 8003c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2208      	movs	r2, #8
 8003c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fa03 	bl	800408e <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f9f5 	bl	800407a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fa06 	bl	80040a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0201 	mvn.w	r2, #1
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f9cf 	bl	8004066 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b80      	cmp	r3, #128	; 0x80
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce0:	2b80      	cmp	r3, #128	; 0x80
 8003ce2:	d107      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fd82 	bl	80047f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d10e      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d107      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9cb 	bl	80040b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d10e      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d107      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0220 	mvn.w	r2, #32
 8003d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fd4c 	bl	80047e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e0ae      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b0c      	cmp	r3, #12
 8003d7e:	f200 809f 	bhi.w	8003ec0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003dbd 	.word	0x08003dbd
 8003d8c:	08003ec1 	.word	0x08003ec1
 8003d90:	08003ec1 	.word	0x08003ec1
 8003d94:	08003ec1 	.word	0x08003ec1
 8003d98:	08003dfd 	.word	0x08003dfd
 8003d9c:	08003ec1 	.word	0x08003ec1
 8003da0:	08003ec1 	.word	0x08003ec1
 8003da4:	08003ec1 	.word	0x08003ec1
 8003da8:	08003e3f 	.word	0x08003e3f
 8003dac:	08003ec1 	.word	0x08003ec1
 8003db0:	08003ec1 	.word	0x08003ec1
 8003db4:	08003ec1 	.word	0x08003ec1
 8003db8:	08003e7f 	.word	0x08003e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fa22 	bl	800420c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0208 	orr.w	r2, r2, #8
 8003dd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699a      	ldr	r2, [r3, #24]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0204 	bic.w	r2, r2, #4
 8003de6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6999      	ldr	r1, [r3, #24]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	619a      	str	r2, [r3, #24]
      break;
 8003dfa:	e064      	b.n	8003ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fa72 	bl	80042ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6999      	ldr	r1, [r3, #24]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	021a      	lsls	r2, r3, #8
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	619a      	str	r2, [r3, #24]
      break;
 8003e3c:	e043      	b.n	8003ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fac7 	bl	80043d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0208 	orr.w	r2, r2, #8
 8003e58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0204 	bic.w	r2, r2, #4
 8003e68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69d9      	ldr	r1, [r3, #28]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	61da      	str	r2, [r3, #28]
      break;
 8003e7c:	e023      	b.n	8003ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fb1b 	bl	80044c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	69da      	ldr	r2, [r3, #28]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69d9      	ldr	r1, [r3, #28]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	021a      	lsls	r2, r3, #8
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	61da      	str	r2, [r3, #28]
      break;
 8003ebe:	e002      	b.n	8003ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e0b4      	b.n	800405e <HAL_TIM_ConfigClockSource+0x186>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2c:	d03e      	beq.n	8003fac <HAL_TIM_ConfigClockSource+0xd4>
 8003f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f32:	f200 8087 	bhi.w	8004044 <HAL_TIM_ConfigClockSource+0x16c>
 8003f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3a:	f000 8086 	beq.w	800404a <HAL_TIM_ConfigClockSource+0x172>
 8003f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f42:	d87f      	bhi.n	8004044 <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	2b70      	cmp	r3, #112	; 0x70
 8003f46:	d01a      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0xa6>
 8003f48:	2b70      	cmp	r3, #112	; 0x70
 8003f4a:	d87b      	bhi.n	8004044 <HAL_TIM_ConfigClockSource+0x16c>
 8003f4c:	2b60      	cmp	r3, #96	; 0x60
 8003f4e:	d050      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0x11a>
 8003f50:	2b60      	cmp	r3, #96	; 0x60
 8003f52:	d877      	bhi.n	8004044 <HAL_TIM_ConfigClockSource+0x16c>
 8003f54:	2b50      	cmp	r3, #80	; 0x50
 8003f56:	d03c      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0xfa>
 8003f58:	2b50      	cmp	r3, #80	; 0x50
 8003f5a:	d873      	bhi.n	8004044 <HAL_TIM_ConfigClockSource+0x16c>
 8003f5c:	2b40      	cmp	r3, #64	; 0x40
 8003f5e:	d058      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0x13a>
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d86f      	bhi.n	8004044 <HAL_TIM_ConfigClockSource+0x16c>
 8003f64:	2b30      	cmp	r3, #48	; 0x30
 8003f66:	d064      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0x15a>
 8003f68:	2b30      	cmp	r3, #48	; 0x30
 8003f6a:	d86b      	bhi.n	8004044 <HAL_TIM_ConfigClockSource+0x16c>
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d060      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0x15a>
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d867      	bhi.n	8004044 <HAL_TIM_ConfigClockSource+0x16c>
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d05c      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0x15a>
 8003f78:	2b10      	cmp	r3, #16
 8003f7a:	d05a      	beq.n	8004032 <HAL_TIM_ConfigClockSource+0x15a>
 8003f7c:	e062      	b.n	8004044 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6899      	ldr	r1, [r3, #8]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f000 fb67 	bl	8004660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	609a      	str	r2, [r3, #8]
      break;
 8003faa:	e04f      	b.n	800404c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6818      	ldr	r0, [r3, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	6899      	ldr	r1, [r3, #8]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f000 fb50 	bl	8004660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689a      	ldr	r2, [r3, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fce:	609a      	str	r2, [r3, #8]
      break;
 8003fd0:	e03c      	b.n	800404c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6859      	ldr	r1, [r3, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f000 fac4 	bl	800456c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2150      	movs	r1, #80	; 0x50
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fb1d 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 8003ff0:	e02c      	b.n	800404c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6859      	ldr	r1, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f000 fae3 	bl	80045ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2160      	movs	r1, #96	; 0x60
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fb0d 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 8004010:	e01c      	b.n	800404c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6859      	ldr	r1, [r3, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	461a      	mov	r2, r3
 8004020:	f000 faa4 	bl	800456c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2140      	movs	r1, #64	; 0x40
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fafd 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 8004030:	e00c      	b.n	800404c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4619      	mov	r1, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f000 faf4 	bl	800462a <TIM_ITRx_SetConfig>
      break;
 8004042:	e003      	b.n	800404c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]
      break;
 8004048:	e000      	b.n	800404c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800404a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800405c:	7bfb      	ldrb	r3, [r7, #15]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800408e:	b480      	push	{r7}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a40      	ldr	r2, [pc, #256]	; (80041e0 <TIM_Base_SetConfig+0x114>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d013      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ea:	d00f      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3d      	ldr	r2, [pc, #244]	; (80041e4 <TIM_Base_SetConfig+0x118>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00b      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3c      	ldr	r2, [pc, #240]	; (80041e8 <TIM_Base_SetConfig+0x11c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3b      	ldr	r2, [pc, #236]	; (80041ec <TIM_Base_SetConfig+0x120>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3a      	ldr	r2, [pc, #232]	; (80041f0 <TIM_Base_SetConfig+0x124>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d108      	bne.n	800411e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2f      	ldr	r2, [pc, #188]	; (80041e0 <TIM_Base_SetConfig+0x114>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d02b      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412c:	d027      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2c      	ldr	r2, [pc, #176]	; (80041e4 <TIM_Base_SetConfig+0x118>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d023      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <TIM_Base_SetConfig+0x11c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01f      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2a      	ldr	r2, [pc, #168]	; (80041ec <TIM_Base_SetConfig+0x120>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01b      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a29      	ldr	r2, [pc, #164]	; (80041f0 <TIM_Base_SetConfig+0x124>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d017      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a28      	ldr	r2, [pc, #160]	; (80041f4 <TIM_Base_SetConfig+0x128>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a27      	ldr	r2, [pc, #156]	; (80041f8 <TIM_Base_SetConfig+0x12c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00f      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a26      	ldr	r2, [pc, #152]	; (80041fc <TIM_Base_SetConfig+0x130>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00b      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a25      	ldr	r2, [pc, #148]	; (8004200 <TIM_Base_SetConfig+0x134>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d007      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a24      	ldr	r2, [pc, #144]	; (8004204 <TIM_Base_SetConfig+0x138>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d003      	beq.n	800417e <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a23      	ldr	r2, [pc, #140]	; (8004208 <TIM_Base_SetConfig+0x13c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d108      	bne.n	8004190 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <TIM_Base_SetConfig+0x114>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d003      	beq.n	80041c4 <TIM_Base_SetConfig+0xf8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <TIM_Base_SetConfig+0x124>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d103      	bne.n	80041cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	691a      	ldr	r2, [r3, #16]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	615a      	str	r2, [r3, #20]
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40010000 	.word	0x40010000
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40000c00 	.word	0x40000c00
 80041f0:	40010400 	.word	0x40010400
 80041f4:	40014000 	.word	0x40014000
 80041f8:	40014400 	.word	0x40014400
 80041fc:	40014800 	.word	0x40014800
 8004200:	40001800 	.word	0x40001800
 8004204:	40001c00 	.word	0x40001c00
 8004208:	40002000 	.word	0x40002000

0800420c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f023 0201 	bic.w	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 0302 	bic.w	r3, r3, #2
 8004254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <TIM_OC1_SetConfig+0xd8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_OC1_SetConfig+0x64>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a1f      	ldr	r2, [pc, #124]	; (80042e8 <TIM_OC1_SetConfig+0xdc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d10c      	bne.n	800428a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f023 0308 	bic.w	r3, r3, #8
 8004276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 0304 	bic.w	r3, r3, #4
 8004288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a15      	ldr	r2, [pc, #84]	; (80042e4 <TIM_OC1_SetConfig+0xd8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_OC1_SetConfig+0x8e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a14      	ldr	r2, [pc, #80]	; (80042e8 <TIM_OC1_SetConfig+0xdc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d111      	bne.n	80042be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	621a      	str	r2, [r3, #32]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40010400 	.word	0x40010400

080042ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0210 	bic.w	r2, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0320 	bic.w	r3, r3, #32
 8004336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4313      	orrs	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <TIM_OC2_SetConfig+0xe4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_OC2_SetConfig+0x68>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <TIM_OC2_SetConfig+0xe8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10d      	bne.n	8004370 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800435a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <TIM_OC2_SetConfig+0xe4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_OC2_SetConfig+0x94>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <TIM_OC2_SetConfig+0xe8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d113      	bne.n	80043a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800438e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	621a      	str	r2, [r3, #32]
}
 80043c2:	bf00      	nop
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40010400 	.word	0x40010400

080043d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a21      	ldr	r2, [pc, #132]	; (80044b8 <TIM_OC3_SetConfig+0xe0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_OC3_SetConfig+0x66>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a20      	ldr	r2, [pc, #128]	; (80044bc <TIM_OC3_SetConfig+0xe4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d10d      	bne.n	800445a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004444:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004458:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <TIM_OC3_SetConfig+0xe0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_OC3_SetConfig+0x92>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <TIM_OC3_SetConfig+0xe4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d113      	bne.n	8004492 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40010400 	.word	0x40010400

080044c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	021b      	lsls	r3, r3, #8
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800450a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	031b      	lsls	r3, r3, #12
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a12      	ldr	r2, [pc, #72]	; (8004564 <TIM_OC4_SetConfig+0xa4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_OC4_SetConfig+0x68>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a11      	ldr	r2, [pc, #68]	; (8004568 <TIM_OC4_SetConfig+0xa8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d109      	bne.n	800453c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40010000 	.word	0x40010000
 8004568:	40010400 	.word	0x40010400

0800456c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	f023 0201 	bic.w	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	011b      	lsls	r3, r3, #4
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f023 030a 	bic.w	r3, r3, #10
 80045a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	621a      	str	r2, [r3, #32]
}
 80045be:	bf00      	nop
 80045c0:	371c      	adds	r7, #28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b087      	sub	sp, #28
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f023 0210 	bic.w	r2, r3, #16
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	031b      	lsls	r3, r3, #12
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	f043 0307 	orr.w	r3, r3, #7
 800464c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800467a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	021a      	lsls	r2, r3, #8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	431a      	orrs	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4313      	orrs	r3, r2
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	609a      	str	r2, [r3, #8]
}
 8004694:	bf00      	nop
 8004696:	371c      	adds	r7, #28
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2201      	movs	r2, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1a      	ldr	r2, [r3, #32]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	401a      	ands	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	431a      	orrs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004700:	2302      	movs	r3, #2
 8004702:	e05a      	b.n	80047ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d022      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004750:	d01d      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d018      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a17      	ldr	r2, [pc, #92]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d10c      	bne.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	4313      	orrs	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800
 80047d4:	40000c00 	.word	0x40000c00
 80047d8:	40010400 	.word	0x40010400
 80047dc:	40014000 	.word	0x40014000
 80047e0:	40001800 	.word	0x40001800

080047e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e03f      	b.n	800489e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc fe9a 	bl	800156c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	; 0x24
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800484e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fde9 	bl	8005428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b08a      	sub	sp, #40	; 0x28
 80048aa:	af02      	add	r7, sp, #8
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d17c      	bne.n	80049c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_UART_Transmit+0x2c>
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e075      	b.n	80049c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_UART_Transmit+0x3e>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e06e      	b.n	80049c2 <HAL_UART_Transmit+0x11c>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2221      	movs	r2, #33	; 0x21
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048fa:	f7fc ffb5 	bl	8001868 <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	88fa      	ldrh	r2, [r7, #6]
 8004904:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004914:	d108      	bne.n	8004928 <HAL_UART_Transmit+0x82>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e003      	b.n	8004930 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004938:	e02a      	b.n	8004990 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2200      	movs	r2, #0
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fb29 	bl	8004f9c <UART_WaitOnFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e036      	b.n	80049c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10b      	bne.n	8004972 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	3302      	adds	r3, #2
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	e007      	b.n	8004982 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	781a      	ldrb	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	3301      	adds	r3, #1
 8004980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1cf      	bne.n	800493a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2200      	movs	r2, #0
 80049a2:	2140      	movs	r1, #64	; 0x40
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 faf9 	bl	8004f9c <UART_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e006      	b.n	80049c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	e000      	b.n	80049c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
  }
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	4613      	mov	r3, r2
 80049d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d11d      	bne.n	8004a20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <HAL_UART_Receive_IT+0x26>
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e016      	b.n	8004a22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Receive_IT+0x38>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e00f      	b.n	8004a22 <HAL_UART_Receive_IT+0x58>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	461a      	mov	r2, r3
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 fb2e 	bl	8005078 <UART_Start_Receive_IT>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	e000      	b.n	8004a22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b0ba      	sub	sp, #232	; 0xe8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a62:	f003 030f 	and.w	r3, r3, #15
 8004a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10f      	bne.n	8004a92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_UART_IRQHandler+0x66>
 8004a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fc11 	bl	80052b2 <UART_Receive_IT>
      return;
 8004a90:	e256      	b.n	8004f40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80de 	beq.w	8004c58 <HAL_UART_IRQHandler+0x22c>
 8004a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80d1 	beq.w	8004c58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00b      	beq.n	8004ada <HAL_UART_IRQHandler+0xae>
 8004ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f043 0201 	orr.w	r2, r3, #1
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00b      	beq.n	8004afe <HAL_UART_IRQHandler+0xd2>
 8004ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f043 0202 	orr.w	r2, r3, #2
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <HAL_UART_IRQHandler+0xf6>
 8004b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f043 0204 	orr.w	r2, r3, #4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d011      	beq.n	8004b52 <HAL_UART_IRQHandler+0x126>
 8004b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d105      	bne.n	8004b46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f043 0208 	orr.w	r2, r3, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 81ed 	beq.w	8004f36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b60:	f003 0320 	and.w	r3, r3, #32
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_UART_IRQHandler+0x14e>
 8004b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fb9c 	bl	80052b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d103      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x17a>
 8004b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d04f      	beq.n	8004c46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 faa4 	bl	80050f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d141      	bne.n	8004c3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3314      	adds	r3, #20
 8004bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3314      	adds	r3, #20
 8004be2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004be6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1d9      	bne.n	8004bba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d013      	beq.n	8004c36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	4a7d      	ldr	r2, [pc, #500]	; (8004e08 <HAL_UART_IRQHandler+0x3dc>)
 8004c14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fd f8dc 	bl	8001dd8 <HAL_DMA_Abort_IT>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d016      	beq.n	8004c54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c30:	4610      	mov	r0, r2
 8004c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	e00e      	b.n	8004c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f99a 	bl	8004f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	e00a      	b.n	8004c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f996 	bl	8004f70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	e006      	b.n	8004c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f992 	bl	8004f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c52:	e170      	b.n	8004f36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	bf00      	nop
    return;
 8004c56:	e16e      	b.n	8004f36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	f040 814a 	bne.w	8004ef6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8143 	beq.w	8004ef6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 813c 	beq.w	8004ef6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	60bb      	str	r3, [r7, #8]
 8004c92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b40      	cmp	r3, #64	; 0x40
 8004ca0:	f040 80b4 	bne.w	8004e0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8140 	beq.w	8004f3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	f080 8139 	bcs.w	8004f3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cda:	f000 8088 	beq.w	8004dee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1d9      	bne.n	8004cde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3314      	adds	r3, #20
 8004d30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3314      	adds	r3, #20
 8004d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e1      	bne.n	8004d2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3314      	adds	r3, #20
 8004d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3314      	adds	r3, #20
 8004d86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e3      	bne.n	8004d66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	330c      	adds	r3, #12
 8004db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db6:	e853 3f00 	ldrex	r3, [r3]
 8004dba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dbe:	f023 0310 	bic.w	r3, r3, #16
 8004dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	330c      	adds	r3, #12
 8004dcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004dd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004dd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e3      	bne.n	8004dac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7fc ff85 	bl	8001cf8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f8c0 	bl	8004f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e04:	e099      	b.n	8004f3a <HAL_UART_IRQHandler+0x50e>
 8004e06:	bf00      	nop
 8004e08:	080051bb 	.word	0x080051bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 808b 	beq.w	8004f3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8086 	beq.w	8004f3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e56:	647a      	str	r2, [r7, #68]	; 0x44
 8004e58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e5e:	e841 2300 	strex	r3, r2, [r1]
 8004e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1e3      	bne.n	8004e32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3314      	adds	r3, #20
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3314      	adds	r3, #20
 8004e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e8e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e3      	bne.n	8004e6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0310 	bic.w	r3, r3, #16
 8004ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ed4:	61fa      	str	r2, [r7, #28]
 8004ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	69b9      	ldr	r1, [r7, #24]
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e3      	bne.n	8004eb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004eec:	4619      	mov	r1, r3
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f848 	bl	8004f84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ef4:	e023      	b.n	8004f3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <HAL_UART_IRQHandler+0x4ea>
 8004f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f967 	bl	80051e2 <UART_Transmit_IT>
    return;
 8004f14:	e014      	b.n	8004f40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00e      	beq.n	8004f40 <HAL_UART_IRQHandler+0x514>
 8004f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f9a7 	bl	8005282 <UART_EndTransmit_IT>
    return;
 8004f34:	e004      	b.n	8004f40 <HAL_UART_IRQHandler+0x514>
    return;
 8004f36:	bf00      	nop
 8004f38:	e002      	b.n	8004f40 <HAL_UART_IRQHandler+0x514>
      return;
 8004f3a:	bf00      	nop
 8004f3c:	e000      	b.n	8004f40 <HAL_UART_IRQHandler+0x514>
      return;
 8004f3e:	bf00      	nop
  }
}
 8004f40:	37e8      	adds	r7, #232	; 0xe8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop

08004f48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b090      	sub	sp, #64	; 0x40
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fac:	e050      	b.n	8005050 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb4:	d04c      	beq.n	8005050 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8004fbc:	f7fc fc54 	bl	8001868 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d241      	bcs.n	8005050 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	330c      	adds	r3, #12
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	330c      	adds	r3, #12
 8004fea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fec:	637a      	str	r2, [r7, #52]	; 0x34
 8004fee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e5      	bne.n	8004fcc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3314      	adds	r3, #20
 8005006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	613b      	str	r3, [r7, #16]
   return(result);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3314      	adds	r3, #20
 800501e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005020:	623a      	str	r2, [r7, #32]
 8005022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	69f9      	ldr	r1, [r7, #28]
 8005026:	6a3a      	ldr	r2, [r7, #32]
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	61bb      	str	r3, [r7, #24]
   return(result);
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e5      	bne.n	8005000 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e00f      	b.n	8005070 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	bf0c      	ite	eq
 8005060:	2301      	moveq	r3, #1
 8005062:	2300      	movne	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	461a      	mov	r2, r3
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	429a      	cmp	r2, r3
 800506c:	d09f      	beq.n	8004fae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3740      	adds	r7, #64	; 0x40
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	88fa      	ldrh	r2, [r7, #6]
 8005090:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2222      	movs	r2, #34	; 0x22
 80050a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695a      	ldr	r2, [r3, #20]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0220 	orr.w	r2, r2, #32
 80050e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b095      	sub	sp, #84	; 0x54
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	330c      	adds	r3, #12
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005112:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800511c:	643a      	str	r2, [r7, #64]	; 0x40
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005120:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005124:	e841 2300 	strex	r3, r2, [r1]
 8005128:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3314      	adds	r3, #20
 8005136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	f023 0301 	bic.w	r3, r3, #1
 8005146:	64bb      	str	r3, [r7, #72]	; 0x48
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005150:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e5      	bne.n	8005130 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	2b01      	cmp	r3, #1
 800516a:	d119      	bne.n	80051a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	330c      	adds	r3, #12
 8005172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	e853 3f00 	ldrex	r3, [r3]
 800517a:	60bb      	str	r3, [r7, #8]
   return(result);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f023 0310 	bic.w	r3, r3, #16
 8005182:	647b      	str	r3, [r7, #68]	; 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	330c      	adds	r3, #12
 800518a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800518c:	61ba      	str	r2, [r7, #24]
 800518e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	6979      	ldr	r1, [r7, #20]
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	e841 2300 	strex	r3, r2, [r1]
 8005198:	613b      	str	r3, [r7, #16]
   return(result);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1e5      	bne.n	800516c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051ae:	bf00      	nop
 80051b0:	3754      	adds	r7, #84	; 0x54
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7ff fecb 	bl	8004f70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051da:	bf00      	nop
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b21      	cmp	r3, #33	; 0x21
 80051f4:	d13e      	bne.n	8005274 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fe:	d114      	bne.n	800522a <UART_Transmit_IT+0x48>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d110      	bne.n	800522a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800521c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	1c9a      	adds	r2, r3, #2
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	621a      	str	r2, [r3, #32]
 8005228:	e008      	b.n	800523c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	1c59      	adds	r1, r3, #1
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6211      	str	r1, [r2, #32]
 8005234:	781a      	ldrb	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29b      	uxth	r3, r3
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4619      	mov	r1, r3
 800524a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10f      	bne.n	8005270 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800525e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800526e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e000      	b.n	8005276 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
  }
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005298:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff fe50 	bl	8004f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b08c      	sub	sp, #48	; 0x30
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b22      	cmp	r3, #34	; 0x22
 80052c4:	f040 80ab 	bne.w	800541e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d0:	d117      	bne.n	8005302 <UART_Receive_IT+0x50>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d113      	bne.n	8005302 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	1c9a      	adds	r2, r3, #2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005300:	e026      	b.n	8005350 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005308:	2300      	movs	r3, #0
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005314:	d007      	beq.n	8005326 <UART_Receive_IT+0x74>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <UART_Receive_IT+0x82>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	b2da      	uxtb	r2, r3
 800532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e008      	b.n	8005346 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005340:	b2da      	uxtb	r2, r3
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29b      	uxth	r3, r3
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4619      	mov	r1, r3
 800535e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005360:	2b00      	cmp	r3, #0
 8005362:	d15a      	bne.n	800541a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0220 	bic.w	r2, r2, #32
 8005372:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005382:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695a      	ldr	r2, [r3, #20]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0201 	bic.w	r2, r2, #1
 8005392:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d135      	bne.n	8005410 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f023 0310 	bic.w	r3, r3, #16
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ca:	623a      	str	r2, [r7, #32]
 80053cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	69f9      	ldr	r1, [r7, #28]
 80053d0:	6a3a      	ldr	r2, [r7, #32]
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e5      	bne.n	80053aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d10a      	bne.n	8005402 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fdbb 	bl	8004f84 <HAL_UARTEx_RxEventCallback>
 800540e:	e002      	b.n	8005416 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff fda3 	bl	8004f5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e002      	b.n	8005420 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e000      	b.n	8005420 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800541e:	2302      	movs	r3, #2
  }
}
 8005420:	4618      	mov	r0, r3
 8005422:	3730      	adds	r7, #48	; 0x30
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800542c:	b0c0      	sub	sp, #256	; 0x100
 800542e:	af00      	add	r7, sp, #0
 8005430:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005444:	68d9      	ldr	r1, [r3, #12]
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	ea40 0301 	orr.w	r3, r0, r1
 8005450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	431a      	orrs	r2, r3
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	431a      	orrs	r2, r3
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005480:	f021 010c 	bic.w	r1, r1, #12
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800548e:	430b      	orrs	r3, r1
 8005490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a2:	6999      	ldr	r1, [r3, #24]
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	ea40 0301 	orr.w	r3, r0, r1
 80054ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b8f      	ldr	r3, [pc, #572]	; (80056f4 <UART_SetConfig+0x2cc>)
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d005      	beq.n	80054c8 <UART_SetConfig+0xa0>
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b8d      	ldr	r3, [pc, #564]	; (80056f8 <UART_SetConfig+0x2d0>)
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d104      	bne.n	80054d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054c8:	f7fd fd4c 	bl	8002f64 <HAL_RCC_GetPCLK2Freq>
 80054cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054d0:	e003      	b.n	80054da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054d2:	f7fd fd33 	bl	8002f3c <HAL_RCC_GetPCLK1Freq>
 80054d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e4:	f040 810c 	bne.w	8005700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054fa:	4622      	mov	r2, r4
 80054fc:	462b      	mov	r3, r5
 80054fe:	1891      	adds	r1, r2, r2
 8005500:	65b9      	str	r1, [r7, #88]	; 0x58
 8005502:	415b      	adcs	r3, r3
 8005504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800550a:	4621      	mov	r1, r4
 800550c:	eb12 0801 	adds.w	r8, r2, r1
 8005510:	4629      	mov	r1, r5
 8005512:	eb43 0901 	adc.w	r9, r3, r1
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800552a:	4690      	mov	r8, r2
 800552c:	4699      	mov	r9, r3
 800552e:	4623      	mov	r3, r4
 8005530:	eb18 0303 	adds.w	r3, r8, r3
 8005534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005538:	462b      	mov	r3, r5
 800553a:	eb49 0303 	adc.w	r3, r9, r3
 800553e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800554e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005556:	460b      	mov	r3, r1
 8005558:	18db      	adds	r3, r3, r3
 800555a:	653b      	str	r3, [r7, #80]	; 0x50
 800555c:	4613      	mov	r3, r2
 800555e:	eb42 0303 	adc.w	r3, r2, r3
 8005562:	657b      	str	r3, [r7, #84]	; 0x54
 8005564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800556c:	f7fa fe88 	bl	8000280 <__aeabi_uldivmod>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4b61      	ldr	r3, [pc, #388]	; (80056fc <UART_SetConfig+0x2d4>)
 8005576:	fba3 2302 	umull	r2, r3, r3, r2
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	011c      	lsls	r4, r3, #4
 800557e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005582:	2200      	movs	r2, #0
 8005584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005588:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800558c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005590:	4642      	mov	r2, r8
 8005592:	464b      	mov	r3, r9
 8005594:	1891      	adds	r1, r2, r2
 8005596:	64b9      	str	r1, [r7, #72]	; 0x48
 8005598:	415b      	adcs	r3, r3
 800559a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800559c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055a0:	4641      	mov	r1, r8
 80055a2:	eb12 0a01 	adds.w	sl, r2, r1
 80055a6:	4649      	mov	r1, r9
 80055a8:	eb43 0b01 	adc.w	fp, r3, r1
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c0:	4692      	mov	sl, r2
 80055c2:	469b      	mov	fp, r3
 80055c4:	4643      	mov	r3, r8
 80055c6:	eb1a 0303 	adds.w	r3, sl, r3
 80055ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ce:	464b      	mov	r3, r9
 80055d0:	eb4b 0303 	adc.w	r3, fp, r3
 80055d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80055e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055ec:	460b      	mov	r3, r1
 80055ee:	18db      	adds	r3, r3, r3
 80055f0:	643b      	str	r3, [r7, #64]	; 0x40
 80055f2:	4613      	mov	r3, r2
 80055f4:	eb42 0303 	adc.w	r3, r2, r3
 80055f8:	647b      	str	r3, [r7, #68]	; 0x44
 80055fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005602:	f7fa fe3d 	bl	8000280 <__aeabi_uldivmod>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4611      	mov	r1, r2
 800560c:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <UART_SetConfig+0x2d4>)
 800560e:	fba3 2301 	umull	r2, r3, r3, r1
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	2264      	movs	r2, #100	; 0x64
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	1acb      	subs	r3, r1, r3
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005622:	4b36      	ldr	r3, [pc, #216]	; (80056fc <UART_SetConfig+0x2d4>)
 8005624:	fba3 2302 	umull	r2, r3, r3, r2
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005630:	441c      	add	r4, r3
 8005632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800563c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	1891      	adds	r1, r2, r2
 800564a:	63b9      	str	r1, [r7, #56]	; 0x38
 800564c:	415b      	adcs	r3, r3
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005654:	4641      	mov	r1, r8
 8005656:	1851      	adds	r1, r2, r1
 8005658:	6339      	str	r1, [r7, #48]	; 0x30
 800565a:	4649      	mov	r1, r9
 800565c:	414b      	adcs	r3, r1
 800565e:	637b      	str	r3, [r7, #52]	; 0x34
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800566c:	4659      	mov	r1, fp
 800566e:	00cb      	lsls	r3, r1, #3
 8005670:	4651      	mov	r1, sl
 8005672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005676:	4651      	mov	r1, sl
 8005678:	00ca      	lsls	r2, r1, #3
 800567a:	4610      	mov	r0, r2
 800567c:	4619      	mov	r1, r3
 800567e:	4603      	mov	r3, r0
 8005680:	4642      	mov	r2, r8
 8005682:	189b      	adds	r3, r3, r2
 8005684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005688:	464b      	mov	r3, r9
 800568a:	460a      	mov	r2, r1
 800568c:	eb42 0303 	adc.w	r3, r2, r3
 8005690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056a8:	460b      	mov	r3, r1
 80056aa:	18db      	adds	r3, r3, r3
 80056ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ae:	4613      	mov	r3, r2
 80056b0:	eb42 0303 	adc.w	r3, r2, r3
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056be:	f7fa fddf 	bl	8000280 <__aeabi_uldivmod>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <UART_SetConfig+0x2d4>)
 80056c8:	fba3 1302 	umull	r1, r3, r3, r2
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	2164      	movs	r1, #100	; 0x64
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	3332      	adds	r3, #50	; 0x32
 80056da:	4a08      	ldr	r2, [pc, #32]	; (80056fc <UART_SetConfig+0x2d4>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	f003 0207 	and.w	r2, r3, #7
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4422      	add	r2, r4
 80056ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056f0:	e105      	b.n	80058fe <UART_SetConfig+0x4d6>
 80056f2:	bf00      	nop
 80056f4:	40011000 	.word	0x40011000
 80056f8:	40011400 	.word	0x40011400
 80056fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005704:	2200      	movs	r2, #0
 8005706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800570a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800570e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005712:	4642      	mov	r2, r8
 8005714:	464b      	mov	r3, r9
 8005716:	1891      	adds	r1, r2, r2
 8005718:	6239      	str	r1, [r7, #32]
 800571a:	415b      	adcs	r3, r3
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
 800571e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005722:	4641      	mov	r1, r8
 8005724:	1854      	adds	r4, r2, r1
 8005726:	4649      	mov	r1, r9
 8005728:	eb43 0501 	adc.w	r5, r3, r1
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	00eb      	lsls	r3, r5, #3
 8005736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800573a:	00e2      	lsls	r2, r4, #3
 800573c:	4614      	mov	r4, r2
 800573e:	461d      	mov	r5, r3
 8005740:	4643      	mov	r3, r8
 8005742:	18e3      	adds	r3, r4, r3
 8005744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005748:	464b      	mov	r3, r9
 800574a:	eb45 0303 	adc.w	r3, r5, r3
 800574e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800575e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800576e:	4629      	mov	r1, r5
 8005770:	008b      	lsls	r3, r1, #2
 8005772:	4621      	mov	r1, r4
 8005774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005778:	4621      	mov	r1, r4
 800577a:	008a      	lsls	r2, r1, #2
 800577c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005780:	f7fa fd7e 	bl	8000280 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4b60      	ldr	r3, [pc, #384]	; (800590c <UART_SetConfig+0x4e4>)
 800578a:	fba3 2302 	umull	r2, r3, r3, r2
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	011c      	lsls	r4, r3, #4
 8005792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005796:	2200      	movs	r2, #0
 8005798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800579c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057a4:	4642      	mov	r2, r8
 80057a6:	464b      	mov	r3, r9
 80057a8:	1891      	adds	r1, r2, r2
 80057aa:	61b9      	str	r1, [r7, #24]
 80057ac:	415b      	adcs	r3, r3
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057b4:	4641      	mov	r1, r8
 80057b6:	1851      	adds	r1, r2, r1
 80057b8:	6139      	str	r1, [r7, #16]
 80057ba:	4649      	mov	r1, r9
 80057bc:	414b      	adcs	r3, r1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057cc:	4659      	mov	r1, fp
 80057ce:	00cb      	lsls	r3, r1, #3
 80057d0:	4651      	mov	r1, sl
 80057d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057d6:	4651      	mov	r1, sl
 80057d8:	00ca      	lsls	r2, r1, #3
 80057da:	4610      	mov	r0, r2
 80057dc:	4619      	mov	r1, r3
 80057de:	4603      	mov	r3, r0
 80057e0:	4642      	mov	r2, r8
 80057e2:	189b      	adds	r3, r3, r2
 80057e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057e8:	464b      	mov	r3, r9
 80057ea:	460a      	mov	r2, r1
 80057ec:	eb42 0303 	adc.w	r3, r2, r3
 80057f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80057fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800580c:	4649      	mov	r1, r9
 800580e:	008b      	lsls	r3, r1, #2
 8005810:	4641      	mov	r1, r8
 8005812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005816:	4641      	mov	r1, r8
 8005818:	008a      	lsls	r2, r1, #2
 800581a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800581e:	f7fa fd2f 	bl	8000280 <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4b39      	ldr	r3, [pc, #228]	; (800590c <UART_SetConfig+0x4e4>)
 8005828:	fba3 1302 	umull	r1, r3, r3, r2
 800582c:	095b      	lsrs	r3, r3, #5
 800582e:	2164      	movs	r1, #100	; 0x64
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	3332      	adds	r3, #50	; 0x32
 800583a:	4a34      	ldr	r2, [pc, #208]	; (800590c <UART_SetConfig+0x4e4>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005846:	441c      	add	r4, r3
 8005848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800584c:	2200      	movs	r2, #0
 800584e:	673b      	str	r3, [r7, #112]	; 0x70
 8005850:	677a      	str	r2, [r7, #116]	; 0x74
 8005852:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005856:	4642      	mov	r2, r8
 8005858:	464b      	mov	r3, r9
 800585a:	1891      	adds	r1, r2, r2
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	415b      	adcs	r3, r3
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005866:	4641      	mov	r1, r8
 8005868:	1851      	adds	r1, r2, r1
 800586a:	6039      	str	r1, [r7, #0]
 800586c:	4649      	mov	r1, r9
 800586e:	414b      	adcs	r3, r1
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800587e:	4659      	mov	r1, fp
 8005880:	00cb      	lsls	r3, r1, #3
 8005882:	4651      	mov	r1, sl
 8005884:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005888:	4651      	mov	r1, sl
 800588a:	00ca      	lsls	r2, r1, #3
 800588c:	4610      	mov	r0, r2
 800588e:	4619      	mov	r1, r3
 8005890:	4603      	mov	r3, r0
 8005892:	4642      	mov	r2, r8
 8005894:	189b      	adds	r3, r3, r2
 8005896:	66bb      	str	r3, [r7, #104]	; 0x68
 8005898:	464b      	mov	r3, r9
 800589a:	460a      	mov	r2, r1
 800589c:	eb42 0303 	adc.w	r3, r2, r3
 80058a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	663b      	str	r3, [r7, #96]	; 0x60
 80058ac:	667a      	str	r2, [r7, #100]	; 0x64
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058ba:	4649      	mov	r1, r9
 80058bc:	008b      	lsls	r3, r1, #2
 80058be:	4641      	mov	r1, r8
 80058c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c4:	4641      	mov	r1, r8
 80058c6:	008a      	lsls	r2, r1, #2
 80058c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058cc:	f7fa fcd8 	bl	8000280 <__aeabi_uldivmod>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4b0d      	ldr	r3, [pc, #52]	; (800590c <UART_SetConfig+0x4e4>)
 80058d6:	fba3 1302 	umull	r1, r3, r3, r2
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	2164      	movs	r1, #100	; 0x64
 80058de:	fb01 f303 	mul.w	r3, r1, r3
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	3332      	adds	r3, #50	; 0x32
 80058e8:	4a08      	ldr	r2, [pc, #32]	; (800590c <UART_SetConfig+0x4e4>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	f003 020f 	and.w	r2, r3, #15
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4422      	add	r2, r4
 80058fc:	609a      	str	r2, [r3, #8]
}
 80058fe:	bf00      	nop
 8005900:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005904:	46bd      	mov	sp, r7
 8005906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590a:	bf00      	nop
 800590c:	51eb851f 	.word	0x51eb851f

08005910 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005914:	4904      	ldr	r1, [pc, #16]	; (8005928 <MX_FATFS_Init+0x18>)
 8005916:	4805      	ldr	r0, [pc, #20]	; (800592c <MX_FATFS_Init+0x1c>)
 8005918:	f003 f926 	bl	8008b68 <FATFS_LinkDriver>
 800591c:	4603      	mov	r3, r0
 800591e:	461a      	mov	r2, r3
 8005920:	4b03      	ldr	r3, [pc, #12]	; (8005930 <MX_FATFS_Init+0x20>)
 8005922:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005924:	bf00      	nop
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20015cd4 	.word	0x20015cd4
 800592c:	2000271c 	.word	0x2000271c
 8005930:	20015cd0 	.word	0x20015cd0

08005934 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005938:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800593a:	4618      	mov	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f9d9 	bl	8005d08 <USER_SPI_initialize>
 8005956:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005958:	4618      	mov	r0, r3
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	4618      	mov	r0, r3
 800596e:	f000 fab7 	bl	8005ee0 <USER_SPI_status>
 8005972:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	4603      	mov	r3, r0
 800598a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800598c:	7bf8      	ldrb	r0, [r7, #15]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	f000 faba 	bl	8005f0c <USER_SPI_read>
 8005998:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	4603      	mov	r3, r0
 80059b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80059b2:	7bf8      	ldrb	r0, [r7, #15]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	f000 fb0d 	bl	8005fd8 <USER_SPI_write>
 80059be:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	603a      	str	r2, [r7, #0]
 80059d2:	71fb      	strb	r3, [r7, #7]
 80059d4:	460b      	mov	r3, r1
 80059d6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80059d8:	79b9      	ldrb	r1, [r7, #6]
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fb76 	bl	80060d0 <USER_SPI_ioctl>
 80059e4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80059f8:	f7fb ff36 	bl	8001868 <HAL_GetTick>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4a04      	ldr	r2, [pc, #16]	; (8005a10 <SPI_Timer_On+0x20>)
 8005a00:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8005a02:	4a04      	ldr	r2, [pc, #16]	; (8005a14 <SPI_Timer_On+0x24>)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6013      	str	r3, [r2, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20015cdc 	.word	0x20015cdc
 8005a14:	20015ce0 	.word	0x20015ce0

08005a18 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8005a1c:	f7fb ff24 	bl	8001868 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <SPI_Timer_Status+0x24>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	1ad2      	subs	r2, r2, r3
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <SPI_Timer_Status+0x28>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	bf34      	ite	cc
 8005a30:	2301      	movcc	r3, #1
 8005a32:	2300      	movcs	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20015cdc 	.word	0x20015cdc
 8005a40:	20015ce0 	.word	0x20015ce0

08005a44 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8005a4e:	f107 020f 	add.w	r2, r7, #15
 8005a52:	1df9      	adds	r1, r7, #7
 8005a54:	2332      	movs	r3, #50	; 0x32
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4804      	ldr	r0, [pc, #16]	; (8005a6c <xchg_spi+0x28>)
 8005a5c:	f7fd fb1f 	bl	800309e <HAL_SPI_TransmitReceive>
    return rxDat;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20002e40 	.word	0x20002e40

08005a70 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005a70:	b590      	push	{r4, r7, lr}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e00a      	b.n	8005a96 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	18d4      	adds	r4, r2, r3
 8005a86:	20ff      	movs	r0, #255	; 0xff
 8005a88:	f7ff ffdc 	bl	8005a44 <xchg_spi>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d3f0      	bcc.n	8005a80 <rcvr_spi_multi+0x10>
	}
}
 8005a9e:	bf00      	nop
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd90      	pop	{r4, r7, pc}

08005aa8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e009      	b.n	8005acc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff ffbf 	bl	8005a44 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d3f1      	bcc.n	8005ab8 <xmit_spi_multi+0x10>
	}
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b086      	sub	sp, #24
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8005ae6:	f7fb febf 	bl	8001868 <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8005af0:	20ff      	movs	r0, #255	; 0xff
 8005af2:	f7ff ffa7 	bl	8005a44 <xchg_spi>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2bff      	cmp	r3, #255	; 0xff
 8005afe:	d007      	beq.n	8005b10 <wait_ready+0x32>
 8005b00:	f7fb feb2 	bl	8001868 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d8ef      	bhi.n	8005af0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2bff      	cmp	r3, #255	; 0xff
 8005b14:	bf0c      	ite	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	2300      	movne	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8005b28:	2201      	movs	r2, #1
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	4803      	ldr	r0, [pc, #12]	; (8005b3c <despiselect+0x18>)
 8005b2e:	f7fc fd7b 	bl	8002628 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005b32:	20ff      	movs	r0, #255	; 0xff
 8005b34:	f7ff ff86 	bl	8005a44 <xchg_spi>

}
 8005b38:	bf00      	nop
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40020000 	.word	0x40020000

08005b40 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005b44:	2200      	movs	r2, #0
 8005b46:	2102      	movs	r1, #2
 8005b48:	4809      	ldr	r0, [pc, #36]	; (8005b70 <spiselect+0x30>)
 8005b4a:	f7fc fd6d 	bl	8002628 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005b4e:	20ff      	movs	r0, #255	; 0xff
 8005b50:	f7ff ff78 	bl	8005a44 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8005b54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b58:	f7ff ffc1 	bl	8005ade <wait_ready>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <spiselect+0x26>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e002      	b.n	8005b6c <spiselect+0x2c>

	despiselect();
 8005b66:	f7ff ffdd 	bl	8005b24 <despiselect>
	return 0;	/* Timeout */
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	40020000 	.word	0x40020000

08005b74 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8005b7e:	20c8      	movs	r0, #200	; 0xc8
 8005b80:	f7ff ff36 	bl	80059f0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005b84:	20ff      	movs	r0, #255	; 0xff
 8005b86:	f7ff ff5d 	bl	8005a44 <xchg_spi>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	2bff      	cmp	r3, #255	; 0xff
 8005b92:	d104      	bne.n	8005b9e <rcvr_datablock+0x2a>
 8005b94:	f7ff ff40 	bl	8005a18 <SPI_Timer_Status>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f2      	bne.n	8005b84 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2bfe      	cmp	r3, #254	; 0xfe
 8005ba2:	d001      	beq.n	8005ba8 <rcvr_datablock+0x34>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	e00a      	b.n	8005bbe <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7ff ff60 	bl	8005a70 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005bb0:	20ff      	movs	r0, #255	; 0xff
 8005bb2:	f7ff ff47 	bl	8005a44 <xchg_spi>
 8005bb6:	20ff      	movs	r0, #255	; 0xff
 8005bb8:	f7ff ff44 	bl	8005a44 <xchg_spi>

	return 1;						/* Function succeeded */
 8005bbc:	2301      	movs	r3, #1
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8005bd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005bd6:	f7ff ff82 	bl	8005ade <wait_ready>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <xmit_datablock+0x1e>
 8005be0:	2300      	movs	r3, #0
 8005be2:	e01e      	b.n	8005c22 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff ff2c 	bl	8005a44 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	2bfd      	cmp	r3, #253	; 0xfd
 8005bf0:	d016      	beq.n	8005c20 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8005bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff ff56 	bl	8005aa8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8005bfc:	20ff      	movs	r0, #255	; 0xff
 8005bfe:	f7ff ff21 	bl	8005a44 <xchg_spi>
 8005c02:	20ff      	movs	r0, #255	; 0xff
 8005c04:	f7ff ff1e 	bl	8005a44 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8005c08:	20ff      	movs	r0, #255	; 0xff
 8005c0a:	f7ff ff1b 	bl	8005a44 <xchg_spi>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	f003 031f 	and.w	r3, r3, #31
 8005c18:	2b05      	cmp	r3, #5
 8005c1a:	d001      	beq.n	8005c20 <xmit_datablock+0x5a>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <xmit_datablock+0x5c>
	}
	return 1;
 8005c20:	2301      	movs	r3, #1
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	4603      	mov	r3, r0
 8005c32:	6039      	str	r1, [r7, #0]
 8005c34:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	da0e      	bge.n	8005c5c <send_cmd+0x32>
		cmd &= 0x7F;
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c44:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005c46:	2100      	movs	r1, #0
 8005c48:	2037      	movs	r0, #55	; 0x37
 8005c4a:	f7ff ffee 	bl	8005c2a <send_cmd>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8005c52:	7bbb      	ldrb	r3, [r7, #14]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d901      	bls.n	8005c5c <send_cmd+0x32>
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	e051      	b.n	8005d00 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	2b0c      	cmp	r3, #12
 8005c60:	d008      	beq.n	8005c74 <send_cmd+0x4a>
		despiselect();
 8005c62:	f7ff ff5f 	bl	8005b24 <despiselect>
		if (!spiselect()) return 0xFF;
 8005c66:	f7ff ff6b 	bl	8005b40 <spiselect>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <send_cmd+0x4a>
 8005c70:	23ff      	movs	r3, #255	; 0xff
 8005c72:	e045      	b.n	8005d00 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff fee1 	bl	8005a44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	0e1b      	lsrs	r3, r3, #24
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fedb 	bl	8005a44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff fed5 	bl	8005a44 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff fecf 	bl	8005a44 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff feca 	bl	8005a44 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <send_cmd+0x94>
 8005cba:	2395      	movs	r3, #149	; 0x95
 8005cbc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d101      	bne.n	8005cc8 <send_cmd+0x9e>
 8005cc4:	2387      	movs	r3, #135	; 0x87
 8005cc6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff feba 	bl	8005a44 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	2b0c      	cmp	r3, #12
 8005cd4:	d102      	bne.n	8005cdc <send_cmd+0xb2>
 8005cd6:	20ff      	movs	r0, #255	; 0xff
 8005cd8:	f7ff feb4 	bl	8005a44 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005cdc:	230a      	movs	r3, #10
 8005cde:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8005ce0:	20ff      	movs	r0, #255	; 0xff
 8005ce2:	f7ff feaf 	bl	8005a44 <xchg_spi>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8005cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	da05      	bge.n	8005cfe <send_cmd+0xd4>
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	73fb      	strb	r3, [r7, #15]
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <send_cmd+0xb6>

	return res;							/* Return received response */
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005d08:	b590      	push	{r4, r7, lr}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <USER_SPI_initialize+0x14>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0d6      	b.n	8005eca <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005d1c:	4b6d      	ldr	r3, [pc, #436]	; (8005ed4 <USER_SPI_initialize+0x1cc>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <USER_SPI_initialize+0x2a>
 8005d2a:	4b6a      	ldr	r3, [pc, #424]	; (8005ed4 <USER_SPI_initialize+0x1cc>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	e0cb      	b.n	8005eca <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8005d32:	4b69      	ldr	r3, [pc, #420]	; (8005ed8 <USER_SPI_initialize+0x1d0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005d3c:	4b66      	ldr	r3, [pc, #408]	; (8005ed8 <USER_SPI_initialize+0x1d0>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8005d44:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005d46:	230a      	movs	r3, #10
 8005d48:	73fb      	strb	r3, [r7, #15]
 8005d4a:	e005      	b.n	8005d58 <USER_SPI_initialize+0x50>
 8005d4c:	20ff      	movs	r0, #255	; 0xff
 8005d4e:	f7ff fe79 	bl	8005a44 <xchg_spi>
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	73fb      	strb	r3, [r7, #15]
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f6      	bne.n	8005d4c <USER_SPI_initialize+0x44>

	ty = 0;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005d62:	2100      	movs	r1, #0
 8005d64:	2000      	movs	r0, #0
 8005d66:	f7ff ff60 	bl	8005c2a <send_cmd>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	f040 808b 	bne.w	8005e88 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005d72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d76:	f7ff fe3b 	bl	80059f0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005d7a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d7e:	2008      	movs	r0, #8
 8005d80:	f7ff ff53 	bl	8005c2a <send_cmd>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d151      	bne.n	8005e2e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
 8005d8e:	e00d      	b.n	8005dac <USER_SPI_initialize+0xa4>
 8005d90:	7bfc      	ldrb	r4, [r7, #15]
 8005d92:	20ff      	movs	r0, #255	; 0xff
 8005d94:	f7ff fe56 	bl	8005a44 <xchg_spi>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f104 0310 	add.w	r3, r4, #16
 8005da0:	443b      	add	r3, r7
 8005da2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	3301      	adds	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d9ee      	bls.n	8005d90 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005db2:	7abb      	ldrb	r3, [r7, #10]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d167      	bne.n	8005e88 <USER_SPI_initialize+0x180>
 8005db8:	7afb      	ldrb	r3, [r7, #11]
 8005dba:	2baa      	cmp	r3, #170	; 0xaa
 8005dbc:	d164      	bne.n	8005e88 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005dbe:	bf00      	nop
 8005dc0:	f7ff fe2a 	bl	8005a18 <SPI_Timer_Status>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <USER_SPI_initialize+0xd2>
 8005dca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005dce:	20a9      	movs	r0, #169	; 0xa9
 8005dd0:	f7ff ff2b 	bl	8005c2a <send_cmd>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f2      	bne.n	8005dc0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005dda:	f7ff fe1d 	bl	8005a18 <SPI_Timer_Status>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d051      	beq.n	8005e88 <USER_SPI_initialize+0x180>
 8005de4:	2100      	movs	r1, #0
 8005de6:	203a      	movs	r0, #58	; 0x3a
 8005de8:	f7ff ff1f 	bl	8005c2a <send_cmd>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d14a      	bne.n	8005e88 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005df2:	2300      	movs	r3, #0
 8005df4:	73fb      	strb	r3, [r7, #15]
 8005df6:	e00d      	b.n	8005e14 <USER_SPI_initialize+0x10c>
 8005df8:	7bfc      	ldrb	r4, [r7, #15]
 8005dfa:	20ff      	movs	r0, #255	; 0xff
 8005dfc:	f7ff fe22 	bl	8005a44 <xchg_spi>
 8005e00:	4603      	mov	r3, r0
 8005e02:	461a      	mov	r2, r3
 8005e04:	f104 0310 	add.w	r3, r4, #16
 8005e08:	443b      	add	r3, r7
 8005e0a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	3301      	adds	r3, #1
 8005e12:	73fb      	strb	r3, [r7, #15]
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d9ee      	bls.n	8005df8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005e1a:	7a3b      	ldrb	r3, [r7, #8]
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <USER_SPI_initialize+0x120>
 8005e24:	230c      	movs	r3, #12
 8005e26:	e000      	b.n	8005e2a <USER_SPI_initialize+0x122>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	737b      	strb	r3, [r7, #13]
 8005e2c:	e02c      	b.n	8005e88 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005e2e:	2100      	movs	r1, #0
 8005e30:	20a9      	movs	r0, #169	; 0xa9
 8005e32:	f7ff fefa 	bl	8005c2a <send_cmd>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d804      	bhi.n	8005e46 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	737b      	strb	r3, [r7, #13]
 8005e40:	23a9      	movs	r3, #169	; 0xa9
 8005e42:	73bb      	strb	r3, [r7, #14]
 8005e44:	e003      	b.n	8005e4e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005e46:	2301      	movs	r3, #1
 8005e48:	737b      	strb	r3, [r7, #13]
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005e4e:	bf00      	nop
 8005e50:	f7ff fde2 	bl	8005a18 <SPI_Timer_Status>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <USER_SPI_initialize+0x162>
 8005e5a:	7bbb      	ldrb	r3, [r7, #14]
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fee3 	bl	8005c2a <send_cmd>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f2      	bne.n	8005e50 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005e6a:	f7ff fdd5 	bl	8005a18 <SPI_Timer_Status>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d007      	beq.n	8005e84 <USER_SPI_initialize+0x17c>
 8005e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e78:	2010      	movs	r0, #16
 8005e7a:	f7ff fed6 	bl	8005c2a <send_cmd>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <USER_SPI_initialize+0x180>
				ty = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005e88:	4a14      	ldr	r2, [pc, #80]	; (8005edc <USER_SPI_initialize+0x1d4>)
 8005e8a:	7b7b      	ldrb	r3, [r7, #13]
 8005e8c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005e8e:	f7ff fe49 	bl	8005b24 <despiselect>

	if (ty) {			/* OK */
 8005e92:	7b7b      	ldrb	r3, [r7, #13]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d012      	beq.n	8005ebe <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8005e98:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <USER_SPI_initialize+0x1d0>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <USER_SPI_initialize+0x1d0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0210 	orr.w	r2, r2, #16
 8005eaa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <USER_SPI_initialize+0x1cc>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	f023 0301 	bic.w	r3, r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <USER_SPI_initialize+0x1cc>)
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	e002      	b.n	8005ec4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005ebe:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <USER_SPI_initialize+0x1cc>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005ec4:	4b03      	ldr	r3, [pc, #12]	; (8005ed4 <USER_SPI_initialize+0x1cc>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	b2db      	uxtb	r3, r3
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd90      	pop	{r4, r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20002730 	.word	0x20002730
 8005ed8:	20002e40 	.word	0x20002e40
 8005edc:	20015cd8 	.word	0x20015cd8

08005ee0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d001      	beq.n	8005ef4 <USER_SPI_status+0x14>
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e002      	b.n	8005efa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <USER_SPI_status+0x28>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	b2db      	uxtb	r3, r3
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20002730 	.word	0x20002730

08005f0c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	607a      	str	r2, [r7, #4]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d102      	bne.n	8005f28 <USER_SPI_read+0x1c>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <USER_SPI_read+0x20>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	e04d      	b.n	8005fc8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005f2c:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <USER_SPI_read+0xc4>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <USER_SPI_read+0x32>
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e044      	b.n	8005fc8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005f3e:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <USER_SPI_read+0xc8>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d102      	bne.n	8005f50 <USER_SPI_read+0x44>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	025b      	lsls	r3, r3, #9
 8005f4e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d111      	bne.n	8005f7a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005f56:	6879      	ldr	r1, [r7, #4]
 8005f58:	2011      	movs	r0, #17
 8005f5a:	f7ff fe66 	bl	8005c2a <send_cmd>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d129      	bne.n	8005fb8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8005f64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f68:	68b8      	ldr	r0, [r7, #8]
 8005f6a:	f7ff fe03 	bl	8005b74 <rcvr_datablock>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d021      	beq.n	8005fb8 <USER_SPI_read+0xac>
			count = 0;
 8005f74:	2300      	movs	r3, #0
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	e01e      	b.n	8005fb8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	2012      	movs	r0, #18
 8005f7e:	f7ff fe54 	bl	8005c2a <send_cmd>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d117      	bne.n	8005fb8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f8c:	68b8      	ldr	r0, [r7, #8]
 8005f8e:	f7ff fdf1 	bl	8005b74 <rcvr_datablock>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00a      	beq.n	8005fae <USER_SPI_read+0xa2>
				buff += 512;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005f9e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1ed      	bne.n	8005f88 <USER_SPI_read+0x7c>
 8005fac:	e000      	b.n	8005fb0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8005fae:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	200c      	movs	r0, #12
 8005fb4:	f7ff fe39 	bl	8005c2a <send_cmd>
		}
	}
	despiselect();
 8005fb8:	f7ff fdb4 	bl	8005b24 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	bf14      	ite	ne
 8005fc2:	2301      	movne	r3, #1
 8005fc4:	2300      	moveq	r3, #0
 8005fc6:	b2db      	uxtb	r3, r3
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20002730 	.word	0x20002730
 8005fd4:	20015cd8 	.word	0x20015cd8

08005fd8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <USER_SPI_write+0x1c>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <USER_SPI_write+0x20>
 8005ff4:	2304      	movs	r3, #4
 8005ff6:	e063      	b.n	80060c0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005ff8:	4b33      	ldr	r3, [pc, #204]	; (80060c8 <USER_SPI_write+0xf0>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <USER_SPI_write+0x32>
 8006006:	2303      	movs	r3, #3
 8006008:	e05a      	b.n	80060c0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800600a:	4b2f      	ldr	r3, [pc, #188]	; (80060c8 <USER_SPI_write+0xf0>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <USER_SPI_write+0x44>
 8006018:	2302      	movs	r3, #2
 800601a:	e051      	b.n	80060c0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800601c:	4b2b      	ldr	r3, [pc, #172]	; (80060cc <USER_SPI_write+0xf4>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d102      	bne.n	800602e <USER_SPI_write+0x56>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	025b      	lsls	r3, r3, #9
 800602c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d110      	bne.n	8006056 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006034:	6879      	ldr	r1, [r7, #4]
 8006036:	2018      	movs	r0, #24
 8006038:	f7ff fdf7 	bl	8005c2a <send_cmd>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d136      	bne.n	80060b0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006042:	21fe      	movs	r1, #254	; 0xfe
 8006044:	68b8      	ldr	r0, [r7, #8]
 8006046:	f7ff fdbe 	bl	8005bc6 <xmit_datablock>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d02f      	beq.n	80060b0 <USER_SPI_write+0xd8>
			count = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	e02c      	b.n	80060b0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006056:	4b1d      	ldr	r3, [pc, #116]	; (80060cc <USER_SPI_write+0xf4>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f003 0306 	and.w	r3, r3, #6
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <USER_SPI_write+0x92>
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	2097      	movs	r0, #151	; 0x97
 8006066:	f7ff fde0 	bl	8005c2a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	2019      	movs	r0, #25
 800606e:	f7ff fddc 	bl	8005c2a <send_cmd>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d11b      	bne.n	80060b0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006078:	21fc      	movs	r1, #252	; 0xfc
 800607a:	68b8      	ldr	r0, [r7, #8]
 800607c:	f7ff fda3 	bl	8005bc6 <xmit_datablock>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <USER_SPI_write+0xc4>
				buff += 512;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800608c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	3b01      	subs	r3, #1
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1ee      	bne.n	8006078 <USER_SPI_write+0xa0>
 800609a:	e000      	b.n	800609e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800609c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800609e:	21fd      	movs	r1, #253	; 0xfd
 80060a0:	2000      	movs	r0, #0
 80060a2:	f7ff fd90 	bl	8005bc6 <xmit_datablock>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <USER_SPI_write+0xd8>
 80060ac:	2301      	movs	r3, #1
 80060ae:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80060b0:	f7ff fd38 	bl	8005b24 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf14      	ite	ne
 80060ba:	2301      	movne	r3, #1
 80060bc:	2300      	moveq	r3, #0
 80060be:	b2db      	uxtb	r3, r3
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20002730 	.word	0x20002730
 80060cc:	20015cd8 	.word	0x20015cd8

080060d0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	; 0x30
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	603a      	str	r2, [r7, #0]
 80060da:	71fb      	strb	r3, [r7, #7]
 80060dc:	460b      	mov	r3, r1
 80060de:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <USER_SPI_ioctl+0x1a>
 80060e6:	2304      	movs	r3, #4
 80060e8:	e15a      	b.n	80063a0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80060ea:	4baf      	ldr	r3, [pc, #700]	; (80063a8 <USER_SPI_ioctl+0x2d8>)
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <USER_SPI_ioctl+0x2c>
 80060f8:	2303      	movs	r3, #3
 80060fa:	e151      	b.n	80063a0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006102:	79bb      	ldrb	r3, [r7, #6]
 8006104:	2b04      	cmp	r3, #4
 8006106:	f200 8136 	bhi.w	8006376 <USER_SPI_ioctl+0x2a6>
 800610a:	a201      	add	r2, pc, #4	; (adr r2, 8006110 <USER_SPI_ioctl+0x40>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	08006125 	.word	0x08006125
 8006114:	08006139 	.word	0x08006139
 8006118:	08006377 	.word	0x08006377
 800611c:	080061e5 	.word	0x080061e5
 8006120:	080062db 	.word	0x080062db
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006124:	f7ff fd0c 	bl	8005b40 <spiselect>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 8127 	beq.w	800637e <USER_SPI_ioctl+0x2ae>
 8006130:	2300      	movs	r3, #0
 8006132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006136:	e122      	b.n	800637e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006138:	2100      	movs	r1, #0
 800613a:	2009      	movs	r0, #9
 800613c:	f7ff fd75 	bl	8005c2a <send_cmd>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	f040 811d 	bne.w	8006382 <USER_SPI_ioctl+0x2b2>
 8006148:	f107 030c 	add.w	r3, r7, #12
 800614c:	2110      	movs	r1, #16
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fd10 	bl	8005b74 <rcvr_datablock>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8113 	beq.w	8006382 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800615c:	7b3b      	ldrb	r3, [r7, #12]
 800615e:	099b      	lsrs	r3, r3, #6
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	d111      	bne.n	800618a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006166:	7d7b      	ldrb	r3, [r7, #21]
 8006168:	461a      	mov	r2, r3
 800616a:	7d3b      	ldrb	r3, [r7, #20]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	4413      	add	r3, r2
 8006170:	461a      	mov	r2, r3
 8006172:	7cfb      	ldrb	r3, [r7, #19]
 8006174:	041b      	lsls	r3, r3, #16
 8006176:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800617a:	4413      	add	r3, r2
 800617c:	3301      	adds	r3, #1
 800617e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	029a      	lsls	r2, r3, #10
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	e028      	b.n	80061dc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800618a:	7c7b      	ldrb	r3, [r7, #17]
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	b2da      	uxtb	r2, r3
 8006192:	7dbb      	ldrb	r3, [r7, #22]
 8006194:	09db      	lsrs	r3, r3, #7
 8006196:	b2db      	uxtb	r3, r3
 8006198:	4413      	add	r3, r2
 800619a:	b2da      	uxtb	r2, r3
 800619c:	7d7b      	ldrb	r3, [r7, #21]
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	f003 0306 	and.w	r3, r3, #6
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	3302      	adds	r3, #2
 80061ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80061b2:	7d3b      	ldrb	r3, [r7, #20]
 80061b4:	099b      	lsrs	r3, r3, #6
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	7cfb      	ldrb	r3, [r7, #19]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	441a      	add	r2, r3
 80061c0:	7cbb      	ldrb	r3, [r7, #18]
 80061c2:	029b      	lsls	r3, r3, #10
 80061c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80061c8:	4413      	add	r3, r2
 80061ca:	3301      	adds	r3, #1
 80061cc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80061ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80061d2:	3b09      	subs	r3, #9
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	409a      	lsls	r2, r3
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80061e2:	e0ce      	b.n	8006382 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80061e4:	4b71      	ldr	r3, [pc, #452]	; (80063ac <USER_SPI_ioctl+0x2dc>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d031      	beq.n	8006254 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80061f0:	2100      	movs	r1, #0
 80061f2:	208d      	movs	r0, #141	; 0x8d
 80061f4:	f7ff fd19 	bl	8005c2a <send_cmd>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f040 80c3 	bne.w	8006386 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006200:	20ff      	movs	r0, #255	; 0xff
 8006202:	f7ff fc1f 	bl	8005a44 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006206:	f107 030c 	add.w	r3, r7, #12
 800620a:	2110      	movs	r1, #16
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff fcb1 	bl	8005b74 <rcvr_datablock>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 80b6 	beq.w	8006386 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800621a:	2330      	movs	r3, #48	; 0x30
 800621c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006220:	e007      	b.n	8006232 <USER_SPI_ioctl+0x162>
 8006222:	20ff      	movs	r0, #255	; 0xff
 8006224:	f7ff fc0e 	bl	8005a44 <xchg_spi>
 8006228:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800622c:	3b01      	subs	r3, #1
 800622e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006232:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f3      	bne.n	8006222 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800623a:	7dbb      	ldrb	r3, [r7, #22]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	2310      	movs	r3, #16
 8006244:	fa03 f202 	lsl.w	r2, r3, r2
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006252:	e098      	b.n	8006386 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006254:	2100      	movs	r1, #0
 8006256:	2009      	movs	r0, #9
 8006258:	f7ff fce7 	bl	8005c2a <send_cmd>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	f040 8091 	bne.w	8006386 <USER_SPI_ioctl+0x2b6>
 8006264:	f107 030c 	add.w	r3, r7, #12
 8006268:	2110      	movs	r1, #16
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fc82 	bl	8005b74 <rcvr_datablock>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 8087 	beq.w	8006386 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006278:	4b4c      	ldr	r3, [pc, #304]	; (80063ac <USER_SPI_ioctl+0x2dc>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d012      	beq.n	80062aa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006284:	7dbb      	ldrb	r3, [r7, #22]
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800628c:	7dfa      	ldrb	r2, [r7, #23]
 800628e:	09d2      	lsrs	r2, r2, #7
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	4413      	add	r3, r2
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	7e7b      	ldrb	r3, [r7, #25]
 8006298:	099b      	lsrs	r3, r3, #6
 800629a:	b2db      	uxtb	r3, r3
 800629c:	3b01      	subs	r3, #1
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e013      	b.n	80062d2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80062aa:	7dbb      	ldrb	r3, [r7, #22]
 80062ac:	109b      	asrs	r3, r3, #2
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f003 031f 	and.w	r3, r3, #31
 80062b4:	3301      	adds	r3, #1
 80062b6:	7dfa      	ldrb	r2, [r7, #23]
 80062b8:	00d2      	lsls	r2, r2, #3
 80062ba:	f002 0218 	and.w	r2, r2, #24
 80062be:	7df9      	ldrb	r1, [r7, #23]
 80062c0:	0949      	lsrs	r1, r1, #5
 80062c2:	b2c9      	uxtb	r1, r1
 80062c4:	440a      	add	r2, r1
 80062c6:	3201      	adds	r2, #1
 80062c8:	fb02 f303 	mul.w	r3, r2, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80062d8:	e055      	b.n	8006386 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80062da:	4b34      	ldr	r3, [pc, #208]	; (80063ac <USER_SPI_ioctl+0x2dc>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	f003 0306 	and.w	r3, r3, #6
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d051      	beq.n	800638a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80062e6:	f107 020c 	add.w	r2, r7, #12
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	210b      	movs	r1, #11
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff feee 	bl	80060d0 <USER_SPI_ioctl>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d149      	bne.n	800638e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80062fa:	7b3b      	ldrb	r3, [r7, #12]
 80062fc:	099b      	lsrs	r3, r3, #6
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d104      	bne.n	800630e <USER_SPI_ioctl+0x23e>
 8006304:	7dbb      	ldrb	r3, [r7, #22]
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	d041      	beq.n	8006392 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	62bb      	str	r3, [r7, #40]	; 0x28
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800631e:	4b23      	ldr	r3, [pc, #140]	; (80063ac <USER_SPI_ioctl+0x2dc>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d105      	bne.n	8006336 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	025b      	lsls	r3, r3, #9
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	025b      	lsls	r3, r3, #9
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006338:	2020      	movs	r0, #32
 800633a:	f7ff fc76 	bl	8005c2a <send_cmd>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d128      	bne.n	8006396 <USER_SPI_ioctl+0x2c6>
 8006344:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006346:	2021      	movs	r0, #33	; 0x21
 8006348:	f7ff fc6f 	bl	8005c2a <send_cmd>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d121      	bne.n	8006396 <USER_SPI_ioctl+0x2c6>
 8006352:	2100      	movs	r1, #0
 8006354:	2026      	movs	r0, #38	; 0x26
 8006356:	f7ff fc68 	bl	8005c2a <send_cmd>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d11a      	bne.n	8006396 <USER_SPI_ioctl+0x2c6>
 8006360:	f247 5030 	movw	r0, #30000	; 0x7530
 8006364:	f7ff fbbb 	bl	8005ade <wait_ready>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d013      	beq.n	8006396 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800636e:	2300      	movs	r3, #0
 8006370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006374:	e00f      	b.n	8006396 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006376:	2304      	movs	r3, #4
 8006378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800637c:	e00c      	b.n	8006398 <USER_SPI_ioctl+0x2c8>
		break;
 800637e:	bf00      	nop
 8006380:	e00a      	b.n	8006398 <USER_SPI_ioctl+0x2c8>
		break;
 8006382:	bf00      	nop
 8006384:	e008      	b.n	8006398 <USER_SPI_ioctl+0x2c8>
		break;
 8006386:	bf00      	nop
 8006388:	e006      	b.n	8006398 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800638a:	bf00      	nop
 800638c:	e004      	b.n	8006398 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800638e:	bf00      	nop
 8006390:	e002      	b.n	8006398 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <USER_SPI_ioctl+0x2c8>
		break;
 8006396:	bf00      	nop
	}

	despiselect();
 8006398:	f7ff fbc4 	bl	8005b24 <despiselect>

	return res;
 800639c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3730      	adds	r7, #48	; 0x30
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20002730 	.word	0x20002730
 80063ac:	20015cd8 	.word	0x20015cd8

080063b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	4a08      	ldr	r2, [pc, #32]	; (80063e0 <disk_status+0x30>)
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	79fa      	ldrb	r2, [r7, #7]
 80063c8:	4905      	ldr	r1, [pc, #20]	; (80063e0 <disk_status+0x30>)
 80063ca:	440a      	add	r2, r1
 80063cc:	7a12      	ldrb	r2, [r2, #8]
 80063ce:	4610      	mov	r0, r2
 80063d0:	4798      	blx	r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20015d0c 	.word	0x20015d0c

080063e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	4a0d      	ldr	r2, [pc, #52]	; (800642c <disk_initialize+0x48>)
 80063f6:	5cd3      	ldrb	r3, [r2, r3]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d111      	bne.n	8006420 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	4a0b      	ldr	r2, [pc, #44]	; (800642c <disk_initialize+0x48>)
 8006400:	2101      	movs	r1, #1
 8006402:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	4a09      	ldr	r2, [pc, #36]	; (800642c <disk_initialize+0x48>)
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	79fa      	ldrb	r2, [r7, #7]
 8006412:	4906      	ldr	r1, [pc, #24]	; (800642c <disk_initialize+0x48>)
 8006414:	440a      	add	r2, r1
 8006416:	7a12      	ldrb	r2, [r2, #8]
 8006418:	4610      	mov	r0, r2
 800641a:	4798      	blx	r3
 800641c:	4603      	mov	r3, r0
 800641e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20015d0c 	.word	0x20015d0c

08006430 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006430:	b590      	push	{r4, r7, lr}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	4a0a      	ldr	r2, [pc, #40]	; (800646c <disk_read+0x3c>)
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	689c      	ldr	r4, [r3, #8]
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	4a07      	ldr	r2, [pc, #28]	; (800646c <disk_read+0x3c>)
 8006450:	4413      	add	r3, r2
 8006452:	7a18      	ldrb	r0, [r3, #8]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	47a0      	blx	r4
 800645c:	4603      	mov	r3, r0
 800645e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	bd90      	pop	{r4, r7, pc}
 800646a:	bf00      	nop
 800646c:	20015d0c 	.word	0x20015d0c

08006470 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006470:	b590      	push	{r4, r7, lr}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
 800647a:	603b      	str	r3, [r7, #0]
 800647c:	4603      	mov	r3, r0
 800647e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <disk_write+0x3c>)
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	68dc      	ldr	r4, [r3, #12]
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	4a07      	ldr	r2, [pc, #28]	; (80064ac <disk_write+0x3c>)
 8006490:	4413      	add	r3, r2
 8006492:	7a18      	ldrb	r0, [r3, #8]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	47a0      	blx	r4
 800649c:	4603      	mov	r3, r0
 800649e:	75fb      	strb	r3, [r7, #23]
  return res;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd90      	pop	{r4, r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20015d0c 	.word	0x20015d0c

080064b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	603a      	str	r2, [r7, #0]
 80064ba:	71fb      	strb	r3, [r7, #7]
 80064bc:	460b      	mov	r3, r1
 80064be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <disk_ioctl+0x38>)
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	79fa      	ldrb	r2, [r7, #7]
 80064ce:	4906      	ldr	r1, [pc, #24]	; (80064e8 <disk_ioctl+0x38>)
 80064d0:	440a      	add	r2, r1
 80064d2:	7a10      	ldrb	r0, [r2, #8]
 80064d4:	79b9      	ldrb	r1, [r7, #6]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	4798      	blx	r3
 80064da:	4603      	mov	r3, r0
 80064dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80064de:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20015d0c 	.word	0x20015d0c

080064ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3301      	adds	r3, #1
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80064fc:	89fb      	ldrh	r3, [r7, #14]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	b21a      	sxth	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	b21b      	sxth	r3, r3
 8006508:	4313      	orrs	r3, r2
 800650a:	b21b      	sxth	r3, r3
 800650c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800650e:	89fb      	ldrh	r3, [r7, #14]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3303      	adds	r3, #3
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	3202      	adds	r2, #2
 8006534:	7812      	ldrb	r2, [r2, #0]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	3201      	adds	r2, #1
 8006542:	7812      	ldrb	r2, [r2, #0]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	021b      	lsls	r3, r3, #8
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	7812      	ldrb	r2, [r2, #0]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
	return rv;
 8006554:	68fb      	ldr	r3, [r7, #12]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	460b      	mov	r3, r1
 800656c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	607a      	str	r2, [r7, #4]
 8006574:	887a      	ldrh	r2, [r7, #2]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	887b      	ldrh	r3, [r7, #2]
 800657c:	0a1b      	lsrs	r3, r3, #8
 800657e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	887a      	ldrh	r2, [r7, #2]
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	0a1b      	lsrs	r3, r3, #8
 80065b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	1c5a      	adds	r2, r3, #1
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	683a      	ldr	r2, [r7, #0]
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	0a1b      	lsrs	r3, r3, #8
 80065d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00d      	beq.n	8006626 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	1c53      	adds	r3, r2, #1
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	6179      	str	r1, [r7, #20]
 8006616:	7812      	ldrb	r2, [r2, #0]
 8006618:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3b01      	subs	r3, #1
 800661e:	607b      	str	r3, [r7, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1f1      	bne.n	800660a <mem_cpy+0x1a>
	}
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006632:	b480      	push	{r7}
 8006634:	b087      	sub	sp, #28
 8006636:	af00      	add	r7, sp, #0
 8006638:	60f8      	str	r0, [r7, #12]
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	617a      	str	r2, [r7, #20]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	3b01      	subs	r3, #1
 8006652:	607b      	str	r3, [r7, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1f3      	bne.n	8006642 <mem_set+0x10>
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	; 0x24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	61fa      	str	r2, [r7, #28]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	4619      	mov	r1, r3
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	61ba      	str	r2, [r7, #24]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	1acb      	subs	r3, r1, r3
 8006694:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3b01      	subs	r3, #1
 800669a:	607b      	str	r3, [r7, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <mem_cmp+0x40>
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d0eb      	beq.n	8006680 <mem_cmp+0x18>

	return r;
 80066a8:	697b      	ldr	r3, [r7, #20]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3724      	adds	r7, #36	; 0x24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80066c0:	e002      	b.n	80066c8 <chk_chr+0x12>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3301      	adds	r3, #1
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <chk_chr+0x26>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	4293      	cmp	r3, r2
 80066da:	d1f2      	bne.n	80066c2 <chk_chr+0xc>
	return *str;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	781b      	ldrb	r3, [r3, #0]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80066f6:	2300      	movs	r3, #0
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	e029      	b.n	8006754 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006700:	4a27      	ldr	r2, [pc, #156]	; (80067a0 <chk_lock+0xb4>)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	011b      	lsls	r3, r3, #4
 8006706:	4413      	add	r3, r2
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01d      	beq.n	800674a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800670e:	4a24      	ldr	r2, [pc, #144]	; (80067a0 <chk_lock+0xb4>)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	4413      	add	r3, r2
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d116      	bne.n	800674e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006720:	4a1f      	ldr	r2, [pc, #124]	; (80067a0 <chk_lock+0xb4>)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	4413      	add	r3, r2
 8006728:	3304      	adds	r3, #4
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006730:	429a      	cmp	r2, r3
 8006732:	d10c      	bne.n	800674e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006734:	4a1a      	ldr	r2, [pc, #104]	; (80067a0 <chk_lock+0xb4>)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	4413      	add	r3, r2
 800673c:	3308      	adds	r3, #8
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006744:	429a      	cmp	r2, r3
 8006746:	d102      	bne.n	800674e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006748:	e007      	b.n	800675a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800674a:	2301      	movs	r3, #1
 800674c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3301      	adds	r3, #1
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d9d2      	bls.n	8006700 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d109      	bne.n	8006774 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d102      	bne.n	800676c <chk_lock+0x80>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d101      	bne.n	8006770 <chk_lock+0x84>
 800676c:	2300      	movs	r3, #0
 800676e:	e010      	b.n	8006792 <chk_lock+0xa6>
 8006770:	2312      	movs	r3, #18
 8006772:	e00e      	b.n	8006792 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d108      	bne.n	800678c <chk_lock+0xa0>
 800677a:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <chk_lock+0xb4>)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	4413      	add	r3, r2
 8006782:	330c      	adds	r3, #12
 8006784:	881b      	ldrh	r3, [r3, #0]
 8006786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800678a:	d101      	bne.n	8006790 <chk_lock+0xa4>
 800678c:	2310      	movs	r3, #16
 800678e:	e000      	b.n	8006792 <chk_lock+0xa6>
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	20015cec 	.word	0x20015cec

080067a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80067aa:	2300      	movs	r3, #0
 80067ac:	607b      	str	r3, [r7, #4]
 80067ae:	e002      	b.n	80067b6 <enq_lock+0x12>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	3301      	adds	r3, #1
 80067b4:	607b      	str	r3, [r7, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d806      	bhi.n	80067ca <enq_lock+0x26>
 80067bc:	4a09      	ldr	r2, [pc, #36]	; (80067e4 <enq_lock+0x40>)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	4413      	add	r3, r2
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1f2      	bne.n	80067b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20015cec 	.word	0x20015cec

080067e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]
 80067f6:	e01f      	b.n	8006838 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80067f8:	4a41      	ldr	r2, [pc, #260]	; (8006900 <inc_lock+0x118>)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	4413      	add	r3, r2
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	429a      	cmp	r2, r3
 8006808:	d113      	bne.n	8006832 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800680a:	4a3d      	ldr	r2, [pc, #244]	; (8006900 <inc_lock+0x118>)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	4413      	add	r3, r2
 8006812:	3304      	adds	r3, #4
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800681a:	429a      	cmp	r2, r3
 800681c:	d109      	bne.n	8006832 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800681e:	4a38      	ldr	r2, [pc, #224]	; (8006900 <inc_lock+0x118>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	4413      	add	r3, r2
 8006826:	3308      	adds	r3, #8
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800682e:	429a      	cmp	r2, r3
 8006830:	d006      	beq.n	8006840 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3301      	adds	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d9dc      	bls.n	80067f8 <inc_lock+0x10>
 800683e:	e000      	b.n	8006842 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006840:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d132      	bne.n	80068ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e002      	b.n	8006854 <inc_lock+0x6c>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3301      	adds	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d806      	bhi.n	8006868 <inc_lock+0x80>
 800685a:	4a29      	ldr	r2, [pc, #164]	; (8006900 <inc_lock+0x118>)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	4413      	add	r3, r2
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1f2      	bne.n	800684e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d101      	bne.n	8006872 <inc_lock+0x8a>
 800686e:	2300      	movs	r3, #0
 8006870:	e040      	b.n	80068f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4922      	ldr	r1, [pc, #136]	; (8006900 <inc_lock+0x118>)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	440b      	add	r3, r1
 800687e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	491e      	ldr	r1, [pc, #120]	; (8006900 <inc_lock+0x118>)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	440b      	add	r3, r1
 800688c:	3304      	adds	r3, #4
 800688e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	491a      	ldr	r1, [pc, #104]	; (8006900 <inc_lock+0x118>)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	440b      	add	r3, r1
 800689c:	3308      	adds	r3, #8
 800689e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80068a0:	4a17      	ldr	r2, [pc, #92]	; (8006900 <inc_lock+0x118>)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	4413      	add	r3, r2
 80068a8:	330c      	adds	r3, #12
 80068aa:	2200      	movs	r2, #0
 80068ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <inc_lock+0xe0>
 80068b4:	4a12      	ldr	r2, [pc, #72]	; (8006900 <inc_lock+0x118>)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	4413      	add	r3, r2
 80068bc:	330c      	adds	r3, #12
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <inc_lock+0xe0>
 80068c4:	2300      	movs	r3, #0
 80068c6:	e015      	b.n	80068f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d108      	bne.n	80068e0 <inc_lock+0xf8>
 80068ce:	4a0c      	ldr	r2, [pc, #48]	; (8006900 <inc_lock+0x118>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	4413      	add	r3, r2
 80068d6:	330c      	adds	r3, #12
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	e001      	b.n	80068e4 <inc_lock+0xfc>
 80068e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068e4:	4906      	ldr	r1, [pc, #24]	; (8006900 <inc_lock+0x118>)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	440b      	add	r3, r1
 80068ec:	330c      	adds	r3, #12
 80068ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	20015cec 	.word	0x20015cec

08006904 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3b01      	subs	r3, #1
 8006910:	607b      	str	r3, [r7, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d825      	bhi.n	8006964 <dec_lock+0x60>
		n = Files[i].ctr;
 8006918:	4a17      	ldr	r2, [pc, #92]	; (8006978 <dec_lock+0x74>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	4413      	add	r3, r2
 8006920:	330c      	adds	r3, #12
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006926:	89fb      	ldrh	r3, [r7, #14]
 8006928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692c:	d101      	bne.n	8006932 <dec_lock+0x2e>
 800692e:	2300      	movs	r3, #0
 8006930:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006932:	89fb      	ldrh	r3, [r7, #14]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <dec_lock+0x3a>
 8006938:	89fb      	ldrh	r3, [r7, #14]
 800693a:	3b01      	subs	r3, #1
 800693c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800693e:	4a0e      	ldr	r2, [pc, #56]	; (8006978 <dec_lock+0x74>)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	4413      	add	r3, r2
 8006946:	330c      	adds	r3, #12
 8006948:	89fa      	ldrh	r2, [r7, #14]
 800694a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800694c:	89fb      	ldrh	r3, [r7, #14]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d105      	bne.n	800695e <dec_lock+0x5a>
 8006952:	4a09      	ldr	r2, [pc, #36]	; (8006978 <dec_lock+0x74>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	4413      	add	r3, r2
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	737b      	strb	r3, [r7, #13]
 8006962:	e001      	b.n	8006968 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006964:	2302      	movs	r3, #2
 8006966:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006968:	7b7b      	ldrb	r3, [r7, #13]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20015cec 	.word	0x20015cec

0800697c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e010      	b.n	80069ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800698a:	4a0d      	ldr	r2, [pc, #52]	; (80069c0 <clear_lock+0x44>)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	4413      	add	r3, r2
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d105      	bne.n	80069a6 <clear_lock+0x2a>
 800699a:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <clear_lock+0x44>)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	011b      	lsls	r3, r3, #4
 80069a0:	4413      	add	r3, r2
 80069a2:	2200      	movs	r2, #0
 80069a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	3301      	adds	r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d9eb      	bls.n	800698a <clear_lock+0xe>
	}
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	20015cec 	.word	0x20015cec

080069c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	78db      	ldrb	r3, [r3, #3]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d034      	beq.n	8006a42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	7858      	ldrb	r0, [r3, #1]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80069e8:	2301      	movs	r3, #1
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	f7ff fd40 	bl	8006470 <disk_write>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	73fb      	strb	r3, [r7, #15]
 80069fa:	e022      	b.n	8006a42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d217      	bcs.n	8006a42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	789b      	ldrb	r3, [r3, #2]
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	e010      	b.n	8006a3c <sync_window+0x78>
					wsect += fs->fsize;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	4413      	add	r3, r2
 8006a22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7858      	ldrb	r0, [r3, #1]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a2e:	2301      	movs	r3, #1
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	f7ff fd1d 	bl	8006470 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d8eb      	bhi.n	8006a1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d01b      	beq.n	8006a9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff ffad 	bl	80069c4 <sync_window>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d113      	bne.n	8006a9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	7858      	ldrb	r0, [r3, #1]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006a7e:	2301      	movs	r3, #1
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	f7ff fcd5 	bl	8006430 <disk_read>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d004      	beq.n	8006a96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006a8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff ff87 	bl	80069c4 <sync_window>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d158      	bne.n	8006b72 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d148      	bne.n	8006b5a <sync_fs+0xb2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	791b      	ldrb	r3, [r3, #4]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d144      	bne.n	8006b5a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3330      	adds	r3, #48	; 0x30
 8006ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff fda9 	bl	8006632 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3330      	adds	r3, #48	; 0x30
 8006ae4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ae8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff fd38 	bl	8006562 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3330      	adds	r3, #48	; 0x30
 8006af6:	4921      	ldr	r1, [pc, #132]	; (8006b7c <sync_fs+0xd4>)
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff fd4d 	bl	8006598 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3330      	adds	r3, #48	; 0x30
 8006b02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b06:	491e      	ldr	r1, [pc, #120]	; (8006b80 <sync_fs+0xd8>)
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff fd45 	bl	8006598 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3330      	adds	r3, #48	; 0x30
 8006b12:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f7ff fd3b 	bl	8006598 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3330      	adds	r3, #48	; 0x30
 8006b26:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	4610      	mov	r0, r2
 8006b32:	f7ff fd31 	bl	8006598 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	7858      	ldrb	r0, [r3, #1]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f7ff fc8e 	bl	8006470 <disk_write>
			fs->fsi_flag = 0;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	785b      	ldrb	r3, [r3, #1]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2100      	movs	r1, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff fca4 	bl	80064b0 <disk_ioctl>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <sync_fs+0xca>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	41615252 	.word	0x41615252
 8006b80:	61417272 	.word	0x61417272

08006b84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	3b02      	subs	r3, #2
 8006b92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	3b02      	subs	r3, #2
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d301      	bcc.n	8006ba4 <clust2sect+0x20>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	e008      	b.n	8006bb6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	895b      	ldrh	r3, [r3, #10]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	fb03 f202 	mul.w	r2, r3, r2
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb4:	4413      	add	r3, r2
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b086      	sub	sp, #24
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d904      	bls.n	8006be2 <get_fat+0x20>
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d302      	bcc.n	8006be8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006be2:	2301      	movs	r3, #1
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e08f      	b.n	8006d08 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d062      	beq.n	8006cbc <get_fat+0xfa>
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	dc7c      	bgt.n	8006cf4 <get_fat+0x132>
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d002      	beq.n	8006c04 <get_fat+0x42>
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d042      	beq.n	8006c88 <get_fat+0xc6>
 8006c02:	e077      	b.n	8006cf4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	6a1a      	ldr	r2, [r3, #32]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	0a5b      	lsrs	r3, r3, #9
 8006c1a:	4413      	add	r3, r2
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6938      	ldr	r0, [r7, #16]
 8006c20:	f7ff ff14 	bl	8006a4c <move_window>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d167      	bne.n	8006cfa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	60fa      	str	r2, [r7, #12]
 8006c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	4413      	add	r3, r2
 8006c38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	6a1a      	ldr	r2, [r3, #32]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	0a5b      	lsrs	r3, r3, #9
 8006c46:	4413      	add	r3, r2
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6938      	ldr	r0, [r7, #16]
 8006c4c:	f7ff fefe 	bl	8006a4c <move_window>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d153      	bne.n	8006cfe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	461a      	mov	r2, r3
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <get_fat+0xbc>
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	091b      	lsrs	r3, r3, #4
 8006c7c:	e002      	b.n	8006c84 <get_fat+0xc2>
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c84:	617b      	str	r3, [r7, #20]
			break;
 8006c86:	e03f      	b.n	8006d08 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	6a1a      	ldr	r2, [r3, #32]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	4413      	add	r3, r2
 8006c92:	4619      	mov	r1, r3
 8006c94:	6938      	ldr	r0, [r7, #16]
 8006c96:	f7ff fed9 	bl	8006a4c <move_window>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d130      	bne.n	8006d02 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006cae:	4413      	add	r3, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff fc1b 	bl	80064ec <ld_word>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	617b      	str	r3, [r7, #20]
			break;
 8006cba:	e025      	b.n	8006d08 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	6a1a      	ldr	r2, [r3, #32]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	09db      	lsrs	r3, r3, #7
 8006cc4:	4413      	add	r3, r2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6938      	ldr	r0, [r7, #16]
 8006cca:	f7ff febf 	bl	8006a4c <move_window>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d118      	bne.n	8006d06 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006ce2:	4413      	add	r3, r2
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff fc19 	bl	800651c <ld_dword>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006cf0:	617b      	str	r3, [r7, #20]
			break;
 8006cf2:	e009      	b.n	8006d08 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	e006      	b.n	8006d08 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cfa:	bf00      	nop
 8006cfc:	e004      	b.n	8006d08 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cfe:	bf00      	nop
 8006d00:	e002      	b.n	8006d08 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d02:	bf00      	nop
 8006d04:	e000      	b.n	8006d08 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d06:	bf00      	nop
		}
	}

	return val;
 8006d08:	697b      	ldr	r3, [r7, #20]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006d12:	b590      	push	{r4, r7, lr}
 8006d14:	b089      	sub	sp, #36	; 0x24
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	f240 80d2 	bls.w	8006ece <put_fat+0x1bc>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	f080 80cc 	bcs.w	8006ece <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	f000 8096 	beq.w	8006e6c <put_fat+0x15a>
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	f300 80cd 	bgt.w	8006ee0 <put_fat+0x1ce>
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d002      	beq.n	8006d50 <put_fat+0x3e>
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d06e      	beq.n	8006e2c <put_fat+0x11a>
 8006d4e:	e0c7      	b.n	8006ee0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	61bb      	str	r3, [r7, #24]
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6a1a      	ldr	r2, [r3, #32]
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	0a5b      	lsrs	r3, r3, #9
 8006d66:	4413      	add	r3, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7ff fe6e 	bl	8006a4c <move_window>
 8006d70:	4603      	mov	r3, r0
 8006d72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d74:	7ffb      	ldrb	r3, [r7, #31]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f040 80ab 	bne.w	8006ed2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	1c59      	adds	r1, r3, #1
 8006d86:	61b9      	str	r1, [r7, #24]
 8006d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8c:	4413      	add	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <put_fat+0xa4>
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	b25a      	sxtb	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b25b      	sxtb	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	e001      	b.n	8006dba <put_fat+0xa8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1a      	ldr	r2, [r3, #32]
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	0a5b      	lsrs	r3, r3, #9
 8006dcc:	4413      	add	r3, r2
 8006dce:	4619      	mov	r1, r3
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff fe3b 	bl	8006a4c <move_window>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dda:	7ffb      	ldrb	r3, [r7, #31]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d17a      	bne.n	8006ed6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dec:	4413      	add	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f003 0301 	and.w	r3, r3, #1
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <put_fat+0xf0>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	091b      	lsrs	r3, r3, #4
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	e00e      	b.n	8006e20 <put_fat+0x10e>
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	b25b      	sxtb	r3, r3
 8006e08:	f023 030f 	bic.w	r3, r3, #15
 8006e0c:	b25a      	sxtb	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	0a1b      	lsrs	r3, r3, #8
 8006e12:	b25b      	sxtb	r3, r3
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	b25b      	sxtb	r3, r3
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	70da      	strb	r2, [r3, #3]
			break;
 8006e2a:	e059      	b.n	8006ee0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a1a      	ldr	r2, [r3, #32]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	0a1b      	lsrs	r3, r3, #8
 8006e34:	4413      	add	r3, r2
 8006e36:	4619      	mov	r1, r3
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff fe07 	bl	8006a4c <move_window>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e42:	7ffb      	ldrb	r3, [r7, #31]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d148      	bne.n	8006eda <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006e56:	4413      	add	r3, r2
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	b292      	uxth	r2, r2
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fb7f 	bl	8006562 <st_word>
			fs->wflag = 1;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	70da      	strb	r2, [r3, #3]
			break;
 8006e6a:	e039      	b.n	8006ee0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1a      	ldr	r2, [r3, #32]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	09db      	lsrs	r3, r3, #7
 8006e74:	4413      	add	r3, r2
 8006e76:	4619      	mov	r1, r3
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7ff fde7 	bl	8006a4c <move_window>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e82:	7ffb      	ldrb	r3, [r7, #31]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d12a      	bne.n	8006ede <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006e9c:	4413      	add	r3, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff fb3c 	bl	800651c <ld_dword>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006eaa:	4323      	orrs	r3, r4
 8006eac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006ebc:	4413      	add	r3, r2
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff fb69 	bl	8006598 <st_dword>
			fs->wflag = 1;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	70da      	strb	r2, [r3, #3]
			break;
 8006ecc:	e008      	b.n	8006ee0 <put_fat+0x1ce>
		}
	}
 8006ece:	bf00      	nop
 8006ed0:	e006      	b.n	8006ee0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006ed2:	bf00      	nop
 8006ed4:	e004      	b.n	8006ee0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006ed6:	bf00      	nop
 8006ed8:	e002      	b.n	8006ee0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006eda:	bf00      	nop
 8006edc:	e000      	b.n	8006ee0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006ede:	bf00      	nop
	return res;
 8006ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3724      	adds	r7, #36	; 0x24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd90      	pop	{r4, r7, pc}

08006eea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b088      	sub	sp, #32
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	60f8      	str	r0, [r7, #12]
 8006ef2:	60b9      	str	r1, [r7, #8]
 8006ef4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d904      	bls.n	8006f10 <remove_chain+0x26>
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d301      	bcc.n	8006f14 <remove_chain+0x2a>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e04b      	b.n	8006fac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00c      	beq.n	8006f34 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	69b8      	ldr	r0, [r7, #24]
 8006f22:	f7ff fef6 	bl	8006d12 <put_fat>
 8006f26:	4603      	mov	r3, r0
 8006f28:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006f2a:	7ffb      	ldrb	r3, [r7, #31]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <remove_chain+0x4a>
 8006f30:	7ffb      	ldrb	r3, [r7, #31]
 8006f32:	e03b      	b.n	8006fac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006f34:	68b9      	ldr	r1, [r7, #8]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f7ff fe43 	bl	8006bc2 <get_fat>
 8006f3c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d031      	beq.n	8006fa8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <remove_chain+0x64>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e02e      	b.n	8006fac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f54:	d101      	bne.n	8006f5a <remove_chain+0x70>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e028      	b.n	8006fac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	68b9      	ldr	r1, [r7, #8]
 8006f5e:	69b8      	ldr	r0, [r7, #24]
 8006f60:	f7ff fed7 	bl	8006d12 <put_fat>
 8006f64:	4603      	mov	r3, r0
 8006f66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f68:	7ffb      	ldrb	r3, [r7, #31]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <remove_chain+0x88>
 8006f6e:	7ffb      	ldrb	r3, [r7, #31]
 8006f70:	e01c      	b.n	8006fac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	3b02      	subs	r3, #2
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d20b      	bcs.n	8006f98 <remove_chain+0xae>
			fs->free_clst++;
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	791b      	ldrb	r3, [r3, #4]
 8006f8e:	f043 0301 	orr.w	r3, r3, #1
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3c6      	bcc.n	8006f34 <remove_chain+0x4a>
 8006fa6:	e000      	b.n	8006faa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006fa8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3720      	adds	r7, #32
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b088      	sub	sp, #32
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10d      	bne.n	8006fe6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d004      	beq.n	8006fe0 <create_chain+0x2c>
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d31b      	bcc.n	8007018 <create_chain+0x64>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	e018      	b.n	8007018 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7ff fdea 	bl	8006bc2 <get_fat>
 8006fee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d801      	bhi.n	8006ffa <create_chain+0x46>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e070      	b.n	80070dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007000:	d101      	bne.n	8007006 <create_chain+0x52>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	e06a      	b.n	80070dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	429a      	cmp	r2, r3
 800700e:	d201      	bcs.n	8007014 <create_chain+0x60>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	e063      	b.n	80070dc <create_chain+0x128>
		scl = clst;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	3301      	adds	r3, #1
 8007020:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	429a      	cmp	r2, r3
 800702a:	d307      	bcc.n	800703c <create_chain+0x88>
				ncl = 2;
 800702c:	2302      	movs	r3, #2
 800702e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	429a      	cmp	r2, r3
 8007036:	d901      	bls.n	800703c <create_chain+0x88>
 8007038:	2300      	movs	r3, #0
 800703a:	e04f      	b.n	80070dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800703c:	69f9      	ldr	r1, [r7, #28]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff fdbf 	bl	8006bc2 <get_fat>
 8007044:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00e      	beq.n	800706a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d003      	beq.n	800705a <create_chain+0xa6>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007058:	d101      	bne.n	800705e <create_chain+0xaa>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	e03e      	b.n	80070dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	429a      	cmp	r2, r3
 8007064:	d1da      	bne.n	800701c <create_chain+0x68>
 8007066:	2300      	movs	r3, #0
 8007068:	e038      	b.n	80070dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800706a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800706c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007070:	69f9      	ldr	r1, [r7, #28]
 8007072:	6938      	ldr	r0, [r7, #16]
 8007074:	f7ff fe4d 	bl	8006d12 <put_fat>
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <create_chain+0xe2>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d006      	beq.n	8007096 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6938      	ldr	r0, [r7, #16]
 800708e:	f7ff fe40 	bl	8006d12 <put_fat>
 8007092:	4603      	mov	r3, r0
 8007094:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d116      	bne.n	80070ca <create_chain+0x116>
		fs->last_clst = ncl;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	3b02      	subs	r3, #2
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d804      	bhi.n	80070ba <create_chain+0x106>
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	1e5a      	subs	r2, r3, #1
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	791b      	ldrb	r3, [r3, #4]
 80070be:	f043 0301 	orr.w	r3, r3, #1
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	711a      	strb	r2, [r3, #4]
 80070c8:	e007      	b.n	80070da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d102      	bne.n	80070d6 <create_chain+0x122>
 80070d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070d4:	e000      	b.n	80070d8 <create_chain+0x124>
 80070d6:	2301      	movs	r3, #1
 80070d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80070da:	69fb      	ldr	r3, [r7, #28]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3720      	adds	r7, #32
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	3304      	adds	r3, #4
 80070fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	0a5b      	lsrs	r3, r3, #9
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	8952      	ldrh	r2, [r2, #10]
 8007104:	fbb3 f3f2 	udiv	r3, r3, r2
 8007108:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1d1a      	adds	r2, r3, #4
 800710e:	613a      	str	r2, [r7, #16]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <clmt_clust+0x3a>
 800711a:	2300      	movs	r3, #0
 800711c:	e010      	b.n	8007140 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d307      	bcc.n	8007136 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	617b      	str	r3, [r7, #20]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	3304      	adds	r3, #4
 8007132:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007134:	e7e9      	b.n	800710a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007136:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	4413      	add	r3, r2
}
 8007140:	4618      	mov	r0, r3
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007162:	d204      	bcs.n	800716e <dir_sdi+0x22>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	f003 031f 	and.w	r3, r3, #31
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <dir_sdi+0x26>
		return FR_INT_ERR;
 800716e:	2302      	movs	r3, #2
 8007170:	e063      	b.n	800723a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <dir_sdi+0x46>
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d902      	bls.n	8007192 <dir_sdi+0x46>
		clst = fs->dirbase;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10c      	bne.n	80071b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	8912      	ldrh	r2, [r2, #8]
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d301      	bcc.n	80071a8 <dir_sdi+0x5c>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e048      	b.n	800723a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	61da      	str	r2, [r3, #28]
 80071b0:	e029      	b.n	8007206 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	895b      	ldrh	r3, [r3, #10]
 80071b6:	025b      	lsls	r3, r3, #9
 80071b8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071ba:	e019      	b.n	80071f0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6979      	ldr	r1, [r7, #20]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fcfe 	bl	8006bc2 <get_fat>
 80071c6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ce:	d101      	bne.n	80071d4 <dir_sdi+0x88>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e032      	b.n	800723a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d904      	bls.n	80071e4 <dir_sdi+0x98>
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d301      	bcc.n	80071e8 <dir_sdi+0x9c>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e028      	b.n	800723a <dir_sdi+0xee>
			ofs -= csz;
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d2e1      	bcs.n	80071bc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80071f8:	6979      	ldr	r1, [r7, #20]
 80071fa:	6938      	ldr	r0, [r7, #16]
 80071fc:	f7ff fcc2 	bl	8006b84 <clust2sect>
 8007200:	4602      	mov	r2, r0
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <dir_sdi+0xcc>
 8007214:	2302      	movs	r3, #2
 8007216:	e010      	b.n	800723a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	69da      	ldr	r2, [r3, #28]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	0a5b      	lsrs	r3, r3, #9
 8007220:	441a      	add	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	441a      	add	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b086      	sub	sp, #24
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	3320      	adds	r3, #32
 8007258:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <dir_next+0x28>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007268:	d301      	bcc.n	800726e <dir_next+0x2c>
 800726a:	2304      	movs	r3, #4
 800726c:	e0aa      	b.n	80073c4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007274:	2b00      	cmp	r3, #0
 8007276:	f040 8098 	bne.w	80073aa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10b      	bne.n	80072a4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	8912      	ldrh	r2, [r2, #8]
 8007294:	4293      	cmp	r3, r2
 8007296:	f0c0 8088 	bcc.w	80073aa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	61da      	str	r2, [r3, #28]
 80072a0:	2304      	movs	r3, #4
 80072a2:	e08f      	b.n	80073c4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	0a5b      	lsrs	r3, r3, #9
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	8952      	ldrh	r2, [r2, #10]
 80072ac:	3a01      	subs	r2, #1
 80072ae:	4013      	ands	r3, r2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d17a      	bne.n	80073aa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7ff fc80 	bl	8006bc2 <get_fat>
 80072c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d801      	bhi.n	80072ce <dir_next+0x8c>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e07a      	b.n	80073c4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072d4:	d101      	bne.n	80072da <dir_next+0x98>
 80072d6:	2301      	movs	r3, #1
 80072d8:	e074      	b.n	80073c4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d358      	bcc.n	8007396 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d104      	bne.n	80072f4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	61da      	str	r2, [r3, #28]
 80072f0:	2304      	movs	r3, #4
 80072f2:	e067      	b.n	80073c4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f7ff fe59 	bl	8006fb4 <create_chain>
 8007302:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d101      	bne.n	800730e <dir_next+0xcc>
 800730a:	2307      	movs	r3, #7
 800730c:	e05a      	b.n	80073c4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <dir_next+0xd6>
 8007314:	2302      	movs	r3, #2
 8007316:	e055      	b.n	80073c4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800731e:	d101      	bne.n	8007324 <dir_next+0xe2>
 8007320:	2301      	movs	r3, #1
 8007322:	e04f      	b.n	80073c4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff fb4d 	bl	80069c4 <sync_window>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <dir_next+0xf2>
 8007330:	2301      	movs	r3, #1
 8007332:	e047      	b.n	80073c4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3330      	adds	r3, #48	; 0x30
 8007338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff f977 	bl	8006632 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007344:	2300      	movs	r3, #0
 8007346:	613b      	str	r3, [r7, #16]
 8007348:	6979      	ldr	r1, [r7, #20]
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff fc1a 	bl	8006b84 <clust2sect>
 8007350:	4602      	mov	r2, r0
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	62da      	str	r2, [r3, #44]	; 0x2c
 8007356:	e012      	b.n	800737e <dir_next+0x13c>
						fs->wflag = 1;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff fb30 	bl	80069c4 <sync_window>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <dir_next+0x12c>
 800736a:	2301      	movs	r3, #1
 800736c:	e02a      	b.n	80073c4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	3301      	adds	r3, #1
 8007372:	613b      	str	r3, [r7, #16]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	62da      	str	r2, [r3, #44]	; 0x2c
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	895b      	ldrh	r3, [r3, #10]
 8007382:	461a      	mov	r2, r3
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	4293      	cmp	r3, r2
 8007388:	d3e6      	bcc.n	8007358 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad2      	subs	r2, r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800739c:	6979      	ldr	r1, [r7, #20]
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fbf0 	bl	8006b84 <clust2sect>
 80073a4:	4602      	mov	r2, r0
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073bc:	441a      	add	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80073dc:	2100      	movs	r1, #0
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff feb4 	bl	800714c <dir_sdi>
 80073e4:	4603      	mov	r3, r0
 80073e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073e8:	7dfb      	ldrb	r3, [r7, #23]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d12b      	bne.n	8007446 <dir_alloc+0x7a>
		n = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	4619      	mov	r1, r3
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f7ff fb27 	bl	8006a4c <move_window>
 80073fe:	4603      	mov	r3, r0
 8007400:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d11d      	bne.n	8007444 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1b      	ldr	r3, [r3, #32]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2be5      	cmp	r3, #229	; 0xe5
 8007410:	d004      	beq.n	800741c <dir_alloc+0x50>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d107      	bne.n	800742c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	3301      	adds	r3, #1
 8007420:	613b      	str	r3, [r7, #16]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d102      	bne.n	8007430 <dir_alloc+0x64>
 800742a:	e00c      	b.n	8007446 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007430:	2101      	movs	r1, #1
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff ff05 	bl	8007242 <dir_next>
 8007438:	4603      	mov	r3, r0
 800743a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0d7      	beq.n	80073f2 <dir_alloc+0x26>
 8007442:	e000      	b.n	8007446 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007444:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	2b04      	cmp	r3, #4
 800744a:	d101      	bne.n	8007450 <dir_alloc+0x84>
 800744c:	2307      	movs	r3, #7
 800744e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	331a      	adds	r3, #26
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff f83f 	bl	80064ec <ld_word>
 800746e:	4603      	mov	r3, r0
 8007470:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b03      	cmp	r3, #3
 8007478:	d109      	bne.n	800748e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	3314      	adds	r3, #20
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff f834 	bl	80064ec <ld_word>
 8007484:	4603      	mov	r3, r0
 8007486:	041b      	lsls	r3, r3, #16
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800748e:	68fb      	ldr	r3, [r7, #12]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	331a      	adds	r3, #26
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	b292      	uxth	r2, r2
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff f857 	bl	8006562 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d109      	bne.n	80074d0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f103 0214 	add.w	r2, r3, #20
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4619      	mov	r1, r3
 80074ca:	4610      	mov	r0, r2
 80074cc:	f7ff f849 	bl	8006562 <st_word>
	}
}
 80074d0:	bf00      	nop
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80074e6:	2100      	movs	r1, #0
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff fe2f 	bl	800714c <dir_sdi>
 80074ee:	4603      	mov	r3, r0
 80074f0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <dir_find+0x24>
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
 80074fa:	e03e      	b.n	800757a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	4619      	mov	r1, r3
 8007502:	6938      	ldr	r0, [r7, #16]
 8007504:	f7ff faa2 	bl	8006a4c <move_window>
 8007508:	4603      	mov	r3, r0
 800750a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d12f      	bne.n	8007572 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <dir_find+0x4e>
 8007520:	2304      	movs	r3, #4
 8007522:	75fb      	strb	r3, [r7, #23]
 8007524:	e028      	b.n	8007578 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	330b      	adds	r3, #11
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007532:	b2da      	uxtb	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	330b      	adds	r3, #11
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f003 0308 	and.w	r3, r3, #8
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10a      	bne.n	800755e <dir_find+0x86>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6a18      	ldr	r0, [r3, #32]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3324      	adds	r3, #36	; 0x24
 8007550:	220b      	movs	r2, #11
 8007552:	4619      	mov	r1, r3
 8007554:	f7ff f888 	bl	8006668 <mem_cmp>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00b      	beq.n	8007576 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800755e:	2100      	movs	r1, #0
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7ff fe6e 	bl	8007242 <dir_next>
 8007566:	4603      	mov	r3, r0
 8007568:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0c5      	beq.n	80074fc <dir_find+0x24>
 8007570:	e002      	b.n	8007578 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007572:	bf00      	nop
 8007574:	e000      	b.n	8007578 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007576:	bf00      	nop

	return res;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b084      	sub	sp, #16
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007590:	2101      	movs	r1, #1
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff ff1a 	bl	80073cc <dir_alloc>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d11c      	bne.n	80075dc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	4619      	mov	r1, r3
 80075a8:	68b8      	ldr	r0, [r7, #8]
 80075aa:	f7ff fa4f 	bl	8006a4c <move_window>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d111      	bne.n	80075dc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	2220      	movs	r2, #32
 80075be:	2100      	movs	r1, #0
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff f836 	bl	8006632 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a18      	ldr	r0, [r3, #32]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3324      	adds	r3, #36	; 0x24
 80075ce:	220b      	movs	r2, #11
 80075d0:	4619      	mov	r1, r3
 80075d2:	f7ff f80d 	bl	80065f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2201      	movs	r2, #1
 80075da:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3324      	adds	r3, #36	; 0x24
 80075fc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80075fe:	220b      	movs	r2, #11
 8007600:	2120      	movs	r1, #32
 8007602:	68b8      	ldr	r0, [r7, #8]
 8007604:	f7ff f815 	bl	8006632 <mem_set>
	si = i = 0; ni = 8;
 8007608:	2300      	movs	r3, #0
 800760a:	613b      	str	r3, [r7, #16]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	61fb      	str	r3, [r7, #28]
 8007610:	2308      	movs	r3, #8
 8007612:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	61fa      	str	r2, [r7, #28]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4413      	add	r3, r2
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007622:	7efb      	ldrb	r3, [r7, #27]
 8007624:	2b20      	cmp	r3, #32
 8007626:	d94e      	bls.n	80076c6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007628:	7efb      	ldrb	r3, [r7, #27]
 800762a:	2b2f      	cmp	r3, #47	; 0x2f
 800762c:	d006      	beq.n	800763c <create_name+0x54>
 800762e:	7efb      	ldrb	r3, [r7, #27]
 8007630:	2b5c      	cmp	r3, #92	; 0x5c
 8007632:	d110      	bne.n	8007656 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007634:	e002      	b.n	800763c <create_name+0x54>
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	3301      	adds	r3, #1
 800763a:	61fb      	str	r3, [r7, #28]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b2f      	cmp	r3, #47	; 0x2f
 8007646:	d0f6      	beq.n	8007636 <create_name+0x4e>
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	4413      	add	r3, r2
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b5c      	cmp	r3, #92	; 0x5c
 8007652:	d0f0      	beq.n	8007636 <create_name+0x4e>
			break;
 8007654:	e038      	b.n	80076c8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007656:	7efb      	ldrb	r3, [r7, #27]
 8007658:	2b2e      	cmp	r3, #46	; 0x2e
 800765a:	d003      	beq.n	8007664 <create_name+0x7c>
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	429a      	cmp	r2, r3
 8007662:	d30c      	bcc.n	800767e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b0b      	cmp	r3, #11
 8007668:	d002      	beq.n	8007670 <create_name+0x88>
 800766a:	7efb      	ldrb	r3, [r7, #27]
 800766c:	2b2e      	cmp	r3, #46	; 0x2e
 800766e:	d001      	beq.n	8007674 <create_name+0x8c>
 8007670:	2306      	movs	r3, #6
 8007672:	e044      	b.n	80076fe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007674:	2308      	movs	r3, #8
 8007676:	613b      	str	r3, [r7, #16]
 8007678:	230b      	movs	r3, #11
 800767a:	617b      	str	r3, [r7, #20]
			continue;
 800767c:	e022      	b.n	80076c4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800767e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007682:	2b00      	cmp	r3, #0
 8007684:	da04      	bge.n	8007690 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007686:	7efb      	ldrb	r3, [r7, #27]
 8007688:	3b80      	subs	r3, #128	; 0x80
 800768a:	4a1f      	ldr	r2, [pc, #124]	; (8007708 <create_name+0x120>)
 800768c:	5cd3      	ldrb	r3, [r2, r3]
 800768e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007690:	7efb      	ldrb	r3, [r7, #27]
 8007692:	4619      	mov	r1, r3
 8007694:	481d      	ldr	r0, [pc, #116]	; (800770c <create_name+0x124>)
 8007696:	f7ff f80e 	bl	80066b6 <chk_chr>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <create_name+0xbc>
 80076a0:	2306      	movs	r3, #6
 80076a2:	e02c      	b.n	80076fe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80076a4:	7efb      	ldrb	r3, [r7, #27]
 80076a6:	2b60      	cmp	r3, #96	; 0x60
 80076a8:	d905      	bls.n	80076b6 <create_name+0xce>
 80076aa:	7efb      	ldrb	r3, [r7, #27]
 80076ac:	2b7a      	cmp	r3, #122	; 0x7a
 80076ae:	d802      	bhi.n	80076b6 <create_name+0xce>
 80076b0:	7efb      	ldrb	r3, [r7, #27]
 80076b2:	3b20      	subs	r3, #32
 80076b4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	613a      	str	r2, [r7, #16]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	4413      	add	r3, r2
 80076c0:	7efa      	ldrb	r2, [r7, #27]
 80076c2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80076c4:	e7a6      	b.n	8007614 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80076c6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	441a      	add	r2, r3
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <create_name+0xf4>
 80076d8:	2306      	movs	r3, #6
 80076da:	e010      	b.n	80076fe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2be5      	cmp	r3, #229	; 0xe5
 80076e2:	d102      	bne.n	80076ea <create_name+0x102>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2205      	movs	r2, #5
 80076e8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80076ea:	7efb      	ldrb	r3, [r7, #27]
 80076ec:	2b20      	cmp	r3, #32
 80076ee:	d801      	bhi.n	80076f4 <create_name+0x10c>
 80076f0:	2204      	movs	r2, #4
 80076f2:	e000      	b.n	80076f6 <create_name+0x10e>
 80076f4:	2200      	movs	r2, #0
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	330b      	adds	r3, #11
 80076fa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80076fc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3720      	adds	r7, #32
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	08009f6c 	.word	0x08009f6c
 800770c:	08009f08 	.word	0x08009f08

08007710 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007724:	e002      	b.n	800772c <follow_path+0x1c>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	603b      	str	r3, [r7, #0]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b2f      	cmp	r3, #47	; 0x2f
 8007732:	d0f8      	beq.n	8007726 <follow_path+0x16>
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b5c      	cmp	r3, #92	; 0x5c
 800773a:	d0f4      	beq.n	8007726 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	2200      	movs	r2, #0
 8007740:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b1f      	cmp	r3, #31
 8007748:	d80a      	bhi.n	8007760 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2280      	movs	r2, #128	; 0x80
 800774e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007752:	2100      	movs	r1, #0
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff fcf9 	bl	800714c <dir_sdi>
 800775a:	4603      	mov	r3, r0
 800775c:	75fb      	strb	r3, [r7, #23]
 800775e:	e043      	b.n	80077e8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007760:	463b      	mov	r3, r7
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff ff3f 	bl	80075e8 <create_name>
 800776a:	4603      	mov	r3, r0
 800776c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d134      	bne.n	80077de <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff feaf 	bl	80074d8 <dir_find>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007784:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007786:	7dfb      	ldrb	r3, [r7, #23]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	2b04      	cmp	r3, #4
 8007790:	d127      	bne.n	80077e2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007792:	7afb      	ldrb	r3, [r7, #11]
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d122      	bne.n	80077e2 <follow_path+0xd2>
 800779c:	2305      	movs	r3, #5
 800779e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80077a0:	e01f      	b.n	80077e2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077a2:	7afb      	ldrb	r3, [r7, #11]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d11c      	bne.n	80077e6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	799b      	ldrb	r3, [r3, #6]
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <follow_path+0xae>
				res = FR_NO_PATH; break;
 80077b8:	2305      	movs	r3, #5
 80077ba:	75fb      	strb	r3, [r7, #23]
 80077bc:	e014      	b.n	80077e8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077cc:	4413      	add	r3, r2
 80077ce:	4619      	mov	r1, r3
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff fe42 	bl	800745a <ld_clust>
 80077d6:	4602      	mov	r2, r0
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80077dc:	e7c0      	b.n	8007760 <follow_path+0x50>
			if (res != FR_OK) break;
 80077de:	bf00      	nop
 80077e0:	e002      	b.n	80077e8 <follow_path+0xd8>
				break;
 80077e2:	bf00      	nop
 80077e4:	e000      	b.n	80077e8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077e6:	bf00      	nop
			}
		}
	}

	return res;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b087      	sub	sp, #28
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80077fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077fe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d031      	beq.n	800786c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	e002      	b.n	8007816 <get_ldnumber+0x24>
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	3301      	adds	r3, #1
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b20      	cmp	r3, #32
 800781c:	d903      	bls.n	8007826 <get_ldnumber+0x34>
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	2b3a      	cmp	r3, #58	; 0x3a
 8007824:	d1f4      	bne.n	8007810 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2b3a      	cmp	r3, #58	; 0x3a
 800782c:	d11c      	bne.n	8007868 <get_ldnumber+0x76>
			tp = *path;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	60fa      	str	r2, [r7, #12]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	3b30      	subs	r3, #48	; 0x30
 800783e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b09      	cmp	r3, #9
 8007844:	d80e      	bhi.n	8007864 <get_ldnumber+0x72>
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	429a      	cmp	r2, r3
 800784c:	d10a      	bne.n	8007864 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d107      	bne.n	8007864 <get_ldnumber+0x72>
					vol = (int)i;
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	3301      	adds	r3, #1
 800785c:	617b      	str	r3, [r7, #20]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	e002      	b.n	800786e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007868:	2300      	movs	r3, #0
 800786a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800786c:	693b      	ldr	r3, [r7, #16]
}
 800786e:	4618      	mov	r0, r3
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
	...

0800787c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	70da      	strb	r2, [r3, #3]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007892:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff f8d8 	bl	8006a4c <move_window>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <check_fs+0x2a>
 80078a2:	2304      	movs	r3, #4
 80078a4:	e038      	b.n	8007918 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3330      	adds	r3, #48	; 0x30
 80078aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fe1c 	bl	80064ec <ld_word>
 80078b4:	4603      	mov	r3, r0
 80078b6:	461a      	mov	r2, r3
 80078b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80078bc:	429a      	cmp	r2, r3
 80078be:	d001      	beq.n	80078c4 <check_fs+0x48>
 80078c0:	2303      	movs	r3, #3
 80078c2:	e029      	b.n	8007918 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078ca:	2be9      	cmp	r3, #233	; 0xe9
 80078cc:	d009      	beq.n	80078e2 <check_fs+0x66>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80078d4:	2beb      	cmp	r3, #235	; 0xeb
 80078d6:	d11e      	bne.n	8007916 <check_fs+0x9a>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80078de:	2b90      	cmp	r3, #144	; 0x90
 80078e0:	d119      	bne.n	8007916 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	3330      	adds	r3, #48	; 0x30
 80078e6:	3336      	adds	r3, #54	; 0x36
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fe17 	bl	800651c <ld_dword>
 80078ee:	4603      	mov	r3, r0
 80078f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078f4:	4a0a      	ldr	r2, [pc, #40]	; (8007920 <check_fs+0xa4>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d101      	bne.n	80078fe <check_fs+0x82>
 80078fa:	2300      	movs	r3, #0
 80078fc:	e00c      	b.n	8007918 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3330      	adds	r3, #48	; 0x30
 8007902:	3352      	adds	r3, #82	; 0x52
 8007904:	4618      	mov	r0, r3
 8007906:	f7fe fe09 	bl	800651c <ld_dword>
 800790a:	4603      	mov	r3, r0
 800790c:	4a05      	ldr	r2, [pc, #20]	; (8007924 <check_fs+0xa8>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d101      	bne.n	8007916 <check_fs+0x9a>
 8007912:	2300      	movs	r3, #0
 8007914:	e000      	b.n	8007918 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007916:	2302      	movs	r3, #2
}
 8007918:	4618      	mov	r0, r3
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	00544146 	.word	0x00544146
 8007924:	33544146 	.word	0x33544146

08007928 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b096      	sub	sp, #88	; 0x58
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2200      	movs	r2, #0
 800793a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff ff58 	bl	80077f2 <get_ldnumber>
 8007942:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007946:	2b00      	cmp	r3, #0
 8007948:	da01      	bge.n	800794e <find_volume+0x26>
 800794a:	230b      	movs	r3, #11
 800794c:	e22d      	b.n	8007daa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800794e:	4aa1      	ldr	r2, [pc, #644]	; (8007bd4 <find_volume+0x2ac>)
 8007950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007956:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <find_volume+0x3a>
 800795e:	230c      	movs	r3, #12
 8007960:	e223      	b.n	8007daa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007966:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	f023 0301 	bic.w	r3, r3, #1
 800796e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d01a      	beq.n	80079ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	785b      	ldrb	r3, [r3, #1]
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe fd17 	bl	80063b0 <disk_status>
 8007982:	4603      	mov	r3, r0
 8007984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10c      	bne.n	80079ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d007      	beq.n	80079aa <find_volume+0x82>
 800799a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800799e:	f003 0304 	and.w	r3, r3, #4
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80079a6:	230a      	movs	r3, #10
 80079a8:	e1ff      	b.n	8007daa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80079aa:	2300      	movs	r3, #0
 80079ac:	e1fd      	b.n	8007daa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80079ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80079b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80079bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7fe fd0f 	bl	80063e4 <disk_initialize>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80079cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079d0:	f003 0301 	and.w	r3, r3, #1
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80079d8:	2303      	movs	r3, #3
 80079da:	e1e6      	b.n	8007daa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d007      	beq.n	80079f2 <find_volume+0xca>
 80079e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079e6:	f003 0304 	and.w	r3, r3, #4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80079ee:	230a      	movs	r3, #10
 80079f0:	e1db      	b.n	8007daa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80079f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80079f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079fa:	f7ff ff3f 	bl	800787c <check_fs>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d149      	bne.n	8007aa0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a10:	e01e      	b.n	8007a50 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007a20:	4413      	add	r3, r2
 8007a22:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a26:	3304      	adds	r3, #4
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d006      	beq.n	8007a3c <find_volume+0x114>
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	3308      	adds	r3, #8
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fd72 	bl	800651c <ld_dword>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	e000      	b.n	8007a3e <find_volume+0x116>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	3358      	adds	r3, #88	; 0x58
 8007a44:	443b      	add	r3, r7
 8007a46:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d9dd      	bls.n	8007a12 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007a56:	2300      	movs	r3, #0
 8007a58:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <find_volume+0x13e>
 8007a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a62:	3b01      	subs	r3, #1
 8007a64:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007a66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	3358      	adds	r3, #88	; 0x58
 8007a6c:	443b      	add	r3, r7
 8007a6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007a72:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d005      	beq.n	8007a86 <find_volume+0x15e>
 8007a7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a7e:	f7ff fefd 	bl	800787c <check_fs>
 8007a82:	4603      	mov	r3, r0
 8007a84:	e000      	b.n	8007a88 <find_volume+0x160>
 8007a86:	2303      	movs	r3, #3
 8007a88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d905      	bls.n	8007aa0 <find_volume+0x178>
 8007a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a96:	3301      	adds	r3, #1
 8007a98:	643b      	str	r3, [r7, #64]	; 0x40
 8007a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d9e2      	bls.n	8007a66 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d101      	bne.n	8007aac <find_volume+0x184>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e17e      	b.n	8007daa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007aac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d901      	bls.n	8007ab8 <find_volume+0x190>
 8007ab4:	230d      	movs	r3, #13
 8007ab6:	e178      	b.n	8007daa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aba:	3330      	adds	r3, #48	; 0x30
 8007abc:	330b      	adds	r3, #11
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fd14 	bl	80064ec <ld_word>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aca:	d001      	beq.n	8007ad0 <find_volume+0x1a8>
 8007acc:	230d      	movs	r3, #13
 8007ace:	e16c      	b.n	8007daa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	3330      	adds	r3, #48	; 0x30
 8007ad4:	3316      	adds	r3, #22
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe fd08 	bl	80064ec <ld_word>
 8007adc:	4603      	mov	r3, r0
 8007ade:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d106      	bne.n	8007af4 <find_volume+0x1cc>
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	3330      	adds	r3, #48	; 0x30
 8007aea:	3324      	adds	r3, #36	; 0x24
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe fd15 	bl	800651c <ld_dword>
 8007af2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007af8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b06:	789b      	ldrb	r3, [r3, #2]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d005      	beq.n	8007b18 <find_volume+0x1f0>
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	789b      	ldrb	r3, [r3, #2]
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d001      	beq.n	8007b18 <find_volume+0x1f0>
 8007b14:	230d      	movs	r3, #13
 8007b16:	e148      	b.n	8007daa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	789b      	ldrb	r3, [r3, #2]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b20:	fb02 f303 	mul.w	r3, r2, r3
 8007b24:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b34:	895b      	ldrh	r3, [r3, #10]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d008      	beq.n	8007b4c <find_volume+0x224>
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	895b      	ldrh	r3, [r3, #10]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b42:	895b      	ldrh	r3, [r3, #10]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	4013      	ands	r3, r2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <find_volume+0x228>
 8007b4c:	230d      	movs	r3, #13
 8007b4e:	e12c      	b.n	8007daa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	3330      	adds	r3, #48	; 0x30
 8007b54:	3311      	adds	r3, #17
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fcc8 	bl	80064ec <ld_word>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b66:	891b      	ldrh	r3, [r3, #8]
 8007b68:	f003 030f 	and.w	r3, r3, #15
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <find_volume+0x24e>
 8007b72:	230d      	movs	r3, #13
 8007b74:	e119      	b.n	8007daa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b78:	3330      	adds	r3, #48	; 0x30
 8007b7a:	3313      	adds	r3, #19
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe fcb5 	bl	80064ec <ld_word>
 8007b82:	4603      	mov	r3, r0
 8007b84:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <find_volume+0x272>
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	3330      	adds	r3, #48	; 0x30
 8007b90:	3320      	adds	r3, #32
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fe fcc2 	bl	800651c <ld_dword>
 8007b98:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	3330      	adds	r3, #48	; 0x30
 8007b9e:	330e      	adds	r3, #14
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe fca3 	bl	80064ec <ld_word>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007baa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <find_volume+0x28c>
 8007bb0:	230d      	movs	r3, #13
 8007bb2:	e0fa      	b.n	8007daa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007bb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb8:	4413      	add	r3, r2
 8007bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bbc:	8912      	ldrh	r2, [r2, #8]
 8007bbe:	0912      	lsrs	r2, r2, #4
 8007bc0:	b292      	uxth	r2, r2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d204      	bcs.n	8007bd8 <find_volume+0x2b0>
 8007bce:	230d      	movs	r3, #13
 8007bd0:	e0eb      	b.n	8007daa <find_volume+0x482>
 8007bd2:	bf00      	nop
 8007bd4:	20015ce4 	.word	0x20015ce4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007be0:	8952      	ldrh	r2, [r2, #10]
 8007be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <find_volume+0x2ca>
 8007bee:	230d      	movs	r3, #13
 8007bf0:	e0db      	b.n	8007daa <find_volume+0x482>
		fmt = FS_FAT32;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d802      	bhi.n	8007c08 <find_volume+0x2e0>
 8007c02:	2302      	movs	r3, #2
 8007c04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d802      	bhi.n	8007c18 <find_volume+0x2f0>
 8007c12:	2301      	movs	r3, #1
 8007c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1a:	1c9a      	adds	r2, r3, #2
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c24:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007c26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c2a:	441a      	add	r2, r3
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007c30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	441a      	add	r2, r3
 8007c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c38:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007c3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d11e      	bne.n	8007c80 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	3330      	adds	r3, #48	; 0x30
 8007c46:	332a      	adds	r3, #42	; 0x2a
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fc4f 	bl	80064ec <ld_word>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <find_volume+0x330>
 8007c54:	230d      	movs	r3, #13
 8007c56:	e0a8      	b.n	8007daa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	891b      	ldrh	r3, [r3, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <find_volume+0x33c>
 8007c60:	230d      	movs	r3, #13
 8007c62:	e0a2      	b.n	8007daa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	3330      	adds	r3, #48	; 0x30
 8007c68:	332c      	adds	r3, #44	; 0x2c
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7fe fc56 	bl	800651c <ld_dword>
 8007c70:	4602      	mov	r2, r0
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c7e:	e01f      	b.n	8007cc0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	891b      	ldrh	r3, [r3, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <find_volume+0x364>
 8007c88:	230d      	movs	r3, #13
 8007c8a:	e08e      	b.n	8007daa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	6a1a      	ldr	r2, [r3, #32]
 8007c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c92:	441a      	add	r2, r3
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d103      	bne.n	8007ca8 <find_volume+0x380>
 8007ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	e00a      	b.n	8007cbe <find_volume+0x396>
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	695a      	ldr	r2, [r3, #20]
 8007cac:	4613      	mov	r3, r2
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	4413      	add	r3, r2
 8007cb2:	085a      	lsrs	r2, r3, #1
 8007cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007cbe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc2:	699a      	ldr	r2, [r3, #24]
 8007cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007cca:	0a5b      	lsrs	r3, r3, #9
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d201      	bcs.n	8007cd4 <find_volume+0x3ac>
 8007cd0:	230d      	movs	r3, #13
 8007cd2:	e06a      	b.n	8007daa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cda:	611a      	str	r2, [r3, #16]
 8007cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	2280      	movs	r2, #128	; 0x80
 8007ce8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007cea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d149      	bne.n	8007d86 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	3330      	adds	r3, #48	; 0x30
 8007cf6:	3330      	adds	r3, #48	; 0x30
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe fbf7 	bl	80064ec <ld_word>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d140      	bne.n	8007d86 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d06:	3301      	adds	r3, #1
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d0c:	f7fe fe9e 	bl	8006a4c <move_window>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d137      	bne.n	8007d86 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	2200      	movs	r2, #0
 8007d1a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	3330      	adds	r3, #48	; 0x30
 8007d20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fbe1 	bl	80064ec <ld_word>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d127      	bne.n	8007d86 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	3330      	adds	r3, #48	; 0x30
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fbee 	bl	800651c <ld_dword>
 8007d40:	4603      	mov	r3, r0
 8007d42:	4a1c      	ldr	r2, [pc, #112]	; (8007db4 <find_volume+0x48c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d11e      	bne.n	8007d86 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	3330      	adds	r3, #48	; 0x30
 8007d4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fbe3 	bl	800651c <ld_dword>
 8007d56:	4603      	mov	r3, r0
 8007d58:	4a17      	ldr	r2, [pc, #92]	; (8007db8 <find_volume+0x490>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d113      	bne.n	8007d86 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d60:	3330      	adds	r3, #48	; 0x30
 8007d62:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fbd8 	bl	800651c <ld_dword>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d70:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d74:	3330      	adds	r3, #48	; 0x30
 8007d76:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe fbce 	bl	800651c <ld_dword>
 8007d80:	4602      	mov	r2, r0
 8007d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d84:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007d8c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007d8e:	4b0b      	ldr	r3, [pc, #44]	; (8007dbc <find_volume+0x494>)
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	3301      	adds	r3, #1
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <find_volume+0x494>)
 8007d98:	801a      	strh	r2, [r3, #0]
 8007d9a:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <find_volume+0x494>)
 8007d9c:	881a      	ldrh	r2, [r3, #0]
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007da2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007da4:	f7fe fdea 	bl	800697c <clear_lock>
#endif
	return FR_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3758      	adds	r7, #88	; 0x58
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	41615252 	.word	0x41615252
 8007db8:	61417272 	.word	0x61417272
 8007dbc:	20015ce8 	.word	0x20015ce8

08007dc0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007dca:	2309      	movs	r3, #9
 8007dcc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d01c      	beq.n	8007e0e <validate+0x4e>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d018      	beq.n	8007e0e <validate+0x4e>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d013      	beq.n	8007e0e <validate+0x4e>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	889a      	ldrh	r2, [r3, #4]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	88db      	ldrh	r3, [r3, #6]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d10c      	bne.n	8007e0e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	785b      	ldrb	r3, [r3, #1]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fad8 	bl	80063b0 <disk_status>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <validate+0x4e>
			res = FR_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d102      	bne.n	8007e1a <validate+0x5a>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	e000      	b.n	8007e1c <validate+0x5c>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	6013      	str	r3, [r2, #0]
	return res;
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007e3e:	f107 0310 	add.w	r3, r7, #16
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff fcd5 	bl	80077f2 <get_ldnumber>
 8007e48:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	da01      	bge.n	8007e54 <f_mount+0x28>
 8007e50:	230b      	movs	r3, #11
 8007e52:	e02b      	b.n	8007eac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007e54:	4a17      	ldr	r2, [pc, #92]	; (8007eb4 <f_mount+0x88>)
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e5c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007e64:	69b8      	ldr	r0, [r7, #24]
 8007e66:	f7fe fd89 	bl	800697c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	490d      	ldr	r1, [pc, #52]	; (8007eb4 <f_mount+0x88>)
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d002      	beq.n	8007e92 <f_mount+0x66>
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d001      	beq.n	8007e96 <f_mount+0x6a>
 8007e92:	2300      	movs	r3, #0
 8007e94:	e00a      	b.n	8007eac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007e96:	f107 010c 	add.w	r1, r7, #12
 8007e9a:	f107 0308 	add.w	r3, r7, #8
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fd41 	bl	8007928 <find_volume>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3720      	adds	r7, #32
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20015ce4 	.word	0x20015ce4

08007eb8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b098      	sub	sp, #96	; 0x60
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <f_open+0x18>
 8007ecc:	2309      	movs	r3, #9
 8007ece:	e1ad      	b.n	800822c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ed6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007ed8:	79fa      	ldrb	r2, [r7, #7]
 8007eda:	f107 0110 	add.w	r1, r7, #16
 8007ede:	f107 0308 	add.w	r3, r7, #8
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff fd20 	bl	8007928 <find_volume>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007eee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f040 8191 	bne.w	800821a <f_open+0x362>
		dj.obj.fs = fs;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	f107 0314 	add.w	r3, r7, #20
 8007f02:	4611      	mov	r1, r2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7ff fc03 	bl	8007710 <follow_path>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007f10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11a      	bne.n	8007f4e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007f18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007f1c:	b25b      	sxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da03      	bge.n	8007f2a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007f22:	2306      	movs	r3, #6
 8007f24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007f28:	e011      	b.n	8007f4e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007f2a:	79fb      	ldrb	r3, [r7, #7]
 8007f2c:	f023 0301 	bic.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bf14      	ite	ne
 8007f34:	2301      	movne	r3, #1
 8007f36:	2300      	moveq	r3, #0
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	4611      	mov	r1, r2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fe fbd2 	bl	80066ec <chk_lock>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	f003 031c 	and.w	r3, r3, #28
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d07f      	beq.n	8008058 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007f58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d017      	beq.n	8007f90 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007f60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d10e      	bne.n	8007f86 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007f68:	f7fe fc1c 	bl	80067a4 <enq_lock>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d006      	beq.n	8007f80 <f_open+0xc8>
 8007f72:	f107 0314 	add.w	r3, r7, #20
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fb03 	bl	8007582 <dir_register>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	e000      	b.n	8007f82 <f_open+0xca>
 8007f80:	2312      	movs	r3, #18
 8007f82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	f043 0308 	orr.w	r3, r3, #8
 8007f8c:	71fb      	strb	r3, [r7, #7]
 8007f8e:	e010      	b.n	8007fb2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007f90:	7ebb      	ldrb	r3, [r7, #26]
 8007f92:	f003 0311 	and.w	r3, r3, #17
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <f_open+0xea>
					res = FR_DENIED;
 8007f9a:	2307      	movs	r3, #7
 8007f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007fa0:	e007      	b.n	8007fb2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <f_open+0xfa>
 8007fac:	2308      	movs	r3, #8
 8007fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d168      	bne.n	800808c <f_open+0x1d4>
 8007fba:	79fb      	ldrb	r3, [r7, #7]
 8007fbc:	f003 0308 	and.w	r3, r3, #8
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d063      	beq.n	800808c <f_open+0x1d4>
				dw = GET_FATTIME();
 8007fc4:	f7fd fcb6 	bl	8005934 <get_fattime>
 8007fc8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fcc:	330e      	adds	r3, #14
 8007fce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe fae1 	bl	8006598 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd8:	3316      	adds	r3, #22
 8007fda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fadb 	bl	8006598 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe4:	330b      	adds	r3, #11
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fee:	4611      	mov	r1, r2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7ff fa32 	bl	800745a <ld_clust>
 8007ff6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff fa4a 	bl	8007498 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008006:	331c      	adds	r3, #28
 8008008:	2100      	movs	r1, #0
 800800a:	4618      	mov	r0, r3
 800800c:	f7fe fac4 	bl	8006598 <st_dword>
					fs->wflag = 1;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2201      	movs	r2, #1
 8008014:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008018:	2b00      	cmp	r3, #0
 800801a:	d037      	beq.n	800808c <f_open+0x1d4>
						dw = fs->winsect;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008022:	f107 0314 	add.w	r3, r7, #20
 8008026:	2200      	movs	r2, #0
 8008028:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe ff5d 	bl	8006eea <remove_chain>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008036:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800803a:	2b00      	cmp	r3, #0
 800803c:	d126      	bne.n	800808c <f_open+0x1d4>
							res = move_window(fs, dw);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fd02 	bl	8006a4c <move_window>
 8008048:	4603      	mov	r3, r0
 800804a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008052:	3a01      	subs	r2, #1
 8008054:	60da      	str	r2, [r3, #12]
 8008056:	e019      	b.n	800808c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008058:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800805c:	2b00      	cmp	r3, #0
 800805e:	d115      	bne.n	800808c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008060:	7ebb      	ldrb	r3, [r7, #26]
 8008062:	f003 0310 	and.w	r3, r3, #16
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <f_open+0x1ba>
					res = FR_NO_FILE;
 800806a:	2304      	movs	r3, #4
 800806c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008070:	e00c      	b.n	800808c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d007      	beq.n	800808c <f_open+0x1d4>
 800807c:	7ebb      	ldrb	r3, [r7, #26]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <f_open+0x1d4>
						res = FR_DENIED;
 8008086:	2307      	movs	r3, #7
 8008088:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800808c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008090:	2b00      	cmp	r3, #0
 8008092:	d128      	bne.n	80080e6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	f003 0308 	and.w	r3, r3, #8
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80080ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	f023 0301 	bic.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	bf14      	ite	ne
 80080be:	2301      	movne	r3, #1
 80080c0:	2300      	moveq	r3, #0
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	461a      	mov	r2, r3
 80080c6:	f107 0314 	add.w	r3, r7, #20
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fe fb8b 	bl	80067e8 <inc_lock>
 80080d2:	4602      	mov	r2, r0
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d102      	bne.n	80080e6 <f_open+0x22e>
 80080e0:	2302      	movs	r3, #2
 80080e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80080e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f040 8095 	bne.w	800821a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff f9af 	bl	800745a <ld_clust>
 80080fc:	4602      	mov	r2, r0
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008104:	331c      	adds	r3, #28
 8008106:	4618      	mov	r0, r3
 8008108:	f7fe fa08 	bl	800651c <ld_dword>
 800810c:	4602      	mov	r2, r0
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	88da      	ldrh	r2, [r3, #6]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	79fa      	ldrb	r2, [r7, #7]
 800812a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3330      	adds	r3, #48	; 0x30
 8008142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008146:	2100      	movs	r1, #0
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fa72 	bl	8006632 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	f003 0320 	and.w	r3, r3, #32
 8008154:	2b00      	cmp	r3, #0
 8008156:	d060      	beq.n	800821a <f_open+0x362>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d05c      	beq.n	800821a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	895b      	ldrh	r3, [r3, #10]
 800816c:	025b      	lsls	r3, r3, #9
 800816e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	657b      	str	r3, [r7, #84]	; 0x54
 800817c:	e016      	b.n	80081ac <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008182:	4618      	mov	r0, r3
 8008184:	f7fe fd1d 	bl	8006bc2 <get_fat>
 8008188:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800818a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800818c:	2b01      	cmp	r3, #1
 800818e:	d802      	bhi.n	8008196 <f_open+0x2de>
 8008190:	2302      	movs	r3, #2
 8008192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800819c:	d102      	bne.n	80081a4 <f_open+0x2ec>
 800819e:	2301      	movs	r3, #1
 80081a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	657b      	str	r3, [r7, #84]	; 0x54
 80081ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d103      	bne.n	80081bc <f_open+0x304>
 80081b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d8e0      	bhi.n	800817e <f_open+0x2c6>
				}
				fp->clust = clst;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80081c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d127      	bne.n	800821a <f_open+0x362>
 80081ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d022      	beq.n	800821a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fe fcd3 	bl	8006b84 <clust2sect>
 80081de:	6478      	str	r0, [r7, #68]	; 0x44
 80081e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d103      	bne.n	80081ee <f_open+0x336>
						res = FR_INT_ERR;
 80081e6:	2302      	movs	r3, #2
 80081e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80081ec:	e015      	b.n	800821a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80081ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081f0:	0a5a      	lsrs	r2, r3, #9
 80081f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f4:	441a      	add	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	7858      	ldrb	r0, [r3, #1]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6a1a      	ldr	r2, [r3, #32]
 8008208:	2301      	movs	r3, #1
 800820a:	f7fe f911 	bl	8006430 <disk_read>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <f_open+0x362>
 8008214:	2301      	movs	r3, #1
 8008216:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800821a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <f_open+0x370>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800822c:	4618      	mov	r0, r3
 800822e:	3760      	adds	r7, #96	; 0x60
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08e      	sub	sp, #56	; 0x38
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f107 0214 	add.w	r2, r7, #20
 8008252:	4611      	mov	r1, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f7ff fdb3 	bl	8007dc0 <validate>
 800825a:	4603      	mov	r3, r0
 800825c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008260:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008264:	2b00      	cmp	r3, #0
 8008266:	d107      	bne.n	8008278 <f_read+0x44>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	7d5b      	ldrb	r3, [r3, #21]
 800826c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008270:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <f_read+0x4a>
 8008278:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800827c:	e115      	b.n	80084aa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	7d1b      	ldrb	r3, [r3, #20]
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <f_read+0x5a>
 800828a:	2307      	movs	r3, #7
 800828c:	e10d      	b.n	80084aa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	429a      	cmp	r2, r3
 80082a0:	f240 80fe 	bls.w	80084a0 <f_read+0x26c>
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80082a8:	e0fa      	b.n	80084a0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f040 80c6 	bne.w	8008444 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	0a5b      	lsrs	r3, r3, #9
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	8952      	ldrh	r2, [r2, #10]
 80082c2:	3a01      	subs	r2, #1
 80082c4:	4013      	ands	r3, r2
 80082c6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d12f      	bne.n	800832e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d103      	bne.n	80082de <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	633b      	str	r3, [r7, #48]	; 0x30
 80082dc:	e013      	b.n	8008306 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d007      	beq.n	80082f6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	4619      	mov	r1, r3
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7fe fef9 	bl	80070e4 <clmt_clust>
 80082f2:	6338      	str	r0, [r7, #48]	; 0x30
 80082f4:	e007      	b.n	8008306 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	69db      	ldr	r3, [r3, #28]
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f7fe fc5f 	bl	8006bc2 <get_fat>
 8008304:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008308:	2b01      	cmp	r3, #1
 800830a:	d804      	bhi.n	8008316 <f_read+0xe2>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2202      	movs	r2, #2
 8008310:	755a      	strb	r2, [r3, #21]
 8008312:	2302      	movs	r3, #2
 8008314:	e0c9      	b.n	80084aa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800831c:	d104      	bne.n	8008328 <f_read+0xf4>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	755a      	strb	r2, [r3, #21]
 8008324:	2301      	movs	r3, #1
 8008326:	e0c0      	b.n	80084aa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	f7fe fc24 	bl	8006b84 <clust2sect>
 800833c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <f_read+0x11a>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2202      	movs	r2, #2
 8008348:	755a      	strb	r2, [r3, #21]
 800834a:	2302      	movs	r3, #2
 800834c:	e0ad      	b.n	80084aa <f_read+0x276>
			sect += csect;
 800834e:	69ba      	ldr	r2, [r7, #24]
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	4413      	add	r3, r2
 8008354:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	0a5b      	lsrs	r3, r3, #9
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800835c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835e:	2b00      	cmp	r3, #0
 8008360:	d039      	beq.n	80083d6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008362:	69fa      	ldr	r2, [r7, #28]
 8008364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008366:	4413      	add	r3, r2
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	8952      	ldrh	r2, [r2, #10]
 800836c:	4293      	cmp	r3, r2
 800836e:	d905      	bls.n	800837c <f_read+0x148>
					cc = fs->csize - csect;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	895b      	ldrh	r3, [r3, #10]
 8008374:	461a      	mov	r2, r3
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	7858      	ldrb	r0, [r3, #1]
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	69ba      	ldr	r2, [r7, #24]
 8008384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008386:	f7fe f853 	bl	8006430 <disk_read>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <f_read+0x166>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2201      	movs	r2, #1
 8008394:	755a      	strb	r2, [r3, #21]
 8008396:	2301      	movs	r3, #1
 8008398:	e087      	b.n	80084aa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	7d1b      	ldrb	r3, [r3, #20]
 800839e:	b25b      	sxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	da14      	bge.n	80083ce <f_read+0x19a>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a1a      	ldr	r2, [r3, #32]
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d90d      	bls.n	80083ce <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6a1a      	ldr	r2, [r3, #32]
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	025b      	lsls	r3, r3, #9
 80083bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083be:	18d0      	adds	r0, r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3330      	adds	r3, #48	; 0x30
 80083c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7fe f911 	bl	80065f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	025b      	lsls	r3, r3, #9
 80083d2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80083d4:	e050      	b.n	8008478 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d02e      	beq.n	800843e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	7d1b      	ldrb	r3, [r3, #20]
 80083e4:	b25b      	sxtb	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	da18      	bge.n	800841c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	7858      	ldrb	r0, [r3, #1]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a1a      	ldr	r2, [r3, #32]
 80083f8:	2301      	movs	r3, #1
 80083fa:	f7fe f839 	bl	8006470 <disk_write>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d004      	beq.n	800840e <f_read+0x1da>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2201      	movs	r2, #1
 8008408:	755a      	strb	r2, [r3, #21]
 800840a:	2301      	movs	r3, #1
 800840c:	e04d      	b.n	80084aa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	7d1b      	ldrb	r3, [r3, #20]
 8008412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008416:	b2da      	uxtb	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	7858      	ldrb	r0, [r3, #1]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008426:	2301      	movs	r3, #1
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	f7fe f801 	bl	8006430 <disk_read>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d004      	beq.n	800843e <f_read+0x20a>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	755a      	strb	r2, [r3, #21]
 800843a:	2301      	movs	r3, #1
 800843c:	e035      	b.n	80084aa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008450:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	429a      	cmp	r2, r3
 8008458:	d901      	bls.n	800845e <f_read+0x22a>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800846c:	4413      	add	r3, r2
 800846e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008470:	4619      	mov	r1, r3
 8008472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008474:	f7fe f8bc 	bl	80065f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	4413      	add	r3, r2
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008486:	441a      	add	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	619a      	str	r2, [r3, #24]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008492:	441a      	add	r2, r3
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	601a      	str	r2, [r3, #0]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f47f af01 	bne.w	80082aa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3738      	adds	r7, #56	; 0x38
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b08c      	sub	sp, #48	; 0x30
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
 80084be:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2200      	movs	r2, #0
 80084c8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f107 0210 	add.w	r2, r7, #16
 80084d0:	4611      	mov	r1, r2
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7ff fc74 	bl	8007dc0 <validate>
 80084d8:	4603      	mov	r3, r0
 80084da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80084de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d107      	bne.n	80084f6 <f_write+0x44>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	7d5b      	ldrb	r3, [r3, #21]
 80084ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80084ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <f_write+0x4a>
 80084f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80084fa:	e14b      	b.n	8008794 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	7d1b      	ldrb	r3, [r3, #20]
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <f_write+0x5a>
 8008508:	2307      	movs	r3, #7
 800850a:	e143      	b.n	8008794 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	441a      	add	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	429a      	cmp	r2, r3
 800851a:	f080 812d 	bcs.w	8008778 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	43db      	mvns	r3, r3
 8008524:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008526:	e127      	b.n	8008778 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008530:	2b00      	cmp	r3, #0
 8008532:	f040 80e3 	bne.w	80086fc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	0a5b      	lsrs	r3, r3, #9
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	8952      	ldrh	r2, [r2, #10]
 8008540:	3a01      	subs	r2, #1
 8008542:	4013      	ands	r3, r2
 8008544:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d143      	bne.n	80085d4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d10c      	bne.n	800856e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	2b00      	cmp	r3, #0
 800855e:	d11a      	bne.n	8008596 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2100      	movs	r1, #0
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fd25 	bl	8006fb4 <create_chain>
 800856a:	62b8      	str	r0, [r7, #40]	; 0x28
 800856c:	e013      	b.n	8008596 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	4619      	mov	r1, r3
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7fe fdb1 	bl	80070e4 <clmt_clust>
 8008582:	62b8      	str	r0, [r7, #40]	; 0x28
 8008584:	e007      	b.n	8008596 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	4619      	mov	r1, r3
 800858e:	4610      	mov	r0, r2
 8008590:	f7fe fd10 	bl	8006fb4 <create_chain>
 8008594:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80f2 	beq.w	8008782 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d104      	bne.n	80085ae <f_write+0xfc>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2202      	movs	r2, #2
 80085a8:	755a      	strb	r2, [r3, #21]
 80085aa:	2302      	movs	r3, #2
 80085ac:	e0f2      	b.n	8008794 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085b4:	d104      	bne.n	80085c0 <f_write+0x10e>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	755a      	strb	r2, [r3, #21]
 80085bc:	2301      	movs	r3, #1
 80085be:	e0e9      	b.n	8008794 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085c4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <f_write+0x122>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085d2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	7d1b      	ldrb	r3, [r3, #20]
 80085d8:	b25b      	sxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	da18      	bge.n	8008610 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	7858      	ldrb	r0, [r3, #1]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a1a      	ldr	r2, [r3, #32]
 80085ec:	2301      	movs	r3, #1
 80085ee:	f7fd ff3f 	bl	8006470 <disk_write>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d004      	beq.n	8008602 <f_write+0x150>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2201      	movs	r2, #1
 80085fc:	755a      	strb	r2, [r3, #21]
 80085fe:	2301      	movs	r3, #1
 8008600:	e0c8      	b.n	8008794 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	7d1b      	ldrb	r3, [r3, #20]
 8008606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800860a:	b2da      	uxtb	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7fe fab3 	bl	8006b84 <clust2sect>
 800861e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <f_write+0x17e>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2202      	movs	r2, #2
 800862a:	755a      	strb	r2, [r3, #21]
 800862c:	2302      	movs	r3, #2
 800862e:	e0b1      	b.n	8008794 <f_write+0x2e2>
			sect += csect;
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	4413      	add	r3, r2
 8008636:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	0a5b      	lsrs	r3, r3, #9
 800863c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800863e:	6a3b      	ldr	r3, [r7, #32]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d03c      	beq.n	80086be <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	4413      	add	r3, r2
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	8952      	ldrh	r2, [r2, #10]
 800864e:	4293      	cmp	r3, r2
 8008650:	d905      	bls.n	800865e <f_write+0x1ac>
					cc = fs->csize - csect;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	895b      	ldrh	r3, [r3, #10]
 8008656:	461a      	mov	r2, r3
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	7858      	ldrb	r0, [r3, #1]
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	69f9      	ldr	r1, [r7, #28]
 8008668:	f7fd ff02 	bl	8006470 <disk_write>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d004      	beq.n	800867c <f_write+0x1ca>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	755a      	strb	r2, [r3, #21]
 8008678:	2301      	movs	r3, #1
 800867a:	e08b      	b.n	8008794 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a1a      	ldr	r2, [r3, #32]
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	6a3a      	ldr	r2, [r7, #32]
 8008686:	429a      	cmp	r2, r3
 8008688:	d915      	bls.n	80086b6 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a1a      	ldr	r2, [r3, #32]
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	025b      	lsls	r3, r3, #9
 800869a:	69fa      	ldr	r2, [r7, #28]
 800869c:	4413      	add	r3, r2
 800869e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086a2:	4619      	mov	r1, r3
 80086a4:	f7fd ffa4 	bl	80065f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	7d1b      	ldrb	r3, [r3, #20]
 80086ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	025b      	lsls	r3, r3, #9
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80086bc:	e03f      	b.n	800873e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d016      	beq.n	80086f6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	699a      	ldr	r2, [r3, #24]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d210      	bcs.n	80086f6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	7858      	ldrb	r0, [r3, #1]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086de:	2301      	movs	r3, #1
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	f7fd fea5 	bl	8006430 <disk_read>
 80086e6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	755a      	strb	r2, [r3, #21]
 80086f2:	2301      	movs	r3, #1
 80086f4:	e04e      	b.n	8008794 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008704:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008708:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800870a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	429a      	cmp	r2, r3
 8008710:	d901      	bls.n	8008716 <f_write+0x264>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008724:	4413      	add	r3, r2
 8008726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008728:	69f9      	ldr	r1, [r7, #28]
 800872a:	4618      	mov	r0, r3
 800872c:	f7fd ff60 	bl	80065f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	7d1b      	ldrb	r3, [r3, #20]
 8008734:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008738:	b2da      	uxtb	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800873e:	69fa      	ldr	r2, [r7, #28]
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	4413      	add	r3, r2
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	699a      	ldr	r2, [r3, #24]
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	441a      	add	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	619a      	str	r2, [r3, #24]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	429a      	cmp	r2, r3
 800875c:	bf38      	it	cc
 800875e:	461a      	movcc	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	60da      	str	r2, [r3, #12]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	441a      	add	r2, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	f47f aed4 	bne.w	8008528 <f_write+0x76>
 8008780:	e000      	b.n	8008784 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008782:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	7d1b      	ldrb	r3, [r3, #20]
 8008788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800878c:	b2da      	uxtb	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3730      	adds	r7, #48	; 0x30
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f107 0208 	add.w	r2, r7, #8
 80087aa:	4611      	mov	r1, r2
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fb07 	bl	8007dc0 <validate>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d168      	bne.n	800888e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	7d1b      	ldrb	r3, [r3, #20]
 80087c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d062      	beq.n	800888e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	7d1b      	ldrb	r3, [r3, #20]
 80087cc:	b25b      	sxtb	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	da15      	bge.n	80087fe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	7858      	ldrb	r0, [r3, #1]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1a      	ldr	r2, [r3, #32]
 80087e0:	2301      	movs	r3, #1
 80087e2:	f7fd fe45 	bl	8006470 <disk_write>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <f_sync+0x54>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e04f      	b.n	8008890 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	7d1b      	ldrb	r3, [r3, #20]
 80087f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80087fe:	f7fd f899 	bl	8005934 <get_fattime>
 8008802:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	4619      	mov	r1, r3
 800880c:	4610      	mov	r0, r2
 800880e:	f7fe f91d 	bl	8006a4c <move_window>
 8008812:	4603      	mov	r3, r0
 8008814:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d138      	bne.n	800888e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008820:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	330b      	adds	r3, #11
 8008826:	781a      	ldrb	r2, [r3, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	330b      	adds	r3, #11
 800882c:	f042 0220 	orr.w	r2, r2, #32
 8008830:	b2d2      	uxtb	r2, r2
 8008832:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	461a      	mov	r2, r3
 800883e:	68f9      	ldr	r1, [r7, #12]
 8008840:	f7fe fe2a 	bl	8007498 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f103 021c 	add.w	r2, r3, #28
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	4619      	mov	r1, r3
 8008850:	4610      	mov	r0, r2
 8008852:	f7fd fea1 	bl	8006598 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	3316      	adds	r3, #22
 800885a:	6939      	ldr	r1, [r7, #16]
 800885c:	4618      	mov	r0, r3
 800885e:	f7fd fe9b 	bl	8006598 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3312      	adds	r3, #18
 8008866:	2100      	movs	r1, #0
 8008868:	4618      	mov	r0, r3
 800886a:	f7fd fe7a 	bl	8006562 <st_word>
					fs->wflag = 1;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2201      	movs	r2, #1
 8008872:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	4618      	mov	r0, r3
 8008878:	f7fe f916 	bl	8006aa8 <sync_fs>
 800887c:	4603      	mov	r3, r0
 800887e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	7d1b      	ldrb	r3, [r3, #20]
 8008884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008888:	b2da      	uxtb	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800888e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f7ff ff7b 	bl	800879c <f_sync>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d118      	bne.n	80088e2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f107 0208 	add.w	r2, r7, #8
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff fa81 	bl	8007dc0 <validate>
 80088be:	4603      	mov	r3, r0
 80088c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80088c2:	7bfb      	ldrb	r3, [r7, #15]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10c      	bne.n	80088e2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe f819 	bl	8006904 <dec_lock>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d102      	bne.n	80088e2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80088e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b092      	sub	sp, #72	; 0x48
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80088f8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80088fc:	f107 030c 	add.w	r3, r7, #12
 8008900:	2200      	movs	r2, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f7ff f810 	bl	8007928 <find_volume>
 8008908:	4603      	mov	r3, r0
 800890a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800890e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008912:	2b00      	cmp	r3, #0
 8008914:	f040 8099 	bne.w	8008a4a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800891e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008920:	691a      	ldr	r2, [r3, #16]
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	3b02      	subs	r3, #2
 8008928:	429a      	cmp	r2, r3
 800892a:	d804      	bhi.n	8008936 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	691a      	ldr	r2, [r3, #16]
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e089      	b.n	8008a4a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d128      	bne.n	8008994 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008942:	2302      	movs	r3, #2
 8008944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800894a:	f107 0314 	add.w	r3, r7, #20
 800894e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe f936 	bl	8006bc2 <get_fat>
 8008956:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800895e:	d103      	bne.n	8008968 <f_getfree+0x7c>
 8008960:	2301      	movs	r3, #1
 8008962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008966:	e063      	b.n	8008a30 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896a:	2b01      	cmp	r3, #1
 800896c:	d103      	bne.n	8008976 <f_getfree+0x8a>
 800896e:	2302      	movs	r3, #2
 8008970:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008974:	e05c      	b.n	8008a30 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8008976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <f_getfree+0x96>
 800897c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897e:	3301      	adds	r3, #1
 8008980:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8008982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008984:	3301      	adds	r3, #1
 8008986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800898e:	429a      	cmp	r2, r3
 8008990:	d3db      	bcc.n	800894a <f_getfree+0x5e>
 8008992:	e04d      	b.n	8008a30 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899c:	6a1b      	ldr	r3, [r3, #32]
 800899e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80089a0:	2300      	movs	r3, #0
 80089a2:	637b      	str	r3, [r7, #52]	; 0x34
 80089a4:	2300      	movs	r3, #0
 80089a6:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80089a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d113      	bne.n	80089d6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80089ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b2:	1c5a      	adds	r2, r3, #1
 80089b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80089b6:	4619      	mov	r1, r3
 80089b8:	f7fe f848 	bl	8006a4c <move_window>
 80089bc:	4603      	mov	r3, r0
 80089be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80089c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d131      	bne.n	8008a2e <f_getfree+0x142>
							p = fs->win;
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	3330      	adds	r3, #48	; 0x30
 80089ce:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80089d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089d4:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d10f      	bne.n	80089fe <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80089de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089e0:	f7fd fd84 	bl	80064ec <ld_word>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d102      	bne.n	80089f0 <f_getfree+0x104>
 80089ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ec:	3301      	adds	r3, #1
 80089ee:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	3302      	adds	r3, #2
 80089f4:	633b      	str	r3, [r7, #48]	; 0x30
 80089f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f8:	3b02      	subs	r3, #2
 80089fa:	637b      	str	r3, [r7, #52]	; 0x34
 80089fc:	e010      	b.n	8008a20 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80089fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a00:	f7fd fd8c 	bl	800651c <ld_dword>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d102      	bne.n	8008a14 <f_getfree+0x128>
 8008a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a10:	3301      	adds	r3, #1
 8008a12:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	3304      	adds	r3, #4
 8008a18:	633b      	str	r3, [r7, #48]	; 0x30
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a1c:	3b04      	subs	r3, #4
 8008a1e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8008a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a22:	3b01      	subs	r3, #1
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1bd      	bne.n	80089a8 <f_getfree+0xbc>
 8008a2c:	e000      	b.n	8008a30 <f_getfree+0x144>
							if (res != FR_OK) break;
 8008a2e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a34:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a3a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	791a      	ldrb	r2, [r3, #4]
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	f042 0201 	orr.w	r2, r2, #1
 8008a46:	b2d2      	uxtb	r2, r2
 8008a48:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008a4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3748      	adds	r7, #72	; 0x48
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b088      	sub	sp, #32
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008a6a:	e01b      	b.n	8008aa4 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008a6c:	f107 0310 	add.w	r3, r7, #16
 8008a70:	f107 0114 	add.w	r1, r7, #20
 8008a74:	2201      	movs	r2, #1
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff fbdc 	bl	8008234 <f_read>
		if (rc != 1) break;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d116      	bne.n	8008ab0 <f_gets+0x5a>
		c = s[0];
 8008a82:	7d3b      	ldrb	r3, [r7, #20]
 8008a84:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
 8008a88:	2b0d      	cmp	r3, #13
 8008a8a:	d100      	bne.n	8008a8e <f_gets+0x38>
 8008a8c:	e00a      	b.n	8008aa4 <f_gets+0x4e>
		*p++ = c;
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	61ba      	str	r2, [r7, #24]
 8008a94:	7dfa      	ldrb	r2, [r7, #23]
 8008a96:	701a      	strb	r2, [r3, #0]
		n++;
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	2b0a      	cmp	r3, #10
 8008aa2:	d007      	beq.n	8008ab4 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	dbde      	blt.n	8008a6c <f_gets+0x16>
 8008aae:	e002      	b.n	8008ab6 <f_gets+0x60>
		if (rc != 1) break;
 8008ab0:	bf00      	nop
 8008ab2:	e000      	b.n	8008ab6 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008ab4:	bf00      	nop
	}
	*p = 0;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <f_gets+0x70>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	e000      	b.n	8008ac8 <f_gets+0x72>
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3720      	adds	r7, #32
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	60f8      	str	r0, [r7, #12]
 8008ad8:	60b9      	str	r1, [r7, #8]
 8008ada:	4613      	mov	r3, r2
 8008adc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008ae6:	4b1f      	ldr	r3, [pc, #124]	; (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008ae8:	7a5b      	ldrb	r3, [r3, #9]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d131      	bne.n	8008b54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008af0:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008af2:	7a5b      	ldrb	r3, [r3, #9]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	461a      	mov	r2, r3
 8008af8:	4b1a      	ldr	r3, [pc, #104]	; (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008afa:	2100      	movs	r1, #0
 8008afc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008afe:	4b19      	ldr	r3, [pc, #100]	; (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b00:	7a5b      	ldrb	r3, [r3, #9]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	4a17      	ldr	r2, [pc, #92]	; (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b0e:	4b15      	ldr	r3, [pc, #84]	; (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b10:	7a5b      	ldrb	r3, [r3, #9]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	461a      	mov	r2, r3
 8008b16:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b18:	4413      	add	r3, r2
 8008b1a:	79fa      	ldrb	r2, [r7, #7]
 8008b1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008b1e:	4b11      	ldr	r3, [pc, #68]	; (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b20:	7a5b      	ldrb	r3, [r3, #9]
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	b2d1      	uxtb	r1, r2
 8008b28:	4a0e      	ldr	r2, [pc, #56]	; (8008b64 <FATFS_LinkDriverEx+0x94>)
 8008b2a:	7251      	strb	r1, [r2, #9]
 8008b2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008b2e:	7dbb      	ldrb	r3, [r7, #22]
 8008b30:	3330      	adds	r3, #48	; 0x30
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	223a      	movs	r2, #58	; 0x3a
 8008b3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	3302      	adds	r3, #2
 8008b44:	222f      	movs	r2, #47	; 0x2f
 8008b46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3303      	adds	r3, #3
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	371c      	adds	r7, #28
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20015d0c 	.word	0x20015d0c

08008b68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b72:	2200      	movs	r2, #0
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff ffaa 	bl	8008ad0 <FATFS_LinkDriverEx>
 8008b7c:	4603      	mov	r3, r0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <__errno>:
 8008b88:	4b01      	ldr	r3, [pc, #4]	; (8008b90 <__errno+0x8>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20002734 	.word	0x20002734

08008b94 <__libc_init_array>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4d0d      	ldr	r5, [pc, #52]	; (8008bcc <__libc_init_array+0x38>)
 8008b98:	4c0d      	ldr	r4, [pc, #52]	; (8008bd0 <__libc_init_array+0x3c>)
 8008b9a:	1b64      	subs	r4, r4, r5
 8008b9c:	10a4      	asrs	r4, r4, #2
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	42a6      	cmp	r6, r4
 8008ba2:	d109      	bne.n	8008bb8 <__libc_init_array+0x24>
 8008ba4:	4d0b      	ldr	r5, [pc, #44]	; (8008bd4 <__libc_init_array+0x40>)
 8008ba6:	4c0c      	ldr	r4, [pc, #48]	; (8008bd8 <__libc_init_array+0x44>)
 8008ba8:	f001 f8a8 	bl	8009cfc <_init>
 8008bac:	1b64      	subs	r4, r4, r5
 8008bae:	10a4      	asrs	r4, r4, #2
 8008bb0:	2600      	movs	r6, #0
 8008bb2:	42a6      	cmp	r6, r4
 8008bb4:	d105      	bne.n	8008bc2 <__libc_init_array+0x2e>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bbc:	4798      	blx	r3
 8008bbe:	3601      	adds	r6, #1
 8008bc0:	e7ee      	b.n	8008ba0 <__libc_init_array+0xc>
 8008bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc6:	4798      	blx	r3
 8008bc8:	3601      	adds	r6, #1
 8008bca:	e7f2      	b.n	8008bb2 <__libc_init_array+0x1e>
 8008bcc:	0800a08c 	.word	0x0800a08c
 8008bd0:	0800a08c 	.word	0x0800a08c
 8008bd4:	0800a08c 	.word	0x0800a08c
 8008bd8:	0800a090 	.word	0x0800a090

08008bdc <memcpy>:
 8008bdc:	440a      	add	r2, r1
 8008bde:	4291      	cmp	r1, r2
 8008be0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008be4:	d100      	bne.n	8008be8 <memcpy+0xc>
 8008be6:	4770      	bx	lr
 8008be8:	b510      	push	{r4, lr}
 8008bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bf2:	4291      	cmp	r1, r2
 8008bf4:	d1f9      	bne.n	8008bea <memcpy+0xe>
 8008bf6:	bd10      	pop	{r4, pc}

08008bf8 <memset>:
 8008bf8:	4402      	add	r2, r0
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d100      	bne.n	8008c02 <memset+0xa>
 8008c00:	4770      	bx	lr
 8008c02:	f803 1b01 	strb.w	r1, [r3], #1
 8008c06:	e7f9      	b.n	8008bfc <memset+0x4>

08008c08 <_puts_r>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	460e      	mov	r6, r1
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	b118      	cbz	r0, 8008c18 <_puts_r+0x10>
 8008c10:	6983      	ldr	r3, [r0, #24]
 8008c12:	b90b      	cbnz	r3, 8008c18 <_puts_r+0x10>
 8008c14:	f000 fa82 	bl	800911c <__sinit>
 8008c18:	69ab      	ldr	r3, [r5, #24]
 8008c1a:	68ac      	ldr	r4, [r5, #8]
 8008c1c:	b913      	cbnz	r3, 8008c24 <_puts_r+0x1c>
 8008c1e:	4628      	mov	r0, r5
 8008c20:	f000 fa7c 	bl	800911c <__sinit>
 8008c24:	4b2c      	ldr	r3, [pc, #176]	; (8008cd8 <_puts_r+0xd0>)
 8008c26:	429c      	cmp	r4, r3
 8008c28:	d120      	bne.n	8008c6c <_puts_r+0x64>
 8008c2a:	686c      	ldr	r4, [r5, #4]
 8008c2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c2e:	07db      	lsls	r3, r3, #31
 8008c30:	d405      	bmi.n	8008c3e <_puts_r+0x36>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	0598      	lsls	r0, r3, #22
 8008c36:	d402      	bmi.n	8008c3e <_puts_r+0x36>
 8008c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c3a:	f000 fb0d 	bl	8009258 <__retarget_lock_acquire_recursive>
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	0719      	lsls	r1, r3, #28
 8008c42:	d51d      	bpl.n	8008c80 <_puts_r+0x78>
 8008c44:	6923      	ldr	r3, [r4, #16]
 8008c46:	b1db      	cbz	r3, 8008c80 <_puts_r+0x78>
 8008c48:	3e01      	subs	r6, #1
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c50:	3b01      	subs	r3, #1
 8008c52:	60a3      	str	r3, [r4, #8]
 8008c54:	bb39      	cbnz	r1, 8008ca6 <_puts_r+0x9e>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	da38      	bge.n	8008ccc <_puts_r+0xc4>
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	210a      	movs	r1, #10
 8008c5e:	4628      	mov	r0, r5
 8008c60:	f000 f882 	bl	8008d68 <__swbuf_r>
 8008c64:	3001      	adds	r0, #1
 8008c66:	d011      	beq.n	8008c8c <_puts_r+0x84>
 8008c68:	250a      	movs	r5, #10
 8008c6a:	e011      	b.n	8008c90 <_puts_r+0x88>
 8008c6c:	4b1b      	ldr	r3, [pc, #108]	; (8008cdc <_puts_r+0xd4>)
 8008c6e:	429c      	cmp	r4, r3
 8008c70:	d101      	bne.n	8008c76 <_puts_r+0x6e>
 8008c72:	68ac      	ldr	r4, [r5, #8]
 8008c74:	e7da      	b.n	8008c2c <_puts_r+0x24>
 8008c76:	4b1a      	ldr	r3, [pc, #104]	; (8008ce0 <_puts_r+0xd8>)
 8008c78:	429c      	cmp	r4, r3
 8008c7a:	bf08      	it	eq
 8008c7c:	68ec      	ldreq	r4, [r5, #12]
 8008c7e:	e7d5      	b.n	8008c2c <_puts_r+0x24>
 8008c80:	4621      	mov	r1, r4
 8008c82:	4628      	mov	r0, r5
 8008c84:	f000 f8c2 	bl	8008e0c <__swsetup_r>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d0dd      	beq.n	8008c48 <_puts_r+0x40>
 8008c8c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008c90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c92:	07da      	lsls	r2, r3, #31
 8008c94:	d405      	bmi.n	8008ca2 <_puts_r+0x9a>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	059b      	lsls	r3, r3, #22
 8008c9a:	d402      	bmi.n	8008ca2 <_puts_r+0x9a>
 8008c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c9e:	f000 fadc 	bl	800925a <__retarget_lock_release_recursive>
 8008ca2:	4628      	mov	r0, r5
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	da04      	bge.n	8008cb4 <_puts_r+0xac>
 8008caa:	69a2      	ldr	r2, [r4, #24]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	dc06      	bgt.n	8008cbe <_puts_r+0xb6>
 8008cb0:	290a      	cmp	r1, #10
 8008cb2:	d004      	beq.n	8008cbe <_puts_r+0xb6>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	6022      	str	r2, [r4, #0]
 8008cba:	7019      	strb	r1, [r3, #0]
 8008cbc:	e7c5      	b.n	8008c4a <_puts_r+0x42>
 8008cbe:	4622      	mov	r2, r4
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f000 f851 	bl	8008d68 <__swbuf_r>
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d1bf      	bne.n	8008c4a <_puts_r+0x42>
 8008cca:	e7df      	b.n	8008c8c <_puts_r+0x84>
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	250a      	movs	r5, #10
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	6022      	str	r2, [r4, #0]
 8008cd4:	701d      	strb	r5, [r3, #0]
 8008cd6:	e7db      	b.n	8008c90 <_puts_r+0x88>
 8008cd8:	0800a010 	.word	0x0800a010
 8008cdc:	0800a030 	.word	0x0800a030
 8008ce0:	08009ff0 	.word	0x08009ff0

08008ce4 <puts>:
 8008ce4:	4b02      	ldr	r3, [pc, #8]	; (8008cf0 <puts+0xc>)
 8008ce6:	4601      	mov	r1, r0
 8008ce8:	6818      	ldr	r0, [r3, #0]
 8008cea:	f7ff bf8d 	b.w	8008c08 <_puts_r>
 8008cee:	bf00      	nop
 8008cf0:	20002734 	.word	0x20002734

08008cf4 <_vsniprintf_r>:
 8008cf4:	b530      	push	{r4, r5, lr}
 8008cf6:	4614      	mov	r4, r2
 8008cf8:	2c00      	cmp	r4, #0
 8008cfa:	b09b      	sub	sp, #108	; 0x6c
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	da05      	bge.n	8008d0e <_vsniprintf_r+0x1a>
 8008d02:	238b      	movs	r3, #139	; 0x8b
 8008d04:	6003      	str	r3, [r0, #0]
 8008d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d0a:	b01b      	add	sp, #108	; 0x6c
 8008d0c:	bd30      	pop	{r4, r5, pc}
 8008d0e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d12:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008d16:	bf14      	ite	ne
 8008d18:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008d1c:	4623      	moveq	r3, r4
 8008d1e:	9302      	str	r3, [sp, #8]
 8008d20:	9305      	str	r3, [sp, #20]
 8008d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d26:	9100      	str	r1, [sp, #0]
 8008d28:	9104      	str	r1, [sp, #16]
 8008d2a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008d2e:	4669      	mov	r1, sp
 8008d30:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008d32:	f000 fc35 	bl	80095a0 <_svfiprintf_r>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	bfbc      	itt	lt
 8008d3a:	238b      	movlt	r3, #139	; 0x8b
 8008d3c:	602b      	strlt	r3, [r5, #0]
 8008d3e:	2c00      	cmp	r4, #0
 8008d40:	d0e3      	beq.n	8008d0a <_vsniprintf_r+0x16>
 8008d42:	9b00      	ldr	r3, [sp, #0]
 8008d44:	2200      	movs	r2, #0
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	e7df      	b.n	8008d0a <_vsniprintf_r+0x16>
	...

08008d4c <vsniprintf>:
 8008d4c:	b507      	push	{r0, r1, r2, lr}
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	4613      	mov	r3, r2
 8008d52:	460a      	mov	r2, r1
 8008d54:	4601      	mov	r1, r0
 8008d56:	4803      	ldr	r0, [pc, #12]	; (8008d64 <vsniprintf+0x18>)
 8008d58:	6800      	ldr	r0, [r0, #0]
 8008d5a:	f7ff ffcb 	bl	8008cf4 <_vsniprintf_r>
 8008d5e:	b003      	add	sp, #12
 8008d60:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d64:	20002734 	.word	0x20002734

08008d68 <__swbuf_r>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	460e      	mov	r6, r1
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	4605      	mov	r5, r0
 8008d70:	b118      	cbz	r0, 8008d7a <__swbuf_r+0x12>
 8008d72:	6983      	ldr	r3, [r0, #24]
 8008d74:	b90b      	cbnz	r3, 8008d7a <__swbuf_r+0x12>
 8008d76:	f000 f9d1 	bl	800911c <__sinit>
 8008d7a:	4b21      	ldr	r3, [pc, #132]	; (8008e00 <__swbuf_r+0x98>)
 8008d7c:	429c      	cmp	r4, r3
 8008d7e:	d12b      	bne.n	8008dd8 <__swbuf_r+0x70>
 8008d80:	686c      	ldr	r4, [r5, #4]
 8008d82:	69a3      	ldr	r3, [r4, #24]
 8008d84:	60a3      	str	r3, [r4, #8]
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	071a      	lsls	r2, r3, #28
 8008d8a:	d52f      	bpl.n	8008dec <__swbuf_r+0x84>
 8008d8c:	6923      	ldr	r3, [r4, #16]
 8008d8e:	b36b      	cbz	r3, 8008dec <__swbuf_r+0x84>
 8008d90:	6923      	ldr	r3, [r4, #16]
 8008d92:	6820      	ldr	r0, [r4, #0]
 8008d94:	1ac0      	subs	r0, r0, r3
 8008d96:	6963      	ldr	r3, [r4, #20]
 8008d98:	b2f6      	uxtb	r6, r6
 8008d9a:	4283      	cmp	r3, r0
 8008d9c:	4637      	mov	r7, r6
 8008d9e:	dc04      	bgt.n	8008daa <__swbuf_r+0x42>
 8008da0:	4621      	mov	r1, r4
 8008da2:	4628      	mov	r0, r5
 8008da4:	f000 f926 	bl	8008ff4 <_fflush_r>
 8008da8:	bb30      	cbnz	r0, 8008df8 <__swbuf_r+0x90>
 8008daa:	68a3      	ldr	r3, [r4, #8]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	60a3      	str	r3, [r4, #8]
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	6022      	str	r2, [r4, #0]
 8008db6:	701e      	strb	r6, [r3, #0]
 8008db8:	6963      	ldr	r3, [r4, #20]
 8008dba:	3001      	adds	r0, #1
 8008dbc:	4283      	cmp	r3, r0
 8008dbe:	d004      	beq.n	8008dca <__swbuf_r+0x62>
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	07db      	lsls	r3, r3, #31
 8008dc4:	d506      	bpl.n	8008dd4 <__swbuf_r+0x6c>
 8008dc6:	2e0a      	cmp	r6, #10
 8008dc8:	d104      	bne.n	8008dd4 <__swbuf_r+0x6c>
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4628      	mov	r0, r5
 8008dce:	f000 f911 	bl	8008ff4 <_fflush_r>
 8008dd2:	b988      	cbnz	r0, 8008df8 <__swbuf_r+0x90>
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <__swbuf_r+0x9c>)
 8008dda:	429c      	cmp	r4, r3
 8008ddc:	d101      	bne.n	8008de2 <__swbuf_r+0x7a>
 8008dde:	68ac      	ldr	r4, [r5, #8]
 8008de0:	e7cf      	b.n	8008d82 <__swbuf_r+0x1a>
 8008de2:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <__swbuf_r+0xa0>)
 8008de4:	429c      	cmp	r4, r3
 8008de6:	bf08      	it	eq
 8008de8:	68ec      	ldreq	r4, [r5, #12]
 8008dea:	e7ca      	b.n	8008d82 <__swbuf_r+0x1a>
 8008dec:	4621      	mov	r1, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 f80c 	bl	8008e0c <__swsetup_r>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d0cb      	beq.n	8008d90 <__swbuf_r+0x28>
 8008df8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008dfc:	e7ea      	b.n	8008dd4 <__swbuf_r+0x6c>
 8008dfe:	bf00      	nop
 8008e00:	0800a010 	.word	0x0800a010
 8008e04:	0800a030 	.word	0x0800a030
 8008e08:	08009ff0 	.word	0x08009ff0

08008e0c <__swsetup_r>:
 8008e0c:	4b32      	ldr	r3, [pc, #200]	; (8008ed8 <__swsetup_r+0xcc>)
 8008e0e:	b570      	push	{r4, r5, r6, lr}
 8008e10:	681d      	ldr	r5, [r3, #0]
 8008e12:	4606      	mov	r6, r0
 8008e14:	460c      	mov	r4, r1
 8008e16:	b125      	cbz	r5, 8008e22 <__swsetup_r+0x16>
 8008e18:	69ab      	ldr	r3, [r5, #24]
 8008e1a:	b913      	cbnz	r3, 8008e22 <__swsetup_r+0x16>
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	f000 f97d 	bl	800911c <__sinit>
 8008e22:	4b2e      	ldr	r3, [pc, #184]	; (8008edc <__swsetup_r+0xd0>)
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d10f      	bne.n	8008e48 <__swsetup_r+0x3c>
 8008e28:	686c      	ldr	r4, [r5, #4]
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e30:	0719      	lsls	r1, r3, #28
 8008e32:	d42c      	bmi.n	8008e8e <__swsetup_r+0x82>
 8008e34:	06dd      	lsls	r5, r3, #27
 8008e36:	d411      	bmi.n	8008e5c <__swsetup_r+0x50>
 8008e38:	2309      	movs	r3, #9
 8008e3a:	6033      	str	r3, [r6, #0]
 8008e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e40:	81a3      	strh	r3, [r4, #12]
 8008e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e46:	e03e      	b.n	8008ec6 <__swsetup_r+0xba>
 8008e48:	4b25      	ldr	r3, [pc, #148]	; (8008ee0 <__swsetup_r+0xd4>)
 8008e4a:	429c      	cmp	r4, r3
 8008e4c:	d101      	bne.n	8008e52 <__swsetup_r+0x46>
 8008e4e:	68ac      	ldr	r4, [r5, #8]
 8008e50:	e7eb      	b.n	8008e2a <__swsetup_r+0x1e>
 8008e52:	4b24      	ldr	r3, [pc, #144]	; (8008ee4 <__swsetup_r+0xd8>)
 8008e54:	429c      	cmp	r4, r3
 8008e56:	bf08      	it	eq
 8008e58:	68ec      	ldreq	r4, [r5, #12]
 8008e5a:	e7e6      	b.n	8008e2a <__swsetup_r+0x1e>
 8008e5c:	0758      	lsls	r0, r3, #29
 8008e5e:	d512      	bpl.n	8008e86 <__swsetup_r+0x7a>
 8008e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e62:	b141      	cbz	r1, 8008e76 <__swsetup_r+0x6a>
 8008e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	d002      	beq.n	8008e72 <__swsetup_r+0x66>
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f000 fa5b 	bl	8009328 <_free_r>
 8008e72:	2300      	movs	r3, #0
 8008e74:	6363      	str	r3, [r4, #52]	; 0x34
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e7c:	81a3      	strh	r3, [r4, #12]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	6063      	str	r3, [r4, #4]
 8008e82:	6923      	ldr	r3, [r4, #16]
 8008e84:	6023      	str	r3, [r4, #0]
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	f043 0308 	orr.w	r3, r3, #8
 8008e8c:	81a3      	strh	r3, [r4, #12]
 8008e8e:	6923      	ldr	r3, [r4, #16]
 8008e90:	b94b      	cbnz	r3, 8008ea6 <__swsetup_r+0x9a>
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e9c:	d003      	beq.n	8008ea6 <__swsetup_r+0x9a>
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f000 fa01 	bl	80092a8 <__smakebuf_r>
 8008ea6:	89a0      	ldrh	r0, [r4, #12]
 8008ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eac:	f010 0301 	ands.w	r3, r0, #1
 8008eb0:	d00a      	beq.n	8008ec8 <__swsetup_r+0xbc>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	60a3      	str	r3, [r4, #8]
 8008eb6:	6963      	ldr	r3, [r4, #20]
 8008eb8:	425b      	negs	r3, r3
 8008eba:	61a3      	str	r3, [r4, #24]
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	b943      	cbnz	r3, 8008ed2 <__swsetup_r+0xc6>
 8008ec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ec4:	d1ba      	bne.n	8008e3c <__swsetup_r+0x30>
 8008ec6:	bd70      	pop	{r4, r5, r6, pc}
 8008ec8:	0781      	lsls	r1, r0, #30
 8008eca:	bf58      	it	pl
 8008ecc:	6963      	ldrpl	r3, [r4, #20]
 8008ece:	60a3      	str	r3, [r4, #8]
 8008ed0:	e7f4      	b.n	8008ebc <__swsetup_r+0xb0>
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	e7f7      	b.n	8008ec6 <__swsetup_r+0xba>
 8008ed6:	bf00      	nop
 8008ed8:	20002734 	.word	0x20002734
 8008edc:	0800a010 	.word	0x0800a010
 8008ee0:	0800a030 	.word	0x0800a030
 8008ee4:	08009ff0 	.word	0x08009ff0

08008ee8 <__sflush_r>:
 8008ee8:	898a      	ldrh	r2, [r1, #12]
 8008eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eee:	4605      	mov	r5, r0
 8008ef0:	0710      	lsls	r0, r2, #28
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	d458      	bmi.n	8008fa8 <__sflush_r+0xc0>
 8008ef6:	684b      	ldr	r3, [r1, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	dc05      	bgt.n	8008f08 <__sflush_r+0x20>
 8008efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	dc02      	bgt.n	8008f08 <__sflush_r+0x20>
 8008f02:	2000      	movs	r0, #0
 8008f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f0a:	2e00      	cmp	r6, #0
 8008f0c:	d0f9      	beq.n	8008f02 <__sflush_r+0x1a>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f14:	682f      	ldr	r7, [r5, #0]
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	d032      	beq.n	8008f80 <__sflush_r+0x98>
 8008f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	075a      	lsls	r2, r3, #29
 8008f20:	d505      	bpl.n	8008f2e <__sflush_r+0x46>
 8008f22:	6863      	ldr	r3, [r4, #4]
 8008f24:	1ac0      	subs	r0, r0, r3
 8008f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f28:	b10b      	cbz	r3, 8008f2e <__sflush_r+0x46>
 8008f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f2c:	1ac0      	subs	r0, r0, r3
 8008f2e:	2300      	movs	r3, #0
 8008f30:	4602      	mov	r2, r0
 8008f32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f34:	6a21      	ldr	r1, [r4, #32]
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b0      	blx	r6
 8008f3a:	1c43      	adds	r3, r0, #1
 8008f3c:	89a3      	ldrh	r3, [r4, #12]
 8008f3e:	d106      	bne.n	8008f4e <__sflush_r+0x66>
 8008f40:	6829      	ldr	r1, [r5, #0]
 8008f42:	291d      	cmp	r1, #29
 8008f44:	d82c      	bhi.n	8008fa0 <__sflush_r+0xb8>
 8008f46:	4a2a      	ldr	r2, [pc, #168]	; (8008ff0 <__sflush_r+0x108>)
 8008f48:	40ca      	lsrs	r2, r1
 8008f4a:	07d6      	lsls	r6, r2, #31
 8008f4c:	d528      	bpl.n	8008fa0 <__sflush_r+0xb8>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	6062      	str	r2, [r4, #4]
 8008f52:	04d9      	lsls	r1, r3, #19
 8008f54:	6922      	ldr	r2, [r4, #16]
 8008f56:	6022      	str	r2, [r4, #0]
 8008f58:	d504      	bpl.n	8008f64 <__sflush_r+0x7c>
 8008f5a:	1c42      	adds	r2, r0, #1
 8008f5c:	d101      	bne.n	8008f62 <__sflush_r+0x7a>
 8008f5e:	682b      	ldr	r3, [r5, #0]
 8008f60:	b903      	cbnz	r3, 8008f64 <__sflush_r+0x7c>
 8008f62:	6560      	str	r0, [r4, #84]	; 0x54
 8008f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f66:	602f      	str	r7, [r5, #0]
 8008f68:	2900      	cmp	r1, #0
 8008f6a:	d0ca      	beq.n	8008f02 <__sflush_r+0x1a>
 8008f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f70:	4299      	cmp	r1, r3
 8008f72:	d002      	beq.n	8008f7a <__sflush_r+0x92>
 8008f74:	4628      	mov	r0, r5
 8008f76:	f000 f9d7 	bl	8009328 <_free_r>
 8008f7a:	2000      	movs	r0, #0
 8008f7c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f7e:	e7c1      	b.n	8008f04 <__sflush_r+0x1c>
 8008f80:	6a21      	ldr	r1, [r4, #32]
 8008f82:	2301      	movs	r3, #1
 8008f84:	4628      	mov	r0, r5
 8008f86:	47b0      	blx	r6
 8008f88:	1c41      	adds	r1, r0, #1
 8008f8a:	d1c7      	bne.n	8008f1c <__sflush_r+0x34>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0c4      	beq.n	8008f1c <__sflush_r+0x34>
 8008f92:	2b1d      	cmp	r3, #29
 8008f94:	d001      	beq.n	8008f9a <__sflush_r+0xb2>
 8008f96:	2b16      	cmp	r3, #22
 8008f98:	d101      	bne.n	8008f9e <__sflush_r+0xb6>
 8008f9a:	602f      	str	r7, [r5, #0]
 8008f9c:	e7b1      	b.n	8008f02 <__sflush_r+0x1a>
 8008f9e:	89a3      	ldrh	r3, [r4, #12]
 8008fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fa4:	81a3      	strh	r3, [r4, #12]
 8008fa6:	e7ad      	b.n	8008f04 <__sflush_r+0x1c>
 8008fa8:	690f      	ldr	r7, [r1, #16]
 8008faa:	2f00      	cmp	r7, #0
 8008fac:	d0a9      	beq.n	8008f02 <__sflush_r+0x1a>
 8008fae:	0793      	lsls	r3, r2, #30
 8008fb0:	680e      	ldr	r6, [r1, #0]
 8008fb2:	bf08      	it	eq
 8008fb4:	694b      	ldreq	r3, [r1, #20]
 8008fb6:	600f      	str	r7, [r1, #0]
 8008fb8:	bf18      	it	ne
 8008fba:	2300      	movne	r3, #0
 8008fbc:	eba6 0807 	sub.w	r8, r6, r7
 8008fc0:	608b      	str	r3, [r1, #8]
 8008fc2:	f1b8 0f00 	cmp.w	r8, #0
 8008fc6:	dd9c      	ble.n	8008f02 <__sflush_r+0x1a>
 8008fc8:	6a21      	ldr	r1, [r4, #32]
 8008fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fcc:	4643      	mov	r3, r8
 8008fce:	463a      	mov	r2, r7
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	47b0      	blx	r6
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	dc06      	bgt.n	8008fe6 <__sflush_r+0xfe>
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fe4:	e78e      	b.n	8008f04 <__sflush_r+0x1c>
 8008fe6:	4407      	add	r7, r0
 8008fe8:	eba8 0800 	sub.w	r8, r8, r0
 8008fec:	e7e9      	b.n	8008fc2 <__sflush_r+0xda>
 8008fee:	bf00      	nop
 8008ff0:	20400001 	.word	0x20400001

08008ff4 <_fflush_r>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	690b      	ldr	r3, [r1, #16]
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	b913      	cbnz	r3, 8009004 <_fflush_r+0x10>
 8008ffe:	2500      	movs	r5, #0
 8009000:	4628      	mov	r0, r5
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	b118      	cbz	r0, 800900e <_fflush_r+0x1a>
 8009006:	6983      	ldr	r3, [r0, #24]
 8009008:	b90b      	cbnz	r3, 800900e <_fflush_r+0x1a>
 800900a:	f000 f887 	bl	800911c <__sinit>
 800900e:	4b14      	ldr	r3, [pc, #80]	; (8009060 <_fflush_r+0x6c>)
 8009010:	429c      	cmp	r4, r3
 8009012:	d11b      	bne.n	800904c <_fflush_r+0x58>
 8009014:	686c      	ldr	r4, [r5, #4]
 8009016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0ef      	beq.n	8008ffe <_fflush_r+0xa>
 800901e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009020:	07d0      	lsls	r0, r2, #31
 8009022:	d404      	bmi.n	800902e <_fflush_r+0x3a>
 8009024:	0599      	lsls	r1, r3, #22
 8009026:	d402      	bmi.n	800902e <_fflush_r+0x3a>
 8009028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800902a:	f000 f915 	bl	8009258 <__retarget_lock_acquire_recursive>
 800902e:	4628      	mov	r0, r5
 8009030:	4621      	mov	r1, r4
 8009032:	f7ff ff59 	bl	8008ee8 <__sflush_r>
 8009036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009038:	07da      	lsls	r2, r3, #31
 800903a:	4605      	mov	r5, r0
 800903c:	d4e0      	bmi.n	8009000 <_fflush_r+0xc>
 800903e:	89a3      	ldrh	r3, [r4, #12]
 8009040:	059b      	lsls	r3, r3, #22
 8009042:	d4dd      	bmi.n	8009000 <_fflush_r+0xc>
 8009044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009046:	f000 f908 	bl	800925a <__retarget_lock_release_recursive>
 800904a:	e7d9      	b.n	8009000 <_fflush_r+0xc>
 800904c:	4b05      	ldr	r3, [pc, #20]	; (8009064 <_fflush_r+0x70>)
 800904e:	429c      	cmp	r4, r3
 8009050:	d101      	bne.n	8009056 <_fflush_r+0x62>
 8009052:	68ac      	ldr	r4, [r5, #8]
 8009054:	e7df      	b.n	8009016 <_fflush_r+0x22>
 8009056:	4b04      	ldr	r3, [pc, #16]	; (8009068 <_fflush_r+0x74>)
 8009058:	429c      	cmp	r4, r3
 800905a:	bf08      	it	eq
 800905c:	68ec      	ldreq	r4, [r5, #12]
 800905e:	e7da      	b.n	8009016 <_fflush_r+0x22>
 8009060:	0800a010 	.word	0x0800a010
 8009064:	0800a030 	.word	0x0800a030
 8009068:	08009ff0 	.word	0x08009ff0

0800906c <std>:
 800906c:	2300      	movs	r3, #0
 800906e:	b510      	push	{r4, lr}
 8009070:	4604      	mov	r4, r0
 8009072:	e9c0 3300 	strd	r3, r3, [r0]
 8009076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800907a:	6083      	str	r3, [r0, #8]
 800907c:	8181      	strh	r1, [r0, #12]
 800907e:	6643      	str	r3, [r0, #100]	; 0x64
 8009080:	81c2      	strh	r2, [r0, #14]
 8009082:	6183      	str	r3, [r0, #24]
 8009084:	4619      	mov	r1, r3
 8009086:	2208      	movs	r2, #8
 8009088:	305c      	adds	r0, #92	; 0x5c
 800908a:	f7ff fdb5 	bl	8008bf8 <memset>
 800908e:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <std+0x38>)
 8009090:	6263      	str	r3, [r4, #36]	; 0x24
 8009092:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <std+0x3c>)
 8009094:	62a3      	str	r3, [r4, #40]	; 0x28
 8009096:	4b05      	ldr	r3, [pc, #20]	; (80090ac <std+0x40>)
 8009098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800909a:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <std+0x44>)
 800909c:	6224      	str	r4, [r4, #32]
 800909e:	6323      	str	r3, [r4, #48]	; 0x30
 80090a0:	bd10      	pop	{r4, pc}
 80090a2:	bf00      	nop
 80090a4:	08009ae9 	.word	0x08009ae9
 80090a8:	08009b0b 	.word	0x08009b0b
 80090ac:	08009b43 	.word	0x08009b43
 80090b0:	08009b67 	.word	0x08009b67

080090b4 <_cleanup_r>:
 80090b4:	4901      	ldr	r1, [pc, #4]	; (80090bc <_cleanup_r+0x8>)
 80090b6:	f000 b8af 	b.w	8009218 <_fwalk_reent>
 80090ba:	bf00      	nop
 80090bc:	08008ff5 	.word	0x08008ff5

080090c0 <__sfmoreglue>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	2268      	movs	r2, #104	; 0x68
 80090c4:	1e4d      	subs	r5, r1, #1
 80090c6:	4355      	muls	r5, r2
 80090c8:	460e      	mov	r6, r1
 80090ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090ce:	f000 f997 	bl	8009400 <_malloc_r>
 80090d2:	4604      	mov	r4, r0
 80090d4:	b140      	cbz	r0, 80090e8 <__sfmoreglue+0x28>
 80090d6:	2100      	movs	r1, #0
 80090d8:	e9c0 1600 	strd	r1, r6, [r0]
 80090dc:	300c      	adds	r0, #12
 80090de:	60a0      	str	r0, [r4, #8]
 80090e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090e4:	f7ff fd88 	bl	8008bf8 <memset>
 80090e8:	4620      	mov	r0, r4
 80090ea:	bd70      	pop	{r4, r5, r6, pc}

080090ec <__sfp_lock_acquire>:
 80090ec:	4801      	ldr	r0, [pc, #4]	; (80090f4 <__sfp_lock_acquire+0x8>)
 80090ee:	f000 b8b3 	b.w	8009258 <__retarget_lock_acquire_recursive>
 80090f2:	bf00      	nop
 80090f4:	20015d19 	.word	0x20015d19

080090f8 <__sfp_lock_release>:
 80090f8:	4801      	ldr	r0, [pc, #4]	; (8009100 <__sfp_lock_release+0x8>)
 80090fa:	f000 b8ae 	b.w	800925a <__retarget_lock_release_recursive>
 80090fe:	bf00      	nop
 8009100:	20015d19 	.word	0x20015d19

08009104 <__sinit_lock_acquire>:
 8009104:	4801      	ldr	r0, [pc, #4]	; (800910c <__sinit_lock_acquire+0x8>)
 8009106:	f000 b8a7 	b.w	8009258 <__retarget_lock_acquire_recursive>
 800910a:	bf00      	nop
 800910c:	20015d1a 	.word	0x20015d1a

08009110 <__sinit_lock_release>:
 8009110:	4801      	ldr	r0, [pc, #4]	; (8009118 <__sinit_lock_release+0x8>)
 8009112:	f000 b8a2 	b.w	800925a <__retarget_lock_release_recursive>
 8009116:	bf00      	nop
 8009118:	20015d1a 	.word	0x20015d1a

0800911c <__sinit>:
 800911c:	b510      	push	{r4, lr}
 800911e:	4604      	mov	r4, r0
 8009120:	f7ff fff0 	bl	8009104 <__sinit_lock_acquire>
 8009124:	69a3      	ldr	r3, [r4, #24]
 8009126:	b11b      	cbz	r3, 8009130 <__sinit+0x14>
 8009128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912c:	f7ff bff0 	b.w	8009110 <__sinit_lock_release>
 8009130:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009134:	6523      	str	r3, [r4, #80]	; 0x50
 8009136:	4b13      	ldr	r3, [pc, #76]	; (8009184 <__sinit+0x68>)
 8009138:	4a13      	ldr	r2, [pc, #76]	; (8009188 <__sinit+0x6c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	62a2      	str	r2, [r4, #40]	; 0x28
 800913e:	42a3      	cmp	r3, r4
 8009140:	bf04      	itt	eq
 8009142:	2301      	moveq	r3, #1
 8009144:	61a3      	streq	r3, [r4, #24]
 8009146:	4620      	mov	r0, r4
 8009148:	f000 f820 	bl	800918c <__sfp>
 800914c:	6060      	str	r0, [r4, #4]
 800914e:	4620      	mov	r0, r4
 8009150:	f000 f81c 	bl	800918c <__sfp>
 8009154:	60a0      	str	r0, [r4, #8]
 8009156:	4620      	mov	r0, r4
 8009158:	f000 f818 	bl	800918c <__sfp>
 800915c:	2200      	movs	r2, #0
 800915e:	60e0      	str	r0, [r4, #12]
 8009160:	2104      	movs	r1, #4
 8009162:	6860      	ldr	r0, [r4, #4]
 8009164:	f7ff ff82 	bl	800906c <std>
 8009168:	68a0      	ldr	r0, [r4, #8]
 800916a:	2201      	movs	r2, #1
 800916c:	2109      	movs	r1, #9
 800916e:	f7ff ff7d 	bl	800906c <std>
 8009172:	68e0      	ldr	r0, [r4, #12]
 8009174:	2202      	movs	r2, #2
 8009176:	2112      	movs	r1, #18
 8009178:	f7ff ff78 	bl	800906c <std>
 800917c:	2301      	movs	r3, #1
 800917e:	61a3      	str	r3, [r4, #24]
 8009180:	e7d2      	b.n	8009128 <__sinit+0xc>
 8009182:	bf00      	nop
 8009184:	08009fec 	.word	0x08009fec
 8009188:	080090b5 	.word	0x080090b5

0800918c <__sfp>:
 800918c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918e:	4607      	mov	r7, r0
 8009190:	f7ff ffac 	bl	80090ec <__sfp_lock_acquire>
 8009194:	4b1e      	ldr	r3, [pc, #120]	; (8009210 <__sfp+0x84>)
 8009196:	681e      	ldr	r6, [r3, #0]
 8009198:	69b3      	ldr	r3, [r6, #24]
 800919a:	b913      	cbnz	r3, 80091a2 <__sfp+0x16>
 800919c:	4630      	mov	r0, r6
 800919e:	f7ff ffbd 	bl	800911c <__sinit>
 80091a2:	3648      	adds	r6, #72	; 0x48
 80091a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	d503      	bpl.n	80091b4 <__sfp+0x28>
 80091ac:	6833      	ldr	r3, [r6, #0]
 80091ae:	b30b      	cbz	r3, 80091f4 <__sfp+0x68>
 80091b0:	6836      	ldr	r6, [r6, #0]
 80091b2:	e7f7      	b.n	80091a4 <__sfp+0x18>
 80091b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091b8:	b9d5      	cbnz	r5, 80091f0 <__sfp+0x64>
 80091ba:	4b16      	ldr	r3, [pc, #88]	; (8009214 <__sfp+0x88>)
 80091bc:	60e3      	str	r3, [r4, #12]
 80091be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091c2:	6665      	str	r5, [r4, #100]	; 0x64
 80091c4:	f000 f847 	bl	8009256 <__retarget_lock_init_recursive>
 80091c8:	f7ff ff96 	bl	80090f8 <__sfp_lock_release>
 80091cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091d4:	6025      	str	r5, [r4, #0]
 80091d6:	61a5      	str	r5, [r4, #24]
 80091d8:	2208      	movs	r2, #8
 80091da:	4629      	mov	r1, r5
 80091dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091e0:	f7ff fd0a 	bl	8008bf8 <memset>
 80091e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091ec:	4620      	mov	r0, r4
 80091ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091f0:	3468      	adds	r4, #104	; 0x68
 80091f2:	e7d9      	b.n	80091a8 <__sfp+0x1c>
 80091f4:	2104      	movs	r1, #4
 80091f6:	4638      	mov	r0, r7
 80091f8:	f7ff ff62 	bl	80090c0 <__sfmoreglue>
 80091fc:	4604      	mov	r4, r0
 80091fe:	6030      	str	r0, [r6, #0]
 8009200:	2800      	cmp	r0, #0
 8009202:	d1d5      	bne.n	80091b0 <__sfp+0x24>
 8009204:	f7ff ff78 	bl	80090f8 <__sfp_lock_release>
 8009208:	230c      	movs	r3, #12
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	e7ee      	b.n	80091ec <__sfp+0x60>
 800920e:	bf00      	nop
 8009210:	08009fec 	.word	0x08009fec
 8009214:	ffff0001 	.word	0xffff0001

08009218 <_fwalk_reent>:
 8009218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800921c:	4606      	mov	r6, r0
 800921e:	4688      	mov	r8, r1
 8009220:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009224:	2700      	movs	r7, #0
 8009226:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800922a:	f1b9 0901 	subs.w	r9, r9, #1
 800922e:	d505      	bpl.n	800923c <_fwalk_reent+0x24>
 8009230:	6824      	ldr	r4, [r4, #0]
 8009232:	2c00      	cmp	r4, #0
 8009234:	d1f7      	bne.n	8009226 <_fwalk_reent+0xe>
 8009236:	4638      	mov	r0, r7
 8009238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800923c:	89ab      	ldrh	r3, [r5, #12]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d907      	bls.n	8009252 <_fwalk_reent+0x3a>
 8009242:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009246:	3301      	adds	r3, #1
 8009248:	d003      	beq.n	8009252 <_fwalk_reent+0x3a>
 800924a:	4629      	mov	r1, r5
 800924c:	4630      	mov	r0, r6
 800924e:	47c0      	blx	r8
 8009250:	4307      	orrs	r7, r0
 8009252:	3568      	adds	r5, #104	; 0x68
 8009254:	e7e9      	b.n	800922a <_fwalk_reent+0x12>

08009256 <__retarget_lock_init_recursive>:
 8009256:	4770      	bx	lr

08009258 <__retarget_lock_acquire_recursive>:
 8009258:	4770      	bx	lr

0800925a <__retarget_lock_release_recursive>:
 800925a:	4770      	bx	lr

0800925c <__swhatbuf_r>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	460e      	mov	r6, r1
 8009260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009264:	2900      	cmp	r1, #0
 8009266:	b096      	sub	sp, #88	; 0x58
 8009268:	4614      	mov	r4, r2
 800926a:	461d      	mov	r5, r3
 800926c:	da08      	bge.n	8009280 <__swhatbuf_r+0x24>
 800926e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	602a      	str	r2, [r5, #0]
 8009276:	061a      	lsls	r2, r3, #24
 8009278:	d410      	bmi.n	800929c <__swhatbuf_r+0x40>
 800927a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800927e:	e00e      	b.n	800929e <__swhatbuf_r+0x42>
 8009280:	466a      	mov	r2, sp
 8009282:	f000 fc97 	bl	8009bb4 <_fstat_r>
 8009286:	2800      	cmp	r0, #0
 8009288:	dbf1      	blt.n	800926e <__swhatbuf_r+0x12>
 800928a:	9a01      	ldr	r2, [sp, #4]
 800928c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009290:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009294:	425a      	negs	r2, r3
 8009296:	415a      	adcs	r2, r3
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	e7ee      	b.n	800927a <__swhatbuf_r+0x1e>
 800929c:	2340      	movs	r3, #64	; 0x40
 800929e:	2000      	movs	r0, #0
 80092a0:	6023      	str	r3, [r4, #0]
 80092a2:	b016      	add	sp, #88	; 0x58
 80092a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080092a8 <__smakebuf_r>:
 80092a8:	898b      	ldrh	r3, [r1, #12]
 80092aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092ac:	079d      	lsls	r5, r3, #30
 80092ae:	4606      	mov	r6, r0
 80092b0:	460c      	mov	r4, r1
 80092b2:	d507      	bpl.n	80092c4 <__smakebuf_r+0x1c>
 80092b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	6123      	str	r3, [r4, #16]
 80092bc:	2301      	movs	r3, #1
 80092be:	6163      	str	r3, [r4, #20]
 80092c0:	b002      	add	sp, #8
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	ab01      	add	r3, sp, #4
 80092c6:	466a      	mov	r2, sp
 80092c8:	f7ff ffc8 	bl	800925c <__swhatbuf_r>
 80092cc:	9900      	ldr	r1, [sp, #0]
 80092ce:	4605      	mov	r5, r0
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 f895 	bl	8009400 <_malloc_r>
 80092d6:	b948      	cbnz	r0, 80092ec <__smakebuf_r+0x44>
 80092d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092dc:	059a      	lsls	r2, r3, #22
 80092de:	d4ef      	bmi.n	80092c0 <__smakebuf_r+0x18>
 80092e0:	f023 0303 	bic.w	r3, r3, #3
 80092e4:	f043 0302 	orr.w	r3, r3, #2
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	e7e3      	b.n	80092b4 <__smakebuf_r+0xc>
 80092ec:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <__smakebuf_r+0x7c>)
 80092ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	6020      	str	r0, [r4, #0]
 80092f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f8:	81a3      	strh	r3, [r4, #12]
 80092fa:	9b00      	ldr	r3, [sp, #0]
 80092fc:	6163      	str	r3, [r4, #20]
 80092fe:	9b01      	ldr	r3, [sp, #4]
 8009300:	6120      	str	r0, [r4, #16]
 8009302:	b15b      	cbz	r3, 800931c <__smakebuf_r+0x74>
 8009304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009308:	4630      	mov	r0, r6
 800930a:	f000 fc65 	bl	8009bd8 <_isatty_r>
 800930e:	b128      	cbz	r0, 800931c <__smakebuf_r+0x74>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f023 0303 	bic.w	r3, r3, #3
 8009316:	f043 0301 	orr.w	r3, r3, #1
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	89a0      	ldrh	r0, [r4, #12]
 800931e:	4305      	orrs	r5, r0
 8009320:	81a5      	strh	r5, [r4, #12]
 8009322:	e7cd      	b.n	80092c0 <__smakebuf_r+0x18>
 8009324:	080090b5 	.word	0x080090b5

08009328 <_free_r>:
 8009328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800932a:	2900      	cmp	r1, #0
 800932c:	d044      	beq.n	80093b8 <_free_r+0x90>
 800932e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009332:	9001      	str	r0, [sp, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	f1a1 0404 	sub.w	r4, r1, #4
 800933a:	bfb8      	it	lt
 800933c:	18e4      	addlt	r4, r4, r3
 800933e:	f000 fc87 	bl	8009c50 <__malloc_lock>
 8009342:	4a1e      	ldr	r2, [pc, #120]	; (80093bc <_free_r+0x94>)
 8009344:	9801      	ldr	r0, [sp, #4]
 8009346:	6813      	ldr	r3, [r2, #0]
 8009348:	b933      	cbnz	r3, 8009358 <_free_r+0x30>
 800934a:	6063      	str	r3, [r4, #4]
 800934c:	6014      	str	r4, [r2, #0]
 800934e:	b003      	add	sp, #12
 8009350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009354:	f000 bc82 	b.w	8009c5c <__malloc_unlock>
 8009358:	42a3      	cmp	r3, r4
 800935a:	d908      	bls.n	800936e <_free_r+0x46>
 800935c:	6825      	ldr	r5, [r4, #0]
 800935e:	1961      	adds	r1, r4, r5
 8009360:	428b      	cmp	r3, r1
 8009362:	bf01      	itttt	eq
 8009364:	6819      	ldreq	r1, [r3, #0]
 8009366:	685b      	ldreq	r3, [r3, #4]
 8009368:	1949      	addeq	r1, r1, r5
 800936a:	6021      	streq	r1, [r4, #0]
 800936c:	e7ed      	b.n	800934a <_free_r+0x22>
 800936e:	461a      	mov	r2, r3
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	b10b      	cbz	r3, 8009378 <_free_r+0x50>
 8009374:	42a3      	cmp	r3, r4
 8009376:	d9fa      	bls.n	800936e <_free_r+0x46>
 8009378:	6811      	ldr	r1, [r2, #0]
 800937a:	1855      	adds	r5, r2, r1
 800937c:	42a5      	cmp	r5, r4
 800937e:	d10b      	bne.n	8009398 <_free_r+0x70>
 8009380:	6824      	ldr	r4, [r4, #0]
 8009382:	4421      	add	r1, r4
 8009384:	1854      	adds	r4, r2, r1
 8009386:	42a3      	cmp	r3, r4
 8009388:	6011      	str	r1, [r2, #0]
 800938a:	d1e0      	bne.n	800934e <_free_r+0x26>
 800938c:	681c      	ldr	r4, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	6053      	str	r3, [r2, #4]
 8009392:	4421      	add	r1, r4
 8009394:	6011      	str	r1, [r2, #0]
 8009396:	e7da      	b.n	800934e <_free_r+0x26>
 8009398:	d902      	bls.n	80093a0 <_free_r+0x78>
 800939a:	230c      	movs	r3, #12
 800939c:	6003      	str	r3, [r0, #0]
 800939e:	e7d6      	b.n	800934e <_free_r+0x26>
 80093a0:	6825      	ldr	r5, [r4, #0]
 80093a2:	1961      	adds	r1, r4, r5
 80093a4:	428b      	cmp	r3, r1
 80093a6:	bf04      	itt	eq
 80093a8:	6819      	ldreq	r1, [r3, #0]
 80093aa:	685b      	ldreq	r3, [r3, #4]
 80093ac:	6063      	str	r3, [r4, #4]
 80093ae:	bf04      	itt	eq
 80093b0:	1949      	addeq	r1, r1, r5
 80093b2:	6021      	streq	r1, [r4, #0]
 80093b4:	6054      	str	r4, [r2, #4]
 80093b6:	e7ca      	b.n	800934e <_free_r+0x26>
 80093b8:	b003      	add	sp, #12
 80093ba:	bd30      	pop	{r4, r5, pc}
 80093bc:	20015d1c 	.word	0x20015d1c

080093c0 <sbrk_aligned>:
 80093c0:	b570      	push	{r4, r5, r6, lr}
 80093c2:	4e0e      	ldr	r6, [pc, #56]	; (80093fc <sbrk_aligned+0x3c>)
 80093c4:	460c      	mov	r4, r1
 80093c6:	6831      	ldr	r1, [r6, #0]
 80093c8:	4605      	mov	r5, r0
 80093ca:	b911      	cbnz	r1, 80093d2 <sbrk_aligned+0x12>
 80093cc:	f000 fb7c 	bl	8009ac8 <_sbrk_r>
 80093d0:	6030      	str	r0, [r6, #0]
 80093d2:	4621      	mov	r1, r4
 80093d4:	4628      	mov	r0, r5
 80093d6:	f000 fb77 	bl	8009ac8 <_sbrk_r>
 80093da:	1c43      	adds	r3, r0, #1
 80093dc:	d00a      	beq.n	80093f4 <sbrk_aligned+0x34>
 80093de:	1cc4      	adds	r4, r0, #3
 80093e0:	f024 0403 	bic.w	r4, r4, #3
 80093e4:	42a0      	cmp	r0, r4
 80093e6:	d007      	beq.n	80093f8 <sbrk_aligned+0x38>
 80093e8:	1a21      	subs	r1, r4, r0
 80093ea:	4628      	mov	r0, r5
 80093ec:	f000 fb6c 	bl	8009ac8 <_sbrk_r>
 80093f0:	3001      	adds	r0, #1
 80093f2:	d101      	bne.n	80093f8 <sbrk_aligned+0x38>
 80093f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80093f8:	4620      	mov	r0, r4
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	20015d20 	.word	0x20015d20

08009400 <_malloc_r>:
 8009400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009404:	1ccd      	adds	r5, r1, #3
 8009406:	f025 0503 	bic.w	r5, r5, #3
 800940a:	3508      	adds	r5, #8
 800940c:	2d0c      	cmp	r5, #12
 800940e:	bf38      	it	cc
 8009410:	250c      	movcc	r5, #12
 8009412:	2d00      	cmp	r5, #0
 8009414:	4607      	mov	r7, r0
 8009416:	db01      	blt.n	800941c <_malloc_r+0x1c>
 8009418:	42a9      	cmp	r1, r5
 800941a:	d905      	bls.n	8009428 <_malloc_r+0x28>
 800941c:	230c      	movs	r3, #12
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	2600      	movs	r6, #0
 8009422:	4630      	mov	r0, r6
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	4e2e      	ldr	r6, [pc, #184]	; (80094e4 <_malloc_r+0xe4>)
 800942a:	f000 fc11 	bl	8009c50 <__malloc_lock>
 800942e:	6833      	ldr	r3, [r6, #0]
 8009430:	461c      	mov	r4, r3
 8009432:	bb34      	cbnz	r4, 8009482 <_malloc_r+0x82>
 8009434:	4629      	mov	r1, r5
 8009436:	4638      	mov	r0, r7
 8009438:	f7ff ffc2 	bl	80093c0 <sbrk_aligned>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	4604      	mov	r4, r0
 8009440:	d14d      	bne.n	80094de <_malloc_r+0xde>
 8009442:	6834      	ldr	r4, [r6, #0]
 8009444:	4626      	mov	r6, r4
 8009446:	2e00      	cmp	r6, #0
 8009448:	d140      	bne.n	80094cc <_malloc_r+0xcc>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	4631      	mov	r1, r6
 800944e:	4638      	mov	r0, r7
 8009450:	eb04 0803 	add.w	r8, r4, r3
 8009454:	f000 fb38 	bl	8009ac8 <_sbrk_r>
 8009458:	4580      	cmp	r8, r0
 800945a:	d13a      	bne.n	80094d2 <_malloc_r+0xd2>
 800945c:	6821      	ldr	r1, [r4, #0]
 800945e:	3503      	adds	r5, #3
 8009460:	1a6d      	subs	r5, r5, r1
 8009462:	f025 0503 	bic.w	r5, r5, #3
 8009466:	3508      	adds	r5, #8
 8009468:	2d0c      	cmp	r5, #12
 800946a:	bf38      	it	cc
 800946c:	250c      	movcc	r5, #12
 800946e:	4629      	mov	r1, r5
 8009470:	4638      	mov	r0, r7
 8009472:	f7ff ffa5 	bl	80093c0 <sbrk_aligned>
 8009476:	3001      	adds	r0, #1
 8009478:	d02b      	beq.n	80094d2 <_malloc_r+0xd2>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	442b      	add	r3, r5
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	e00e      	b.n	80094a0 <_malloc_r+0xa0>
 8009482:	6822      	ldr	r2, [r4, #0]
 8009484:	1b52      	subs	r2, r2, r5
 8009486:	d41e      	bmi.n	80094c6 <_malloc_r+0xc6>
 8009488:	2a0b      	cmp	r2, #11
 800948a:	d916      	bls.n	80094ba <_malloc_r+0xba>
 800948c:	1961      	adds	r1, r4, r5
 800948e:	42a3      	cmp	r3, r4
 8009490:	6025      	str	r5, [r4, #0]
 8009492:	bf18      	it	ne
 8009494:	6059      	strne	r1, [r3, #4]
 8009496:	6863      	ldr	r3, [r4, #4]
 8009498:	bf08      	it	eq
 800949a:	6031      	streq	r1, [r6, #0]
 800949c:	5162      	str	r2, [r4, r5]
 800949e:	604b      	str	r3, [r1, #4]
 80094a0:	4638      	mov	r0, r7
 80094a2:	f104 060b 	add.w	r6, r4, #11
 80094a6:	f000 fbd9 	bl	8009c5c <__malloc_unlock>
 80094aa:	f026 0607 	bic.w	r6, r6, #7
 80094ae:	1d23      	adds	r3, r4, #4
 80094b0:	1af2      	subs	r2, r6, r3
 80094b2:	d0b6      	beq.n	8009422 <_malloc_r+0x22>
 80094b4:	1b9b      	subs	r3, r3, r6
 80094b6:	50a3      	str	r3, [r4, r2]
 80094b8:	e7b3      	b.n	8009422 <_malloc_r+0x22>
 80094ba:	6862      	ldr	r2, [r4, #4]
 80094bc:	42a3      	cmp	r3, r4
 80094be:	bf0c      	ite	eq
 80094c0:	6032      	streq	r2, [r6, #0]
 80094c2:	605a      	strne	r2, [r3, #4]
 80094c4:	e7ec      	b.n	80094a0 <_malloc_r+0xa0>
 80094c6:	4623      	mov	r3, r4
 80094c8:	6864      	ldr	r4, [r4, #4]
 80094ca:	e7b2      	b.n	8009432 <_malloc_r+0x32>
 80094cc:	4634      	mov	r4, r6
 80094ce:	6876      	ldr	r6, [r6, #4]
 80094d0:	e7b9      	b.n	8009446 <_malloc_r+0x46>
 80094d2:	230c      	movs	r3, #12
 80094d4:	603b      	str	r3, [r7, #0]
 80094d6:	4638      	mov	r0, r7
 80094d8:	f000 fbc0 	bl	8009c5c <__malloc_unlock>
 80094dc:	e7a1      	b.n	8009422 <_malloc_r+0x22>
 80094de:	6025      	str	r5, [r4, #0]
 80094e0:	e7de      	b.n	80094a0 <_malloc_r+0xa0>
 80094e2:	bf00      	nop
 80094e4:	20015d1c 	.word	0x20015d1c

080094e8 <__ssputs_r>:
 80094e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094ec:	688e      	ldr	r6, [r1, #8]
 80094ee:	429e      	cmp	r6, r3
 80094f0:	4682      	mov	sl, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	4690      	mov	r8, r2
 80094f6:	461f      	mov	r7, r3
 80094f8:	d838      	bhi.n	800956c <__ssputs_r+0x84>
 80094fa:	898a      	ldrh	r2, [r1, #12]
 80094fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009500:	d032      	beq.n	8009568 <__ssputs_r+0x80>
 8009502:	6825      	ldr	r5, [r4, #0]
 8009504:	6909      	ldr	r1, [r1, #16]
 8009506:	eba5 0901 	sub.w	r9, r5, r1
 800950a:	6965      	ldr	r5, [r4, #20]
 800950c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009514:	3301      	adds	r3, #1
 8009516:	444b      	add	r3, r9
 8009518:	106d      	asrs	r5, r5, #1
 800951a:	429d      	cmp	r5, r3
 800951c:	bf38      	it	cc
 800951e:	461d      	movcc	r5, r3
 8009520:	0553      	lsls	r3, r2, #21
 8009522:	d531      	bpl.n	8009588 <__ssputs_r+0xa0>
 8009524:	4629      	mov	r1, r5
 8009526:	f7ff ff6b 	bl	8009400 <_malloc_r>
 800952a:	4606      	mov	r6, r0
 800952c:	b950      	cbnz	r0, 8009544 <__ssputs_r+0x5c>
 800952e:	230c      	movs	r3, #12
 8009530:	f8ca 3000 	str.w	r3, [sl]
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009544:	6921      	ldr	r1, [r4, #16]
 8009546:	464a      	mov	r2, r9
 8009548:	f7ff fb48 	bl	8008bdc <memcpy>
 800954c:	89a3      	ldrh	r3, [r4, #12]
 800954e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	6126      	str	r6, [r4, #16]
 800955a:	6165      	str	r5, [r4, #20]
 800955c:	444e      	add	r6, r9
 800955e:	eba5 0509 	sub.w	r5, r5, r9
 8009562:	6026      	str	r6, [r4, #0]
 8009564:	60a5      	str	r5, [r4, #8]
 8009566:	463e      	mov	r6, r7
 8009568:	42be      	cmp	r6, r7
 800956a:	d900      	bls.n	800956e <__ssputs_r+0x86>
 800956c:	463e      	mov	r6, r7
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	4632      	mov	r2, r6
 8009572:	4641      	mov	r1, r8
 8009574:	f000 fb52 	bl	8009c1c <memmove>
 8009578:	68a3      	ldr	r3, [r4, #8]
 800957a:	1b9b      	subs	r3, r3, r6
 800957c:	60a3      	str	r3, [r4, #8]
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	4433      	add	r3, r6
 8009582:	6023      	str	r3, [r4, #0]
 8009584:	2000      	movs	r0, #0
 8009586:	e7db      	b.n	8009540 <__ssputs_r+0x58>
 8009588:	462a      	mov	r2, r5
 800958a:	f000 fb6d 	bl	8009c68 <_realloc_r>
 800958e:	4606      	mov	r6, r0
 8009590:	2800      	cmp	r0, #0
 8009592:	d1e1      	bne.n	8009558 <__ssputs_r+0x70>
 8009594:	6921      	ldr	r1, [r4, #16]
 8009596:	4650      	mov	r0, sl
 8009598:	f7ff fec6 	bl	8009328 <_free_r>
 800959c:	e7c7      	b.n	800952e <__ssputs_r+0x46>
	...

080095a0 <_svfiprintf_r>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	4698      	mov	r8, r3
 80095a6:	898b      	ldrh	r3, [r1, #12]
 80095a8:	061b      	lsls	r3, r3, #24
 80095aa:	b09d      	sub	sp, #116	; 0x74
 80095ac:	4607      	mov	r7, r0
 80095ae:	460d      	mov	r5, r1
 80095b0:	4614      	mov	r4, r2
 80095b2:	d50e      	bpl.n	80095d2 <_svfiprintf_r+0x32>
 80095b4:	690b      	ldr	r3, [r1, #16]
 80095b6:	b963      	cbnz	r3, 80095d2 <_svfiprintf_r+0x32>
 80095b8:	2140      	movs	r1, #64	; 0x40
 80095ba:	f7ff ff21 	bl	8009400 <_malloc_r>
 80095be:	6028      	str	r0, [r5, #0]
 80095c0:	6128      	str	r0, [r5, #16]
 80095c2:	b920      	cbnz	r0, 80095ce <_svfiprintf_r+0x2e>
 80095c4:	230c      	movs	r3, #12
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095cc:	e0d1      	b.n	8009772 <_svfiprintf_r+0x1d2>
 80095ce:	2340      	movs	r3, #64	; 0x40
 80095d0:	616b      	str	r3, [r5, #20]
 80095d2:	2300      	movs	r3, #0
 80095d4:	9309      	str	r3, [sp, #36]	; 0x24
 80095d6:	2320      	movs	r3, #32
 80095d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e0:	2330      	movs	r3, #48	; 0x30
 80095e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800978c <_svfiprintf_r+0x1ec>
 80095e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ea:	f04f 0901 	mov.w	r9, #1
 80095ee:	4623      	mov	r3, r4
 80095f0:	469a      	mov	sl, r3
 80095f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f6:	b10a      	cbz	r2, 80095fc <_svfiprintf_r+0x5c>
 80095f8:	2a25      	cmp	r2, #37	; 0x25
 80095fa:	d1f9      	bne.n	80095f0 <_svfiprintf_r+0x50>
 80095fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009600:	d00b      	beq.n	800961a <_svfiprintf_r+0x7a>
 8009602:	465b      	mov	r3, fp
 8009604:	4622      	mov	r2, r4
 8009606:	4629      	mov	r1, r5
 8009608:	4638      	mov	r0, r7
 800960a:	f7ff ff6d 	bl	80094e8 <__ssputs_r>
 800960e:	3001      	adds	r0, #1
 8009610:	f000 80aa 	beq.w	8009768 <_svfiprintf_r+0x1c8>
 8009614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009616:	445a      	add	r2, fp
 8009618:	9209      	str	r2, [sp, #36]	; 0x24
 800961a:	f89a 3000 	ldrb.w	r3, [sl]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 80a2 	beq.w	8009768 <_svfiprintf_r+0x1c8>
 8009624:	2300      	movs	r3, #0
 8009626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800962a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800962e:	f10a 0a01 	add.w	sl, sl, #1
 8009632:	9304      	str	r3, [sp, #16]
 8009634:	9307      	str	r3, [sp, #28]
 8009636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800963a:	931a      	str	r3, [sp, #104]	; 0x68
 800963c:	4654      	mov	r4, sl
 800963e:	2205      	movs	r2, #5
 8009640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009644:	4851      	ldr	r0, [pc, #324]	; (800978c <_svfiprintf_r+0x1ec>)
 8009646:	f7f6 fdcb 	bl	80001e0 <memchr>
 800964a:	9a04      	ldr	r2, [sp, #16]
 800964c:	b9d8      	cbnz	r0, 8009686 <_svfiprintf_r+0xe6>
 800964e:	06d0      	lsls	r0, r2, #27
 8009650:	bf44      	itt	mi
 8009652:	2320      	movmi	r3, #32
 8009654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009658:	0711      	lsls	r1, r2, #28
 800965a:	bf44      	itt	mi
 800965c:	232b      	movmi	r3, #43	; 0x2b
 800965e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009662:	f89a 3000 	ldrb.w	r3, [sl]
 8009666:	2b2a      	cmp	r3, #42	; 0x2a
 8009668:	d015      	beq.n	8009696 <_svfiprintf_r+0xf6>
 800966a:	9a07      	ldr	r2, [sp, #28]
 800966c:	4654      	mov	r4, sl
 800966e:	2000      	movs	r0, #0
 8009670:	f04f 0c0a 	mov.w	ip, #10
 8009674:	4621      	mov	r1, r4
 8009676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800967a:	3b30      	subs	r3, #48	; 0x30
 800967c:	2b09      	cmp	r3, #9
 800967e:	d94e      	bls.n	800971e <_svfiprintf_r+0x17e>
 8009680:	b1b0      	cbz	r0, 80096b0 <_svfiprintf_r+0x110>
 8009682:	9207      	str	r2, [sp, #28]
 8009684:	e014      	b.n	80096b0 <_svfiprintf_r+0x110>
 8009686:	eba0 0308 	sub.w	r3, r0, r8
 800968a:	fa09 f303 	lsl.w	r3, r9, r3
 800968e:	4313      	orrs	r3, r2
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	46a2      	mov	sl, r4
 8009694:	e7d2      	b.n	800963c <_svfiprintf_r+0x9c>
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	1d19      	adds	r1, r3, #4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	9103      	str	r1, [sp, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bfbb      	ittet	lt
 80096a2:	425b      	neglt	r3, r3
 80096a4:	f042 0202 	orrlt.w	r2, r2, #2
 80096a8:	9307      	strge	r3, [sp, #28]
 80096aa:	9307      	strlt	r3, [sp, #28]
 80096ac:	bfb8      	it	lt
 80096ae:	9204      	strlt	r2, [sp, #16]
 80096b0:	7823      	ldrb	r3, [r4, #0]
 80096b2:	2b2e      	cmp	r3, #46	; 0x2e
 80096b4:	d10c      	bne.n	80096d0 <_svfiprintf_r+0x130>
 80096b6:	7863      	ldrb	r3, [r4, #1]
 80096b8:	2b2a      	cmp	r3, #42	; 0x2a
 80096ba:	d135      	bne.n	8009728 <_svfiprintf_r+0x188>
 80096bc:	9b03      	ldr	r3, [sp, #12]
 80096be:	1d1a      	adds	r2, r3, #4
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	9203      	str	r2, [sp, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	bfb8      	it	lt
 80096c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80096cc:	3402      	adds	r4, #2
 80096ce:	9305      	str	r3, [sp, #20]
 80096d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800979c <_svfiprintf_r+0x1fc>
 80096d4:	7821      	ldrb	r1, [r4, #0]
 80096d6:	2203      	movs	r2, #3
 80096d8:	4650      	mov	r0, sl
 80096da:	f7f6 fd81 	bl	80001e0 <memchr>
 80096de:	b140      	cbz	r0, 80096f2 <_svfiprintf_r+0x152>
 80096e0:	2340      	movs	r3, #64	; 0x40
 80096e2:	eba0 000a 	sub.w	r0, r0, sl
 80096e6:	fa03 f000 	lsl.w	r0, r3, r0
 80096ea:	9b04      	ldr	r3, [sp, #16]
 80096ec:	4303      	orrs	r3, r0
 80096ee:	3401      	adds	r4, #1
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f6:	4826      	ldr	r0, [pc, #152]	; (8009790 <_svfiprintf_r+0x1f0>)
 80096f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096fc:	2206      	movs	r2, #6
 80096fe:	f7f6 fd6f 	bl	80001e0 <memchr>
 8009702:	2800      	cmp	r0, #0
 8009704:	d038      	beq.n	8009778 <_svfiprintf_r+0x1d8>
 8009706:	4b23      	ldr	r3, [pc, #140]	; (8009794 <_svfiprintf_r+0x1f4>)
 8009708:	bb1b      	cbnz	r3, 8009752 <_svfiprintf_r+0x1b2>
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	3307      	adds	r3, #7
 800970e:	f023 0307 	bic.w	r3, r3, #7
 8009712:	3308      	adds	r3, #8
 8009714:	9303      	str	r3, [sp, #12]
 8009716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009718:	4433      	add	r3, r6
 800971a:	9309      	str	r3, [sp, #36]	; 0x24
 800971c:	e767      	b.n	80095ee <_svfiprintf_r+0x4e>
 800971e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009722:	460c      	mov	r4, r1
 8009724:	2001      	movs	r0, #1
 8009726:	e7a5      	b.n	8009674 <_svfiprintf_r+0xd4>
 8009728:	2300      	movs	r3, #0
 800972a:	3401      	adds	r4, #1
 800972c:	9305      	str	r3, [sp, #20]
 800972e:	4619      	mov	r1, r3
 8009730:	f04f 0c0a 	mov.w	ip, #10
 8009734:	4620      	mov	r0, r4
 8009736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800973a:	3a30      	subs	r2, #48	; 0x30
 800973c:	2a09      	cmp	r2, #9
 800973e:	d903      	bls.n	8009748 <_svfiprintf_r+0x1a8>
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0c5      	beq.n	80096d0 <_svfiprintf_r+0x130>
 8009744:	9105      	str	r1, [sp, #20]
 8009746:	e7c3      	b.n	80096d0 <_svfiprintf_r+0x130>
 8009748:	fb0c 2101 	mla	r1, ip, r1, r2
 800974c:	4604      	mov	r4, r0
 800974e:	2301      	movs	r3, #1
 8009750:	e7f0      	b.n	8009734 <_svfiprintf_r+0x194>
 8009752:	ab03      	add	r3, sp, #12
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	462a      	mov	r2, r5
 8009758:	4b0f      	ldr	r3, [pc, #60]	; (8009798 <_svfiprintf_r+0x1f8>)
 800975a:	a904      	add	r1, sp, #16
 800975c:	4638      	mov	r0, r7
 800975e:	f3af 8000 	nop.w
 8009762:	1c42      	adds	r2, r0, #1
 8009764:	4606      	mov	r6, r0
 8009766:	d1d6      	bne.n	8009716 <_svfiprintf_r+0x176>
 8009768:	89ab      	ldrh	r3, [r5, #12]
 800976a:	065b      	lsls	r3, r3, #25
 800976c:	f53f af2c 	bmi.w	80095c8 <_svfiprintf_r+0x28>
 8009770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009772:	b01d      	add	sp, #116	; 0x74
 8009774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009778:	ab03      	add	r3, sp, #12
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	462a      	mov	r2, r5
 800977e:	4b06      	ldr	r3, [pc, #24]	; (8009798 <_svfiprintf_r+0x1f8>)
 8009780:	a904      	add	r1, sp, #16
 8009782:	4638      	mov	r0, r7
 8009784:	f000 f87a 	bl	800987c <_printf_i>
 8009788:	e7eb      	b.n	8009762 <_svfiprintf_r+0x1c2>
 800978a:	bf00      	nop
 800978c:	0800a050 	.word	0x0800a050
 8009790:	0800a05a 	.word	0x0800a05a
 8009794:	00000000 	.word	0x00000000
 8009798:	080094e9 	.word	0x080094e9
 800979c:	0800a056 	.word	0x0800a056

080097a0 <_printf_common>:
 80097a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a4:	4616      	mov	r6, r2
 80097a6:	4699      	mov	r9, r3
 80097a8:	688a      	ldr	r2, [r1, #8]
 80097aa:	690b      	ldr	r3, [r1, #16]
 80097ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097b0:	4293      	cmp	r3, r2
 80097b2:	bfb8      	it	lt
 80097b4:	4613      	movlt	r3, r2
 80097b6:	6033      	str	r3, [r6, #0]
 80097b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097bc:	4607      	mov	r7, r0
 80097be:	460c      	mov	r4, r1
 80097c0:	b10a      	cbz	r2, 80097c6 <_printf_common+0x26>
 80097c2:	3301      	adds	r3, #1
 80097c4:	6033      	str	r3, [r6, #0]
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	0699      	lsls	r1, r3, #26
 80097ca:	bf42      	ittt	mi
 80097cc:	6833      	ldrmi	r3, [r6, #0]
 80097ce:	3302      	addmi	r3, #2
 80097d0:	6033      	strmi	r3, [r6, #0]
 80097d2:	6825      	ldr	r5, [r4, #0]
 80097d4:	f015 0506 	ands.w	r5, r5, #6
 80097d8:	d106      	bne.n	80097e8 <_printf_common+0x48>
 80097da:	f104 0a19 	add.w	sl, r4, #25
 80097de:	68e3      	ldr	r3, [r4, #12]
 80097e0:	6832      	ldr	r2, [r6, #0]
 80097e2:	1a9b      	subs	r3, r3, r2
 80097e4:	42ab      	cmp	r3, r5
 80097e6:	dc26      	bgt.n	8009836 <_printf_common+0x96>
 80097e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097ec:	1e13      	subs	r3, r2, #0
 80097ee:	6822      	ldr	r2, [r4, #0]
 80097f0:	bf18      	it	ne
 80097f2:	2301      	movne	r3, #1
 80097f4:	0692      	lsls	r2, r2, #26
 80097f6:	d42b      	bmi.n	8009850 <_printf_common+0xb0>
 80097f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097fc:	4649      	mov	r1, r9
 80097fe:	4638      	mov	r0, r7
 8009800:	47c0      	blx	r8
 8009802:	3001      	adds	r0, #1
 8009804:	d01e      	beq.n	8009844 <_printf_common+0xa4>
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	68e5      	ldr	r5, [r4, #12]
 800980a:	6832      	ldr	r2, [r6, #0]
 800980c:	f003 0306 	and.w	r3, r3, #6
 8009810:	2b04      	cmp	r3, #4
 8009812:	bf08      	it	eq
 8009814:	1aad      	subeq	r5, r5, r2
 8009816:	68a3      	ldr	r3, [r4, #8]
 8009818:	6922      	ldr	r2, [r4, #16]
 800981a:	bf0c      	ite	eq
 800981c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009820:	2500      	movne	r5, #0
 8009822:	4293      	cmp	r3, r2
 8009824:	bfc4      	itt	gt
 8009826:	1a9b      	subgt	r3, r3, r2
 8009828:	18ed      	addgt	r5, r5, r3
 800982a:	2600      	movs	r6, #0
 800982c:	341a      	adds	r4, #26
 800982e:	42b5      	cmp	r5, r6
 8009830:	d11a      	bne.n	8009868 <_printf_common+0xc8>
 8009832:	2000      	movs	r0, #0
 8009834:	e008      	b.n	8009848 <_printf_common+0xa8>
 8009836:	2301      	movs	r3, #1
 8009838:	4652      	mov	r2, sl
 800983a:	4649      	mov	r1, r9
 800983c:	4638      	mov	r0, r7
 800983e:	47c0      	blx	r8
 8009840:	3001      	adds	r0, #1
 8009842:	d103      	bne.n	800984c <_printf_common+0xac>
 8009844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984c:	3501      	adds	r5, #1
 800984e:	e7c6      	b.n	80097de <_printf_common+0x3e>
 8009850:	18e1      	adds	r1, r4, r3
 8009852:	1c5a      	adds	r2, r3, #1
 8009854:	2030      	movs	r0, #48	; 0x30
 8009856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800985a:	4422      	add	r2, r4
 800985c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009864:	3302      	adds	r3, #2
 8009866:	e7c7      	b.n	80097f8 <_printf_common+0x58>
 8009868:	2301      	movs	r3, #1
 800986a:	4622      	mov	r2, r4
 800986c:	4649      	mov	r1, r9
 800986e:	4638      	mov	r0, r7
 8009870:	47c0      	blx	r8
 8009872:	3001      	adds	r0, #1
 8009874:	d0e6      	beq.n	8009844 <_printf_common+0xa4>
 8009876:	3601      	adds	r6, #1
 8009878:	e7d9      	b.n	800982e <_printf_common+0x8e>
	...

0800987c <_printf_i>:
 800987c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009880:	7e0f      	ldrb	r7, [r1, #24]
 8009882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009884:	2f78      	cmp	r7, #120	; 0x78
 8009886:	4691      	mov	r9, r2
 8009888:	4680      	mov	r8, r0
 800988a:	460c      	mov	r4, r1
 800988c:	469a      	mov	sl, r3
 800988e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009892:	d807      	bhi.n	80098a4 <_printf_i+0x28>
 8009894:	2f62      	cmp	r7, #98	; 0x62
 8009896:	d80a      	bhi.n	80098ae <_printf_i+0x32>
 8009898:	2f00      	cmp	r7, #0
 800989a:	f000 80d8 	beq.w	8009a4e <_printf_i+0x1d2>
 800989e:	2f58      	cmp	r7, #88	; 0x58
 80098a0:	f000 80a3 	beq.w	80099ea <_printf_i+0x16e>
 80098a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098ac:	e03a      	b.n	8009924 <_printf_i+0xa8>
 80098ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098b2:	2b15      	cmp	r3, #21
 80098b4:	d8f6      	bhi.n	80098a4 <_printf_i+0x28>
 80098b6:	a101      	add	r1, pc, #4	; (adr r1, 80098bc <_printf_i+0x40>)
 80098b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098bc:	08009915 	.word	0x08009915
 80098c0:	08009929 	.word	0x08009929
 80098c4:	080098a5 	.word	0x080098a5
 80098c8:	080098a5 	.word	0x080098a5
 80098cc:	080098a5 	.word	0x080098a5
 80098d0:	080098a5 	.word	0x080098a5
 80098d4:	08009929 	.word	0x08009929
 80098d8:	080098a5 	.word	0x080098a5
 80098dc:	080098a5 	.word	0x080098a5
 80098e0:	080098a5 	.word	0x080098a5
 80098e4:	080098a5 	.word	0x080098a5
 80098e8:	08009a35 	.word	0x08009a35
 80098ec:	08009959 	.word	0x08009959
 80098f0:	08009a17 	.word	0x08009a17
 80098f4:	080098a5 	.word	0x080098a5
 80098f8:	080098a5 	.word	0x080098a5
 80098fc:	08009a57 	.word	0x08009a57
 8009900:	080098a5 	.word	0x080098a5
 8009904:	08009959 	.word	0x08009959
 8009908:	080098a5 	.word	0x080098a5
 800990c:	080098a5 	.word	0x080098a5
 8009910:	08009a1f 	.word	0x08009a1f
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	1d1a      	adds	r2, r3, #4
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	602a      	str	r2, [r5, #0]
 800991c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009924:	2301      	movs	r3, #1
 8009926:	e0a3      	b.n	8009a70 <_printf_i+0x1f4>
 8009928:	6820      	ldr	r0, [r4, #0]
 800992a:	6829      	ldr	r1, [r5, #0]
 800992c:	0606      	lsls	r6, r0, #24
 800992e:	f101 0304 	add.w	r3, r1, #4
 8009932:	d50a      	bpl.n	800994a <_printf_i+0xce>
 8009934:	680e      	ldr	r6, [r1, #0]
 8009936:	602b      	str	r3, [r5, #0]
 8009938:	2e00      	cmp	r6, #0
 800993a:	da03      	bge.n	8009944 <_printf_i+0xc8>
 800993c:	232d      	movs	r3, #45	; 0x2d
 800993e:	4276      	negs	r6, r6
 8009940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009944:	485e      	ldr	r0, [pc, #376]	; (8009ac0 <_printf_i+0x244>)
 8009946:	230a      	movs	r3, #10
 8009948:	e019      	b.n	800997e <_printf_i+0x102>
 800994a:	680e      	ldr	r6, [r1, #0]
 800994c:	602b      	str	r3, [r5, #0]
 800994e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009952:	bf18      	it	ne
 8009954:	b236      	sxthne	r6, r6
 8009956:	e7ef      	b.n	8009938 <_printf_i+0xbc>
 8009958:	682b      	ldr	r3, [r5, #0]
 800995a:	6820      	ldr	r0, [r4, #0]
 800995c:	1d19      	adds	r1, r3, #4
 800995e:	6029      	str	r1, [r5, #0]
 8009960:	0601      	lsls	r1, r0, #24
 8009962:	d501      	bpl.n	8009968 <_printf_i+0xec>
 8009964:	681e      	ldr	r6, [r3, #0]
 8009966:	e002      	b.n	800996e <_printf_i+0xf2>
 8009968:	0646      	lsls	r6, r0, #25
 800996a:	d5fb      	bpl.n	8009964 <_printf_i+0xe8>
 800996c:	881e      	ldrh	r6, [r3, #0]
 800996e:	4854      	ldr	r0, [pc, #336]	; (8009ac0 <_printf_i+0x244>)
 8009970:	2f6f      	cmp	r7, #111	; 0x6f
 8009972:	bf0c      	ite	eq
 8009974:	2308      	moveq	r3, #8
 8009976:	230a      	movne	r3, #10
 8009978:	2100      	movs	r1, #0
 800997a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800997e:	6865      	ldr	r5, [r4, #4]
 8009980:	60a5      	str	r5, [r4, #8]
 8009982:	2d00      	cmp	r5, #0
 8009984:	bfa2      	ittt	ge
 8009986:	6821      	ldrge	r1, [r4, #0]
 8009988:	f021 0104 	bicge.w	r1, r1, #4
 800998c:	6021      	strge	r1, [r4, #0]
 800998e:	b90e      	cbnz	r6, 8009994 <_printf_i+0x118>
 8009990:	2d00      	cmp	r5, #0
 8009992:	d04d      	beq.n	8009a30 <_printf_i+0x1b4>
 8009994:	4615      	mov	r5, r2
 8009996:	fbb6 f1f3 	udiv	r1, r6, r3
 800999a:	fb03 6711 	mls	r7, r3, r1, r6
 800999e:	5dc7      	ldrb	r7, [r0, r7]
 80099a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099a4:	4637      	mov	r7, r6
 80099a6:	42bb      	cmp	r3, r7
 80099a8:	460e      	mov	r6, r1
 80099aa:	d9f4      	bls.n	8009996 <_printf_i+0x11a>
 80099ac:	2b08      	cmp	r3, #8
 80099ae:	d10b      	bne.n	80099c8 <_printf_i+0x14c>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	07de      	lsls	r6, r3, #31
 80099b4:	d508      	bpl.n	80099c8 <_printf_i+0x14c>
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	6861      	ldr	r1, [r4, #4]
 80099ba:	4299      	cmp	r1, r3
 80099bc:	bfde      	ittt	le
 80099be:	2330      	movle	r3, #48	; 0x30
 80099c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80099c8:	1b52      	subs	r2, r2, r5
 80099ca:	6122      	str	r2, [r4, #16]
 80099cc:	f8cd a000 	str.w	sl, [sp]
 80099d0:	464b      	mov	r3, r9
 80099d2:	aa03      	add	r2, sp, #12
 80099d4:	4621      	mov	r1, r4
 80099d6:	4640      	mov	r0, r8
 80099d8:	f7ff fee2 	bl	80097a0 <_printf_common>
 80099dc:	3001      	adds	r0, #1
 80099de:	d14c      	bne.n	8009a7a <_printf_i+0x1fe>
 80099e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099e4:	b004      	add	sp, #16
 80099e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ea:	4835      	ldr	r0, [pc, #212]	; (8009ac0 <_printf_i+0x244>)
 80099ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80099f0:	6829      	ldr	r1, [r5, #0]
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80099f8:	6029      	str	r1, [r5, #0]
 80099fa:	061d      	lsls	r5, r3, #24
 80099fc:	d514      	bpl.n	8009a28 <_printf_i+0x1ac>
 80099fe:	07df      	lsls	r7, r3, #31
 8009a00:	bf44      	itt	mi
 8009a02:	f043 0320 	orrmi.w	r3, r3, #32
 8009a06:	6023      	strmi	r3, [r4, #0]
 8009a08:	b91e      	cbnz	r6, 8009a12 <_printf_i+0x196>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	f023 0320 	bic.w	r3, r3, #32
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	2310      	movs	r3, #16
 8009a14:	e7b0      	b.n	8009978 <_printf_i+0xfc>
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	f043 0320 	orr.w	r3, r3, #32
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	2378      	movs	r3, #120	; 0x78
 8009a20:	4828      	ldr	r0, [pc, #160]	; (8009ac4 <_printf_i+0x248>)
 8009a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a26:	e7e3      	b.n	80099f0 <_printf_i+0x174>
 8009a28:	0659      	lsls	r1, r3, #25
 8009a2a:	bf48      	it	mi
 8009a2c:	b2b6      	uxthmi	r6, r6
 8009a2e:	e7e6      	b.n	80099fe <_printf_i+0x182>
 8009a30:	4615      	mov	r5, r2
 8009a32:	e7bb      	b.n	80099ac <_printf_i+0x130>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	6826      	ldr	r6, [r4, #0]
 8009a38:	6961      	ldr	r1, [r4, #20]
 8009a3a:	1d18      	adds	r0, r3, #4
 8009a3c:	6028      	str	r0, [r5, #0]
 8009a3e:	0635      	lsls	r5, r6, #24
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	d501      	bpl.n	8009a48 <_printf_i+0x1cc>
 8009a44:	6019      	str	r1, [r3, #0]
 8009a46:	e002      	b.n	8009a4e <_printf_i+0x1d2>
 8009a48:	0670      	lsls	r0, r6, #25
 8009a4a:	d5fb      	bpl.n	8009a44 <_printf_i+0x1c8>
 8009a4c:	8019      	strh	r1, [r3, #0]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	6123      	str	r3, [r4, #16]
 8009a52:	4615      	mov	r5, r2
 8009a54:	e7ba      	b.n	80099cc <_printf_i+0x150>
 8009a56:	682b      	ldr	r3, [r5, #0]
 8009a58:	1d1a      	adds	r2, r3, #4
 8009a5a:	602a      	str	r2, [r5, #0]
 8009a5c:	681d      	ldr	r5, [r3, #0]
 8009a5e:	6862      	ldr	r2, [r4, #4]
 8009a60:	2100      	movs	r1, #0
 8009a62:	4628      	mov	r0, r5
 8009a64:	f7f6 fbbc 	bl	80001e0 <memchr>
 8009a68:	b108      	cbz	r0, 8009a6e <_printf_i+0x1f2>
 8009a6a:	1b40      	subs	r0, r0, r5
 8009a6c:	6060      	str	r0, [r4, #4]
 8009a6e:	6863      	ldr	r3, [r4, #4]
 8009a70:	6123      	str	r3, [r4, #16]
 8009a72:	2300      	movs	r3, #0
 8009a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a78:	e7a8      	b.n	80099cc <_printf_i+0x150>
 8009a7a:	6923      	ldr	r3, [r4, #16]
 8009a7c:	462a      	mov	r2, r5
 8009a7e:	4649      	mov	r1, r9
 8009a80:	4640      	mov	r0, r8
 8009a82:	47d0      	blx	sl
 8009a84:	3001      	adds	r0, #1
 8009a86:	d0ab      	beq.n	80099e0 <_printf_i+0x164>
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	079b      	lsls	r3, r3, #30
 8009a8c:	d413      	bmi.n	8009ab6 <_printf_i+0x23a>
 8009a8e:	68e0      	ldr	r0, [r4, #12]
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	4298      	cmp	r0, r3
 8009a94:	bfb8      	it	lt
 8009a96:	4618      	movlt	r0, r3
 8009a98:	e7a4      	b.n	80099e4 <_printf_i+0x168>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	4632      	mov	r2, r6
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	47d0      	blx	sl
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	d09b      	beq.n	80099e0 <_printf_i+0x164>
 8009aa8:	3501      	adds	r5, #1
 8009aaa:	68e3      	ldr	r3, [r4, #12]
 8009aac:	9903      	ldr	r1, [sp, #12]
 8009aae:	1a5b      	subs	r3, r3, r1
 8009ab0:	42ab      	cmp	r3, r5
 8009ab2:	dcf2      	bgt.n	8009a9a <_printf_i+0x21e>
 8009ab4:	e7eb      	b.n	8009a8e <_printf_i+0x212>
 8009ab6:	2500      	movs	r5, #0
 8009ab8:	f104 0619 	add.w	r6, r4, #25
 8009abc:	e7f5      	b.n	8009aaa <_printf_i+0x22e>
 8009abe:	bf00      	nop
 8009ac0:	0800a061 	.word	0x0800a061
 8009ac4:	0800a072 	.word	0x0800a072

08009ac8 <_sbrk_r>:
 8009ac8:	b538      	push	{r3, r4, r5, lr}
 8009aca:	4d06      	ldr	r5, [pc, #24]	; (8009ae4 <_sbrk_r+0x1c>)
 8009acc:	2300      	movs	r3, #0
 8009ace:	4604      	mov	r4, r0
 8009ad0:	4608      	mov	r0, r1
 8009ad2:	602b      	str	r3, [r5, #0]
 8009ad4:	f7f7 fb76 	bl	80011c4 <_sbrk>
 8009ad8:	1c43      	adds	r3, r0, #1
 8009ada:	d102      	bne.n	8009ae2 <_sbrk_r+0x1a>
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	b103      	cbz	r3, 8009ae2 <_sbrk_r+0x1a>
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	bd38      	pop	{r3, r4, r5, pc}
 8009ae4:	20015d24 	.word	0x20015d24

08009ae8 <__sread>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	460c      	mov	r4, r1
 8009aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af0:	f000 f8ea 	bl	8009cc8 <_read_r>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	bfab      	itete	ge
 8009af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009afa:	89a3      	ldrhlt	r3, [r4, #12]
 8009afc:	181b      	addge	r3, r3, r0
 8009afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b02:	bfac      	ite	ge
 8009b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b06:	81a3      	strhlt	r3, [r4, #12]
 8009b08:	bd10      	pop	{r4, pc}

08009b0a <__swrite>:
 8009b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0e:	461f      	mov	r7, r3
 8009b10:	898b      	ldrh	r3, [r1, #12]
 8009b12:	05db      	lsls	r3, r3, #23
 8009b14:	4605      	mov	r5, r0
 8009b16:	460c      	mov	r4, r1
 8009b18:	4616      	mov	r6, r2
 8009b1a:	d505      	bpl.n	8009b28 <__swrite+0x1e>
 8009b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b20:	2302      	movs	r3, #2
 8009b22:	2200      	movs	r2, #0
 8009b24:	f000 f868 	bl	8009bf8 <_lseek_r>
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	4632      	mov	r2, r6
 8009b36:	463b      	mov	r3, r7
 8009b38:	4628      	mov	r0, r5
 8009b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3e:	f000 b817 	b.w	8009b70 <_write_r>

08009b42 <__sseek>:
 8009b42:	b510      	push	{r4, lr}
 8009b44:	460c      	mov	r4, r1
 8009b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b4a:	f000 f855 	bl	8009bf8 <_lseek_r>
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	bf15      	itete	ne
 8009b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b5e:	81a3      	strheq	r3, [r4, #12]
 8009b60:	bf18      	it	ne
 8009b62:	81a3      	strhne	r3, [r4, #12]
 8009b64:	bd10      	pop	{r4, pc}

08009b66 <__sclose>:
 8009b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b6a:	f000 b813 	b.w	8009b94 <_close_r>
	...

08009b70 <_write_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d07      	ldr	r5, [pc, #28]	; (8009b90 <_write_r+0x20>)
 8009b74:	4604      	mov	r4, r0
 8009b76:	4608      	mov	r0, r1
 8009b78:	4611      	mov	r1, r2
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	602a      	str	r2, [r5, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f7f7 facf 	bl	8001122 <_write>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_write_r+0x1e>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_write_r+0x1e>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	20015d24 	.word	0x20015d24

08009b94 <_close_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d06      	ldr	r5, [pc, #24]	; (8009bb0 <_close_r+0x1c>)
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	602b      	str	r3, [r5, #0]
 8009ba0:	f7f7 fadb 	bl	800115a <_close>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_close_r+0x1a>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_close_r+0x1a>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20015d24 	.word	0x20015d24

08009bb4 <_fstat_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4d07      	ldr	r5, [pc, #28]	; (8009bd4 <_fstat_r+0x20>)
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4604      	mov	r4, r0
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	602b      	str	r3, [r5, #0]
 8009bc2:	f7f7 fad6 	bl	8001172 <_fstat>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	d102      	bne.n	8009bd0 <_fstat_r+0x1c>
 8009bca:	682b      	ldr	r3, [r5, #0]
 8009bcc:	b103      	cbz	r3, 8009bd0 <_fstat_r+0x1c>
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	bd38      	pop	{r3, r4, r5, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20015d24 	.word	0x20015d24

08009bd8 <_isatty_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4d06      	ldr	r5, [pc, #24]	; (8009bf4 <_isatty_r+0x1c>)
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	602b      	str	r3, [r5, #0]
 8009be4:	f7f7 fad5 	bl	8001192 <_isatty>
 8009be8:	1c43      	adds	r3, r0, #1
 8009bea:	d102      	bne.n	8009bf2 <_isatty_r+0x1a>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	b103      	cbz	r3, 8009bf2 <_isatty_r+0x1a>
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	bd38      	pop	{r3, r4, r5, pc}
 8009bf4:	20015d24 	.word	0x20015d24

08009bf8 <_lseek_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d07      	ldr	r5, [pc, #28]	; (8009c18 <_lseek_r+0x20>)
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	4608      	mov	r0, r1
 8009c00:	4611      	mov	r1, r2
 8009c02:	2200      	movs	r2, #0
 8009c04:	602a      	str	r2, [r5, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	f7f7 face 	bl	80011a8 <_lseek>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_lseek_r+0x1e>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_lseek_r+0x1e>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	20015d24 	.word	0x20015d24

08009c1c <memmove>:
 8009c1c:	4288      	cmp	r0, r1
 8009c1e:	b510      	push	{r4, lr}
 8009c20:	eb01 0402 	add.w	r4, r1, r2
 8009c24:	d902      	bls.n	8009c2c <memmove+0x10>
 8009c26:	4284      	cmp	r4, r0
 8009c28:	4623      	mov	r3, r4
 8009c2a:	d807      	bhi.n	8009c3c <memmove+0x20>
 8009c2c:	1e43      	subs	r3, r0, #1
 8009c2e:	42a1      	cmp	r1, r4
 8009c30:	d008      	beq.n	8009c44 <memmove+0x28>
 8009c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c3a:	e7f8      	b.n	8009c2e <memmove+0x12>
 8009c3c:	4402      	add	r2, r0
 8009c3e:	4601      	mov	r1, r0
 8009c40:	428a      	cmp	r2, r1
 8009c42:	d100      	bne.n	8009c46 <memmove+0x2a>
 8009c44:	bd10      	pop	{r4, pc}
 8009c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c4e:	e7f7      	b.n	8009c40 <memmove+0x24>

08009c50 <__malloc_lock>:
 8009c50:	4801      	ldr	r0, [pc, #4]	; (8009c58 <__malloc_lock+0x8>)
 8009c52:	f7ff bb01 	b.w	8009258 <__retarget_lock_acquire_recursive>
 8009c56:	bf00      	nop
 8009c58:	20015d18 	.word	0x20015d18

08009c5c <__malloc_unlock>:
 8009c5c:	4801      	ldr	r0, [pc, #4]	; (8009c64 <__malloc_unlock+0x8>)
 8009c5e:	f7ff bafc 	b.w	800925a <__retarget_lock_release_recursive>
 8009c62:	bf00      	nop
 8009c64:	20015d18 	.word	0x20015d18

08009c68 <_realloc_r>:
 8009c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	4614      	mov	r4, r2
 8009c70:	460e      	mov	r6, r1
 8009c72:	b921      	cbnz	r1, 8009c7e <_realloc_r+0x16>
 8009c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c78:	4611      	mov	r1, r2
 8009c7a:	f7ff bbc1 	b.w	8009400 <_malloc_r>
 8009c7e:	b92a      	cbnz	r2, 8009c8c <_realloc_r+0x24>
 8009c80:	f7ff fb52 	bl	8009328 <_free_r>
 8009c84:	4625      	mov	r5, r4
 8009c86:	4628      	mov	r0, r5
 8009c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c8c:	f000 f82e 	bl	8009cec <_malloc_usable_size_r>
 8009c90:	4284      	cmp	r4, r0
 8009c92:	4607      	mov	r7, r0
 8009c94:	d802      	bhi.n	8009c9c <_realloc_r+0x34>
 8009c96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c9a:	d812      	bhi.n	8009cc2 <_realloc_r+0x5a>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	f7ff fbae 	bl	8009400 <_malloc_r>
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d0ed      	beq.n	8009c86 <_realloc_r+0x1e>
 8009caa:	42bc      	cmp	r4, r7
 8009cac:	4622      	mov	r2, r4
 8009cae:	4631      	mov	r1, r6
 8009cb0:	bf28      	it	cs
 8009cb2:	463a      	movcs	r2, r7
 8009cb4:	f7fe ff92 	bl	8008bdc <memcpy>
 8009cb8:	4631      	mov	r1, r6
 8009cba:	4640      	mov	r0, r8
 8009cbc:	f7ff fb34 	bl	8009328 <_free_r>
 8009cc0:	e7e1      	b.n	8009c86 <_realloc_r+0x1e>
 8009cc2:	4635      	mov	r5, r6
 8009cc4:	e7df      	b.n	8009c86 <_realloc_r+0x1e>
	...

08009cc8 <_read_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d07      	ldr	r5, [pc, #28]	; (8009ce8 <_read_r+0x20>)
 8009ccc:	4604      	mov	r4, r0
 8009cce:	4608      	mov	r0, r1
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	602a      	str	r2, [r5, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f7f7 fa06 	bl	80010e8 <_read>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_read_r+0x1e>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_read_r+0x1e>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20015d24 	.word	0x20015d24

08009cec <_malloc_usable_size_r>:
 8009cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf0:	1f18      	subs	r0, r3, #4
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfbc      	itt	lt
 8009cf6:	580b      	ldrlt	r3, [r1, r0]
 8009cf8:	18c0      	addlt	r0, r0, r3
 8009cfa:	4770      	bx	lr

08009cfc <_init>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	bf00      	nop
 8009d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d02:	bc08      	pop	{r3}
 8009d04:	469e      	mov	lr, r3
 8009d06:	4770      	bx	lr

08009d08 <_fini>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr
