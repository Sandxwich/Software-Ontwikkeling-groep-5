
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a760  0800a760  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a760  0800a760  0001a760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a768  0800a768  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a768  0800a768  0001a768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a76c  0800a76c  0001a76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000134a8  20000088  0800a7f8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013530  0800a7f8  00023530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017deb  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003926  00000000  00000000  00037ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b4b  00000000  00000000  0003ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db6b  00000000  00000000  00064913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d13da  00000000  00000000  0008247e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a28  00000000  00000000  001538a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a344 	.word	0x0800a344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a344 	.word	0x0800a344

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006cc:	f000 b974 	b.w	80009b8 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9d08      	ldr	r5, [sp, #32]
 80006ee:	4604      	mov	r4, r0
 80006f0:	468e      	mov	lr, r1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14d      	bne.n	8000792 <__udivmoddi4+0xaa>
 80006f6:	428a      	cmp	r2, r1
 80006f8:	4694      	mov	ip, r2
 80006fa:	d969      	bls.n	80007d0 <__udivmoddi4+0xe8>
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	b152      	cbz	r2, 8000718 <__udivmoddi4+0x30>
 8000702:	fa01 f302 	lsl.w	r3, r1, r2
 8000706:	f1c2 0120 	rsb	r1, r2, #32
 800070a:	fa20 f101 	lsr.w	r1, r0, r1
 800070e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000712:	ea41 0e03 	orr.w	lr, r1, r3
 8000716:	4094      	lsls	r4, r2
 8000718:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800071c:	0c21      	lsrs	r1, r4, #16
 800071e:	fbbe f6f8 	udiv	r6, lr, r8
 8000722:	fa1f f78c 	uxth.w	r7, ip
 8000726:	fb08 e316 	mls	r3, r8, r6, lr
 800072a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800072e:	fb06 f107 	mul.w	r1, r6, r7
 8000732:	4299      	cmp	r1, r3
 8000734:	d90a      	bls.n	800074c <__udivmoddi4+0x64>
 8000736:	eb1c 0303 	adds.w	r3, ip, r3
 800073a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800073e:	f080 811f 	bcs.w	8000980 <__udivmoddi4+0x298>
 8000742:	4299      	cmp	r1, r3
 8000744:	f240 811c 	bls.w	8000980 <__udivmoddi4+0x298>
 8000748:	3e02      	subs	r6, #2
 800074a:	4463      	add	r3, ip
 800074c:	1a5b      	subs	r3, r3, r1
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb3 f0f8 	udiv	r0, r3, r8
 8000754:	fb08 3310 	mls	r3, r8, r0, r3
 8000758:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800075c:	fb00 f707 	mul.w	r7, r0, r7
 8000760:	42a7      	cmp	r7, r4
 8000762:	d90a      	bls.n	800077a <__udivmoddi4+0x92>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800076c:	f080 810a 	bcs.w	8000984 <__udivmoddi4+0x29c>
 8000770:	42a7      	cmp	r7, r4
 8000772:	f240 8107 	bls.w	8000984 <__udivmoddi4+0x29c>
 8000776:	4464      	add	r4, ip
 8000778:	3802      	subs	r0, #2
 800077a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800077e:	1be4      	subs	r4, r4, r7
 8000780:	2600      	movs	r6, #0
 8000782:	b11d      	cbz	r5, 800078c <__udivmoddi4+0xa4>
 8000784:	40d4      	lsrs	r4, r2
 8000786:	2300      	movs	r3, #0
 8000788:	e9c5 4300 	strd	r4, r3, [r5]
 800078c:	4631      	mov	r1, r6
 800078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000792:	428b      	cmp	r3, r1
 8000794:	d909      	bls.n	80007aa <__udivmoddi4+0xc2>
 8000796:	2d00      	cmp	r5, #0
 8000798:	f000 80ef 	beq.w	800097a <__udivmoddi4+0x292>
 800079c:	2600      	movs	r6, #0
 800079e:	e9c5 0100 	strd	r0, r1, [r5]
 80007a2:	4630      	mov	r0, r6
 80007a4:	4631      	mov	r1, r6
 80007a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007aa:	fab3 f683 	clz	r6, r3
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d14a      	bne.n	8000848 <__udivmoddi4+0x160>
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d302      	bcc.n	80007bc <__udivmoddi4+0xd4>
 80007b6:	4282      	cmp	r2, r0
 80007b8:	f200 80f9 	bhi.w	80009ae <__udivmoddi4+0x2c6>
 80007bc:	1a84      	subs	r4, r0, r2
 80007be:	eb61 0303 	sbc.w	r3, r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	469e      	mov	lr, r3
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d0e0      	beq.n	800078c <__udivmoddi4+0xa4>
 80007ca:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ce:	e7dd      	b.n	800078c <__udivmoddi4+0xa4>
 80007d0:	b902      	cbnz	r2, 80007d4 <__udivmoddi4+0xec>
 80007d2:	deff      	udf	#255	; 0xff
 80007d4:	fab2 f282 	clz	r2, r2
 80007d8:	2a00      	cmp	r2, #0
 80007da:	f040 8092 	bne.w	8000902 <__udivmoddi4+0x21a>
 80007de:	eba1 010c 	sub.w	r1, r1, ip
 80007e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007e6:	fa1f fe8c 	uxth.w	lr, ip
 80007ea:	2601      	movs	r6, #1
 80007ec:	0c20      	lsrs	r0, r4, #16
 80007ee:	fbb1 f3f7 	udiv	r3, r1, r7
 80007f2:	fb07 1113 	mls	r1, r7, r3, r1
 80007f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fa:	fb0e f003 	mul.w	r0, lr, r3
 80007fe:	4288      	cmp	r0, r1
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x12c>
 8000802:	eb1c 0101 	adds.w	r1, ip, r1
 8000806:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x12a>
 800080c:	4288      	cmp	r0, r1
 800080e:	f200 80cb 	bhi.w	80009a8 <__udivmoddi4+0x2c0>
 8000812:	4643      	mov	r3, r8
 8000814:	1a09      	subs	r1, r1, r0
 8000816:	b2a4      	uxth	r4, r4
 8000818:	fbb1 f0f7 	udiv	r0, r1, r7
 800081c:	fb07 1110 	mls	r1, r7, r0, r1
 8000820:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000824:	fb0e fe00 	mul.w	lr, lr, r0
 8000828:	45a6      	cmp	lr, r4
 800082a:	d908      	bls.n	800083e <__udivmoddi4+0x156>
 800082c:	eb1c 0404 	adds.w	r4, ip, r4
 8000830:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000834:	d202      	bcs.n	800083c <__udivmoddi4+0x154>
 8000836:	45a6      	cmp	lr, r4
 8000838:	f200 80bb 	bhi.w	80009b2 <__udivmoddi4+0x2ca>
 800083c:	4608      	mov	r0, r1
 800083e:	eba4 040e 	sub.w	r4, r4, lr
 8000842:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000846:	e79c      	b.n	8000782 <__udivmoddi4+0x9a>
 8000848:	f1c6 0720 	rsb	r7, r6, #32
 800084c:	40b3      	lsls	r3, r6
 800084e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000852:	ea4c 0c03 	orr.w	ip, ip, r3
 8000856:	fa20 f407 	lsr.w	r4, r0, r7
 800085a:	fa01 f306 	lsl.w	r3, r1, r6
 800085e:	431c      	orrs	r4, r3
 8000860:	40f9      	lsrs	r1, r7
 8000862:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000866:	fa00 f306 	lsl.w	r3, r0, r6
 800086a:	fbb1 f8f9 	udiv	r8, r1, r9
 800086e:	0c20      	lsrs	r0, r4, #16
 8000870:	fa1f fe8c 	uxth.w	lr, ip
 8000874:	fb09 1118 	mls	r1, r9, r8, r1
 8000878:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800087c:	fb08 f00e 	mul.w	r0, r8, lr
 8000880:	4288      	cmp	r0, r1
 8000882:	fa02 f206 	lsl.w	r2, r2, r6
 8000886:	d90b      	bls.n	80008a0 <__udivmoddi4+0x1b8>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000890:	f080 8088 	bcs.w	80009a4 <__udivmoddi4+0x2bc>
 8000894:	4288      	cmp	r0, r1
 8000896:	f240 8085 	bls.w	80009a4 <__udivmoddi4+0x2bc>
 800089a:	f1a8 0802 	sub.w	r8, r8, #2
 800089e:	4461      	add	r1, ip
 80008a0:	1a09      	subs	r1, r1, r0
 80008a2:	b2a4      	uxth	r4, r4
 80008a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008a8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008b4:	458e      	cmp	lr, r1
 80008b6:	d908      	bls.n	80008ca <__udivmoddi4+0x1e2>
 80008b8:	eb1c 0101 	adds.w	r1, ip, r1
 80008bc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008c0:	d26c      	bcs.n	800099c <__udivmoddi4+0x2b4>
 80008c2:	458e      	cmp	lr, r1
 80008c4:	d96a      	bls.n	800099c <__udivmoddi4+0x2b4>
 80008c6:	3802      	subs	r0, #2
 80008c8:	4461      	add	r1, ip
 80008ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ce:	fba0 9402 	umull	r9, r4, r0, r2
 80008d2:	eba1 010e 	sub.w	r1, r1, lr
 80008d6:	42a1      	cmp	r1, r4
 80008d8:	46c8      	mov	r8, r9
 80008da:	46a6      	mov	lr, r4
 80008dc:	d356      	bcc.n	800098c <__udivmoddi4+0x2a4>
 80008de:	d053      	beq.n	8000988 <__udivmoddi4+0x2a0>
 80008e0:	b15d      	cbz	r5, 80008fa <__udivmoddi4+0x212>
 80008e2:	ebb3 0208 	subs.w	r2, r3, r8
 80008e6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ea:	fa01 f707 	lsl.w	r7, r1, r7
 80008ee:	fa22 f306 	lsr.w	r3, r2, r6
 80008f2:	40f1      	lsrs	r1, r6
 80008f4:	431f      	orrs	r7, r3
 80008f6:	e9c5 7100 	strd	r7, r1, [r5]
 80008fa:	2600      	movs	r6, #0
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	f1c2 0320 	rsb	r3, r2, #32
 8000906:	40d8      	lsrs	r0, r3
 8000908:	fa0c fc02 	lsl.w	ip, ip, r2
 800090c:	fa21 f303 	lsr.w	r3, r1, r3
 8000910:	4091      	lsls	r1, r2
 8000912:	4301      	orrs	r1, r0
 8000914:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000918:	fa1f fe8c 	uxth.w	lr, ip
 800091c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000920:	fb07 3610 	mls	r6, r7, r0, r3
 8000924:	0c0b      	lsrs	r3, r1, #16
 8000926:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800092a:	fb00 f60e 	mul.w	r6, r0, lr
 800092e:	429e      	cmp	r6, r3
 8000930:	fa04 f402 	lsl.w	r4, r4, r2
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x260>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800093e:	d22f      	bcs.n	80009a0 <__udivmoddi4+0x2b8>
 8000940:	429e      	cmp	r6, r3
 8000942:	d92d      	bls.n	80009a0 <__udivmoddi4+0x2b8>
 8000944:	3802      	subs	r0, #2
 8000946:	4463      	add	r3, ip
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	b289      	uxth	r1, r1
 800094c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000950:	fb07 3316 	mls	r3, r7, r6, r3
 8000954:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000958:	fb06 f30e 	mul.w	r3, r6, lr
 800095c:	428b      	cmp	r3, r1
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x28a>
 8000960:	eb1c 0101 	adds.w	r1, ip, r1
 8000964:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000968:	d216      	bcs.n	8000998 <__udivmoddi4+0x2b0>
 800096a:	428b      	cmp	r3, r1
 800096c:	d914      	bls.n	8000998 <__udivmoddi4+0x2b0>
 800096e:	3e02      	subs	r6, #2
 8000970:	4461      	add	r1, ip
 8000972:	1ac9      	subs	r1, r1, r3
 8000974:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000978:	e738      	b.n	80007ec <__udivmoddi4+0x104>
 800097a:	462e      	mov	r6, r5
 800097c:	4628      	mov	r0, r5
 800097e:	e705      	b.n	800078c <__udivmoddi4+0xa4>
 8000980:	4606      	mov	r6, r0
 8000982:	e6e3      	b.n	800074c <__udivmoddi4+0x64>
 8000984:	4618      	mov	r0, r3
 8000986:	e6f8      	b.n	800077a <__udivmoddi4+0x92>
 8000988:	454b      	cmp	r3, r9
 800098a:	d2a9      	bcs.n	80008e0 <__udivmoddi4+0x1f8>
 800098c:	ebb9 0802 	subs.w	r8, r9, r2
 8000990:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000994:	3801      	subs	r0, #1
 8000996:	e7a3      	b.n	80008e0 <__udivmoddi4+0x1f8>
 8000998:	4646      	mov	r6, r8
 800099a:	e7ea      	b.n	8000972 <__udivmoddi4+0x28a>
 800099c:	4620      	mov	r0, r4
 800099e:	e794      	b.n	80008ca <__udivmoddi4+0x1e2>
 80009a0:	4640      	mov	r0, r8
 80009a2:	e7d1      	b.n	8000948 <__udivmoddi4+0x260>
 80009a4:	46d0      	mov	r8, sl
 80009a6:	e77b      	b.n	80008a0 <__udivmoddi4+0x1b8>
 80009a8:	3b02      	subs	r3, #2
 80009aa:	4461      	add	r1, ip
 80009ac:	e732      	b.n	8000814 <__udivmoddi4+0x12c>
 80009ae:	4630      	mov	r0, r6
 80009b0:	e709      	b.n	80007c6 <__udivmoddi4+0xde>
 80009b2:	4464      	add	r4, ip
 80009b4:	3802      	subs	r0, #2
 80009b6:	e742      	b.n	800083e <__udivmoddi4+0x156>

080009b8 <__aeabi_idiv0>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <API_draw_line>:
 * 	bitmap:
 *
 */

int API_draw_line(uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint8_t dikte, uint8_t color)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08d      	sub	sp, #52	; 0x34
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4604      	mov	r4, r0
 80009c4:	4608      	mov	r0, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	4623      	mov	r3, r4
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	4603      	mov	r3, r0
 80009d0:	80bb      	strh	r3, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	807b      	strh	r3, [r7, #2]
 80009d6:	4613      	mov	r3, r2
 80009d8:	803b      	strh	r3, [r7, #0]
	int error = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
	//error checks
//	if(checkcolor(color))
//		return error;

	int dx = x_2 - x_1;
 80009de:	887a      	ldrh	r2, [r7, #2]
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	617b      	str	r3, [r7, #20]
	int dy = y_2 - y_1;
 80009e6:	883a      	ldrh	r2, [r7, #0]
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	613b      	str	r3, [r7, #16]
	int steps;
	if(dx>dy)
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	dd05      	ble.n	8000a02 <API_draw_line+0x46>
	{
		steps = abs(dx);
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	bfb8      	it	lt
 80009fc:	425b      	neglt	r3, r3
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a00:	e012      	b.n	8000a28 <API_draw_line+0x6c>
	}
	else if(dy>dx)
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	dd05      	ble.n	8000a16 <API_draw_line+0x5a>
	{
		steps = abs(dy);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bfb8      	it	lt
 8000a10:	425b      	neglt	r3, r3
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a14:	e008      	b.n	8000a28 <API_draw_line+0x6c>
	}
	else if (dx == dy)
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d104      	bne.n	8000a28 <API_draw_line+0x6c>
	{
		steps = abs(dy);
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	bfb8      	it	lt
 8000a24:	425b      	neglt	r3, r3
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	float xIncrement = (float) dx / steps;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	ee07 3a90 	vmov	s15, r3
 8000a2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	ee07 3a90 	vmov	s15, r3
 8000a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a40:	edc7 7a03 	vstr	s15, [r7, #12]
	float yIncrement = (float) dy / steps;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	ee07 3a90 	vmov	s15, r3
 8000a4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	ee07 3a90 	vmov	s15, r3
 8000a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a5c:	edc7 7a02 	vstr	s15, [r7, #8]
	int i;

	// Set the pixels along the center line of the given thickness
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000a60:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000a64:	085b      	lsrs	r3, r3, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	425b      	negs	r3, r3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e053      	b.n	8000b16 <API_draw_line+0x15a>
		float x = x_1 + 0.5;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd67 	bl	8000544 <__aeabi_i2d>
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <API_draw_line+0x174>)
 8000a7c:	f7ff fc16 	bl	80002ac <__adddf3>
 8000a80:	4602      	mov	r2, r0
 8000a82:	460b      	mov	r3, r1
 8000a84:	4610      	mov	r0, r2
 8000a86:	4619      	mov	r1, r3
 8000a88:	f7ff fdc6 	bl	8000618 <__aeabi_d2f>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
		float y = y_1 + i + 0.5;
 8000a90:	88ba      	ldrh	r2, [r7, #4]
 8000a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a94:	4413      	add	r3, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fd54 	bl	8000544 <__aeabi_i2d>
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <API_draw_line+0x174>)
 8000aa2:	f7ff fc03 	bl	80002ac <__adddf3>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4619      	mov	r1, r3
 8000aae:	f7ff fdb3 	bl	8000618 <__aeabi_d2f>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	623b      	str	r3, [r7, #32]
		int j;
		for (j = 0; j < steps; j++) {
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	e025      	b.n	8000b08 <API_draw_line+0x14c>
			UB_VGA_SetPixel(x, y, color);
 8000abc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ac4:	ee17 3a90 	vmov	r3, s15
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad2:	ee17 2a90 	vmov	r2, s15
 8000ad6:	b291      	uxth	r1, r2
 8000ad8:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 fc35 	bl	800234c <UB_VGA_SetPixel>
			x += xIncrement;
 8000ae2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000ae6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			y += yIncrement;
 8000af2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000af6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000afe:	edc7 7a08 	vstr	s15, [r7, #32]
		for (j = 0; j < steps; j++) {
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fa      	ldr	r2, [r7, #28]
 8000b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbd5      	blt.n	8000abc <API_draw_line+0x100>
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b12:	3301      	adds	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b16:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b22:	4293      	cmp	r3, r2
 8000b24:	dda3      	ble.n	8000a6e <API_draw_line+0xb2>
		}
	}
	return error;
 8000b26:	69bb      	ldr	r3, [r7, #24]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3734      	adds	r7, #52	; 0x34
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	3fe00000 	.word	0x3fe00000

08000b34 <API_draw_rectangle>:
}



int API_draw_rectangle(uint16_t x_lup, uint16_t y_lup, uint16_t breedte, uint16_t hoogte, uint8_t color, uint8_t gevuld)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	4608      	mov	r0, r1
 8000b3e:	4611      	mov	r1, r2
 8000b40:	461a      	mov	r2, r3
 8000b42:	4623      	mov	r3, r4
 8000b44:	80fb      	strh	r3, [r7, #6]
 8000b46:	4603      	mov	r3, r0
 8000b48:	80bb      	strh	r3, [r7, #4]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	807b      	strh	r3, [r7, #2]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	803b      	strh	r3, [r7, #0]
	int xp = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
	int yp = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]

	//draw lines along screen every y-value
	if(gevuld == 1)
 8000b5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d121      	bne.n	8000ba6 <API_draw_rectangle+0x72>
	{
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	e017      	b.n	8000b98 <API_draw_rectangle+0x64>
		{
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	e00b      	b.n	8000b86 <API_draw_rectangle+0x52>
			{
				UB_VGA_SetPixel(xp, yp, color);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	b291      	uxth	r1, r2
 8000b76:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fbe6 	bl	800234c <UB_VGA_SetPixel>
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	88fa      	ldrh	r2, [r7, #6]
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	dbed      	blt.n	8000b6e <API_draw_rectangle+0x3a>
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	88ba      	ldrh	r2, [r7, #4]
 8000b9a:	883b      	ldrh	r3, [r7, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbe1      	blt.n	8000b68 <API_draw_rectangle+0x34>
 8000ba4:	e042      	b.n	8000c2c <API_draw_rectangle+0xf8>
			}
		}
	}

	else if(gevuld == 0)
 8000ba6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d13e      	bne.n	8000c2c <API_draw_rectangle+0xf8>
	{

			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	e035      	b.n	8000c20 <API_draw_rectangle+0xec>
			{
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e029      	b.n	8000c0e <API_draw_rectangle+0xda>
				{
					//draw lines along screen every y-value
					if ((yp == y_lup) || (yp == (y_lup + hoogte)))
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d005      	beq.n	8000bce <API_draw_rectangle+0x9a>
 8000bc2:	88ba      	ldrh	r2, [r7, #4]
 8000bc4:	883b      	ldrh	r3, [r7, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d109      	bne.n	8000be2 <API_draw_rectangle+0xae>
					{
						UB_VGA_SetPixel(xp, yp, color);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	b291      	uxth	r1, r2
 8000bd6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 fbb6 	bl	800234c <UB_VGA_SetPixel>
 8000be0:	e012      	b.n	8000c08 <API_draw_rectangle+0xd4>
					}

					//Draw pixels along screen only at edges
					else if((xp == x_lup) || (xp == (x_lup + breedte)))
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d005      	beq.n	8000bf6 <API_draw_rectangle+0xc2>
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	4413      	add	r3, r2
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d108      	bne.n	8000c08 <API_draw_rectangle+0xd4>
					{
						UB_VGA_SetPixel(xp, yp, color);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	b291      	uxth	r1, r2
 8000bfe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fba2 	bl	800234c <UB_VGA_SetPixel>
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	88fa      	ldrh	r2, [r7, #6]
 8000c10:	887b      	ldrh	r3, [r7, #2]
 8000c12:	4413      	add	r3, r2
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	ddcf      	ble.n	8000bba <API_draw_rectangle+0x86>
			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	88ba      	ldrh	r2, [r7, #4]
 8000c22:	883b      	ldrh	r3, [r7, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	ddc3      	ble.n	8000bb4 <API_draw_rectangle+0x80>
					}
				}
			}
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd90      	pop	{r4, r7, pc}
	...

08000c38 <API_read_bitmap_SD>:
 *
 * @return Returns an error if error or returns nothing
 *
 *****************************************************************************/
int API_read_bitmap_SD(char *nr, uint16_t x_lup, uint16_t y_lup)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000c44:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8000c48:	6018      	str	r0, [r3, #0]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000c52:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8000c56:	4602      	mov	r2, r0
 8000c58:	801a      	strh	r2, [r3, #0]
 8000c5a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000c5e:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8000c62:	460a      	mov	r2, r1
 8000c64:	801a      	strh	r2, [r3, #0]

	// Fatfs variables
	FATFS FatFs;
    FIL fil; 		//File handle
    FRESULT fres; 	//Result after operations
    UINT SizeofBuffer = 30;
 8000c66:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000c6a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8000c6e:	221e      	movs	r2, #30
 8000c70:	601a      	str	r2, [r3, #0]

    //Reading buffer
    uint k = 0; // kijken welk variable we zijn
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

    //Position vga
    uint16_t xp,yp,xp2,yp2;

    xp2 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
    yp2 = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac

    //Information from file system
    unsigned int Height,Width;

    //Creating decimal shift register
	unsigned int ColourFile = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	unsigned int DecimalshiftBuff = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498

	unsigned char i;

	char readBuf[30];

	TCHAR File[] = "00.txt";
 8000c90:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000c94:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000c98:	4a92      	ldr	r2, [pc, #584]	; (8000ee4 <API_read_bitmap_SD+0x2ac>)
 8000c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c9e:	6018      	str	r0, [r3, #0]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	8019      	strh	r1, [r3, #0]
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	0c0a      	lsrs	r2, r1, #16
 8000ca8:	701a      	strb	r2, [r3, #0]

	File[0] = nr[0];		// checked
 8000caa:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000cae:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000cba:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000cbe:	701a      	strb	r2, [r3, #0]
	File[1] = nr[1];
 8000cc0:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000cc4:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	785a      	ldrb	r2, [r3, #1]
 8000ccc:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000cd0:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8000cd4:	705a      	strb	r2, [r3, #1]

	xp = x_lup;
 8000cd6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000cda:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
	yp = y_lup;
 8000ce4:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000ce8:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0


    fres = f_mount(&FatFs, "", 1); //1=mount now
 8000cf2:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	497b      	ldr	r1, [pc, #492]	; (8000ee8 <API_read_bitmap_SD+0x2b0>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f007 fe96 	bl	8008a2c <f_mount>
 8000d00:	4603      	mov	r3, r0
 8000d02:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK)
 8000d06:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d007      	beq.n	8000d1e <API_read_bitmap_SD+0xe6>
    {
    	printf("f_mount error (%i)\r\n", fres);
 8000d0e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000d12:	4619      	mov	r1, r3
 8000d14:	4875      	ldr	r0, [pc, #468]	; (8000eec <API_read_bitmap_SD+0x2b4>)
 8000d16:	f008 fb11 	bl	800933c <iprintf>
    	return 0; //error
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	e0dc      	b.n	8000ed8 <API_read_bitmap_SD+0x2a0>
    }

	fres = f_open(&fil, File, FA_READ);
 8000d1e:	f107 0108 	add.w	r1, r7, #8
 8000d22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d26:	2201      	movs	r2, #1
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f007 fec5 	bl	8008ab8 <f_open>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	if (fres != FR_OK)
 8000d34:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 80ba 	beq.w	8000eb2 <API_read_bitmap_SD+0x27a>
	{
		printf("f_open error (%i)\r\n",fres);
 8000d3e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8000d42:	4619      	mov	r1, r3
 8000d44:	486a      	ldr	r0, [pc, #424]	; (8000ef0 <API_read_bitmap_SD+0x2b8>)
 8000d46:	f008 faf9 	bl	800933c <iprintf>
		return 0; //error
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e0c4      	b.n	8000ed8 <API_read_bitmap_SD+0x2a0>
	}


	while (SizeofBuffer == 30)
	{
		f_read(&fil,(void*)readBuf, 30, &SizeofBuffer);
 8000d4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d52:	f107 0110 	add.w	r1, r7, #16
 8000d56:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000d5a:	221e      	movs	r2, #30
 8000d5c:	f008 f86a 	bl	8008e34 <f_read>
		for (i=0; i<SizeofBuffer; i++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 8000d66:	e09a      	b.n	8000e9e <API_read_bitmap_SD+0x266>
		{

			if (readBuf[i] != 32)
 8000d68:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000d6c:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8000d70:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8000d74:	5cd3      	ldrb	r3, [r2, r3]
 8000d76:	2b20      	cmp	r3, #32
 8000d78:	d019      	beq.n	8000dae <API_read_bitmap_SD+0x176>
			{
				DecimalshiftBuff = readBuf[i]-'0';
 8000d7a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000d7e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8000d82:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8000d86:	5cd3      	ldrb	r3, [r2, r3]
 8000d88:	3b30      	subs	r3, #48	; 0x30
 8000d8a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
				ColourFile *= 10;
 8000d8e:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8000d92:	4613      	mov	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	4413      	add	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
				ColourFile += DecimalshiftBuff;
 8000d9e:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8000da2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8000da6:	4413      	add	r3, r2
 8000da8:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8000dac:	e072      	b.n	8000e94 <API_read_bitmap_SD+0x25c>
			}

			else if(readBuf[i] == 32)
 8000dae:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000db2:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8000db6:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8000dba:	5cd3      	ldrb	r3, [r2, r3]
 8000dbc:	2b20      	cmp	r3, #32
 8000dbe:	d169      	bne.n	8000e94 <API_read_bitmap_SD+0x25c>
			{
				if (k > 1)
 8000dc0:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d94c      	bls.n	8000e62 <API_read_bitmap_SD+0x22a>
				{
					if (xp < VGA_DISPLAY_X && yp < VGA_DISPLAY_Y)
 8000dc8:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8000dcc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000dd0:	d212      	bcs.n	8000df8 <API_read_bitmap_SD+0x1c0>
 8000dd2:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8000dd6:	2bef      	cmp	r3, #239	; 0xef
 8000dd8:	d80e      	bhi.n	8000df8 <API_read_bitmap_SD+0x1c0>
					{
						VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = ColourFile;
 8000dda:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	; 0x4b0
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	019b      	lsls	r3, r3, #6
 8000de6:	441a      	add	r2, r3
 8000de8:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8000dec:	4413      	add	r3, r2
 8000dee:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8000df2:	b2d1      	uxtb	r1, r2
 8000df4:	4a3f      	ldr	r2, [pc, #252]	; (8000ef4 <API_read_bitmap_SD+0x2bc>)
 8000df6:	54d1      	strb	r1, [r2, r3]
					}

					UB_VGA_SetPixel(xp, yp, ColourFile);
 8000df8:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	f8b7 14b0 	ldrh.w	r1, [r7, #1200]	; 0x4b0
 8000e02:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 faa0 	bl	800234c <UB_VGA_SetPixel>
					xp++;
 8000e0c:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8000e10:	3301      	adds	r3, #1
 8000e12:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
					xp2++;
 8000e16:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					if (xp2 >= Width)
 8000e20:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8000e24:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d813      	bhi.n	8000e54 <API_read_bitmap_SD+0x21c>
					{
						yp++;
 8000e2c:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8000e30:	3301      	adds	r3, #1
 8000e32:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0
						yp2++;
 8000e36:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac
						xp = x_lup;
 8000e40:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000e44:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
						xp2 = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					}
					if (yp2 == Height)
 8000e54:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8000e58:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d111      	bne.n	8000e84 <API_read_bitmap_SD+0x24c>
					{
						break;
 8000e60:	e027      	b.n	8000eb2 <API_read_bitmap_SD+0x27a>
					}
				}
				else if (k == 0) // Hoogte van de bit map
 8000e62:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d104      	bne.n	8000e74 <API_read_bitmap_SD+0x23c>
				{
					Height = ColourFile;
 8000e6a:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8000e6e:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8000e72:	e007      	b.n	8000e84 <API_read_bitmap_SD+0x24c>
				}
				else if (k == 1)
 8000e74:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d103      	bne.n	8000e84 <API_read_bitmap_SD+0x24c>
				{
					Width = ColourFile;
 8000e7c:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8000e80:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
				}

				k++;
 8000e84:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000e88:	3301      	adds	r3, #1
 8000e8a:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
				ColourFile = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
		for (i=0; i<SizeofBuffer; i++)
 8000e94:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000e98:	3301      	adds	r3, #1
 8000e9a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 8000e9e:	f897 249f 	ldrb.w	r2, [r7, #1183]	; 0x49f
 8000ea2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000ea6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f4ff af5b 	bcc.w	8000d68 <API_read_bitmap_SD+0x130>
	while (SizeofBuffer == 30)
 8000eb2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8000eb6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b1e      	cmp	r3, #30
 8000ebe:	f43f af46 	beq.w	8000d4e <API_read_bitmap_SD+0x116>
			}

		}
	}

	f_close(&fil);
 8000ec2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f008 f971 	bl	80091ae <f_close>

    f_mount(NULL, "", 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4906      	ldr	r1, [pc, #24]	; (8000ee8 <API_read_bitmap_SD+0x2b0>)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f007 fdab 	bl	8008a2c <f_mount>

	return 0;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f507 6797 	add.w	r7, r7, #1208	; 0x4b8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	0800a3a0 	.word	0x0800a3a0
 8000ee8:	0800a370 	.word	0x0800a370
 8000eec:	0800a374 	.word	0x0800a374
 8000ef0:	0800a38c 	.word	0x0800a38c
 8000ef4:	200007d8 	.word	0x200007d8

08000ef8 <API_blur_screen>:
 *
 * @return Returns an error if error or returns nothing
 *
 *****************************************************************************/
int API_blur_screen()
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
	uint16_t xp, yp;
	uint16_t xp_2, yp_2;
	uint16_t sum = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	81bb      	strh	r3, [r7, #12]
 8000f0a:	e06d      	b.n	8000fe8 <API_blur_screen+0xf0>
	{
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	81fb      	strh	r3, [r7, #14]
 8000f10:	e063      	b.n	8000fda <API_blur_screen+0xe2>
	  {
	    sum = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	80fb      	strh	r3, [r7, #6]
	    i = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	813b      	strh	r3, [r7, #8]
 8000f1e:	e022      	b.n	8000f66 <API_blur_screen+0x6e>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8000f20:	89fb      	ldrh	r3, [r7, #14]
 8000f22:	817b      	strh	r3, [r7, #10]
 8000f24:	e013      	b.n	8000f4e <API_blur_screen+0x56>
	      {
	        sum += VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2];
 8000f26:	893a      	ldrh	r2, [r7, #8]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	019b      	lsls	r3, r3, #6
 8000f30:	441a      	add	r2, r3
 8000f32:	897b      	ldrh	r3, [r7, #10]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a31      	ldr	r2, [pc, #196]	; (8000ffc <API_blur_screen+0x104>)
 8000f38:	5cd3      	ldrb	r3, [r2, r3]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	4413      	add	r3, r2
 8000f40:	80fb      	strh	r3, [r7, #6]
	        i++;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	603b      	str	r3, [r7, #0]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8000f48:	897b      	ldrh	r3, [r7, #10]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	817b      	strh	r3, [r7, #10]
 8000f4e:	89fb      	ldrh	r3, [r7, #14]
 8000f50:	1c9a      	adds	r2, r3, #2
 8000f52:	897b      	ldrh	r3, [r7, #10]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	db03      	blt.n	8000f60 <API_blur_screen+0x68>
 8000f58:	897b      	ldrh	r3, [r7, #10]
 8000f5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f5e:	d3e2      	bcc.n	8000f26 <API_blur_screen+0x2e>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8000f60:	893b      	ldrh	r3, [r7, #8]
 8000f62:	3301      	adds	r3, #1
 8000f64:	813b      	strh	r3, [r7, #8]
 8000f66:	89bb      	ldrh	r3, [r7, #12]
 8000f68:	1c9a      	adds	r2, r3, #2
 8000f6a:	893b      	ldrh	r3, [r7, #8]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	db02      	blt.n	8000f76 <API_blur_screen+0x7e>
 8000f70:	893b      	ldrh	r3, [r7, #8]
 8000f72:	2bef      	cmp	r3, #239	; 0xef
 8000f74:	d9d4      	bls.n	8000f20 <API_blur_screen+0x28>
	      }
	    }
	    sum /= 9;
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	4a21      	ldr	r2, [pc, #132]	; (8001000 <API_blur_screen+0x108>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	085b      	lsrs	r3, r3, #1
 8000f80:	80fb      	strh	r3, [r7, #6]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8000f82:	89bb      	ldrh	r3, [r7, #12]
 8000f84:	813b      	strh	r3, [r7, #8]
 8000f86:	e01d      	b.n	8000fc4 <API_blur_screen+0xcc>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8000f88:	89fb      	ldrh	r3, [r7, #14]
 8000f8a:	817b      	strh	r3, [r7, #10]
 8000f8c:	e00e      	b.n	8000fac <API_blur_screen+0xb4>
	      {
	        VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2] = sum;
 8000f8e:	893a      	ldrh	r2, [r7, #8]
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	019b      	lsls	r3, r3, #6
 8000f98:	441a      	add	r2, r3
 8000f9a:	897b      	ldrh	r3, [r7, #10]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	88fa      	ldrh	r2, [r7, #6]
 8000fa0:	b2d1      	uxtb	r1, r2
 8000fa2:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <API_blur_screen+0x104>)
 8000fa4:	54d1      	strb	r1, [r2, r3]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8000fa6:	897b      	ldrh	r3, [r7, #10]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	817b      	strh	r3, [r7, #10]
 8000fac:	89fb      	ldrh	r3, [r7, #14]
 8000fae:	1c9a      	adds	r2, r3, #2
 8000fb0:	897b      	ldrh	r3, [r7, #10]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	db03      	blt.n	8000fbe <API_blur_screen+0xc6>
 8000fb6:	897b      	ldrh	r3, [r7, #10]
 8000fb8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000fbc:	d3e7      	bcc.n	8000f8e <API_blur_screen+0x96>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8000fbe:	893b      	ldrh	r3, [r7, #8]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	813b      	strh	r3, [r7, #8]
 8000fc4:	89bb      	ldrh	r3, [r7, #12]
 8000fc6:	1c9a      	adds	r2, r3, #2
 8000fc8:	893b      	ldrh	r3, [r7, #8]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	db02      	blt.n	8000fd4 <API_blur_screen+0xdc>
 8000fce:	893b      	ldrh	r3, [r7, #8]
 8000fd0:	2bef      	cmp	r3, #239	; 0xef
 8000fd2:	d9d9      	bls.n	8000f88 <API_blur_screen+0x90>
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 8000fd4:	89fb      	ldrh	r3, [r7, #14]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	81fb      	strh	r3, [r7, #14]
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000fe0:	d397      	bcc.n	8000f12 <API_blur_screen+0x1a>
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 8000fe2:	89bb      	ldrh	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	81bb      	strh	r3, [r7, #12]
 8000fe8:	89bb      	ldrh	r3, [r7, #12]
 8000fea:	2bef      	cmp	r3, #239	; 0xef
 8000fec:	d98e      	bls.n	8000f0c <API_blur_screen+0x14>
	      }
	    }
	  }
	}
	return 0;
 8000fee:	2300      	movs	r3, #0
	}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	200007d8 	.word	0x200007d8
 8001000:	38e38e39 	.word	0x38e38e39

08001004 <wacht>:
 *
 * @return
 *
 *****************************************************************************/
unsigned int wacht(uint16_t msecs)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(msecs);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fa35 	bl	8002480 <HAL_Delay>
	return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <LogicLayer_Parser>:




Message_parser LogicLayer_Parser(char *Message, unsigned int Messagelength)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b0ee      	sub	sp, #440	; 0x1b8
 8001024:	af00      	add	r7, sp, #0
 8001026:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800102a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800102e:	6018      	str	r0, [r3, #0]
 8001030:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001034:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001038:	6019      	str	r1, [r3, #0]
 800103a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800103e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001042:	601a      	str	r2, [r3, #0]
	unsigned int i,j,k,l = 0;			// Maak iterators aan voor het maken van een moving window langs de buffer message
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	i = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	j = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	k = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac


	Message_parser localParser;

	  while (Message[i] != 0) 	// Kijk voor line end
 800105c:	e08d      	b.n	800117a <LogicLayer_Parser+0x15a>
	  {

		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 800105e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001062:	3301      	adds	r3, #1
 8001064:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 8001068:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800106c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001070:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d903      	bls.n	8001082 <LogicLayer_Parser+0x62>
			  {
				  printf("Error , not detected \n");
 800107a:	4856      	ldr	r0, [pc, #344]	; (80011d4 <LogicLayer_Parser+0x1b4>)
 800107c:	f008 f9e4 	bl	8009448 <puts>
				  break;
 8001080:	e015      	b.n	80010ae <LogicLayer_Parser+0x8e>
		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
 8001082:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001086:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b2c      	cmp	r3, #44	; 0x2c
 8001096:	d00a      	beq.n	80010ae <LogicLayer_Parser+0x8e>
 8001098:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800109c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1d7      	bne.n	800105e <LogicLayer_Parser+0x3e>
			  }
		  }

	  	  for (l=0; j<i; j++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80010b4:	e023      	b.n	80010fe <LogicLayer_Parser+0xde>
	  	  {
	  		localParser.Parser_Message[k][l] = Message[j];
 80010b6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80010ba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010c4:	4413      	add	r3, r2
 80010c6:	7818      	ldrb	r0, [r3, #0]
 80010c8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80010cc:	f5a3 71d2 	sub.w	r1, r3, #420	; 0x1a4
 80010d0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80010d4:	4613      	mov	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	18ca      	adds	r2, r1, r3
 80010de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010e2:	4413      	add	r3, r2
 80010e4:	3301      	adds	r3, #1
 80010e6:	4602      	mov	r2, r0
 80010e8:	701a      	strb	r2, [r3, #0]
	  		l++;
 80010ea:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80010ee:	3301      	adds	r3, #1
 80010f0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  	  for (l=0; j<i; j++)
 80010f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80010f8:	3301      	adds	r3, #1
 80010fa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80010fe:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8001102:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001106:	429a      	cmp	r2, r3
 8001108:	d3d5      	bcc.n	80010b6 <LogicLayer_Parser+0x96>
	  	  }

	  	  j = i+1;
 800110a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800110e:	3301      	adds	r3, #1
 8001110:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	  	  if (Message[j] == 0x20)	// checking for spaces between lines
 8001114:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001118:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001122:	4413      	add	r3, r2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b20      	cmp	r3, #32
 8001128:	d104      	bne.n	8001134 <LogicLayer_Parser+0x114>
	  	  {
	  		  j++;
 800112a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800112e:	3301      	adds	r3, #1
 8001130:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  	  }

	  	  localParser.Parser_Message[k][l] = '\0';
 8001134:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001138:	f5a3 71d2 	sub.w	r1, r3, #420	; 0x1a4
 800113c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	18ca      	adds	r2, r1, r3
 800114a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800114e:	4413      	add	r3, r2
 8001150:	3301      	adds	r3, #1
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]

	  	  i++;		//verhoog de iterator om niet in een oneindige loop te komen ivm while loop en komma detectie
 8001156:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800115a:	3301      	adds	r3, #1
 800115c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

	  	  k=(k+1);	//verhoog iterator voor meerdere berichten opslag
 8001160:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001164:	3301      	adds	r3, #1
 8001166:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 800116a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800116e:	2b14      	cmp	r3, #20
 8001170:	d903      	bls.n	800117a <LogicLayer_Parser+0x15a>
	  	  	  {
	  		  	  printf("Error no message end detected \n");
 8001172:	4819      	ldr	r0, [pc, #100]	; (80011d8 <LogicLayer_Parser+0x1b8>)
 8001174:	f008 f968 	bl	8009448 <puts>
	  		  	  break;
 8001178:	e00b      	b.n	8001192 <LogicLayer_Parser+0x172>
	  while (Message[i] != 0) 	// Kijk voor line end
 800117a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800117e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001188:	4413      	add	r3, r2
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	f47f af78 	bne.w	8001082 <LogicLayer_Parser+0x62>
	  	  	  }

	  }

	localParser.Variable_length = k;
 8001192:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001196:	b2da      	uxtb	r2, r3
 8001198:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800119c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80011a0:	701a      	strb	r2, [r3, #0]

	return localParser;
 80011a2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80011a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80011b0:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f240 1391 	movw	r3, #401	; 0x191
 80011bc:	461a      	mov	r2, r3
 80011be:	f008 f8a7 	bl	8009310 <memcpy>
}
 80011c2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80011c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0800a3a8 	.word	0x0800a3a8
 80011d8:	0800a3c0 	.word	0x0800a3c0

080011dc <LogicLayer_CommandCheck>:

int LogicLayer_CommandCheck(Message_parser *localParser)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	int i;
	unsigned char stringLength = sizeof(commands_check) / sizeof(commands_check[0]);
 80011e4:	2309      	movs	r3, #9
 80011e6:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCheck = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	727b      	strb	r3, [r7, #9]
	unsigned char stringCorrect = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	72fb      	strb	r3, [r7, #11]

	for (i = 1; i <= stringLength; i++)
 80011f0:	2301      	movs	r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e016      	b.n	8001224 <LogicLayer_CommandCheck+0x48>
	{
		stringCheck = strcmp(localParser->Parser_Message[0],commands_check[i-1]);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	1c58      	adds	r0, r3, #1
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	4613      	mov	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <LogicLayer_CommandCheck+0x64>)
 8001208:	4413      	add	r3, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7fe ffe0 	bl	80001d0 <strcmp>
 8001210:	4603      	mov	r3, r0
 8001212:	727b      	strb	r3, [r7, #9]
		if (stringCheck == 0)
 8001214:	7a7b      	ldrb	r3, [r7, #9]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <LogicLayer_CommandCheck+0x42>
		{
			stringCorrect = i;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	72fb      	strb	r3, [r7, #11]
	for (i = 1; i <= stringLength; i++)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	dde4      	ble.n	80011f6 <LogicLayer_CommandCheck+0x1a>
		}
	}

	if (stringCorrect != 0)
 800122c:	7afb      	ldrb	r3, [r7, #11]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <LogicLayer_CommandCheck+0x5a>
	{
		return stringCorrect;
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	e000      	b.n	8001238 <LogicLayer_CommandCheck+0x5c>
	}
	else return 0;
 8001236:	2300      	movs	r3, #0

}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	0800a434 	.word	0x0800a434

08001244 <LogicLayer_CommandSwitch>:

int LogicLayer_CommandSwitch(Message_parser *localParser, unsigned char Command)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b08d      	sub	sp, #52	; 0x34
 8001248:	af02      	add	r7, sp, #8
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]


	switch (Command)
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	3b01      	subs	r3, #1
 8001254:	2b08      	cmp	r3, #8
 8001256:	f200 8105 	bhi.w	8001464 <LogicLayer_CommandSwitch+0x220>
 800125a:	a201      	add	r2, pc, #4	; (adr r2, 8001260 <LogicLayer_CommandSwitch+0x1c>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001285 	.word	0x08001285
 8001264:	08001337 	.word	0x08001337
 8001268:	08001469 	.word	0x08001469
 800126c:	080013dd 	.word	0x080013dd
 8001270:	08001421 	.word	0x08001421
 8001274:	0800143b 	.word	0x0800143b
 8001278:	08001465 	.word	0x08001465
 800127c:	08001465 	.word	0x08001465
 8001280:	0800145f 	.word	0x0800145f
	{
		case 1:	//lijn
		{
			if (localParser->Variable_length-1 == 6)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b07      	cmp	r3, #7
 800128a:	d152      	bne.n	8001332 <LogicLayer_CommandSwitch+0xee>
			{
			unsigned short x_1, y_1, x_2, y_2;
			unsigned char dikte, color;

			x_1 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3315      	adds	r3, #21
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ffa7 	bl	80001e4 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	2201      	movs	r2, #1
 800129a:	4619      	mov	r1, r3
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f927 	bl	80014f0 <LogicLayer_intToAscii>
 80012a2:	4603      	mov	r3, r0
 80012a4:	827b      	strh	r3, [r7, #18]
			y_1 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3329      	adds	r3, #41	; 0x29
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7fe ff9a 	bl	80001e4 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2202      	movs	r2, #2
 80012b4:	4619      	mov	r1, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f91a 	bl	80014f0 <LogicLayer_intToAscii>
 80012bc:	4603      	mov	r3, r0
 80012be:	823b      	strh	r3, [r7, #16]
			x_2 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[3]), 3);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	333d      	adds	r3, #61	; 0x3d
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7fe ff8d 	bl	80001e4 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2203      	movs	r2, #3
 80012ce:	4619      	mov	r1, r3
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f90d 	bl	80014f0 <LogicLayer_intToAscii>
 80012d6:	4603      	mov	r3, r0
 80012d8:	81fb      	strh	r3, [r7, #14]
			y_2 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[4]), 4);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3351      	adds	r3, #81	; 0x51
 80012de:	4618      	mov	r0, r3
 80012e0:	f7fe ff80 	bl	80001e4 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2204      	movs	r2, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f900 	bl	80014f0 <LogicLayer_intToAscii>
 80012f0:	4603      	mov	r3, r0
 80012f2:	81bb      	strh	r3, [r7, #12]
			color = LogicLayer_ColourCheck(localParser, 5);
 80012f4:	2105      	movs	r1, #5
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f8bc 	bl	8001474 <LogicLayer_ColourCheck>
 80012fc:	4603      	mov	r3, r0
 80012fe:	72fb      	strb	r3, [r7, #11]
			dikte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[6]), 6);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3379      	adds	r3, #121	; 0x79
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ff6d 	bl	80001e4 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	2206      	movs	r2, #6
 800130e:	4619      	mov	r1, r3
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f8ed 	bl	80014f0 <LogicLayer_intToAscii>
 8001316:	4603      	mov	r3, r0
 8001318:	72bb      	strb	r3, [r7, #10]



			API_draw_line(x_1, y_1, x_2, y_2, dikte, color);
 800131a:	89bc      	ldrh	r4, [r7, #12]
 800131c:	89fa      	ldrh	r2, [r7, #14]
 800131e:	8a39      	ldrh	r1, [r7, #16]
 8001320:	8a78      	ldrh	r0, [r7, #18]
 8001322:	7afb      	ldrb	r3, [r7, #11]
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	7abb      	ldrb	r3, [r7, #10]
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	4623      	mov	r3, r4
 800132c:	f7ff fb46 	bl	80009bc <API_draw_line>

			break;
 8001330:	e09b      	b.n	800146a <LogicLayer_CommandSwitch+0x226>
			}
			else return 0;
 8001332:	2300      	movs	r3, #0
 8001334:	e09a      	b.n	800146c <LogicLayer_CommandSwitch+0x228>
		{
			unsigned short x_lup,  y_lup,  breedte,  hoogte;
			unsigned char color, gevuld;


			x_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3315      	adds	r3, #21
 800133a:	4618      	mov	r0, r3
 800133c:	f7fe ff52 	bl	80001e4 <strlen>
 8001340:	4603      	mov	r3, r0
 8001342:	2201      	movs	r2, #1
 8001344:	4619      	mov	r1, r3
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f8d2 	bl	80014f0 <LogicLayer_intToAscii>
 800134c:	4603      	mov	r3, r0
 800134e:	83bb      	strh	r3, [r7, #28]
			y_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3329      	adds	r3, #41	; 0x29
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ff45 	bl	80001e4 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	2202      	movs	r2, #2
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f8c5 	bl	80014f0 <LogicLayer_intToAscii>
 8001366:	4603      	mov	r3, r0
 8001368:	837b      	strh	r3, [r7, #26]
			breedte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[3]), 3);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	333d      	adds	r3, #61	; 0x3d
 800136e:	4618      	mov	r0, r3
 8001370:	f7fe ff38 	bl	80001e4 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	2203      	movs	r2, #3
 8001378:	4619      	mov	r1, r3
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f8b8 	bl	80014f0 <LogicLayer_intToAscii>
 8001380:	4603      	mov	r3, r0
 8001382:	833b      	strh	r3, [r7, #24]
			hoogte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[4]), 4);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3351      	adds	r3, #81	; 0x51
 8001388:	4618      	mov	r0, r3
 800138a:	f7fe ff2b 	bl	80001e4 <strlen>
 800138e:	4603      	mov	r3, r0
 8001390:	2204      	movs	r2, #4
 8001392:	4619      	mov	r1, r3
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f8ab 	bl	80014f0 <LogicLayer_intToAscii>
 800139a:	4603      	mov	r3, r0
 800139c:	82fb      	strh	r3, [r7, #22]

			color = LogicLayer_ColourCheck(localParser, 5);
 800139e:	2105      	movs	r1, #5
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f867 	bl	8001474 <LogicLayer_ColourCheck>
 80013a6:	4603      	mov	r3, r0
 80013a8:	757b      	strb	r3, [r7, #21]
			gevuld = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[6]), 6);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3379      	adds	r3, #121	; 0x79
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7fe ff18 	bl	80001e4 <strlen>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2206      	movs	r2, #6
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f898 	bl	80014f0 <LogicLayer_intToAscii>
 80013c0:	4603      	mov	r3, r0
 80013c2:	753b      	strb	r3, [r7, #20]

			API_draw_rectangle(x_lup, y_lup, breedte, hoogte, color, gevuld);
 80013c4:	8afc      	ldrh	r4, [r7, #22]
 80013c6:	8b3a      	ldrh	r2, [r7, #24]
 80013c8:	8b79      	ldrh	r1, [r7, #26]
 80013ca:	8bb8      	ldrh	r0, [r7, #28]
 80013cc:	7d3b      	ldrb	r3, [r7, #20]
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	7d7b      	ldrb	r3, [r7, #21]
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	4623      	mov	r3, r4
 80013d6:	f7ff fbad 	bl	8000b34 <API_draw_rectangle>

			break;
 80013da:	e046      	b.n	800146a <LogicLayer_CommandSwitch+0x226>
			break;
		}

		case 4: //bitmap
		{
			unsigned short x_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3329      	adds	r3, #41	; 0x29
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe feff 	bl	80001e4 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2202      	movs	r2, #2
 80013ea:	4619      	mov	r1, r3
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f87f 	bl	80014f0 <LogicLayer_intToAscii>
 80013f2:	4603      	mov	r3, r0
 80013f4:	843b      	strh	r3, [r7, #32]
			unsigned short y_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[3]), 3);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	333d      	adds	r3, #61	; 0x3d
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7fe fef2 	bl	80001e4 <strlen>
 8001400:	4603      	mov	r3, r0
 8001402:	2203      	movs	r2, #3
 8001404:	4619      	mov	r1, r3
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f872 	bl	80014f0 <LogicLayer_intToAscii>
 800140c:	4603      	mov	r3, r0
 800140e:	83fb      	strh	r3, [r7, #30]
			API_read_bitmap_SD(localParser->Parser_Message[1], x_lup, y_lup);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3315      	adds	r3, #21
 8001414:	8bfa      	ldrh	r2, [r7, #30]
 8001416:	8c39      	ldrh	r1, [r7, #32]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fc0d 	bl	8000c38 <API_read_bitmap_SD>
			break;
 800141e:	e024      	b.n	800146a <LogicLayer_CommandSwitch+0x226>
		}

		case 5: //clearscherm
		{
			unsigned char color;
			color = LogicLayer_ColourCheck(localParser, 1);
 8001420:	2101      	movs	r1, #1
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f826 	bl	8001474 <LogicLayer_ColourCheck>
 8001428:	4603      	mov	r3, r0
 800142a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			UB_VGA_FillScreen(color);
 800142e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001432:	4618      	mov	r0, r3
 8001434:	f000 ff66 	bl	8002304 <UB_VGA_FillScreen>
			break;
 8001438:	e017      	b.n	800146a <LogicLayer_CommandSwitch+0x226>
		}
		case 6:
		{
			unsigned int msecs = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3315      	adds	r3, #21
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe fed0 	bl	80001e4 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	2201      	movs	r2, #1
 8001448:	4619      	mov	r1, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f850 	bl	80014f0 <LogicLayer_intToAscii>
 8001450:	6278      	str	r0, [r7, #36]	; 0x24
			wacht(msecs);
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fdd4 	bl	8001004 <wacht>
			break;
 800145c:	e005      	b.n	800146a <LogicLayer_CommandSwitch+0x226>
		}
		case 9:
		{
			API_blur_screen();
 800145e:	f7ff fd4b 	bl	8000ef8 <API_blur_screen>
			break;
 8001462:	e002      	b.n	800146a <LogicLayer_CommandSwitch+0x226>
		}
		default:
		{
			return 0;
 8001464:	2300      	movs	r3, #0
 8001466:	e001      	b.n	800146c <LogicLayer_CommandSwitch+0x228>
			break;
 8001468:	bf00      	nop
		}
	}
	return 1;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	372c      	adds	r7, #44	; 0x2c
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}

08001474 <LogicLayer_ColourCheck>:

int LogicLayer_ColourCheck(Message_parser* localParser, unsigned char StructLocation)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	70fb      	strb	r3, [r7, #3]
	int i;
	unsigned char stringLength = sizeof(message_col_string) / sizeof(message_col_string[0])+1;
 8001480:	2310      	movs	r3, #16
 8001482:	72fb      	strb	r3, [r7, #11]
	unsigned char stringCheck = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCorrect = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	727b      	strb	r3, [r7, #9]

	for (i = 1; i < stringLength; i++)
 800148c:	2301      	movs	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	e021      	b.n	80014d6 <LogicLayer_ColourCheck+0x62>
	{
		stringCheck = strcmp(localParser->Parser_Message[StructLocation],message_col_string[i-1]);
 8001492:	78fa      	ldrb	r2, [r7, #3]
 8001494:	4613      	mov	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	4413      	add	r3, r2
 80014a0:	1c58      	adds	r0, r3, #1
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <LogicLayer_ColourCheck+0x74>)
 80014b0:	4413      	add	r3, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7fe fe8c 	bl	80001d0 <strcmp>
 80014b8:	4603      	mov	r3, r0
 80014ba:	72bb      	strb	r3, [r7, #10]
		if (stringCheck == 0)
 80014bc:	7abb      	ldrb	r3, [r7, #10]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d106      	bne.n	80014d0 <LogicLayer_ColourCheck+0x5c>
		{
			return stringCorrect = message_col[i-1];
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <LogicLayer_ColourCheck+0x78>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	727b      	strb	r3, [r7, #9]
 80014cc:	7a7b      	ldrb	r3, [r7, #9]
 80014ce:	e007      	b.n	80014e0 <LogicLayer_ColourCheck+0x6c>
	for (i = 1; i < stringLength; i++)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	3301      	adds	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	7afb      	ldrb	r3, [r7, #11]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	429a      	cmp	r2, r3
 80014dc:	dbd9      	blt.n	8001492 <LogicLayer_ColourCheck+0x1e>
		}
	}


	return 0;
 80014de:	2300      	movs	r3, #0

}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	0800a4e8 	.word	0x0800a4e8
 80014ec:	0800a614 	.word	0x0800a614

080014f0 <LogicLayer_intToAscii>:

unsigned int LogicLayer_intToAscii(Message_parser* localParser, int numbersize, int StructLocation)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	unsigned char i = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	77fb      	strb	r3, [r7, #31]
	unsigned char DecimalshiftBuff = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	75fb      	strb	r3, [r7, #23]
	unsigned int decimalvalue = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 8001508:	2300      	movs	r3, #0
 800150a:	77fb      	strb	r3, [r7, #31]
 800150c:	e025      	b.n	800155a <LogicLayer_intToAscii+0x6a>
	{

			DecimalshiftBuff = localParser->Parser_Message[StructLocation][i];	// making sure array doesnt have a negative number
 800150e:	7ff9      	ldrb	r1, [r7, #31]
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4403      	add	r3, r0
 800151e:	440b      	add	r3, r1
 8001520:	3301      	adds	r3, #1
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	75fb      	strb	r3, [r7, #23]
			if (DecimalshiftBuff < '0' ||  DecimalshiftBuff > '9')
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	2b2f      	cmp	r3, #47	; 0x2f
 800152a:	d902      	bls.n	8001532 <LogicLayer_intToAscii+0x42>
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	2b39      	cmp	r3, #57	; 0x39
 8001530:	d903      	bls.n	800153a <LogicLayer_intToAscii+0x4a>
		{
				printf("Error NaN");
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <LogicLayer_intToAscii+0x7c>)
 8001534:	f007 ff02 	bl	800933c <iprintf>
 8001538:	e00c      	b.n	8001554 <LogicLayer_intToAscii+0x64>
		}
			else
		{
			DecimalshiftBuff -= '0';
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	3b30      	subs	r3, #48	; 0x30
 800153e:	75fb      	strb	r3, [r7, #23]

			decimalvalue *= 10;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
			decimalvalue += DecimalshiftBuff;
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4413      	add	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 8001554:	7ffb      	ldrb	r3, [r7, #31]
 8001556:	3301      	adds	r3, #1
 8001558:	77fb      	strb	r3, [r7, #31]
 800155a:	7ffb      	ldrb	r3, [r7, #31]
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	429a      	cmp	r2, r3
 8001560:	dcd5      	bgt.n	800150e <LogicLayer_intToAscii+0x1e>
		}
	}
	return decimalvalue;
 8001562:	69bb      	ldr	r3, [r7, #24]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	0800a3e0 	.word	0x0800a3e0

08001570 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_DMA_Init+0x3c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <MX_DMA_Init+0x3c>)
 8001580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_DMA_Init+0x3c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2044      	movs	r0, #68	; 0x44
 8001598:	f001 f871 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800159c:	2044      	movs	r0, #68	; 0x44
 800159e:	f001 f88a 	bl	80026b6 <HAL_NVIC_EnableIRQ>

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <MX_GPIO_Init+0x108>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a3a      	ldr	r2, [pc, #232]	; (80016b8 <MX_GPIO_Init+0x108>)
 80015d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <MX_GPIO_Init+0x108>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b34      	ldr	r3, [pc, #208]	; (80016b8 <MX_GPIO_Init+0x108>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a33      	ldr	r2, [pc, #204]	; (80016b8 <MX_GPIO_Init+0x108>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <MX_GPIO_Init+0x108>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <MX_GPIO_Init+0x108>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a2c      	ldr	r2, [pc, #176]	; (80016b8 <MX_GPIO_Init+0x108>)
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <MX_GPIO_Init+0x108>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <MX_GPIO_Init+0x108>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a25      	ldr	r2, [pc, #148]	; (80016b8 <MX_GPIO_Init+0x108>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <MX_GPIO_Init+0x108>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2102      	movs	r1, #2
 800163a:	4820      	ldr	r0, [pc, #128]	; (80016bc <MX_GPIO_Init+0x10c>)
 800163c:	f001 fdf4 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001646:	481e      	ldr	r0, [pc, #120]	; (80016c0 <MX_GPIO_Init+0x110>)
 8001648:	f001 fdee 	bl	8003228 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001652:	481c      	ldr	r0, [pc, #112]	; (80016c4 <MX_GPIO_Init+0x114>)
 8001654:	f001 fde8 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001658:	2302      	movs	r3, #2
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001660:	2301      	movs	r3, #1
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4813      	ldr	r0, [pc, #76]	; (80016bc <MX_GPIO_Init+0x10c>)
 8001670:	f001 fc3e 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001674:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001678:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <MX_GPIO_Init+0x110>)
 800168e:	f001 fc2f 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8001692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <MX_GPIO_Init+0x114>)
 80016ac:	f001 fc20 	bl	8002ef0 <HAL_GPIO_Init>

}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40020400 	.word	0x40020400

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b0eb      	sub	sp, #428	; 0x1ac
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016ce:	f000 fe65 	bl	800239c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d2:	f000 f8c7 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d6:	f7ff ff6b 	bl	80015b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016da:	f7ff ff49 	bl	8001570 <MX_DMA_Init>
  MX_TIM1_Init();
 80016de:	f000 fbb3 	bl	8001e48 <MX_TIM1_Init>
  MX_TIM2_Init();
 80016e2:	f000 fc01 	bl	8001ee8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80016e6:	f000 fd17 	bl	8002118 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80016ea:	f004 ff11 	bl	8006510 <MX_FATFS_Init>
  MX_SPI1_Init();
 80016ee:	f000 f93d 	bl	800196c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80016f2:	f000 fdb5 	bl	8002260 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 80016f6:	2000      	movs	r0, #0
 80016f8:	f000 fe04 	bl	8002304 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 80016fc:	220a      	movs	r2, #10
 80016fe:	210a      	movs	r1, #10
 8001700:	200a      	movs	r0, #10
 8001702:	f000 fe23 	bl	800234c <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2000      	movs	r0, #0
 800170c:	f000 fe1e 	bl	800234c <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	f240 103f 	movw	r0, #319	; 0x13f
 8001718:	f000 fe18 	bl	800234c <UB_VGA_SetPixel>




  unsigned int i = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4



  for(i = 0; i < LINE_BUFLEN; i++)
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001728:	e00b      	b.n	8001742 <main+0x7a>
	  input.line_rx_buffer[i] = 0;
 800172a:	4a49      	ldr	r2, [pc, #292]	; (8001850 <main+0x188>)
 800172c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001730:	4413      	add	r3, r2
 8001732:	3301      	adds	r3, #1
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8001738:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800173c:	3301      	adds	r3, #1
 800173e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001742:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174a:	d3ee      	bcc.n	800172a <main+0x62>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 800174c:	4b40      	ldr	r3, [pc, #256]	; (8001850 <main+0x188>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8001752:	4b3f      	ldr	r3, [pc, #252]	; (8001850 <main+0x188>)
 8001754:	2200      	movs	r2, #0
 8001756:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <main+0x188>)
 800175c:	2200      	movs	r2, #0
 800175e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, LINE_BUFLEN);
 8001762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001766:	493a      	ldr	r1, [pc, #232]	; (8001850 <main+0x188>)
 8001768:	483a      	ldr	r0, [pc, #232]	; (8001854 <main+0x18c>)
 800176a:	f003 ff2e 	bl	80055ca <HAL_UART_Receive_IT>

  int Test = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <main+0x188>)
 8001776:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800177a:	2bff      	cmp	r3, #255	; 0xff
 800177c:	d1fa      	bne.n	8001774 <main+0xac>
	  {
		  Debugging = LogicLayer_Parser(input.line_rx_buffer, LINE_BUFLEN);
 800177e:	4c36      	ldr	r4, [pc, #216]	; (8001858 <main+0x190>)
 8001780:	463b      	mov	r3, r7
 8001782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001786:	4935      	ldr	r1, [pc, #212]	; (800185c <main+0x194>)
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fc49 	bl	8001020 <LogicLayer_Parser>
 800178e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001792:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001796:	4620      	mov	r0, r4
 8001798:	4619      	mov	r1, r3
 800179a:	f240 1391 	movw	r3, #401	; 0x191
 800179e:	461a      	mov	r2, r3
 80017a0:	f007 fdb6 	bl	8009310 <memcpy>
		  Test = LogicLayer_CommandCheck(&Debugging);
 80017a4:	482c      	ldr	r0, [pc, #176]	; (8001858 <main+0x190>)
 80017a6:	f7ff fd19 	bl	80011dc <LogicLayer_CommandCheck>
 80017aa:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
		  if (Test == 0)
 80017ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <main+0xfc>
		  {
			  //error handler
		  }
		  else
		  {
			  LogicLayer_CommandSwitch(&Debugging, Test);
 80017b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4619      	mov	r1, r3
 80017be:	4826      	ldr	r0, [pc, #152]	; (8001858 <main+0x190>)
 80017c0:	f7ff fd40 	bl	8001244 <LogicLayer_CommandSwitch>

		  }
		  for(i = 0; i < LINE_BUFLEN; i++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017ca:	e00b      	b.n	80017e4 <main+0x11c>
			  input.line_rx_buffer[i] = 0;
 80017cc:	4a20      	ldr	r2, [pc, #128]	; (8001850 <main+0x188>)
 80017ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017d2:	4413      	add	r3, r2
 80017d4:	3301      	adds	r3, #1
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
		  for(i = 0; i < LINE_BUFLEN; i++)
 80017da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017de:	3301      	adds	r3, #1
 80017e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80017e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ec:	d3ee      	bcc.n	80017cc <main+0x104>
		  for (i = 0; i < BUFFER_LEN; i++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80017f4:	e01f      	b.n	8001836 <main+0x16e>
			  for (int j = 0; j < BUFFER_LEN; j++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80017fc:	e012      	b.n	8001824 <main+0x15c>
				  Debugging.Parser_Message[i][j] = 0;
 80017fe:	4916      	ldr	r1, [pc, #88]	; (8001858 <main+0x190>)
 8001800:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	18ca      	adds	r2, r1, r3
 800180e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001812:	4413      	add	r3, r2
 8001814:	3301      	adds	r3, #1
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
			  for (int j = 0; j < BUFFER_LEN; j++)
 800181a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800181e:	3301      	adds	r3, #1
 8001820:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001824:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001828:	2b13      	cmp	r3, #19
 800182a:	dde8      	ble.n	80017fe <main+0x136>
		  for (i = 0; i < BUFFER_LEN; i++)
 800182c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001830:	3301      	adds	r3, #1
 8001832:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001836:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800183a:	2b13      	cmp	r3, #19
 800183c:	d9db      	bls.n	80017f6 <main+0x12e>




		  // Do some stuff
		  printf("yes\n");
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <main+0x198>)
 8001840:	f007 fe02 	bl	8009448 <puts>
		  //UB_VGA_FillScreen(colorTest);


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <main+0x188>)
 8001846:	2200      	movs	r2, #0
 8001848:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 800184c:	e792      	b.n	8001774 <main+0xac>
 800184e:	bf00      	nop
 8001850:	200000a4 	.word	0x200000a4
 8001854:	20000794 	.word	0x20000794
 8001858:	200004b4 	.word	0x200004b4
 800185c:	200000a5 	.word	0x200000a5
 8001860:	0800a3ec 	.word	0x0800a3ec

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b094      	sub	sp, #80	; 0x50
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	2230      	movs	r2, #48	; 0x30
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f007 fd5a 	bl	800932c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <SystemClock_Config+0xcc>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	4a27      	ldr	r2, [pc, #156]	; (8001930 <SystemClock_Config+0xcc>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001896:	6413      	str	r3, [r2, #64]	; 0x40
 8001898:	4b25      	ldr	r3, [pc, #148]	; (8001930 <SystemClock_Config+0xcc>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <SystemClock_Config+0xd0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a21      	ldr	r2, [pc, #132]	; (8001934 <SystemClock_Config+0xd0>)
 80018ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <SystemClock_Config+0xd0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ca:	2302      	movs	r3, #2
 80018cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018d4:	2304      	movs	r3, #4
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018d8:	23a8      	movs	r3, #168	; 0xa8
 80018da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018dc:	2302      	movs	r3, #2
 80018de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018e0:	2307      	movs	r3, #7
 80018e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 fcb7 	bl	800325c <HAL_RCC_OscConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018f4:	f000 f832 	bl	800195c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f8:	230f      	movs	r3, #15
 80018fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2302      	movs	r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001904:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800190a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2105      	movs	r1, #5
 8001916:	4618      	mov	r0, r3
 8001918:	f001 ff18 	bl	800374c <HAL_RCC_ClockConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001922:	f000 f81b 	bl	800195c <Error_Handler>
  }
}
 8001926:	bf00      	nop
 8001928:	3750      	adds	r7, #80	; 0x50
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000

08001938 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8001940:	1d39      	adds	r1, r7, #4
 8001942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001946:	2201      	movs	r2, #1
 8001948:	4803      	ldr	r0, [pc, #12]	; (8001958 <__io_putchar+0x20>)
 800194a:	f003 fdac 	bl	80054a6 <HAL_UART_Transmit>
	return ch;												//Return the character
 800194e:	687b      	ldr	r3, [r7, #4]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000794 	.word	0x20000794

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001972:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <MX_SPI1_Init+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800197c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_SPI1_Init+0x64>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019a0:	2238      	movs	r2, #56	; 0x38
 80019a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019b8:	220a      	movs	r2, #10
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019be:	f002 f8e5 	bl	8003b8c <HAL_SPI_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019c8:	f7ff ffc8 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000648 	.word	0x20000648
 80019d4:	40013000 	.word	0x40013000

080019d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a28      	ldr	r2, [pc, #160]	; (8001a98 <HAL_SPI_MspInit+0xc0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d149      	bne.n	8001a8e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a3c:	f043 0302 	orr.w	r3, r3, #2
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <HAL_SPI_MspInit+0xc4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a4e:	23c0      	movs	r3, #192	; 0xc0
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a5e:	2305      	movs	r3, #5
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <HAL_SPI_MspInit+0xc8>)
 8001a6a:	f001 fa41 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a6e:	2308      	movs	r3, #8
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a7e:	2305      	movs	r3, #5
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <HAL_SPI_MspInit+0xcc>)
 8001a8a:	f001 fa31 	bl	8002ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40013000 	.word	0x40013000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400

08001aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001abc:	6453      	str	r3, [r2, #68]	; 0x44
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_MspInit+0x4c>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_MspInit+0x4c>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4c:	f000 fc78 	bl	8002440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b58:	4828      	ldr	r0, [pc, #160]	; (8001bfc <TIM2_IRQHandler+0xa8>)
 8001b5a:	f002 fdf3 	bl	8004744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <TIM2_IRQHandler+0xa8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0208 	mvn.w	r2, #8
 8001b66:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001b72:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001b7c:	d905      	bls.n	8001b8a <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8001b84:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <TIM2_IRQHandler+0xb0>)
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001b88:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d802      	bhi.n	8001b98 <TIM2_IRQHandler+0x44>
 8001b92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b96:	e001      	b.n	8001b9c <TIM2_IRQHandler+0x48>
 8001b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <TIM2_IRQHandler+0xb4>)
 8001b9e:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	2b23      	cmp	r3, #35	; 0x23
 8001ba6:	d927      	bls.n	8001bf8 <TIM2_IRQHandler+0xa4>
 8001ba8:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f240 2202 	movw	r2, #514	; 0x202
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d821      	bhi.n	8001bf8 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8001bb4:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <TIM2_IRQHandler+0xb8>)
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <TIM2_IRQHandler+0xb8>)
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <TIM2_IRQHandler+0xbc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a11      	ldr	r2, [pc, #68]	; (8001c10 <TIM2_IRQHandler+0xbc>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <TIM2_IRQHandler+0xc0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <TIM2_IRQHandler+0xc0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001bf4:	4a02      	ldr	r2, [pc, #8]	; (8001c00 <TIM2_IRQHandler+0xac>)
 8001bf6:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200006ec 	.word	0x200006ec
 8001c00:	200134c8 	.word	0x200134c8
 8001c04:	200007d8 	.word	0x200007d8
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40026488 	.word	0x40026488
 8001c10:	40010000 	.word	0x40010000
 8001c14:	20000734 	.word	0x20000734

08001c18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <USART2_IRQHandler+0x70>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b0a      	cmp	r3, #10
 8001c28:	d026      	beq.n	8001c78 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b0d      	cmp	r3, #13
 8001c2e:	d002      	beq.n	8001c36 <USART2_IRQHandler+0x1e>
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b2e      	cmp	r3, #46	; 0x2e
 8001c34:	d10e      	bne.n	8001c54 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <USART2_IRQHandler+0x74>)
 8001c38:	22ff      	movs	r2, #255	; 0xff
 8001c3a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <USART2_IRQHandler+0x74>)
 8001c40:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001c44:	4a11      	ldr	r2, [pc, #68]	; (8001c8c <USART2_IRQHandler+0x74>)
 8001c46:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <USART2_IRQHandler+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001c52:	e011      	b.n	8001c78 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <USART2_IRQHandler+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <USART2_IRQHandler+0x74>)
 8001c5e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <USART2_IRQHandler+0x74>)
 8001c64:	4413      	add	r3, r2
 8001c66:	79fa      	ldrb	r2, [r7, #7]
 8001c68:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8001c6a:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <USART2_IRQHandler+0x74>)
 8001c6c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001c70:	3301      	adds	r3, #1
 8001c72:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <USART2_IRQHandler+0x74>)
 8001c74:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <USART2_IRQHandler+0x78>)
 8001c7a:	f003 fcd7 	bl	800562c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40004400 	.word	0x40004400
 8001c8c:	200000a4 	.word	0x200000a4
 8001c90:	20000794 	.word	0x20000794

08001c94 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8001c98:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <DMA2_Stream5_IRQHandler+0x48>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6a1a      	ldr	r2, [r3, #32]
 8001c9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10f      	bne.n	8001cc8 <DMA2_Stream5_IRQHandler+0x34>
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <DMA2_Stream5_IRQHandler+0x48>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a1a      	ldr	r2, [r3, #32]
 8001cae:	f240 4344 	movw	r3, #1092	; 0x444
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d107      	bne.n	8001cc8 <DMA2_Stream5_IRQHandler+0x34>
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <DMA2_Stream5_IRQHandler+0x48>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <DMA2_Stream5_IRQHandler+0x48>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <DMA2_Stream5_IRQHandler+0x4c>)
 8001cca:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001cce:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001cd0:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <DMA2_Stream5_IRQHandler+0x50>)
 8001cd2:	f000 fea3 	bl	8002a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200006a4 	.word	0x200006a4
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	20000734 	.word	0x20000734

08001ce8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e00a      	b.n	8001d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cfa:	f3af 8000 	nop.w
 8001cfe:	4601      	mov	r1, r0
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	60ba      	str	r2, [r7, #8]
 8001d06:	b2ca      	uxtb	r2, r1
 8001d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbf0      	blt.n	8001cfa <_read+0x12>
	}

return len;
 8001d18:	687b      	ldr	r3, [r7, #4]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e009      	b.n	8001d48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	60ba      	str	r2, [r7, #8]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fdfb 	bl	8001938 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dbf1      	blt.n	8001d34 <_write+0x12>
	}
	return len;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_close>:

int _close(int file)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
	return -1;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d82:	605a      	str	r2, [r3, #4]
	return 0;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <_isatty>:

int _isatty(int file)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
	return 1;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
	return 0;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <_sbrk+0x50>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d102      	bne.n	8001dda <_sbrk+0x16>
		heap_end = &end;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <_sbrk+0x50>)
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <_sbrk+0x54>)
 8001dd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <_sbrk+0x50>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <_sbrk+0x50>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	466a      	mov	r2, sp
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d907      	bls.n	8001dfe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001dee:	f007 fa65 	bl	80092bc <__errno>
 8001df2:	4603      	mov	r3, r0
 8001df4:	220c      	movs	r2, #12
 8001df6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dfc:	e006      	b.n	8001e0c <_sbrk+0x48>
	}

	heap_end += incr;
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <_sbrk+0x50>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	4a03      	ldr	r2, [pc, #12]	; (8001e14 <_sbrk+0x50>)
 8001e08:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200006a0 	.word	0x200006a0
 8001e18:	20013530 	.word	0x20013530

08001e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <SystemInit+0x28>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e26:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <SystemInit+0x28>)
 8001e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SystemInit+0x28>)
 8001e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e36:	609a      	str	r2, [r3, #8]
#endif
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e4e:	f107 0308 	add.w	r3, r7, #8
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e66:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <MX_TIM1_Init+0x9c>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e78:	220b      	movs	r2, #11
 8001e7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e8e:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001e90:	f002 f972 	bl	8004178 <HAL_TIM_Base_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001e9a:	f7ff fd5f 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ea4:	f107 0308 	add.w	r3, r7, #8
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001eac:	f002 fe14 	bl	8004ad8 <HAL_TIM_ConfigClockSource>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8001eb6:	f7ff fd51 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <MX_TIM1_Init+0x98>)
 8001ec8:	f003 fa10 	bl	80052ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001ed2:	f7ff fd43 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200006a4 	.word	0x200006a4
 8001ee4:	40010000 	.word	0x40010000

08001ee8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eee:	f107 0320 	add.w	r3, r7, #32
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
 8001f04:	611a      	str	r2, [r3, #16]
 8001f06:	615a      	str	r2, [r3, #20]
 8001f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001f20:	f640 226b 	movw	r2, #2667	; 0xa6b
 8001f24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f32:	4820      	ldr	r0, [pc, #128]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001f34:	f002 f9d8 	bl	80042e8 <HAL_TIM_PWM_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f3e:	f7ff fd0d 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f4a:	f107 0320 	add.w	r3, r7, #32
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001f52:	f003 f9cb 	bl	80052ec <HAL_TIMEx_MasterConfigSynchronization>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f5c:	f7ff fcfe 	bl	800195c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f60:	2360      	movs	r3, #96	; 0x60
 8001f62:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8001f64:	f240 13bb 	movw	r3, #443	; 0x1bb
 8001f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2208      	movs	r2, #8
 8001f76:	4619      	mov	r1, r3
 8001f78:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001f7a:	f002 fceb 	bl	8004954 <HAL_TIM_PWM_ConfigChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001f84:	f7ff fcea 	bl	800195c <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8001f88:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	220c      	movs	r2, #12
 8001f92:	4619      	mov	r1, r3
 8001f94:	4807      	ldr	r0, [pc, #28]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001f96:	f002 fcdd 	bl	8004954 <HAL_TIM_PWM_ConfigChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001fa0:	f7ff fcdc 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fa4:	4803      	ldr	r0, [pc, #12]	; (8001fb4 <MX_TIM2_Init+0xcc>)
 8001fa6:	f000 f87f 	bl	80020a8 <HAL_TIM_MspPostInit>

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200006ec 	.word	0x200006ec

08001fb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a21      	ldr	r2, [pc, #132]	; (800204c <HAL_TIM_Base_MspInit+0x94>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d13c      	bne.n	8002044 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_TIM_Base_MspInit+0x98>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <HAL_TIM_Base_MspInit+0x98>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_TIM_Base_MspInit+0x98>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8001fe8:	4a1b      	ldr	r2, [pc, #108]	; (8002058 <HAL_TIM_Base_MspInit+0xa0>)
 8001fea:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8001fee:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001ff2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff4:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8001ff6:	2240      	movs	r2, #64	; 0x40
 8001ff8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8002002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002006:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 800201c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002020:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002028:	480a      	ldr	r0, [pc, #40]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 800202a:	f000 fb5f 	bl	80026ec <HAL_DMA_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8002034:	f7ff fc92 	bl	800195c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a06      	ldr	r2, [pc, #24]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 800203c:	621a      	str	r2, [r3, #32]
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_TIM_Base_MspInit+0x9c>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40010000 	.word	0x40010000
 8002050:	40023800 	.word	0x40023800
 8002054:	20000734 	.word	0x20000734
 8002058:	40026488 	.word	0x40026488

0800205c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206c:	d115      	bne.n	800209a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <HAL_TIM_PWM_MspInit+0x48>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <HAL_TIM_PWM_MspInit+0x48>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_TIM_PWM_MspInit+0x48>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	201c      	movs	r0, #28
 8002090:	f000 faf5 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002094:	201c      	movs	r0, #28
 8002096:	f000 fb0e 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800

080020a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c8:	d11e      	bne.n	8002108 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 80020e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020f8:	2301      	movs	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	4619      	mov	r1, r3
 8002102:	4804      	ldr	r0, [pc, #16]	; (8002114 <HAL_TIM_MspPostInit+0x6c>)
 8002104:	f000 fef4 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40020400 	.word	0x40020400

08002118 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_USART2_UART_Init+0x4c>)
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <MX_USART2_UART_Init+0x50>)
 8002120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <MX_USART2_UART_Init+0x4c>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_USART2_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MX_USART2_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <MX_USART2_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_USART2_UART_Init+0x4c>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <MX_USART2_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_USART2_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_USART2_UART_Init+0x4c>)
 8002150:	f003 f95c 	bl	800540c <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800215a:	f7ff fbff 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000794 	.word	0x20000794
 8002168:	40004400 	.word	0x40004400

0800216c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <HAL_UART_MspInit+0x94>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d133      	bne.n	80021f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_UART_MspInit+0x98>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a1b      	ldr	r2, [pc, #108]	; (8002204 <HAL_UART_MspInit+0x98>)
 8002198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_UART_MspInit+0x98>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_UART_MspInit+0x98>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a14      	ldr	r2, [pc, #80]	; (8002204 <HAL_UART_MspInit+0x98>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_UART_MspInit+0x98>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021c6:	230c      	movs	r3, #12
 80021c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021d6:	2307      	movs	r3, #7
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	4809      	ldr	r0, [pc, #36]	; (8002208 <HAL_UART_MspInit+0x9c>)
 80021e2:	f000 fe85 	bl	8002ef0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2026      	movs	r0, #38	; 0x26
 80021ec:	f000 fa47 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021f0:	2026      	movs	r0, #38	; 0x26
 80021f2:	f000 fa60 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021f6:	bf00      	nop
 80021f8:	3728      	adds	r7, #40	; 0x28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40004400 	.word	0x40004400
 8002204:	40023800 	.word	0x40023800
 8002208:	40020000 	.word	0x40020000

0800220c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800220c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002212:	e003      	b.n	800221c <LoopCopyDataInit>

08002214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800221a:	3104      	adds	r1, #4

0800221c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800221c:	480b      	ldr	r0, [pc, #44]	; (800224c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002224:	d3f6      	bcc.n	8002214 <CopyDataInit>
  ldr  r2, =_sbss
 8002226:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002228:	e002      	b.n	8002230 <LoopFillZerobss>

0800222a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800222a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800222c:	f842 3b04 	str.w	r3, [r2], #4

08002230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002234:	d3f9      	bcc.n	800222a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002236:	f7ff fdf1 	bl	8001e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223a:	f007 f845 	bl	80092c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223e:	f7ff fa43 	bl	80016c8 <main>
  bx  lr    
 8002242:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002244:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002248:	0800a770 	.word	0x0800a770
  ldr  r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002250:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8002254:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002258:	20013530 	.word	0x20013530

0800225c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC_IRQHandler>
	...

08002260 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <UB_VGA_Screen_Init+0x84>)
 8002266:	2200      	movs	r2, #0
 8002268:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <UB_VGA_Screen_Init+0x84>)
 800226c:	2200      	movs	r2, #0
 800226e:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <UB_VGA_Screen_Init+0x84>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <UB_VGA_Screen_Init+0x88>)
 8002278:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800227c:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800227e:	481b      	ldr	r0, [pc, #108]	; (80022ec <UB_VGA_Screen_Init+0x8c>)
 8002280:	f001 ffca 	bl	8004218 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002284:	210c      	movs	r1, #12
 8002286:	4819      	ldr	r0, [pc, #100]	; (80022ec <UB_VGA_Screen_Init+0x8c>)
 8002288:	f002 f87e 	bl	8004388 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 800228c:	2108      	movs	r1, #8
 800228e:	4817      	ldr	r0, [pc, #92]	; (80022ec <UB_VGA_Screen_Init+0x8c>)
 8002290:	f002 f942 	bl	8004518 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <UB_VGA_Screen_Init+0x90>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <UB_VGA_Screen_Init+0x90>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <UB_VGA_Screen_Init+0x90>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <UB_VGA_Screen_Init+0x90>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80022b4:	490f      	ldr	r1, [pc, #60]	; (80022f4 <UB_VGA_Screen_Init+0x94>)
 80022b6:	f240 1341 	movw	r3, #321	; 0x141
 80022ba:	4a0f      	ldr	r2, [pc, #60]	; (80022f8 <UB_VGA_Screen_Init+0x98>)
 80022bc:	480f      	ldr	r0, [pc, #60]	; (80022fc <UB_VGA_Screen_Init+0x9c>)
 80022be:	f000 fac3 	bl	8002848 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80022c2:	480e      	ldr	r0, [pc, #56]	; (80022fc <UB_VGA_Screen_Init+0x9c>)
 80022c4:	f000 fa12 	bl	80026ec <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <UB_VGA_Screen_Init+0x9c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <UB_VGA_Screen_Init+0x9c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0210 	orr.w	r2, r2, #16
 80022d6:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <UB_VGA_Screen_Init+0xa0>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a01      	ldr	r2, [pc, #4]	; (80022e4 <UB_VGA_Screen_Init+0x84>)
 80022de:	6093      	str	r3, [r2, #8]
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200134c8 	.word	0x200134c8
 80022e8:	40020400 	.word	0x40020400
 80022ec:	200006ec 	.word	0x200006ec
 80022f0:	200006a4 	.word	0x200006a4
 80022f4:	200007d8 	.word	0x200007d8
 80022f8:	40021015 	.word	0x40021015
 80022fc:	20000734 	.word	0x20000734
 8002300:	40026488 	.word	0x40026488

08002304 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800230e:	2300      	movs	r3, #0
 8002310:	81bb      	strh	r3, [r7, #12]
 8002312:	e012      	b.n	800233a <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002314:	2300      	movs	r3, #0
 8002316:	81fb      	strh	r3, [r7, #14]
 8002318:	e008      	b.n	800232c <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800231a:	79fa      	ldrb	r2, [r7, #7]
 800231c:	89b9      	ldrh	r1, [r7, #12]
 800231e:	89fb      	ldrh	r3, [r7, #14]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 f813 	bl	800234c <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002326:	89fb      	ldrh	r3, [r7, #14]
 8002328:	3301      	adds	r3, #1
 800232a:	81fb      	strh	r3, [r7, #14]
 800232c:	89fb      	ldrh	r3, [r7, #14]
 800232e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002332:	d3f2      	bcc.n	800231a <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8002334:	89bb      	ldrh	r3, [r7, #12]
 8002336:	3301      	adds	r3, #1
 8002338:	81bb      	strh	r3, [r7, #12]
 800233a:	89bb      	ldrh	r3, [r7, #12]
 800233c:	2bef      	cmp	r3, #239	; 0xef
 800233e:	d9e9      	bls.n	8002314 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
 8002356:	460b      	mov	r3, r1
 8002358:	80bb      	strh	r3, [r7, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002364:	d301      	bcc.n	800236a <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800236a:	88bb      	ldrh	r3, [r7, #4]
 800236c:	2bef      	cmp	r3, #239	; 0xef
 800236e:	d901      	bls.n	8002374 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8002374:	88ba      	ldrh	r2, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	019b      	lsls	r3, r3, #6
 800237e:	441a      	add	r2, r3
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	4413      	add	r3, r2
 8002384:	4904      	ldr	r1, [pc, #16]	; (8002398 <UB_VGA_SetPixel+0x4c>)
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	54ca      	strb	r2, [r1, r3]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	200007d8 	.word	0x200007d8

0800239c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0d      	ldr	r2, [pc, #52]	; (80023dc <HAL_Init+0x40>)
 80023a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_Init+0x40>)
 80023b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a07      	ldr	r2, [pc, #28]	; (80023dc <HAL_Init+0x40>)
 80023be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c4:	2003      	movs	r0, #3
 80023c6:	f000 f94f 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023ca:	2000      	movs	r0, #0
 80023cc:	f000 f808 	bl	80023e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023d0:	f7ff fb6a 	bl	8001aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023c00 	.word	0x40023c00

080023e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <HAL_InitTick+0x54>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_InitTick+0x58>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f967 	bl	80026d2 <HAL_SYSTICK_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e00e      	b.n	800242c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b0f      	cmp	r3, #15
 8002412:	d80a      	bhi.n	800242a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002414:	2200      	movs	r2, #0
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800241c:	f000 f92f 	bl	800267e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002420:	4a06      	ldr	r2, [pc, #24]	; (800243c <HAL_InitTick+0x5c>)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000000 	.word	0x20000000
 8002438:	20000008 	.word	0x20000008
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000008 	.word	0x20000008
 8002464:	200134d4 	.word	0x200134d4

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	200134d4 	.word	0x200134d4

08002480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff ffee 	bl	8002468 <HAL_GetTick>
 800248c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002498:	d005      	beq.n	80024a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_Delay+0x44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024a6:	bf00      	nop
 80024a8:	f7ff ffde 	bl	8002468 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d8f7      	bhi.n	80024a8 <HAL_Delay+0x28>
  {
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000008 	.word	0x20000008

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002690:	f7ff ff3e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff ff8e 	bl	80025bc <NVIC_EncodePriority>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff5d 	bl	8002568 <__NVIC_SetPriority>
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff31 	bl	800252c <__NVIC_EnableIRQ>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ffa2 	bl	8002624 <SysTick_Config>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026f8:	f7ff feb6 	bl	8002468 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e099      	b.n	800283c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0201 	bic.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	e00f      	b.n	800274a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272a:	f7ff fe9d 	bl	8002468 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b05      	cmp	r3, #5
 8002736:	d908      	bls.n	800274a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2203      	movs	r2, #3
 8002742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e078      	b.n	800283c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1e8      	bne.n	800272a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4b38      	ldr	r3, [pc, #224]	; (8002844 <HAL_DMA_Init+0x158>)
 8002764:	4013      	ands	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4313      	orrs	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d117      	bne.n	800280e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fb01 	bl	8002df8 <DMA_CheckFifoParam>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800280a:	2301      	movs	r3, #1
 800280c:	e016      	b.n	800283c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fab8 	bl	8002d8c <DMA_CalcBaseAndBitshift>
 800281c:	4603      	mov	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	223f      	movs	r2, #63	; 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f010803f 	.word	0xf010803f

08002848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_DMA_Start_IT+0x26>
 800286a:	2302      	movs	r3, #2
 800286c:	e040      	b.n	80028f0 <HAL_DMA_Start_IT+0xa8>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	d12f      	bne.n	80028e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 fa4a 	bl	8002d30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	223f      	movs	r2, #63	; 0x3f
 80028a2:	409a      	lsls	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0216 	orr.w	r2, r2, #22
 80028b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
 80028ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002906:	f7ff fdaf 	bl	8002468 <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d008      	beq.n	800292a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e052      	b.n	80029d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0216 	bic.w	r2, r2, #22
 8002938:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002948:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <HAL_DMA_Abort+0x62>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002956:	2b00      	cmp	r3, #0
 8002958:	d007      	beq.n	800296a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0208 	bic.w	r2, r2, #8
 8002968:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0201 	bic.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297a:	e013      	b.n	80029a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800297c:	f7ff fd74 	bl	8002468 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b05      	cmp	r3, #5
 8002988:	d90c      	bls.n	80029a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2203      	movs	r2, #3
 8002994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e015      	b.n	80029d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e4      	bne.n	800297c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	223f      	movs	r2, #63	; 0x3f
 80029b8:	409a      	lsls	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d004      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00c      	b.n	8002a10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2205      	movs	r2, #5
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a28:	4b8e      	ldr	r3, [pc, #568]	; (8002c64 <HAL_DMA_IRQHandler+0x248>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a8e      	ldr	r2, [pc, #568]	; (8002c68 <HAL_DMA_IRQHandler+0x24c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0a9b      	lsrs	r3, r3, #10
 8002a34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	2208      	movs	r2, #8
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d01a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0204 	bic.w	r2, r2, #4
 8002a6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	2208      	movs	r2, #8
 8002a76:	409a      	lsls	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d012      	beq.n	8002abe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00b      	beq.n	8002abe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2201      	movs	r2, #1
 8002aac:	409a      	lsls	r2, r3
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f043 0202 	orr.w	r2, r3, #2
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d012      	beq.n	8002af4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00b      	beq.n	8002af4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	2210      	movs	r2, #16
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d043      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d03c      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	2210      	movs	r2, #16
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d018      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d108      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d024      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
 8002b4a:	e01f      	b.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01b      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	4798      	blx	r3
 8002b5c:	e016      	b.n	8002b8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d107      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0208 	bic.w	r2, r2, #8
 8002b7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2220      	movs	r2, #32
 8002b92:	409a      	lsls	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 808f 	beq.w	8002cbc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8087 	beq.w	8002cbc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b05      	cmp	r3, #5
 8002bc4:	d136      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0216 	bic.w	r2, r2, #22
 8002bd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002be4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_DMA_IRQHandler+0x1da>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0208 	bic.w	r2, r2, #8
 8002c04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	223f      	movs	r2, #63	; 0x3f
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d07e      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
        }
        return;
 8002c32:	e079      	b.n	8002d28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01d      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d031      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
 8002c60:	e02c      	b.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
 8002c62:	bf00      	nop
 8002c64:	20000000 	.word	0x20000000
 8002c68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d023      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
 8002c7c:	e01e      	b.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10f      	bne.n	8002cac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0210 	bic.w	r2, r2, #16
 8002c9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d032      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d022      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2205      	movs	r2, #5
 8002cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d307      	bcc.n	8002d04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f2      	bne.n	8002ce8 <HAL_DMA_IRQHandler+0x2cc>
 8002d02:	e000      	b.n	8002d06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	4798      	blx	r3
 8002d26:	e000      	b.n	8002d2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d28:	bf00      	nop
    }
  }
}
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d108      	bne.n	8002d70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d6e:	e007      	b.n	8002d80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	60da      	str	r2, [r3, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3b10      	subs	r3, #16
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <DMA_CalcBaseAndBitshift+0x64>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	091b      	lsrs	r3, r3, #4
 8002da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <DMA_CalcBaseAndBitshift+0x68>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d909      	bls.n	8002dce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	1d1a      	adds	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58
 8002dcc:	e007      	b.n	8002dde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	aaaaaaab 	.word	0xaaaaaaab
 8002df4:	0800a640 	.word	0x0800a640

08002df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d11f      	bne.n	8002e52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d856      	bhi.n	8002ec6 <DMA_CheckFifoParam+0xce>
 8002e18:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <DMA_CheckFifoParam+0x28>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e43 	.word	0x08002e43
 8002e28:	08002e31 	.word	0x08002e31
 8002e2c:	08002ec7 	.word	0x08002ec7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d046      	beq.n	8002eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e40:	e043      	b.n	8002eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e4a:	d140      	bne.n	8002ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e03d      	b.n	8002ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5a:	d121      	bne.n	8002ea0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d837      	bhi.n	8002ed2 <DMA_CheckFifoParam+0xda>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <DMA_CheckFifoParam+0x70>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e7f 	.word	0x08002e7f
 8002e70:	08002e79 	.word	0x08002e79
 8002e74:	08002e91 	.word	0x08002e91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e7c:	e030      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d025      	beq.n	8002ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e022      	b.n	8002ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e98:	d11f      	bne.n	8002eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e9e:	e01c      	b.n	8002eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d903      	bls.n	8002eae <DMA_CheckFifoParam+0xb6>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d003      	beq.n	8002eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eac:	e018      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb2:	e015      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e00b      	b.n	8002ede <DMA_CheckFifoParam+0xe6>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e00a      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e008      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ece:	bf00      	nop
 8002ed0:	e006      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed2:	bf00      	nop
 8002ed4:	e004      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e002      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ede:	bf00      	nop
    }
  } 
  
  return status; 
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop

08002ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b089      	sub	sp, #36	; 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	2300      	movs	r3, #0
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e16b      	b.n	80031e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	f040 815a 	bne.w	80031de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d005      	beq.n	8002f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d130      	bne.n	8002fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 0201 	and.w	r2, r3, #1
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d017      	beq.n	8002fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d123      	bne.n	8003034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	08da      	lsrs	r2, r3, #3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3208      	adds	r2, #8
 8002ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	08da      	lsrs	r2, r3, #3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3208      	adds	r2, #8
 800302e:	69b9      	ldr	r1, [r7, #24]
 8003030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	2203      	movs	r2, #3
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0203 	and.w	r2, r3, #3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80b4 	beq.w	80031de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b60      	ldr	r3, [pc, #384]	; (80031fc <HAL_GPIO_Init+0x30c>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	4a5f      	ldr	r2, [pc, #380]	; (80031fc <HAL_GPIO_Init+0x30c>)
 8003080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003084:	6453      	str	r3, [r2, #68]	; 0x44
 8003086:	4b5d      	ldr	r3, [pc, #372]	; (80031fc <HAL_GPIO_Init+0x30c>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003092:	4a5b      	ldr	r2, [pc, #364]	; (8003200 <HAL_GPIO_Init+0x310>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3302      	adds	r3, #2
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	220f      	movs	r2, #15
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x314>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d02b      	beq.n	8003116 <HAL_GPIO_Init+0x226>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a51      	ldr	r2, [pc, #324]	; (8003208 <HAL_GPIO_Init+0x318>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d025      	beq.n	8003112 <HAL_GPIO_Init+0x222>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_GPIO_Init+0x31c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01f      	beq.n	800310e <HAL_GPIO_Init+0x21e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4f      	ldr	r2, [pc, #316]	; (8003210 <HAL_GPIO_Init+0x320>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d019      	beq.n	800310a <HAL_GPIO_Init+0x21a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4e      	ldr	r2, [pc, #312]	; (8003214 <HAL_GPIO_Init+0x324>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_GPIO_Init+0x216>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4d      	ldr	r2, [pc, #308]	; (8003218 <HAL_GPIO_Init+0x328>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00d      	beq.n	8003102 <HAL_GPIO_Init+0x212>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a4c      	ldr	r2, [pc, #304]	; (800321c <HAL_GPIO_Init+0x32c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <HAL_GPIO_Init+0x20e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a4b      	ldr	r2, [pc, #300]	; (8003220 <HAL_GPIO_Init+0x330>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d101      	bne.n	80030fa <HAL_GPIO_Init+0x20a>
 80030f6:	2307      	movs	r3, #7
 80030f8:	e00e      	b.n	8003118 <HAL_GPIO_Init+0x228>
 80030fa:	2308      	movs	r3, #8
 80030fc:	e00c      	b.n	8003118 <HAL_GPIO_Init+0x228>
 80030fe:	2306      	movs	r3, #6
 8003100:	e00a      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003102:	2305      	movs	r3, #5
 8003104:	e008      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003106:	2304      	movs	r3, #4
 8003108:	e006      	b.n	8003118 <HAL_GPIO_Init+0x228>
 800310a:	2303      	movs	r3, #3
 800310c:	e004      	b.n	8003118 <HAL_GPIO_Init+0x228>
 800310e:	2302      	movs	r3, #2
 8003110:	e002      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x228>
 8003116:	2300      	movs	r3, #0
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	f002 0203 	and.w	r2, r2, #3
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	4093      	lsls	r3, r2
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003128:	4935      	ldr	r1, [pc, #212]	; (8003200 <HAL_GPIO_Init+0x310>)
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003136:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315a:	4a32      	ldr	r2, [pc, #200]	; (8003224 <HAL_GPIO_Init+0x334>)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003160:	4b30      	ldr	r3, [pc, #192]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	43db      	mvns	r3, r3
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003184:	4a27      	ldr	r2, [pc, #156]	; (8003224 <HAL_GPIO_Init+0x334>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318a:	4b26      	ldr	r3, [pc, #152]	; (8003224 <HAL_GPIO_Init+0x334>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ae:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <HAL_GPIO_Init+0x334>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	3301      	adds	r3, #1
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	f67f ae90 	bls.w	8002f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800
 8003200:	40013800 	.word	0x40013800
 8003204:	40020000 	.word	0x40020000
 8003208:	40020400 	.word	0x40020400
 800320c:	40020800 	.word	0x40020800
 8003210:	40020c00 	.word	0x40020c00
 8003214:	40021000 	.word	0x40021000
 8003218:	40021400 	.word	0x40021400
 800321c:	40021800 	.word	0x40021800
 8003220:	40021c00 	.word	0x40021c00
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003244:	e003      	b.n	800324e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	619a      	str	r2, [r3, #24]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e267      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d075      	beq.n	8003366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800327a:	4b88      	ldr	r3, [pc, #544]	; (800349c <HAL_RCC_OscConfig+0x240>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	2b04      	cmp	r3, #4
 8003284:	d00c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003286:	4b85      	ldr	r3, [pc, #532]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328e:	2b08      	cmp	r3, #8
 8003290:	d112      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003292:	4b82      	ldr	r3, [pc, #520]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b7e      	ldr	r3, [pc, #504]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d05b      	beq.n	8003364 <HAL_RCC_OscConfig+0x108>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d157      	bne.n	8003364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e242      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x74>
 80032c2:	4b76      	ldr	r3, [pc, #472]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a75      	ldr	r2, [pc, #468]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x98>
 80032da:	4b70      	ldr	r3, [pc, #448]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a6f      	ldr	r2, [pc, #444]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b6d      	ldr	r3, [pc, #436]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a6c      	ldr	r2, [pc, #432]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xb0>
 80032f4:	4b69      	ldr	r3, [pc, #420]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a68      	ldr	r2, [pc, #416]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b66      	ldr	r3, [pc, #408]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a65      	ldr	r2, [pc, #404]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7ff f8a8 	bl	8002468 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff f8a4 	bl	8002468 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e207      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b5b      	ldr	r3, [pc, #364]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xc0>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7ff f894 	bl	8002468 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003344:	f7ff f890 	bl	8002468 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e1f3      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	4b51      	ldr	r3, [pc, #324]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0xe8>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d063      	beq.n	800343a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003372:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003386:	2b08      	cmp	r3, #8
 8003388:	d11c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800338a:	4b44      	ldr	r3, [pc, #272]	; (800349c <HAL_RCC_OscConfig+0x240>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x152>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e1c7      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b3b      	ldr	r3, [pc, #236]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4937      	ldr	r1, [pc, #220]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	e03a      	b.n	800343a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033cc:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <HAL_RCC_OscConfig+0x244>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7ff f849 	bl	8002468 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033da:	f7ff f845 	bl	8002468 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e1a8      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ec:	4b2b      	ldr	r3, [pc, #172]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	4b28      	ldr	r3, [pc, #160]	; (800349c <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4925      	ldr	r1, [pc, #148]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003408:	4313      	orrs	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340e:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_RCC_OscConfig+0x244>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7ff f828 	bl	8002468 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341c:	f7ff f824 	bl	8002468 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e187      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d036      	beq.n	80034b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <HAL_RCC_OscConfig+0x248>)
 8003450:	2201      	movs	r2, #1
 8003452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003454:	f7ff f808 	bl	8002468 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800345c:	f7ff f804 	bl	8002468 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e167      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_OscConfig+0x240>)
 8003470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x200>
 800347a:	e01b      	b.n	80034b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_RCC_OscConfig+0x248>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fe fff1 	bl	8002468 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	e00e      	b.n	80034a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348a:	f7fe ffed 	bl	8002468 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d907      	bls.n	80034a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e150      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
 800349c:	40023800 	.word	0x40023800
 80034a0:	42470000 	.word	0x42470000
 80034a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a8:	4b88      	ldr	r3, [pc, #544]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80034aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1ea      	bne.n	800348a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8097 	beq.w	80035f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c6:	4b81      	ldr	r3, [pc, #516]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10f      	bne.n	80034f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	4b7d      	ldr	r3, [pc, #500]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	4a7c      	ldr	r2, [pc, #496]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	6413      	str	r3, [r2, #64]	; 0x40
 80034e2:	4b7a      	ldr	r3, [pc, #488]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b77      	ldr	r3, [pc, #476]	; (80036d0 <HAL_RCC_OscConfig+0x474>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	4b74      	ldr	r3, [pc, #464]	; (80036d0 <HAL_RCC_OscConfig+0x474>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a73      	ldr	r2, [pc, #460]	; (80036d0 <HAL_RCC_OscConfig+0x474>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7fe ffad 	bl	8002468 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fe ffa9 	bl	8002468 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e10c      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003524:	4b6a      	ldr	r3, [pc, #424]	; (80036d0 <HAL_RCC_OscConfig+0x474>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x2ea>
 8003538:	4b64      	ldr	r3, [pc, #400]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4a63      	ldr	r2, [pc, #396]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6713      	str	r3, [r2, #112]	; 0x70
 8003544:	e01c      	b.n	8003580 <HAL_RCC_OscConfig+0x324>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b05      	cmp	r3, #5
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x30c>
 800354e:	4b5f      	ldr	r3, [pc, #380]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	4a5e      	ldr	r2, [pc, #376]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	6713      	str	r3, [r2, #112]	; 0x70
 800355a:	4b5c      	ldr	r3, [pc, #368]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	4a5b      	ldr	r2, [pc, #364]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6713      	str	r3, [r2, #112]	; 0x70
 8003566:	e00b      	b.n	8003580 <HAL_RCC_OscConfig+0x324>
 8003568:	4b58      	ldr	r3, [pc, #352]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a57      	ldr	r2, [pc, #348]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
 8003574:	4b55      	ldr	r3, [pc, #340]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003578:	4a54      	ldr	r2, [pc, #336]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 800357a:	f023 0304 	bic.w	r3, r3, #4
 800357e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d015      	beq.n	80035b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fe ff6e 	bl	8002468 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358e:	e00a      	b.n	80035a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003590:	f7fe ff6a 	bl	8002468 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f241 3288 	movw	r2, #5000	; 0x1388
 800359e:	4293      	cmp	r3, r2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0cb      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a6:	4b49      	ldr	r3, [pc, #292]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0ee      	beq.n	8003590 <HAL_RCC_OscConfig+0x334>
 80035b2:	e014      	b.n	80035de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b4:	f7fe ff58 	bl	8002468 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035bc:	f7fe ff54 	bl	8002468 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e0b5      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d2:	4b3e      	ldr	r3, [pc, #248]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ee      	bne.n	80035bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035de:	7dfb      	ldrb	r3, [r7, #23]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d105      	bne.n	80035f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e4:	4b39      	ldr	r3, [pc, #228]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	4a38      	ldr	r2, [pc, #224]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80035ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80a1 	beq.w	800373c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035fa:	4b34      	ldr	r3, [pc, #208]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	d05c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d141      	bne.n	8003692 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_OscConfig+0x478>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe ff28 	bl	8002468 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361c:	f7fe ff24 	bl	8002468 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e087      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69da      	ldr	r2, [r3, #28]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	019b      	lsls	r3, r3, #6
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	3b01      	subs	r3, #1
 8003654:	041b      	lsls	r3, r3, #16
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	061b      	lsls	r3, r3, #24
 800365e:	491b      	ldr	r1, [pc, #108]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003664:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x478>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fefd 	bl	8002468 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003672:	f7fe fef9 	bl	8002468 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e05c      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x416>
 8003690:	e054      	b.n	800373c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <HAL_RCC_OscConfig+0x478>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fee6 	bl	8002468 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe fee2 	bl	8002468 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e045      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036b2:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RCC_OscConfig+0x470>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x444>
 80036be:	e03d      	b.n	800373c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e038      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40007000 	.word	0x40007000
 80036d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x4ec>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d028      	beq.n	8003738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d121      	bne.n	8003738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d11a      	bne.n	8003738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800370e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003710:	4293      	cmp	r3, r2
 8003712:	d111      	bne.n	8003738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	3b01      	subs	r3, #1
 8003722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800

0800374c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e0cc      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003760:	4b68      	ldr	r3, [pc, #416]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d90c      	bls.n	8003788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b65      	ldr	r3, [pc, #404]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0b8      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d020      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037a0:	4b59      	ldr	r3, [pc, #356]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b8:	4b53      	ldr	r3, [pc, #332]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	4a52      	ldr	r2, [pc, #328]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c4:	4b50      	ldr	r3, [pc, #320]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	494d      	ldr	r1, [pc, #308]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d044      	beq.n	800386c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d119      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e07f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d003      	beq.n	800380a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003806:	2b03      	cmp	r3, #3
 8003808:	d107      	bne.n	800381a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380a:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d109      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e06f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381a:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e067      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800382a:	4b37      	ldr	r3, [pc, #220]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 0203 	bic.w	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	4934      	ldr	r1, [pc, #208]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800383c:	f7fe fe14 	bl	8002468 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	e00a      	b.n	800385a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003844:	f7fe fe10 	bl	8002468 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e04f      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800385a:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 020c 	and.w	r2, r3, #12
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	429a      	cmp	r2, r3
 800386a:	d1eb      	bne.n	8003844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d20c      	bcs.n	8003894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b20      	ldr	r3, [pc, #128]	; (8003904 <HAL_RCC_ClockConfig+0x1b8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e032      	b.n	80038fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a0:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4916      	ldr	r1, [pc, #88]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d009      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	490e      	ldr	r1, [pc, #56]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038d2:	f000 f821 	bl	8003918 <HAL_RCC_GetSysClockFreq>
 80038d6:	4602      	mov	r2, r0
 80038d8:	4b0b      	ldr	r3, [pc, #44]	; (8003908 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	490a      	ldr	r1, [pc, #40]	; (800390c <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	5ccb      	ldrb	r3, [r1, r3]
 80038e6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ea:	4a09      	ldr	r2, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ee:	4b09      	ldr	r3, [pc, #36]	; (8003914 <HAL_RCC_ClockConfig+0x1c8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fd74 	bl	80023e0 <HAL_InitTick>

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023c00 	.word	0x40023c00
 8003908:	40023800 	.word	0x40023800
 800390c:	0800a628 	.word	0x0800a628
 8003910:	20000000 	.word	0x20000000
 8003914:	20000004 	.word	0x20000004

08003918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800391c:	b094      	sub	sp, #80	; 0x50
 800391e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	647b      	str	r3, [r7, #68]	; 0x44
 8003924:	2300      	movs	r3, #0
 8003926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003928:	2300      	movs	r3, #0
 800392a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003930:	4b79      	ldr	r3, [pc, #484]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b08      	cmp	r3, #8
 800393a:	d00d      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x40>
 800393c:	2b08      	cmp	r3, #8
 800393e:	f200 80e1 	bhi.w	8003b04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x34>
 8003946:	2b04      	cmp	r3, #4
 8003948:	d003      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x3a>
 800394a:	e0db      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800394c:	4b73      	ldr	r3, [pc, #460]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x204>)
 800394e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003950:	e0db      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003952:	4b73      	ldr	r3, [pc, #460]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x208>)
 8003954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003956:	e0d8      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003958:	4b6f      	ldr	r3, [pc, #444]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x200>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003960:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003962:	4b6d      	ldr	r3, [pc, #436]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d063      	beq.n	8003a36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396e:	4b6a      	ldr	r3, [pc, #424]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	099b      	lsrs	r3, r3, #6
 8003974:	2200      	movs	r2, #0
 8003976:	63bb      	str	r3, [r7, #56]	; 0x38
 8003978:	63fa      	str	r2, [r7, #60]	; 0x3c
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003980:	633b      	str	r3, [r7, #48]	; 0x30
 8003982:	2300      	movs	r3, #0
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
 8003986:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800398a:	4622      	mov	r2, r4
 800398c:	462b      	mov	r3, r5
 800398e:	f04f 0000 	mov.w	r0, #0
 8003992:	f04f 0100 	mov.w	r1, #0
 8003996:	0159      	lsls	r1, r3, #5
 8003998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800399c:	0150      	lsls	r0, r2, #5
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4621      	mov	r1, r4
 80039a4:	1a51      	subs	r1, r2, r1
 80039a6:	6139      	str	r1, [r7, #16]
 80039a8:	4629      	mov	r1, r5
 80039aa:	eb63 0301 	sbc.w	r3, r3, r1
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039bc:	4659      	mov	r1, fp
 80039be:	018b      	lsls	r3, r1, #6
 80039c0:	4651      	mov	r1, sl
 80039c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039c6:	4651      	mov	r1, sl
 80039c8:	018a      	lsls	r2, r1, #6
 80039ca:	4651      	mov	r1, sl
 80039cc:	ebb2 0801 	subs.w	r8, r2, r1
 80039d0:	4659      	mov	r1, fp
 80039d2:	eb63 0901 	sbc.w	r9, r3, r1
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039ea:	4690      	mov	r8, r2
 80039ec:	4699      	mov	r9, r3
 80039ee:	4623      	mov	r3, r4
 80039f0:	eb18 0303 	adds.w	r3, r8, r3
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	462b      	mov	r3, r5
 80039f8:	eb49 0303 	adc.w	r3, r9, r3
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	024b      	lsls	r3, r1, #9
 8003a0e:	4621      	mov	r1, r4
 8003a10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a14:	4621      	mov	r1, r4
 8003a16:	024a      	lsls	r2, r1, #9
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1e:	2200      	movs	r2, #0
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a28:	f7fc fe46 	bl	80006b8 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a34:	e058      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a36:	4b38      	ldr	r3, [pc, #224]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	4611      	mov	r1, r2
 8003a42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a46:	623b      	str	r3, [r7, #32]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a50:	4642      	mov	r2, r8
 8003a52:	464b      	mov	r3, r9
 8003a54:	f04f 0000 	mov.w	r0, #0
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	0159      	lsls	r1, r3, #5
 8003a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a62:	0150      	lsls	r0, r2, #5
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4641      	mov	r1, r8
 8003a6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a6e:	4649      	mov	r1, r9
 8003a70:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a88:	ebb2 040a 	subs.w	r4, r2, sl
 8003a8c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	00eb      	lsls	r3, r5, #3
 8003a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a9e:	00e2      	lsls	r2, r4, #3
 8003aa0:	4614      	mov	r4, r2
 8003aa2:	461d      	mov	r5, r3
 8003aa4:	4643      	mov	r3, r8
 8003aa6:	18e3      	adds	r3, r4, r3
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	464b      	mov	r3, r9
 8003aac:	eb45 0303 	adc.w	r3, r5, r3
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003abe:	4629      	mov	r1, r5
 8003ac0:	028b      	lsls	r3, r1, #10
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac8:	4621      	mov	r1, r4
 8003aca:	028a      	lsls	r2, r1, #10
 8003acc:	4610      	mov	r0, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	61fa      	str	r2, [r7, #28]
 8003ad8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003adc:	f7fc fdec 	bl	80006b8 <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	3301      	adds	r3, #1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b02:	e002      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3750      	adds	r7, #80	; 0x50
 8003b10:	46bd      	mov	sp, r7
 8003b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	00f42400 	.word	0x00f42400
 8003b20:	007a1200 	.word	0x007a1200

08003b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000000 	.word	0x20000000

08003b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b40:	f7ff fff0 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	0a9b      	lsrs	r3, r3, #10
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4903      	ldr	r1, [pc, #12]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	0800a638 	.word	0x0800a638

08003b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b68:	f7ff ffdc 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0b5b      	lsrs	r3, r3, #13
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4903      	ldr	r1, [pc, #12]	; (8003b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40023800 	.word	0x40023800
 8003b88:	0800a638 	.word	0x0800a638

08003b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e07b      	b.n	8003c96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d108      	bne.n	8003bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bae:	d009      	beq.n	8003bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	61da      	str	r2, [r3, #28]
 8003bb6:	e005      	b.n	8003bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fefa 	bl	80019d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	ea42 0103 	orr.w	r1, r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 0104 	and.w	r1, r3, #4
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	f003 0210 	and.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b08c      	sub	sp, #48	; 0x30
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cac:	2301      	movs	r3, #1
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x26>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e18a      	b.n	8003fda <HAL_SPI_TransmitReceive+0x33c>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ccc:	f7fe fbcc 	bl	8002468 <HAL_GetTick>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d00f      	beq.n	8003d0e <HAL_SPI_TransmitReceive+0x70>
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cf4:	d107      	bne.n	8003d06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <HAL_SPI_TransmitReceive+0x68>
 8003cfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d003      	beq.n	8003d0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
 8003d08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d0c:	e15b      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x82>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x82>
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d103      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d26:	e14e      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d003      	beq.n	8003d3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2205      	movs	r2, #5
 8003d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	887a      	ldrh	r2, [r7, #2]
 8003d4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	887a      	ldrh	r2, [r7, #2]
 8003d52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	887a      	ldrh	r2, [r7, #2]
 8003d5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d007      	beq.n	8003d90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d98:	d178      	bne.n	8003e8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_SPI_TransmitReceive+0x10a>
 8003da2:	8b7b      	ldrh	r3, [r7, #26]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d166      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	881a      	ldrh	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	1c9a      	adds	r2, r3, #2
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dcc:	e053      	b.n	8003e76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d11b      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x176>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x176>
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d113      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	1c9a      	adds	r2, r3, #2
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d119      	bne.n	8003e56 <HAL_SPI_TransmitReceive+0x1b8>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d014      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	b292      	uxth	r2, r2
 8003e38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	1c9a      	adds	r2, r3, #2
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e52:	2301      	movs	r3, #1
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e56:	f7fe fb07 	bl	8002468 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d807      	bhi.n	8003e76 <HAL_SPI_TransmitReceive+0x1d8>
 8003e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e6c:	d003      	beq.n	8003e76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e74:	e0a7      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1a6      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x130>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1a1      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x130>
 8003e8a:	e07c      	b.n	8003f86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_SPI_TransmitReceive+0x1fc>
 8003e94:	8b7b      	ldrh	r3, [r7, #26]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d16b      	bne.n	8003f72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec0:	e057      	b.n	8003f72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d11c      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x26c>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d017      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0x26c>
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d114      	bne.n	8003f0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	7812      	ldrb	r2, [r2, #0]
 8003eec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d119      	bne.n	8003f4c <HAL_SPI_TransmitReceive+0x2ae>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d014      	beq.n	8003f4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f4c:	f7fe fa8c 	bl	8002468 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d803      	bhi.n	8003f64 <HAL_SPI_TransmitReceive+0x2c6>
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f62:	d102      	bne.n	8003f6a <HAL_SPI_TransmitReceive+0x2cc>
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f70:	e029      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1a2      	bne.n	8003ec2 <HAL_SPI_TransmitReceive+0x224>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d19d      	bne.n	8003ec2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f8b2 	bl	80040f4 <SPI_EndRxTxTransaction>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d006      	beq.n	8003fa4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003fa2:	e010      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	e000      	b.n	8003fc6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3730      	adds	r7, #48	; 0x30
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ff4:	f7fe fa38 	bl	8002468 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	4413      	add	r3, r2
 8004002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004004:	f7fe fa30 	bl	8002468 <HAL_GetTick>
 8004008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800400a:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	015b      	lsls	r3, r3, #5
 8004010:	0d1b      	lsrs	r3, r3, #20
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800401a:	e054      	b.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004022:	d050      	beq.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004024:	f7fe fa20 	bl	8002468 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	429a      	cmp	r2, r3
 8004032:	d902      	bls.n	800403a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d13d      	bne.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004052:	d111      	bne.n	8004078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405c:	d004      	beq.n	8004068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d107      	bne.n	8004078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004080:	d10f      	bne.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e017      	b.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4013      	ands	r3, r2
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	bf0c      	ite	eq
 80040d6:	2301      	moveq	r3, #1
 80040d8:	2300      	movne	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d19b      	bne.n	800401c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000000 	.word	0x20000000

080040f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004100:	4b1b      	ldr	r3, [pc, #108]	; (8004170 <SPI_EndRxTxTransaction+0x7c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <SPI_EndRxTxTransaction+0x80>)
 8004106:	fba2 2303 	umull	r2, r3, r2, r3
 800410a:	0d5b      	lsrs	r3, r3, #21
 800410c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004110:	fb02 f303 	mul.w	r3, r2, r3
 8004114:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800411e:	d112      	bne.n	8004146 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2200      	movs	r2, #0
 8004128:	2180      	movs	r1, #128	; 0x80
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f7ff ff5a 	bl	8003fe4 <SPI_WaitFlagStateUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d016      	beq.n	8004164 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0220 	orr.w	r2, r3, #32
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e00f      	b.n	8004166 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3b01      	subs	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415c:	2b80      	cmp	r3, #128	; 0x80
 800415e:	d0f2      	beq.n	8004146 <SPI_EndRxTxTransaction+0x52>
 8004160:	e000      	b.n	8004164 <SPI_EndRxTxTransaction+0x70>
        break;
 8004162:	bf00      	nop
  }

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000000 	.word	0x20000000
 8004174:	165e9f81 	.word	0x165e9f81

08004178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e041      	b.n	800420e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fd ff0a 	bl	8001fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f000 fd88 	bl	8004ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d001      	beq.n	8004230 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e046      	b.n	80042be <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a23      	ldr	r2, [pc, #140]	; (80042cc <HAL_TIM_Base_Start+0xb4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d022      	beq.n	8004288 <HAL_TIM_Base_Start+0x70>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424a:	d01d      	beq.n	8004288 <HAL_TIM_Base_Start+0x70>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <HAL_TIM_Base_Start+0xb8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d018      	beq.n	8004288 <HAL_TIM_Base_Start+0x70>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1e      	ldr	r2, [pc, #120]	; (80042d4 <HAL_TIM_Base_Start+0xbc>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d013      	beq.n	8004288 <HAL_TIM_Base_Start+0x70>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <HAL_TIM_Base_Start+0xc0>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d00e      	beq.n	8004288 <HAL_TIM_Base_Start+0x70>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_TIM_Base_Start+0xc4>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d009      	beq.n	8004288 <HAL_TIM_Base_Start+0x70>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_TIM_Base_Start+0xc8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d004      	beq.n	8004288 <HAL_TIM_Base_Start+0x70>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <HAL_TIM_Base_Start+0xcc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d111      	bne.n	80042ac <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b06      	cmp	r3, #6
 8004298:	d010      	beq.n	80042bc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042aa:	e007      	b.n	80042bc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40010000 	.word	0x40010000
 80042d0:	40000400 	.word	0x40000400
 80042d4:	40000800 	.word	0x40000800
 80042d8:	40000c00 	.word	0x40000c00
 80042dc:	40010400 	.word	0x40010400
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40001800 	.word	0x40001800

080042e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e041      	b.n	800437e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fd fea4 	bl	800205c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f000 fcd0 	bl	8004ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d109      	bne.n	80043ac <HAL_TIM_PWM_Start+0x24>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e022      	b.n	80043f2 <HAL_TIM_PWM_Start+0x6a>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d109      	bne.n	80043c6 <HAL_TIM_PWM_Start+0x3e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	bf14      	ite	ne
 80043be:	2301      	movne	r3, #1
 80043c0:	2300      	moveq	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	e015      	b.n	80043f2 <HAL_TIM_PWM_Start+0x6a>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d109      	bne.n	80043e0 <HAL_TIM_PWM_Start+0x58>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	bf14      	ite	ne
 80043d8:	2301      	movne	r3, #1
 80043da:	2300      	moveq	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e008      	b.n	80043f2 <HAL_TIM_PWM_Start+0x6a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e07c      	b.n	80044f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d104      	bne.n	800440a <HAL_TIM_PWM_Start+0x82>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004408:	e013      	b.n	8004432 <HAL_TIM_PWM_Start+0xaa>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b04      	cmp	r3, #4
 800440e:	d104      	bne.n	800441a <HAL_TIM_PWM_Start+0x92>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004418:	e00b      	b.n	8004432 <HAL_TIM_PWM_Start+0xaa>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b08      	cmp	r3, #8
 800441e:	d104      	bne.n	800442a <HAL_TIM_PWM_Start+0xa2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004428:	e003      	b.n	8004432 <HAL_TIM_PWM_Start+0xaa>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2201      	movs	r2, #1
 8004438:	6839      	ldr	r1, [r7, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 ff30 	bl	80052a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <HAL_TIM_PWM_Start+0x174>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_TIM_PWM_Start+0xcc>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a2c      	ldr	r2, [pc, #176]	; (8004500 <HAL_TIM_PWM_Start+0x178>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d101      	bne.n	8004458 <HAL_TIM_PWM_Start+0xd0>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_TIM_PWM_Start+0xd2>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a22      	ldr	r2, [pc, #136]	; (80044fc <HAL_TIM_PWM_Start+0x174>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d022      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d01d      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <HAL_TIM_PWM_Start+0x17c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d018      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <HAL_TIM_PWM_Start+0x180>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_TIM_PWM_Start+0x184>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00e      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a16      	ldr	r2, [pc, #88]	; (8004500 <HAL_TIM_PWM_Start+0x178>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_TIM_PWM_Start+0x188>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_TIM_PWM_Start+0x136>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a16      	ldr	r2, [pc, #88]	; (8004514 <HAL_TIM_PWM_Start+0x18c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d111      	bne.n	80044e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b06      	cmp	r3, #6
 80044ce:	d010      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e0:	e007      	b.n	80044f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40010000 	.word	0x40010000
 8004500:	40010400 	.word	0x40010400
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40014000 	.word	0x40014000
 8004514:	40001800 	.word	0x40001800

08004518 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d109      	bne.n	8004540 <HAL_TIM_PWM_Start_IT+0x28>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	e022      	b.n	8004586 <HAL_TIM_PWM_Start_IT+0x6e>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b04      	cmp	r3, #4
 8004544:	d109      	bne.n	800455a <HAL_TIM_PWM_Start_IT+0x42>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b01      	cmp	r3, #1
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	e015      	b.n	8004586 <HAL_TIM_PWM_Start_IT+0x6e>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d109      	bne.n	8004574 <HAL_TIM_PWM_Start_IT+0x5c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e008      	b.n	8004586 <HAL_TIM_PWM_Start_IT+0x6e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	bf14      	ite	ne
 8004580:	2301      	movne	r3, #1
 8004582:	2300      	moveq	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0c7      	b.n	800471e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d104      	bne.n	800459e <HAL_TIM_PWM_Start_IT+0x86>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800459c:	e013      	b.n	80045c6 <HAL_TIM_PWM_Start_IT+0xae>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_PWM_Start_IT+0x96>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045ac:	e00b      	b.n	80045c6 <HAL_TIM_PWM_Start_IT+0xae>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d104      	bne.n	80045be <HAL_TIM_PWM_Start_IT+0xa6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045bc:	e003      	b.n	80045c6 <HAL_TIM_PWM_Start_IT+0xae>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b0c      	cmp	r3, #12
 80045ca:	d841      	bhi.n	8004650 <HAL_TIM_PWM_Start_IT+0x138>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	08004609 	.word	0x08004609
 80045d8:	08004651 	.word	0x08004651
 80045dc:	08004651 	.word	0x08004651
 80045e0:	08004651 	.word	0x08004651
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	08004651 	.word	0x08004651
 80045ec:	08004651 	.word	0x08004651
 80045f0:	08004651 	.word	0x08004651
 80045f4:	0800462d 	.word	0x0800462d
 80045f8:	08004651 	.word	0x08004651
 80045fc:	08004651 	.word	0x08004651
 8004600:	08004651 	.word	0x08004651
 8004604:	0800463f 	.word	0x0800463f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0202 	orr.w	r2, r2, #2
 8004616:	60da      	str	r2, [r3, #12]
      break;
 8004618:	e01d      	b.n	8004656 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0204 	orr.w	r2, r2, #4
 8004628:	60da      	str	r2, [r3, #12]
      break;
 800462a:	e014      	b.n	8004656 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0208 	orr.w	r2, r2, #8
 800463a:	60da      	str	r2, [r3, #12]
      break;
 800463c:	e00b      	b.n	8004656 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0210 	orr.w	r2, r2, #16
 800464c:	60da      	str	r2, [r3, #12]
      break;
 800464e:	e002      	b.n	8004656 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	bf00      	nop
  }

  if (status == HAL_OK)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d15f      	bne.n	800471c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fe1b 	bl	80052a0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2e      	ldr	r2, [pc, #184]	; (8004728 <HAL_TIM_PWM_Start_IT+0x210>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_TIM_PWM_Start_IT+0x166>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2c      	ldr	r2, [pc, #176]	; (800472c <HAL_TIM_PWM_Start_IT+0x214>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_TIM_PWM_Start_IT+0x16a>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_TIM_PWM_Start_IT+0x16c>
 8004682:	2300      	movs	r3, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d007      	beq.n	8004698 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004696:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a22      	ldr	r2, [pc, #136]	; (8004728 <HAL_TIM_PWM_Start_IT+0x210>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d022      	beq.n	80046e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046aa:	d01d      	beq.n	80046e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1f      	ldr	r2, [pc, #124]	; (8004730 <HAL_TIM_PWM_Start_IT+0x218>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d018      	beq.n	80046e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <HAL_TIM_PWM_Start_IT+0x21c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <HAL_TIM_PWM_Start_IT+0x220>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00e      	beq.n	80046e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a17      	ldr	r2, [pc, #92]	; (800472c <HAL_TIM_PWM_Start_IT+0x214>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d009      	beq.n	80046e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a18      	ldr	r2, [pc, #96]	; (800473c <HAL_TIM_PWM_Start_IT+0x224>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a17      	ldr	r2, [pc, #92]	; (8004740 <HAL_TIM_PWM_Start_IT+0x228>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d111      	bne.n	800470c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b06      	cmp	r3, #6
 80046f8:	d010      	beq.n	800471c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470a:	e007      	b.n	800471c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40010000 	.word	0x40010000
 800472c:	40010400 	.word	0x40010400
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40014000 	.word	0x40014000
 8004740:	40001800 	.word	0x40001800

08004744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b02      	cmp	r3, #2
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b02      	cmp	r3, #2
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0202 	mvn.w	r2, #2
 8004770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa81 	bl	8004c8e <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa73 	bl	8004c7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fa84 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d122      	bne.n	80047f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d11b      	bne.n	80047f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0204 	mvn.w	r2, #4
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fa57 	bl	8004c8e <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa49 	bl	8004c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fa5a 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d122      	bne.n	8004848 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b08      	cmp	r3, #8
 800480e:	d11b      	bne.n	8004848 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0208 	mvn.w	r2, #8
 8004818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2204      	movs	r2, #4
 800481e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fa2d 	bl	8004c8e <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa1f 	bl	8004c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fa30 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b10      	cmp	r3, #16
 8004854:	d122      	bne.n	800489c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b10      	cmp	r3, #16
 8004862:	d11b      	bne.n	800489c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0210 	mvn.w	r2, #16
 800486c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2208      	movs	r2, #8
 8004872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa03 	bl	8004c8e <HAL_TIM_IC_CaptureCallback>
 8004888:	e005      	b.n	8004896 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f9f5 	bl	8004c7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fa06 	bl	8004ca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d10e      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d107      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0201 	mvn.w	r2, #1
 80048c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9cf 	bl	8004c66 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d2:	2b80      	cmp	r3, #128	; 0x80
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	2b80      	cmp	r3, #128	; 0x80
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fd82 	bl	80053f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fe:	2b40      	cmp	r3, #64	; 0x40
 8004900:	d10e      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d107      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f9cb 	bl	8004cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b20      	cmp	r3, #32
 800492c:	d10e      	bne.n	800494c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b20      	cmp	r3, #32
 800493a:	d107      	bne.n	800494c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0220 	mvn.w	r2, #32
 8004944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fd4c 	bl	80053e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800496e:	2302      	movs	r3, #2
 8004970:	e0ae      	b.n	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b0c      	cmp	r3, #12
 800497e:	f200 809f 	bhi.w	8004ac0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004982:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004988:	080049bd 	.word	0x080049bd
 800498c:	08004ac1 	.word	0x08004ac1
 8004990:	08004ac1 	.word	0x08004ac1
 8004994:	08004ac1 	.word	0x08004ac1
 8004998:	080049fd 	.word	0x080049fd
 800499c:	08004ac1 	.word	0x08004ac1
 80049a0:	08004ac1 	.word	0x08004ac1
 80049a4:	08004ac1 	.word	0x08004ac1
 80049a8:	08004a3f 	.word	0x08004a3f
 80049ac:	08004ac1 	.word	0x08004ac1
 80049b0:	08004ac1 	.word	0x08004ac1
 80049b4:	08004ac1 	.word	0x08004ac1
 80049b8:	08004a7f 	.word	0x08004a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fa22 	bl	8004e0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0208 	orr.w	r2, r2, #8
 80049d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0204 	bic.w	r2, r2, #4
 80049e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6999      	ldr	r1, [r3, #24]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	619a      	str	r2, [r3, #24]
      break;
 80049fa:	e064      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fa72 	bl	8004eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6999      	ldr	r1, [r3, #24]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	021a      	lsls	r2, r3, #8
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	619a      	str	r2, [r3, #24]
      break;
 8004a3c:	e043      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fac7 	bl	8004fd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0208 	orr.w	r2, r2, #8
 8004a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 0204 	bic.w	r2, r2, #4
 8004a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69d9      	ldr	r1, [r3, #28]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	61da      	str	r2, [r3, #28]
      break;
 8004a7c:	e023      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fb1b 	bl	80050c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69d9      	ldr	r1, [r3, #28]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	021a      	lsls	r2, r3, #8
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	61da      	str	r2, [r3, #28]
      break;
 8004abe:	e002      	b.n	8004ac6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_TIM_ConfigClockSource+0x1c>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e0b4      	b.n	8004c5e <HAL_TIM_ConfigClockSource+0x186>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b2c:	d03e      	beq.n	8004bac <HAL_TIM_ConfigClockSource+0xd4>
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b32:	f200 8087 	bhi.w	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3a:	f000 8086 	beq.w	8004c4a <HAL_TIM_ConfigClockSource+0x172>
 8004b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b42:	d87f      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b70      	cmp	r3, #112	; 0x70
 8004b46:	d01a      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0xa6>
 8004b48:	2b70      	cmp	r3, #112	; 0x70
 8004b4a:	d87b      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b60      	cmp	r3, #96	; 0x60
 8004b4e:	d050      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x11a>
 8004b50:	2b60      	cmp	r3, #96	; 0x60
 8004b52:	d877      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b50      	cmp	r3, #80	; 0x50
 8004b56:	d03c      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xfa>
 8004b58:	2b50      	cmp	r3, #80	; 0x50
 8004b5a:	d873      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d058      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0x13a>
 8004b60:	2b40      	cmp	r3, #64	; 0x40
 8004b62:	d86f      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b30      	cmp	r3, #48	; 0x30
 8004b66:	d064      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	2b30      	cmp	r3, #48	; 0x30
 8004b6a:	d86b      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d060      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d867      	bhi.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d05c      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d05a      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x15a>
 8004b7c:	e062      	b.n	8004c44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6899      	ldr	r1, [r3, #8]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f000 fb67 	bl	8005260 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ba0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	609a      	str	r2, [r3, #8]
      break;
 8004baa:	e04f      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f000 fb50 	bl	8005260 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bce:	609a      	str	r2, [r3, #8]
      break;
 8004bd0:	e03c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f000 fac4 	bl	800516c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2150      	movs	r1, #80	; 0x50
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fb1d 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e02c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f000 fae3 	bl	80051ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2160      	movs	r1, #96	; 0x60
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fb0d 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004c10:	e01c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f000 faa4 	bl	800516c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fafd 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004c30:	e00c      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f000 faf4 	bl	800522a <TIM_ITRx_SetConfig>
      break;
 8004c42:	e003      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
      break;
 8004c48:	e000      	b.n	8004c4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a40      	ldr	r2, [pc, #256]	; (8004de0 <TIM_Base_SetConfig+0x114>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <TIM_Base_SetConfig+0x40>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cea:	d00f      	beq.n	8004d0c <TIM_Base_SetConfig+0x40>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a3d      	ldr	r2, [pc, #244]	; (8004de4 <TIM_Base_SetConfig+0x118>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <TIM_Base_SetConfig+0x40>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a3c      	ldr	r2, [pc, #240]	; (8004de8 <TIM_Base_SetConfig+0x11c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d007      	beq.n	8004d0c <TIM_Base_SetConfig+0x40>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a3b      	ldr	r2, [pc, #236]	; (8004dec <TIM_Base_SetConfig+0x120>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a3a      	ldr	r2, [pc, #232]	; (8004df0 <TIM_Base_SetConfig+0x124>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d108      	bne.n	8004d1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <TIM_Base_SetConfig+0x114>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02b      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2c:	d027      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a2c      	ldr	r2, [pc, #176]	; (8004de4 <TIM_Base_SetConfig+0x118>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d023      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a2b      	ldr	r2, [pc, #172]	; (8004de8 <TIM_Base_SetConfig+0x11c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d01f      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a2a      	ldr	r2, [pc, #168]	; (8004dec <TIM_Base_SetConfig+0x120>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01b      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a29      	ldr	r2, [pc, #164]	; (8004df0 <TIM_Base_SetConfig+0x124>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d017      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a28      	ldr	r2, [pc, #160]	; (8004df4 <TIM_Base_SetConfig+0x128>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a27      	ldr	r2, [pc, #156]	; (8004df8 <TIM_Base_SetConfig+0x12c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00f      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a26      	ldr	r2, [pc, #152]	; (8004dfc <TIM_Base_SetConfig+0x130>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a25      	ldr	r2, [pc, #148]	; (8004e00 <TIM_Base_SetConfig+0x134>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d007      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a24      	ldr	r2, [pc, #144]	; (8004e04 <TIM_Base_SetConfig+0x138>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d003      	beq.n	8004d7e <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <TIM_Base_SetConfig+0x13c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d108      	bne.n	8004d90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <TIM_Base_SetConfig+0x114>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <TIM_Base_SetConfig+0xf8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a0c      	ldr	r2, [pc, #48]	; (8004df0 <TIM_Base_SetConfig+0x124>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d103      	bne.n	8004dcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	615a      	str	r2, [r3, #20]
}
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	40010400 	.word	0x40010400
 8004df4:	40014000 	.word	0x40014000
 8004df8:	40014400 	.word	0x40014400
 8004dfc:	40014800 	.word	0x40014800
 8004e00:	40001800 	.word	0x40001800
 8004e04:	40001c00 	.word	0x40001c00
 8004e08:	40002000 	.word	0x40002000

08004e0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f023 0201 	bic.w	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0303 	bic.w	r3, r3, #3
 8004e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f023 0302 	bic.w	r3, r3, #2
 8004e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a20      	ldr	r2, [pc, #128]	; (8004ee4 <TIM_OC1_SetConfig+0xd8>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_OC1_SetConfig+0x64>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ee8 <TIM_OC1_SetConfig+0xdc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10c      	bne.n	8004e8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0308 	bic.w	r3, r3, #8
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 0304 	bic.w	r3, r3, #4
 8004e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <TIM_OC1_SetConfig+0xd8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_OC1_SetConfig+0x8e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <TIM_OC1_SetConfig+0xdc>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d111      	bne.n	8004ebe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	621a      	str	r2, [r3, #32]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40010400 	.word	0x40010400

08004eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f023 0210 	bic.w	r2, r3, #16
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0320 	bic.w	r3, r3, #32
 8004f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a22      	ldr	r2, [pc, #136]	; (8004fd0 <TIM_OC2_SetConfig+0xe4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC2_SetConfig+0x68>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a21      	ldr	r2, [pc, #132]	; (8004fd4 <TIM_OC2_SetConfig+0xe8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10d      	bne.n	8004f70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a17      	ldr	r2, [pc, #92]	; (8004fd0 <TIM_OC2_SetConfig+0xe4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_OC2_SetConfig+0x94>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <TIM_OC2_SetConfig+0xe8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d113      	bne.n	8004fa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	621a      	str	r2, [r3, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40010000 	.word	0x40010000
 8004fd4:	40010400 	.word	0x40010400

08004fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0303 	bic.w	r3, r3, #3
 800500e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <TIM_OC3_SetConfig+0xe0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_OC3_SetConfig+0x66>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a20      	ldr	r2, [pc, #128]	; (80050bc <TIM_OC3_SetConfig+0xe4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10d      	bne.n	800505a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <TIM_OC3_SetConfig+0xe0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d003      	beq.n	800506a <TIM_OC3_SetConfig+0x92>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a15      	ldr	r2, [pc, #84]	; (80050bc <TIM_OC3_SetConfig+0xe4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d113      	bne.n	8005092 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	621a      	str	r2, [r3, #32]
}
 80050ac:	bf00      	nop
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40010400 	.word	0x40010400

080050c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800510a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a12      	ldr	r2, [pc, #72]	; (8005164 <TIM_OC4_SetConfig+0xa4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d003      	beq.n	8005128 <TIM_OC4_SetConfig+0x68>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a11      	ldr	r2, [pc, #68]	; (8005168 <TIM_OC4_SetConfig+0xa8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d109      	bne.n	800513c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800512e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	019b      	lsls	r3, r3, #6
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	621a      	str	r2, [r3, #32]
}
 8005156:	bf00      	nop
 8005158:	371c      	adds	r7, #28
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	40010000 	.word	0x40010000
 8005168:	40010400 	.word	0x40010400

0800516c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0201 	bic.w	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 030a 	bic.w	r3, r3, #10
 80051a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	621a      	str	r2, [r3, #32]
}
 80051be:	bf00      	nop
 80051c0:	371c      	adds	r7, #28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b087      	sub	sp, #28
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	f023 0210 	bic.w	r2, r3, #16
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	031b      	lsls	r3, r3, #12
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005206:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	621a      	str	r2, [r3, #32]
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005240:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	f043 0307 	orr.w	r3, r3, #7
 800524c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800527a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	021a      	lsls	r2, r3, #8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	431a      	orrs	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4313      	orrs	r3, r2
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	2201      	movs	r2, #1
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1a      	ldr	r2, [r3, #32]
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	43db      	mvns	r3, r3
 80052c2:	401a      	ands	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	fa01 f303 	lsl.w	r3, r1, r3
 80052d8:	431a      	orrs	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005300:	2302      	movs	r3, #2
 8005302:	e05a      	b.n	80053ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a21      	ldr	r2, [pc, #132]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d022      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005350:	d01d      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d018      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d013      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00e      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d009      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a17      	ldr	r2, [pc, #92]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d004      	beq.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10c      	bne.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4313      	orrs	r3, r2
 800539e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40001800 	.word	0x40001800

080053e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e03f      	b.n	800549e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc fe9a 	bl	800216c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2224      	movs	r2, #36	; 0x24
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fde9 	bl	8006028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695a      	ldr	r2, [r3, #20]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b08a      	sub	sp, #40	; 0x28
 80054aa:	af02      	add	r7, sp, #8
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	4613      	mov	r3, r2
 80054b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d17c      	bne.n	80055c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_UART_Transmit+0x2c>
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e075      	b.n	80055c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d101      	bne.n	80054e4 <HAL_UART_Transmit+0x3e>
 80054e0:	2302      	movs	r3, #2
 80054e2:	e06e      	b.n	80055c2 <HAL_UART_Transmit+0x11c>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2221      	movs	r2, #33	; 0x21
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054fa:	f7fc ffb5 	bl	8002468 <HAL_GetTick>
 80054fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	88fa      	ldrh	r2, [r7, #6]
 800550a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005514:	d108      	bne.n	8005528 <HAL_UART_Transmit+0x82>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d104      	bne.n	8005528 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	e003      	b.n	8005530 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005538:	e02a      	b.n	8005590 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2200      	movs	r2, #0
 8005542:	2180      	movs	r1, #128	; 0x80
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 fb29 	bl	8005b9c <UART_WaitOnFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e036      	b.n	80055c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005568:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	3302      	adds	r3, #2
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e007      	b.n	8005582 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	781a      	ldrb	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	3301      	adds	r3, #1
 8005580:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1cf      	bne.n	800553a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2140      	movs	r1, #64	; 0x40
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 faf9 	bl	8005b9c <UART_WaitOnFlagUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e006      	b.n	80055c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	e000      	b.n	80055c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055c0:	2302      	movs	r3, #2
  }
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	60b9      	str	r1, [r7, #8]
 80055d4:	4613      	mov	r3, r2
 80055d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d11d      	bne.n	8005620 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_UART_Receive_IT+0x26>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e016      	b.n	8005622 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Receive_IT+0x38>
 80055fe:	2302      	movs	r3, #2
 8005600:	e00f      	b.n	8005622 <HAL_UART_Receive_IT+0x58>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	461a      	mov	r2, r3
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fb2e 	bl	8005c78 <UART_Start_Receive_IT>
 800561c:	4603      	mov	r3, r0
 800561e:	e000      	b.n	8005622 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005620:	2302      	movs	r3, #2
  }
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b0ba      	sub	sp, #232	; 0xe8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005652:	2300      	movs	r3, #0
 8005654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005658:	2300      	movs	r3, #0
 800565a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800566a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10f      	bne.n	8005692 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <HAL_UART_IRQHandler+0x66>
 800567e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fc11 	bl	8005eb2 <UART_Receive_IT>
      return;
 8005690:	e256      	b.n	8005b40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80de 	beq.w	8005858 <HAL_UART_IRQHandler+0x22c>
 800569c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80d1 	beq.w	8005858 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00b      	beq.n	80056da <HAL_UART_IRQHandler+0xae>
 80056c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d005      	beq.n	80056da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f043 0201 	orr.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <HAL_UART_IRQHandler+0xd2>
 80056e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f6:	f043 0202 	orr.w	r2, r3, #2
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <HAL_UART_IRQHandler+0xf6>
 800570a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0204 	orr.w	r2, r3, #4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d011      	beq.n	8005752 <HAL_UART_IRQHandler+0x126>
 800572e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d105      	bne.n	8005746 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800573a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d005      	beq.n	8005752 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f043 0208 	orr.w	r2, r3, #8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 81ed 	beq.w	8005b36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005760:	f003 0320 	and.w	r3, r3, #32
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_UART_IRQHandler+0x14e>
 8005768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fb9c 	bl	8005eb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <HAL_UART_IRQHandler+0x17a>
 800579e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d04f      	beq.n	8005846 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 faa4 	bl	8005cf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b40      	cmp	r3, #64	; 0x40
 80057b8:	d141      	bne.n	800583e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3314      	adds	r3, #20
 80057c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3314      	adds	r3, #20
 80057e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1d9      	bne.n	80057ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	2b00      	cmp	r3, #0
 800580c:	d013      	beq.n	8005836 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005812:	4a7d      	ldr	r2, [pc, #500]	; (8005a08 <HAL_UART_IRQHandler+0x3dc>)
 8005814:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	4618      	mov	r0, r3
 800581c:	f7fd f8dc 	bl	80029d8 <HAL_DMA_Abort_IT>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d016      	beq.n	8005854 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005830:	4610      	mov	r0, r2
 8005832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	e00e      	b.n	8005854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f99a 	bl	8005b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	e00a      	b.n	8005854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f996 	bl	8005b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005844:	e006      	b.n	8005854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f992 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005852:	e170      	b.n	8005b36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005854:	bf00      	nop
    return;
 8005856:	e16e      	b.n	8005b36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	2b01      	cmp	r3, #1
 800585e:	f040 814a 	bne.w	8005af6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 8143 	beq.w	8005af6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 813c 	beq.w	8005af6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800587e:	2300      	movs	r3, #0
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	60bb      	str	r3, [r7, #8]
 8005892:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	f040 80b4 	bne.w	8005a0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8140 	beq.w	8005b3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058c2:	429a      	cmp	r2, r3
 80058c4:	f080 8139 	bcs.w	8005b3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058da:	f000 8088 	beq.w	80059ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	330c      	adds	r3, #12
 80058e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	330c      	adds	r3, #12
 8005906:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800590a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800590e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005916:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1d9      	bne.n	80058de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3314      	adds	r3, #20
 8005930:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800593a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3314      	adds	r3, #20
 800594a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800594e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005952:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005956:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e1      	bne.n	800592a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	3314      	adds	r3, #20
 800596c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800597c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3314      	adds	r3, #20
 8005986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800598a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800598c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005990:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e3      	bne.n	8005966 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	330c      	adds	r3, #12
 80059b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b6:	e853 3f00 	ldrex	r3, [r3]
 80059ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059be:	f023 0310 	bic.w	r3, r3, #16
 80059c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80059d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059d8:	e841 2300 	strex	r3, r2, [r1]
 80059dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1e3      	bne.n	80059ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fc ff85 	bl	80028f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4619      	mov	r1, r3
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8c0 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a04:	e099      	b.n	8005b3a <HAL_UART_IRQHandler+0x50e>
 8005a06:	bf00      	nop
 8005a08:	08005dbb 	.word	0x08005dbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 808b 	beq.w	8005b3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8086 	beq.w	8005b3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	330c      	adds	r3, #12
 8005a38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	e853 3f00 	ldrex	r3, [r3]
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a56:	647a      	str	r2, [r7, #68]	; 0x44
 8005a58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e3      	bne.n	8005a32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3314      	adds	r3, #20
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	623b      	str	r3, [r7, #32]
   return(result);
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3314      	adds	r3, #20
 8005a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a8e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e3      	bne.n	8005a6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	330c      	adds	r3, #12
 8005ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0310 	bic.w	r3, r3, #16
 8005ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ad4:	61fa      	str	r2, [r7, #28]
 8005ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	69b9      	ldr	r1, [r7, #24]
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e3      	bne.n	8005ab0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f848 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005af4:	e023      	b.n	8005b3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <HAL_UART_IRQHandler+0x4ea>
 8005b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f967 	bl	8005de2 <UART_Transmit_IT>
    return;
 8005b14:	e014      	b.n	8005b40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00e      	beq.n	8005b40 <HAL_UART_IRQHandler+0x514>
 8005b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d008      	beq.n	8005b40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9a7 	bl	8005e82 <UART_EndTransmit_IT>
    return;
 8005b34:	e004      	b.n	8005b40 <HAL_UART_IRQHandler+0x514>
    return;
 8005b36:	bf00      	nop
 8005b38:	e002      	b.n	8005b40 <HAL_UART_IRQHandler+0x514>
      return;
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <HAL_UART_IRQHandler+0x514>
      return;
 8005b3e:	bf00      	nop
  }
}
 8005b40:	37e8      	adds	r7, #232	; 0xe8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop

08005b48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b090      	sub	sp, #64	; 0x40
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bac:	e050      	b.n	8005c50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb4:	d04c      	beq.n	8005c50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8005bbc:	f7fc fc54 	bl	8002468 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d241      	bcs.n	8005c50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	330c      	adds	r3, #12
 8005bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bec:	637a      	str	r2, [r7, #52]	; 0x34
 8005bee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e5      	bne.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3314      	adds	r3, #20
 8005c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	e853 3f00 	ldrex	r3, [r3]
 8005c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3314      	adds	r3, #20
 8005c1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c20:	623a      	str	r2, [r7, #32]
 8005c22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	69f9      	ldr	r1, [r7, #28]
 8005c26:	6a3a      	ldr	r2, [r7, #32]
 8005c28:	e841 2300 	strex	r3, r2, [r1]
 8005c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e5      	bne.n	8005c00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e00f      	b.n	8005c70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d09f      	beq.n	8005bae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3740      	adds	r7, #64	; 0x40
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	88fa      	ldrh	r2, [r7, #6]
 8005c90:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	88fa      	ldrh	r2, [r7, #6]
 8005c96:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2222      	movs	r2, #34	; 0x22
 8005ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d007      	beq.n	8005cc6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cc4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	695a      	ldr	r2, [r3, #20]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0201 	orr.w	r2, r2, #1
 8005cd4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0220 	orr.w	r2, r2, #32
 8005ce4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b095      	sub	sp, #84	; 0x54
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d1c:	643a      	str	r2, [r7, #64]	; 0x40
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e5      	bne.n	8005cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f023 0301 	bic.w	r3, r3, #1
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3314      	adds	r3, #20
 8005d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d119      	bne.n	8005da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f023 0310 	bic.w	r3, r3, #16
 8005d82:	647b      	str	r3, [r7, #68]	; 0x44
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d8c:	61ba      	str	r2, [r7, #24]
 8005d8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6979      	ldr	r1, [r7, #20]
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	613b      	str	r3, [r7, #16]
   return(result);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e5      	bne.n	8005d6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dae:	bf00      	nop
 8005db0:	3754      	adds	r7, #84	; 0x54
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f7ff fecb 	bl	8005b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b085      	sub	sp, #20
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b21      	cmp	r3, #33	; 0x21
 8005df4:	d13e      	bne.n	8005e74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfe:	d114      	bne.n	8005e2a <UART_Transmit_IT+0x48>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d110      	bne.n	8005e2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	1c9a      	adds	r2, r3, #2
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	621a      	str	r2, [r3, #32]
 8005e28:	e008      	b.n	8005e3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	1c59      	adds	r1, r3, #1
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	6211      	str	r1, [r2, #32]
 8005e34:	781a      	ldrb	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10f      	bne.n	8005e70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	e000      	b.n	8005e76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e74:	2302      	movs	r3, #2
  }
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fe50 	bl	8005b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b08c      	sub	sp, #48	; 0x30
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b22      	cmp	r3, #34	; 0x22
 8005ec4:	f040 80ab 	bne.w	800601e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed0:	d117      	bne.n	8005f02 <UART_Receive_IT+0x50>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d113      	bne.n	8005f02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	1c9a      	adds	r2, r3, #2
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	629a      	str	r2, [r3, #40]	; 0x28
 8005f00:	e026      	b.n	8005f50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f14:	d007      	beq.n	8005f26 <UART_Receive_IT+0x74>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <UART_Receive_IT+0x82>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e008      	b.n	8005f46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d15a      	bne.n	800601a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0220 	bic.w	r2, r2, #32
 8005f72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0201 	bic.w	r2, r2, #1
 8005f92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d135      	bne.n	8006010 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f023 0310 	bic.w	r3, r3, #16
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fca:	623a      	str	r2, [r7, #32]
 8005fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	69f9      	ldr	r1, [r7, #28]
 8005fd0:	6a3a      	ldr	r2, [r7, #32]
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e5      	bne.n	8005faa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b10      	cmp	r3, #16
 8005fea:	d10a      	bne.n	8006002 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff fdbb 	bl	8005b84 <HAL_UARTEx_RxEventCallback>
 800600e:	e002      	b.n	8006016 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff fda3 	bl	8005b5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	e002      	b.n	8006020 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e000      	b.n	8006020 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800601e:	2302      	movs	r3, #2
  }
}
 8006020:	4618      	mov	r0, r3
 8006022:	3730      	adds	r7, #48	; 0x30
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800602c:	b0c0      	sub	sp, #256	; 0x100
 800602e:	af00      	add	r7, sp, #0
 8006030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006044:	68d9      	ldr	r1, [r3, #12]
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	ea40 0301 	orr.w	r3, r0, r1
 8006050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006056:	689a      	ldr	r2, [r3, #8]
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	431a      	orrs	r2, r3
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	431a      	orrs	r2, r3
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006080:	f021 010c 	bic.w	r1, r1, #12
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800608e:	430b      	orrs	r3, r1
 8006090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a2:	6999      	ldr	r1, [r3, #24]
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	ea40 0301 	orr.w	r3, r0, r1
 80060ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	4b8f      	ldr	r3, [pc, #572]	; (80062f4 <UART_SetConfig+0x2cc>)
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d005      	beq.n	80060c8 <UART_SetConfig+0xa0>
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	4b8d      	ldr	r3, [pc, #564]	; (80062f8 <UART_SetConfig+0x2d0>)
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d104      	bne.n	80060d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060c8:	f7fd fd4c 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 80060cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060d0:	e003      	b.n	80060da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060d2:	f7fd fd33 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 80060d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e4:	f040 810c 	bne.w	8006300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ec:	2200      	movs	r2, #0
 80060ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060fa:	4622      	mov	r2, r4
 80060fc:	462b      	mov	r3, r5
 80060fe:	1891      	adds	r1, r2, r2
 8006100:	65b9      	str	r1, [r7, #88]	; 0x58
 8006102:	415b      	adcs	r3, r3
 8006104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800610a:	4621      	mov	r1, r4
 800610c:	eb12 0801 	adds.w	r8, r2, r1
 8006110:	4629      	mov	r1, r5
 8006112:	eb43 0901 	adc.w	r9, r3, r1
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800612a:	4690      	mov	r8, r2
 800612c:	4699      	mov	r9, r3
 800612e:	4623      	mov	r3, r4
 8006130:	eb18 0303 	adds.w	r3, r8, r3
 8006134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006138:	462b      	mov	r3, r5
 800613a:	eb49 0303 	adc.w	r3, r9, r3
 800613e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800614e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006156:	460b      	mov	r3, r1
 8006158:	18db      	adds	r3, r3, r3
 800615a:	653b      	str	r3, [r7, #80]	; 0x50
 800615c:	4613      	mov	r3, r2
 800615e:	eb42 0303 	adc.w	r3, r2, r3
 8006162:	657b      	str	r3, [r7, #84]	; 0x54
 8006164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800616c:	f7fa faa4 	bl	80006b8 <__aeabi_uldivmod>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4b61      	ldr	r3, [pc, #388]	; (80062fc <UART_SetConfig+0x2d4>)
 8006176:	fba3 2302 	umull	r2, r3, r3, r2
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	011c      	lsls	r4, r3, #4
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800618c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	1891      	adds	r1, r2, r2
 8006196:	64b9      	str	r1, [r7, #72]	; 0x48
 8006198:	415b      	adcs	r3, r3
 800619a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800619c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061a0:	4641      	mov	r1, r8
 80061a2:	eb12 0a01 	adds.w	sl, r2, r1
 80061a6:	4649      	mov	r1, r9
 80061a8:	eb43 0b01 	adc.w	fp, r3, r1
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061c0:	4692      	mov	sl, r2
 80061c2:	469b      	mov	fp, r3
 80061c4:	4643      	mov	r3, r8
 80061c6:	eb1a 0303 	adds.w	r3, sl, r3
 80061ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061ce:	464b      	mov	r3, r9
 80061d0:	eb4b 0303 	adc.w	r3, fp, r3
 80061d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061ec:	460b      	mov	r3, r1
 80061ee:	18db      	adds	r3, r3, r3
 80061f0:	643b      	str	r3, [r7, #64]	; 0x40
 80061f2:	4613      	mov	r3, r2
 80061f4:	eb42 0303 	adc.w	r3, r2, r3
 80061f8:	647b      	str	r3, [r7, #68]	; 0x44
 80061fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006202:	f7fa fa59 	bl	80006b8 <__aeabi_uldivmod>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	4611      	mov	r1, r2
 800620c:	4b3b      	ldr	r3, [pc, #236]	; (80062fc <UART_SetConfig+0x2d4>)
 800620e:	fba3 2301 	umull	r2, r3, r3, r1
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	2264      	movs	r2, #100	; 0x64
 8006216:	fb02 f303 	mul.w	r3, r2, r3
 800621a:	1acb      	subs	r3, r1, r3
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006222:	4b36      	ldr	r3, [pc, #216]	; (80062fc <UART_SetConfig+0x2d4>)
 8006224:	fba3 2302 	umull	r2, r3, r3, r2
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006230:	441c      	add	r4, r3
 8006232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006236:	2200      	movs	r2, #0
 8006238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800623c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006244:	4642      	mov	r2, r8
 8006246:	464b      	mov	r3, r9
 8006248:	1891      	adds	r1, r2, r2
 800624a:	63b9      	str	r1, [r7, #56]	; 0x38
 800624c:	415b      	adcs	r3, r3
 800624e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006254:	4641      	mov	r1, r8
 8006256:	1851      	adds	r1, r2, r1
 8006258:	6339      	str	r1, [r7, #48]	; 0x30
 800625a:	4649      	mov	r1, r9
 800625c:	414b      	adcs	r3, r1
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800626c:	4659      	mov	r1, fp
 800626e:	00cb      	lsls	r3, r1, #3
 8006270:	4651      	mov	r1, sl
 8006272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006276:	4651      	mov	r1, sl
 8006278:	00ca      	lsls	r2, r1, #3
 800627a:	4610      	mov	r0, r2
 800627c:	4619      	mov	r1, r3
 800627e:	4603      	mov	r3, r0
 8006280:	4642      	mov	r2, r8
 8006282:	189b      	adds	r3, r3, r2
 8006284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006288:	464b      	mov	r3, r9
 800628a:	460a      	mov	r2, r1
 800628c:	eb42 0303 	adc.w	r3, r2, r3
 8006290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062a8:	460b      	mov	r3, r1
 80062aa:	18db      	adds	r3, r3, r3
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ae:	4613      	mov	r3, r2
 80062b0:	eb42 0303 	adc.w	r3, r2, r3
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062be:	f7fa f9fb 	bl	80006b8 <__aeabi_uldivmod>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <UART_SetConfig+0x2d4>)
 80062c8:	fba3 1302 	umull	r1, r3, r3, r2
 80062cc:	095b      	lsrs	r3, r3, #5
 80062ce:	2164      	movs	r1, #100	; 0x64
 80062d0:	fb01 f303 	mul.w	r3, r1, r3
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	3332      	adds	r3, #50	; 0x32
 80062da:	4a08      	ldr	r2, [pc, #32]	; (80062fc <UART_SetConfig+0x2d4>)
 80062dc:	fba2 2303 	umull	r2, r3, r2, r3
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	f003 0207 	and.w	r2, r3, #7
 80062e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4422      	add	r2, r4
 80062ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062f0:	e105      	b.n	80064fe <UART_SetConfig+0x4d6>
 80062f2:	bf00      	nop
 80062f4:	40011000 	.word	0x40011000
 80062f8:	40011400 	.word	0x40011400
 80062fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006304:	2200      	movs	r2, #0
 8006306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800630a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800630e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006312:	4642      	mov	r2, r8
 8006314:	464b      	mov	r3, r9
 8006316:	1891      	adds	r1, r2, r2
 8006318:	6239      	str	r1, [r7, #32]
 800631a:	415b      	adcs	r3, r3
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
 800631e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006322:	4641      	mov	r1, r8
 8006324:	1854      	adds	r4, r2, r1
 8006326:	4649      	mov	r1, r9
 8006328:	eb43 0501 	adc.w	r5, r3, r1
 800632c:	f04f 0200 	mov.w	r2, #0
 8006330:	f04f 0300 	mov.w	r3, #0
 8006334:	00eb      	lsls	r3, r5, #3
 8006336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800633a:	00e2      	lsls	r2, r4, #3
 800633c:	4614      	mov	r4, r2
 800633e:	461d      	mov	r5, r3
 8006340:	4643      	mov	r3, r8
 8006342:	18e3      	adds	r3, r4, r3
 8006344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006348:	464b      	mov	r3, r9
 800634a:	eb45 0303 	adc.w	r3, r5, r3
 800634e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800635e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800636e:	4629      	mov	r1, r5
 8006370:	008b      	lsls	r3, r1, #2
 8006372:	4621      	mov	r1, r4
 8006374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006378:	4621      	mov	r1, r4
 800637a:	008a      	lsls	r2, r1, #2
 800637c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006380:	f7fa f99a 	bl	80006b8 <__aeabi_uldivmod>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	4b60      	ldr	r3, [pc, #384]	; (800650c <UART_SetConfig+0x4e4>)
 800638a:	fba3 2302 	umull	r2, r3, r3, r2
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	011c      	lsls	r4, r3, #4
 8006392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006396:	2200      	movs	r2, #0
 8006398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800639c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	1891      	adds	r1, r2, r2
 80063aa:	61b9      	str	r1, [r7, #24]
 80063ac:	415b      	adcs	r3, r3
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063b4:	4641      	mov	r1, r8
 80063b6:	1851      	adds	r1, r2, r1
 80063b8:	6139      	str	r1, [r7, #16]
 80063ba:	4649      	mov	r1, r9
 80063bc:	414b      	adcs	r3, r1
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063cc:	4659      	mov	r1, fp
 80063ce:	00cb      	lsls	r3, r1, #3
 80063d0:	4651      	mov	r1, sl
 80063d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d6:	4651      	mov	r1, sl
 80063d8:	00ca      	lsls	r2, r1, #3
 80063da:	4610      	mov	r0, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	4642      	mov	r2, r8
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063e8:	464b      	mov	r3, r9
 80063ea:	460a      	mov	r2, r1
 80063ec:	eb42 0303 	adc.w	r3, r2, r3
 80063f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80063fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800640c:	4649      	mov	r1, r9
 800640e:	008b      	lsls	r3, r1, #2
 8006410:	4641      	mov	r1, r8
 8006412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006416:	4641      	mov	r1, r8
 8006418:	008a      	lsls	r2, r1, #2
 800641a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800641e:	f7fa f94b 	bl	80006b8 <__aeabi_uldivmod>
 8006422:	4602      	mov	r2, r0
 8006424:	460b      	mov	r3, r1
 8006426:	4b39      	ldr	r3, [pc, #228]	; (800650c <UART_SetConfig+0x4e4>)
 8006428:	fba3 1302 	umull	r1, r3, r3, r2
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	2164      	movs	r1, #100	; 0x64
 8006430:	fb01 f303 	mul.w	r3, r1, r3
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	3332      	adds	r3, #50	; 0x32
 800643a:	4a34      	ldr	r2, [pc, #208]	; (800650c <UART_SetConfig+0x4e4>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006446:	441c      	add	r4, r3
 8006448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800644c:	2200      	movs	r2, #0
 800644e:	673b      	str	r3, [r7, #112]	; 0x70
 8006450:	677a      	str	r2, [r7, #116]	; 0x74
 8006452:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006456:	4642      	mov	r2, r8
 8006458:	464b      	mov	r3, r9
 800645a:	1891      	adds	r1, r2, r2
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	415b      	adcs	r3, r3
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006466:	4641      	mov	r1, r8
 8006468:	1851      	adds	r1, r2, r1
 800646a:	6039      	str	r1, [r7, #0]
 800646c:	4649      	mov	r1, r9
 800646e:	414b      	adcs	r3, r1
 8006470:	607b      	str	r3, [r7, #4]
 8006472:	f04f 0200 	mov.w	r2, #0
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800647e:	4659      	mov	r1, fp
 8006480:	00cb      	lsls	r3, r1, #3
 8006482:	4651      	mov	r1, sl
 8006484:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006488:	4651      	mov	r1, sl
 800648a:	00ca      	lsls	r2, r1, #3
 800648c:	4610      	mov	r0, r2
 800648e:	4619      	mov	r1, r3
 8006490:	4603      	mov	r3, r0
 8006492:	4642      	mov	r2, r8
 8006494:	189b      	adds	r3, r3, r2
 8006496:	66bb      	str	r3, [r7, #104]	; 0x68
 8006498:	464b      	mov	r3, r9
 800649a:	460a      	mov	r2, r1
 800649c:	eb42 0303 	adc.w	r3, r2, r3
 80064a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	663b      	str	r3, [r7, #96]	; 0x60
 80064ac:	667a      	str	r2, [r7, #100]	; 0x64
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064ba:	4649      	mov	r1, r9
 80064bc:	008b      	lsls	r3, r1, #2
 80064be:	4641      	mov	r1, r8
 80064c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064c4:	4641      	mov	r1, r8
 80064c6:	008a      	lsls	r2, r1, #2
 80064c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064cc:	f7fa f8f4 	bl	80006b8 <__aeabi_uldivmod>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4b0d      	ldr	r3, [pc, #52]	; (800650c <UART_SetConfig+0x4e4>)
 80064d6:	fba3 1302 	umull	r1, r3, r3, r2
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	2164      	movs	r1, #100	; 0x64
 80064de:	fb01 f303 	mul.w	r3, r1, r3
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	011b      	lsls	r3, r3, #4
 80064e6:	3332      	adds	r3, #50	; 0x32
 80064e8:	4a08      	ldr	r2, [pc, #32]	; (800650c <UART_SetConfig+0x4e4>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4422      	add	r2, r4
 80064fc:	609a      	str	r2, [r3, #8]
}
 80064fe:	bf00      	nop
 8006500:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006504:	46bd      	mov	sp, r7
 8006506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800650a:	bf00      	nop
 800650c:	51eb851f 	.word	0x51eb851f

08006510 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006514:	4904      	ldr	r1, [pc, #16]	; (8006528 <MX_FATFS_Init+0x18>)
 8006516:	4805      	ldr	r0, [pc, #20]	; (800652c <MX_FATFS_Init+0x1c>)
 8006518:	f002 fec0 	bl	800929c <FATFS_LinkDriver>
 800651c:	4603      	mov	r3, r0
 800651e:	461a      	mov	r2, r3
 8006520:	4b03      	ldr	r3, [pc, #12]	; (8006530 <MX_FATFS_Init+0x20>)
 8006522:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006524:	bf00      	nop
 8006526:	bd80      	pop	{r7, pc}
 8006528:	200134dc 	.word	0x200134dc
 800652c:	2000000c 	.word	0x2000000c
 8006530:	200134d8 	.word	0x200134d8

08006534 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006534:	b480      	push	{r7}
 8006536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006538:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800653a:	4618      	mov	r0, r3
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f9d9 	bl	8006908 <USER_SPI_initialize>
 8006556:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 fab7 	bl	8006ae0 <USER_SPI_status>
 8006572:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	4603      	mov	r3, r0
 800658a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800658c:	7bf8      	ldrb	r0, [r7, #15]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	f000 faba 	bl	8006b0c <USER_SPI_read>
 8006598:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b084      	sub	sp, #16
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
 80065ae:	4603      	mov	r3, r0
 80065b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80065b2:	7bf8      	ldrb	r0, [r7, #15]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	f000 fb0d 	bl	8006bd8 <USER_SPI_write>
 80065be:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	603a      	str	r2, [r7, #0]
 80065d2:	71fb      	strb	r3, [r7, #7]
 80065d4:	460b      	mov	r3, r1
 80065d6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80065d8:	79b9      	ldrb	r1, [r7, #6]
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fb76 	bl	8006cd0 <USER_SPI_ioctl>
 80065e4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80065f8:	f7fb ff36 	bl	8002468 <HAL_GetTick>
 80065fc:	4603      	mov	r3, r0
 80065fe:	4a04      	ldr	r2, [pc, #16]	; (8006610 <SPI_Timer_On+0x20>)
 8006600:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006602:	4a04      	ldr	r2, [pc, #16]	; (8006614 <SPI_Timer_On+0x24>)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6013      	str	r3, [r2, #0]
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	200134e4 	.word	0x200134e4
 8006614:	200134e8 	.word	0x200134e8

08006618 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800661c:	f7fb ff24 	bl	8002468 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	4b06      	ldr	r3, [pc, #24]	; (800663c <SPI_Timer_Status+0x24>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	1ad2      	subs	r2, r2, r3
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <SPI_Timer_Status+0x28>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	bf34      	ite	cc
 8006630:	2301      	movcc	r3, #1
 8006632:	2300      	movcs	r3, #0
 8006634:	b2db      	uxtb	r3, r3
}
 8006636:	4618      	mov	r0, r3
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	200134e4 	.word	0x200134e4
 8006640:	200134e8 	.word	0x200134e8

08006644 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af02      	add	r7, sp, #8
 800664a:	4603      	mov	r3, r0
 800664c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800664e:	f107 020f 	add.w	r2, r7, #15
 8006652:	1df9      	adds	r1, r7, #7
 8006654:	2332      	movs	r3, #50	; 0x32
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	2301      	movs	r3, #1
 800665a:	4804      	ldr	r0, [pc, #16]	; (800666c <xchg_spi+0x28>)
 800665c:	f7fd fb1f 	bl	8003c9e <HAL_SPI_TransmitReceive>
    return rxDat;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20000648 	.word	0x20000648

08006670 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006670:	b590      	push	{r4, r7, lr}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	e00a      	b.n	8006696 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	18d4      	adds	r4, r2, r3
 8006686:	20ff      	movs	r0, #255	; 0xff
 8006688:	f7ff ffdc 	bl	8006644 <xchg_spi>
 800668c:	4603      	mov	r3, r0
 800668e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3301      	adds	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	429a      	cmp	r2, r3
 800669c:	d3f0      	bcc.n	8006680 <rcvr_spi_multi+0x10>
	}
}
 800669e:	bf00      	nop
 80066a0:	bf00      	nop
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd90      	pop	{r4, r7, pc}

080066a8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80066b2:	2300      	movs	r3, #0
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	e009      	b.n	80066cc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff ffbf 	bl	8006644 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d3f1      	bcc.n	80066b8 <xmit_spi_multi+0x10>
	}
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80066e6:	f7fb febf 	bl	8002468 <HAL_GetTick>
 80066ea:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80066f0:	20ff      	movs	r0, #255	; 0xff
 80066f2:	f7ff ffa7 	bl	8006644 <xchg_spi>
 80066f6:	4603      	mov	r3, r0
 80066f8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	2bff      	cmp	r3, #255	; 0xff
 80066fe:	d007      	beq.n	8006710 <wait_ready+0x32>
 8006700:	f7fb feb2 	bl	8002468 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	429a      	cmp	r2, r3
 800670e:	d8ef      	bhi.n	80066f0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	2bff      	cmp	r3, #255	; 0xff
 8006714:	bf0c      	ite	eq
 8006716:	2301      	moveq	r3, #1
 8006718:	2300      	movne	r3, #0
 800671a:	b2db      	uxtb	r3, r3
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006728:	2201      	movs	r2, #1
 800672a:	2102      	movs	r1, #2
 800672c:	4803      	ldr	r0, [pc, #12]	; (800673c <despiselect+0x18>)
 800672e:	f7fc fd7b 	bl	8003228 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006732:	20ff      	movs	r0, #255	; 0xff
 8006734:	f7ff ff86 	bl	8006644 <xchg_spi>

}
 8006738:	bf00      	nop
 800673a:	bd80      	pop	{r7, pc}
 800673c:	40020000 	.word	0x40020000

08006740 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006744:	2200      	movs	r2, #0
 8006746:	2102      	movs	r1, #2
 8006748:	4809      	ldr	r0, [pc, #36]	; (8006770 <spiselect+0x30>)
 800674a:	f7fc fd6d 	bl	8003228 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800674e:	20ff      	movs	r0, #255	; 0xff
 8006750:	f7ff ff78 	bl	8006644 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006758:	f7ff ffc1 	bl	80066de <wait_ready>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <spiselect+0x26>
 8006762:	2301      	movs	r3, #1
 8006764:	e002      	b.n	800676c <spiselect+0x2c>

	despiselect();
 8006766:	f7ff ffdd 	bl	8006724 <despiselect>
	return 0;	/* Timeout */
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	bd80      	pop	{r7, pc}
 8006770:	40020000 	.word	0x40020000

08006774 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800677e:	20c8      	movs	r0, #200	; 0xc8
 8006780:	f7ff ff36 	bl	80065f0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006784:	20ff      	movs	r0, #255	; 0xff
 8006786:	f7ff ff5d 	bl	8006644 <xchg_spi>
 800678a:	4603      	mov	r3, r0
 800678c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	2bff      	cmp	r3, #255	; 0xff
 8006792:	d104      	bne.n	800679e <rcvr_datablock+0x2a>
 8006794:	f7ff ff40 	bl	8006618 <SPI_Timer_Status>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d1f2      	bne.n	8006784 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	2bfe      	cmp	r3, #254	; 0xfe
 80067a2:	d001      	beq.n	80067a8 <rcvr_datablock+0x34>
 80067a4:	2300      	movs	r3, #0
 80067a6:	e00a      	b.n	80067be <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff ff60 	bl	8006670 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80067b0:	20ff      	movs	r0, #255	; 0xff
 80067b2:	f7ff ff47 	bl	8006644 <xchg_spi>
 80067b6:	20ff      	movs	r0, #255	; 0xff
 80067b8:	f7ff ff44 	bl	8006644 <xchg_spi>

	return 1;						/* Function succeeded */
 80067bc:	2301      	movs	r3, #1
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
 80067ce:	460b      	mov	r3, r1
 80067d0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80067d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067d6:	f7ff ff82 	bl	80066de <wait_ready>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <xmit_datablock+0x1e>
 80067e0:	2300      	movs	r3, #0
 80067e2:	e01e      	b.n	8006822 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff ff2c 	bl	8006644 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	2bfd      	cmp	r3, #253	; 0xfd
 80067f0:	d016      	beq.n	8006820 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80067f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff ff56 	bl	80066a8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80067fc:	20ff      	movs	r0, #255	; 0xff
 80067fe:	f7ff ff21 	bl	8006644 <xchg_spi>
 8006802:	20ff      	movs	r0, #255	; 0xff
 8006804:	f7ff ff1e 	bl	8006644 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006808:	20ff      	movs	r0, #255	; 0xff
 800680a:	f7ff ff1b 	bl	8006644 <xchg_spi>
 800680e:	4603      	mov	r3, r0
 8006810:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2b05      	cmp	r3, #5
 800681a:	d001      	beq.n	8006820 <xmit_datablock+0x5a>
 800681c:	2300      	movs	r3, #0
 800681e:	e000      	b.n	8006822 <xmit_datablock+0x5c>
	}
	return 1;
 8006820:	2301      	movs	r3, #1
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	4603      	mov	r3, r0
 8006832:	6039      	str	r1, [r7, #0]
 8006834:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683a:	2b00      	cmp	r3, #0
 800683c:	da0e      	bge.n	800685c <send_cmd+0x32>
		cmd &= 0x7F;
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006844:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006846:	2100      	movs	r1, #0
 8006848:	2037      	movs	r0, #55	; 0x37
 800684a:	f7ff ffee 	bl	800682a <send_cmd>
 800684e:	4603      	mov	r3, r0
 8006850:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006852:	7bbb      	ldrb	r3, [r7, #14]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d901      	bls.n	800685c <send_cmd+0x32>
 8006858:	7bbb      	ldrb	r3, [r7, #14]
 800685a:	e051      	b.n	8006900 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800685c:	79fb      	ldrb	r3, [r7, #7]
 800685e:	2b0c      	cmp	r3, #12
 8006860:	d008      	beq.n	8006874 <send_cmd+0x4a>
		despiselect();
 8006862:	f7ff ff5f 	bl	8006724 <despiselect>
		if (!spiselect()) return 0xFF;
 8006866:	f7ff ff6b 	bl	8006740 <spiselect>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <send_cmd+0x4a>
 8006870:	23ff      	movs	r3, #255	; 0xff
 8006872:	e045      	b.n	8006900 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800687a:	b2db      	uxtb	r3, r3
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff fee1 	bl	8006644 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	0e1b      	lsrs	r3, r3, #24
 8006886:	b2db      	uxtb	r3, r3
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff fedb 	bl	8006644 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	0c1b      	lsrs	r3, r3, #16
 8006892:	b2db      	uxtb	r3, r3
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff fed5 	bl	8006644 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	0a1b      	lsrs	r3, r3, #8
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff fecf 	bl	8006644 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff feca 	bl	8006644 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80068b0:	2301      	movs	r3, #1
 80068b2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <send_cmd+0x94>
 80068ba:	2395      	movs	r3, #149	; 0x95
 80068bc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d101      	bne.n	80068c8 <send_cmd+0x9e>
 80068c4:	2387      	movs	r3, #135	; 0x87
 80068c6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff feba 	bl	8006644 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	2b0c      	cmp	r3, #12
 80068d4:	d102      	bne.n	80068dc <send_cmd+0xb2>
 80068d6:	20ff      	movs	r0, #255	; 0xff
 80068d8:	f7ff feb4 	bl	8006644 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80068dc:	230a      	movs	r3, #10
 80068de:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80068e0:	20ff      	movs	r0, #255	; 0xff
 80068e2:	f7ff feaf 	bl	8006644 <xchg_spi>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80068ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	da05      	bge.n	80068fe <send_cmd+0xd4>
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006908:	b590      	push	{r4, r7, lr}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006912:	79fb      	ldrb	r3, [r7, #7]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <USER_SPI_initialize+0x14>
 8006918:	2301      	movs	r3, #1
 800691a:	e0d6      	b.n	8006aca <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800691c:	4b6d      	ldr	r3, [pc, #436]	; (8006ad4 <USER_SPI_initialize+0x1cc>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <USER_SPI_initialize+0x2a>
 800692a:	4b6a      	ldr	r3, [pc, #424]	; (8006ad4 <USER_SPI_initialize+0x1cc>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	e0cb      	b.n	8006aca <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006932:	4b69      	ldr	r3, [pc, #420]	; (8006ad8 <USER_SPI_initialize+0x1d0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800693c:	4b66      	ldr	r3, [pc, #408]	; (8006ad8 <USER_SPI_initialize+0x1d0>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006944:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006946:	230a      	movs	r3, #10
 8006948:	73fb      	strb	r3, [r7, #15]
 800694a:	e005      	b.n	8006958 <USER_SPI_initialize+0x50>
 800694c:	20ff      	movs	r0, #255	; 0xff
 800694e:	f7ff fe79 	bl	8006644 <xchg_spi>
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	3b01      	subs	r3, #1
 8006956:	73fb      	strb	r3, [r7, #15]
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1f6      	bne.n	800694c <USER_SPI_initialize+0x44>

	ty = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006962:	2100      	movs	r1, #0
 8006964:	2000      	movs	r0, #0
 8006966:	f7ff ff60 	bl	800682a <send_cmd>
 800696a:	4603      	mov	r3, r0
 800696c:	2b01      	cmp	r3, #1
 800696e:	f040 808b 	bne.w	8006a88 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006976:	f7ff fe3b 	bl	80065f0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800697a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800697e:	2008      	movs	r0, #8
 8006980:	f7ff ff53 	bl	800682a <send_cmd>
 8006984:	4603      	mov	r3, r0
 8006986:	2b01      	cmp	r3, #1
 8006988:	d151      	bne.n	8006a2e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]
 800698e:	e00d      	b.n	80069ac <USER_SPI_initialize+0xa4>
 8006990:	7bfc      	ldrb	r4, [r7, #15]
 8006992:	20ff      	movs	r0, #255	; 0xff
 8006994:	f7ff fe56 	bl	8006644 <xchg_spi>
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	f104 0310 	add.w	r3, r4, #16
 80069a0:	443b      	add	r3, r7
 80069a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	3301      	adds	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d9ee      	bls.n	8006990 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80069b2:	7abb      	ldrb	r3, [r7, #10]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d167      	bne.n	8006a88 <USER_SPI_initialize+0x180>
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	2baa      	cmp	r3, #170	; 0xaa
 80069bc:	d164      	bne.n	8006a88 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80069be:	bf00      	nop
 80069c0:	f7ff fe2a 	bl	8006618 <SPI_Timer_Status>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d007      	beq.n	80069da <USER_SPI_initialize+0xd2>
 80069ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80069ce:	20a9      	movs	r0, #169	; 0xa9
 80069d0:	f7ff ff2b 	bl	800682a <send_cmd>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f2      	bne.n	80069c0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80069da:	f7ff fe1d 	bl	8006618 <SPI_Timer_Status>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d051      	beq.n	8006a88 <USER_SPI_initialize+0x180>
 80069e4:	2100      	movs	r1, #0
 80069e6:	203a      	movs	r0, #58	; 0x3a
 80069e8:	f7ff ff1f 	bl	800682a <send_cmd>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d14a      	bne.n	8006a88 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]
 80069f6:	e00d      	b.n	8006a14 <USER_SPI_initialize+0x10c>
 80069f8:	7bfc      	ldrb	r4, [r7, #15]
 80069fa:	20ff      	movs	r0, #255	; 0xff
 80069fc:	f7ff fe22 	bl	8006644 <xchg_spi>
 8006a00:	4603      	mov	r3, r0
 8006a02:	461a      	mov	r2, r3
 8006a04:	f104 0310 	add.w	r3, r4, #16
 8006a08:	443b      	add	r3, r7
 8006a0a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	3301      	adds	r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d9ee      	bls.n	80069f8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006a1a:	7a3b      	ldrb	r3, [r7, #8]
 8006a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <USER_SPI_initialize+0x120>
 8006a24:	230c      	movs	r3, #12
 8006a26:	e000      	b.n	8006a2a <USER_SPI_initialize+0x122>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	737b      	strb	r3, [r7, #13]
 8006a2c:	e02c      	b.n	8006a88 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006a2e:	2100      	movs	r1, #0
 8006a30:	20a9      	movs	r0, #169	; 0xa9
 8006a32:	f7ff fefa 	bl	800682a <send_cmd>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d804      	bhi.n	8006a46 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	737b      	strb	r3, [r7, #13]
 8006a40:	23a9      	movs	r3, #169	; 0xa9
 8006a42:	73bb      	strb	r3, [r7, #14]
 8006a44:	e003      	b.n	8006a4e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006a46:	2301      	movs	r3, #1
 8006a48:	737b      	strb	r3, [r7, #13]
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006a4e:	bf00      	nop
 8006a50:	f7ff fde2 	bl	8006618 <SPI_Timer_Status>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <USER_SPI_initialize+0x162>
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7ff fee3 	bl	800682a <send_cmd>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1f2      	bne.n	8006a50 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006a6a:	f7ff fdd5 	bl	8006618 <SPI_Timer_Status>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <USER_SPI_initialize+0x17c>
 8006a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a78:	2010      	movs	r0, #16
 8006a7a:	f7ff fed6 	bl	800682a <send_cmd>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <USER_SPI_initialize+0x180>
				ty = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006a88:	4a14      	ldr	r2, [pc, #80]	; (8006adc <USER_SPI_initialize+0x1d4>)
 8006a8a:	7b7b      	ldrb	r3, [r7, #13]
 8006a8c:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006a8e:	f7ff fe49 	bl	8006724 <despiselect>

	if (ty) {			/* OK */
 8006a92:	7b7b      	ldrb	r3, [r7, #13]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d012      	beq.n	8006abe <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006a98:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <USER_SPI_initialize+0x1d0>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <USER_SPI_initialize+0x1d0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0210 	orr.w	r2, r2, #16
 8006aaa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <USER_SPI_initialize+0x1cc>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	f023 0301 	bic.w	r3, r3, #1
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <USER_SPI_initialize+0x1cc>)
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	e002      	b.n	8006ac4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <USER_SPI_initialize+0x1cc>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006ac4:	4b03      	ldr	r3, [pc, #12]	; (8006ad4 <USER_SPI_initialize+0x1cc>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b2db      	uxtb	r3, r3
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd90      	pop	{r4, r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000020 	.word	0x20000020
 8006ad8:	20000648 	.word	0x20000648
 8006adc:	200134e0 	.word	0x200134e0

08006ae0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <USER_SPI_status+0x14>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e002      	b.n	8006afa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006af4:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <USER_SPI_status+0x28>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	b2db      	uxtb	r3, r3
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	20000020 	.word	0x20000020

08006b0c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	607a      	str	r2, [r7, #4]
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d102      	bne.n	8006b28 <USER_SPI_read+0x1c>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <USER_SPI_read+0x20>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	e04d      	b.n	8006bc8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006b2c:	4b28      	ldr	r3, [pc, #160]	; (8006bd0 <USER_SPI_read+0xc4>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <USER_SPI_read+0x32>
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e044      	b.n	8006bc8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006b3e:	4b25      	ldr	r3, [pc, #148]	; (8006bd4 <USER_SPI_read+0xc8>)
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	f003 0308 	and.w	r3, r3, #8
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <USER_SPI_read+0x44>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	025b      	lsls	r3, r3, #9
 8006b4e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d111      	bne.n	8006b7a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	2011      	movs	r0, #17
 8006b5a:	f7ff fe66 	bl	800682a <send_cmd>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d129      	bne.n	8006bb8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b68:	68b8      	ldr	r0, [r7, #8]
 8006b6a:	f7ff fe03 	bl	8006774 <rcvr_datablock>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d021      	beq.n	8006bb8 <USER_SPI_read+0xac>
			count = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	e01e      	b.n	8006bb8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	2012      	movs	r0, #18
 8006b7e:	f7ff fe54 	bl	800682a <send_cmd>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d117      	bne.n	8006bb8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b8c:	68b8      	ldr	r0, [r7, #8]
 8006b8e:	f7ff fdf1 	bl	8006774 <rcvr_datablock>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00a      	beq.n	8006bae <USER_SPI_read+0xa2>
				buff += 512;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006b9e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	603b      	str	r3, [r7, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1ed      	bne.n	8006b88 <USER_SPI_read+0x7c>
 8006bac:	e000      	b.n	8006bb0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006bae:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	200c      	movs	r0, #12
 8006bb4:	f7ff fe39 	bl	800682a <send_cmd>
		}
	}
	despiselect();
 8006bb8:	f7ff fdb4 	bl	8006724 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	bf14      	ite	ne
 8006bc2:	2301      	movne	r3, #1
 8006bc4:	2300      	moveq	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20000020 	.word	0x20000020
 8006bd4:	200134e0 	.word	0x200134e0

08006bd8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	607a      	str	r2, [r7, #4]
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d102      	bne.n	8006bf4 <USER_SPI_write+0x1c>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <USER_SPI_write+0x20>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	e063      	b.n	8006cc0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006bf8:	4b33      	ldr	r3, [pc, #204]	; (8006cc8 <USER_SPI_write+0xf0>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <USER_SPI_write+0x32>
 8006c06:	2303      	movs	r3, #3
 8006c08:	e05a      	b.n	8006cc0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006c0a:	4b2f      	ldr	r3, [pc, #188]	; (8006cc8 <USER_SPI_write+0xf0>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <USER_SPI_write+0x44>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e051      	b.n	8006cc0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006c1c:	4b2b      	ldr	r3, [pc, #172]	; (8006ccc <USER_SPI_write+0xf4>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d102      	bne.n	8006c2e <USER_SPI_write+0x56>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	025b      	lsls	r3, r3, #9
 8006c2c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d110      	bne.n	8006c56 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	2018      	movs	r0, #24
 8006c38:	f7ff fdf7 	bl	800682a <send_cmd>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d136      	bne.n	8006cb0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006c42:	21fe      	movs	r1, #254	; 0xfe
 8006c44:	68b8      	ldr	r0, [r7, #8]
 8006c46:	f7ff fdbe 	bl	80067c6 <xmit_datablock>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d02f      	beq.n	8006cb0 <USER_SPI_write+0xd8>
			count = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	e02c      	b.n	8006cb0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006c56:	4b1d      	ldr	r3, [pc, #116]	; (8006ccc <USER_SPI_write+0xf4>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	f003 0306 	and.w	r3, r3, #6
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <USER_SPI_write+0x92>
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	2097      	movs	r0, #151	; 0x97
 8006c66:	f7ff fde0 	bl	800682a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	2019      	movs	r0, #25
 8006c6e:	f7ff fddc 	bl	800682a <send_cmd>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d11b      	bne.n	8006cb0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006c78:	21fc      	movs	r1, #252	; 0xfc
 8006c7a:	68b8      	ldr	r0, [r7, #8]
 8006c7c:	f7ff fda3 	bl	80067c6 <xmit_datablock>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <USER_SPI_write+0xc4>
				buff += 512;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006c8c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1ee      	bne.n	8006c78 <USER_SPI_write+0xa0>
 8006c9a:	e000      	b.n	8006c9e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006c9c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006c9e:	21fd      	movs	r1, #253	; 0xfd
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f7ff fd90 	bl	80067c6 <xmit_datablock>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <USER_SPI_write+0xd8>
 8006cac:	2301      	movs	r3, #1
 8006cae:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006cb0:	f7ff fd38 	bl	8006724 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bf14      	ite	ne
 8006cba:	2301      	movne	r3, #1
 8006cbc:	2300      	moveq	r3, #0
 8006cbe:	b2db      	uxtb	r3, r3
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000020 	.word	0x20000020
 8006ccc:	200134e0 	.word	0x200134e0

08006cd0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08c      	sub	sp, #48	; 0x30
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	603a      	str	r2, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <USER_SPI_ioctl+0x1a>
 8006ce6:	2304      	movs	r3, #4
 8006ce8:	e15a      	b.n	8006fa0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006cea:	4baf      	ldr	r3, [pc, #700]	; (8006fa8 <USER_SPI_ioctl+0x2d8>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <USER_SPI_ioctl+0x2c>
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e151      	b.n	8006fa0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006d02:	79bb      	ldrb	r3, [r7, #6]
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	f200 8136 	bhi.w	8006f76 <USER_SPI_ioctl+0x2a6>
 8006d0a:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <USER_SPI_ioctl+0x40>)
 8006d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d10:	08006d25 	.word	0x08006d25
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006f77 	.word	0x08006f77
 8006d1c:	08006de5 	.word	0x08006de5
 8006d20:	08006edb 	.word	0x08006edb
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006d24:	f7ff fd0c 	bl	8006740 <spiselect>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8127 	beq.w	8006f7e <USER_SPI_ioctl+0x2ae>
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006d36:	e122      	b.n	8006f7e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006d38:	2100      	movs	r1, #0
 8006d3a:	2009      	movs	r0, #9
 8006d3c:	f7ff fd75 	bl	800682a <send_cmd>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f040 811d 	bne.w	8006f82 <USER_SPI_ioctl+0x2b2>
 8006d48:	f107 030c 	add.w	r3, r7, #12
 8006d4c:	2110      	movs	r1, #16
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff fd10 	bl	8006774 <rcvr_datablock>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 8113 	beq.w	8006f82 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006d5c:	7b3b      	ldrb	r3, [r7, #12]
 8006d5e:	099b      	lsrs	r3, r3, #6
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d111      	bne.n	8006d8a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006d66:	7d7b      	ldrb	r3, [r7, #21]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	7d3b      	ldrb	r3, [r7, #20]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	4413      	add	r3, r2
 8006d70:	461a      	mov	r2, r3
 8006d72:	7cfb      	ldrb	r3, [r7, #19]
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	029a      	lsls	r2, r3, #10
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e028      	b.n	8006ddc <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006d8a:	7c7b      	ldrb	r3, [r7, #17]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	7dbb      	ldrb	r3, [r7, #22]
 8006d94:	09db      	lsrs	r3, r3, #7
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	4413      	add	r3, r2
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	7d7b      	ldrb	r3, [r7, #21]
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f003 0306 	and.w	r3, r3, #6
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	4413      	add	r3, r2
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	3302      	adds	r3, #2
 8006dae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006db2:	7d3b      	ldrb	r3, [r7, #20]
 8006db4:	099b      	lsrs	r3, r3, #6
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	461a      	mov	r2, r3
 8006dba:	7cfb      	ldrb	r3, [r7, #19]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	441a      	add	r2, r3
 8006dc0:	7cbb      	ldrb	r3, [r7, #18]
 8006dc2:	029b      	lsls	r3, r3, #10
 8006dc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dc8:	4413      	add	r3, r2
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006dce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006dd2:	3b09      	subs	r3, #9
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	409a      	lsls	r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006de2:	e0ce      	b.n	8006f82 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006de4:	4b71      	ldr	r3, [pc, #452]	; (8006fac <USER_SPI_ioctl+0x2dc>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d031      	beq.n	8006e54 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006df0:	2100      	movs	r1, #0
 8006df2:	208d      	movs	r0, #141	; 0x8d
 8006df4:	f7ff fd19 	bl	800682a <send_cmd>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f040 80c3 	bne.w	8006f86 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006e00:	20ff      	movs	r0, #255	; 0xff
 8006e02:	f7ff fc1f 	bl	8006644 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006e06:	f107 030c 	add.w	r3, r7, #12
 8006e0a:	2110      	movs	r1, #16
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff fcb1 	bl	8006774 <rcvr_datablock>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 80b6 	beq.w	8006f86 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006e1a:	2330      	movs	r3, #48	; 0x30
 8006e1c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006e20:	e007      	b.n	8006e32 <USER_SPI_ioctl+0x162>
 8006e22:	20ff      	movs	r0, #255	; 0xff
 8006e24:	f7ff fc0e 	bl	8006644 <xchg_spi>
 8006e28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006e32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f3      	bne.n	8006e22 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006e3a:	7dbb      	ldrb	r3, [r7, #22]
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	461a      	mov	r2, r3
 8006e42:	2310      	movs	r3, #16
 8006e44:	fa03 f202 	lsl.w	r2, r3, r2
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006e52:	e098      	b.n	8006f86 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006e54:	2100      	movs	r1, #0
 8006e56:	2009      	movs	r0, #9
 8006e58:	f7ff fce7 	bl	800682a <send_cmd>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f040 8091 	bne.w	8006f86 <USER_SPI_ioctl+0x2b6>
 8006e64:	f107 030c 	add.w	r3, r7, #12
 8006e68:	2110      	movs	r1, #16
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7ff fc82 	bl	8006774 <rcvr_datablock>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f000 8087 	beq.w	8006f86 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006e78:	4b4c      	ldr	r3, [pc, #304]	; (8006fac <USER_SPI_ioctl+0x2dc>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d012      	beq.n	8006eaa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006e84:	7dbb      	ldrb	r3, [r7, #22]
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006e8c:	7dfa      	ldrb	r2, [r7, #23]
 8006e8e:	09d2      	lsrs	r2, r2, #7
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	4413      	add	r3, r2
 8006e94:	1c5a      	adds	r2, r3, #1
 8006e96:	7e7b      	ldrb	r3, [r7, #25]
 8006e98:	099b      	lsrs	r3, r3, #6
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	e013      	b.n	8006ed2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006eaa:	7dbb      	ldrb	r3, [r7, #22]
 8006eac:	109b      	asrs	r3, r3, #2
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	7dfa      	ldrb	r2, [r7, #23]
 8006eb8:	00d2      	lsls	r2, r2, #3
 8006eba:	f002 0218 	and.w	r2, r2, #24
 8006ebe:	7df9      	ldrb	r1, [r7, #23]
 8006ec0:	0949      	lsrs	r1, r1, #5
 8006ec2:	b2c9      	uxtb	r1, r1
 8006ec4:	440a      	add	r2, r1
 8006ec6:	3201      	adds	r2, #1
 8006ec8:	fb02 f303 	mul.w	r3, r2, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006ed8:	e055      	b.n	8006f86 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006eda:	4b34      	ldr	r3, [pc, #208]	; (8006fac <USER_SPI_ioctl+0x2dc>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	f003 0306 	and.w	r3, r3, #6
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d051      	beq.n	8006f8a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006ee6:	f107 020c 	add.w	r2, r7, #12
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	210b      	movs	r1, #11
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff feee 	bl	8006cd0 <USER_SPI_ioctl>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d149      	bne.n	8006f8e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006efa:	7b3b      	ldrb	r3, [r7, #12]
 8006efc:	099b      	lsrs	r3, r3, #6
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d104      	bne.n	8006f0e <USER_SPI_ioctl+0x23e>
 8006f04:	7dbb      	ldrb	r3, [r7, #22]
 8006f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d041      	beq.n	8006f92 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	623b      	str	r3, [r7, #32]
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006f1e:	4b23      	ldr	r3, [pc, #140]	; (8006fac <USER_SPI_ioctl+0x2dc>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d105      	bne.n	8006f36 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	025b      	lsls	r3, r3, #9
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	025b      	lsls	r3, r3, #9
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f38:	2020      	movs	r0, #32
 8006f3a:	f7ff fc76 	bl	800682a <send_cmd>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d128      	bne.n	8006f96 <USER_SPI_ioctl+0x2c6>
 8006f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f46:	2021      	movs	r0, #33	; 0x21
 8006f48:	f7ff fc6f 	bl	800682a <send_cmd>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d121      	bne.n	8006f96 <USER_SPI_ioctl+0x2c6>
 8006f52:	2100      	movs	r1, #0
 8006f54:	2026      	movs	r0, #38	; 0x26
 8006f56:	f7ff fc68 	bl	800682a <send_cmd>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d11a      	bne.n	8006f96 <USER_SPI_ioctl+0x2c6>
 8006f60:	f247 5030 	movw	r0, #30000	; 0x7530
 8006f64:	f7ff fbbb 	bl	80066de <wait_ready>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d013      	beq.n	8006f96 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006f74:	e00f      	b.n	8006f96 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006f76:	2304      	movs	r3, #4
 8006f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f7c:	e00c      	b.n	8006f98 <USER_SPI_ioctl+0x2c8>
		break;
 8006f7e:	bf00      	nop
 8006f80:	e00a      	b.n	8006f98 <USER_SPI_ioctl+0x2c8>
		break;
 8006f82:	bf00      	nop
 8006f84:	e008      	b.n	8006f98 <USER_SPI_ioctl+0x2c8>
		break;
 8006f86:	bf00      	nop
 8006f88:	e006      	b.n	8006f98 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006f8a:	bf00      	nop
 8006f8c:	e004      	b.n	8006f98 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006f8e:	bf00      	nop
 8006f90:	e002      	b.n	8006f98 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006f92:	bf00      	nop
 8006f94:	e000      	b.n	8006f98 <USER_SPI_ioctl+0x2c8>
		break;
 8006f96:	bf00      	nop
	}

	despiselect();
 8006f98:	f7ff fbc4 	bl	8006724 <despiselect>

	return res;
 8006f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3730      	adds	r7, #48	; 0x30
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000020 	.word	0x20000020
 8006fac:	200134e0 	.word	0x200134e0

08006fb0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	4a08      	ldr	r2, [pc, #32]	; (8006fe0 <disk_status+0x30>)
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	79fa      	ldrb	r2, [r7, #7]
 8006fc8:	4905      	ldr	r1, [pc, #20]	; (8006fe0 <disk_status+0x30>)
 8006fca:	440a      	add	r2, r1
 8006fcc:	7a12      	ldrb	r2, [r2, #8]
 8006fce:	4610      	mov	r0, r2
 8006fd0:	4798      	blx	r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20013514 	.word	0x20013514

08006fe4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	4a0d      	ldr	r2, [pc, #52]	; (800702c <disk_initialize+0x48>)
 8006ff6:	5cd3      	ldrb	r3, [r2, r3]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d111      	bne.n	8007020 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ffc:	79fb      	ldrb	r3, [r7, #7]
 8006ffe:	4a0b      	ldr	r2, [pc, #44]	; (800702c <disk_initialize+0x48>)
 8007000:	2101      	movs	r1, #1
 8007002:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	4a09      	ldr	r2, [pc, #36]	; (800702c <disk_initialize+0x48>)
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	79fa      	ldrb	r2, [r7, #7]
 8007012:	4906      	ldr	r1, [pc, #24]	; (800702c <disk_initialize+0x48>)
 8007014:	440a      	add	r2, r1
 8007016:	7a12      	ldrb	r2, [r2, #8]
 8007018:	4610      	mov	r0, r2
 800701a:	4798      	blx	r3
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20013514 	.word	0x20013514

08007030 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007030:	b590      	push	{r4, r7, lr}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	60b9      	str	r1, [r7, #8]
 8007038:	607a      	str	r2, [r7, #4]
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	4a0a      	ldr	r2, [pc, #40]	; (800706c <disk_read+0x3c>)
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	689c      	ldr	r4, [r3, #8]
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	4a07      	ldr	r2, [pc, #28]	; (800706c <disk_read+0x3c>)
 8007050:	4413      	add	r3, r2
 8007052:	7a18      	ldrb	r0, [r3, #8]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	47a0      	blx	r4
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007060:	7dfb      	ldrb	r3, [r7, #23]
}
 8007062:	4618      	mov	r0, r3
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	bd90      	pop	{r4, r7, pc}
 800706a:	bf00      	nop
 800706c:	20013514 	.word	0x20013514

08007070 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007070:	b590      	push	{r4, r7, lr}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <disk_write+0x3c>)
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	68dc      	ldr	r4, [r3, #12]
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	4a07      	ldr	r2, [pc, #28]	; (80070ac <disk_write+0x3c>)
 8007090:	4413      	add	r3, r2
 8007092:	7a18      	ldrb	r0, [r3, #8]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	47a0      	blx	r4
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]
  return res;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd90      	pop	{r4, r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20013514 	.word	0x20013514

080070b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	603a      	str	r2, [r7, #0]
 80070ba:	71fb      	strb	r3, [r7, #7]
 80070bc:	460b      	mov	r3, r1
 80070be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	4a09      	ldr	r2, [pc, #36]	; (80070e8 <disk_ioctl+0x38>)
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	79fa      	ldrb	r2, [r7, #7]
 80070ce:	4906      	ldr	r1, [pc, #24]	; (80070e8 <disk_ioctl+0x38>)
 80070d0:	440a      	add	r2, r1
 80070d2:	7a10      	ldrb	r0, [r2, #8]
 80070d4:	79b9      	ldrb	r1, [r7, #6]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20013514 	.word	0x20013514

080070ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3301      	adds	r3, #1
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80070fc:	89fb      	ldrh	r3, [r7, #14]
 80070fe:	021b      	lsls	r3, r3, #8
 8007100:	b21a      	sxth	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b21b      	sxth	r3, r3
 8007108:	4313      	orrs	r3, r2
 800710a:	b21b      	sxth	r3, r3
 800710c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800710e:	89fb      	ldrh	r3, [r7, #14]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3303      	adds	r3, #3
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	3202      	adds	r2, #2
 8007134:	7812      	ldrb	r2, [r2, #0]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	021b      	lsls	r3, r3, #8
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	3201      	adds	r2, #1
 8007142:	7812      	ldrb	r2, [r2, #0]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	021b      	lsls	r3, r3, #8
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	4313      	orrs	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]
	return rv;
 8007154:	68fb      	ldr	r3, [r7, #12]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	460b      	mov	r3, r1
 800716c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	887a      	ldrh	r2, [r7, #2]
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	887b      	ldrh	r3, [r7, #2]
 800717c:	0a1b      	lsrs	r3, r3, #8
 800717e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	607a      	str	r2, [r7, #4]
 8007186:	887a      	ldrh	r2, [r7, #2]
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	0a1b      	lsrs	r3, r3, #8
 80071b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	607a      	str	r2, [r7, #4]
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	0a1b      	lsrs	r3, r3, #8
 80071c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	0a1b      	lsrs	r3, r3, #8
 80071d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	701a      	strb	r2, [r3, #0]
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00d      	beq.n	8007226 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	1c53      	adds	r3, r2, #1
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	1c59      	adds	r1, r3, #1
 8007214:	6179      	str	r1, [r7, #20]
 8007216:	7812      	ldrb	r2, [r2, #0]
 8007218:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3b01      	subs	r3, #1
 800721e:	607b      	str	r3, [r7, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f1      	bne.n	800720a <mem_cpy+0x1a>
	}
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	617a      	str	r2, [r7, #20]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3b01      	subs	r3, #1
 8007252:	607b      	str	r3, [r7, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1f3      	bne.n	8007242 <mem_set+0x10>
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007268:	b480      	push	{r7}
 800726a:	b089      	sub	sp, #36	; 0x24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	61fa      	str	r2, [r7, #28]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	4619      	mov	r1, r3
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	61ba      	str	r2, [r7, #24]
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	1acb      	subs	r3, r1, r3
 8007294:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3b01      	subs	r3, #1
 800729a:	607b      	str	r3, [r7, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <mem_cmp+0x40>
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0eb      	beq.n	8007280 <mem_cmp+0x18>

	return r;
 80072a8:	697b      	ldr	r3, [r7, #20]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3724      	adds	r7, #36	; 0x24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80072c0:	e002      	b.n	80072c8 <chk_chr+0x12>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3301      	adds	r3, #1
 80072c6:	607b      	str	r3, [r7, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <chk_chr+0x26>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	461a      	mov	r2, r3
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	4293      	cmp	r3, r2
 80072da:	d1f2      	bne.n	80072c2 <chk_chr+0xc>
	return *str;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	781b      	ldrb	r3, [r3, #0]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	e029      	b.n	8007354 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007300:	4a27      	ldr	r2, [pc, #156]	; (80073a0 <chk_lock+0xb4>)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	4413      	add	r3, r2
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01d      	beq.n	800734a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800730e:	4a24      	ldr	r2, [pc, #144]	; (80073a0 <chk_lock+0xb4>)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	4413      	add	r3, r2
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	429a      	cmp	r2, r3
 800731e:	d116      	bne.n	800734e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007320:	4a1f      	ldr	r2, [pc, #124]	; (80073a0 <chk_lock+0xb4>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	4413      	add	r3, r2
 8007328:	3304      	adds	r3, #4
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007330:	429a      	cmp	r2, r3
 8007332:	d10c      	bne.n	800734e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007334:	4a1a      	ldr	r2, [pc, #104]	; (80073a0 <chk_lock+0xb4>)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	4413      	add	r3, r2
 800733c:	3308      	adds	r3, #8
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007344:	429a      	cmp	r2, r3
 8007346:	d102      	bne.n	800734e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007348:	e007      	b.n	800735a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800734a:	2301      	movs	r3, #1
 800734c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	3301      	adds	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d9d2      	bls.n	8007300 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d109      	bne.n	8007374 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <chk_lock+0x80>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d101      	bne.n	8007370 <chk_lock+0x84>
 800736c:	2300      	movs	r3, #0
 800736e:	e010      	b.n	8007392 <chk_lock+0xa6>
 8007370:	2312      	movs	r3, #18
 8007372:	e00e      	b.n	8007392 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d108      	bne.n	800738c <chk_lock+0xa0>
 800737a:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <chk_lock+0xb4>)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	4413      	add	r3, r2
 8007382:	330c      	adds	r3, #12
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800738a:	d101      	bne.n	8007390 <chk_lock+0xa4>
 800738c:	2310      	movs	r3, #16
 800738e:	e000      	b.n	8007392 <chk_lock+0xa6>
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	200134f4 	.word	0x200134f4

080073a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80073aa:	2300      	movs	r3, #0
 80073ac:	607b      	str	r3, [r7, #4]
 80073ae:	e002      	b.n	80073b6 <enq_lock+0x12>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3301      	adds	r3, #1
 80073b4:	607b      	str	r3, [r7, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d806      	bhi.n	80073ca <enq_lock+0x26>
 80073bc:	4a09      	ldr	r2, [pc, #36]	; (80073e4 <enq_lock+0x40>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	4413      	add	r3, r2
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1f2      	bne.n	80073b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	bf14      	ite	ne
 80073d0:	2301      	movne	r3, #1
 80073d2:	2300      	moveq	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	200134f4 	.word	0x200134f4

080073e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	e01f      	b.n	8007438 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80073f8:	4a41      	ldr	r2, [pc, #260]	; (8007500 <inc_lock+0x118>)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	4413      	add	r3, r2
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d113      	bne.n	8007432 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800740a:	4a3d      	ldr	r2, [pc, #244]	; (8007500 <inc_lock+0x118>)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	4413      	add	r3, r2
 8007412:	3304      	adds	r3, #4
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800741a:	429a      	cmp	r2, r3
 800741c:	d109      	bne.n	8007432 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800741e:	4a38      	ldr	r2, [pc, #224]	; (8007500 <inc_lock+0x118>)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	011b      	lsls	r3, r3, #4
 8007424:	4413      	add	r3, r2
 8007426:	3308      	adds	r3, #8
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800742e:	429a      	cmp	r2, r3
 8007430:	d006      	beq.n	8007440 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d9dc      	bls.n	80073f8 <inc_lock+0x10>
 800743e:	e000      	b.n	8007442 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007440:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d132      	bne.n	80074ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007448:	2300      	movs	r3, #0
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	e002      	b.n	8007454 <inc_lock+0x6c>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d806      	bhi.n	8007468 <inc_lock+0x80>
 800745a:	4a29      	ldr	r2, [pc, #164]	; (8007500 <inc_lock+0x118>)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	4413      	add	r3, r2
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f2      	bne.n	800744e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d101      	bne.n	8007472 <inc_lock+0x8a>
 800746e:	2300      	movs	r3, #0
 8007470:	e040      	b.n	80074f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	4922      	ldr	r1, [pc, #136]	; (8007500 <inc_lock+0x118>)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	440b      	add	r3, r1
 800747e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	491e      	ldr	r1, [pc, #120]	; (8007500 <inc_lock+0x118>)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	440b      	add	r3, r1
 800748c:	3304      	adds	r3, #4
 800748e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	695a      	ldr	r2, [r3, #20]
 8007494:	491a      	ldr	r1, [pc, #104]	; (8007500 <inc_lock+0x118>)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	440b      	add	r3, r1
 800749c:	3308      	adds	r3, #8
 800749e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80074a0:	4a17      	ldr	r2, [pc, #92]	; (8007500 <inc_lock+0x118>)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	4413      	add	r3, r2
 80074a8:	330c      	adds	r3, #12
 80074aa:	2200      	movs	r2, #0
 80074ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d009      	beq.n	80074c8 <inc_lock+0xe0>
 80074b4:	4a12      	ldr	r2, [pc, #72]	; (8007500 <inc_lock+0x118>)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	4413      	add	r3, r2
 80074bc:	330c      	adds	r3, #12
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <inc_lock+0xe0>
 80074c4:	2300      	movs	r3, #0
 80074c6:	e015      	b.n	80074f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d108      	bne.n	80074e0 <inc_lock+0xf8>
 80074ce:	4a0c      	ldr	r2, [pc, #48]	; (8007500 <inc_lock+0x118>)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	4413      	add	r3, r2
 80074d6:	330c      	adds	r3, #12
 80074d8:	881b      	ldrh	r3, [r3, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	e001      	b.n	80074e4 <inc_lock+0xfc>
 80074e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074e4:	4906      	ldr	r1, [pc, #24]	; (8007500 <inc_lock+0x118>)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	440b      	add	r3, r1
 80074ec:	330c      	adds	r3, #12
 80074ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	200134f4 	.word	0x200134f4

08007504 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3b01      	subs	r3, #1
 8007510:	607b      	str	r3, [r7, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d825      	bhi.n	8007564 <dec_lock+0x60>
		n = Files[i].ctr;
 8007518:	4a17      	ldr	r2, [pc, #92]	; (8007578 <dec_lock+0x74>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	4413      	add	r3, r2
 8007520:	330c      	adds	r3, #12
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007526:	89fb      	ldrh	r3, [r7, #14]
 8007528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800752c:	d101      	bne.n	8007532 <dec_lock+0x2e>
 800752e:	2300      	movs	r3, #0
 8007530:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007532:	89fb      	ldrh	r3, [r7, #14]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <dec_lock+0x3a>
 8007538:	89fb      	ldrh	r3, [r7, #14]
 800753a:	3b01      	subs	r3, #1
 800753c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800753e:	4a0e      	ldr	r2, [pc, #56]	; (8007578 <dec_lock+0x74>)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	4413      	add	r3, r2
 8007546:	330c      	adds	r3, #12
 8007548:	89fa      	ldrh	r2, [r7, #14]
 800754a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800754c:	89fb      	ldrh	r3, [r7, #14]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d105      	bne.n	800755e <dec_lock+0x5a>
 8007552:	4a09      	ldr	r2, [pc, #36]	; (8007578 <dec_lock+0x74>)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	011b      	lsls	r3, r3, #4
 8007558:	4413      	add	r3, r2
 800755a:	2200      	movs	r2, #0
 800755c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	737b      	strb	r3, [r7, #13]
 8007562:	e001      	b.n	8007568 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007564:	2302      	movs	r3, #2
 8007566:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007568:	7b7b      	ldrb	r3, [r7, #13]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	200134f4 	.word	0x200134f4

0800757c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007584:	2300      	movs	r3, #0
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	e010      	b.n	80075ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800758a:	4a0d      	ldr	r2, [pc, #52]	; (80075c0 <clear_lock+0x44>)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	011b      	lsls	r3, r3, #4
 8007590:	4413      	add	r3, r2
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	429a      	cmp	r2, r3
 8007598:	d105      	bne.n	80075a6 <clear_lock+0x2a>
 800759a:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <clear_lock+0x44>)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	4413      	add	r3, r2
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3301      	adds	r3, #1
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d9eb      	bls.n	800758a <clear_lock+0xe>
	}
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	200134f4 	.word	0x200134f4

080075c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	78db      	ldrb	r3, [r3, #3]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d034      	beq.n	8007642 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	7858      	ldrb	r0, [r3, #1]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075e8:	2301      	movs	r3, #1
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	f7ff fd40 	bl	8007070 <disk_write>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	73fb      	strb	r3, [r7, #15]
 80075fa:	e022      	b.n	8007642 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	1ad2      	subs	r2, r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	429a      	cmp	r2, r3
 8007610:	d217      	bcs.n	8007642 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	789b      	ldrb	r3, [r3, #2]
 8007616:	613b      	str	r3, [r7, #16]
 8007618:	e010      	b.n	800763c <sync_window+0x78>
					wsect += fs->fsize;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	4413      	add	r3, r2
 8007622:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	7858      	ldrb	r0, [r3, #1]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800762e:	2301      	movs	r3, #1
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	f7ff fd1d 	bl	8007070 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	3b01      	subs	r3, #1
 800763a:	613b      	str	r3, [r7, #16]
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d8eb      	bhi.n	800761a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d01b      	beq.n	800769c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff ffad 	bl	80075c4 <sync_window>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d113      	bne.n	800769c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7858      	ldrb	r0, [r3, #1]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800767e:	2301      	movs	r3, #1
 8007680:	683a      	ldr	r2, [r7, #0]
 8007682:	f7ff fcd5 	bl	8007030 <disk_read>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800768c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007690:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007692:	2301      	movs	r3, #1
 8007694:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800769c:	7bfb      	ldrb	r3, [r7, #15]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff ff87 	bl	80075c4 <sync_window>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d158      	bne.n	8007772 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d148      	bne.n	800775a <sync_fs+0xb2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	791b      	ldrb	r3, [r3, #4]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d144      	bne.n	800775a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3330      	adds	r3, #48	; 0x30
 80076d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076d8:	2100      	movs	r1, #0
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff fda9 	bl	8007232 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	3330      	adds	r3, #48	; 0x30
 80076e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff fd38 	bl	8007162 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3330      	adds	r3, #48	; 0x30
 80076f6:	4921      	ldr	r1, [pc, #132]	; (800777c <sync_fs+0xd4>)
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff fd4d 	bl	8007198 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3330      	adds	r3, #48	; 0x30
 8007702:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007706:	491e      	ldr	r1, [pc, #120]	; (8007780 <sync_fs+0xd8>)
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff fd45 	bl	8007198 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3330      	adds	r3, #48	; 0x30
 8007712:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	4619      	mov	r1, r3
 800771c:	4610      	mov	r0, r2
 800771e:	f7ff fd3b 	bl	8007198 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3330      	adds	r3, #48	; 0x30
 8007726:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	4619      	mov	r1, r3
 8007730:	4610      	mov	r0, r2
 8007732:	f7ff fd31 	bl	8007198 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	7858      	ldrb	r0, [r3, #1]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774e:	2301      	movs	r3, #1
 8007750:	f7ff fc8e 	bl	8007070 <disk_write>
			fs->fsi_flag = 0;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2200      	movs	r2, #0
 8007760:	2100      	movs	r1, #0
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff fca4 	bl	80070b0 <disk_ioctl>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <sync_fs+0xca>
 800776e:	2301      	movs	r3, #1
 8007770:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007772:	7bfb      	ldrb	r3, [r7, #15]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	41615252 	.word	0x41615252
 8007780:	61417272 	.word	0x61417272

08007784 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	3b02      	subs	r3, #2
 8007792:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	3b02      	subs	r3, #2
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d301      	bcc.n	80077a4 <clust2sect+0x20>
 80077a0:	2300      	movs	r3, #0
 80077a2:	e008      	b.n	80077b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	895b      	ldrh	r3, [r3, #10]
 80077a8:	461a      	mov	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	fb03 f202 	mul.w	r2, r3, r2
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	4413      	add	r3, r2
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b086      	sub	sp, #24
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d904      	bls.n	80077e2 <get_fat+0x20>
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d302      	bcc.n	80077e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80077e2:	2301      	movs	r3, #1
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	e08f      	b.n	8007908 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80077e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d062      	beq.n	80078bc <get_fat+0xfa>
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	dc7c      	bgt.n	80078f4 <get_fat+0x132>
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d002      	beq.n	8007804 <get_fat+0x42>
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d042      	beq.n	8007888 <get_fat+0xc6>
 8007802:	e077      	b.n	80078f4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	6a1a      	ldr	r2, [r3, #32]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	0a5b      	lsrs	r3, r3, #9
 800781a:	4413      	add	r3, r2
 800781c:	4619      	mov	r1, r3
 800781e:	6938      	ldr	r0, [r7, #16]
 8007820:	f7ff ff14 	bl	800764c <move_window>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d167      	bne.n	80078fa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	60fa      	str	r2, [r7, #12]
 8007830:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4413      	add	r3, r2
 8007838:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800783c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	6a1a      	ldr	r2, [r3, #32]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	0a5b      	lsrs	r3, r3, #9
 8007846:	4413      	add	r3, r2
 8007848:	4619      	mov	r1, r3
 800784a:	6938      	ldr	r0, [r7, #16]
 800784c:	f7ff fefe 	bl	800764c <move_window>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d153      	bne.n	80078fe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	4413      	add	r3, r2
 8007860:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	461a      	mov	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	4313      	orrs	r3, r2
 800786c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <get_fat+0xbc>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	091b      	lsrs	r3, r3, #4
 800787c:	e002      	b.n	8007884 <get_fat+0xc2>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007884:	617b      	str	r3, [r7, #20]
			break;
 8007886:	e03f      	b.n	8007908 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	6a1a      	ldr	r2, [r3, #32]
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	0a1b      	lsrs	r3, r3, #8
 8007890:	4413      	add	r3, r2
 8007892:	4619      	mov	r1, r3
 8007894:	6938      	ldr	r0, [r7, #16]
 8007896:	f7ff fed9 	bl	800764c <move_window>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d130      	bne.n	8007902 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80078ae:	4413      	add	r3, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7ff fc1b 	bl	80070ec <ld_word>
 80078b6:	4603      	mov	r3, r0
 80078b8:	617b      	str	r3, [r7, #20]
			break;
 80078ba:	e025      	b.n	8007908 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6a1a      	ldr	r2, [r3, #32]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	09db      	lsrs	r3, r3, #7
 80078c4:	4413      	add	r3, r2
 80078c6:	4619      	mov	r1, r3
 80078c8:	6938      	ldr	r0, [r7, #16]
 80078ca:	f7ff febf 	bl	800764c <move_window>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d118      	bne.n	8007906 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80078e2:	4413      	add	r3, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff fc19 	bl	800711c <ld_dword>
 80078ea:	4603      	mov	r3, r0
 80078ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80078f0:	617b      	str	r3, [r7, #20]
			break;
 80078f2:	e009      	b.n	8007908 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80078f4:	2301      	movs	r3, #1
 80078f6:	617b      	str	r3, [r7, #20]
 80078f8:	e006      	b.n	8007908 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078fa:	bf00      	nop
 80078fc:	e004      	b.n	8007908 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078fe:	bf00      	nop
 8007900:	e002      	b.n	8007908 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007902:	bf00      	nop
 8007904:	e000      	b.n	8007908 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007906:	bf00      	nop
		}
	}

	return val;
 8007908:	697b      	ldr	r3, [r7, #20]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007912:	b590      	push	{r4, r7, lr}
 8007914:	b089      	sub	sp, #36	; 0x24
 8007916:	af00      	add	r7, sp, #0
 8007918:	60f8      	str	r0, [r7, #12]
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800791e:	2302      	movs	r3, #2
 8007920:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b01      	cmp	r3, #1
 8007926:	f240 80d2 	bls.w	8007ace <put_fat+0x1bc>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	429a      	cmp	r2, r3
 8007932:	f080 80cc 	bcs.w	8007ace <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b03      	cmp	r3, #3
 800793c:	f000 8096 	beq.w	8007a6c <put_fat+0x15a>
 8007940:	2b03      	cmp	r3, #3
 8007942:	f300 80cd 	bgt.w	8007ae0 <put_fat+0x1ce>
 8007946:	2b01      	cmp	r3, #1
 8007948:	d002      	beq.n	8007950 <put_fat+0x3e>
 800794a:	2b02      	cmp	r3, #2
 800794c:	d06e      	beq.n	8007a2c <put_fat+0x11a>
 800794e:	e0c7      	b.n	8007ae0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	61bb      	str	r3, [r7, #24]
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	4413      	add	r3, r2
 800795c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a1a      	ldr	r2, [r3, #32]
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	0a5b      	lsrs	r3, r3, #9
 8007966:	4413      	add	r3, r2
 8007968:	4619      	mov	r1, r3
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f7ff fe6e 	bl	800764c <move_window>
 8007970:	4603      	mov	r3, r0
 8007972:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007974:	7ffb      	ldrb	r3, [r7, #31]
 8007976:	2b00      	cmp	r3, #0
 8007978:	f040 80ab 	bne.w	8007ad2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	1c59      	adds	r1, r3, #1
 8007986:	61b9      	str	r1, [r7, #24]
 8007988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798c:	4413      	add	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00d      	beq.n	80079b6 <put_fat+0xa4>
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b25b      	sxtb	r3, r3
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	b25a      	sxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	b25b      	sxtb	r3, r3
 80079ae:	4313      	orrs	r3, r2
 80079b0:	b25b      	sxtb	r3, r3
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	e001      	b.n	80079ba <put_fat+0xa8>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2201      	movs	r2, #1
 80079c2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a1a      	ldr	r2, [r3, #32]
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	0a5b      	lsrs	r3, r3, #9
 80079cc:	4413      	add	r3, r2
 80079ce:	4619      	mov	r1, r3
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f7ff fe3b 	bl	800764c <move_window>
 80079d6:	4603      	mov	r3, r0
 80079d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079da:	7ffb      	ldrb	r3, [r7, #31]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d17a      	bne.n	8007ad6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ec:	4413      	add	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <put_fat+0xf0>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	091b      	lsrs	r3, r3, #4
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	e00e      	b.n	8007a20 <put_fat+0x10e>
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	b25b      	sxtb	r3, r3
 8007a08:	f023 030f 	bic.w	r3, r3, #15
 8007a0c:	b25a      	sxtb	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	0a1b      	lsrs	r3, r3, #8
 8007a12:	b25b      	sxtb	r3, r3
 8007a14:	f003 030f 	and.w	r3, r3, #15
 8007a18:	b25b      	sxtb	r3, r3
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	b25b      	sxtb	r3, r3
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	70da      	strb	r2, [r3, #3]
			break;
 8007a2a:	e059      	b.n	8007ae0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a1a      	ldr	r2, [r3, #32]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	0a1b      	lsrs	r3, r3, #8
 8007a34:	4413      	add	r3, r2
 8007a36:	4619      	mov	r1, r3
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7ff fe07 	bl	800764c <move_window>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a42:	7ffb      	ldrb	r3, [r7, #31]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d148      	bne.n	8007ada <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007a56:	4413      	add	r3, r2
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	b292      	uxth	r2, r2
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff fb7f 	bl	8007162 <st_word>
			fs->wflag = 1;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	70da      	strb	r2, [r3, #3]
			break;
 8007a6a:	e039      	b.n	8007ae0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a1a      	ldr	r2, [r3, #32]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	09db      	lsrs	r3, r3, #7
 8007a74:	4413      	add	r3, r2
 8007a76:	4619      	mov	r1, r3
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7ff fde7 	bl	800764c <move_window>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a82:	7ffb      	ldrb	r3, [r7, #31]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d12a      	bne.n	8007ade <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a9c:	4413      	add	r3, r2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7ff fb3c 	bl	800711c <ld_dword>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007aaa:	4323      	orrs	r3, r4
 8007aac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007abc:	4413      	add	r3, r2
 8007abe:	6879      	ldr	r1, [r7, #4]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff fb69 	bl	8007198 <st_dword>
			fs->wflag = 1;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	70da      	strb	r2, [r3, #3]
			break;
 8007acc:	e008      	b.n	8007ae0 <put_fat+0x1ce>
		}
	}
 8007ace:	bf00      	nop
 8007ad0:	e006      	b.n	8007ae0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ad2:	bf00      	nop
 8007ad4:	e004      	b.n	8007ae0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ad6:	bf00      	nop
 8007ad8:	e002      	b.n	8007ae0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ada:	bf00      	nop
 8007adc:	e000      	b.n	8007ae0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ade:	bf00      	nop
	return res;
 8007ae0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3724      	adds	r7, #36	; 0x24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd90      	pop	{r4, r7, pc}

08007aea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b088      	sub	sp, #32
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d904      	bls.n	8007b10 <remove_chain+0x26>
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d301      	bcc.n	8007b14 <remove_chain+0x2a>
 8007b10:	2302      	movs	r3, #2
 8007b12:	e04b      	b.n	8007bac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00c      	beq.n	8007b34 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	69b8      	ldr	r0, [r7, #24]
 8007b22:	f7ff fef6 	bl	8007912 <put_fat>
 8007b26:	4603      	mov	r3, r0
 8007b28:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007b2a:	7ffb      	ldrb	r3, [r7, #31]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <remove_chain+0x4a>
 8007b30:	7ffb      	ldrb	r3, [r7, #31]
 8007b32:	e03b      	b.n	8007bac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f7ff fe43 	bl	80077c2 <get_fat>
 8007b3c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d031      	beq.n	8007ba8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <remove_chain+0x64>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e02e      	b.n	8007bac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b54:	d101      	bne.n	8007b5a <remove_chain+0x70>
 8007b56:	2301      	movs	r3, #1
 8007b58:	e028      	b.n	8007bac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	69b8      	ldr	r0, [r7, #24]
 8007b60:	f7ff fed7 	bl	8007912 <put_fat>
 8007b64:	4603      	mov	r3, r0
 8007b66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007b68:	7ffb      	ldrb	r3, [r7, #31]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <remove_chain+0x88>
 8007b6e:	7ffb      	ldrb	r3, [r7, #31]
 8007b70:	e01c      	b.n	8007bac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	3b02      	subs	r3, #2
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d20b      	bcs.n	8007b98 <remove_chain+0xae>
			fs->free_clst++;
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	791b      	ldrb	r3, [r3, #4]
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d3c6      	bcc.n	8007b34 <remove_chain+0x4a>
 8007ba6:	e000      	b.n	8007baa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007ba8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3720      	adds	r7, #32
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10d      	bne.n	8007be6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <create_chain+0x2c>
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d31b      	bcc.n	8007c18 <create_chain+0x64>
 8007be0:	2301      	movs	r3, #1
 8007be2:	61bb      	str	r3, [r7, #24]
 8007be4:	e018      	b.n	8007c18 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff fdea 	bl	80077c2 <get_fat>
 8007bee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d801      	bhi.n	8007bfa <create_chain+0x46>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e070      	b.n	8007cdc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c00:	d101      	bne.n	8007c06 <create_chain+0x52>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	e06a      	b.n	8007cdc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d201      	bcs.n	8007c14 <create_chain+0x60>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	e063      	b.n	8007cdc <create_chain+0x128>
		scl = clst;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d307      	bcc.n	8007c3c <create_chain+0x88>
				ncl = 2;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d901      	bls.n	8007c3c <create_chain+0x88>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e04f      	b.n	8007cdc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007c3c:	69f9      	ldr	r1, [r7, #28]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff fdbf 	bl	80077c2 <get_fat>
 8007c44:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00e      	beq.n	8007c6a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d003      	beq.n	8007c5a <create_chain+0xa6>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c58:	d101      	bne.n	8007c5e <create_chain+0xaa>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	e03e      	b.n	8007cdc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007c5e:	69fa      	ldr	r2, [r7, #28]
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d1da      	bne.n	8007c1c <create_chain+0x68>
 8007c66:	2300      	movs	r3, #0
 8007c68:	e038      	b.n	8007cdc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007c6a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c70:	69f9      	ldr	r1, [r7, #28]
 8007c72:	6938      	ldr	r0, [r7, #16]
 8007c74:	f7ff fe4d 	bl	8007912 <put_fat>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d109      	bne.n	8007c96 <create_chain+0xe2>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d006      	beq.n	8007c96 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007c88:	69fa      	ldr	r2, [r7, #28]
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6938      	ldr	r0, [r7, #16]
 8007c8e:	f7ff fe40 	bl	8007912 <put_fat>
 8007c92:	4603      	mov	r3, r0
 8007c94:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d116      	bne.n	8007cca <create_chain+0x116>
		fs->last_clst = ncl;
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	691a      	ldr	r2, [r3, #16]
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	3b02      	subs	r3, #2
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d804      	bhi.n	8007cba <create_chain+0x106>
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	1e5a      	subs	r2, r3, #1
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	791b      	ldrb	r3, [r3, #4]
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	711a      	strb	r2, [r3, #4]
 8007cc8:	e007      	b.n	8007cda <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d102      	bne.n	8007cd6 <create_chain+0x122>
 8007cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cd4:	e000      	b.n	8007cd8 <create_chain+0x124>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007cda:	69fb      	ldr	r3, [r7, #28]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3720      	adds	r7, #32
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	3304      	adds	r3, #4
 8007cfa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	0a5b      	lsrs	r3, r3, #9
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	8952      	ldrh	r2, [r2, #10]
 8007d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1d1a      	adds	r2, r3, #4
 8007d0e:	613a      	str	r2, [r7, #16]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <clmt_clust+0x3a>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e010      	b.n	8007d40 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d307      	bcc.n	8007d36 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	3304      	adds	r3, #4
 8007d32:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d34:	e7e9      	b.n	8007d0a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007d36:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	4413      	add	r3, r2
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	371c      	adds	r7, #28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d62:	d204      	bcs.n	8007d6e <dir_sdi+0x22>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	f003 031f 	and.w	r3, r3, #31
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e063      	b.n	8007e3a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d106      	bne.n	8007d92 <dir_sdi+0x46>
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d902      	bls.n	8007d92 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10c      	bne.n	8007db2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	095b      	lsrs	r3, r3, #5
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	8912      	ldrh	r2, [r2, #8]
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d301      	bcc.n	8007da8 <dir_sdi+0x5c>
 8007da4:	2302      	movs	r3, #2
 8007da6:	e048      	b.n	8007e3a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	61da      	str	r2, [r3, #28]
 8007db0:	e029      	b.n	8007e06 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	895b      	ldrh	r3, [r3, #10]
 8007db6:	025b      	lsls	r3, r3, #9
 8007db8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007dba:	e019      	b.n	8007df0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6979      	ldr	r1, [r7, #20]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff fcfe 	bl	80077c2 <get_fat>
 8007dc6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dce:	d101      	bne.n	8007dd4 <dir_sdi+0x88>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e032      	b.n	8007e3a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d904      	bls.n	8007de4 <dir_sdi+0x98>
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d301      	bcc.n	8007de8 <dir_sdi+0x9c>
 8007de4:	2302      	movs	r3, #2
 8007de6:	e028      	b.n	8007e3a <dir_sdi+0xee>
			ofs -= csz;
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d2e1      	bcs.n	8007dbc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007df8:	6979      	ldr	r1, [r7, #20]
 8007dfa:	6938      	ldr	r0, [r7, #16]
 8007dfc:	f7ff fcc2 	bl	8007784 <clust2sect>
 8007e00:	4602      	mov	r2, r0
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <dir_sdi+0xcc>
 8007e14:	2302      	movs	r3, #2
 8007e16:	e010      	b.n	8007e3a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	69da      	ldr	r2, [r3, #28]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	0a5b      	lsrs	r3, r3, #9
 8007e20:	441a      	add	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e32:	441a      	add	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b086      	sub	sp, #24
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	3320      	adds	r3, #32
 8007e58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <dir_next+0x28>
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e68:	d301      	bcc.n	8007e6e <dir_next+0x2c>
 8007e6a:	2304      	movs	r3, #4
 8007e6c:	e0aa      	b.n	8007fc4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f040 8098 	bne.w	8007faa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10b      	bne.n	8007ea4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	8912      	ldrh	r2, [r2, #8]
 8007e94:	4293      	cmp	r3, r2
 8007e96:	f0c0 8088 	bcc.w	8007faa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	61da      	str	r2, [r3, #28]
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	e08f      	b.n	8007fc4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	0a5b      	lsrs	r3, r3, #9
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	8952      	ldrh	r2, [r2, #10]
 8007eac:	3a01      	subs	r2, #1
 8007eae:	4013      	ands	r3, r2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d17a      	bne.n	8007faa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	f7ff fc80 	bl	80077c2 <get_fat>
 8007ec2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d801      	bhi.n	8007ece <dir_next+0x8c>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e07a      	b.n	8007fc4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ed4:	d101      	bne.n	8007eda <dir_next+0x98>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e074      	b.n	8007fc4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d358      	bcc.n	8007f96 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d104      	bne.n	8007ef4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	61da      	str	r2, [r3, #28]
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	e067      	b.n	8007fc4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	4619      	mov	r1, r3
 8007efc:	4610      	mov	r0, r2
 8007efe:	f7ff fe59 	bl	8007bb4 <create_chain>
 8007f02:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <dir_next+0xcc>
 8007f0a:	2307      	movs	r3, #7
 8007f0c:	e05a      	b.n	8007fc4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d101      	bne.n	8007f18 <dir_next+0xd6>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e055      	b.n	8007fc4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f1e:	d101      	bne.n	8007f24 <dir_next+0xe2>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e04f      	b.n	8007fc4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	f7ff fb4d 	bl	80075c4 <sync_window>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <dir_next+0xf2>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e047      	b.n	8007fc4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3330      	adds	r3, #48	; 0x30
 8007f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff f977 	bl	8007232 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f44:	2300      	movs	r3, #0
 8007f46:	613b      	str	r3, [r7, #16]
 8007f48:	6979      	ldr	r1, [r7, #20]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff fc1a 	bl	8007784 <clust2sect>
 8007f50:	4602      	mov	r2, r0
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f56:	e012      	b.n	8007f7e <dir_next+0x13c>
						fs->wflag = 1;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f7ff fb30 	bl	80075c4 <sync_window>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <dir_next+0x12c>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e02a      	b.n	8007fc4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	3301      	adds	r3, #1
 8007f72:	613b      	str	r3, [r7, #16]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	895b      	ldrh	r3, [r3, #10]
 8007f82:	461a      	mov	r2, r3
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d3e6      	bcc.n	8007f58 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad2      	subs	r2, r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007f9c:	6979      	ldr	r1, [r7, #20]
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fbf0 	bl	8007784 <clust2sect>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbc:	441a      	add	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3718      	adds	r7, #24
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff feb4 	bl	8007d4c <dir_sdi>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d12b      	bne.n	8008046 <dir_alloc+0x7a>
		n = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f7ff fb27 	bl	800764c <move_window>
 8007ffe:	4603      	mov	r3, r0
 8008000:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d11d      	bne.n	8008044 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a1b      	ldr	r3, [r3, #32]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	2be5      	cmp	r3, #229	; 0xe5
 8008010:	d004      	beq.n	800801c <dir_alloc+0x50>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d107      	bne.n	800802c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	3301      	adds	r3, #1
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d102      	bne.n	8008030 <dir_alloc+0x64>
 800802a:	e00c      	b.n	8008046 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800802c:	2300      	movs	r3, #0
 800802e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008030:	2101      	movs	r1, #1
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7ff ff05 	bl	8007e42 <dir_next>
 8008038:	4603      	mov	r3, r0
 800803a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0d7      	beq.n	8007ff2 <dir_alloc+0x26>
 8008042:	e000      	b.n	8008046 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008044:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	2b04      	cmp	r3, #4
 800804a:	d101      	bne.n	8008050 <dir_alloc+0x84>
 800804c:	2307      	movs	r3, #7
 800804e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008050:	7dfb      	ldrb	r3, [r7, #23]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	331a      	adds	r3, #26
 8008068:	4618      	mov	r0, r3
 800806a:	f7ff f83f 	bl	80070ec <ld_word>
 800806e:	4603      	mov	r3, r0
 8008070:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b03      	cmp	r3, #3
 8008078:	d109      	bne.n	800808e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	3314      	adds	r3, #20
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff f834 	bl	80070ec <ld_word>
 8008084:	4603      	mov	r3, r0
 8008086:	041b      	lsls	r3, r3, #16
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800808e:	68fb      	ldr	r3, [r7, #12]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	331a      	adds	r3, #26
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	b292      	uxth	r2, r2
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff f857 	bl	8007162 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d109      	bne.n	80080d0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f103 0214 	add.w	r2, r3, #20
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	0c1b      	lsrs	r3, r3, #16
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	4619      	mov	r1, r3
 80080ca:	4610      	mov	r0, r2
 80080cc:	f7ff f849 	bl	8007162 <st_word>
	}
}
 80080d0:	bf00      	nop
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80080e6:	2100      	movs	r1, #0
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff fe2f 	bl	8007d4c <dir_sdi>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <dir_find+0x24>
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	e03e      	b.n	800817a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	4619      	mov	r1, r3
 8008102:	6938      	ldr	r0, [r7, #16]
 8008104:	f7ff faa2 	bl	800764c <move_window>
 8008108:	4603      	mov	r3, r0
 800810a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d12f      	bne.n	8008172 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d102      	bne.n	8008126 <dir_find+0x4e>
 8008120:	2304      	movs	r3, #4
 8008122:	75fb      	strb	r3, [r7, #23]
 8008124:	e028      	b.n	8008178 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	330b      	adds	r3, #11
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008132:	b2da      	uxtb	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6a1b      	ldr	r3, [r3, #32]
 800813c:	330b      	adds	r3, #11
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	f003 0308 	and.w	r3, r3, #8
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <dir_find+0x86>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a18      	ldr	r0, [r3, #32]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3324      	adds	r3, #36	; 0x24
 8008150:	220b      	movs	r2, #11
 8008152:	4619      	mov	r1, r3
 8008154:	f7ff f888 	bl	8007268 <mem_cmp>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00b      	beq.n	8008176 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800815e:	2100      	movs	r1, #0
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff fe6e 	bl	8007e42 <dir_next>
 8008166:	4603      	mov	r3, r0
 8008168:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0c5      	beq.n	80080fc <dir_find+0x24>
 8008170:	e002      	b.n	8008178 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008172:	bf00      	nop
 8008174:	e000      	b.n	8008178 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008176:	bf00      	nop

	return res;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008190:	2101      	movs	r1, #1
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff ff1a 	bl	8007fcc <dir_alloc>
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d11c      	bne.n	80081dc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	4619      	mov	r1, r3
 80081a8:	68b8      	ldr	r0, [r7, #8]
 80081aa:	f7ff fa4f 	bl	800764c <move_window>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d111      	bne.n	80081dc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	2220      	movs	r2, #32
 80081be:	2100      	movs	r1, #0
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7ff f836 	bl	8007232 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a18      	ldr	r0, [r3, #32]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3324      	adds	r3, #36	; 0x24
 80081ce:	220b      	movs	r2, #11
 80081d0:	4619      	mov	r1, r3
 80081d2:	f7ff f80d 	bl	80071f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2201      	movs	r2, #1
 80081da:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
	...

080081e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3324      	adds	r3, #36	; 0x24
 80081fc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80081fe:	220b      	movs	r2, #11
 8008200:	2120      	movs	r1, #32
 8008202:	68b8      	ldr	r0, [r7, #8]
 8008204:	f7ff f815 	bl	8007232 <mem_set>
	si = i = 0; ni = 8;
 8008208:	2300      	movs	r3, #0
 800820a:	613b      	str	r3, [r7, #16]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	61fb      	str	r3, [r7, #28]
 8008210:	2308      	movs	r3, #8
 8008212:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	61fa      	str	r2, [r7, #28]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4413      	add	r3, r2
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008222:	7efb      	ldrb	r3, [r7, #27]
 8008224:	2b20      	cmp	r3, #32
 8008226:	d94e      	bls.n	80082c6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008228:	7efb      	ldrb	r3, [r7, #27]
 800822a:	2b2f      	cmp	r3, #47	; 0x2f
 800822c:	d006      	beq.n	800823c <create_name+0x54>
 800822e:	7efb      	ldrb	r3, [r7, #27]
 8008230:	2b5c      	cmp	r3, #92	; 0x5c
 8008232:	d110      	bne.n	8008256 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008234:	e002      	b.n	800823c <create_name+0x54>
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	3301      	adds	r3, #1
 800823a:	61fb      	str	r3, [r7, #28]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	4413      	add	r3, r2
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b2f      	cmp	r3, #47	; 0x2f
 8008246:	d0f6      	beq.n	8008236 <create_name+0x4e>
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b5c      	cmp	r3, #92	; 0x5c
 8008252:	d0f0      	beq.n	8008236 <create_name+0x4e>
			break;
 8008254:	e038      	b.n	80082c8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008256:	7efb      	ldrb	r3, [r7, #27]
 8008258:	2b2e      	cmp	r3, #46	; 0x2e
 800825a:	d003      	beq.n	8008264 <create_name+0x7c>
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	429a      	cmp	r2, r3
 8008262:	d30c      	bcc.n	800827e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	2b0b      	cmp	r3, #11
 8008268:	d002      	beq.n	8008270 <create_name+0x88>
 800826a:	7efb      	ldrb	r3, [r7, #27]
 800826c:	2b2e      	cmp	r3, #46	; 0x2e
 800826e:	d001      	beq.n	8008274 <create_name+0x8c>
 8008270:	2306      	movs	r3, #6
 8008272:	e044      	b.n	80082fe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008274:	2308      	movs	r3, #8
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	230b      	movs	r3, #11
 800827a:	617b      	str	r3, [r7, #20]
			continue;
 800827c:	e022      	b.n	80082c4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800827e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008282:	2b00      	cmp	r3, #0
 8008284:	da04      	bge.n	8008290 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008286:	7efb      	ldrb	r3, [r7, #27]
 8008288:	3b80      	subs	r3, #128	; 0x80
 800828a:	4a1f      	ldr	r2, [pc, #124]	; (8008308 <create_name+0x120>)
 800828c:	5cd3      	ldrb	r3, [r2, r3]
 800828e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008290:	7efb      	ldrb	r3, [r7, #27]
 8008292:	4619      	mov	r1, r3
 8008294:	481d      	ldr	r0, [pc, #116]	; (800830c <create_name+0x124>)
 8008296:	f7ff f80e 	bl	80072b6 <chk_chr>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <create_name+0xbc>
 80082a0:	2306      	movs	r3, #6
 80082a2:	e02c      	b.n	80082fe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80082a4:	7efb      	ldrb	r3, [r7, #27]
 80082a6:	2b60      	cmp	r3, #96	; 0x60
 80082a8:	d905      	bls.n	80082b6 <create_name+0xce>
 80082aa:	7efb      	ldrb	r3, [r7, #27]
 80082ac:	2b7a      	cmp	r3, #122	; 0x7a
 80082ae:	d802      	bhi.n	80082b6 <create_name+0xce>
 80082b0:	7efb      	ldrb	r3, [r7, #27]
 80082b2:	3b20      	subs	r3, #32
 80082b4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	613a      	str	r2, [r7, #16]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	4413      	add	r3, r2
 80082c0:	7efa      	ldrb	r2, [r7, #27]
 80082c2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80082c4:	e7a6      	b.n	8008214 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80082c6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	441a      	add	r2, r3
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <create_name+0xf4>
 80082d8:	2306      	movs	r3, #6
 80082da:	e010      	b.n	80082fe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2be5      	cmp	r3, #229	; 0xe5
 80082e2:	d102      	bne.n	80082ea <create_name+0x102>
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2205      	movs	r2, #5
 80082e8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80082ea:	7efb      	ldrb	r3, [r7, #27]
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d801      	bhi.n	80082f4 <create_name+0x10c>
 80082f0:	2204      	movs	r2, #4
 80082f2:	e000      	b.n	80082f6 <create_name+0x10e>
 80082f4:	2200      	movs	r2, #0
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	330b      	adds	r3, #11
 80082fa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80082fc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3720      	adds	r7, #32
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	0800a648 	.word	0x0800a648
 800830c:	0800a3f0 	.word	0x0800a3f0

08008310 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008324:	e002      	b.n	800832c <follow_path+0x1c>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	3301      	adds	r3, #1
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b2f      	cmp	r3, #47	; 0x2f
 8008332:	d0f8      	beq.n	8008326 <follow_path+0x16>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	2b5c      	cmp	r3, #92	; 0x5c
 800833a:	d0f4      	beq.n	8008326 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	2200      	movs	r2, #0
 8008340:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b1f      	cmp	r3, #31
 8008348:	d80a      	bhi.n	8008360 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2280      	movs	r2, #128	; 0x80
 800834e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008352:	2100      	movs	r1, #0
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff fcf9 	bl	8007d4c <dir_sdi>
 800835a:	4603      	mov	r3, r0
 800835c:	75fb      	strb	r3, [r7, #23]
 800835e:	e043      	b.n	80083e8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008360:	463b      	mov	r3, r7
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff ff3f 	bl	80081e8 <create_name>
 800836a:	4603      	mov	r3, r0
 800836c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d134      	bne.n	80083de <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff feaf 	bl	80080d8 <dir_find>
 800837a:	4603      	mov	r3, r0
 800837c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008384:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008386:	7dfb      	ldrb	r3, [r7, #23]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	2b04      	cmp	r3, #4
 8008390:	d127      	bne.n	80083e2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d122      	bne.n	80083e2 <follow_path+0xd2>
 800839c:	2305      	movs	r3, #5
 800839e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80083a0:	e01f      	b.n	80083e2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083a2:	7afb      	ldrb	r3, [r7, #11]
 80083a4:	f003 0304 	and.w	r3, r3, #4
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d11c      	bne.n	80083e6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	799b      	ldrb	r3, [r3, #6]
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d102      	bne.n	80083be <follow_path+0xae>
				res = FR_NO_PATH; break;
 80083b8:	2305      	movs	r3, #5
 80083ba:	75fb      	strb	r3, [r7, #23]
 80083bc:	e014      	b.n	80083e8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083cc:	4413      	add	r3, r2
 80083ce:	4619      	mov	r1, r3
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f7ff fe42 	bl	800805a <ld_clust>
 80083d6:	4602      	mov	r2, r0
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80083dc:	e7c0      	b.n	8008360 <follow_path+0x50>
			if (res != FR_OK) break;
 80083de:	bf00      	nop
 80083e0:	e002      	b.n	80083e8 <follow_path+0xd8>
				break;
 80083e2:	bf00      	nop
 80083e4:	e000      	b.n	80083e8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083e6:	bf00      	nop
			}
		}
	}

	return res;
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b087      	sub	sp, #28
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80083fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083fe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d031      	beq.n	800846c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	617b      	str	r3, [r7, #20]
 800840e:	e002      	b.n	8008416 <get_ldnumber+0x24>
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	3301      	adds	r3, #1
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b20      	cmp	r3, #32
 800841c:	d903      	bls.n	8008426 <get_ldnumber+0x34>
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b3a      	cmp	r3, #58	; 0x3a
 8008424:	d1f4      	bne.n	8008410 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b3a      	cmp	r3, #58	; 0x3a
 800842c:	d11c      	bne.n	8008468 <get_ldnumber+0x76>
			tp = *path;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	1c5a      	adds	r2, r3, #1
 8008438:	60fa      	str	r2, [r7, #12]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	3b30      	subs	r3, #48	; 0x30
 800843e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b09      	cmp	r3, #9
 8008444:	d80e      	bhi.n	8008464 <get_ldnumber+0x72>
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	429a      	cmp	r2, r3
 800844c:	d10a      	bne.n	8008464 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d107      	bne.n	8008464 <get_ldnumber+0x72>
					vol = (int)i;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	3301      	adds	r3, #1
 800845c:	617b      	str	r3, [r7, #20]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	e002      	b.n	800846e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008468:	2300      	movs	r3, #0
 800846a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800846c:	693b      	ldr	r3, [r7, #16]
}
 800846e:	4618      	mov	r0, r3
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
	...

0800847c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	70da      	strb	r2, [r3, #3]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008492:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff f8d8 	bl	800764c <move_window>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d001      	beq.n	80084a6 <check_fs+0x2a>
 80084a2:	2304      	movs	r3, #4
 80084a4:	e038      	b.n	8008518 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	3330      	adds	r3, #48	; 0x30
 80084aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fe1c 	bl	80070ec <ld_word>
 80084b4:	4603      	mov	r3, r0
 80084b6:	461a      	mov	r2, r3
 80084b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80084bc:	429a      	cmp	r2, r3
 80084be:	d001      	beq.n	80084c4 <check_fs+0x48>
 80084c0:	2303      	movs	r3, #3
 80084c2:	e029      	b.n	8008518 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084ca:	2be9      	cmp	r3, #233	; 0xe9
 80084cc:	d009      	beq.n	80084e2 <check_fs+0x66>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084d4:	2beb      	cmp	r3, #235	; 0xeb
 80084d6:	d11e      	bne.n	8008516 <check_fs+0x9a>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80084de:	2b90      	cmp	r3, #144	; 0x90
 80084e0:	d119      	bne.n	8008516 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	3330      	adds	r3, #48	; 0x30
 80084e6:	3336      	adds	r3, #54	; 0x36
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fe17 	bl	800711c <ld_dword>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084f4:	4a0a      	ldr	r2, [pc, #40]	; (8008520 <check_fs+0xa4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d101      	bne.n	80084fe <check_fs+0x82>
 80084fa:	2300      	movs	r3, #0
 80084fc:	e00c      	b.n	8008518 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3330      	adds	r3, #48	; 0x30
 8008502:	3352      	adds	r3, #82	; 0x52
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe fe09 	bl	800711c <ld_dword>
 800850a:	4603      	mov	r3, r0
 800850c:	4a05      	ldr	r2, [pc, #20]	; (8008524 <check_fs+0xa8>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d101      	bne.n	8008516 <check_fs+0x9a>
 8008512:	2300      	movs	r3, #0
 8008514:	e000      	b.n	8008518 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008516:	2302      	movs	r3, #2
}
 8008518:	4618      	mov	r0, r3
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	00544146 	.word	0x00544146
 8008524:	33544146 	.word	0x33544146

08008528 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b096      	sub	sp, #88	; 0x58
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	4613      	mov	r3, r2
 8008534:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f7ff ff58 	bl	80083f2 <get_ldnumber>
 8008542:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008546:	2b00      	cmp	r3, #0
 8008548:	da01      	bge.n	800854e <find_volume+0x26>
 800854a:	230b      	movs	r3, #11
 800854c:	e22d      	b.n	80089aa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800854e:	4aa1      	ldr	r2, [pc, #644]	; (80087d4 <find_volume+0x2ac>)
 8008550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008556:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <find_volume+0x3a>
 800855e:	230c      	movs	r3, #12
 8008560:	e223      	b.n	80089aa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008566:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008568:	79fb      	ldrb	r3, [r7, #7]
 800856a:	f023 0301 	bic.w	r3, r3, #1
 800856e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d01a      	beq.n	80085ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	785b      	ldrb	r3, [r3, #1]
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe fd17 	bl	8006fb0 <disk_status>
 8008582:	4603      	mov	r3, r0
 8008584:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008588:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10c      	bne.n	80085ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d007      	beq.n	80085aa <find_volume+0x82>
 800859a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800859e:	f003 0304 	and.w	r3, r3, #4
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80085a6:	230a      	movs	r3, #10
 80085a8:	e1ff      	b.n	80089aa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80085aa:	2300      	movs	r3, #0
 80085ac:	e1fd      	b.n	80089aa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	2200      	movs	r2, #0
 80085b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80085b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b6:	b2da      	uxtb	r2, r3
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80085bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085be:	785b      	ldrb	r3, [r3, #1]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fe fd0f 	bl	8006fe4 <disk_initialize>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80085cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d001      	beq.n	80085dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80085d8:	2303      	movs	r3, #3
 80085da:	e1e6      	b.n	80089aa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d007      	beq.n	80085f2 <find_volume+0xca>
 80085e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80085ee:	230a      	movs	r3, #10
 80085f0:	e1db      	b.n	80089aa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80085f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085fa:	f7ff ff3f 	bl	800847c <check_fs>
 80085fe:	4603      	mov	r3, r0
 8008600:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008604:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008608:	2b02      	cmp	r3, #2
 800860a:	d149      	bne.n	80086a0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800860c:	2300      	movs	r3, #0
 800860e:	643b      	str	r3, [r7, #64]	; 0x40
 8008610:	e01e      	b.n	8008650 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008620:	4413      	add	r3, r2
 8008622:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	3304      	adds	r3, #4
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d006      	beq.n	800863c <find_volume+0x114>
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	3308      	adds	r3, #8
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fd72 	bl	800711c <ld_dword>
 8008638:	4602      	mov	r2, r0
 800863a:	e000      	b.n	800863e <find_volume+0x116>
 800863c:	2200      	movs	r2, #0
 800863e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	3358      	adds	r3, #88	; 0x58
 8008644:	443b      	add	r3, r7
 8008646:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800864a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800864c:	3301      	adds	r3, #1
 800864e:	643b      	str	r3, [r7, #64]	; 0x40
 8008650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008652:	2b03      	cmp	r3, #3
 8008654:	d9dd      	bls.n	8008612 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008656:	2300      	movs	r3, #0
 8008658:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800865a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <find_volume+0x13e>
 8008660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008662:	3b01      	subs	r3, #1
 8008664:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	3358      	adds	r3, #88	; 0x58
 800866c:	443b      	add	r3, r7
 800866e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008672:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008676:	2b00      	cmp	r3, #0
 8008678:	d005      	beq.n	8008686 <find_volume+0x15e>
 800867a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800867c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800867e:	f7ff fefd 	bl	800847c <check_fs>
 8008682:	4603      	mov	r3, r0
 8008684:	e000      	b.n	8008688 <find_volume+0x160>
 8008686:	2303      	movs	r3, #3
 8008688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800868c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008690:	2b01      	cmp	r3, #1
 8008692:	d905      	bls.n	80086a0 <find_volume+0x178>
 8008694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008696:	3301      	adds	r3, #1
 8008698:	643b      	str	r3, [r7, #64]	; 0x40
 800869a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800869c:	2b03      	cmp	r3, #3
 800869e:	d9e2      	bls.n	8008666 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80086a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d101      	bne.n	80086ac <find_volume+0x184>
 80086a8:	2301      	movs	r3, #1
 80086aa:	e17e      	b.n	80089aa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80086ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d901      	bls.n	80086b8 <find_volume+0x190>
 80086b4:	230d      	movs	r3, #13
 80086b6:	e178      	b.n	80089aa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80086b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ba:	3330      	adds	r3, #48	; 0x30
 80086bc:	330b      	adds	r3, #11
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fe fd14 	bl	80070ec <ld_word>
 80086c4:	4603      	mov	r3, r0
 80086c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ca:	d001      	beq.n	80086d0 <find_volume+0x1a8>
 80086cc:	230d      	movs	r3, #13
 80086ce:	e16c      	b.n	80089aa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	3330      	adds	r3, #48	; 0x30
 80086d4:	3316      	adds	r3, #22
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fd08 	bl	80070ec <ld_word>
 80086dc:	4603      	mov	r3, r0
 80086de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80086e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d106      	bne.n	80086f4 <find_volume+0x1cc>
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	3330      	adds	r3, #48	; 0x30
 80086ea:	3324      	adds	r3, #36	; 0x24
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fe fd15 	bl	800711c <ld_dword>
 80086f2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086f8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80086fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	789b      	ldrb	r3, [r3, #2]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d005      	beq.n	8008718 <find_volume+0x1f0>
 800870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870e:	789b      	ldrb	r3, [r3, #2]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d001      	beq.n	8008718 <find_volume+0x1f0>
 8008714:	230d      	movs	r3, #13
 8008716:	e148      	b.n	80089aa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	789b      	ldrb	r3, [r3, #2]
 800871c:	461a      	mov	r2, r3
 800871e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008720:	fb02 f303 	mul.w	r3, r2, r3
 8008724:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800872c:	b29a      	uxth	r2, r3
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	895b      	ldrh	r3, [r3, #10]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d008      	beq.n	800874c <find_volume+0x224>
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	895b      	ldrh	r3, [r3, #10]
 800873e:	461a      	mov	r2, r3
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	895b      	ldrh	r3, [r3, #10]
 8008744:	3b01      	subs	r3, #1
 8008746:	4013      	ands	r3, r2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <find_volume+0x228>
 800874c:	230d      	movs	r3, #13
 800874e:	e12c      	b.n	80089aa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008752:	3330      	adds	r3, #48	; 0x30
 8008754:	3311      	adds	r3, #17
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe fcc8 	bl	80070ec <ld_word>
 800875c:	4603      	mov	r3, r0
 800875e:	461a      	mov	r2, r3
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	891b      	ldrh	r3, [r3, #8]
 8008768:	f003 030f 	and.w	r3, r3, #15
 800876c:	b29b      	uxth	r3, r3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d001      	beq.n	8008776 <find_volume+0x24e>
 8008772:	230d      	movs	r3, #13
 8008774:	e119      	b.n	80089aa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	3330      	adds	r3, #48	; 0x30
 800877a:	3313      	adds	r3, #19
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe fcb5 	bl	80070ec <ld_word>
 8008782:	4603      	mov	r3, r0
 8008784:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008788:	2b00      	cmp	r3, #0
 800878a:	d106      	bne.n	800879a <find_volume+0x272>
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	3330      	adds	r3, #48	; 0x30
 8008790:	3320      	adds	r3, #32
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fcc2 	bl	800711c <ld_dword>
 8008798:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	3330      	adds	r3, #48	; 0x30
 800879e:	330e      	adds	r3, #14
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fca3 	bl	80070ec <ld_word>
 80087a6:	4603      	mov	r3, r0
 80087a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80087aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <find_volume+0x28c>
 80087b0:	230d      	movs	r3, #13
 80087b2:	e0fa      	b.n	80089aa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80087b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80087b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087b8:	4413      	add	r3, r2
 80087ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087bc:	8912      	ldrh	r2, [r2, #8]
 80087be:	0912      	lsrs	r2, r2, #4
 80087c0:	b292      	uxth	r2, r2
 80087c2:	4413      	add	r3, r2
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80087c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d204      	bcs.n	80087d8 <find_volume+0x2b0>
 80087ce:	230d      	movs	r3, #13
 80087d0:	e0eb      	b.n	80089aa <find_volume+0x482>
 80087d2:	bf00      	nop
 80087d4:	200134ec 	.word	0x200134ec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80087d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087e0:	8952      	ldrh	r2, [r2, #10]
 80087e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <find_volume+0x2ca>
 80087ee:	230d      	movs	r3, #13
 80087f0:	e0db      	b.n	80089aa <find_volume+0x482>
		fmt = FS_FAT32;
 80087f2:	2303      	movs	r3, #3
 80087f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80087fe:	4293      	cmp	r3, r2
 8008800:	d802      	bhi.n	8008808 <find_volume+0x2e0>
 8008802:	2302      	movs	r3, #2
 8008804:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800880e:	4293      	cmp	r3, r2
 8008810:	d802      	bhi.n	8008818 <find_volume+0x2f0>
 8008812:	2301      	movs	r3, #1
 8008814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	1c9a      	adds	r2, r3, #2
 800881c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800881e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008824:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008826:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800882a:	441a      	add	r2, r3
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008830:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	441a      	add	r2, r3
 8008836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008838:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800883a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800883e:	2b03      	cmp	r3, #3
 8008840:	d11e      	bne.n	8008880 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008844:	3330      	adds	r3, #48	; 0x30
 8008846:	332a      	adds	r3, #42	; 0x2a
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fc4f 	bl	80070ec <ld_word>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <find_volume+0x330>
 8008854:	230d      	movs	r3, #13
 8008856:	e0a8      	b.n	80089aa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885a:	891b      	ldrh	r3, [r3, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <find_volume+0x33c>
 8008860:	230d      	movs	r3, #13
 8008862:	e0a2      	b.n	80089aa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008866:	3330      	adds	r3, #48	; 0x30
 8008868:	332c      	adds	r3, #44	; 0x2c
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fc56 	bl	800711c <ld_dword>
 8008870:	4602      	mov	r2, r0
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	647b      	str	r3, [r7, #68]	; 0x44
 800887e:	e01f      	b.n	80088c0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	891b      	ldrh	r3, [r3, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <find_volume+0x364>
 8008888:	230d      	movs	r3, #13
 800888a:	e08e      	b.n	80089aa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800888c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888e:	6a1a      	ldr	r2, [r3, #32]
 8008890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008892:	441a      	add	r2, r3
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800889c:	2b02      	cmp	r3, #2
 800889e:	d103      	bne.n	80088a8 <find_volume+0x380>
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	e00a      	b.n	80088be <find_volume+0x396>
 80088a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088aa:	695a      	ldr	r2, [r3, #20]
 80088ac:	4613      	mov	r3, r2
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	4413      	add	r3, r2
 80088b2:	085a      	lsrs	r2, r3, #1
 80088b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	f003 0301 	and.w	r3, r3, #1
 80088bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80088be:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	699a      	ldr	r2, [r3, #24]
 80088c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80088ca:	0a5b      	lsrs	r3, r3, #9
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d201      	bcs.n	80088d4 <find_volume+0x3ac>
 80088d0:	230d      	movs	r3, #13
 80088d2:	e06a      	b.n	80089aa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80088d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088da:	611a      	str	r2, [r3, #16]
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	691a      	ldr	r2, [r3, #16]
 80088e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	2280      	movs	r2, #128	; 0x80
 80088e8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80088ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	d149      	bne.n	8008986 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	3330      	adds	r3, #48	; 0x30
 80088f6:	3330      	adds	r3, #48	; 0x30
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe fbf7 	bl	80070ec <ld_word>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b01      	cmp	r3, #1
 8008902:	d140      	bne.n	8008986 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008906:	3301      	adds	r3, #1
 8008908:	4619      	mov	r1, r3
 800890a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800890c:	f7fe fe9e 	bl	800764c <move_window>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d137      	bne.n	8008986 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	2200      	movs	r2, #0
 800891a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	3330      	adds	r3, #48	; 0x30
 8008920:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe fbe1 	bl	80070ec <ld_word>
 800892a:	4603      	mov	r3, r0
 800892c:	461a      	mov	r2, r3
 800892e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008932:	429a      	cmp	r2, r3
 8008934:	d127      	bne.n	8008986 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	3330      	adds	r3, #48	; 0x30
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fbee 	bl	800711c <ld_dword>
 8008940:	4603      	mov	r3, r0
 8008942:	4a1c      	ldr	r2, [pc, #112]	; (80089b4 <find_volume+0x48c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d11e      	bne.n	8008986 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894a:	3330      	adds	r3, #48	; 0x30
 800894c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe fbe3 	bl	800711c <ld_dword>
 8008956:	4603      	mov	r3, r0
 8008958:	4a17      	ldr	r2, [pc, #92]	; (80089b8 <find_volume+0x490>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d113      	bne.n	8008986 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	3330      	adds	r3, #48	; 0x30
 8008962:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fbd8 	bl	800711c <ld_dword>
 800896c:	4602      	mov	r2, r0
 800896e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008970:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008974:	3330      	adds	r3, #48	; 0x30
 8008976:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fbce 	bl	800711c <ld_dword>
 8008980:	4602      	mov	r2, r0
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008988:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800898c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800898e:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <find_volume+0x494>)
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	3301      	adds	r3, #1
 8008994:	b29a      	uxth	r2, r3
 8008996:	4b09      	ldr	r3, [pc, #36]	; (80089bc <find_volume+0x494>)
 8008998:	801a      	strh	r2, [r3, #0]
 800899a:	4b08      	ldr	r3, [pc, #32]	; (80089bc <find_volume+0x494>)
 800899c:	881a      	ldrh	r2, [r3, #0]
 800899e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80089a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089a4:	f7fe fdea 	bl	800757c <clear_lock>
#endif
	return FR_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3758      	adds	r7, #88	; 0x58
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	41615252 	.word	0x41615252
 80089b8:	61417272 	.word	0x61417272
 80089bc:	200134f0 	.word	0x200134f0

080089c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80089ca:	2309      	movs	r3, #9
 80089cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01c      	beq.n	8008a0e <validate+0x4e>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d018      	beq.n	8008a0e <validate+0x4e>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d013      	beq.n	8008a0e <validate+0x4e>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	889a      	ldrh	r2, [r3, #4]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	88db      	ldrh	r3, [r3, #6]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d10c      	bne.n	8008a0e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	785b      	ldrb	r3, [r3, #1]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fe fad8 	bl	8006fb0 <disk_status>
 8008a00:	4603      	mov	r3, r0
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <validate+0x4e>
			res = FR_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <validate+0x5a>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	e000      	b.n	8008a1c <validate+0x5c>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	6013      	str	r3, [r2, #0]
	return res;
 8008a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
	...

08008a2c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b088      	sub	sp, #32
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	4613      	mov	r3, r2
 8008a38:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008a3e:	f107 0310 	add.w	r3, r7, #16
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff fcd5 	bl	80083f2 <get_ldnumber>
 8008a48:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	da01      	bge.n	8008a54 <f_mount+0x28>
 8008a50:	230b      	movs	r3, #11
 8008a52:	e02b      	b.n	8008aac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008a54:	4a17      	ldr	r2, [pc, #92]	; (8008ab4 <f_mount+0x88>)
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a5c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008a64:	69b8      	ldr	r0, [r7, #24]
 8008a66:	f7fe fd89 	bl	800757c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	490d      	ldr	r1, [pc, #52]	; (8008ab4 <f_mount+0x88>)
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <f_mount+0x66>
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d001      	beq.n	8008a96 <f_mount+0x6a>
 8008a92:	2300      	movs	r3, #0
 8008a94:	e00a      	b.n	8008aac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008a96:	f107 010c 	add.w	r1, r7, #12
 8008a9a:	f107 0308 	add.w	r3, r7, #8
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7ff fd41 	bl	8008528 <find_volume>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3720      	adds	r7, #32
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	200134ec 	.word	0x200134ec

08008ab8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b098      	sub	sp, #96	; 0x60
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <f_open+0x18>
 8008acc:	2309      	movs	r3, #9
 8008ace:	e1ad      	b.n	8008e2c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008ad0:	79fb      	ldrb	r3, [r7, #7]
 8008ad2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ad6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008ad8:	79fa      	ldrb	r2, [r7, #7]
 8008ada:	f107 0110 	add.w	r1, r7, #16
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7ff fd20 	bl	8008528 <find_volume>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008aee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f040 8191 	bne.w	8008e1a <f_open+0x362>
		dj.obj.fs = fs;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	f107 0314 	add.w	r3, r7, #20
 8008b02:	4611      	mov	r1, r2
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7ff fc03 	bl	8008310 <follow_path>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008b10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d11a      	bne.n	8008b4e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008b18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b1c:	b25b      	sxtb	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	da03      	bge.n	8008b2a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008b22:	2306      	movs	r3, #6
 8008b24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b28:	e011      	b.n	8008b4e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	f023 0301 	bic.w	r3, r3, #1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bf14      	ite	ne
 8008b34:	2301      	movne	r3, #1
 8008b36:	2300      	moveq	r3, #0
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f107 0314 	add.w	r3, r7, #20
 8008b40:	4611      	mov	r1, r2
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fbd2 	bl	80072ec <chk_lock>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	f003 031c 	and.w	r3, r3, #28
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d07f      	beq.n	8008c58 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008b58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d017      	beq.n	8008b90 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008b60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	d10e      	bne.n	8008b86 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008b68:	f7fe fc1c 	bl	80073a4 <enq_lock>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d006      	beq.n	8008b80 <f_open+0xc8>
 8008b72:	f107 0314 	add.w	r3, r7, #20
 8008b76:	4618      	mov	r0, r3
 8008b78:	f7ff fb03 	bl	8008182 <dir_register>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	e000      	b.n	8008b82 <f_open+0xca>
 8008b80:	2312      	movs	r3, #18
 8008b82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	f043 0308 	orr.w	r3, r3, #8
 8008b8c:	71fb      	strb	r3, [r7, #7]
 8008b8e:	e010      	b.n	8008bb2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008b90:	7ebb      	ldrb	r3, [r7, #26]
 8008b92:	f003 0311 	and.w	r3, r3, #17
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <f_open+0xea>
					res = FR_DENIED;
 8008b9a:	2307      	movs	r3, #7
 8008b9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ba0:	e007      	b.n	8008bb2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008ba2:	79fb      	ldrb	r3, [r7, #7]
 8008ba4:	f003 0304 	and.w	r3, r3, #4
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <f_open+0xfa>
 8008bac:	2308      	movs	r3, #8
 8008bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008bb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d168      	bne.n	8008c8c <f_open+0x1d4>
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	f003 0308 	and.w	r3, r3, #8
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d063      	beq.n	8008c8c <f_open+0x1d4>
				dw = GET_FATTIME();
 8008bc4:	f7fd fcb6 	bl	8006534 <get_fattime>
 8008bc8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bcc:	330e      	adds	r3, #14
 8008bce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe fae1 	bl	8007198 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd8:	3316      	adds	r3, #22
 8008bda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe fadb 	bl	8007198 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be4:	330b      	adds	r3, #11
 8008be6:	2220      	movs	r2, #32
 8008be8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bee:	4611      	mov	r1, r2
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff fa32 	bl	800805a <ld_clust>
 8008bf6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fa4a 	bl	8008098 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c06:	331c      	adds	r3, #28
 8008c08:	2100      	movs	r1, #0
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe fac4 	bl	8007198 <st_dword>
					fs->wflag = 1;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2201      	movs	r2, #1
 8008c14:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d037      	beq.n	8008c8c <f_open+0x1d4>
						dw = fs->winsect;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c20:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008c22:	f107 0314 	add.w	r3, r7, #20
 8008c26:	2200      	movs	r2, #0
 8008c28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe ff5d 	bl	8007aea <remove_chain>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008c36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d126      	bne.n	8008c8c <f_open+0x1d4>
							res = move_window(fs, dw);
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe fd02 	bl	800764c <move_window>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c52:	3a01      	subs	r2, #1
 8008c54:	60da      	str	r2, [r3, #12]
 8008c56:	e019      	b.n	8008c8c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008c58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d115      	bne.n	8008c8c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008c60:	7ebb      	ldrb	r3, [r7, #26]
 8008c62:	f003 0310 	and.w	r3, r3, #16
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008c6a:	2304      	movs	r3, #4
 8008c6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c70:	e00c      	b.n	8008c8c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d007      	beq.n	8008c8c <f_open+0x1d4>
 8008c7c:	7ebb      	ldrb	r3, [r7, #26]
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d002      	beq.n	8008c8c <f_open+0x1d4>
						res = FR_DENIED;
 8008c86:	2307      	movs	r3, #7
 8008c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d128      	bne.n	8008ce6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008c94:	79fb      	ldrb	r3, [r7, #7]
 8008c96:	f003 0308 	and.w	r3, r3, #8
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008c9e:	79fb      	ldrb	r3, [r7, #7]
 8008ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ca4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	f023 0301 	bic.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bf14      	ite	ne
 8008cbe:	2301      	movne	r3, #1
 8008cc0:	2300      	moveq	r3, #0
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	f107 0314 	add.w	r3, r7, #20
 8008cca:	4611      	mov	r1, r2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fe fb8b 	bl	80073e8 <inc_lock>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <f_open+0x22e>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008ce6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f040 8095 	bne.w	8008e1a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7ff f9af 	bl	800805a <ld_clust>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d04:	331c      	adds	r3, #28
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe fa08 	bl	800711c <ld_dword>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008d18:	693a      	ldr	r2, [r7, #16]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	88da      	ldrh	r2, [r3, #6]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	79fa      	ldrb	r2, [r7, #7]
 8008d2a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3330      	adds	r3, #48	; 0x30
 8008d42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d46:	2100      	movs	r1, #0
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe fa72 	bl	8007232 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008d4e:	79fb      	ldrb	r3, [r7, #7]
 8008d50:	f003 0320 	and.w	r3, r3, #32
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d060      	beq.n	8008e1a <f_open+0x362>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d05c      	beq.n	8008e1a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	895b      	ldrh	r3, [r3, #10]
 8008d6c:	025b      	lsls	r3, r3, #9
 8008d6e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8008d7c:	e016      	b.n	8008dac <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fe fd1d 	bl	80077c2 <get_fat>
 8008d88:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d802      	bhi.n	8008d96 <f_open+0x2de>
 8008d90:	2302      	movs	r3, #2
 8008d92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d9c:	d102      	bne.n	8008da4 <f_open+0x2ec>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008da4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	657b      	str	r3, [r7, #84]	; 0x54
 8008dac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d103      	bne.n	8008dbc <f_open+0x304>
 8008db4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d8e0      	bhi.n	8008d7e <f_open+0x2c6>
				}
				fp->clust = clst;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dc0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008dc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d127      	bne.n	8008e1a <f_open+0x362>
 8008dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d022      	beq.n	8008e1a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe fcd3 	bl	8007784 <clust2sect>
 8008dde:	6478      	str	r0, [r7, #68]	; 0x44
 8008de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <f_open+0x336>
						res = FR_INT_ERR;
 8008de6:	2302      	movs	r3, #2
 8008de8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008dec:	e015      	b.n	8008e1a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df0:	0a5a      	lsrs	r2, r3, #9
 8008df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008df4:	441a      	add	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	7858      	ldrb	r0, [r3, #1]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	6a1a      	ldr	r2, [r3, #32]
 8008e08:	2301      	movs	r3, #1
 8008e0a:	f7fe f911 	bl	8007030 <disk_read>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <f_open+0x362>
 8008e14:	2301      	movs	r3, #1
 8008e16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008e1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d002      	beq.n	8008e28 <f_open+0x370>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3760      	adds	r7, #96	; 0x60
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b08e      	sub	sp, #56	; 0x38
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f107 0214 	add.w	r2, r7, #20
 8008e52:	4611      	mov	r1, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fdb3 	bl	80089c0 <validate>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d107      	bne.n	8008e78 <f_read+0x44>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	7d5b      	ldrb	r3, [r3, #21]
 8008e6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008e70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <f_read+0x4a>
 8008e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e7c:	e115      	b.n	80090aa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	7d1b      	ldrb	r3, [r3, #20]
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <f_read+0x5a>
 8008e8a:	2307      	movs	r3, #7
 8008e8c:	e10d      	b.n	80090aa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	f240 80fe 	bls.w	80090a0 <f_read+0x26c>
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008ea8:	e0fa      	b.n	80090a0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f040 80c6 	bne.w	8009044 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	0a5b      	lsrs	r3, r3, #9
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	8952      	ldrh	r2, [r2, #10]
 8008ec2:	3a01      	subs	r2, #1
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d12f      	bne.n	8008f2e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d103      	bne.n	8008ede <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	633b      	str	r3, [r7, #48]	; 0x30
 8008edc:	e013      	b.n	8008f06 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d007      	beq.n	8008ef6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	4619      	mov	r1, r3
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f7fe fef9 	bl	8007ce4 <clmt_clust>
 8008ef2:	6338      	str	r0, [r7, #48]	; 0x30
 8008ef4:	e007      	b.n	8008f06 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	4619      	mov	r1, r3
 8008efe:	4610      	mov	r0, r2
 8008f00:	f7fe fc5f 	bl	80077c2 <get_fat>
 8008f04:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d804      	bhi.n	8008f16 <f_read+0xe2>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2202      	movs	r2, #2
 8008f10:	755a      	strb	r2, [r3, #21]
 8008f12:	2302      	movs	r3, #2
 8008f14:	e0c9      	b.n	80090aa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f1c:	d104      	bne.n	8008f28 <f_read+0xf4>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	755a      	strb	r2, [r3, #21]
 8008f24:	2301      	movs	r3, #1
 8008f26:	e0c0      	b.n	80090aa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f2c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	4619      	mov	r1, r3
 8008f36:	4610      	mov	r0, r2
 8008f38:	f7fe fc24 	bl	8007784 <clust2sect>
 8008f3c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <f_read+0x11a>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2202      	movs	r2, #2
 8008f48:	755a      	strb	r2, [r3, #21]
 8008f4a:	2302      	movs	r3, #2
 8008f4c:	e0ad      	b.n	80090aa <f_read+0x276>
			sect += csect;
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	4413      	add	r3, r2
 8008f54:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	0a5b      	lsrs	r3, r3, #9
 8008f5a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d039      	beq.n	8008fd6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	4413      	add	r3, r2
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	8952      	ldrh	r2, [r2, #10]
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d905      	bls.n	8008f7c <f_read+0x148>
					cc = fs->csize - csect;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	895b      	ldrh	r3, [r3, #10]
 8008f74:	461a      	mov	r2, r3
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	7858      	ldrb	r0, [r3, #1]
 8008f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f86:	f7fe f853 	bl	8007030 <disk_read>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d004      	beq.n	8008f9a <f_read+0x166>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2201      	movs	r2, #1
 8008f94:	755a      	strb	r2, [r3, #21]
 8008f96:	2301      	movs	r3, #1
 8008f98:	e087      	b.n	80090aa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	7d1b      	ldrb	r3, [r3, #20]
 8008f9e:	b25b      	sxtb	r3, r3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	da14      	bge.n	8008fce <f_read+0x19a>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6a1a      	ldr	r2, [r3, #32]
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d90d      	bls.n	8008fce <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a1a      	ldr	r2, [r3, #32]
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	025b      	lsls	r3, r3, #9
 8008fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fbe:	18d0      	adds	r0, r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3330      	adds	r3, #48	; 0x30
 8008fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fc8:	4619      	mov	r1, r3
 8008fca:	f7fe f911 	bl	80071f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	025b      	lsls	r3, r3, #9
 8008fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008fd4:	e050      	b.n	8009078 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6a1b      	ldr	r3, [r3, #32]
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d02e      	beq.n	800903e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	7d1b      	ldrb	r3, [r3, #20]
 8008fe4:	b25b      	sxtb	r3, r3
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	da18      	bge.n	800901c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	7858      	ldrb	r0, [r3, #1]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a1a      	ldr	r2, [r3, #32]
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f7fe f839 	bl	8007070 <disk_write>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d004      	beq.n	800900e <f_read+0x1da>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	755a      	strb	r2, [r3, #21]
 800900a:	2301      	movs	r3, #1
 800900c:	e04d      	b.n	80090aa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	7d1b      	ldrb	r3, [r3, #20]
 8009012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009016:	b2da      	uxtb	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	7858      	ldrb	r0, [r3, #1]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009026:	2301      	movs	r3, #1
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	f7fe f801 	bl	8007030 <disk_read>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d004      	beq.n	800903e <f_read+0x20a>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2201      	movs	r2, #1
 8009038:	755a      	strb	r2, [r3, #21]
 800903a:	2301      	movs	r3, #1
 800903c:	e035      	b.n	80090aa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009050:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	429a      	cmp	r2, r3
 8009058:	d901      	bls.n	800905e <f_read+0x22a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906c:	4413      	add	r3, r2
 800906e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009070:	4619      	mov	r1, r3
 8009072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009074:	f7fe f8bc 	bl	80071f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	4413      	add	r3, r2
 800907e:	627b      	str	r3, [r7, #36]	; 0x24
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	699a      	ldr	r2, [r3, #24]
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	441a      	add	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	619a      	str	r2, [r3, #24]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	441a      	add	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f47f af01 	bne.w	8008eaa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3738      	adds	r7, #56	; 0x38
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b086      	sub	sp, #24
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f107 0208 	add.w	r2, r7, #8
 80090c0:	4611      	mov	r1, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff fc7c 	bl	80089c0 <validate>
 80090c8:	4603      	mov	r3, r0
 80090ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d168      	bne.n	80091a4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	7d1b      	ldrb	r3, [r3, #20]
 80090d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d062      	beq.n	80091a4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	7d1b      	ldrb	r3, [r3, #20]
 80090e2:	b25b      	sxtb	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	da15      	bge.n	8009114 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	7858      	ldrb	r0, [r3, #1]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1a      	ldr	r2, [r3, #32]
 80090f6:	2301      	movs	r3, #1
 80090f8:	f7fd ffba 	bl	8007070 <disk_write>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d001      	beq.n	8009106 <f_sync+0x54>
 8009102:	2301      	movs	r3, #1
 8009104:	e04f      	b.n	80091a6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	7d1b      	ldrb	r3, [r3, #20]
 800910a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800910e:	b2da      	uxtb	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009114:	f7fd fa0e 	bl	8006534 <get_fattime>
 8009118:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	4619      	mov	r1, r3
 8009122:	4610      	mov	r0, r2
 8009124:	f7fe fa92 	bl	800764c <move_window>
 8009128:	4603      	mov	r3, r0
 800912a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d138      	bne.n	80091a4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009136:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	330b      	adds	r3, #11
 800913c:	781a      	ldrb	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	330b      	adds	r3, #11
 8009142:	f042 0220 	orr.w	r2, r2, #32
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	461a      	mov	r2, r3
 8009154:	68f9      	ldr	r1, [r7, #12]
 8009156:	f7fe ff9f 	bl	8008098 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f103 021c 	add.w	r2, r3, #28
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	4619      	mov	r1, r3
 8009166:	4610      	mov	r0, r2
 8009168:	f7fe f816 	bl	8007198 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3316      	adds	r3, #22
 8009170:	6939      	ldr	r1, [r7, #16]
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe f810 	bl	8007198 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3312      	adds	r3, #18
 800917c:	2100      	movs	r1, #0
 800917e:	4618      	mov	r0, r3
 8009180:	f7fd ffef 	bl	8007162 <st_word>
					fs->wflag = 1;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	2201      	movs	r2, #1
 8009188:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	4618      	mov	r0, r3
 800918e:	f7fe fa8b 	bl	80076a8 <sync_fs>
 8009192:	4603      	mov	r3, r0
 8009194:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	7d1b      	ldrb	r3, [r3, #20]
 800919a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff ff7b 	bl	80090b2 <f_sync>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d118      	bne.n	80091f8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f107 0208 	add.w	r2, r7, #8
 80091cc:	4611      	mov	r1, r2
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7ff fbf6 	bl	80089c0 <validate>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10c      	bne.n	80091f8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe f98e 	bl	8007504 <dec_lock>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d102      	bne.n	80091f8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009204:	b480      	push	{r7}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009212:	2301      	movs	r3, #1
 8009214:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800921a:	4b1f      	ldr	r3, [pc, #124]	; (8009298 <FATFS_LinkDriverEx+0x94>)
 800921c:	7a5b      	ldrb	r3, [r3, #9]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d131      	bne.n	8009288 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009224:	4b1c      	ldr	r3, [pc, #112]	; (8009298 <FATFS_LinkDriverEx+0x94>)
 8009226:	7a5b      	ldrb	r3, [r3, #9]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	461a      	mov	r2, r3
 800922c:	4b1a      	ldr	r3, [pc, #104]	; (8009298 <FATFS_LinkDriverEx+0x94>)
 800922e:	2100      	movs	r1, #0
 8009230:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009232:	4b19      	ldr	r3, [pc, #100]	; (8009298 <FATFS_LinkDriverEx+0x94>)
 8009234:	7a5b      	ldrb	r3, [r3, #9]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	4a17      	ldr	r2, [pc, #92]	; (8009298 <FATFS_LinkDriverEx+0x94>)
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009242:	4b15      	ldr	r3, [pc, #84]	; (8009298 <FATFS_LinkDriverEx+0x94>)
 8009244:	7a5b      	ldrb	r3, [r3, #9]
 8009246:	b2db      	uxtb	r3, r3
 8009248:	461a      	mov	r2, r3
 800924a:	4b13      	ldr	r3, [pc, #76]	; (8009298 <FATFS_LinkDriverEx+0x94>)
 800924c:	4413      	add	r3, r2
 800924e:	79fa      	ldrb	r2, [r7, #7]
 8009250:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009252:	4b11      	ldr	r3, [pc, #68]	; (8009298 <FATFS_LinkDriverEx+0x94>)
 8009254:	7a5b      	ldrb	r3, [r3, #9]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	b2d1      	uxtb	r1, r2
 800925c:	4a0e      	ldr	r2, [pc, #56]	; (8009298 <FATFS_LinkDriverEx+0x94>)
 800925e:	7251      	strb	r1, [r2, #9]
 8009260:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009262:	7dbb      	ldrb	r3, [r7, #22]
 8009264:	3330      	adds	r3, #48	; 0x30
 8009266:	b2da      	uxtb	r2, r3
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	3301      	adds	r3, #1
 8009270:	223a      	movs	r2, #58	; 0x3a
 8009272:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	3302      	adds	r3, #2
 8009278:	222f      	movs	r2, #47	; 0x2f
 800927a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	3303      	adds	r3, #3
 8009280:	2200      	movs	r2, #0
 8009282:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
}
 800928a:	4618      	mov	r0, r3
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20013514 	.word	0x20013514

0800929c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80092a6:	2200      	movs	r2, #0
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff ffaa 	bl	8009204 <FATFS_LinkDriverEx>
 80092b0:	4603      	mov	r3, r0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3708      	adds	r7, #8
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <__errno>:
 80092bc:	4b01      	ldr	r3, [pc, #4]	; (80092c4 <__errno+0x8>)
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000024 	.word	0x20000024

080092c8 <__libc_init_array>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	4d0d      	ldr	r5, [pc, #52]	; (8009300 <__libc_init_array+0x38>)
 80092cc:	4c0d      	ldr	r4, [pc, #52]	; (8009304 <__libc_init_array+0x3c>)
 80092ce:	1b64      	subs	r4, r4, r5
 80092d0:	10a4      	asrs	r4, r4, #2
 80092d2:	2600      	movs	r6, #0
 80092d4:	42a6      	cmp	r6, r4
 80092d6:	d109      	bne.n	80092ec <__libc_init_array+0x24>
 80092d8:	4d0b      	ldr	r5, [pc, #44]	; (8009308 <__libc_init_array+0x40>)
 80092da:	4c0c      	ldr	r4, [pc, #48]	; (800930c <__libc_init_array+0x44>)
 80092dc:	f001 f832 	bl	800a344 <_init>
 80092e0:	1b64      	subs	r4, r4, r5
 80092e2:	10a4      	asrs	r4, r4, #2
 80092e4:	2600      	movs	r6, #0
 80092e6:	42a6      	cmp	r6, r4
 80092e8:	d105      	bne.n	80092f6 <__libc_init_array+0x2e>
 80092ea:	bd70      	pop	{r4, r5, r6, pc}
 80092ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f0:	4798      	blx	r3
 80092f2:	3601      	adds	r6, #1
 80092f4:	e7ee      	b.n	80092d4 <__libc_init_array+0xc>
 80092f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fa:	4798      	blx	r3
 80092fc:	3601      	adds	r6, #1
 80092fe:	e7f2      	b.n	80092e6 <__libc_init_array+0x1e>
 8009300:	0800a768 	.word	0x0800a768
 8009304:	0800a768 	.word	0x0800a768
 8009308:	0800a768 	.word	0x0800a768
 800930c:	0800a76c 	.word	0x0800a76c

08009310 <memcpy>:
 8009310:	440a      	add	r2, r1
 8009312:	4291      	cmp	r1, r2
 8009314:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009318:	d100      	bne.n	800931c <memcpy+0xc>
 800931a:	4770      	bx	lr
 800931c:	b510      	push	{r4, lr}
 800931e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009326:	4291      	cmp	r1, r2
 8009328:	d1f9      	bne.n	800931e <memcpy+0xe>
 800932a:	bd10      	pop	{r4, pc}

0800932c <memset>:
 800932c:	4402      	add	r2, r0
 800932e:	4603      	mov	r3, r0
 8009330:	4293      	cmp	r3, r2
 8009332:	d100      	bne.n	8009336 <memset+0xa>
 8009334:	4770      	bx	lr
 8009336:	f803 1b01 	strb.w	r1, [r3], #1
 800933a:	e7f9      	b.n	8009330 <memset+0x4>

0800933c <iprintf>:
 800933c:	b40f      	push	{r0, r1, r2, r3}
 800933e:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <iprintf+0x2c>)
 8009340:	b513      	push	{r0, r1, r4, lr}
 8009342:	681c      	ldr	r4, [r3, #0]
 8009344:	b124      	cbz	r4, 8009350 <iprintf+0x14>
 8009346:	69a3      	ldr	r3, [r4, #24]
 8009348:	b913      	cbnz	r3, 8009350 <iprintf+0x14>
 800934a:	4620      	mov	r0, r4
 800934c:	f000 fa5e 	bl	800980c <__sinit>
 8009350:	ab05      	add	r3, sp, #20
 8009352:	9a04      	ldr	r2, [sp, #16]
 8009354:	68a1      	ldr	r1, [r4, #8]
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fc67 	bl	8009c2c <_vfiprintf_r>
 800935e:	b002      	add	sp, #8
 8009360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009364:	b004      	add	sp, #16
 8009366:	4770      	bx	lr
 8009368:	20000024 	.word	0x20000024

0800936c <_puts_r>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	460e      	mov	r6, r1
 8009370:	4605      	mov	r5, r0
 8009372:	b118      	cbz	r0, 800937c <_puts_r+0x10>
 8009374:	6983      	ldr	r3, [r0, #24]
 8009376:	b90b      	cbnz	r3, 800937c <_puts_r+0x10>
 8009378:	f000 fa48 	bl	800980c <__sinit>
 800937c:	69ab      	ldr	r3, [r5, #24]
 800937e:	68ac      	ldr	r4, [r5, #8]
 8009380:	b913      	cbnz	r3, 8009388 <_puts_r+0x1c>
 8009382:	4628      	mov	r0, r5
 8009384:	f000 fa42 	bl	800980c <__sinit>
 8009388:	4b2c      	ldr	r3, [pc, #176]	; (800943c <_puts_r+0xd0>)
 800938a:	429c      	cmp	r4, r3
 800938c:	d120      	bne.n	80093d0 <_puts_r+0x64>
 800938e:	686c      	ldr	r4, [r5, #4]
 8009390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009392:	07db      	lsls	r3, r3, #31
 8009394:	d405      	bmi.n	80093a2 <_puts_r+0x36>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	0598      	lsls	r0, r3, #22
 800939a:	d402      	bmi.n	80093a2 <_puts_r+0x36>
 800939c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800939e:	f000 fad3 	bl	8009948 <__retarget_lock_acquire_recursive>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	0719      	lsls	r1, r3, #28
 80093a6:	d51d      	bpl.n	80093e4 <_puts_r+0x78>
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	b1db      	cbz	r3, 80093e4 <_puts_r+0x78>
 80093ac:	3e01      	subs	r6, #1
 80093ae:	68a3      	ldr	r3, [r4, #8]
 80093b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80093b4:	3b01      	subs	r3, #1
 80093b6:	60a3      	str	r3, [r4, #8]
 80093b8:	bb39      	cbnz	r1, 800940a <_puts_r+0x9e>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	da38      	bge.n	8009430 <_puts_r+0xc4>
 80093be:	4622      	mov	r2, r4
 80093c0:	210a      	movs	r1, #10
 80093c2:	4628      	mov	r0, r5
 80093c4:	f000 f848 	bl	8009458 <__swbuf_r>
 80093c8:	3001      	adds	r0, #1
 80093ca:	d011      	beq.n	80093f0 <_puts_r+0x84>
 80093cc:	250a      	movs	r5, #10
 80093ce:	e011      	b.n	80093f4 <_puts_r+0x88>
 80093d0:	4b1b      	ldr	r3, [pc, #108]	; (8009440 <_puts_r+0xd4>)
 80093d2:	429c      	cmp	r4, r3
 80093d4:	d101      	bne.n	80093da <_puts_r+0x6e>
 80093d6:	68ac      	ldr	r4, [r5, #8]
 80093d8:	e7da      	b.n	8009390 <_puts_r+0x24>
 80093da:	4b1a      	ldr	r3, [pc, #104]	; (8009444 <_puts_r+0xd8>)
 80093dc:	429c      	cmp	r4, r3
 80093de:	bf08      	it	eq
 80093e0:	68ec      	ldreq	r4, [r5, #12]
 80093e2:	e7d5      	b.n	8009390 <_puts_r+0x24>
 80093e4:	4621      	mov	r1, r4
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 f888 	bl	80094fc <__swsetup_r>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d0dd      	beq.n	80093ac <_puts_r+0x40>
 80093f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80093f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093f6:	07da      	lsls	r2, r3, #31
 80093f8:	d405      	bmi.n	8009406 <_puts_r+0x9a>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	059b      	lsls	r3, r3, #22
 80093fe:	d402      	bmi.n	8009406 <_puts_r+0x9a>
 8009400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009402:	f000 faa2 	bl	800994a <__retarget_lock_release_recursive>
 8009406:	4628      	mov	r0, r5
 8009408:	bd70      	pop	{r4, r5, r6, pc}
 800940a:	2b00      	cmp	r3, #0
 800940c:	da04      	bge.n	8009418 <_puts_r+0xac>
 800940e:	69a2      	ldr	r2, [r4, #24]
 8009410:	429a      	cmp	r2, r3
 8009412:	dc06      	bgt.n	8009422 <_puts_r+0xb6>
 8009414:	290a      	cmp	r1, #10
 8009416:	d004      	beq.n	8009422 <_puts_r+0xb6>
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	1c5a      	adds	r2, r3, #1
 800941c:	6022      	str	r2, [r4, #0]
 800941e:	7019      	strb	r1, [r3, #0]
 8009420:	e7c5      	b.n	80093ae <_puts_r+0x42>
 8009422:	4622      	mov	r2, r4
 8009424:	4628      	mov	r0, r5
 8009426:	f000 f817 	bl	8009458 <__swbuf_r>
 800942a:	3001      	adds	r0, #1
 800942c:	d1bf      	bne.n	80093ae <_puts_r+0x42>
 800942e:	e7df      	b.n	80093f0 <_puts_r+0x84>
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	250a      	movs	r5, #10
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	6022      	str	r2, [r4, #0]
 8009438:	701d      	strb	r5, [r3, #0]
 800943a:	e7db      	b.n	80093f4 <_puts_r+0x88>
 800943c:	0800a6ec 	.word	0x0800a6ec
 8009440:	0800a70c 	.word	0x0800a70c
 8009444:	0800a6cc 	.word	0x0800a6cc

08009448 <puts>:
 8009448:	4b02      	ldr	r3, [pc, #8]	; (8009454 <puts+0xc>)
 800944a:	4601      	mov	r1, r0
 800944c:	6818      	ldr	r0, [r3, #0]
 800944e:	f7ff bf8d 	b.w	800936c <_puts_r>
 8009452:	bf00      	nop
 8009454:	20000024 	.word	0x20000024

08009458 <__swbuf_r>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	460e      	mov	r6, r1
 800945c:	4614      	mov	r4, r2
 800945e:	4605      	mov	r5, r0
 8009460:	b118      	cbz	r0, 800946a <__swbuf_r+0x12>
 8009462:	6983      	ldr	r3, [r0, #24]
 8009464:	b90b      	cbnz	r3, 800946a <__swbuf_r+0x12>
 8009466:	f000 f9d1 	bl	800980c <__sinit>
 800946a:	4b21      	ldr	r3, [pc, #132]	; (80094f0 <__swbuf_r+0x98>)
 800946c:	429c      	cmp	r4, r3
 800946e:	d12b      	bne.n	80094c8 <__swbuf_r+0x70>
 8009470:	686c      	ldr	r4, [r5, #4]
 8009472:	69a3      	ldr	r3, [r4, #24]
 8009474:	60a3      	str	r3, [r4, #8]
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	071a      	lsls	r2, r3, #28
 800947a:	d52f      	bpl.n	80094dc <__swbuf_r+0x84>
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	b36b      	cbz	r3, 80094dc <__swbuf_r+0x84>
 8009480:	6923      	ldr	r3, [r4, #16]
 8009482:	6820      	ldr	r0, [r4, #0]
 8009484:	1ac0      	subs	r0, r0, r3
 8009486:	6963      	ldr	r3, [r4, #20]
 8009488:	b2f6      	uxtb	r6, r6
 800948a:	4283      	cmp	r3, r0
 800948c:	4637      	mov	r7, r6
 800948e:	dc04      	bgt.n	800949a <__swbuf_r+0x42>
 8009490:	4621      	mov	r1, r4
 8009492:	4628      	mov	r0, r5
 8009494:	f000 f926 	bl	80096e4 <_fflush_r>
 8009498:	bb30      	cbnz	r0, 80094e8 <__swbuf_r+0x90>
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	3b01      	subs	r3, #1
 800949e:	60a3      	str	r3, [r4, #8]
 80094a0:	6823      	ldr	r3, [r4, #0]
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	6022      	str	r2, [r4, #0]
 80094a6:	701e      	strb	r6, [r3, #0]
 80094a8:	6963      	ldr	r3, [r4, #20]
 80094aa:	3001      	adds	r0, #1
 80094ac:	4283      	cmp	r3, r0
 80094ae:	d004      	beq.n	80094ba <__swbuf_r+0x62>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	07db      	lsls	r3, r3, #31
 80094b4:	d506      	bpl.n	80094c4 <__swbuf_r+0x6c>
 80094b6:	2e0a      	cmp	r6, #10
 80094b8:	d104      	bne.n	80094c4 <__swbuf_r+0x6c>
 80094ba:	4621      	mov	r1, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	f000 f911 	bl	80096e4 <_fflush_r>
 80094c2:	b988      	cbnz	r0, 80094e8 <__swbuf_r+0x90>
 80094c4:	4638      	mov	r0, r7
 80094c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c8:	4b0a      	ldr	r3, [pc, #40]	; (80094f4 <__swbuf_r+0x9c>)
 80094ca:	429c      	cmp	r4, r3
 80094cc:	d101      	bne.n	80094d2 <__swbuf_r+0x7a>
 80094ce:	68ac      	ldr	r4, [r5, #8]
 80094d0:	e7cf      	b.n	8009472 <__swbuf_r+0x1a>
 80094d2:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <__swbuf_r+0xa0>)
 80094d4:	429c      	cmp	r4, r3
 80094d6:	bf08      	it	eq
 80094d8:	68ec      	ldreq	r4, [r5, #12]
 80094da:	e7ca      	b.n	8009472 <__swbuf_r+0x1a>
 80094dc:	4621      	mov	r1, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f80c 	bl	80094fc <__swsetup_r>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d0cb      	beq.n	8009480 <__swbuf_r+0x28>
 80094e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80094ec:	e7ea      	b.n	80094c4 <__swbuf_r+0x6c>
 80094ee:	bf00      	nop
 80094f0:	0800a6ec 	.word	0x0800a6ec
 80094f4:	0800a70c 	.word	0x0800a70c
 80094f8:	0800a6cc 	.word	0x0800a6cc

080094fc <__swsetup_r>:
 80094fc:	4b32      	ldr	r3, [pc, #200]	; (80095c8 <__swsetup_r+0xcc>)
 80094fe:	b570      	push	{r4, r5, r6, lr}
 8009500:	681d      	ldr	r5, [r3, #0]
 8009502:	4606      	mov	r6, r0
 8009504:	460c      	mov	r4, r1
 8009506:	b125      	cbz	r5, 8009512 <__swsetup_r+0x16>
 8009508:	69ab      	ldr	r3, [r5, #24]
 800950a:	b913      	cbnz	r3, 8009512 <__swsetup_r+0x16>
 800950c:	4628      	mov	r0, r5
 800950e:	f000 f97d 	bl	800980c <__sinit>
 8009512:	4b2e      	ldr	r3, [pc, #184]	; (80095cc <__swsetup_r+0xd0>)
 8009514:	429c      	cmp	r4, r3
 8009516:	d10f      	bne.n	8009538 <__swsetup_r+0x3c>
 8009518:	686c      	ldr	r4, [r5, #4]
 800951a:	89a3      	ldrh	r3, [r4, #12]
 800951c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009520:	0719      	lsls	r1, r3, #28
 8009522:	d42c      	bmi.n	800957e <__swsetup_r+0x82>
 8009524:	06dd      	lsls	r5, r3, #27
 8009526:	d411      	bmi.n	800954c <__swsetup_r+0x50>
 8009528:	2309      	movs	r3, #9
 800952a:	6033      	str	r3, [r6, #0]
 800952c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009530:	81a3      	strh	r3, [r4, #12]
 8009532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009536:	e03e      	b.n	80095b6 <__swsetup_r+0xba>
 8009538:	4b25      	ldr	r3, [pc, #148]	; (80095d0 <__swsetup_r+0xd4>)
 800953a:	429c      	cmp	r4, r3
 800953c:	d101      	bne.n	8009542 <__swsetup_r+0x46>
 800953e:	68ac      	ldr	r4, [r5, #8]
 8009540:	e7eb      	b.n	800951a <__swsetup_r+0x1e>
 8009542:	4b24      	ldr	r3, [pc, #144]	; (80095d4 <__swsetup_r+0xd8>)
 8009544:	429c      	cmp	r4, r3
 8009546:	bf08      	it	eq
 8009548:	68ec      	ldreq	r4, [r5, #12]
 800954a:	e7e6      	b.n	800951a <__swsetup_r+0x1e>
 800954c:	0758      	lsls	r0, r3, #29
 800954e:	d512      	bpl.n	8009576 <__swsetup_r+0x7a>
 8009550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009552:	b141      	cbz	r1, 8009566 <__swsetup_r+0x6a>
 8009554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009558:	4299      	cmp	r1, r3
 800955a:	d002      	beq.n	8009562 <__swsetup_r+0x66>
 800955c:	4630      	mov	r0, r6
 800955e:	f000 fa5b 	bl	8009a18 <_free_r>
 8009562:	2300      	movs	r3, #0
 8009564:	6363      	str	r3, [r4, #52]	; 0x34
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800956c:	81a3      	strh	r3, [r4, #12]
 800956e:	2300      	movs	r3, #0
 8009570:	6063      	str	r3, [r4, #4]
 8009572:	6923      	ldr	r3, [r4, #16]
 8009574:	6023      	str	r3, [r4, #0]
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	f043 0308 	orr.w	r3, r3, #8
 800957c:	81a3      	strh	r3, [r4, #12]
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	b94b      	cbnz	r3, 8009596 <__swsetup_r+0x9a>
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800958c:	d003      	beq.n	8009596 <__swsetup_r+0x9a>
 800958e:	4621      	mov	r1, r4
 8009590:	4630      	mov	r0, r6
 8009592:	f000 fa01 	bl	8009998 <__smakebuf_r>
 8009596:	89a0      	ldrh	r0, [r4, #12]
 8009598:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800959c:	f010 0301 	ands.w	r3, r0, #1
 80095a0:	d00a      	beq.n	80095b8 <__swsetup_r+0xbc>
 80095a2:	2300      	movs	r3, #0
 80095a4:	60a3      	str	r3, [r4, #8]
 80095a6:	6963      	ldr	r3, [r4, #20]
 80095a8:	425b      	negs	r3, r3
 80095aa:	61a3      	str	r3, [r4, #24]
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	b943      	cbnz	r3, 80095c2 <__swsetup_r+0xc6>
 80095b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095b4:	d1ba      	bne.n	800952c <__swsetup_r+0x30>
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	0781      	lsls	r1, r0, #30
 80095ba:	bf58      	it	pl
 80095bc:	6963      	ldrpl	r3, [r4, #20]
 80095be:	60a3      	str	r3, [r4, #8]
 80095c0:	e7f4      	b.n	80095ac <__swsetup_r+0xb0>
 80095c2:	2000      	movs	r0, #0
 80095c4:	e7f7      	b.n	80095b6 <__swsetup_r+0xba>
 80095c6:	bf00      	nop
 80095c8:	20000024 	.word	0x20000024
 80095cc:	0800a6ec 	.word	0x0800a6ec
 80095d0:	0800a70c 	.word	0x0800a70c
 80095d4:	0800a6cc 	.word	0x0800a6cc

080095d8 <__sflush_r>:
 80095d8:	898a      	ldrh	r2, [r1, #12]
 80095da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095de:	4605      	mov	r5, r0
 80095e0:	0710      	lsls	r0, r2, #28
 80095e2:	460c      	mov	r4, r1
 80095e4:	d458      	bmi.n	8009698 <__sflush_r+0xc0>
 80095e6:	684b      	ldr	r3, [r1, #4]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dc05      	bgt.n	80095f8 <__sflush_r+0x20>
 80095ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	dc02      	bgt.n	80095f8 <__sflush_r+0x20>
 80095f2:	2000      	movs	r0, #0
 80095f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095fa:	2e00      	cmp	r6, #0
 80095fc:	d0f9      	beq.n	80095f2 <__sflush_r+0x1a>
 80095fe:	2300      	movs	r3, #0
 8009600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009604:	682f      	ldr	r7, [r5, #0]
 8009606:	602b      	str	r3, [r5, #0]
 8009608:	d032      	beq.n	8009670 <__sflush_r+0x98>
 800960a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	075a      	lsls	r2, r3, #29
 8009610:	d505      	bpl.n	800961e <__sflush_r+0x46>
 8009612:	6863      	ldr	r3, [r4, #4]
 8009614:	1ac0      	subs	r0, r0, r3
 8009616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009618:	b10b      	cbz	r3, 800961e <__sflush_r+0x46>
 800961a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800961c:	1ac0      	subs	r0, r0, r3
 800961e:	2300      	movs	r3, #0
 8009620:	4602      	mov	r2, r0
 8009622:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009624:	6a21      	ldr	r1, [r4, #32]
 8009626:	4628      	mov	r0, r5
 8009628:	47b0      	blx	r6
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	d106      	bne.n	800963e <__sflush_r+0x66>
 8009630:	6829      	ldr	r1, [r5, #0]
 8009632:	291d      	cmp	r1, #29
 8009634:	d82c      	bhi.n	8009690 <__sflush_r+0xb8>
 8009636:	4a2a      	ldr	r2, [pc, #168]	; (80096e0 <__sflush_r+0x108>)
 8009638:	40ca      	lsrs	r2, r1
 800963a:	07d6      	lsls	r6, r2, #31
 800963c:	d528      	bpl.n	8009690 <__sflush_r+0xb8>
 800963e:	2200      	movs	r2, #0
 8009640:	6062      	str	r2, [r4, #4]
 8009642:	04d9      	lsls	r1, r3, #19
 8009644:	6922      	ldr	r2, [r4, #16]
 8009646:	6022      	str	r2, [r4, #0]
 8009648:	d504      	bpl.n	8009654 <__sflush_r+0x7c>
 800964a:	1c42      	adds	r2, r0, #1
 800964c:	d101      	bne.n	8009652 <__sflush_r+0x7a>
 800964e:	682b      	ldr	r3, [r5, #0]
 8009650:	b903      	cbnz	r3, 8009654 <__sflush_r+0x7c>
 8009652:	6560      	str	r0, [r4, #84]	; 0x54
 8009654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009656:	602f      	str	r7, [r5, #0]
 8009658:	2900      	cmp	r1, #0
 800965a:	d0ca      	beq.n	80095f2 <__sflush_r+0x1a>
 800965c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009660:	4299      	cmp	r1, r3
 8009662:	d002      	beq.n	800966a <__sflush_r+0x92>
 8009664:	4628      	mov	r0, r5
 8009666:	f000 f9d7 	bl	8009a18 <_free_r>
 800966a:	2000      	movs	r0, #0
 800966c:	6360      	str	r0, [r4, #52]	; 0x34
 800966e:	e7c1      	b.n	80095f4 <__sflush_r+0x1c>
 8009670:	6a21      	ldr	r1, [r4, #32]
 8009672:	2301      	movs	r3, #1
 8009674:	4628      	mov	r0, r5
 8009676:	47b0      	blx	r6
 8009678:	1c41      	adds	r1, r0, #1
 800967a:	d1c7      	bne.n	800960c <__sflush_r+0x34>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0c4      	beq.n	800960c <__sflush_r+0x34>
 8009682:	2b1d      	cmp	r3, #29
 8009684:	d001      	beq.n	800968a <__sflush_r+0xb2>
 8009686:	2b16      	cmp	r3, #22
 8009688:	d101      	bne.n	800968e <__sflush_r+0xb6>
 800968a:	602f      	str	r7, [r5, #0]
 800968c:	e7b1      	b.n	80095f2 <__sflush_r+0x1a>
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009694:	81a3      	strh	r3, [r4, #12]
 8009696:	e7ad      	b.n	80095f4 <__sflush_r+0x1c>
 8009698:	690f      	ldr	r7, [r1, #16]
 800969a:	2f00      	cmp	r7, #0
 800969c:	d0a9      	beq.n	80095f2 <__sflush_r+0x1a>
 800969e:	0793      	lsls	r3, r2, #30
 80096a0:	680e      	ldr	r6, [r1, #0]
 80096a2:	bf08      	it	eq
 80096a4:	694b      	ldreq	r3, [r1, #20]
 80096a6:	600f      	str	r7, [r1, #0]
 80096a8:	bf18      	it	ne
 80096aa:	2300      	movne	r3, #0
 80096ac:	eba6 0807 	sub.w	r8, r6, r7
 80096b0:	608b      	str	r3, [r1, #8]
 80096b2:	f1b8 0f00 	cmp.w	r8, #0
 80096b6:	dd9c      	ble.n	80095f2 <__sflush_r+0x1a>
 80096b8:	6a21      	ldr	r1, [r4, #32]
 80096ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096bc:	4643      	mov	r3, r8
 80096be:	463a      	mov	r2, r7
 80096c0:	4628      	mov	r0, r5
 80096c2:	47b0      	blx	r6
 80096c4:	2800      	cmp	r0, #0
 80096c6:	dc06      	bgt.n	80096d6 <__sflush_r+0xfe>
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096d4:	e78e      	b.n	80095f4 <__sflush_r+0x1c>
 80096d6:	4407      	add	r7, r0
 80096d8:	eba8 0800 	sub.w	r8, r8, r0
 80096dc:	e7e9      	b.n	80096b2 <__sflush_r+0xda>
 80096de:	bf00      	nop
 80096e0:	20400001 	.word	0x20400001

080096e4 <_fflush_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	690b      	ldr	r3, [r1, #16]
 80096e8:	4605      	mov	r5, r0
 80096ea:	460c      	mov	r4, r1
 80096ec:	b913      	cbnz	r3, 80096f4 <_fflush_r+0x10>
 80096ee:	2500      	movs	r5, #0
 80096f0:	4628      	mov	r0, r5
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	b118      	cbz	r0, 80096fe <_fflush_r+0x1a>
 80096f6:	6983      	ldr	r3, [r0, #24]
 80096f8:	b90b      	cbnz	r3, 80096fe <_fflush_r+0x1a>
 80096fa:	f000 f887 	bl	800980c <__sinit>
 80096fe:	4b14      	ldr	r3, [pc, #80]	; (8009750 <_fflush_r+0x6c>)
 8009700:	429c      	cmp	r4, r3
 8009702:	d11b      	bne.n	800973c <_fflush_r+0x58>
 8009704:	686c      	ldr	r4, [r5, #4]
 8009706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d0ef      	beq.n	80096ee <_fflush_r+0xa>
 800970e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009710:	07d0      	lsls	r0, r2, #31
 8009712:	d404      	bmi.n	800971e <_fflush_r+0x3a>
 8009714:	0599      	lsls	r1, r3, #22
 8009716:	d402      	bmi.n	800971e <_fflush_r+0x3a>
 8009718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800971a:	f000 f915 	bl	8009948 <__retarget_lock_acquire_recursive>
 800971e:	4628      	mov	r0, r5
 8009720:	4621      	mov	r1, r4
 8009722:	f7ff ff59 	bl	80095d8 <__sflush_r>
 8009726:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009728:	07da      	lsls	r2, r3, #31
 800972a:	4605      	mov	r5, r0
 800972c:	d4e0      	bmi.n	80096f0 <_fflush_r+0xc>
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	059b      	lsls	r3, r3, #22
 8009732:	d4dd      	bmi.n	80096f0 <_fflush_r+0xc>
 8009734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009736:	f000 f908 	bl	800994a <__retarget_lock_release_recursive>
 800973a:	e7d9      	b.n	80096f0 <_fflush_r+0xc>
 800973c:	4b05      	ldr	r3, [pc, #20]	; (8009754 <_fflush_r+0x70>)
 800973e:	429c      	cmp	r4, r3
 8009740:	d101      	bne.n	8009746 <_fflush_r+0x62>
 8009742:	68ac      	ldr	r4, [r5, #8]
 8009744:	e7df      	b.n	8009706 <_fflush_r+0x22>
 8009746:	4b04      	ldr	r3, [pc, #16]	; (8009758 <_fflush_r+0x74>)
 8009748:	429c      	cmp	r4, r3
 800974a:	bf08      	it	eq
 800974c:	68ec      	ldreq	r4, [r5, #12]
 800974e:	e7da      	b.n	8009706 <_fflush_r+0x22>
 8009750:	0800a6ec 	.word	0x0800a6ec
 8009754:	0800a70c 	.word	0x0800a70c
 8009758:	0800a6cc 	.word	0x0800a6cc

0800975c <std>:
 800975c:	2300      	movs	r3, #0
 800975e:	b510      	push	{r4, lr}
 8009760:	4604      	mov	r4, r0
 8009762:	e9c0 3300 	strd	r3, r3, [r0]
 8009766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800976a:	6083      	str	r3, [r0, #8]
 800976c:	8181      	strh	r1, [r0, #12]
 800976e:	6643      	str	r3, [r0, #100]	; 0x64
 8009770:	81c2      	strh	r2, [r0, #14]
 8009772:	6183      	str	r3, [r0, #24]
 8009774:	4619      	mov	r1, r3
 8009776:	2208      	movs	r2, #8
 8009778:	305c      	adds	r0, #92	; 0x5c
 800977a:	f7ff fdd7 	bl	800932c <memset>
 800977e:	4b05      	ldr	r3, [pc, #20]	; (8009794 <std+0x38>)
 8009780:	6263      	str	r3, [r4, #36]	; 0x24
 8009782:	4b05      	ldr	r3, [pc, #20]	; (8009798 <std+0x3c>)
 8009784:	62a3      	str	r3, [r4, #40]	; 0x28
 8009786:	4b05      	ldr	r3, [pc, #20]	; (800979c <std+0x40>)
 8009788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800978a:	4b05      	ldr	r3, [pc, #20]	; (80097a0 <std+0x44>)
 800978c:	6224      	str	r4, [r4, #32]
 800978e:	6323      	str	r3, [r4, #48]	; 0x30
 8009790:	bd10      	pop	{r4, pc}
 8009792:	bf00      	nop
 8009794:	0800a1d5 	.word	0x0800a1d5
 8009798:	0800a1f7 	.word	0x0800a1f7
 800979c:	0800a22f 	.word	0x0800a22f
 80097a0:	0800a253 	.word	0x0800a253

080097a4 <_cleanup_r>:
 80097a4:	4901      	ldr	r1, [pc, #4]	; (80097ac <_cleanup_r+0x8>)
 80097a6:	f000 b8af 	b.w	8009908 <_fwalk_reent>
 80097aa:	bf00      	nop
 80097ac:	080096e5 	.word	0x080096e5

080097b0 <__sfmoreglue>:
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	2268      	movs	r2, #104	; 0x68
 80097b4:	1e4d      	subs	r5, r1, #1
 80097b6:	4355      	muls	r5, r2
 80097b8:	460e      	mov	r6, r1
 80097ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097be:	f000 f997 	bl	8009af0 <_malloc_r>
 80097c2:	4604      	mov	r4, r0
 80097c4:	b140      	cbz	r0, 80097d8 <__sfmoreglue+0x28>
 80097c6:	2100      	movs	r1, #0
 80097c8:	e9c0 1600 	strd	r1, r6, [r0]
 80097cc:	300c      	adds	r0, #12
 80097ce:	60a0      	str	r0, [r4, #8]
 80097d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097d4:	f7ff fdaa 	bl	800932c <memset>
 80097d8:	4620      	mov	r0, r4
 80097da:	bd70      	pop	{r4, r5, r6, pc}

080097dc <__sfp_lock_acquire>:
 80097dc:	4801      	ldr	r0, [pc, #4]	; (80097e4 <__sfp_lock_acquire+0x8>)
 80097de:	f000 b8b3 	b.w	8009948 <__retarget_lock_acquire_recursive>
 80097e2:	bf00      	nop
 80097e4:	20013521 	.word	0x20013521

080097e8 <__sfp_lock_release>:
 80097e8:	4801      	ldr	r0, [pc, #4]	; (80097f0 <__sfp_lock_release+0x8>)
 80097ea:	f000 b8ae 	b.w	800994a <__retarget_lock_release_recursive>
 80097ee:	bf00      	nop
 80097f0:	20013521 	.word	0x20013521

080097f4 <__sinit_lock_acquire>:
 80097f4:	4801      	ldr	r0, [pc, #4]	; (80097fc <__sinit_lock_acquire+0x8>)
 80097f6:	f000 b8a7 	b.w	8009948 <__retarget_lock_acquire_recursive>
 80097fa:	bf00      	nop
 80097fc:	20013522 	.word	0x20013522

08009800 <__sinit_lock_release>:
 8009800:	4801      	ldr	r0, [pc, #4]	; (8009808 <__sinit_lock_release+0x8>)
 8009802:	f000 b8a2 	b.w	800994a <__retarget_lock_release_recursive>
 8009806:	bf00      	nop
 8009808:	20013522 	.word	0x20013522

0800980c <__sinit>:
 800980c:	b510      	push	{r4, lr}
 800980e:	4604      	mov	r4, r0
 8009810:	f7ff fff0 	bl	80097f4 <__sinit_lock_acquire>
 8009814:	69a3      	ldr	r3, [r4, #24]
 8009816:	b11b      	cbz	r3, 8009820 <__sinit+0x14>
 8009818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800981c:	f7ff bff0 	b.w	8009800 <__sinit_lock_release>
 8009820:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009824:	6523      	str	r3, [r4, #80]	; 0x50
 8009826:	4b13      	ldr	r3, [pc, #76]	; (8009874 <__sinit+0x68>)
 8009828:	4a13      	ldr	r2, [pc, #76]	; (8009878 <__sinit+0x6c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	62a2      	str	r2, [r4, #40]	; 0x28
 800982e:	42a3      	cmp	r3, r4
 8009830:	bf04      	itt	eq
 8009832:	2301      	moveq	r3, #1
 8009834:	61a3      	streq	r3, [r4, #24]
 8009836:	4620      	mov	r0, r4
 8009838:	f000 f820 	bl	800987c <__sfp>
 800983c:	6060      	str	r0, [r4, #4]
 800983e:	4620      	mov	r0, r4
 8009840:	f000 f81c 	bl	800987c <__sfp>
 8009844:	60a0      	str	r0, [r4, #8]
 8009846:	4620      	mov	r0, r4
 8009848:	f000 f818 	bl	800987c <__sfp>
 800984c:	2200      	movs	r2, #0
 800984e:	60e0      	str	r0, [r4, #12]
 8009850:	2104      	movs	r1, #4
 8009852:	6860      	ldr	r0, [r4, #4]
 8009854:	f7ff ff82 	bl	800975c <std>
 8009858:	68a0      	ldr	r0, [r4, #8]
 800985a:	2201      	movs	r2, #1
 800985c:	2109      	movs	r1, #9
 800985e:	f7ff ff7d 	bl	800975c <std>
 8009862:	68e0      	ldr	r0, [r4, #12]
 8009864:	2202      	movs	r2, #2
 8009866:	2112      	movs	r1, #18
 8009868:	f7ff ff78 	bl	800975c <std>
 800986c:	2301      	movs	r3, #1
 800986e:	61a3      	str	r3, [r4, #24]
 8009870:	e7d2      	b.n	8009818 <__sinit+0xc>
 8009872:	bf00      	nop
 8009874:	0800a6c8 	.word	0x0800a6c8
 8009878:	080097a5 	.word	0x080097a5

0800987c <__sfp>:
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	4607      	mov	r7, r0
 8009880:	f7ff ffac 	bl	80097dc <__sfp_lock_acquire>
 8009884:	4b1e      	ldr	r3, [pc, #120]	; (8009900 <__sfp+0x84>)
 8009886:	681e      	ldr	r6, [r3, #0]
 8009888:	69b3      	ldr	r3, [r6, #24]
 800988a:	b913      	cbnz	r3, 8009892 <__sfp+0x16>
 800988c:	4630      	mov	r0, r6
 800988e:	f7ff ffbd 	bl	800980c <__sinit>
 8009892:	3648      	adds	r6, #72	; 0x48
 8009894:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009898:	3b01      	subs	r3, #1
 800989a:	d503      	bpl.n	80098a4 <__sfp+0x28>
 800989c:	6833      	ldr	r3, [r6, #0]
 800989e:	b30b      	cbz	r3, 80098e4 <__sfp+0x68>
 80098a0:	6836      	ldr	r6, [r6, #0]
 80098a2:	e7f7      	b.n	8009894 <__sfp+0x18>
 80098a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098a8:	b9d5      	cbnz	r5, 80098e0 <__sfp+0x64>
 80098aa:	4b16      	ldr	r3, [pc, #88]	; (8009904 <__sfp+0x88>)
 80098ac:	60e3      	str	r3, [r4, #12]
 80098ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098b2:	6665      	str	r5, [r4, #100]	; 0x64
 80098b4:	f000 f847 	bl	8009946 <__retarget_lock_init_recursive>
 80098b8:	f7ff ff96 	bl	80097e8 <__sfp_lock_release>
 80098bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098c4:	6025      	str	r5, [r4, #0]
 80098c6:	61a5      	str	r5, [r4, #24]
 80098c8:	2208      	movs	r2, #8
 80098ca:	4629      	mov	r1, r5
 80098cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098d0:	f7ff fd2c 	bl	800932c <memset>
 80098d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098dc:	4620      	mov	r0, r4
 80098de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098e0:	3468      	adds	r4, #104	; 0x68
 80098e2:	e7d9      	b.n	8009898 <__sfp+0x1c>
 80098e4:	2104      	movs	r1, #4
 80098e6:	4638      	mov	r0, r7
 80098e8:	f7ff ff62 	bl	80097b0 <__sfmoreglue>
 80098ec:	4604      	mov	r4, r0
 80098ee:	6030      	str	r0, [r6, #0]
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d1d5      	bne.n	80098a0 <__sfp+0x24>
 80098f4:	f7ff ff78 	bl	80097e8 <__sfp_lock_release>
 80098f8:	230c      	movs	r3, #12
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	e7ee      	b.n	80098dc <__sfp+0x60>
 80098fe:	bf00      	nop
 8009900:	0800a6c8 	.word	0x0800a6c8
 8009904:	ffff0001 	.word	0xffff0001

08009908 <_fwalk_reent>:
 8009908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800990c:	4606      	mov	r6, r0
 800990e:	4688      	mov	r8, r1
 8009910:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009914:	2700      	movs	r7, #0
 8009916:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800991a:	f1b9 0901 	subs.w	r9, r9, #1
 800991e:	d505      	bpl.n	800992c <_fwalk_reent+0x24>
 8009920:	6824      	ldr	r4, [r4, #0]
 8009922:	2c00      	cmp	r4, #0
 8009924:	d1f7      	bne.n	8009916 <_fwalk_reent+0xe>
 8009926:	4638      	mov	r0, r7
 8009928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800992c:	89ab      	ldrh	r3, [r5, #12]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d907      	bls.n	8009942 <_fwalk_reent+0x3a>
 8009932:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009936:	3301      	adds	r3, #1
 8009938:	d003      	beq.n	8009942 <_fwalk_reent+0x3a>
 800993a:	4629      	mov	r1, r5
 800993c:	4630      	mov	r0, r6
 800993e:	47c0      	blx	r8
 8009940:	4307      	orrs	r7, r0
 8009942:	3568      	adds	r5, #104	; 0x68
 8009944:	e7e9      	b.n	800991a <_fwalk_reent+0x12>

08009946 <__retarget_lock_init_recursive>:
 8009946:	4770      	bx	lr

08009948 <__retarget_lock_acquire_recursive>:
 8009948:	4770      	bx	lr

0800994a <__retarget_lock_release_recursive>:
 800994a:	4770      	bx	lr

0800994c <__swhatbuf_r>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	460e      	mov	r6, r1
 8009950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009954:	2900      	cmp	r1, #0
 8009956:	b096      	sub	sp, #88	; 0x58
 8009958:	4614      	mov	r4, r2
 800995a:	461d      	mov	r5, r3
 800995c:	da08      	bge.n	8009970 <__swhatbuf_r+0x24>
 800995e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	602a      	str	r2, [r5, #0]
 8009966:	061a      	lsls	r2, r3, #24
 8009968:	d410      	bmi.n	800998c <__swhatbuf_r+0x40>
 800996a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996e:	e00e      	b.n	800998e <__swhatbuf_r+0x42>
 8009970:	466a      	mov	r2, sp
 8009972:	f000 fc95 	bl	800a2a0 <_fstat_r>
 8009976:	2800      	cmp	r0, #0
 8009978:	dbf1      	blt.n	800995e <__swhatbuf_r+0x12>
 800997a:	9a01      	ldr	r2, [sp, #4]
 800997c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009980:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009984:	425a      	negs	r2, r3
 8009986:	415a      	adcs	r2, r3
 8009988:	602a      	str	r2, [r5, #0]
 800998a:	e7ee      	b.n	800996a <__swhatbuf_r+0x1e>
 800998c:	2340      	movs	r3, #64	; 0x40
 800998e:	2000      	movs	r0, #0
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	b016      	add	sp, #88	; 0x58
 8009994:	bd70      	pop	{r4, r5, r6, pc}
	...

08009998 <__smakebuf_r>:
 8009998:	898b      	ldrh	r3, [r1, #12]
 800999a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800999c:	079d      	lsls	r5, r3, #30
 800999e:	4606      	mov	r6, r0
 80099a0:	460c      	mov	r4, r1
 80099a2:	d507      	bpl.n	80099b4 <__smakebuf_r+0x1c>
 80099a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099a8:	6023      	str	r3, [r4, #0]
 80099aa:	6123      	str	r3, [r4, #16]
 80099ac:	2301      	movs	r3, #1
 80099ae:	6163      	str	r3, [r4, #20]
 80099b0:	b002      	add	sp, #8
 80099b2:	bd70      	pop	{r4, r5, r6, pc}
 80099b4:	ab01      	add	r3, sp, #4
 80099b6:	466a      	mov	r2, sp
 80099b8:	f7ff ffc8 	bl	800994c <__swhatbuf_r>
 80099bc:	9900      	ldr	r1, [sp, #0]
 80099be:	4605      	mov	r5, r0
 80099c0:	4630      	mov	r0, r6
 80099c2:	f000 f895 	bl	8009af0 <_malloc_r>
 80099c6:	b948      	cbnz	r0, 80099dc <__smakebuf_r+0x44>
 80099c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099cc:	059a      	lsls	r2, r3, #22
 80099ce:	d4ef      	bmi.n	80099b0 <__smakebuf_r+0x18>
 80099d0:	f023 0303 	bic.w	r3, r3, #3
 80099d4:	f043 0302 	orr.w	r3, r3, #2
 80099d8:	81a3      	strh	r3, [r4, #12]
 80099da:	e7e3      	b.n	80099a4 <__smakebuf_r+0xc>
 80099dc:	4b0d      	ldr	r3, [pc, #52]	; (8009a14 <__smakebuf_r+0x7c>)
 80099de:	62b3      	str	r3, [r6, #40]	; 0x28
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	6020      	str	r0, [r4, #0]
 80099e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099e8:	81a3      	strh	r3, [r4, #12]
 80099ea:	9b00      	ldr	r3, [sp, #0]
 80099ec:	6163      	str	r3, [r4, #20]
 80099ee:	9b01      	ldr	r3, [sp, #4]
 80099f0:	6120      	str	r0, [r4, #16]
 80099f2:	b15b      	cbz	r3, 8009a0c <__smakebuf_r+0x74>
 80099f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099f8:	4630      	mov	r0, r6
 80099fa:	f000 fc63 	bl	800a2c4 <_isatty_r>
 80099fe:	b128      	cbz	r0, 8009a0c <__smakebuf_r+0x74>
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	f023 0303 	bic.w	r3, r3, #3
 8009a06:	f043 0301 	orr.w	r3, r3, #1
 8009a0a:	81a3      	strh	r3, [r4, #12]
 8009a0c:	89a0      	ldrh	r0, [r4, #12]
 8009a0e:	4305      	orrs	r5, r0
 8009a10:	81a5      	strh	r5, [r4, #12]
 8009a12:	e7cd      	b.n	80099b0 <__smakebuf_r+0x18>
 8009a14:	080097a5 	.word	0x080097a5

08009a18 <_free_r>:
 8009a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a1a:	2900      	cmp	r1, #0
 8009a1c:	d044      	beq.n	8009aa8 <_free_r+0x90>
 8009a1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a22:	9001      	str	r0, [sp, #4]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f1a1 0404 	sub.w	r4, r1, #4
 8009a2a:	bfb8      	it	lt
 8009a2c:	18e4      	addlt	r4, r4, r3
 8009a2e:	f000 fc6b 	bl	800a308 <__malloc_lock>
 8009a32:	4a1e      	ldr	r2, [pc, #120]	; (8009aac <_free_r+0x94>)
 8009a34:	9801      	ldr	r0, [sp, #4]
 8009a36:	6813      	ldr	r3, [r2, #0]
 8009a38:	b933      	cbnz	r3, 8009a48 <_free_r+0x30>
 8009a3a:	6063      	str	r3, [r4, #4]
 8009a3c:	6014      	str	r4, [r2, #0]
 8009a3e:	b003      	add	sp, #12
 8009a40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a44:	f000 bc66 	b.w	800a314 <__malloc_unlock>
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	d908      	bls.n	8009a5e <_free_r+0x46>
 8009a4c:	6825      	ldr	r5, [r4, #0]
 8009a4e:	1961      	adds	r1, r4, r5
 8009a50:	428b      	cmp	r3, r1
 8009a52:	bf01      	itttt	eq
 8009a54:	6819      	ldreq	r1, [r3, #0]
 8009a56:	685b      	ldreq	r3, [r3, #4]
 8009a58:	1949      	addeq	r1, r1, r5
 8009a5a:	6021      	streq	r1, [r4, #0]
 8009a5c:	e7ed      	b.n	8009a3a <_free_r+0x22>
 8009a5e:	461a      	mov	r2, r3
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	b10b      	cbz	r3, 8009a68 <_free_r+0x50>
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	d9fa      	bls.n	8009a5e <_free_r+0x46>
 8009a68:	6811      	ldr	r1, [r2, #0]
 8009a6a:	1855      	adds	r5, r2, r1
 8009a6c:	42a5      	cmp	r5, r4
 8009a6e:	d10b      	bne.n	8009a88 <_free_r+0x70>
 8009a70:	6824      	ldr	r4, [r4, #0]
 8009a72:	4421      	add	r1, r4
 8009a74:	1854      	adds	r4, r2, r1
 8009a76:	42a3      	cmp	r3, r4
 8009a78:	6011      	str	r1, [r2, #0]
 8009a7a:	d1e0      	bne.n	8009a3e <_free_r+0x26>
 8009a7c:	681c      	ldr	r4, [r3, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	6053      	str	r3, [r2, #4]
 8009a82:	4421      	add	r1, r4
 8009a84:	6011      	str	r1, [r2, #0]
 8009a86:	e7da      	b.n	8009a3e <_free_r+0x26>
 8009a88:	d902      	bls.n	8009a90 <_free_r+0x78>
 8009a8a:	230c      	movs	r3, #12
 8009a8c:	6003      	str	r3, [r0, #0]
 8009a8e:	e7d6      	b.n	8009a3e <_free_r+0x26>
 8009a90:	6825      	ldr	r5, [r4, #0]
 8009a92:	1961      	adds	r1, r4, r5
 8009a94:	428b      	cmp	r3, r1
 8009a96:	bf04      	itt	eq
 8009a98:	6819      	ldreq	r1, [r3, #0]
 8009a9a:	685b      	ldreq	r3, [r3, #4]
 8009a9c:	6063      	str	r3, [r4, #4]
 8009a9e:	bf04      	itt	eq
 8009aa0:	1949      	addeq	r1, r1, r5
 8009aa2:	6021      	streq	r1, [r4, #0]
 8009aa4:	6054      	str	r4, [r2, #4]
 8009aa6:	e7ca      	b.n	8009a3e <_free_r+0x26>
 8009aa8:	b003      	add	sp, #12
 8009aaa:	bd30      	pop	{r4, r5, pc}
 8009aac:	20013524 	.word	0x20013524

08009ab0 <sbrk_aligned>:
 8009ab0:	b570      	push	{r4, r5, r6, lr}
 8009ab2:	4e0e      	ldr	r6, [pc, #56]	; (8009aec <sbrk_aligned+0x3c>)
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	6831      	ldr	r1, [r6, #0]
 8009ab8:	4605      	mov	r5, r0
 8009aba:	b911      	cbnz	r1, 8009ac2 <sbrk_aligned+0x12>
 8009abc:	f000 fb7a 	bl	800a1b4 <_sbrk_r>
 8009ac0:	6030      	str	r0, [r6, #0]
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f000 fb75 	bl	800a1b4 <_sbrk_r>
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	d00a      	beq.n	8009ae4 <sbrk_aligned+0x34>
 8009ace:	1cc4      	adds	r4, r0, #3
 8009ad0:	f024 0403 	bic.w	r4, r4, #3
 8009ad4:	42a0      	cmp	r0, r4
 8009ad6:	d007      	beq.n	8009ae8 <sbrk_aligned+0x38>
 8009ad8:	1a21      	subs	r1, r4, r0
 8009ada:	4628      	mov	r0, r5
 8009adc:	f000 fb6a 	bl	800a1b4 <_sbrk_r>
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d101      	bne.n	8009ae8 <sbrk_aligned+0x38>
 8009ae4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ae8:	4620      	mov	r0, r4
 8009aea:	bd70      	pop	{r4, r5, r6, pc}
 8009aec:	20013528 	.word	0x20013528

08009af0 <_malloc_r>:
 8009af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af4:	1ccd      	adds	r5, r1, #3
 8009af6:	f025 0503 	bic.w	r5, r5, #3
 8009afa:	3508      	adds	r5, #8
 8009afc:	2d0c      	cmp	r5, #12
 8009afe:	bf38      	it	cc
 8009b00:	250c      	movcc	r5, #12
 8009b02:	2d00      	cmp	r5, #0
 8009b04:	4607      	mov	r7, r0
 8009b06:	db01      	blt.n	8009b0c <_malloc_r+0x1c>
 8009b08:	42a9      	cmp	r1, r5
 8009b0a:	d905      	bls.n	8009b18 <_malloc_r+0x28>
 8009b0c:	230c      	movs	r3, #12
 8009b0e:	603b      	str	r3, [r7, #0]
 8009b10:	2600      	movs	r6, #0
 8009b12:	4630      	mov	r0, r6
 8009b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b18:	4e2e      	ldr	r6, [pc, #184]	; (8009bd4 <_malloc_r+0xe4>)
 8009b1a:	f000 fbf5 	bl	800a308 <__malloc_lock>
 8009b1e:	6833      	ldr	r3, [r6, #0]
 8009b20:	461c      	mov	r4, r3
 8009b22:	bb34      	cbnz	r4, 8009b72 <_malloc_r+0x82>
 8009b24:	4629      	mov	r1, r5
 8009b26:	4638      	mov	r0, r7
 8009b28:	f7ff ffc2 	bl	8009ab0 <sbrk_aligned>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	4604      	mov	r4, r0
 8009b30:	d14d      	bne.n	8009bce <_malloc_r+0xde>
 8009b32:	6834      	ldr	r4, [r6, #0]
 8009b34:	4626      	mov	r6, r4
 8009b36:	2e00      	cmp	r6, #0
 8009b38:	d140      	bne.n	8009bbc <_malloc_r+0xcc>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	4631      	mov	r1, r6
 8009b3e:	4638      	mov	r0, r7
 8009b40:	eb04 0803 	add.w	r8, r4, r3
 8009b44:	f000 fb36 	bl	800a1b4 <_sbrk_r>
 8009b48:	4580      	cmp	r8, r0
 8009b4a:	d13a      	bne.n	8009bc2 <_malloc_r+0xd2>
 8009b4c:	6821      	ldr	r1, [r4, #0]
 8009b4e:	3503      	adds	r5, #3
 8009b50:	1a6d      	subs	r5, r5, r1
 8009b52:	f025 0503 	bic.w	r5, r5, #3
 8009b56:	3508      	adds	r5, #8
 8009b58:	2d0c      	cmp	r5, #12
 8009b5a:	bf38      	it	cc
 8009b5c:	250c      	movcc	r5, #12
 8009b5e:	4629      	mov	r1, r5
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7ff ffa5 	bl	8009ab0 <sbrk_aligned>
 8009b66:	3001      	adds	r0, #1
 8009b68:	d02b      	beq.n	8009bc2 <_malloc_r+0xd2>
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	442b      	add	r3, r5
 8009b6e:	6023      	str	r3, [r4, #0]
 8009b70:	e00e      	b.n	8009b90 <_malloc_r+0xa0>
 8009b72:	6822      	ldr	r2, [r4, #0]
 8009b74:	1b52      	subs	r2, r2, r5
 8009b76:	d41e      	bmi.n	8009bb6 <_malloc_r+0xc6>
 8009b78:	2a0b      	cmp	r2, #11
 8009b7a:	d916      	bls.n	8009baa <_malloc_r+0xba>
 8009b7c:	1961      	adds	r1, r4, r5
 8009b7e:	42a3      	cmp	r3, r4
 8009b80:	6025      	str	r5, [r4, #0]
 8009b82:	bf18      	it	ne
 8009b84:	6059      	strne	r1, [r3, #4]
 8009b86:	6863      	ldr	r3, [r4, #4]
 8009b88:	bf08      	it	eq
 8009b8a:	6031      	streq	r1, [r6, #0]
 8009b8c:	5162      	str	r2, [r4, r5]
 8009b8e:	604b      	str	r3, [r1, #4]
 8009b90:	4638      	mov	r0, r7
 8009b92:	f104 060b 	add.w	r6, r4, #11
 8009b96:	f000 fbbd 	bl	800a314 <__malloc_unlock>
 8009b9a:	f026 0607 	bic.w	r6, r6, #7
 8009b9e:	1d23      	adds	r3, r4, #4
 8009ba0:	1af2      	subs	r2, r6, r3
 8009ba2:	d0b6      	beq.n	8009b12 <_malloc_r+0x22>
 8009ba4:	1b9b      	subs	r3, r3, r6
 8009ba6:	50a3      	str	r3, [r4, r2]
 8009ba8:	e7b3      	b.n	8009b12 <_malloc_r+0x22>
 8009baa:	6862      	ldr	r2, [r4, #4]
 8009bac:	42a3      	cmp	r3, r4
 8009bae:	bf0c      	ite	eq
 8009bb0:	6032      	streq	r2, [r6, #0]
 8009bb2:	605a      	strne	r2, [r3, #4]
 8009bb4:	e7ec      	b.n	8009b90 <_malloc_r+0xa0>
 8009bb6:	4623      	mov	r3, r4
 8009bb8:	6864      	ldr	r4, [r4, #4]
 8009bba:	e7b2      	b.n	8009b22 <_malloc_r+0x32>
 8009bbc:	4634      	mov	r4, r6
 8009bbe:	6876      	ldr	r6, [r6, #4]
 8009bc0:	e7b9      	b.n	8009b36 <_malloc_r+0x46>
 8009bc2:	230c      	movs	r3, #12
 8009bc4:	603b      	str	r3, [r7, #0]
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	f000 fba4 	bl	800a314 <__malloc_unlock>
 8009bcc:	e7a1      	b.n	8009b12 <_malloc_r+0x22>
 8009bce:	6025      	str	r5, [r4, #0]
 8009bd0:	e7de      	b.n	8009b90 <_malloc_r+0xa0>
 8009bd2:	bf00      	nop
 8009bd4:	20013524 	.word	0x20013524

08009bd8 <__sfputc_r>:
 8009bd8:	6893      	ldr	r3, [r2, #8]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	b410      	push	{r4}
 8009be0:	6093      	str	r3, [r2, #8]
 8009be2:	da08      	bge.n	8009bf6 <__sfputc_r+0x1e>
 8009be4:	6994      	ldr	r4, [r2, #24]
 8009be6:	42a3      	cmp	r3, r4
 8009be8:	db01      	blt.n	8009bee <__sfputc_r+0x16>
 8009bea:	290a      	cmp	r1, #10
 8009bec:	d103      	bne.n	8009bf6 <__sfputc_r+0x1e>
 8009bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bf2:	f7ff bc31 	b.w	8009458 <__swbuf_r>
 8009bf6:	6813      	ldr	r3, [r2, #0]
 8009bf8:	1c58      	adds	r0, r3, #1
 8009bfa:	6010      	str	r0, [r2, #0]
 8009bfc:	7019      	strb	r1, [r3, #0]
 8009bfe:	4608      	mov	r0, r1
 8009c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <__sfputs_r>:
 8009c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c08:	4606      	mov	r6, r0
 8009c0a:	460f      	mov	r7, r1
 8009c0c:	4614      	mov	r4, r2
 8009c0e:	18d5      	adds	r5, r2, r3
 8009c10:	42ac      	cmp	r4, r5
 8009c12:	d101      	bne.n	8009c18 <__sfputs_r+0x12>
 8009c14:	2000      	movs	r0, #0
 8009c16:	e007      	b.n	8009c28 <__sfputs_r+0x22>
 8009c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c1c:	463a      	mov	r2, r7
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f7ff ffda 	bl	8009bd8 <__sfputc_r>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d1f3      	bne.n	8009c10 <__sfputs_r+0xa>
 8009c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c2c <_vfiprintf_r>:
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	460d      	mov	r5, r1
 8009c32:	b09d      	sub	sp, #116	; 0x74
 8009c34:	4614      	mov	r4, r2
 8009c36:	4698      	mov	r8, r3
 8009c38:	4606      	mov	r6, r0
 8009c3a:	b118      	cbz	r0, 8009c44 <_vfiprintf_r+0x18>
 8009c3c:	6983      	ldr	r3, [r0, #24]
 8009c3e:	b90b      	cbnz	r3, 8009c44 <_vfiprintf_r+0x18>
 8009c40:	f7ff fde4 	bl	800980c <__sinit>
 8009c44:	4b89      	ldr	r3, [pc, #548]	; (8009e6c <_vfiprintf_r+0x240>)
 8009c46:	429d      	cmp	r5, r3
 8009c48:	d11b      	bne.n	8009c82 <_vfiprintf_r+0x56>
 8009c4a:	6875      	ldr	r5, [r6, #4]
 8009c4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c4e:	07d9      	lsls	r1, r3, #31
 8009c50:	d405      	bmi.n	8009c5e <_vfiprintf_r+0x32>
 8009c52:	89ab      	ldrh	r3, [r5, #12]
 8009c54:	059a      	lsls	r2, r3, #22
 8009c56:	d402      	bmi.n	8009c5e <_vfiprintf_r+0x32>
 8009c58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c5a:	f7ff fe75 	bl	8009948 <__retarget_lock_acquire_recursive>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	071b      	lsls	r3, r3, #28
 8009c62:	d501      	bpl.n	8009c68 <_vfiprintf_r+0x3c>
 8009c64:	692b      	ldr	r3, [r5, #16]
 8009c66:	b9eb      	cbnz	r3, 8009ca4 <_vfiprintf_r+0x78>
 8009c68:	4629      	mov	r1, r5
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7ff fc46 	bl	80094fc <__swsetup_r>
 8009c70:	b1c0      	cbz	r0, 8009ca4 <_vfiprintf_r+0x78>
 8009c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c74:	07dc      	lsls	r4, r3, #31
 8009c76:	d50e      	bpl.n	8009c96 <_vfiprintf_r+0x6a>
 8009c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c7c:	b01d      	add	sp, #116	; 0x74
 8009c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c82:	4b7b      	ldr	r3, [pc, #492]	; (8009e70 <_vfiprintf_r+0x244>)
 8009c84:	429d      	cmp	r5, r3
 8009c86:	d101      	bne.n	8009c8c <_vfiprintf_r+0x60>
 8009c88:	68b5      	ldr	r5, [r6, #8]
 8009c8a:	e7df      	b.n	8009c4c <_vfiprintf_r+0x20>
 8009c8c:	4b79      	ldr	r3, [pc, #484]	; (8009e74 <_vfiprintf_r+0x248>)
 8009c8e:	429d      	cmp	r5, r3
 8009c90:	bf08      	it	eq
 8009c92:	68f5      	ldreq	r5, [r6, #12]
 8009c94:	e7da      	b.n	8009c4c <_vfiprintf_r+0x20>
 8009c96:	89ab      	ldrh	r3, [r5, #12]
 8009c98:	0598      	lsls	r0, r3, #22
 8009c9a:	d4ed      	bmi.n	8009c78 <_vfiprintf_r+0x4c>
 8009c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c9e:	f7ff fe54 	bl	800994a <__retarget_lock_release_recursive>
 8009ca2:	e7e9      	b.n	8009c78 <_vfiprintf_r+0x4c>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8009ca8:	2320      	movs	r3, #32
 8009caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cb2:	2330      	movs	r3, #48	; 0x30
 8009cb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e78 <_vfiprintf_r+0x24c>
 8009cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cbc:	f04f 0901 	mov.w	r9, #1
 8009cc0:	4623      	mov	r3, r4
 8009cc2:	469a      	mov	sl, r3
 8009cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cc8:	b10a      	cbz	r2, 8009cce <_vfiprintf_r+0xa2>
 8009cca:	2a25      	cmp	r2, #37	; 0x25
 8009ccc:	d1f9      	bne.n	8009cc2 <_vfiprintf_r+0x96>
 8009cce:	ebba 0b04 	subs.w	fp, sl, r4
 8009cd2:	d00b      	beq.n	8009cec <_vfiprintf_r+0xc0>
 8009cd4:	465b      	mov	r3, fp
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	4629      	mov	r1, r5
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f7ff ff93 	bl	8009c06 <__sfputs_r>
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	f000 80aa 	beq.w	8009e3a <_vfiprintf_r+0x20e>
 8009ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ce8:	445a      	add	r2, fp
 8009cea:	9209      	str	r2, [sp, #36]	; 0x24
 8009cec:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 80a2 	beq.w	8009e3a <_vfiprintf_r+0x20e>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d00:	f10a 0a01 	add.w	sl, sl, #1
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	9307      	str	r3, [sp, #28]
 8009d08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d0c:	931a      	str	r3, [sp, #104]	; 0x68
 8009d0e:	4654      	mov	r4, sl
 8009d10:	2205      	movs	r2, #5
 8009d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d16:	4858      	ldr	r0, [pc, #352]	; (8009e78 <_vfiprintf_r+0x24c>)
 8009d18:	f7f6 fa72 	bl	8000200 <memchr>
 8009d1c:	9a04      	ldr	r2, [sp, #16]
 8009d1e:	b9d8      	cbnz	r0, 8009d58 <_vfiprintf_r+0x12c>
 8009d20:	06d1      	lsls	r1, r2, #27
 8009d22:	bf44      	itt	mi
 8009d24:	2320      	movmi	r3, #32
 8009d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d2a:	0713      	lsls	r3, r2, #28
 8009d2c:	bf44      	itt	mi
 8009d2e:	232b      	movmi	r3, #43	; 0x2b
 8009d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d34:	f89a 3000 	ldrb.w	r3, [sl]
 8009d38:	2b2a      	cmp	r3, #42	; 0x2a
 8009d3a:	d015      	beq.n	8009d68 <_vfiprintf_r+0x13c>
 8009d3c:	9a07      	ldr	r2, [sp, #28]
 8009d3e:	4654      	mov	r4, sl
 8009d40:	2000      	movs	r0, #0
 8009d42:	f04f 0c0a 	mov.w	ip, #10
 8009d46:	4621      	mov	r1, r4
 8009d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d4c:	3b30      	subs	r3, #48	; 0x30
 8009d4e:	2b09      	cmp	r3, #9
 8009d50:	d94e      	bls.n	8009df0 <_vfiprintf_r+0x1c4>
 8009d52:	b1b0      	cbz	r0, 8009d82 <_vfiprintf_r+0x156>
 8009d54:	9207      	str	r2, [sp, #28]
 8009d56:	e014      	b.n	8009d82 <_vfiprintf_r+0x156>
 8009d58:	eba0 0308 	sub.w	r3, r0, r8
 8009d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d60:	4313      	orrs	r3, r2
 8009d62:	9304      	str	r3, [sp, #16]
 8009d64:	46a2      	mov	sl, r4
 8009d66:	e7d2      	b.n	8009d0e <_vfiprintf_r+0xe2>
 8009d68:	9b03      	ldr	r3, [sp, #12]
 8009d6a:	1d19      	adds	r1, r3, #4
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	9103      	str	r1, [sp, #12]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	bfbb      	ittet	lt
 8009d74:	425b      	neglt	r3, r3
 8009d76:	f042 0202 	orrlt.w	r2, r2, #2
 8009d7a:	9307      	strge	r3, [sp, #28]
 8009d7c:	9307      	strlt	r3, [sp, #28]
 8009d7e:	bfb8      	it	lt
 8009d80:	9204      	strlt	r2, [sp, #16]
 8009d82:	7823      	ldrb	r3, [r4, #0]
 8009d84:	2b2e      	cmp	r3, #46	; 0x2e
 8009d86:	d10c      	bne.n	8009da2 <_vfiprintf_r+0x176>
 8009d88:	7863      	ldrb	r3, [r4, #1]
 8009d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d8c:	d135      	bne.n	8009dfa <_vfiprintf_r+0x1ce>
 8009d8e:	9b03      	ldr	r3, [sp, #12]
 8009d90:	1d1a      	adds	r2, r3, #4
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	9203      	str	r2, [sp, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	bfb8      	it	lt
 8009d9a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d9e:	3402      	adds	r4, #2
 8009da0:	9305      	str	r3, [sp, #20]
 8009da2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e88 <_vfiprintf_r+0x25c>
 8009da6:	7821      	ldrb	r1, [r4, #0]
 8009da8:	2203      	movs	r2, #3
 8009daa:	4650      	mov	r0, sl
 8009dac:	f7f6 fa28 	bl	8000200 <memchr>
 8009db0:	b140      	cbz	r0, 8009dc4 <_vfiprintf_r+0x198>
 8009db2:	2340      	movs	r3, #64	; 0x40
 8009db4:	eba0 000a 	sub.w	r0, r0, sl
 8009db8:	fa03 f000 	lsl.w	r0, r3, r0
 8009dbc:	9b04      	ldr	r3, [sp, #16]
 8009dbe:	4303      	orrs	r3, r0
 8009dc0:	3401      	adds	r4, #1
 8009dc2:	9304      	str	r3, [sp, #16]
 8009dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc8:	482c      	ldr	r0, [pc, #176]	; (8009e7c <_vfiprintf_r+0x250>)
 8009dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dce:	2206      	movs	r2, #6
 8009dd0:	f7f6 fa16 	bl	8000200 <memchr>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d03f      	beq.n	8009e58 <_vfiprintf_r+0x22c>
 8009dd8:	4b29      	ldr	r3, [pc, #164]	; (8009e80 <_vfiprintf_r+0x254>)
 8009dda:	bb1b      	cbnz	r3, 8009e24 <_vfiprintf_r+0x1f8>
 8009ddc:	9b03      	ldr	r3, [sp, #12]
 8009dde:	3307      	adds	r3, #7
 8009de0:	f023 0307 	bic.w	r3, r3, #7
 8009de4:	3308      	adds	r3, #8
 8009de6:	9303      	str	r3, [sp, #12]
 8009de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dea:	443b      	add	r3, r7
 8009dec:	9309      	str	r3, [sp, #36]	; 0x24
 8009dee:	e767      	b.n	8009cc0 <_vfiprintf_r+0x94>
 8009df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009df4:	460c      	mov	r4, r1
 8009df6:	2001      	movs	r0, #1
 8009df8:	e7a5      	b.n	8009d46 <_vfiprintf_r+0x11a>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	3401      	adds	r4, #1
 8009dfe:	9305      	str	r3, [sp, #20]
 8009e00:	4619      	mov	r1, r3
 8009e02:	f04f 0c0a 	mov.w	ip, #10
 8009e06:	4620      	mov	r0, r4
 8009e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e0c:	3a30      	subs	r2, #48	; 0x30
 8009e0e:	2a09      	cmp	r2, #9
 8009e10:	d903      	bls.n	8009e1a <_vfiprintf_r+0x1ee>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0c5      	beq.n	8009da2 <_vfiprintf_r+0x176>
 8009e16:	9105      	str	r1, [sp, #20]
 8009e18:	e7c3      	b.n	8009da2 <_vfiprintf_r+0x176>
 8009e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e1e:	4604      	mov	r4, r0
 8009e20:	2301      	movs	r3, #1
 8009e22:	e7f0      	b.n	8009e06 <_vfiprintf_r+0x1da>
 8009e24:	ab03      	add	r3, sp, #12
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	462a      	mov	r2, r5
 8009e2a:	4b16      	ldr	r3, [pc, #88]	; (8009e84 <_vfiprintf_r+0x258>)
 8009e2c:	a904      	add	r1, sp, #16
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f3af 8000 	nop.w
 8009e34:	4607      	mov	r7, r0
 8009e36:	1c78      	adds	r0, r7, #1
 8009e38:	d1d6      	bne.n	8009de8 <_vfiprintf_r+0x1bc>
 8009e3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e3c:	07d9      	lsls	r1, r3, #31
 8009e3e:	d405      	bmi.n	8009e4c <_vfiprintf_r+0x220>
 8009e40:	89ab      	ldrh	r3, [r5, #12]
 8009e42:	059a      	lsls	r2, r3, #22
 8009e44:	d402      	bmi.n	8009e4c <_vfiprintf_r+0x220>
 8009e46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e48:	f7ff fd7f 	bl	800994a <__retarget_lock_release_recursive>
 8009e4c:	89ab      	ldrh	r3, [r5, #12]
 8009e4e:	065b      	lsls	r3, r3, #25
 8009e50:	f53f af12 	bmi.w	8009c78 <_vfiprintf_r+0x4c>
 8009e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e56:	e711      	b.n	8009c7c <_vfiprintf_r+0x50>
 8009e58:	ab03      	add	r3, sp, #12
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	462a      	mov	r2, r5
 8009e5e:	4b09      	ldr	r3, [pc, #36]	; (8009e84 <_vfiprintf_r+0x258>)
 8009e60:	a904      	add	r1, sp, #16
 8009e62:	4630      	mov	r0, r6
 8009e64:	f000 f880 	bl	8009f68 <_printf_i>
 8009e68:	e7e4      	b.n	8009e34 <_vfiprintf_r+0x208>
 8009e6a:	bf00      	nop
 8009e6c:	0800a6ec 	.word	0x0800a6ec
 8009e70:	0800a70c 	.word	0x0800a70c
 8009e74:	0800a6cc 	.word	0x0800a6cc
 8009e78:	0800a72c 	.word	0x0800a72c
 8009e7c:	0800a736 	.word	0x0800a736
 8009e80:	00000000 	.word	0x00000000
 8009e84:	08009c07 	.word	0x08009c07
 8009e88:	0800a732 	.word	0x0800a732

08009e8c <_printf_common>:
 8009e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e90:	4616      	mov	r6, r2
 8009e92:	4699      	mov	r9, r3
 8009e94:	688a      	ldr	r2, [r1, #8]
 8009e96:	690b      	ldr	r3, [r1, #16]
 8009e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	bfb8      	it	lt
 8009ea0:	4613      	movlt	r3, r2
 8009ea2:	6033      	str	r3, [r6, #0]
 8009ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ea8:	4607      	mov	r7, r0
 8009eaa:	460c      	mov	r4, r1
 8009eac:	b10a      	cbz	r2, 8009eb2 <_printf_common+0x26>
 8009eae:	3301      	adds	r3, #1
 8009eb0:	6033      	str	r3, [r6, #0]
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	0699      	lsls	r1, r3, #26
 8009eb6:	bf42      	ittt	mi
 8009eb8:	6833      	ldrmi	r3, [r6, #0]
 8009eba:	3302      	addmi	r3, #2
 8009ebc:	6033      	strmi	r3, [r6, #0]
 8009ebe:	6825      	ldr	r5, [r4, #0]
 8009ec0:	f015 0506 	ands.w	r5, r5, #6
 8009ec4:	d106      	bne.n	8009ed4 <_printf_common+0x48>
 8009ec6:	f104 0a19 	add.w	sl, r4, #25
 8009eca:	68e3      	ldr	r3, [r4, #12]
 8009ecc:	6832      	ldr	r2, [r6, #0]
 8009ece:	1a9b      	subs	r3, r3, r2
 8009ed0:	42ab      	cmp	r3, r5
 8009ed2:	dc26      	bgt.n	8009f22 <_printf_common+0x96>
 8009ed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ed8:	1e13      	subs	r3, r2, #0
 8009eda:	6822      	ldr	r2, [r4, #0]
 8009edc:	bf18      	it	ne
 8009ede:	2301      	movne	r3, #1
 8009ee0:	0692      	lsls	r2, r2, #26
 8009ee2:	d42b      	bmi.n	8009f3c <_printf_common+0xb0>
 8009ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ee8:	4649      	mov	r1, r9
 8009eea:	4638      	mov	r0, r7
 8009eec:	47c0      	blx	r8
 8009eee:	3001      	adds	r0, #1
 8009ef0:	d01e      	beq.n	8009f30 <_printf_common+0xa4>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	68e5      	ldr	r5, [r4, #12]
 8009ef6:	6832      	ldr	r2, [r6, #0]
 8009ef8:	f003 0306 	and.w	r3, r3, #6
 8009efc:	2b04      	cmp	r3, #4
 8009efe:	bf08      	it	eq
 8009f00:	1aad      	subeq	r5, r5, r2
 8009f02:	68a3      	ldr	r3, [r4, #8]
 8009f04:	6922      	ldr	r2, [r4, #16]
 8009f06:	bf0c      	ite	eq
 8009f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f0c:	2500      	movne	r5, #0
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	bfc4      	itt	gt
 8009f12:	1a9b      	subgt	r3, r3, r2
 8009f14:	18ed      	addgt	r5, r5, r3
 8009f16:	2600      	movs	r6, #0
 8009f18:	341a      	adds	r4, #26
 8009f1a:	42b5      	cmp	r5, r6
 8009f1c:	d11a      	bne.n	8009f54 <_printf_common+0xc8>
 8009f1e:	2000      	movs	r0, #0
 8009f20:	e008      	b.n	8009f34 <_printf_common+0xa8>
 8009f22:	2301      	movs	r3, #1
 8009f24:	4652      	mov	r2, sl
 8009f26:	4649      	mov	r1, r9
 8009f28:	4638      	mov	r0, r7
 8009f2a:	47c0      	blx	r8
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	d103      	bne.n	8009f38 <_printf_common+0xac>
 8009f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f38:	3501      	adds	r5, #1
 8009f3a:	e7c6      	b.n	8009eca <_printf_common+0x3e>
 8009f3c:	18e1      	adds	r1, r4, r3
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	2030      	movs	r0, #48	; 0x30
 8009f42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f46:	4422      	add	r2, r4
 8009f48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f50:	3302      	adds	r3, #2
 8009f52:	e7c7      	b.n	8009ee4 <_printf_common+0x58>
 8009f54:	2301      	movs	r3, #1
 8009f56:	4622      	mov	r2, r4
 8009f58:	4649      	mov	r1, r9
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	47c0      	blx	r8
 8009f5e:	3001      	adds	r0, #1
 8009f60:	d0e6      	beq.n	8009f30 <_printf_common+0xa4>
 8009f62:	3601      	adds	r6, #1
 8009f64:	e7d9      	b.n	8009f1a <_printf_common+0x8e>
	...

08009f68 <_printf_i>:
 8009f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6c:	7e0f      	ldrb	r7, [r1, #24]
 8009f6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f70:	2f78      	cmp	r7, #120	; 0x78
 8009f72:	4691      	mov	r9, r2
 8009f74:	4680      	mov	r8, r0
 8009f76:	460c      	mov	r4, r1
 8009f78:	469a      	mov	sl, r3
 8009f7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f7e:	d807      	bhi.n	8009f90 <_printf_i+0x28>
 8009f80:	2f62      	cmp	r7, #98	; 0x62
 8009f82:	d80a      	bhi.n	8009f9a <_printf_i+0x32>
 8009f84:	2f00      	cmp	r7, #0
 8009f86:	f000 80d8 	beq.w	800a13a <_printf_i+0x1d2>
 8009f8a:	2f58      	cmp	r7, #88	; 0x58
 8009f8c:	f000 80a3 	beq.w	800a0d6 <_printf_i+0x16e>
 8009f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f98:	e03a      	b.n	800a010 <_printf_i+0xa8>
 8009f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f9e:	2b15      	cmp	r3, #21
 8009fa0:	d8f6      	bhi.n	8009f90 <_printf_i+0x28>
 8009fa2:	a101      	add	r1, pc, #4	; (adr r1, 8009fa8 <_printf_i+0x40>)
 8009fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fa8:	0800a001 	.word	0x0800a001
 8009fac:	0800a015 	.word	0x0800a015
 8009fb0:	08009f91 	.word	0x08009f91
 8009fb4:	08009f91 	.word	0x08009f91
 8009fb8:	08009f91 	.word	0x08009f91
 8009fbc:	08009f91 	.word	0x08009f91
 8009fc0:	0800a015 	.word	0x0800a015
 8009fc4:	08009f91 	.word	0x08009f91
 8009fc8:	08009f91 	.word	0x08009f91
 8009fcc:	08009f91 	.word	0x08009f91
 8009fd0:	08009f91 	.word	0x08009f91
 8009fd4:	0800a121 	.word	0x0800a121
 8009fd8:	0800a045 	.word	0x0800a045
 8009fdc:	0800a103 	.word	0x0800a103
 8009fe0:	08009f91 	.word	0x08009f91
 8009fe4:	08009f91 	.word	0x08009f91
 8009fe8:	0800a143 	.word	0x0800a143
 8009fec:	08009f91 	.word	0x08009f91
 8009ff0:	0800a045 	.word	0x0800a045
 8009ff4:	08009f91 	.word	0x08009f91
 8009ff8:	08009f91 	.word	0x08009f91
 8009ffc:	0800a10b 	.word	0x0800a10b
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	1d1a      	adds	r2, r3, #4
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	602a      	str	r2, [r5, #0]
 800a008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a00c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a010:	2301      	movs	r3, #1
 800a012:	e0a3      	b.n	800a15c <_printf_i+0x1f4>
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	6829      	ldr	r1, [r5, #0]
 800a018:	0606      	lsls	r6, r0, #24
 800a01a:	f101 0304 	add.w	r3, r1, #4
 800a01e:	d50a      	bpl.n	800a036 <_printf_i+0xce>
 800a020:	680e      	ldr	r6, [r1, #0]
 800a022:	602b      	str	r3, [r5, #0]
 800a024:	2e00      	cmp	r6, #0
 800a026:	da03      	bge.n	800a030 <_printf_i+0xc8>
 800a028:	232d      	movs	r3, #45	; 0x2d
 800a02a:	4276      	negs	r6, r6
 800a02c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a030:	485e      	ldr	r0, [pc, #376]	; (800a1ac <_printf_i+0x244>)
 800a032:	230a      	movs	r3, #10
 800a034:	e019      	b.n	800a06a <_printf_i+0x102>
 800a036:	680e      	ldr	r6, [r1, #0]
 800a038:	602b      	str	r3, [r5, #0]
 800a03a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a03e:	bf18      	it	ne
 800a040:	b236      	sxthne	r6, r6
 800a042:	e7ef      	b.n	800a024 <_printf_i+0xbc>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	6820      	ldr	r0, [r4, #0]
 800a048:	1d19      	adds	r1, r3, #4
 800a04a:	6029      	str	r1, [r5, #0]
 800a04c:	0601      	lsls	r1, r0, #24
 800a04e:	d501      	bpl.n	800a054 <_printf_i+0xec>
 800a050:	681e      	ldr	r6, [r3, #0]
 800a052:	e002      	b.n	800a05a <_printf_i+0xf2>
 800a054:	0646      	lsls	r6, r0, #25
 800a056:	d5fb      	bpl.n	800a050 <_printf_i+0xe8>
 800a058:	881e      	ldrh	r6, [r3, #0]
 800a05a:	4854      	ldr	r0, [pc, #336]	; (800a1ac <_printf_i+0x244>)
 800a05c:	2f6f      	cmp	r7, #111	; 0x6f
 800a05e:	bf0c      	ite	eq
 800a060:	2308      	moveq	r3, #8
 800a062:	230a      	movne	r3, #10
 800a064:	2100      	movs	r1, #0
 800a066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a06a:	6865      	ldr	r5, [r4, #4]
 800a06c:	60a5      	str	r5, [r4, #8]
 800a06e:	2d00      	cmp	r5, #0
 800a070:	bfa2      	ittt	ge
 800a072:	6821      	ldrge	r1, [r4, #0]
 800a074:	f021 0104 	bicge.w	r1, r1, #4
 800a078:	6021      	strge	r1, [r4, #0]
 800a07a:	b90e      	cbnz	r6, 800a080 <_printf_i+0x118>
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	d04d      	beq.n	800a11c <_printf_i+0x1b4>
 800a080:	4615      	mov	r5, r2
 800a082:	fbb6 f1f3 	udiv	r1, r6, r3
 800a086:	fb03 6711 	mls	r7, r3, r1, r6
 800a08a:	5dc7      	ldrb	r7, [r0, r7]
 800a08c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a090:	4637      	mov	r7, r6
 800a092:	42bb      	cmp	r3, r7
 800a094:	460e      	mov	r6, r1
 800a096:	d9f4      	bls.n	800a082 <_printf_i+0x11a>
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d10b      	bne.n	800a0b4 <_printf_i+0x14c>
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	07de      	lsls	r6, r3, #31
 800a0a0:	d508      	bpl.n	800a0b4 <_printf_i+0x14c>
 800a0a2:	6923      	ldr	r3, [r4, #16]
 800a0a4:	6861      	ldr	r1, [r4, #4]
 800a0a6:	4299      	cmp	r1, r3
 800a0a8:	bfde      	ittt	le
 800a0aa:	2330      	movle	r3, #48	; 0x30
 800a0ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a0b4:	1b52      	subs	r2, r2, r5
 800a0b6:	6122      	str	r2, [r4, #16]
 800a0b8:	f8cd a000 	str.w	sl, [sp]
 800a0bc:	464b      	mov	r3, r9
 800a0be:	aa03      	add	r2, sp, #12
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	4640      	mov	r0, r8
 800a0c4:	f7ff fee2 	bl	8009e8c <_printf_common>
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	d14c      	bne.n	800a166 <_printf_i+0x1fe>
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0d0:	b004      	add	sp, #16
 800a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d6:	4835      	ldr	r0, [pc, #212]	; (800a1ac <_printf_i+0x244>)
 800a0d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0dc:	6829      	ldr	r1, [r5, #0]
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0e4:	6029      	str	r1, [r5, #0]
 800a0e6:	061d      	lsls	r5, r3, #24
 800a0e8:	d514      	bpl.n	800a114 <_printf_i+0x1ac>
 800a0ea:	07df      	lsls	r7, r3, #31
 800a0ec:	bf44      	itt	mi
 800a0ee:	f043 0320 	orrmi.w	r3, r3, #32
 800a0f2:	6023      	strmi	r3, [r4, #0]
 800a0f4:	b91e      	cbnz	r6, 800a0fe <_printf_i+0x196>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	f023 0320 	bic.w	r3, r3, #32
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	2310      	movs	r3, #16
 800a100:	e7b0      	b.n	800a064 <_printf_i+0xfc>
 800a102:	6823      	ldr	r3, [r4, #0]
 800a104:	f043 0320 	orr.w	r3, r3, #32
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	2378      	movs	r3, #120	; 0x78
 800a10c:	4828      	ldr	r0, [pc, #160]	; (800a1b0 <_printf_i+0x248>)
 800a10e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a112:	e7e3      	b.n	800a0dc <_printf_i+0x174>
 800a114:	0659      	lsls	r1, r3, #25
 800a116:	bf48      	it	mi
 800a118:	b2b6      	uxthmi	r6, r6
 800a11a:	e7e6      	b.n	800a0ea <_printf_i+0x182>
 800a11c:	4615      	mov	r5, r2
 800a11e:	e7bb      	b.n	800a098 <_printf_i+0x130>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	6826      	ldr	r6, [r4, #0]
 800a124:	6961      	ldr	r1, [r4, #20]
 800a126:	1d18      	adds	r0, r3, #4
 800a128:	6028      	str	r0, [r5, #0]
 800a12a:	0635      	lsls	r5, r6, #24
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	d501      	bpl.n	800a134 <_printf_i+0x1cc>
 800a130:	6019      	str	r1, [r3, #0]
 800a132:	e002      	b.n	800a13a <_printf_i+0x1d2>
 800a134:	0670      	lsls	r0, r6, #25
 800a136:	d5fb      	bpl.n	800a130 <_printf_i+0x1c8>
 800a138:	8019      	strh	r1, [r3, #0]
 800a13a:	2300      	movs	r3, #0
 800a13c:	6123      	str	r3, [r4, #16]
 800a13e:	4615      	mov	r5, r2
 800a140:	e7ba      	b.n	800a0b8 <_printf_i+0x150>
 800a142:	682b      	ldr	r3, [r5, #0]
 800a144:	1d1a      	adds	r2, r3, #4
 800a146:	602a      	str	r2, [r5, #0]
 800a148:	681d      	ldr	r5, [r3, #0]
 800a14a:	6862      	ldr	r2, [r4, #4]
 800a14c:	2100      	movs	r1, #0
 800a14e:	4628      	mov	r0, r5
 800a150:	f7f6 f856 	bl	8000200 <memchr>
 800a154:	b108      	cbz	r0, 800a15a <_printf_i+0x1f2>
 800a156:	1b40      	subs	r0, r0, r5
 800a158:	6060      	str	r0, [r4, #4]
 800a15a:	6863      	ldr	r3, [r4, #4]
 800a15c:	6123      	str	r3, [r4, #16]
 800a15e:	2300      	movs	r3, #0
 800a160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a164:	e7a8      	b.n	800a0b8 <_printf_i+0x150>
 800a166:	6923      	ldr	r3, [r4, #16]
 800a168:	462a      	mov	r2, r5
 800a16a:	4649      	mov	r1, r9
 800a16c:	4640      	mov	r0, r8
 800a16e:	47d0      	blx	sl
 800a170:	3001      	adds	r0, #1
 800a172:	d0ab      	beq.n	800a0cc <_printf_i+0x164>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	079b      	lsls	r3, r3, #30
 800a178:	d413      	bmi.n	800a1a2 <_printf_i+0x23a>
 800a17a:	68e0      	ldr	r0, [r4, #12]
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	4298      	cmp	r0, r3
 800a180:	bfb8      	it	lt
 800a182:	4618      	movlt	r0, r3
 800a184:	e7a4      	b.n	800a0d0 <_printf_i+0x168>
 800a186:	2301      	movs	r3, #1
 800a188:	4632      	mov	r2, r6
 800a18a:	4649      	mov	r1, r9
 800a18c:	4640      	mov	r0, r8
 800a18e:	47d0      	blx	sl
 800a190:	3001      	adds	r0, #1
 800a192:	d09b      	beq.n	800a0cc <_printf_i+0x164>
 800a194:	3501      	adds	r5, #1
 800a196:	68e3      	ldr	r3, [r4, #12]
 800a198:	9903      	ldr	r1, [sp, #12]
 800a19a:	1a5b      	subs	r3, r3, r1
 800a19c:	42ab      	cmp	r3, r5
 800a19e:	dcf2      	bgt.n	800a186 <_printf_i+0x21e>
 800a1a0:	e7eb      	b.n	800a17a <_printf_i+0x212>
 800a1a2:	2500      	movs	r5, #0
 800a1a4:	f104 0619 	add.w	r6, r4, #25
 800a1a8:	e7f5      	b.n	800a196 <_printf_i+0x22e>
 800a1aa:	bf00      	nop
 800a1ac:	0800a73d 	.word	0x0800a73d
 800a1b0:	0800a74e 	.word	0x0800a74e

0800a1b4 <_sbrk_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d06      	ldr	r5, [pc, #24]	; (800a1d0 <_sbrk_r+0x1c>)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	4608      	mov	r0, r1
 800a1be:	602b      	str	r3, [r5, #0]
 800a1c0:	f7f7 fe00 	bl	8001dc4 <_sbrk>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	d102      	bne.n	800a1ce <_sbrk_r+0x1a>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	b103      	cbz	r3, 800a1ce <_sbrk_r+0x1a>
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	bd38      	pop	{r3, r4, r5, pc}
 800a1d0:	2001352c 	.word	0x2001352c

0800a1d4 <__sread>:
 800a1d4:	b510      	push	{r4, lr}
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1dc:	f000 f8a0 	bl	800a320 <_read_r>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	bfab      	itete	ge
 800a1e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a1e8:	181b      	addge	r3, r3, r0
 800a1ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1ee:	bfac      	ite	ge
 800a1f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1f2:	81a3      	strhlt	r3, [r4, #12]
 800a1f4:	bd10      	pop	{r4, pc}

0800a1f6 <__swrite>:
 800a1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fa:	461f      	mov	r7, r3
 800a1fc:	898b      	ldrh	r3, [r1, #12]
 800a1fe:	05db      	lsls	r3, r3, #23
 800a200:	4605      	mov	r5, r0
 800a202:	460c      	mov	r4, r1
 800a204:	4616      	mov	r6, r2
 800a206:	d505      	bpl.n	800a214 <__swrite+0x1e>
 800a208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a20c:	2302      	movs	r3, #2
 800a20e:	2200      	movs	r2, #0
 800a210:	f000 f868 	bl	800a2e4 <_lseek_r>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a21a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a21e:	81a3      	strh	r3, [r4, #12]
 800a220:	4632      	mov	r2, r6
 800a222:	463b      	mov	r3, r7
 800a224:	4628      	mov	r0, r5
 800a226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a22a:	f000 b817 	b.w	800a25c <_write_r>

0800a22e <__sseek>:
 800a22e:	b510      	push	{r4, lr}
 800a230:	460c      	mov	r4, r1
 800a232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a236:	f000 f855 	bl	800a2e4 <_lseek_r>
 800a23a:	1c43      	adds	r3, r0, #1
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	bf15      	itete	ne
 800a240:	6560      	strne	r0, [r4, #84]	; 0x54
 800a242:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a246:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a24a:	81a3      	strheq	r3, [r4, #12]
 800a24c:	bf18      	it	ne
 800a24e:	81a3      	strhne	r3, [r4, #12]
 800a250:	bd10      	pop	{r4, pc}

0800a252 <__sclose>:
 800a252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a256:	f000 b813 	b.w	800a280 <_close_r>
	...

0800a25c <_write_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d07      	ldr	r5, [pc, #28]	; (800a27c <_write_r+0x20>)
 800a260:	4604      	mov	r4, r0
 800a262:	4608      	mov	r0, r1
 800a264:	4611      	mov	r1, r2
 800a266:	2200      	movs	r2, #0
 800a268:	602a      	str	r2, [r5, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	f7f7 fd59 	bl	8001d22 <_write>
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	d102      	bne.n	800a27a <_write_r+0x1e>
 800a274:	682b      	ldr	r3, [r5, #0]
 800a276:	b103      	cbz	r3, 800a27a <_write_r+0x1e>
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	bd38      	pop	{r3, r4, r5, pc}
 800a27c:	2001352c 	.word	0x2001352c

0800a280 <_close_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d06      	ldr	r5, [pc, #24]	; (800a29c <_close_r+0x1c>)
 800a284:	2300      	movs	r3, #0
 800a286:	4604      	mov	r4, r0
 800a288:	4608      	mov	r0, r1
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	f7f7 fd65 	bl	8001d5a <_close>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_close_r+0x1a>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_close_r+0x1a>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	2001352c 	.word	0x2001352c

0800a2a0 <_fstat_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4d07      	ldr	r5, [pc, #28]	; (800a2c0 <_fstat_r+0x20>)
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	602b      	str	r3, [r5, #0]
 800a2ae:	f7f7 fd60 	bl	8001d72 <_fstat>
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	d102      	bne.n	800a2bc <_fstat_r+0x1c>
 800a2b6:	682b      	ldr	r3, [r5, #0]
 800a2b8:	b103      	cbz	r3, 800a2bc <_fstat_r+0x1c>
 800a2ba:	6023      	str	r3, [r4, #0]
 800a2bc:	bd38      	pop	{r3, r4, r5, pc}
 800a2be:	bf00      	nop
 800a2c0:	2001352c 	.word	0x2001352c

0800a2c4 <_isatty_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	4d06      	ldr	r5, [pc, #24]	; (800a2e0 <_isatty_r+0x1c>)
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	602b      	str	r3, [r5, #0]
 800a2d0:	f7f7 fd5f 	bl	8001d92 <_isatty>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_isatty_r+0x1a>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_isatty_r+0x1a>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	2001352c 	.word	0x2001352c

0800a2e4 <_lseek_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d07      	ldr	r5, [pc, #28]	; (800a304 <_lseek_r+0x20>)
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	602a      	str	r2, [r5, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f7f7 fd58 	bl	8001da8 <_lseek>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d102      	bne.n	800a302 <_lseek_r+0x1e>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	b103      	cbz	r3, 800a302 <_lseek_r+0x1e>
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	2001352c 	.word	0x2001352c

0800a308 <__malloc_lock>:
 800a308:	4801      	ldr	r0, [pc, #4]	; (800a310 <__malloc_lock+0x8>)
 800a30a:	f7ff bb1d 	b.w	8009948 <__retarget_lock_acquire_recursive>
 800a30e:	bf00      	nop
 800a310:	20013520 	.word	0x20013520

0800a314 <__malloc_unlock>:
 800a314:	4801      	ldr	r0, [pc, #4]	; (800a31c <__malloc_unlock+0x8>)
 800a316:	f7ff bb18 	b.w	800994a <__retarget_lock_release_recursive>
 800a31a:	bf00      	nop
 800a31c:	20013520 	.word	0x20013520

0800a320 <_read_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4d07      	ldr	r5, [pc, #28]	; (800a340 <_read_r+0x20>)
 800a324:	4604      	mov	r4, r0
 800a326:	4608      	mov	r0, r1
 800a328:	4611      	mov	r1, r2
 800a32a:	2200      	movs	r2, #0
 800a32c:	602a      	str	r2, [r5, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	f7f7 fcda 	bl	8001ce8 <_read>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d102      	bne.n	800a33e <_read_r+0x1e>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	b103      	cbz	r3, 800a33e <_read_r+0x1e>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	2001352c 	.word	0x2001352c

0800a344 <_init>:
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a346:	bf00      	nop
 800a348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34a:	bc08      	pop	{r3}
 800a34c:	469e      	mov	lr, r3
 800a34e:	4770      	bx	lr

0800a350 <_fini>:
 800a350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a352:	bf00      	nop
 800a354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a356:	bc08      	pop	{r3}
 800a358:	469e      	mov	lr, r3
 800a35a:	4770      	bx	lr
