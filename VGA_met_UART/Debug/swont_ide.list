
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007140  0800a968  0800a968  0001a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011aa8  08011aa8  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08011aa8  08011aa8  00021aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ab0  08011ab0  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ab0  08011ab0  00021ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ab4  08011ab4  00021ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08011ab8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013700  20000088  08011b40  00030088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013788  08011b40  00033788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e4e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003944  00000000  00000000  00047f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0004b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0004cc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b51  00000000  00000000  0004de48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db95  00000000  00000000  00074999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1401  00000000  00000000  0009252e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016392f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a30  00000000  00000000  00163980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a950 	.word	0x0800a950

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a950 	.word	0x0800a950

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006cc:	f000 b974 	b.w	80009b8 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9d08      	ldr	r5, [sp, #32]
 80006ee:	4604      	mov	r4, r0
 80006f0:	468e      	mov	lr, r1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14d      	bne.n	8000792 <__udivmoddi4+0xaa>
 80006f6:	428a      	cmp	r2, r1
 80006f8:	4694      	mov	ip, r2
 80006fa:	d969      	bls.n	80007d0 <__udivmoddi4+0xe8>
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	b152      	cbz	r2, 8000718 <__udivmoddi4+0x30>
 8000702:	fa01 f302 	lsl.w	r3, r1, r2
 8000706:	f1c2 0120 	rsb	r1, r2, #32
 800070a:	fa20 f101 	lsr.w	r1, r0, r1
 800070e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000712:	ea41 0e03 	orr.w	lr, r1, r3
 8000716:	4094      	lsls	r4, r2
 8000718:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800071c:	0c21      	lsrs	r1, r4, #16
 800071e:	fbbe f6f8 	udiv	r6, lr, r8
 8000722:	fa1f f78c 	uxth.w	r7, ip
 8000726:	fb08 e316 	mls	r3, r8, r6, lr
 800072a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800072e:	fb06 f107 	mul.w	r1, r6, r7
 8000732:	4299      	cmp	r1, r3
 8000734:	d90a      	bls.n	800074c <__udivmoddi4+0x64>
 8000736:	eb1c 0303 	adds.w	r3, ip, r3
 800073a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800073e:	f080 811f 	bcs.w	8000980 <__udivmoddi4+0x298>
 8000742:	4299      	cmp	r1, r3
 8000744:	f240 811c 	bls.w	8000980 <__udivmoddi4+0x298>
 8000748:	3e02      	subs	r6, #2
 800074a:	4463      	add	r3, ip
 800074c:	1a5b      	subs	r3, r3, r1
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb3 f0f8 	udiv	r0, r3, r8
 8000754:	fb08 3310 	mls	r3, r8, r0, r3
 8000758:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800075c:	fb00 f707 	mul.w	r7, r0, r7
 8000760:	42a7      	cmp	r7, r4
 8000762:	d90a      	bls.n	800077a <__udivmoddi4+0x92>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800076c:	f080 810a 	bcs.w	8000984 <__udivmoddi4+0x29c>
 8000770:	42a7      	cmp	r7, r4
 8000772:	f240 8107 	bls.w	8000984 <__udivmoddi4+0x29c>
 8000776:	4464      	add	r4, ip
 8000778:	3802      	subs	r0, #2
 800077a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800077e:	1be4      	subs	r4, r4, r7
 8000780:	2600      	movs	r6, #0
 8000782:	b11d      	cbz	r5, 800078c <__udivmoddi4+0xa4>
 8000784:	40d4      	lsrs	r4, r2
 8000786:	2300      	movs	r3, #0
 8000788:	e9c5 4300 	strd	r4, r3, [r5]
 800078c:	4631      	mov	r1, r6
 800078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000792:	428b      	cmp	r3, r1
 8000794:	d909      	bls.n	80007aa <__udivmoddi4+0xc2>
 8000796:	2d00      	cmp	r5, #0
 8000798:	f000 80ef 	beq.w	800097a <__udivmoddi4+0x292>
 800079c:	2600      	movs	r6, #0
 800079e:	e9c5 0100 	strd	r0, r1, [r5]
 80007a2:	4630      	mov	r0, r6
 80007a4:	4631      	mov	r1, r6
 80007a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007aa:	fab3 f683 	clz	r6, r3
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d14a      	bne.n	8000848 <__udivmoddi4+0x160>
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d302      	bcc.n	80007bc <__udivmoddi4+0xd4>
 80007b6:	4282      	cmp	r2, r0
 80007b8:	f200 80f9 	bhi.w	80009ae <__udivmoddi4+0x2c6>
 80007bc:	1a84      	subs	r4, r0, r2
 80007be:	eb61 0303 	sbc.w	r3, r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	469e      	mov	lr, r3
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d0e0      	beq.n	800078c <__udivmoddi4+0xa4>
 80007ca:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ce:	e7dd      	b.n	800078c <__udivmoddi4+0xa4>
 80007d0:	b902      	cbnz	r2, 80007d4 <__udivmoddi4+0xec>
 80007d2:	deff      	udf	#255	; 0xff
 80007d4:	fab2 f282 	clz	r2, r2
 80007d8:	2a00      	cmp	r2, #0
 80007da:	f040 8092 	bne.w	8000902 <__udivmoddi4+0x21a>
 80007de:	eba1 010c 	sub.w	r1, r1, ip
 80007e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007e6:	fa1f fe8c 	uxth.w	lr, ip
 80007ea:	2601      	movs	r6, #1
 80007ec:	0c20      	lsrs	r0, r4, #16
 80007ee:	fbb1 f3f7 	udiv	r3, r1, r7
 80007f2:	fb07 1113 	mls	r1, r7, r3, r1
 80007f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fa:	fb0e f003 	mul.w	r0, lr, r3
 80007fe:	4288      	cmp	r0, r1
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x12c>
 8000802:	eb1c 0101 	adds.w	r1, ip, r1
 8000806:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x12a>
 800080c:	4288      	cmp	r0, r1
 800080e:	f200 80cb 	bhi.w	80009a8 <__udivmoddi4+0x2c0>
 8000812:	4643      	mov	r3, r8
 8000814:	1a09      	subs	r1, r1, r0
 8000816:	b2a4      	uxth	r4, r4
 8000818:	fbb1 f0f7 	udiv	r0, r1, r7
 800081c:	fb07 1110 	mls	r1, r7, r0, r1
 8000820:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000824:	fb0e fe00 	mul.w	lr, lr, r0
 8000828:	45a6      	cmp	lr, r4
 800082a:	d908      	bls.n	800083e <__udivmoddi4+0x156>
 800082c:	eb1c 0404 	adds.w	r4, ip, r4
 8000830:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000834:	d202      	bcs.n	800083c <__udivmoddi4+0x154>
 8000836:	45a6      	cmp	lr, r4
 8000838:	f200 80bb 	bhi.w	80009b2 <__udivmoddi4+0x2ca>
 800083c:	4608      	mov	r0, r1
 800083e:	eba4 040e 	sub.w	r4, r4, lr
 8000842:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000846:	e79c      	b.n	8000782 <__udivmoddi4+0x9a>
 8000848:	f1c6 0720 	rsb	r7, r6, #32
 800084c:	40b3      	lsls	r3, r6
 800084e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000852:	ea4c 0c03 	orr.w	ip, ip, r3
 8000856:	fa20 f407 	lsr.w	r4, r0, r7
 800085a:	fa01 f306 	lsl.w	r3, r1, r6
 800085e:	431c      	orrs	r4, r3
 8000860:	40f9      	lsrs	r1, r7
 8000862:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000866:	fa00 f306 	lsl.w	r3, r0, r6
 800086a:	fbb1 f8f9 	udiv	r8, r1, r9
 800086e:	0c20      	lsrs	r0, r4, #16
 8000870:	fa1f fe8c 	uxth.w	lr, ip
 8000874:	fb09 1118 	mls	r1, r9, r8, r1
 8000878:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800087c:	fb08 f00e 	mul.w	r0, r8, lr
 8000880:	4288      	cmp	r0, r1
 8000882:	fa02 f206 	lsl.w	r2, r2, r6
 8000886:	d90b      	bls.n	80008a0 <__udivmoddi4+0x1b8>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000890:	f080 8088 	bcs.w	80009a4 <__udivmoddi4+0x2bc>
 8000894:	4288      	cmp	r0, r1
 8000896:	f240 8085 	bls.w	80009a4 <__udivmoddi4+0x2bc>
 800089a:	f1a8 0802 	sub.w	r8, r8, #2
 800089e:	4461      	add	r1, ip
 80008a0:	1a09      	subs	r1, r1, r0
 80008a2:	b2a4      	uxth	r4, r4
 80008a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008a8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008b4:	458e      	cmp	lr, r1
 80008b6:	d908      	bls.n	80008ca <__udivmoddi4+0x1e2>
 80008b8:	eb1c 0101 	adds.w	r1, ip, r1
 80008bc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008c0:	d26c      	bcs.n	800099c <__udivmoddi4+0x2b4>
 80008c2:	458e      	cmp	lr, r1
 80008c4:	d96a      	bls.n	800099c <__udivmoddi4+0x2b4>
 80008c6:	3802      	subs	r0, #2
 80008c8:	4461      	add	r1, ip
 80008ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ce:	fba0 9402 	umull	r9, r4, r0, r2
 80008d2:	eba1 010e 	sub.w	r1, r1, lr
 80008d6:	42a1      	cmp	r1, r4
 80008d8:	46c8      	mov	r8, r9
 80008da:	46a6      	mov	lr, r4
 80008dc:	d356      	bcc.n	800098c <__udivmoddi4+0x2a4>
 80008de:	d053      	beq.n	8000988 <__udivmoddi4+0x2a0>
 80008e0:	b15d      	cbz	r5, 80008fa <__udivmoddi4+0x212>
 80008e2:	ebb3 0208 	subs.w	r2, r3, r8
 80008e6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ea:	fa01 f707 	lsl.w	r7, r1, r7
 80008ee:	fa22 f306 	lsr.w	r3, r2, r6
 80008f2:	40f1      	lsrs	r1, r6
 80008f4:	431f      	orrs	r7, r3
 80008f6:	e9c5 7100 	strd	r7, r1, [r5]
 80008fa:	2600      	movs	r6, #0
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	f1c2 0320 	rsb	r3, r2, #32
 8000906:	40d8      	lsrs	r0, r3
 8000908:	fa0c fc02 	lsl.w	ip, ip, r2
 800090c:	fa21 f303 	lsr.w	r3, r1, r3
 8000910:	4091      	lsls	r1, r2
 8000912:	4301      	orrs	r1, r0
 8000914:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000918:	fa1f fe8c 	uxth.w	lr, ip
 800091c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000920:	fb07 3610 	mls	r6, r7, r0, r3
 8000924:	0c0b      	lsrs	r3, r1, #16
 8000926:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800092a:	fb00 f60e 	mul.w	r6, r0, lr
 800092e:	429e      	cmp	r6, r3
 8000930:	fa04 f402 	lsl.w	r4, r4, r2
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x260>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800093e:	d22f      	bcs.n	80009a0 <__udivmoddi4+0x2b8>
 8000940:	429e      	cmp	r6, r3
 8000942:	d92d      	bls.n	80009a0 <__udivmoddi4+0x2b8>
 8000944:	3802      	subs	r0, #2
 8000946:	4463      	add	r3, ip
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	b289      	uxth	r1, r1
 800094c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000950:	fb07 3316 	mls	r3, r7, r6, r3
 8000954:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000958:	fb06 f30e 	mul.w	r3, r6, lr
 800095c:	428b      	cmp	r3, r1
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x28a>
 8000960:	eb1c 0101 	adds.w	r1, ip, r1
 8000964:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000968:	d216      	bcs.n	8000998 <__udivmoddi4+0x2b0>
 800096a:	428b      	cmp	r3, r1
 800096c:	d914      	bls.n	8000998 <__udivmoddi4+0x2b0>
 800096e:	3e02      	subs	r6, #2
 8000970:	4461      	add	r1, ip
 8000972:	1ac9      	subs	r1, r1, r3
 8000974:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000978:	e738      	b.n	80007ec <__udivmoddi4+0x104>
 800097a:	462e      	mov	r6, r5
 800097c:	4628      	mov	r0, r5
 800097e:	e705      	b.n	800078c <__udivmoddi4+0xa4>
 8000980:	4606      	mov	r6, r0
 8000982:	e6e3      	b.n	800074c <__udivmoddi4+0x64>
 8000984:	4618      	mov	r0, r3
 8000986:	e6f8      	b.n	800077a <__udivmoddi4+0x92>
 8000988:	454b      	cmp	r3, r9
 800098a:	d2a9      	bcs.n	80008e0 <__udivmoddi4+0x1f8>
 800098c:	ebb9 0802 	subs.w	r8, r9, r2
 8000990:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000994:	3801      	subs	r0, #1
 8000996:	e7a3      	b.n	80008e0 <__udivmoddi4+0x1f8>
 8000998:	4646      	mov	r6, r8
 800099a:	e7ea      	b.n	8000972 <__udivmoddi4+0x28a>
 800099c:	4620      	mov	r0, r4
 800099e:	e794      	b.n	80008ca <__udivmoddi4+0x1e2>
 80009a0:	4640      	mov	r0, r8
 80009a2:	e7d1      	b.n	8000948 <__udivmoddi4+0x260>
 80009a4:	46d0      	mov	r8, sl
 80009a6:	e77b      	b.n	80008a0 <__udivmoddi4+0x1b8>
 80009a8:	3b02      	subs	r3, #2
 80009aa:	4461      	add	r1, ip
 80009ac:	e732      	b.n	8000814 <__udivmoddi4+0x12c>
 80009ae:	4630      	mov	r0, r6
 80009b0:	e709      	b.n	80007c6 <__udivmoddi4+0xde>
 80009b2:	4464      	add	r4, ip
 80009b4:	3802      	subs	r0, #2
 80009b6:	e742      	b.n	800083e <__udivmoddi4+0x156>

080009b8 <__aeabi_idiv0>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <API_draw_line>:
 * 	bitmap:
 *
 */

int API_draw_line(uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint8_t dikte, uint8_t color)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08d      	sub	sp, #52	; 0x34
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4604      	mov	r4, r0
 80009c4:	4608      	mov	r0, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	4623      	mov	r3, r4
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	4603      	mov	r3, r0
 80009d0:	80bb      	strh	r3, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	807b      	strh	r3, [r7, #2]
 80009d6:	4613      	mov	r3, r2
 80009d8:	803b      	strh	r3, [r7, #0]
	int error = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
	//error checks
//	if(checkcolor(color))
//		return error;

	int dx = x_2 - x_1;
 80009de:	887a      	ldrh	r2, [r7, #2]
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	617b      	str	r3, [r7, #20]
	int dy = y_2 - y_1;
 80009e6:	883a      	ldrh	r2, [r7, #0]
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	613b      	str	r3, [r7, #16]
	int steps;
	if(dx>dy)
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	dd05      	ble.n	8000a02 <API_draw_line+0x46>
	{
		steps = abs(dx);
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	bfb8      	it	lt
 80009fc:	425b      	neglt	r3, r3
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a00:	e012      	b.n	8000a28 <API_draw_line+0x6c>
	}
	else if(dy>dx)
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	dd05      	ble.n	8000a16 <API_draw_line+0x5a>
	{
		steps = abs(dy);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bfb8      	it	lt
 8000a10:	425b      	neglt	r3, r3
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a14:	e008      	b.n	8000a28 <API_draw_line+0x6c>
	}
	else if (dx == dy)
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d104      	bne.n	8000a28 <API_draw_line+0x6c>
	{
		steps = abs(dy);
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	bfb8      	it	lt
 8000a24:	425b      	neglt	r3, r3
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	float xIncrement = (float) dx / steps;
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	ee07 3a90 	vmov	s15, r3
 8000a2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a34:	ee07 3a90 	vmov	s15, r3
 8000a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a40:	edc7 7a03 	vstr	s15, [r7, #12]
	float yIncrement = (float) dy / steps;
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	ee07 3a90 	vmov	s15, r3
 8000a4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	ee07 3a90 	vmov	s15, r3
 8000a54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a5c:	edc7 7a02 	vstr	s15, [r7, #8]
	int i;

	// Set the pixels along the center line of the given thickness
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000a60:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000a64:	085b      	lsrs	r3, r3, #1
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	425b      	negs	r3, r3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e053      	b.n	8000b16 <API_draw_line+0x15a>
		float x = x_1 + 0.5;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd67 	bl	8000544 <__aeabi_i2d>
 8000a76:	f04f 0200 	mov.w	r2, #0
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <API_draw_line+0x174>)
 8000a7c:	f7ff fc16 	bl	80002ac <__adddf3>
 8000a80:	4602      	mov	r2, r0
 8000a82:	460b      	mov	r3, r1
 8000a84:	4610      	mov	r0, r2
 8000a86:	4619      	mov	r1, r3
 8000a88:	f7ff fdc6 	bl	8000618 <__aeabi_d2f>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
		float y = y_1 + i + 0.5;
 8000a90:	88ba      	ldrh	r2, [r7, #4]
 8000a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a94:	4413      	add	r3, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fd54 	bl	8000544 <__aeabi_i2d>
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <API_draw_line+0x174>)
 8000aa2:	f7ff fc03 	bl	80002ac <__adddf3>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4619      	mov	r1, r3
 8000aae:	f7ff fdb3 	bl	8000618 <__aeabi_d2f>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	623b      	str	r3, [r7, #32]
		int j;
		for (j = 0; j < steps; j++) {
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	e025      	b.n	8000b08 <API_draw_line+0x14c>
			UB_VGA_SetPixel(x, y, color);
 8000abc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ac4:	ee17 3a90 	vmov	r3, s15
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad2:	ee17 2a90 	vmov	r2, s15
 8000ad6:	b291      	uxth	r1, r2
 8000ad8:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000adc:	4618      	mov	r0, r3
 8000ade:	f001 ff3b 	bl	8002958 <UB_VGA_SetPixel>
			x += xIncrement;
 8000ae2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000ae6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			y += yIncrement;
 8000af2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000af6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000afe:	edc7 7a08 	vstr	s15, [r7, #32]
		for (j = 0; j < steps; j++) {
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3301      	adds	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fa      	ldr	r2, [r7, #28]
 8000b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	dbd5      	blt.n	8000abc <API_draw_line+0x100>
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b12:	3301      	adds	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b16:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b22:	4293      	cmp	r3, r2
 8000b24:	dda3      	ble.n	8000a6e <API_draw_line+0xb2>
		}
	}
	return error;
 8000b26:	69bb      	ldr	r3, [r7, #24]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3734      	adds	r7, #52	; 0x34
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	3fe00000 	.word	0x3fe00000

08000b34 <API_draw_rectangle>:
}



int API_draw_rectangle(uint16_t x_lup, uint16_t y_lup, uint16_t breedte, uint16_t hoogte, uint8_t color, uint8_t gevuld)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	4608      	mov	r0, r1
 8000b3e:	4611      	mov	r1, r2
 8000b40:	461a      	mov	r2, r3
 8000b42:	4623      	mov	r3, r4
 8000b44:	80fb      	strh	r3, [r7, #6]
 8000b46:	4603      	mov	r3, r0
 8000b48:	80bb      	strh	r3, [r7, #4]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	807b      	strh	r3, [r7, #2]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	803b      	strh	r3, [r7, #0]
	int xp = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
	int yp = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]

	//draw lines along screen every y-value
	if(gevuld == 1)
 8000b5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d121      	bne.n	8000ba6 <API_draw_rectangle+0x72>
	{
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	e017      	b.n	8000b98 <API_draw_rectangle+0x64>
		{
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	e00b      	b.n	8000b86 <API_draw_rectangle+0x52>
			{
				UB_VGA_SetPixel(xp, yp, color);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	b291      	uxth	r1, r2
 8000b76:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 feec 	bl	8002958 <UB_VGA_SetPixel>
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3301      	adds	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	88fa      	ldrh	r2, [r7, #6]
 8000b88:	887b      	ldrh	r3, [r7, #2]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	dbed      	blt.n	8000b6e <API_draw_rectangle+0x3a>
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	3301      	adds	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	88ba      	ldrh	r2, [r7, #4]
 8000b9a:	883b      	ldrh	r3, [r7, #0]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbe1      	blt.n	8000b68 <API_draw_rectangle+0x34>
 8000ba4:	e042      	b.n	8000c2c <API_draw_rectangle+0xf8>
			}
		}
	}

	else if(gevuld == 0)
 8000ba6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d13e      	bne.n	8000c2c <API_draw_rectangle+0xf8>
	{

			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	e035      	b.n	8000c20 <API_draw_rectangle+0xec>
			{
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e029      	b.n	8000c0e <API_draw_rectangle+0xda>
				{
					//draw lines along screen every y-value
					if ((yp == y_lup) || (yp == (y_lup + hoogte)))
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	68ba      	ldr	r2, [r7, #8]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d005      	beq.n	8000bce <API_draw_rectangle+0x9a>
 8000bc2:	88ba      	ldrh	r2, [r7, #4]
 8000bc4:	883b      	ldrh	r3, [r7, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d109      	bne.n	8000be2 <API_draw_rectangle+0xae>
					{
						UB_VGA_SetPixel(xp, yp, color);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	b291      	uxth	r1, r2
 8000bd6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 febc 	bl	8002958 <UB_VGA_SetPixel>
 8000be0:	e012      	b.n	8000c08 <API_draw_rectangle+0xd4>
					}

					//Draw pixels along screen only at edges
					else if((xp == x_lup) || (xp == (x_lup + breedte)))
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d005      	beq.n	8000bf6 <API_draw_rectangle+0xc2>
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	4413      	add	r3, r2
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d108      	bne.n	8000c08 <API_draw_rectangle+0xd4>
					{
						UB_VGA_SetPixel(xp, yp, color);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	b291      	uxth	r1, r2
 8000bfe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fea8 	bl	8002958 <UB_VGA_SetPixel>
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	88fa      	ldrh	r2, [r7, #6]
 8000c10:	887b      	ldrh	r3, [r7, #2]
 8000c12:	4413      	add	r3, r2
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	ddcf      	ble.n	8000bba <API_draw_rectangle+0x86>
			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	88ba      	ldrh	r2, [r7, #4]
 8000c22:	883b      	ldrh	r3, [r7, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	ddc3      	ble.n	8000bb4 <API_draw_rectangle+0x80>
					}
				}
			}
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd90      	pop	{r4, r7, pc}
	...

08000c38 <API_draw_text>:

}


int API_draw_text(uint16_t x, uint16_t y, uint8_t kleur, char* tekst, char* fontnaam,uint8_t fontgrootte,char* fontstijl)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b08d      	sub	sp, #52	; 0x34
 8000c3c:	af04      	add	r7, sp, #16
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	4603      	mov	r3, r0
 8000c42:	81fb      	strh	r3, [r7, #14]
 8000c44:	460b      	mov	r3, r1
 8000c46:	81bb      	strh	r3, [r7, #12]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint16_t xd = x;
 8000c4c:	89fb      	ldrh	r3, [r7, #14]
 8000c4e:	83bb      	strh	r3, [r7, #28]
	uint16_t yd = y;
 8000c50:	89bb      	ldrh	r3, [r7, #12]
 8000c52:	837b      	strh	r3, [r7, #26]
	uint16_t* cord_p;
	unsigned char letter_style;
	if(strcmp(fontnaam, "arial")  == 0)
 8000c54:	493c      	ldr	r1, [pc, #240]	; (8000d48 <API_draw_text+0x110>)
 8000c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c58:	f7ff faba 	bl	80001d0 <strcmp>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d102      	bne.n	8000c68 <API_draw_text+0x30>
	{
		letter_style = ARIAL;
 8000c62:	2301      	movs	r3, #1
 8000c64:	74fb      	strb	r3, [r7, #19]
 8000c66:	e008      	b.n	8000c7a <API_draw_text+0x42>
	}
	else if(strcmp(fontnaam, "consolas")  == 0)
 8000c68:	4938      	ldr	r1, [pc, #224]	; (8000d4c <API_draw_text+0x114>)
 8000c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c6c:	f7ff fab0 	bl	80001d0 <strcmp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d101      	bne.n	8000c7a <API_draw_text+0x42>
	{
		letter_style = CONSOLAS;
 8000c76:	2302      	movs	r3, #2
 8000c78:	74fb      	strb	r3, [r7, #19]
	}
		for(i = 0; tekst[i] != '\0'; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	77fb      	strb	r3, [r7, #31]
 8000c7e:	e057      	b.n	8000d30 <API_draw_text+0xf8>
		{
			switch(fontstijl[0])
 8000c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b76      	cmp	r3, #118	; 0x76
 8000c86:	d01e      	beq.n	8000cc6 <API_draw_text+0x8e>
 8000c88:	2b76      	cmp	r3, #118	; 0x76
 8000c8a:	dc4e      	bgt.n	8000d2a <API_draw_text+0xf2>
 8000c8c:	2b63      	cmp	r3, #99	; 0x63
 8000c8e:	d033      	beq.n	8000cf8 <API_draw_text+0xc0>
 8000c90:	2b6e      	cmp	r3, #110	; 0x6e
 8000c92:	d14a      	bne.n	8000d2a <API_draw_text+0xf2>
			{
			case 'n':
				cord_p = draw_normal_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 8000c94:	7ffb      	ldrb	r3, [r7, #31]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	7818      	ldrb	r0, [r3, #0]
 8000c9c:	8b7c      	ldrh	r4, [r7, #26]
 8000c9e:	8bba      	ldrh	r2, [r7, #28]
 8000ca0:	7cf9      	ldrb	r1, [r7, #19]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	9302      	str	r3, [sp, #8]
 8000ca6:	7afb      	ldrb	r3, [r7, #11]
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	4623      	mov	r3, r4
 8000cb2:	f000 f84d 	bl	8000d50 <draw_normal_letter>
 8000cb6:	6178      	str	r0, [r7, #20]
				xd = cord_p[0];
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	83bb      	strh	r3, [r7, #28]
				yd = cord_p[1];
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	885b      	ldrh	r3, [r3, #2]
 8000cc2:	837b      	strh	r3, [r7, #26]
				break;
 8000cc4:	e031      	b.n	8000d2a <API_draw_text+0xf2>
			case 'v':
				cord_p = draw_fat_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 8000cc6:	7ffb      	ldrb	r3, [r7, #31]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	7818      	ldrb	r0, [r3, #0]
 8000cce:	8b7c      	ldrh	r4, [r7, #26]
 8000cd0:	8bba      	ldrh	r2, [r7, #28]
 8000cd2:	7cf9      	ldrb	r1, [r7, #19]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	7afb      	ldrb	r3, [r7, #11]
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	f000 f9a4 	bl	8001030 <draw_fat_letter>
 8000ce8:	6178      	str	r0, [r7, #20]
				xd = cord_p[0];
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	83bb      	strh	r3, [r7, #28]
				yd = cord_p[1];
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	885b      	ldrh	r3, [r3, #2]
 8000cf4:	837b      	strh	r3, [r7, #26]
				break;
 8000cf6:	e018      	b.n	8000d2a <API_draw_text+0xf2>
			case 'c':
				cord_p = draw_cursive_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 8000cf8:	7ffb      	ldrb	r3, [r7, #31]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	7818      	ldrb	r0, [r3, #0]
 8000d00:	8b7c      	ldrh	r4, [r7, #26]
 8000d02:	8bba      	ldrh	r2, [r7, #28]
 8000d04:	7cf9      	ldrb	r1, [r7, #19]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	7afb      	ldrb	r3, [r7, #11]
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	4623      	mov	r3, r4
 8000d16:	f000 f8c9 	bl	8000eac <draw_cursive_letter>
 8000d1a:	6178      	str	r0, [r7, #20]
				xd = cord_p[0];
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	83bb      	strh	r3, [r7, #28]
				yd = cord_p[1];
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	885b      	ldrh	r3, [r3, #2]
 8000d26:	837b      	strh	r3, [r7, #26]
				break;
 8000d28:	bf00      	nop
		for(i = 0; tekst[i] != '\0'; i++)
 8000d2a:	7ffb      	ldrb	r3, [r7, #31]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	77fb      	strb	r3, [r7, #31]
 8000d30:	7ffb      	ldrb	r3, [r7, #31]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1a1      	bne.n	8000c80 <API_draw_text+0x48>
			}
		}
	return 0;//returns error
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0800a968 	.word	0x0800a968
 8000d4c:	0800a970 	.word	0x0800a970

08000d50 <draw_normal_letter>:

uint16_t * draw_normal_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b08b      	sub	sp, #44	; 0x2c
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4604      	mov	r4, r0
 8000d58:	4608      	mov	r0, r1
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4623      	mov	r3, r4
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	4603      	mov	r3, r0
 8000d64:	71bb      	strb	r3, [r7, #6]
 8000d66:	460b      	mov	r3, r1
 8000d68:	80bb      	strh	r3, [r7, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	807b      	strh	r3, [r7, #2]
    uint16_t end_cords[2];
    uint16_t begin_x = xd;
 8000d6e:	88bb      	ldrh	r3, [r7, #4]
 8000d70:	84fb      	strh	r3, [r7, #38]	; 0x26
    int y_counter;
    int width;
    const uint8_t* glyph;
    int start_letter;

    if(letter_type == ARIAL)
 8000d72:	79bb      	ldrb	r3, [r7, #6]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d111      	bne.n	8000d9c <draw_normal_letter+0x4c>
    {
    	start_letter= arial_glyph_dsc[letter-32][1];
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	3b20      	subs	r3, #32
 8000d7c:	4a47      	ldr	r2, [pc, #284]	; (8000e9c <draw_normal_letter+0x14c>)
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4413      	add	r3, r2
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	60fb      	str	r3, [r7, #12]
		glyph = &arial_glyph_bitmap[start_letter];
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4a45      	ldr	r2, [pc, #276]	; (8000ea0 <draw_normal_letter+0x150>)
 8000d8a:	4413      	add	r3, r2
 8000d8c:	617b      	str	r3, [r7, #20]
		width = arial_glyph_dsc[letter-32][0];
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	3b20      	subs	r3, #32
 8000d92:	4a42      	ldr	r2, [pc, #264]	; (8000e9c <draw_normal_letter+0x14c>)
 8000d94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	e013      	b.n	8000dc4 <draw_normal_letter+0x74>
    }
    else if(letter_type == CONSOLAS)
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d110      	bne.n	8000dc4 <draw_normal_letter+0x74>
	{
    	start_letter= consolas_glyph_dsc[letter-32][1];
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	3b20      	subs	r3, #32
 8000da6:	4a3f      	ldr	r2, [pc, #252]	; (8000ea4 <draw_normal_letter+0x154>)
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4413      	add	r3, r2
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	60fb      	str	r3, [r7, #12]
		glyph = &consolas_glyph_bitmap[start_letter];
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4a3d      	ldr	r2, [pc, #244]	; (8000ea8 <draw_normal_letter+0x158>)
 8000db4:	4413      	add	r3, r2
 8000db6:	617b      	str	r3, [r7, #20]
		width = consolas_glyph_dsc[letter-32][0];
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	3b20      	subs	r3, #32
 8000dbc:	4a39      	ldr	r2, [pc, #228]	; (8000ea4 <draw_normal_letter+0x154>)
 8000dbe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000dc2:	61bb      	str	r3, [r7, #24]
	}
    //next line test
        if(xd+width >= VGA_DISPLAY_X)
 8000dc4:	88ba      	ldrh	r2, [r7, #4]
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	4413      	add	r3, r2
 8000dca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000dce:	db04      	blt.n	8000dda <draw_normal_letter+0x8a>
        {
        	yd+=LETTER_BITMAP_HEIGHT;
 8000dd0:	887b      	ldrh	r3, [r7, #2]
 8000dd2:	3330      	adds	r3, #48	; 0x30
 8000dd4:	807b      	strh	r3, [r7, #2]
        	begin_x=5;//sets x value to the left +5 pixels
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    //end test
    if(width%8)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	f003 0307 	and.w	r3, r3, #7
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d002      	beq.n	8000dea <draw_normal_letter+0x9a>
    	width += 8;
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	3308      	adds	r3, #8
 8000de8:	61bb      	str	r3, [r7, #24]
    width = (width/8);
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	da00      	bge.n	8000df2 <draw_normal_letter+0xa2>
 8000df0:	3307      	adds	r3, #7
 8000df2:	10db      	asrs	r3, r3, #3
 8000df4:	61bb      	str	r3, [r7, #24]


    for (y_counter = 0; y_counter < LETTER_BITMAP_HEIGHT; y_counter++) //goes trough every vertical layer of the bitmap
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e03e      	b.n	8000e7a <draw_normal_letter+0x12a>
    {
        xd = begin_x;
 8000dfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dfe:	80bb      	strh	r3, [r7, #4]
        for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
 8000e04:	e028      	b.n	8000e58 <draw_normal_letter+0x108>
        {
        	for (int i = 7; i >= 0; i--)
 8000e06:	2307      	movs	r3, #7
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e01f      	b.n	8000e4c <draw_normal_letter+0xfc>
        	{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	fb03 f202 	mul.w	r2, r3, r2
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	4413      	add	r3, r2
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	fa42 f303 	asr.w	r3, r2, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d006      	beq.n	8000e40 <draw_normal_letter+0xf0>
					UB_VGA_SetPixel(xd, yd, kleur);
 8000e32:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000e36:	8879      	ldrh	r1, [r7, #2]
 8000e38:	88bb      	ldrh	r3, [r7, #4]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fd8c 	bl	8002958 <UB_VGA_SetPixel>
				xd++;
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	3301      	adds	r3, #1
 8000e44:	80bb      	strh	r3, [r7, #4]
        	for (int i = 7; i >= 0; i--)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	dadc      	bge.n	8000e0c <draw_normal_letter+0xbc>
        for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	3301      	adds	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
 8000e58:	6a3a      	ldr	r2, [r7, #32]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbd2      	blt.n	8000e06 <draw_normal_letter+0xb6>
        	}
        }
        yd++;
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	3301      	adds	r3, #1
 8000e64:	807b      	strh	r3, [r7, #2]
        if (fontgrootte == SIZE_1)//skips one pixel of bitmap to shorten the letter by half
 8000e66:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d102      	bne.n	8000e74 <draw_normal_letter+0x124>
            y_counter++;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
    for (y_counter = 0; y_counter < LETTER_BITMAP_HEIGHT; y_counter++) //goes trough every vertical layer of the bitmap
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	3301      	adds	r3, #1
 8000e78:	61fb      	str	r3, [r7, #28]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	2b2f      	cmp	r3, #47	; 0x2f
 8000e7e:	ddbd      	ble.n	8000dfc <draw_normal_letter+0xac>
    }
    end_cords[0] = xd;
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	813b      	strh	r3, [r7, #8]
    end_cords[1] = yd-LETTER_BITMAP_HEIGHT;
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	3b30      	subs	r3, #48	; 0x30
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	817b      	strh	r3, [r7, #10]
    cord_p = end_cords;
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	643b      	str	r3, [r7, #64]	; 0x40
    return cord_p;
 8000e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	372c      	adds	r7, #44	; 0x2c
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd90      	pop	{r4, r7, pc}
 8000e9c:	0800dd94 	.word	0x0800dd94
 8000ea0:	0800aa34 	.word	0x0800aa34
 8000ea4:	0801147c 	.word	0x0801147c
 8000ea8:	0800e08c 	.word	0x0800e08c

08000eac <draw_cursive_letter>:

uint16_t * draw_cursive_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b08d      	sub	sp, #52	; 0x34
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4623      	mov	r3, r4
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71bb      	strb	r3, [r7, #6]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	80bb      	strh	r3, [r7, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	807b      	strh	r3, [r7, #2]
	uint16_t end_cords[2];
	uint16_t begin_x = xd;
 8000eca:	88bb      	ldrh	r3, [r7, #4]
 8000ecc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int width;
	const uint8_t* glyph;
	int start_letter;
	int angle;

	if(letter_type == ARIAL)
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d111      	bne.n	8000ef8 <draw_cursive_letter+0x4c>
	{
		start_letter= arial_glyph_dsc[letter-32][1];
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	3b20      	subs	r3, #32
 8000ed8:	4a51      	ldr	r2, [pc, #324]	; (8001020 <draw_cursive_letter+0x174>)
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	4413      	add	r3, r2
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	613b      	str	r3, [r7, #16]
		glyph = &arial_glyph_bitmap[start_letter];
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4a4f      	ldr	r2, [pc, #316]	; (8001024 <draw_cursive_letter+0x178>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	61fb      	str	r3, [r7, #28]
		width = arial_glyph_dsc[letter-32][0];
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	3b20      	subs	r3, #32
 8000eee:	4a4c      	ldr	r2, [pc, #304]	; (8001020 <draw_cursive_letter+0x174>)
 8000ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	e013      	b.n	8000f20 <draw_cursive_letter+0x74>
	}
	else if(letter_type == CONSOLAS)
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d110      	bne.n	8000f20 <draw_cursive_letter+0x74>
	{
		start_letter= consolas_glyph_dsc[letter-32][1];
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	3b20      	subs	r3, #32
 8000f02:	4a49      	ldr	r2, [pc, #292]	; (8001028 <draw_cursive_letter+0x17c>)
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	4413      	add	r3, r2
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	613b      	str	r3, [r7, #16]
		glyph = &consolas_glyph_bitmap[start_letter];
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4a47      	ldr	r2, [pc, #284]	; (800102c <draw_cursive_letter+0x180>)
 8000f10:	4413      	add	r3, r2
 8000f12:	61fb      	str	r3, [r7, #28]
		width = consolas_glyph_dsc[letter-32][0];
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	3b20      	subs	r3, #32
 8000f18:	4a43      	ldr	r2, [pc, #268]	; (8001028 <draw_cursive_letter+0x17c>)
 8000f1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f1e:	623b      	str	r3, [r7, #32]
	}
	//next line test
		if(xd+width*2 >= VGA_DISPLAY_X)
 8000f20:	88ba      	ldrh	r2, [r7, #4]
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f2c:	db04      	blt.n	8000f38 <draw_cursive_letter+0x8c>
		{
			yd+=LETTER_BITMAP_HEIGHT;
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	3330      	adds	r3, #48	; 0x30
 8000f32:	807b      	strh	r3, [r7, #2]
			begin_x=5;//sets x value to the left +5 pixels
 8000f34:	2305      	movs	r3, #5
 8000f36:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
	//end test
	if(width%8)
 8000f38:	6a3b      	ldr	r3, [r7, #32]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d002      	beq.n	8000f48 <draw_cursive_letter+0x9c>
		width += 8;
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	3308      	adds	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
	angle = width; //sets angle offset for cursive letter
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	61bb      	str	r3, [r7, #24]
	if(fontgrootte == SIZE_1)
 8000f4c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d104      	bne.n	8000f5e <draw_cursive_letter+0xb2>
		angle = angle/2;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	0fda      	lsrs	r2, r3, #31
 8000f58:	4413      	add	r3, r2
 8000f5a:	105b      	asrs	r3, r3, #1
 8000f5c:	61bb      	str	r3, [r7, #24]
	width = (width/8);
 8000f5e:	6a3b      	ldr	r3, [r7, #32]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	da00      	bge.n	8000f66 <draw_cursive_letter+0xba>
 8000f64:	3307      	adds	r3, #7
 8000f66:	10db      	asrs	r3, r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
	for(y_counter = 0; y_counter < LETTER_BITMAP_HEIGHT; y_counter++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f6e:	e045      	b.n	8000ffc <draw_cursive_letter+0x150>
	{
		xd = begin_x;
 8000f70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000f72:	80bb      	strh	r3, [r7, #4]
		for(x_counter = 0; x_counter < width; x_counter++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f78:	e02c      	b.n	8000fd4 <draw_cursive_letter+0x128>
		{
			for (int i = 7; i >= 0; i--)
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	e023      	b.n	8000fc8 <draw_cursive_letter+0x11c>
			{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	3301      	adds	r3, #1
 8000f84:	6a3a      	ldr	r2, [r7, #32]
 8000f86:	fb03 f202 	mul.w	r2, r3, r2
 8000f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8c:	4413      	add	r3, r2
 8000f8e:	461a      	mov	r2, r3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	4413      	add	r3, r2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	fa42 f303 	asr.w	r3, r2, r3
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00a      	beq.n	8000fbc <draw_cursive_letter+0x110>
					UB_VGA_SetPixel(xd+angle, yd, kleur);
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	88bb      	ldrh	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000fb4:	8879      	ldrh	r1, [r7, #2]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fcce 	bl	8002958 <UB_VGA_SetPixel>
				xd++;
 8000fbc:	88bb      	ldrh	r3, [r7, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	80bb      	strh	r3, [r7, #4]
			for (int i = 7; i >= 0; i--)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	dad8      	bge.n	8000f80 <draw_cursive_letter+0xd4>
		for(x_counter = 0; x_counter < width; x_counter++)
 8000fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fd6:	6a3b      	ldr	r3, [r7, #32]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbce      	blt.n	8000f7a <draw_cursive_letter+0xce>
			}
		}
		angle--; //decreases offset for each y layer to create an angle
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	61bb      	str	r3, [r7, #24]
		yd++;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	807b      	strh	r3, [r7, #2]
		if(fontgrootte == SIZE_1)
 8000fe8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d102      	bne.n	8000ff6 <draw_cursive_letter+0x14a>
			y_counter++;
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
	for(y_counter = 0; y_counter < LETTER_BITMAP_HEIGHT; y_counter++)
 8000ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	2b2f      	cmp	r3, #47	; 0x2f
 8001000:	ddb6      	ble.n	8000f70 <draw_cursive_letter+0xc4>
	}
	end_cords[0] = xd;
 8001002:	88bb      	ldrh	r3, [r7, #4]
 8001004:	81bb      	strh	r3, [r7, #12]
    end_cords[1] = yd-LETTER_BITMAP_HEIGHT;
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	3b30      	subs	r3, #48	; 0x30
 800100a:	b29b      	uxth	r3, r3
 800100c:	81fb      	strh	r3, [r7, #14]
    cord_p = end_cords;
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	64bb      	str	r3, [r7, #72]	; 0x48
    return cord_p;
 8001014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001016:	4618      	mov	r0, r3
 8001018:	3734      	adds	r7, #52	; 0x34
 800101a:	46bd      	mov	sp, r7
 800101c:	bd90      	pop	{r4, r7, pc}
 800101e:	bf00      	nop
 8001020:	0800dd94 	.word	0x0800dd94
 8001024:	0800aa34 	.word	0x0800aa34
 8001028:	0801147c 	.word	0x0801147c
 800102c:	0800e08c 	.word	0x0800e08c

08001030 <draw_fat_letter>:


uint16_t * draw_fat_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b08b      	sub	sp, #44	; 0x2c
 8001034:	af00      	add	r7, sp, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	4611      	mov	r1, r2
 800103c:	461a      	mov	r2, r3
 800103e:	4623      	mov	r3, r4
 8001040:	71fb      	strb	r3, [r7, #7]
 8001042:	4603      	mov	r3, r0
 8001044:	71bb      	strb	r3, [r7, #6]
 8001046:	460b      	mov	r3, r1
 8001048:	80bb      	strh	r3, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	807b      	strh	r3, [r7, #2]
	uint16_t end_cords[2];
	uint16_t begin_x = xd;
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	84fb      	strh	r3, [r7, #38]	; 0x26
	int y_counter;
	int width;
	const uint8_t* glyph;
	int start_letter;

	if(letter_type == ARIAL)
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d111      	bne.n	800107c <draw_fat_letter+0x4c>
	{
		start_letter= arial_glyph_dsc[letter-32][1];
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	3b20      	subs	r3, #32
 800105c:	4a53      	ldr	r2, [pc, #332]	; (80011ac <draw_fat_letter+0x17c>)
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	60fb      	str	r3, [r7, #12]
		glyph = &arial_glyph_bitmap[start_letter];
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <draw_fat_letter+0x180>)
 800106a:	4413      	add	r3, r2
 800106c:	617b      	str	r3, [r7, #20]
		width = arial_glyph_dsc[letter-32][0];
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	3b20      	subs	r3, #32
 8001072:	4a4e      	ldr	r2, [pc, #312]	; (80011ac <draw_fat_letter+0x17c>)
 8001074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	e013      	b.n	80010a4 <draw_fat_letter+0x74>
	}
	else if(letter_type == CONSOLAS)
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d110      	bne.n	80010a4 <draw_fat_letter+0x74>
	{
		start_letter= consolas_glyph_dsc[letter-32][1];
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	3b20      	subs	r3, #32
 8001086:	4a4b      	ldr	r2, [pc, #300]	; (80011b4 <draw_fat_letter+0x184>)
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4413      	add	r3, r2
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	60fb      	str	r3, [r7, #12]
		glyph = &consolas_glyph_bitmap[start_letter];
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4a49      	ldr	r2, [pc, #292]	; (80011b8 <draw_fat_letter+0x188>)
 8001094:	4413      	add	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
		width = consolas_glyph_dsc[letter-32][0];
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	3b20      	subs	r3, #32
 800109c:	4a45      	ldr	r2, [pc, #276]	; (80011b4 <draw_fat_letter+0x184>)
 800109e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010a2:	61bb      	str	r3, [r7, #24]
	}
	//next line test
	if(xd+width+THICKNESS >= VGA_DISPLAY_X)
 80010a4:	88ba      	ldrh	r2, [r7, #4]
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4413      	add	r3, r2
 80010aa:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80010ae:	dd04      	ble.n	80010ba <draw_fat_letter+0x8a>
	{
		yd+=LETTER_BITMAP_HEIGHT;
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	3330      	adds	r3, #48	; 0x30
 80010b4:	807b      	strh	r3, [r7, #2]
		begin_x=5;//sets x value to the left +5 pixels
 80010b6:	2305      	movs	r3, #5
 80010b8:	84fb      	strh	r3, [r7, #38]	; 0x26
	}
//end test
	if(width%8)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <draw_fat_letter+0x9a>
		width += 8;
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	3308      	adds	r3, #8
 80010c8:	61bb      	str	r3, [r7, #24]
	width = (width/8);
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da00      	bge.n	80010d2 <draw_fat_letter+0xa2>
 80010d0:	3307      	adds	r3, #7
 80010d2:	10db      	asrs	r3, r3, #3
 80010d4:	61bb      	str	r3, [r7, #24]

	for (y_counter = 0; y_counter < LETTER_BITMAP_HEIGHT; y_counter++) //goes trough every vertical layer of the bitmap
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	e055      	b.n	8001188 <draw_fat_letter+0x158>
	{
		xd = begin_x;
 80010dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010de:	80bb      	strh	r3, [r7, #4]
		for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
 80010e4:	e03f      	b.n	8001166 <draw_fat_letter+0x136>
		{
			for (int i = 7; i >= 0; i--)
 80010e6:	2307      	movs	r3, #7
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	e036      	b.n	800115a <draw_fat_letter+0x12a>
			{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	3301      	adds	r3, #1
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	fb03 f202 	mul.w	r2, r3, r2
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	4413      	add	r3, r2
 80010fa:	461a      	mov	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	461a      	mov	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	fa42 f303 	asr.w	r3, r2, r3
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d01d      	beq.n	800114e <draw_fat_letter+0x11e>
				{
					UB_VGA_SetPixel(xd, yd, kleur);
 8001112:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001116:	8879      	ldrh	r1, [r7, #2]
 8001118:	88bb      	ldrh	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fc1c 	bl	8002958 <UB_VGA_SetPixel>
					xd++;
 8001120:	88bb      	ldrh	r3, [r7, #4]
 8001122:	3301      	adds	r3, #1
 8001124:	80bb      	strh	r3, [r7, #4]
					UB_VGA_SetPixel(xd, yd, kleur);
 8001126:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800112a:	8879      	ldrh	r1, [r7, #2]
 800112c:	88bb      	ldrh	r3, [r7, #4]
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fc12 	bl	8002958 <UB_VGA_SetPixel>
					xd++;
 8001134:	88bb      	ldrh	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	80bb      	strh	r3, [r7, #4]
					UB_VGA_SetPixel(xd, yd, kleur);
 800113a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800113e:	8879      	ldrh	r1, [r7, #2]
 8001140:	88bb      	ldrh	r3, [r7, #4]
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fc08 	bl	8002958 <UB_VGA_SetPixel>
					xd-=2;
 8001148:	88bb      	ldrh	r3, [r7, #4]
 800114a:	3b02      	subs	r3, #2
 800114c:	80bb      	strh	r3, [r7, #4]
				}
				xd++;
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	3301      	adds	r3, #1
 8001152:	80bb      	strh	r3, [r7, #4]
			for (int i = 7; i >= 0; i--)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	3b01      	subs	r3, #1
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	2b00      	cmp	r3, #0
 800115e:	dac5      	bge.n	80010ec <draw_fat_letter+0xbc>
		for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8001160:	6a3b      	ldr	r3, [r7, #32]
 8001162:	3301      	adds	r3, #1
 8001164:	623b      	str	r3, [r7, #32]
 8001166:	6a3a      	ldr	r2, [r7, #32]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	429a      	cmp	r2, r3
 800116c:	dbbb      	blt.n	80010e6 <draw_fat_letter+0xb6>
			}
		}
		yd++;
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	3301      	adds	r3, #1
 8001172:	807b      	strh	r3, [r7, #2]
		if (fontgrootte == SIZE_1)//skips one pixel of bitmap to shorten the letter by half
 8001174:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001178:	2b01      	cmp	r3, #1
 800117a:	d102      	bne.n	8001182 <draw_fat_letter+0x152>
			y_counter++;
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3301      	adds	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
	for (y_counter = 0; y_counter < LETTER_BITMAP_HEIGHT; y_counter++) //goes trough every vertical layer of the bitmap
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3301      	adds	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b2f      	cmp	r3, #47	; 0x2f
 800118c:	dda6      	ble.n	80010dc <draw_fat_letter+0xac>
	}
	end_cords[0] = xd;
 800118e:	88bb      	ldrh	r3, [r7, #4]
 8001190:	813b      	strh	r3, [r7, #8]
    end_cords[1] = yd-LETTER_BITMAP_HEIGHT;
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	3b30      	subs	r3, #48	; 0x30
 8001196:	b29b      	uxth	r3, r3
 8001198:	817b      	strh	r3, [r7, #10]
    cord_p = end_cords;
 800119a:	f107 0308 	add.w	r3, r7, #8
 800119e:	643b      	str	r3, [r7, #64]	; 0x40
	return cord_p;
 80011a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	372c      	adds	r7, #44	; 0x2c
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd90      	pop	{r4, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	0800dd94 	.word	0x0800dd94
 80011b0:	0800aa34 	.word	0x0800aa34
 80011b4:	0801147c 	.word	0x0801147c
 80011b8:	0800e08c 	.word	0x0800e08c

080011bc <API_read_bitmap_SD>:
 *
 * @return Returns an error if error or returns nothing
 *
 *****************************************************************************/
int API_read_bitmap_SD(char *nr, uint16_t x_lup, uint16_t y_lup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80011c8:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80011cc:	6018      	str	r0, [r3, #0]
 80011ce:	4608      	mov	r0, r1
 80011d0:	4611      	mov	r1, r2
 80011d2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80011d6:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 80011da:	4602      	mov	r2, r0
 80011dc:	801a      	strh	r2, [r3, #0]
 80011de:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80011e2:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80011e6:	460a      	mov	r2, r1
 80011e8:	801a      	strh	r2, [r3, #0]

	// Fatfs variables
	FATFS FatFs;
    FIL fil; 		//File handle
    FRESULT fres; 	//Result after operations
    UINT SizeofBuffer = 30;
 80011ea:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80011ee:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80011f2:	221e      	movs	r2, #30
 80011f4:	601a      	str	r2, [r3, #0]

    //Reading buffer
    uint k = 0; // kijken welk variable we zijn
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

    //Position vga
    uint16_t xp,yp,xp2,yp2;

    xp2 = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
    yp2 = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac

    //Information from file system
    unsigned int Height,Width;

    //Creating decimal shift register
	unsigned int ColourFile = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	unsigned int DecimalshiftBuff = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498

	unsigned char i;

	char readBuf[30];

	TCHAR File[] = "00.txt";
 8001214:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001218:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800121c:	4a92      	ldr	r2, [pc, #584]	; (8001468 <API_read_bitmap_SD+0x2ac>)
 800121e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001222:	6018      	str	r0, [r3, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	8019      	strh	r1, [r3, #0]
 8001228:	3302      	adds	r3, #2
 800122a:	0c0a      	lsrs	r2, r1, #16
 800122c:	701a      	strb	r2, [r3, #0]

	File[0] = nr[0];		// checked
 800122e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001232:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	781a      	ldrb	r2, [r3, #0]
 800123a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800123e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001242:	701a      	strb	r2, [r3, #0]
	File[1] = nr[1];
 8001244:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001248:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	785a      	ldrb	r2, [r3, #1]
 8001250:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001254:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001258:	705a      	strb	r2, [r3, #1]

	xp = x_lup;
 800125a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800125e:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
	yp = y_lup;
 8001268:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800126c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0


    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001276:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800127a:	2201      	movs	r2, #1
 800127c:	497b      	ldr	r1, [pc, #492]	; (800146c <API_read_bitmap_SD+0x2b0>)
 800127e:	4618      	mov	r0, r3
 8001280:	f007 feda 	bl	8009038 <f_mount>
 8001284:	4603      	mov	r3, r0
 8001286:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK)
 800128a:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <API_read_bitmap_SD+0xe6>
    {
    	printf("f_mount error (%i)\r\n", fres);
 8001292:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001296:	4619      	mov	r1, r3
 8001298:	4875      	ldr	r0, [pc, #468]	; (8001470 <API_read_bitmap_SD+0x2b4>)
 800129a:	f008 fb55 	bl	8009948 <iprintf>
    	return 0; //error
 800129e:	2300      	movs	r3, #0
 80012a0:	e0dc      	b.n	800145c <API_read_bitmap_SD+0x2a0>
    }

	fres = f_open(&fil, File, FA_READ);
 80012a2:	f107 0108 	add.w	r1, r7, #8
 80012a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012aa:	2201      	movs	r2, #1
 80012ac:	4618      	mov	r0, r3
 80012ae:	f007 ff09 	bl	80090c4 <f_open>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	if (fres != FR_OK)
 80012b8:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80ba 	beq.w	8001436 <API_read_bitmap_SD+0x27a>
	{
		printf("f_open error (%i)\r\n",fres);
 80012c2:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 80012c6:	4619      	mov	r1, r3
 80012c8:	486a      	ldr	r0, [pc, #424]	; (8001474 <API_read_bitmap_SD+0x2b8>)
 80012ca:	f008 fb3d 	bl	8009948 <iprintf>
		return 0; //error
 80012ce:	2300      	movs	r3, #0
 80012d0:	e0c4      	b.n	800145c <API_read_bitmap_SD+0x2a0>
	}


	while (SizeofBuffer == 30)
	{
		f_read(&fil,(void*)readBuf, 30, &SizeofBuffer);
 80012d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d6:	f107 0110 	add.w	r1, r7, #16
 80012da:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80012de:	221e      	movs	r2, #30
 80012e0:	f008 f8ae 	bl	8009440 <f_read>
		for (i=0; i<SizeofBuffer; i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 80012ea:	e09a      	b.n	8001422 <API_read_bitmap_SD+0x266>
		{

			if (readBuf[i] != 32)
 80012ec:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80012f0:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80012f4:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 80012f8:	5cd3      	ldrb	r3, [r2, r3]
 80012fa:	2b20      	cmp	r3, #32
 80012fc:	d019      	beq.n	8001332 <API_read_bitmap_SD+0x176>
			{
				DecimalshiftBuff = readBuf[i]-'0';
 80012fe:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001302:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8001306:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	3b30      	subs	r3, #48	; 0x30
 800130e:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
				ColourFile *= 10;
 8001312:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
				ColourFile += DecimalshiftBuff;
 8001322:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001326:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800132a:	4413      	add	r3, r2
 800132c:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8001330:	e072      	b.n	8001418 <API_read_bitmap_SD+0x25c>
			}

			else if(readBuf[i] == 32)
 8001332:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001336:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800133a:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	2b20      	cmp	r3, #32
 8001342:	d169      	bne.n	8001418 <API_read_bitmap_SD+0x25c>
			{
				if (k > 1)
 8001344:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001348:	2b01      	cmp	r3, #1
 800134a:	d94c      	bls.n	80013e6 <API_read_bitmap_SD+0x22a>
				{
					if (xp < VGA_DISPLAY_X && yp < VGA_DISPLAY_Y)
 800134c:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001350:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001354:	d212      	bcs.n	800137c <API_read_bitmap_SD+0x1c0>
 8001356:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 800135a:	2bef      	cmp	r3, #239	; 0xef
 800135c:	d80e      	bhi.n	800137c <API_read_bitmap_SD+0x1c0>
					{
						VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = ColourFile;
 800135e:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	; 0x4b0
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	019b      	lsls	r3, r3, #6
 800136a:	441a      	add	r2, r3
 800136c:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001370:	4413      	add	r3, r2
 8001372:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001376:	b2d1      	uxtb	r1, r2
 8001378:	4a3f      	ldr	r2, [pc, #252]	; (8001478 <API_read_bitmap_SD+0x2bc>)
 800137a:	54d1      	strb	r1, [r2, r3]
					}

					UB_VGA_SetPixel(xp, yp, ColourFile);
 800137c:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001380:	b2da      	uxtb	r2, r3
 8001382:	f8b7 14b0 	ldrh.w	r1, [r7, #1200]	; 0x4b0
 8001386:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fae4 	bl	8002958 <UB_VGA_SetPixel>
					xp++;
 8001390:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001394:	3301      	adds	r3, #1
 8001396:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
					xp2++;
 800139a:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 800139e:	3301      	adds	r3, #1
 80013a0:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					if (xp2 >= Width)
 80013a4:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 80013a8:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d813      	bhi.n	80013d8 <API_read_bitmap_SD+0x21c>
					{
						yp++;
 80013b0:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 80013b4:	3301      	adds	r3, #1
 80013b6:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0
						yp2++;
 80013ba:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 80013be:	3301      	adds	r3, #1
 80013c0:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac
						xp = x_lup;
 80013c4:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80013c8:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
						xp2 = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					}
					if (yp2 == Height)
 80013d8:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 80013dc:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d111      	bne.n	8001408 <API_read_bitmap_SD+0x24c>
					{
						break;
 80013e4:	e027      	b.n	8001436 <API_read_bitmap_SD+0x27a>
					}
				}
				else if (k == 0) // Hoogte van de bit map
 80013e6:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d104      	bne.n	80013f8 <API_read_bitmap_SD+0x23c>
				{
					Height = ColourFile;
 80013ee:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80013f2:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 80013f6:	e007      	b.n	8001408 <API_read_bitmap_SD+0x24c>
				}
				else if (k == 1)
 80013f8:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d103      	bne.n	8001408 <API_read_bitmap_SD+0x24c>
				{
					Width = ColourFile;
 8001400:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001404:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
				}

				k++;
 8001408:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800140c:	3301      	adds	r3, #1
 800140e:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
				ColourFile = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
		for (i=0; i<SizeofBuffer; i++)
 8001418:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800141c:	3301      	adds	r3, #1
 800141e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 8001422:	f897 249f 	ldrb.w	r2, [r7, #1183]	; 0x49f
 8001426:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800142a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	f4ff af5b 	bcc.w	80012ec <API_read_bitmap_SD+0x130>
	while (SizeofBuffer == 30)
 8001436:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800143a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b1e      	cmp	r3, #30
 8001442:	f43f af46 	beq.w	80012d2 <API_read_bitmap_SD+0x116>
			}

		}
	}

	f_close(&fil);
 8001446:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800144a:	4618      	mov	r0, r3
 800144c:	f008 f9b5 	bl	80097ba <f_close>

    f_mount(NULL, "", 0);
 8001450:	2200      	movs	r2, #0
 8001452:	4906      	ldr	r1, [pc, #24]	; (800146c <API_read_bitmap_SD+0x2b0>)
 8001454:	2000      	movs	r0, #0
 8001456:	f007 fdef 	bl	8009038 <f_mount>

	return 0;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	f507 6797 	add.w	r7, r7, #1208	; 0x4b8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	0800a9ac 	.word	0x0800a9ac
 800146c:	0800a97c 	.word	0x0800a97c
 8001470:	0800a980 	.word	0x0800a980
 8001474:	0800a998 	.word	0x0800a998
 8001478:	20000a30 	.word	0x20000a30

0800147c <API_blur_screen>:
 *
 * @return Returns an error if error or returns nothing
 *
 *****************************************************************************/
int API_blur_screen()
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
	uint16_t xp, yp;
	uint16_t xp_2, yp_2;
	uint16_t sum = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 800148a:	2300      	movs	r3, #0
 800148c:	81bb      	strh	r3, [r7, #12]
 800148e:	e06d      	b.n	800156c <API_blur_screen+0xf0>
	{
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 8001490:	2300      	movs	r3, #0
 8001492:	81fb      	strh	r3, [r7, #14]
 8001494:	e063      	b.n	800155e <API_blur_screen+0xe2>
	  {
	    sum = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	80fb      	strh	r3, [r7, #6]
	    i = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 800149e:	89bb      	ldrh	r3, [r7, #12]
 80014a0:	813b      	strh	r3, [r7, #8]
 80014a2:	e022      	b.n	80014ea <API_blur_screen+0x6e>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	817b      	strh	r3, [r7, #10]
 80014a8:	e013      	b.n	80014d2 <API_blur_screen+0x56>
	      {
	        sum += VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2];
 80014aa:	893a      	ldrh	r2, [r7, #8]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	019b      	lsls	r3, r3, #6
 80014b4:	441a      	add	r2, r3
 80014b6:	897b      	ldrh	r3, [r7, #10]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a31      	ldr	r2, [pc, #196]	; (8001580 <API_blur_screen+0x104>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	4413      	add	r3, r2
 80014c4:	80fb      	strh	r3, [r7, #6]
	        i++;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	603b      	str	r3, [r7, #0]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 80014cc:	897b      	ldrh	r3, [r7, #10]
 80014ce:	3301      	adds	r3, #1
 80014d0:	817b      	strh	r3, [r7, #10]
 80014d2:	89fb      	ldrh	r3, [r7, #14]
 80014d4:	1c9a      	adds	r2, r3, #2
 80014d6:	897b      	ldrh	r3, [r7, #10]
 80014d8:	429a      	cmp	r2, r3
 80014da:	db03      	blt.n	80014e4 <API_blur_screen+0x68>
 80014dc:	897b      	ldrh	r3, [r7, #10]
 80014de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80014e2:	d3e2      	bcc.n	80014aa <API_blur_screen+0x2e>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 80014e4:	893b      	ldrh	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	813b      	strh	r3, [r7, #8]
 80014ea:	89bb      	ldrh	r3, [r7, #12]
 80014ec:	1c9a      	adds	r2, r3, #2
 80014ee:	893b      	ldrh	r3, [r7, #8]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	db02      	blt.n	80014fa <API_blur_screen+0x7e>
 80014f4:	893b      	ldrh	r3, [r7, #8]
 80014f6:	2bef      	cmp	r3, #239	; 0xef
 80014f8:	d9d4      	bls.n	80014a4 <API_blur_screen+0x28>
	      }
	    }
	    sum /= 9;
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	4a21      	ldr	r2, [pc, #132]	; (8001584 <API_blur_screen+0x108>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	085b      	lsrs	r3, r3, #1
 8001504:	80fb      	strh	r3, [r7, #6]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001506:	89bb      	ldrh	r3, [r7, #12]
 8001508:	813b      	strh	r3, [r7, #8]
 800150a:	e01d      	b.n	8001548 <API_blur_screen+0xcc>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	817b      	strh	r3, [r7, #10]
 8001510:	e00e      	b.n	8001530 <API_blur_screen+0xb4>
	      {
	        VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2] = sum;
 8001512:	893a      	ldrh	r2, [r7, #8]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	019b      	lsls	r3, r3, #6
 800151c:	441a      	add	r2, r3
 800151e:	897b      	ldrh	r3, [r7, #10]
 8001520:	4413      	add	r3, r2
 8001522:	88fa      	ldrh	r2, [r7, #6]
 8001524:	b2d1      	uxtb	r1, r2
 8001526:	4a16      	ldr	r2, [pc, #88]	; (8001580 <API_blur_screen+0x104>)
 8001528:	54d1      	strb	r1, [r2, r3]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 800152a:	897b      	ldrh	r3, [r7, #10]
 800152c:	3301      	adds	r3, #1
 800152e:	817b      	strh	r3, [r7, #10]
 8001530:	89fb      	ldrh	r3, [r7, #14]
 8001532:	1c9a      	adds	r2, r3, #2
 8001534:	897b      	ldrh	r3, [r7, #10]
 8001536:	429a      	cmp	r2, r3
 8001538:	db03      	blt.n	8001542 <API_blur_screen+0xc6>
 800153a:	897b      	ldrh	r3, [r7, #10]
 800153c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001540:	d3e7      	bcc.n	8001512 <API_blur_screen+0x96>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001542:	893b      	ldrh	r3, [r7, #8]
 8001544:	3301      	adds	r3, #1
 8001546:	813b      	strh	r3, [r7, #8]
 8001548:	89bb      	ldrh	r3, [r7, #12]
 800154a:	1c9a      	adds	r2, r3, #2
 800154c:	893b      	ldrh	r3, [r7, #8]
 800154e:	429a      	cmp	r2, r3
 8001550:	db02      	blt.n	8001558 <API_blur_screen+0xdc>
 8001552:	893b      	ldrh	r3, [r7, #8]
 8001554:	2bef      	cmp	r3, #239	; 0xef
 8001556:	d9d9      	bls.n	800150c <API_blur_screen+0x90>
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 8001558:	89fb      	ldrh	r3, [r7, #14]
 800155a:	3301      	adds	r3, #1
 800155c:	81fb      	strh	r3, [r7, #14]
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001564:	d397      	bcc.n	8001496 <API_blur_screen+0x1a>
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 8001566:	89bb      	ldrh	r3, [r7, #12]
 8001568:	3301      	adds	r3, #1
 800156a:	81bb      	strh	r3, [r7, #12]
 800156c:	89bb      	ldrh	r3, [r7, #12]
 800156e:	2bef      	cmp	r3, #239	; 0xef
 8001570:	d98e      	bls.n	8001490 <API_blur_screen+0x14>
	      }
	    }
	  }
	}
	return 0;
 8001572:	2300      	movs	r3, #0
	}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20000a30 	.word	0x20000a30
 8001584:	38e38e39 	.word	0x38e38e39

08001588 <wacht>:
 *
 * @return
 *
 *****************************************************************************/
unsigned int wacht(uint16_t msecs)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(msecs);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	4618      	mov	r0, r3
 8001596:	f001 fa79 	bl	8002a8c <HAL_Delay>
	return 1;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <LogicLayer_Parser>:




Message_parser LogicLayer_Parser(char *Message, unsigned int Messagelength)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80015b0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80015b4:	6018      	str	r0, [r3, #0]
 80015b6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80015ba:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80015be:	6019      	str	r1, [r3, #0]
 80015c0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80015c4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80015c8:	601a      	str	r2, [r3, #0]
	unsigned int i,j,k,l = 0;			// Maak iterators aan voor het maken van een moving window langs de buffer message
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	i = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	j = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	k = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404


	Message_parser localParser;

	  while (Message[i] != 0) 	// Kijk voor line end
 80015e2:	e08b      	b.n	80016fc <LogicLayer_Parser+0x158>
	  {

		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 80015e4:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80015e8:	3301      	adds	r3, #1
 80015ea:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 80015ee:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80015f2:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80015f6:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d903      	bls.n	8001608 <LogicLayer_Parser+0x64>
			  {
				  printf("Error , not detected \n");
 8001600:	4855      	ldr	r0, [pc, #340]	; (8001758 <LogicLayer_Parser+0x1b4>)
 8001602:	f008 fa27 	bl	8009a54 <puts>
				  break;
 8001606:	e015      	b.n	8001634 <LogicLayer_Parser+0x90>
		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
 8001608:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800160c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001616:	4413      	add	r3, r2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b2c      	cmp	r3, #44	; 0x2c
 800161c:	d00a      	beq.n	8001634 <LogicLayer_Parser+0x90>
 800161e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001622:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800162c:	4413      	add	r3, r2
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1d7      	bne.n	80015e4 <LogicLayer_Parser+0x40>
			  }
		  }

	  	  for (l=0; j<i; j++)
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800163a:	e022      	b.n	8001682 <LogicLayer_Parser+0xde>
	  	  {
	  		localParser.Parser_Message[k][l] = Message[j];
 800163c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001640:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800164a:	4413      	add	r3, r2
 800164c:	7818      	ldrb	r0, [r3, #0]
 800164e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001652:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 8001656:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800165a:	2132      	movs	r1, #50	; 0x32
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	441a      	add	r2, r3
 8001662:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001666:	4413      	add	r3, r2
 8001668:	3301      	adds	r3, #1
 800166a:	4602      	mov	r2, r0
 800166c:	701a      	strb	r2, [r3, #0]
	  		l++;
 800166e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8001672:	3301      	adds	r3, #1
 8001674:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	  	  for (l=0; j<i; j++)
 8001678:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800167c:	3301      	adds	r3, #1
 800167e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 8001682:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8001686:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800168a:	429a      	cmp	r2, r3
 800168c:	d3d6      	bcc.n	800163c <LogicLayer_Parser+0x98>
	  	  }

	  	  j = i+1;
 800168e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

	  	  if (Message[j] == 0x20)	// checking for spaces between lines
 8001698:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800169c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	d104      	bne.n	80016b8 <LogicLayer_Parser+0x114>
	  	  {
	  		  j++;
 80016ae:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80016b2:	3301      	adds	r3, #1
 80016b4:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	  	  }

	  	  localParser.Parser_Message[k][l] = '\0';
 80016b8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80016bc:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 80016c0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80016c4:	2132      	movs	r1, #50	; 0x32
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	441a      	add	r2, r3
 80016cc:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80016d0:	4413      	add	r3, r2
 80016d2:	3301      	adds	r3, #1
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]

	  	  i++;		//verhoog de iterator om niet in een oneindige loop te komen ivm while loop en komma detectie
 80016d8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80016dc:	3301      	adds	r3, #1
 80016de:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	  	  k=(k+1);	//verhoog iterator voor meerdere berichten opslag
 80016e2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80016e6:	3301      	adds	r3, #1
 80016e8:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 80016ec:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80016f0:	2b14      	cmp	r3, #20
 80016f2:	d903      	bls.n	80016fc <LogicLayer_Parser+0x158>
	  	  	  {
	  		  	  printf("Error no message end detected \n");
 80016f4:	4819      	ldr	r0, [pc, #100]	; (800175c <LogicLayer_Parser+0x1b8>)
 80016f6:	f008 f9ad 	bl	8009a54 <puts>
	  		  	  break;
 80016fa:	e00b      	b.n	8001714 <LogicLayer_Parser+0x170>
	  while (Message[i] != 0) 	// Kijk voor line end
 80016fc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001700:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	f47f af7a 	bne.w	8001608 <LogicLayer_Parser+0x64>
	  	  	  }

	  }

	localParser.Variable_length = k;
 8001714:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001718:	b2da      	uxtb	r2, r3
 800171a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800171e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001722:	701a      	strb	r2, [r3, #0]

	return localParser;
 8001724:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001728:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001732:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800173e:	461a      	mov	r2, r3
 8001740:	f008 f8ec 	bl	800991c <memcpy>
}
 8001744:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001748:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	0800a9b4 	.word	0x0800a9b4
 800175c:	0800a9cc 	.word	0x0800a9cc

08001760 <LogicLayer_CommandCheck>:

int LogicLayer_CommandCheck(Message_parser *localParser)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	int i;
	unsigned char stringLength = sizeof(commands_check) / sizeof(commands_check[0]);
 8001768:	2309      	movs	r3, #9
 800176a:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCheck = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	727b      	strb	r3, [r7, #9]
	unsigned char stringCorrect = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	72fb      	strb	r3, [r7, #11]

	for (i = 1; i <= stringLength; i++)
 8001774:	2301      	movs	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	e016      	b.n	80017a8 <LogicLayer_CommandCheck+0x48>
	{
		stringCheck = strcmp(localParser->Parser_Message[0],commands_check[i-1]);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	1c58      	adds	r0, r3, #1
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <LogicLayer_CommandCheck+0x64>)
 800178c:	4413      	add	r3, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7fe fd1e 	bl	80001d0 <strcmp>
 8001794:	4603      	mov	r3, r0
 8001796:	727b      	strb	r3, [r7, #9]
		if (stringCheck == 0)
 8001798:	7a7b      	ldrb	r3, [r7, #9]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <LogicLayer_CommandCheck+0x42>
		{
			stringCorrect = i;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	72fb      	strb	r3, [r7, #11]
	for (i = 1; i <= stringLength; i++)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	7abb      	ldrb	r3, [r7, #10]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dde4      	ble.n	800177a <LogicLayer_CommandCheck+0x1a>
		}
	}

	if (stringCorrect != 0)
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <LogicLayer_CommandCheck+0x5a>
	{
		return stringCorrect;
 80017b6:	7afb      	ldrb	r3, [r7, #11]
 80017b8:	e000      	b.n	80017bc <LogicLayer_CommandCheck+0x5c>
	}
	else return 0;
 80017ba:	2300      	movs	r3, #0

}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0801177c 	.word	0x0801177c

080017c8 <LogicLayer_CommandSwitch>:

int LogicLayer_CommandSwitch(Message_parser *localParser, unsigned char Command)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b090      	sub	sp, #64	; 0x40
 80017cc:	af04      	add	r7, sp, #16
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]


	switch (Command)
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	2b08      	cmp	r3, #8
 80017da:	f200 814d 	bhi.w	8001a78 <LogicLayer_CommandSwitch+0x2b0>
 80017de:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <LogicLayer_CommandSwitch+0x1c>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	08001809 	.word	0x08001809
 80017e8:	080018bd 	.word	0x080018bd
 80017ec:	08001965 	.word	0x08001965
 80017f0:	080019f1 	.word	0x080019f1
 80017f4:	08001a35 	.word	0x08001a35
 80017f8:	08001a4f 	.word	0x08001a4f
 80017fc:	08001a79 	.word	0x08001a79
 8001800:	08001a79 	.word	0x08001a79
 8001804:	08001a73 	.word	0x08001a73
	{
		case 1:	//lijn
		{
			if (localParser->Variable_length-1 == 6)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b07      	cmp	r3, #7
 800180e:	d153      	bne.n	80018b8 <LogicLayer_CommandSwitch+0xf0>
			{
			unsigned short x_1, y_1, x_2, y_2;
			unsigned char dikte, color;

			x_1 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3333      	adds	r3, #51	; 0x33
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fce5 	bl	80001e4 <strlen>
 800181a:	4603      	mov	r3, r0
 800181c:	2201      	movs	r2, #1
 800181e:	4619      	mov	r1, r3
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f96f 	bl	8001b04 <LogicLayer_intToAscii>
 8001826:	4603      	mov	r3, r0
 8001828:	82bb      	strh	r3, [r7, #20]
			y_1 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3365      	adds	r3, #101	; 0x65
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fcd8 	bl	80001e4 <strlen>
 8001834:	4603      	mov	r3, r0
 8001836:	2202      	movs	r2, #2
 8001838:	4619      	mov	r1, r3
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f962 	bl	8001b04 <LogicLayer_intToAscii>
 8001840:	4603      	mov	r3, r0
 8001842:	827b      	strh	r3, [r7, #18]
			x_2 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[3]), 3);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3397      	adds	r3, #151	; 0x97
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fccb 	bl	80001e4 <strlen>
 800184e:	4603      	mov	r3, r0
 8001850:	2203      	movs	r2, #3
 8001852:	4619      	mov	r1, r3
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f955 	bl	8001b04 <LogicLayer_intToAscii>
 800185a:	4603      	mov	r3, r0
 800185c:	823b      	strh	r3, [r7, #16]
			y_2 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[4]), 4);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	33c9      	adds	r3, #201	; 0xc9
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fcbe 	bl	80001e4 <strlen>
 8001868:	4603      	mov	r3, r0
 800186a:	2204      	movs	r2, #4
 800186c:	4619      	mov	r1, r3
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f948 	bl	8001b04 <LogicLayer_intToAscii>
 8001874:	4603      	mov	r3, r0
 8001876:	81fb      	strh	r3, [r7, #14]
			color = LogicLayer_ColourCheck(localParser, 5);
 8001878:	2105      	movs	r1, #5
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f904 	bl	8001a88 <LogicLayer_ColourCheck>
 8001880:	4603      	mov	r3, r0
 8001882:	737b      	strb	r3, [r7, #13]
			dikte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[6]), 6);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fcaa 	bl	80001e4 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	2206      	movs	r2, #6
 8001894:	4619      	mov	r1, r3
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f934 	bl	8001b04 <LogicLayer_intToAscii>
 800189c:	4603      	mov	r3, r0
 800189e:	733b      	strb	r3, [r7, #12]



			API_draw_line(x_1, y_1, x_2, y_2, dikte, color);
 80018a0:	89fc      	ldrh	r4, [r7, #14]
 80018a2:	8a3a      	ldrh	r2, [r7, #16]
 80018a4:	8a79      	ldrh	r1, [r7, #18]
 80018a6:	8ab8      	ldrh	r0, [r7, #20]
 80018a8:	7b7b      	ldrb	r3, [r7, #13]
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	7b3b      	ldrb	r3, [r7, #12]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	4623      	mov	r3, r4
 80018b2:	f7ff f883 	bl	80009bc <API_draw_line>

			break;
 80018b6:	e0e1      	b.n	8001a7c <LogicLayer_CommandSwitch+0x2b4>
			}
			else return 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e0e0      	b.n	8001a7e <LogicLayer_CommandSwitch+0x2b6>
		{
			unsigned short x_lup,  y_lup,  breedte,  hoogte;
			unsigned char color, gevuld;


			x_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3333      	adds	r3, #51	; 0x33
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fc8f 	bl	80001e4 <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2201      	movs	r2, #1
 80018ca:	4619      	mov	r1, r3
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f919 	bl	8001b04 <LogicLayer_intToAscii>
 80018d2:	4603      	mov	r3, r0
 80018d4:	83fb      	strh	r3, [r7, #30]
			y_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3365      	adds	r3, #101	; 0x65
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fc82 	bl	80001e4 <strlen>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2202      	movs	r2, #2
 80018e4:	4619      	mov	r1, r3
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f90c 	bl	8001b04 <LogicLayer_intToAscii>
 80018ec:	4603      	mov	r3, r0
 80018ee:	83bb      	strh	r3, [r7, #28]
			breedte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[3]), 3);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3397      	adds	r3, #151	; 0x97
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fc75 	bl	80001e4 <strlen>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2203      	movs	r2, #3
 80018fe:	4619      	mov	r1, r3
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f8ff 	bl	8001b04 <LogicLayer_intToAscii>
 8001906:	4603      	mov	r3, r0
 8001908:	837b      	strh	r3, [r7, #26]
			hoogte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[4]), 4);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	33c9      	adds	r3, #201	; 0xc9
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fc68 	bl	80001e4 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	2204      	movs	r2, #4
 8001918:	4619      	mov	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f8f2 	bl	8001b04 <LogicLayer_intToAscii>
 8001920:	4603      	mov	r3, r0
 8001922:	833b      	strh	r3, [r7, #24]

			color = LogicLayer_ColourCheck(localParser, 5);
 8001924:	2105      	movs	r1, #5
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f8ae 	bl	8001a88 <LogicLayer_ColourCheck>
 800192c:	4603      	mov	r3, r0
 800192e:	75fb      	strb	r3, [r7, #23]
			gevuld = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[6]), 6);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fc54 	bl	80001e4 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	2206      	movs	r2, #6
 8001940:	4619      	mov	r1, r3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f8de 	bl	8001b04 <LogicLayer_intToAscii>
 8001948:	4603      	mov	r3, r0
 800194a:	75bb      	strb	r3, [r7, #22]

			API_draw_rectangle(x_lup, y_lup, breedte, hoogte, color, gevuld);
 800194c:	8b3c      	ldrh	r4, [r7, #24]
 800194e:	8b7a      	ldrh	r2, [r7, #26]
 8001950:	8bb9      	ldrh	r1, [r7, #28]
 8001952:	8bf8      	ldrh	r0, [r7, #30]
 8001954:	7dbb      	ldrb	r3, [r7, #22]
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4623      	mov	r3, r4
 800195e:	f7ff f8e9 	bl	8000b34 <API_draw_rectangle>

			break;
 8001962:	e08b      	b.n	8001a7c <LogicLayer_CommandSwitch+0x2b4>
		}

		case 3: //tekst
		{
			uint16_t x = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3333      	adds	r3, #51	; 0x33
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fc3b 	bl	80001e4 <strlen>
 800196e:	4603      	mov	r3, r0
 8001970:	2201      	movs	r2, #1
 8001972:	4619      	mov	r1, r3
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f8c5 	bl	8001b04 <LogicLayer_intToAscii>
 800197a:	4603      	mov	r3, r0
 800197c:	84bb      	strh	r3, [r7, #36]	; 0x24
			uint16_t y = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3365      	adds	r3, #101	; 0x65
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fc2e 	bl	80001e4 <strlen>
 8001988:	4603      	mov	r3, r0
 800198a:	2202      	movs	r2, #2
 800198c:	4619      	mov	r1, r3
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8b8 	bl	8001b04 <LogicLayer_intToAscii>
 8001994:	4603      	mov	r3, r0
 8001996:	847b      	strh	r3, [r7, #34]	; 0x22
			uint8_t kleur = LogicLayer_ColourCheck(localParser, 3);
 8001998:	2103      	movs	r1, #3
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f874 	bl	8001a88 <LogicLayer_ColourCheck>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			uint8_t fontgrootte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[6]), 6);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f203 132d 	addw	r3, r3, #301	; 0x12d
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fc19 	bl	80001e4 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2206      	movs	r2, #6
 80019b6:	4619      	mov	r1, r3
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f8a3 	bl	8001b04 <LogicLayer_intToAscii>
 80019be:	4603      	mov	r3, r0
 80019c0:	f887 3020 	strb.w	r3, [r7, #32]

			API_draw_text(x, y, kleur, localParser->Parser_Message[4],localParser->Parser_Message[5], fontgrootte, localParser->Parser_Message[7]);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f103 05c9 	add.w	r5, r3, #201	; 0xc9
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	33fb      	adds	r3, #251	; 0xfb
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	f202 125f 	addw	r2, r2, #351	; 0x15f
 80019d4:	f897 4021 	ldrb.w	r4, [r7, #33]	; 0x21
 80019d8:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80019da:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80019dc:	9202      	str	r2, [sp, #8]
 80019de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019e2:	9201      	str	r2, [sp, #4]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	462b      	mov	r3, r5
 80019e8:	4622      	mov	r2, r4
 80019ea:	f7ff f925 	bl	8000c38 <API_draw_text>
			break;
 80019ee:	e045      	b.n	8001a7c <LogicLayer_CommandSwitch+0x2b4>
		}

		case 4: //bitmap
		{
			unsigned short x_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3365      	adds	r3, #101	; 0x65
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fbf5 	bl	80001e4 <strlen>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2202      	movs	r2, #2
 80019fe:	4619      	mov	r1, r3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f87f 	bl	8001b04 <LogicLayer_intToAscii>
 8001a06:	4603      	mov	r3, r0
 8001a08:	853b      	strh	r3, [r7, #40]	; 0x28
			unsigned short y_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[3]), 3);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3397      	adds	r3, #151	; 0x97
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fbe8 	bl	80001e4 <strlen>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2203      	movs	r2, #3
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f872 	bl	8001b04 <LogicLayer_intToAscii>
 8001a20:	4603      	mov	r3, r0
 8001a22:	84fb      	strh	r3, [r7, #38]	; 0x26
			API_read_bitmap_SD(localParser->Parser_Message[1], x_lup, y_lup);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3333      	adds	r3, #51	; 0x33
 8001a28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a2a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fbc5 	bl	80011bc <API_read_bitmap_SD>
			break;
 8001a32:	e023      	b.n	8001a7c <LogicLayer_CommandSwitch+0x2b4>
		}

		case 5: //clearscherm
		{
			unsigned char color;
			color = LogicLayer_ColourCheck(localParser, 1);
 8001a34:	2101      	movs	r1, #1
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f826 	bl	8001a88 <LogicLayer_ColourCheck>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			UB_VGA_FillScreen(color);
 8001a42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 ff62 	bl	8002910 <UB_VGA_FillScreen>
			break;
 8001a4c:	e016      	b.n	8001a7c <LogicLayer_CommandSwitch+0x2b4>
		}
		case 6:
		{
			unsigned int msecs = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3333      	adds	r3, #51	; 0x33
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fbc6 	bl	80001e4 <strlen>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f850 	bl	8001b04 <LogicLayer_intToAscii>
 8001a64:	62f8      	str	r0, [r7, #44]	; 0x2c
			wacht(msecs);
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fd8c 	bl	8001588 <wacht>
			break;
 8001a70:	e004      	b.n	8001a7c <LogicLayer_CommandSwitch+0x2b4>
		}
		case 9:
		{
			API_blur_screen();
 8001a72:	f7ff fd03 	bl	800147c <API_blur_screen>
			break;
 8001a76:	e001      	b.n	8001a7c <LogicLayer_CommandSwitch+0x2b4>
		}
		default:
		{
			return 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <LogicLayer_CommandSwitch+0x2b6>
		}
	}
	return 1;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3730      	adds	r7, #48	; 0x30
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bdb0      	pop	{r4, r5, r7, pc}
 8001a86:	bf00      	nop

08001a88 <LogicLayer_ColourCheck>:

int LogicLayer_ColourCheck(Message_parser* localParser, unsigned char StructLocation)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
	int i;
	unsigned char stringLength = sizeof(message_col_string) / sizeof(message_col_string[0])+1;
 8001a94:	2310      	movs	r3, #16
 8001a96:	72fb      	strb	r3, [r7, #11]
	unsigned char stringCheck = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCorrect = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	727b      	strb	r3, [r7, #9]

	for (i = 1; i < stringLength; i++)
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	e020      	b.n	8001ae8 <LogicLayer_ColourCheck+0x60>
	{
		stringCheck = strcmp(localParser->Parser_Message[StructLocation],message_col_string[i-1]);
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	2232      	movs	r2, #50	; 0x32
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	1c58      	adds	r0, r3, #1
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1e5a      	subs	r2, r3, #1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4a0e      	ldr	r2, [pc, #56]	; (8001afc <LogicLayer_ColourCheck+0x74>)
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7fe fb83 	bl	80001d0 <strcmp>
 8001aca:	4603      	mov	r3, r0
 8001acc:	72bb      	strb	r3, [r7, #10]
		if (stringCheck == 0)
 8001ace:	7abb      	ldrb	r3, [r7, #10]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d106      	bne.n	8001ae2 <LogicLayer_ColourCheck+0x5a>
		{
			return stringCorrect = message_col[i-1];
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <LogicLayer_ColourCheck+0x78>)
 8001ada:	5cd3      	ldrb	r3, [r2, r3]
 8001adc:	727b      	strb	r3, [r7, #9]
 8001ade:	7a7b      	ldrb	r3, [r7, #9]
 8001ae0:	e007      	b.n	8001af2 <LogicLayer_ColourCheck+0x6a>
	for (i = 1; i < stringLength; i++)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbda      	blt.n	8001aa6 <LogicLayer_ColourCheck+0x1e>
		}
	}


	return 0;
 8001af0:	2300      	movs	r3, #0

}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	08011830 	.word	0x08011830
 8001b00:	0801195c 	.word	0x0801195c

08001b04 <LogicLayer_intToAscii>:

unsigned int LogicLayer_intToAscii(Message_parser* localParser, int numbersize, int StructLocation)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
	unsigned char i = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	77fb      	strb	r3, [r7, #31]
	unsigned char DecimalshiftBuff = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	75fb      	strb	r3, [r7, #23]
	unsigned int decimalvalue = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	77fb      	strb	r3, [r7, #31]
 8001b20:	e020      	b.n	8001b64 <LogicLayer_intToAscii+0x60>
	{

			DecimalshiftBuff = localParser->Parser_Message[StructLocation][i];	// making sure array doesnt have a negative number
 8001b22:	7ffb      	ldrb	r3, [r7, #31]
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	2032      	movs	r0, #50	; 0x32
 8001b2a:	fb00 f202 	mul.w	r2, r0, r2
 8001b2e:	440a      	add	r2, r1
 8001b30:	4413      	add	r3, r2
 8001b32:	3301      	adds	r3, #1
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	75fb      	strb	r3, [r7, #23]
			if (DecimalshiftBuff < '0' ||  DecimalshiftBuff > '9')
 8001b38:	7dfb      	ldrb	r3, [r7, #23]
 8001b3a:	2b2f      	cmp	r3, #47	; 0x2f
 8001b3c:	d90f      	bls.n	8001b5e <LogicLayer_intToAscii+0x5a>
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	2b39      	cmp	r3, #57	; 0x39
 8001b42:	d80c      	bhi.n	8001b5e <LogicLayer_intToAscii+0x5a>
		{

		}
			else
		{
			DecimalshiftBuff -= '0';
 8001b44:	7dfb      	ldrb	r3, [r7, #23]
 8001b46:	3b30      	subs	r3, #48	; 0x30
 8001b48:	75fb      	strb	r3, [r7, #23]

			decimalvalue *= 10;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
			decimalvalue += DecimalshiftBuff;
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 8001b5e:	7ffb      	ldrb	r3, [r7, #31]
 8001b60:	3301      	adds	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
 8001b64:	7ffb      	ldrb	r3, [r7, #31]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dcda      	bgt.n	8001b22 <LogicLayer_intToAscii+0x1e>
		}
	}
	return decimalvalue;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	607b      	str	r3, [r7, #4]
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_DMA_Init+0x3c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <MX_DMA_Init+0x3c>)
 8001b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_DMA_Init+0x3c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	2044      	movs	r0, #68	; 0x44
 8001ba4:	f001 f871 	bl	8002c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001ba8:	2044      	movs	r0, #68	; 0x44
 8001baa:	f001 f88a 	bl	8002cc2 <HAL_NVIC_EnableIRQ>

}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800

08001bbc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a3a      	ldr	r2, [pc, #232]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a33      	ldr	r2, [pc, #204]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b31      	ldr	r3, [pc, #196]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a2c      	ldr	r2, [pc, #176]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001c14:	f043 0310 	orr.w	r3, r3, #16
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <MX_GPIO_Init+0x108>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2102      	movs	r1, #2
 8001c46:	4820      	ldr	r0, [pc, #128]	; (8001cc8 <MX_GPIO_Init+0x10c>)
 8001c48:	f001 fdf4 	bl	8003834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001c52:	481e      	ldr	r0, [pc, #120]	; (8001ccc <MX_GPIO_Init+0x110>)
 8001c54:	f001 fdee 	bl	8003834 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5e:	481c      	ldr	r0, [pc, #112]	; (8001cd0 <MX_GPIO_Init+0x114>)
 8001c60:	f001 fde8 	bl	8003834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001c64:	2302      	movs	r3, #2
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <MX_GPIO_Init+0x10c>)
 8001c7c:	f001 fc3e 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001c80:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001c84:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <MX_GPIO_Init+0x110>)
 8001c9a:	f001 fc2f 	bl	80034fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <MX_GPIO_Init+0x114>)
 8001cb8:	f001 fc20 	bl	80034fc <HAL_GPIO_Init>

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001cdc:	f000 fe64 	bl	80029a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce0:	f000 f8c6 	bl	8001e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce4:	f7ff ff6a 	bl	8001bbc <MX_GPIO_Init>
  MX_DMA_Init();
 8001ce8:	f7ff ff48 	bl	8001b7c <MX_DMA_Init>
  MX_TIM1_Init();
 8001cec:	f000 fbb2 	bl	8002454 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001cf0:	f000 fc00 	bl	80024f4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001cf4:	f000 fd16 	bl	8002724 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001cf8:	f004 ff10 	bl	8006b1c <MX_FATFS_Init>
  MX_SPI1_Init();
 8001cfc:	f000 f93c 	bl	8001f78 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8001d00:	f000 fdb4 	bl	800286c <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8001d04:	2000      	movs	r0, #0
 8001d06:	f000 fe03 	bl	8002910 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8001d0a:	220a      	movs	r2, #10
 8001d0c:	210a      	movs	r1, #10
 8001d0e:	200a      	movs	r0, #10
 8001d10:	f000 fe22 	bl	8002958 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f000 fe1d 	bl	8002958 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	f240 103f 	movw	r0, #319	; 0x13f
 8001d26:	f000 fe17 	bl	8002958 <UB_VGA_SetPixel>




  unsigned int i = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc



  for(i = 0; i < LINE_BUFLEN; i++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001d36:	e00b      	b.n	8001d50 <main+0x7c>
	  input.line_rx_buffer[i] = 0;
 8001d38:	4a48      	ldr	r2, [pc, #288]	; (8001e5c <main+0x188>)
 8001d3a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001d3e:	4413      	add	r3, r2
 8001d40:	3301      	adds	r3, #1
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8001d46:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001d50:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d58:	d3ee      	bcc.n	8001d38 <main+0x64>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8001d5a:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <main+0x188>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <main+0x188>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 8001d68:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <main+0x188>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, LINE_BUFLEN);
 8001d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d74:	4939      	ldr	r1, [pc, #228]	; (8001e5c <main+0x188>)
 8001d76:	483a      	ldr	r0, [pc, #232]	; (8001e60 <main+0x18c>)
 8001d78:	f003 ff2d 	bl	8005bd6 <HAL_UART_Receive_IT>

  int Test = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <main+0x188>)
 8001d84:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8001d88:	2bff      	cmp	r3, #255	; 0xff
 8001d8a:	d1fa      	bne.n	8001d82 <main+0xae>
	  {
		  Debugging = LogicLayer_Parser(input.line_rx_buffer, LINE_BUFLEN);
 8001d8c:	4c35      	ldr	r4, [pc, #212]	; (8001e64 <main+0x190>)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d94:	4934      	ldr	r1, [pc, #208]	; (8001e68 <main+0x194>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fc04 	bl	80015a4 <LogicLayer_Parser>
 8001d9c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001da0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001da4:	4620      	mov	r0, r4
 8001da6:	4619      	mov	r1, r3
 8001da8:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8001dac:	461a      	mov	r2, r3
 8001dae:	f007 fdb5 	bl	800991c <memcpy>
		  Test = LogicLayer_CommandCheck(&Debugging);
 8001db2:	482c      	ldr	r0, [pc, #176]	; (8001e64 <main+0x190>)
 8001db4:	f7ff fcd4 	bl	8001760 <LogicLayer_CommandCheck>
 8001db8:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
		  if (Test == 0)
 8001dbc:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <main+0xfe>
		  {
			  //error handler
		  }
		  else
		  {
			  LogicLayer_CommandSwitch(&Debugging, Test);
 8001dc4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4825      	ldr	r0, [pc, #148]	; (8001e64 <main+0x190>)
 8001dce:	f7ff fcfb 	bl	80017c8 <LogicLayer_CommandSwitch>

		  }
		  for(i = 0; i < LINE_BUFLEN; i++)
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001dd8:	e00b      	b.n	8001df2 <main+0x11e>
			  input.line_rx_buffer[i] = 0;
 8001dda:	4a20      	ldr	r2, [pc, #128]	; (8001e5c <main+0x188>)
 8001ddc:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001de0:	4413      	add	r3, r2
 8001de2:	3301      	adds	r3, #1
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
		  for(i = 0; i < LINE_BUFLEN; i++)
 8001de8:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001dec:	3301      	adds	r3, #1
 8001dee:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001df2:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dfa:	d3ee      	bcc.n	8001dda <main+0x106>
		  for (i = 0; i < ARGUMENTEN_LEN; i++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001e02:	e01e      	b.n	8001e42 <main+0x16e>
			  for (int j = 0; j < BUFFER_LEN_PARSER; j++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8001e0a:	e011      	b.n	8001e30 <main+0x15c>
				  Debugging.Parser_Message[i][j] = 0;
 8001e0c:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <main+0x190>)
 8001e0e:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001e12:	2132      	movs	r1, #50	; 0x32
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	441a      	add	r2, r3
 8001e1a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001e1e:	4413      	add	r3, r2
 8001e20:	3301      	adds	r3, #1
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
			  for (int j = 0; j < BUFFER_LEN_PARSER; j++)
 8001e26:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8001e30:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8001e34:	2b31      	cmp	r3, #49	; 0x31
 8001e36:	dde9      	ble.n	8001e0c <main+0x138>
		  for (i = 0; i < ARGUMENTEN_LEN; i++)
 8001e38:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8001e42:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001e46:	2b13      	cmp	r3, #19
 8001e48:	d9dc      	bls.n	8001e04 <main+0x130>




		  // Do some stuff
		  printf("yes\n");
 8001e4a:	4808      	ldr	r0, [pc, #32]	; (8001e6c <main+0x198>)
 8001e4c:	f007 fe02 	bl	8009a54 <puts>
		  //UB_VGA_FillScreen(colorTest);


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8001e50:	4b02      	ldr	r3, [pc, #8]	; (8001e5c <main+0x188>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8001e58:	e793      	b.n	8001d82 <main+0xae>
 8001e5a:	bf00      	nop
 8001e5c:	200000a4 	.word	0x200000a4
 8001e60:	200009ec 	.word	0x200009ec
 8001e64:	200004b4 	.word	0x200004b4
 8001e68:	200000a5 	.word	0x200000a5
 8001e6c:	0800a9ec 	.word	0x0800a9ec

08001e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b094      	sub	sp, #80	; 0x50
 8001e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	2230      	movs	r2, #48	; 0x30
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f007 fd5a 	bl	8009938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <SystemClock_Config+0xcc>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <SystemClock_Config+0xcc>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <SystemClock_Config+0xcc>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <SystemClock_Config+0xd0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <SystemClock_Config+0xd0>)
 8001eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <SystemClock_Config+0xd0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ee0:	2304      	movs	r3, #4
 8001ee2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ee4:	23a8      	movs	r3, #168	; 0xa8
 8001ee6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001eec:	2307      	movs	r3, #7
 8001eee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef0:	f107 0320 	add.w	r3, r7, #32
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f001 fcb7 	bl	8003868 <HAL_RCC_OscConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f00:	f000 f832 	bl	8001f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f04:	230f      	movs	r3, #15
 8001f06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	2105      	movs	r1, #5
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 ff18 	bl	8003d58 <HAL_RCC_ClockConfig>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f2e:	f000 f81b 	bl	8001f68 <Error_Handler>
  }
}
 8001f32:	bf00      	nop
 8001f34:	3750      	adds	r7, #80	; 0x50
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000

08001f44 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8001f4c:	1d39      	adds	r1, r7, #4
 8001f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f52:	2201      	movs	r2, #1
 8001f54:	4803      	ldr	r0, [pc, #12]	; (8001f64 <__io_putchar+0x20>)
 8001f56:	f003 fdac 	bl	8005ab2 <HAL_UART_Transmit>
	return ch;												//Return the character
 8001f5a:	687b      	ldr	r3, [r7, #4]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200009ec 	.word	0x200009ec

08001f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f7e:	4a18      	ldr	r2, [pc, #96]	; (8001fe0 <MX_SPI1_Init+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fac:	2238      	movs	r2, #56	; 0x38
 8001fae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fbc:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fc4:	220a      	movs	r2, #10
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <MX_SPI1_Init+0x64>)
 8001fca:	f002 f8e5 	bl	8004198 <HAL_SPI_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fd4:	f7ff ffc8 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200008a0 	.word	0x200008a0
 8001fe0:	40013000 	.word	0x40013000

08001fe4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <HAL_SPI_MspInit+0xc0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d149      	bne.n	800209a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <HAL_SPI_MspInit+0xc4>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800205a:	23c0      	movs	r3, #192	; 0xc0
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002062:	2301      	movs	r3, #1
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800206a:	2305      	movs	r3, #5
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <HAL_SPI_MspInit+0xc8>)
 8002076:	f001 fa41 	bl	80034fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800207a:	2308      	movs	r3, #8
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002082:	2301      	movs	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800208a:	2305      	movs	r3, #5
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4806      	ldr	r0, [pc, #24]	; (80020b0 <HAL_SPI_MspInit+0xcc>)
 8002096:	f001 fa31 	bl	80034fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800209a:	bf00      	nop
 800209c:	3728      	adds	r7, #40	; 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40013000 	.word	0x40013000
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020400 	.word	0x40020400

080020b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <HAL_MspInit+0x4c>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <HAL_MspInit+0x4c>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_MspInit+0x4c>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_MspInit+0x4c>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a08      	ldr	r2, [pc, #32]	; (8002100 <HAL_MspInit+0x4c>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_MspInit+0x4c>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <HardFault_Handler+0x4>

08002118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <MemManage_Handler+0x4>

0800211e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <UsageFault_Handler+0x4>

0800212a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002158:	f000 fc78 	bl	8002a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	bd80      	pop	{r7, pc}

08002160 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002164:	4828      	ldr	r0, [pc, #160]	; (8002208 <TIM2_IRQHandler+0xa8>)
 8002166:	f002 fdf3 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 800216a:	4b27      	ldr	r3, [pc, #156]	; (8002208 <TIM2_IRQHandler+0xa8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f06f 0208 	mvn.w	r2, #8
 8002172:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <TIM2_IRQHandler+0xac>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	4b23      	ldr	r3, [pc, #140]	; (800220c <TIM2_IRQHandler+0xac>)
 800217e:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <TIM2_IRQHandler+0xac>)
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8002188:	d905      	bls.n	8002196 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <TIM2_IRQHandler+0xac>)
 800218c:	2200      	movs	r2, #0
 800218e:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8002190:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <TIM2_IRQHandler+0xb0>)
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <TIM2_IRQHandler+0xac>)
 8002194:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <TIM2_IRQHandler+0xac>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d802      	bhi.n	80021a4 <TIM2_IRQHandler+0x44>
 800219e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80021a2:	e001      	b.n	80021a8 <TIM2_IRQHandler+0x48>
 80021a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <TIM2_IRQHandler+0xb4>)
 80021aa:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <TIM2_IRQHandler+0xac>)
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	2b23      	cmp	r3, #35	; 0x23
 80021b2:	d927      	bls.n	8002204 <TIM2_IRQHandler+0xa4>
 80021b4:	4b15      	ldr	r3, [pc, #84]	; (800220c <TIM2_IRQHandler+0xac>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	f240 2202 	movw	r2, #514	; 0x202
 80021bc:	4293      	cmp	r3, r2
 80021be:	d821      	bhi.n	8002204 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80021c0:	4a15      	ldr	r2, [pc, #84]	; (8002218 <TIM2_IRQHandler+0xb8>)
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <TIM2_IRQHandler+0xac>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80021c8:	4a13      	ldr	r2, [pc, #76]	; (8002218 <TIM2_IRQHandler+0xb8>)
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <TIM2_IRQHandler+0xac>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <TIM2_IRQHandler+0xbc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <TIM2_IRQHandler+0xbc>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80021dc:	4b10      	ldr	r3, [pc, #64]	; (8002220 <TIM2_IRQHandler+0xc0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <TIM2_IRQHandler+0xc0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <TIM2_IRQHandler+0xac>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <TIM2_IRQHandler+0xac>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f203 1341 	addw	r3, r3, #321	; 0x141
 8002200:	4a02      	ldr	r2, [pc, #8]	; (800220c <TIM2_IRQHandler+0xac>)
 8002202:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000944 	.word	0x20000944
 800220c:	20013720 	.word	0x20013720
 8002210:	20000a30 	.word	0x20000a30
 8002214:	40020400 	.word	0x40020400
 8002218:	40026488 	.word	0x40026488
 800221c:	40010000 	.word	0x40010000
 8002220:	2000098c 	.word	0x2000098c

08002224 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 800222a:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <USART2_IRQHandler+0x70>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	2b0a      	cmp	r3, #10
 8002234:	d026      	beq.n	8002284 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b0d      	cmp	r3, #13
 800223a:	d002      	beq.n	8002242 <USART2_IRQHandler+0x1e>
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b2e      	cmp	r3, #46	; 0x2e
 8002240:	d10e      	bne.n	8002260 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <USART2_IRQHandler+0x74>)
 8002244:	22ff      	movs	r2, #255	; 0xff
 8002246:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 800224a:	4b13      	ldr	r3, [pc, #76]	; (8002298 <USART2_IRQHandler+0x74>)
 800224c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <USART2_IRQHandler+0x74>)
 8002252:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <USART2_IRQHandler+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800225e:	e011      	b.n	8002284 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <USART2_IRQHandler+0x74>)
 8002262:	2200      	movs	r2, #0
 8002264:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8002268:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <USART2_IRQHandler+0x74>)
 800226a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <USART2_IRQHandler+0x74>)
 8002270:	4413      	add	r3, r2
 8002272:	79fa      	ldrb	r2, [r7, #7]
 8002274:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <USART2_IRQHandler+0x74>)
 8002278:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800227c:	3301      	adds	r3, #1
 800227e:	4a06      	ldr	r2, [pc, #24]	; (8002298 <USART2_IRQHandler+0x74>)
 8002280:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002284:	4805      	ldr	r0, [pc, #20]	; (800229c <USART2_IRQHandler+0x78>)
 8002286:	f003 fcd7 	bl	8005c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40004400 	.word	0x40004400
 8002298:	200000a4 	.word	0x200000a4
 800229c:	200009ec 	.word	0x200009ec

080022a0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <DMA2_Stream5_IRQHandler+0x48>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10f      	bne.n	80022d4 <DMA2_Stream5_IRQHandler+0x34>
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <DMA2_Stream5_IRQHandler+0x48>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6a1a      	ldr	r2, [r3, #32]
 80022ba:	f240 4344 	movw	r3, #1092	; 0x444
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d107      	bne.n	80022d4 <DMA2_Stream5_IRQHandler+0x34>
 80022c4:	4b08      	ldr	r3, [pc, #32]	; (80022e8 <DMA2_Stream5_IRQHandler+0x48>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <DMA2_Stream5_IRQHandler+0x48>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <DMA2_Stream5_IRQHandler+0x4c>)
 80022d6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80022da:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <DMA2_Stream5_IRQHandler+0x50>)
 80022de:	f000 fea3 	bl	8003028 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200008fc 	.word	0x200008fc
 80022ec:	40021000 	.word	0x40021000
 80022f0:	2000098c 	.word	0x2000098c

080022f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e00a      	b.n	800231c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002306:	f3af 8000 	nop.w
 800230a:	4601      	mov	r1, r0
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60ba      	str	r2, [r7, #8]
 8002312:	b2ca      	uxtb	r2, r1
 8002314:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3301      	adds	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	dbf0      	blt.n	8002306 <_read+0x12>
	}

return len;
 8002324:	687b      	ldr	r3, [r7, #4]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e009      	b.n	8002354 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	60ba      	str	r2, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fdfb 	bl	8001f44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf1      	blt.n	8002340 <_write+0x12>
	}
	return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_close>:

int _close(int file)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
	return -1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238e:	605a      	str	r2, [r3, #4]
	return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_isatty>:

int _isatty(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
	return 1;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
	return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <_sbrk+0x50>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <_sbrk+0x16>
		heap_end = &end;
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <_sbrk+0x50>)
 80023e2:	4a10      	ldr	r2, [pc, #64]	; (8002424 <_sbrk+0x54>)
 80023e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <_sbrk+0x50>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <_sbrk+0x50>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4413      	add	r3, r2
 80023f4:	466a      	mov	r2, sp
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d907      	bls.n	800240a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023fa:	f007 fa65 	bl	80098c8 <__errno>
 80023fe:	4603      	mov	r3, r0
 8002400:	220c      	movs	r2, #12
 8002402:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002408:	e006      	b.n	8002418 <_sbrk+0x48>
	}

	heap_end += incr;
 800240a:	4b05      	ldr	r3, [pc, #20]	; (8002420 <_sbrk+0x50>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	4a03      	ldr	r2, [pc, #12]	; (8002420 <_sbrk+0x50>)
 8002414:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002416:	68fb      	ldr	r3, [r7, #12]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	200008f8 	.word	0x200008f8
 8002424:	20013788 	.word	0x20013788

08002428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <SystemInit+0x28>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	4a07      	ldr	r2, [pc, #28]	; (8002450 <SystemInit+0x28>)
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <SystemInit+0x28>)
 800243e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002442:	609a      	str	r2, [r3, #8]
#endif
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245a:	f107 0308 	add.w	r3, r7, #8
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002468:	463b      	mov	r3, r7
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002470:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <MX_TIM1_Init+0x98>)
 8002472:	4a1f      	ldr	r2, [pc, #124]	; (80024f0 <MX_TIM1_Init+0x9c>)
 8002474:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <MX_TIM1_Init+0x98>)
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_TIM1_Init+0x98>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <MX_TIM1_Init+0x98>)
 8002484:	220b      	movs	r2, #11
 8002486:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002488:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_TIM1_Init+0x98>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <MX_TIM1_Init+0x98>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_TIM1_Init+0x98>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800249a:	4814      	ldr	r0, [pc, #80]	; (80024ec <MX_TIM1_Init+0x98>)
 800249c:	f002 f972 	bl	8004784 <HAL_TIM_Base_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80024a6:	f7ff fd5f 	bl	8001f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024b0:	f107 0308 	add.w	r3, r7, #8
 80024b4:	4619      	mov	r1, r3
 80024b6:	480d      	ldr	r0, [pc, #52]	; (80024ec <MX_TIM1_Init+0x98>)
 80024b8:	f002 fe14 	bl	80050e4 <HAL_TIM_ConfigClockSource>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80024c2:	f7ff fd51 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024ce:	463b      	mov	r3, r7
 80024d0:	4619      	mov	r1, r3
 80024d2:	4806      	ldr	r0, [pc, #24]	; (80024ec <MX_TIM1_Init+0x98>)
 80024d4:	f003 fa10 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80024de:	f7ff fd43 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	200008fc 	.word	0x200008fc
 80024f0:	40010000 	.word	0x40010000

080024f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fa:	f107 0320 	add.w	r3, r7, #32
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	611a      	str	r2, [r3, #16]
 8002512:	615a      	str	r2, [r3, #20]
 8002514:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <MX_TIM2_Init+0xcc>)
 8002518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800251c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 800251e:	4b28      	ldr	r3, [pc, #160]	; (80025c0 <MX_TIM2_Init+0xcc>)
 8002520:	2200      	movs	r2, #0
 8002522:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002524:	4b26      	ldr	r3, [pc, #152]	; (80025c0 <MX_TIM2_Init+0xcc>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 800252a:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <MX_TIM2_Init+0xcc>)
 800252c:	f640 226b 	movw	r2, #2667	; 0xa6b
 8002530:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002532:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <MX_TIM2_Init+0xcc>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <MX_TIM2_Init+0xcc>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800253e:	4820      	ldr	r0, [pc, #128]	; (80025c0 <MX_TIM2_Init+0xcc>)
 8002540:	f002 f9d8 	bl	80048f4 <HAL_TIM_PWM_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800254a:	f7ff fd0d 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002556:	f107 0320 	add.w	r3, r7, #32
 800255a:	4619      	mov	r1, r3
 800255c:	4818      	ldr	r0, [pc, #96]	; (80025c0 <MX_TIM2_Init+0xcc>)
 800255e:	f003 f9cb 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002568:	f7ff fcfe 	bl	8001f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256c:	2360      	movs	r3, #96	; 0x60
 800256e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8002570:	f240 13bb 	movw	r3, #443	; 0x1bb
 8002574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002576:	2302      	movs	r3, #2
 8002578:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	2208      	movs	r2, #8
 8002582:	4619      	mov	r1, r3
 8002584:	480e      	ldr	r0, [pc, #56]	; (80025c0 <MX_TIM2_Init+0xcc>)
 8002586:	f002 fceb 	bl	8004f60 <HAL_TIM_PWM_ConfigChannel>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002590:	f7ff fcea 	bl	8001f68 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8002594:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002598:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	220c      	movs	r2, #12
 800259e:	4619      	mov	r1, r3
 80025a0:	4807      	ldr	r0, [pc, #28]	; (80025c0 <MX_TIM2_Init+0xcc>)
 80025a2:	f002 fcdd 	bl	8004f60 <HAL_TIM_PWM_ConfigChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80025ac:	f7ff fcdc 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025b0:	4803      	ldr	r0, [pc, #12]	; (80025c0 <MX_TIM2_Init+0xcc>)
 80025b2:	f000 f87f 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 80025b6:	bf00      	nop
 80025b8:	3728      	adds	r7, #40	; 0x28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000944 	.word	0x20000944

080025c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a21      	ldr	r2, [pc, #132]	; (8002658 <HAL_TIM_Base_MspInit+0x94>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d13c      	bne.n	8002650 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_TIM_Base_MspInit+0x98>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_TIM_Base_MspInit+0x98>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6453      	str	r3, [r2, #68]	; 0x44
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_TIM_Base_MspInit+0x98>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 80025f4:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_TIM_Base_MspInit+0xa0>)
 80025f6:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 80025fa:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80025fe:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002600:	4b17      	ldr	r3, [pc, #92]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 8002608:	2200      	movs	r2, #0
 800260a:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 800260e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002612:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 8002616:	2200      	movs	r2, #0
 8002618:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800261a:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002626:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 8002628:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800262c:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 8002630:	2200      	movs	r2, #0
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002634:	480a      	ldr	r0, [pc, #40]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 8002636:	f000 fb5f 	bl	8002cf8 <HAL_DMA_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8002640:	f7ff fc92 	bl	8001f68 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a06      	ldr	r2, [pc, #24]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 8002648:	621a      	str	r2, [r3, #32]
 800264a:	4a05      	ldr	r2, [pc, #20]	; (8002660 <HAL_TIM_Base_MspInit+0x9c>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40010000 	.word	0x40010000
 800265c:	40023800 	.word	0x40023800
 8002660:	2000098c 	.word	0x2000098c
 8002664:	40026488 	.word	0x40026488

08002668 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002678:	d115      	bne.n	80026a6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_TIM_PWM_MspInit+0x48>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <HAL_TIM_PWM_MspInit+0x48>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6413      	str	r3, [r2, #64]	; 0x40
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_TIM_PWM_MspInit+0x48>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	201c      	movs	r0, #28
 800269c:	f000 faf5 	bl	8002c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026a0:	201c      	movs	r0, #28
 80026a2:	f000 fb0e 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800

080026b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d4:	d11e      	bne.n	8002714 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_TIM_MspPostInit+0x68>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a0f      	ldr	r2, [pc, #60]	; (800271c <HAL_TIM_MspPostInit+0x68>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_TIM_MspPostInit+0x68>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 80026f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002704:	2301      	movs	r3, #1
 8002706:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	4619      	mov	r1, r3
 800270e:	4804      	ldr	r0, [pc, #16]	; (8002720 <HAL_TIM_MspPostInit+0x6c>)
 8002710:	f000 fef4 	bl	80034fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002714:	bf00      	nop
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	40020400 	.word	0x40020400

08002724 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <MX_USART2_UART_Init+0x50>)
 800272c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800275c:	f003 f95c 	bl	8005a18 <HAL_UART_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002766:	f7ff fbff 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200009ec 	.word	0x200009ec
 8002774:	40004400 	.word	0x40004400

08002778 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_UART_MspInit+0x94>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d133      	bne.n	8002802 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a14      	ldr	r2, [pc, #80]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <HAL_UART_MspInit+0x98>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027d2:	230c      	movs	r3, #12
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027de:	2303      	movs	r3, #3
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027e2:	2307      	movs	r3, #7
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	4809      	ldr	r0, [pc, #36]	; (8002814 <HAL_UART_MspInit+0x9c>)
 80027ee:	f000 fe85 	bl	80034fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	2026      	movs	r0, #38	; 0x26
 80027f8:	f000 fa47 	bl	8002c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027fc:	2026      	movs	r0, #38	; 0x26
 80027fe:	f000 fa60 	bl	8002cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40004400 	.word	0x40004400
 8002810:	40023800 	.word	0x40023800
 8002814:	40020000 	.word	0x40020000

08002818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002850 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800281c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800281e:	e003      	b.n	8002828 <LoopCopyDataInit>

08002820 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002822:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002824:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002826:	3104      	adds	r1, #4

08002828 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002828:	480b      	ldr	r0, [pc, #44]	; (8002858 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800282c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800282e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002830:	d3f6      	bcc.n	8002820 <CopyDataInit>
  ldr  r2, =_sbss
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002834:	e002      	b.n	800283c <LoopFillZerobss>

08002836 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002836:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002838:	f842 3b04 	str.w	r3, [r2], #4

0800283c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800283e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002840:	d3f9      	bcc.n	8002836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002842:	f7ff fdf1 	bl	8002428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002846:	f007 f845 	bl	80098d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800284a:	f7ff fa43 	bl	8001cd4 <main>
  bx  lr    
 800284e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002850:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002854:	08011ab8 	.word	0x08011ab8
  ldr  r0, =_sdata
 8002858:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800285c:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8002860:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002864:	20013788 	.word	0x20013788

08002868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC_IRQHandler>
	...

0800286c <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8002870:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <UB_VGA_Screen_Init+0x84>)
 8002872:	2200      	movs	r2, #0
 8002874:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <UB_VGA_Screen_Init+0x84>)
 8002878:	2200      	movs	r2, #0
 800287a:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <UB_VGA_Screen_Init+0x84>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <UB_VGA_Screen_Init+0x88>)
 8002884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002888:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800288a:	481b      	ldr	r0, [pc, #108]	; (80028f8 <UB_VGA_Screen_Init+0x8c>)
 800288c:	f001 ffca 	bl	8004824 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002890:	210c      	movs	r1, #12
 8002892:	4819      	ldr	r0, [pc, #100]	; (80028f8 <UB_VGA_Screen_Init+0x8c>)
 8002894:	f002 f87e 	bl	8004994 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8002898:	2108      	movs	r1, #8
 800289a:	4817      	ldr	r0, [pc, #92]	; (80028f8 <UB_VGA_Screen_Init+0x8c>)
 800289c:	f002 f942 	bl	8004b24 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <UB_VGA_Screen_Init+0x90>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <UB_VGA_Screen_Init+0x90>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ae:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <UB_VGA_Screen_Init+0x90>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <UB_VGA_Screen_Init+0x90>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80028c0:	490f      	ldr	r1, [pc, #60]	; (8002900 <UB_VGA_Screen_Init+0x94>)
 80028c2:	f240 1341 	movw	r3, #321	; 0x141
 80028c6:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <UB_VGA_Screen_Init+0x98>)
 80028c8:	480f      	ldr	r0, [pc, #60]	; (8002908 <UB_VGA_Screen_Init+0x9c>)
 80028ca:	f000 fac3 	bl	8002e54 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80028ce:	480e      	ldr	r0, [pc, #56]	; (8002908 <UB_VGA_Screen_Init+0x9c>)
 80028d0:	f000 fa12 	bl	8002cf8 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <UB_VGA_Screen_Init+0x9c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <UB_VGA_Screen_Init+0x9c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0210 	orr.w	r2, r2, #16
 80028e2:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <UB_VGA_Screen_Init+0xa0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a01      	ldr	r2, [pc, #4]	; (80028f0 <UB_VGA_Screen_Init+0x84>)
 80028ea:	6093      	str	r3, [r2, #8]
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20013720 	.word	0x20013720
 80028f4:	40020400 	.word	0x40020400
 80028f8:	20000944 	.word	0x20000944
 80028fc:	200008fc 	.word	0x200008fc
 8002900:	20000a30 	.word	0x20000a30
 8002904:	40021015 	.word	0x40021015
 8002908:	2000098c 	.word	0x2000098c
 800290c:	40026488 	.word	0x40026488

08002910 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800291a:	2300      	movs	r3, #0
 800291c:	81bb      	strh	r3, [r7, #12]
 800291e:	e012      	b.n	8002946 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002920:	2300      	movs	r3, #0
 8002922:	81fb      	strh	r3, [r7, #14]
 8002924:	e008      	b.n	8002938 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8002926:	79fa      	ldrb	r2, [r7, #7]
 8002928:	89b9      	ldrh	r1, [r7, #12]
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	4618      	mov	r0, r3
 800292e:	f000 f813 	bl	8002958 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	3301      	adds	r3, #1
 8002936:	81fb      	strh	r3, [r7, #14]
 8002938:	89fb      	ldrh	r3, [r7, #14]
 800293a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800293e:	d3f2      	bcc.n	8002926 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8002940:	89bb      	ldrh	r3, [r7, #12]
 8002942:	3301      	adds	r3, #1
 8002944:	81bb      	strh	r3, [r7, #12]
 8002946:	89bb      	ldrh	r3, [r7, #12]
 8002948:	2bef      	cmp	r3, #239	; 0xef
 800294a:	d9e9      	bls.n	8002920 <UB_VGA_FillScreen+0x10>
    }
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
 8002962:	460b      	mov	r3, r1
 8002964:	80bb      	strh	r3, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002970:	d301      	bcc.n	8002976 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8002976:	88bb      	ldrh	r3, [r7, #4]
 8002978:	2bef      	cmp	r3, #239	; 0xef
 800297a:	d901      	bls.n	8002980 <UB_VGA_SetPixel+0x28>
    yp = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8002980:	88ba      	ldrh	r2, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	019b      	lsls	r3, r3, #6
 800298a:	441a      	add	r2, r3
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	4413      	add	r3, r2
 8002990:	4904      	ldr	r1, [pc, #16]	; (80029a4 <UB_VGA_SetPixel+0x4c>)
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	54ca      	strb	r2, [r1, r3]
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000a30 	.word	0x20000a30

080029a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_Init+0x40>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <HAL_Init+0x40>)
 80029b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_Init+0x40>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <HAL_Init+0x40>)
 80029be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <HAL_Init+0x40>)
 80029ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d0:	2003      	movs	r0, #3
 80029d2:	f000 f94f 	bl	8002c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f000 f808 	bl	80029ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029dc:	f7ff fb6a 	bl	80020b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023c00 	.word	0x40023c00

080029ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <HAL_InitTick+0x54>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_InitTick+0x58>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	4619      	mov	r1, r3
 80029fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f967 	bl	8002cde <HAL_SYSTICK_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00e      	b.n	8002a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b0f      	cmp	r3, #15
 8002a1e:	d80a      	bhi.n	8002a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a20:	2200      	movs	r2, #0
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a28:	f000 f92f 	bl	8002c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a2c:	4a06      	ldr	r2, [pc, #24]	; (8002a48 <HAL_InitTick+0x5c>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000008 	.word	0x20000008
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_IncTick+0x20>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_IncTick+0x24>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_IncTick+0x24>)
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	2001372c 	.word	0x2001372c

08002a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return uwTick;
 8002a78:	4b03      	ldr	r3, [pc, #12]	; (8002a88 <HAL_GetTick+0x14>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	2001372c 	.word	0x2001372c

08002a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7ff ffee 	bl	8002a74 <HAL_GetTick>
 8002a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa4:	d005      	beq.n	8002ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_Delay+0x44>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ab2:	bf00      	nop
 8002ab4:	f7ff ffde 	bl	8002a74 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d8f7      	bhi.n	8002ab4 <HAL_Delay+0x28>
  {
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	bf00      	nop
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000008 	.word	0x20000008

08002ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af0:	4013      	ands	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b06:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <__NVIC_SetPriorityGrouping+0x44>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	60d3      	str	r3, [r2, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b20:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <__NVIC_GetPriorityGrouping+0x18>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 0307 	and.w	r3, r3, #7
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	db0b      	blt.n	8002b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	f003 021f 	and.w	r2, r3, #31
 8002b50:	4907      	ldr	r1, [pc, #28]	; (8002b70 <__NVIC_EnableIRQ+0x38>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	2001      	movs	r0, #1
 8002b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	e000e100 	.word	0xe000e100

08002b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	db0a      	blt.n	8002b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	490c      	ldr	r1, [pc, #48]	; (8002bc0 <__NVIC_SetPriority+0x4c>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	0112      	lsls	r2, r2, #4
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	440b      	add	r3, r1
 8002b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b9c:	e00a      	b.n	8002bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4908      	ldr	r1, [pc, #32]	; (8002bc4 <__NVIC_SetPriority+0x50>)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	3b04      	subs	r3, #4
 8002bac:	0112      	lsls	r2, r2, #4
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	761a      	strb	r2, [r3, #24]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000e100 	.word	0xe000e100
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f1c3 0307 	rsb	r3, r3, #7
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	bf28      	it	cs
 8002be6:	2304      	movcs	r3, #4
 8002be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3304      	adds	r3, #4
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d902      	bls.n	8002bf8 <NVIC_EncodePriority+0x30>
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3b03      	subs	r3, #3
 8002bf6:	e000      	b.n	8002bfa <NVIC_EncodePriority+0x32>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43da      	mvns	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	4313      	orrs	r3, r2
         );
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3724      	adds	r7, #36	; 0x24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c40:	d301      	bcc.n	8002c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00f      	b.n	8002c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c46:	4a0a      	ldr	r2, [pc, #40]	; (8002c70 <SysTick_Config+0x40>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c4e:	210f      	movs	r1, #15
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c54:	f7ff ff8e 	bl	8002b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <SysTick_Config+0x40>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c5e:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <SysTick_Config+0x40>)
 8002c60:	2207      	movs	r2, #7
 8002c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	e000e010 	.word	0xe000e010

08002c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff ff29 	bl	8002ad4 <__NVIC_SetPriorityGrouping>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4603      	mov	r3, r0
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c9c:	f7ff ff3e 	bl	8002b1c <__NVIC_GetPriorityGrouping>
 8002ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff8e 	bl	8002bc8 <NVIC_EncodePriority>
 8002cac:	4602      	mov	r2, r0
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff ff5d 	bl	8002b74 <__NVIC_SetPriority>
}
 8002cba:	bf00      	nop
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff ff31 	bl	8002b38 <__NVIC_EnableIRQ>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7ff ffa2 	bl	8002c30 <SysTick_Config>
 8002cec:	4603      	mov	r3, r0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff feb6 	bl	8002a74 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e099      	b.n	8002e48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d34:	e00f      	b.n	8002d56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d36:	f7ff fe9d 	bl	8002a74 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d908      	bls.n	8002d56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e078      	b.n	8002e48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1e8      	bne.n	8002d36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	4b38      	ldr	r3, [pc, #224]	; (8002e50 <HAL_DMA_Init+0x158>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d107      	bne.n	8002dc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4313      	orrs	r3, r2
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f023 0307 	bic.w	r3, r3, #7
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d117      	bne.n	8002e1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00e      	beq.n	8002e1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fb01 	bl	8003404 <DMA_CheckFifoParam>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e16:	2301      	movs	r3, #1
 8002e18:	e016      	b.n	8002e48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fab8 	bl	8003398 <DMA_CalcBaseAndBitshift>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	223f      	movs	r2, #63	; 0x3f
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	f010803f 	.word	0xf010803f

08002e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_DMA_Start_IT+0x26>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e040      	b.n	8002efc <HAL_DMA_Start_IT+0xa8>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d12f      	bne.n	8002eee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2202      	movs	r2, #2
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa4a 	bl	800333c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eac:	223f      	movs	r2, #63	; 0x3f
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0216 	orr.w	r2, r2, #22
 8002ec2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0208 	orr.w	r2, r2, #8
 8002eda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e005      	b.n	8002efa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f12:	f7ff fdaf 	bl	8002a74 <HAL_GetTick>
 8002f16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d008      	beq.n	8002f36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e052      	b.n	8002fdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0216 	bic.w	r2, r2, #22
 8002f44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <HAL_DMA_Abort+0x62>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0208 	bic.w	r2, r2, #8
 8002f74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f86:	e013      	b.n	8002fb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f88:	f7ff fd74 	bl	8002a74 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d90c      	bls.n	8002fb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e015      	b.n	8002fdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e4      	bne.n	8002f88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	223f      	movs	r2, #63	; 0x3f
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d004      	beq.n	8003002 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2280      	movs	r2, #128	; 0x80
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00c      	b.n	800301c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2205      	movs	r2, #5
 8003006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003034:	4b8e      	ldr	r3, [pc, #568]	; (8003270 <HAL_DMA_IRQHandler+0x248>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a8e      	ldr	r2, [pc, #568]	; (8003274 <HAL_DMA_IRQHandler+0x24c>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	0a9b      	lsrs	r3, r3, #10
 8003040:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	2208      	movs	r2, #8
 8003054:	409a      	lsls	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01a      	beq.n	8003094 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0204 	bic.w	r2, r2, #4
 800307a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	2208      	movs	r2, #8
 8003082:	409a      	lsls	r2, r3
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	f043 0201 	orr.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003098:	2201      	movs	r2, #1
 800309a:	409a      	lsls	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d012      	beq.n	80030ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b6:	2201      	movs	r2, #1
 80030b8:	409a      	lsls	r2, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f043 0202 	orr.w	r2, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	2204      	movs	r2, #4
 80030d0:	409a      	lsls	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	2204      	movs	r2, #4
 80030ee:	409a      	lsls	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	f043 0204 	orr.w	r2, r3, #4
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	2210      	movs	r2, #16
 8003106:	409a      	lsls	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d043      	beq.n	8003198 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d03c      	beq.n	8003198 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	2210      	movs	r2, #16
 8003124:	409a      	lsls	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d018      	beq.n	800316a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d108      	bne.n	8003158 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d024      	beq.n	8003198 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4798      	blx	r3
 8003156:	e01f      	b.n	8003198 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01b      	beq.n	8003198 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4798      	blx	r3
 8003168:	e016      	b.n	8003198 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0208 	bic.w	r2, r2, #8
 8003186:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	2220      	movs	r2, #32
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 808f 	beq.w	80032c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8087 	beq.w	80032c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031be:	2220      	movs	r2, #32
 80031c0:	409a      	lsls	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b05      	cmp	r3, #5
 80031d0:	d136      	bne.n	8003240 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0216 	bic.w	r2, r2, #22
 80031e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <HAL_DMA_IRQHandler+0x1da>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0208 	bic.w	r2, r2, #8
 8003210:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	223f      	movs	r2, #63	; 0x3f
 8003218:	409a      	lsls	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003232:	2b00      	cmp	r3, #0
 8003234:	d07e      	beq.n	8003334 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	4798      	blx	r3
        }
        return;
 800323e:	e079      	b.n	8003334 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01d      	beq.n	800328a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10d      	bne.n	8003278 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	2b00      	cmp	r3, #0
 8003262:	d031      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
 800326c:	e02c      	b.n	80032c8 <HAL_DMA_IRQHandler+0x2a0>
 800326e:	bf00      	nop
 8003270:	20000000 	.word	0x20000000
 8003274:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d023      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
 8003288:	e01e      	b.n	80032c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10f      	bne.n	80032b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0210 	bic.w	r2, r2, #16
 80032a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d032      	beq.n	8003336 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d022      	beq.n	8003322 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2205      	movs	r2, #5
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	3301      	adds	r3, #1
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d307      	bcc.n	8003310 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f2      	bne.n	80032f4 <HAL_DMA_IRQHandler+0x2cc>
 800330e:	e000      	b.n	8003312 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003310:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	4798      	blx	r3
 8003332:	e000      	b.n	8003336 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003334:	bf00      	nop
    }
  }
}
 8003336:	3718      	adds	r7, #24
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003358:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d108      	bne.n	800337c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800337a:	e007      	b.n	800338c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	60da      	str	r2, [r3, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	3b10      	subs	r3, #16
 80033a8:	4a14      	ldr	r2, [pc, #80]	; (80033fc <DMA_CalcBaseAndBitshift+0x64>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033b2:	4a13      	ldr	r2, [pc, #76]	; (8003400 <DMA_CalcBaseAndBitshift+0x68>)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d909      	bls.n	80033da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	1d1a      	adds	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	659a      	str	r2, [r3, #88]	; 0x58
 80033d8:	e007      	b.n	80033ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	aaaaaaab 	.word	0xaaaaaaab
 8003400:	08011988 	.word	0x08011988

08003404 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d11f      	bne.n	800345e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d856      	bhi.n	80034d2 <DMA_CheckFifoParam+0xce>
 8003424:	a201      	add	r2, pc, #4	; (adr r2, 800342c <DMA_CheckFifoParam+0x28>)
 8003426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342a:	bf00      	nop
 800342c:	0800343d 	.word	0x0800343d
 8003430:	0800344f 	.word	0x0800344f
 8003434:	0800343d 	.word	0x0800343d
 8003438:	080034d3 	.word	0x080034d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d046      	beq.n	80034d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344c:	e043      	b.n	80034d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003456:	d140      	bne.n	80034da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345c:	e03d      	b.n	80034da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003466:	d121      	bne.n	80034ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b03      	cmp	r3, #3
 800346c:	d837      	bhi.n	80034de <DMA_CheckFifoParam+0xda>
 800346e:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <DMA_CheckFifoParam+0x70>)
 8003470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003474:	08003485 	.word	0x08003485
 8003478:	0800348b 	.word	0x0800348b
 800347c:	08003485 	.word	0x08003485
 8003480:	0800349d 	.word	0x0800349d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	e030      	b.n	80034ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d025      	beq.n	80034e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800349a:	e022      	b.n	80034e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034a4:	d11f      	bne.n	80034e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034aa:	e01c      	b.n	80034e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d903      	bls.n	80034ba <DMA_CheckFifoParam+0xb6>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d003      	beq.n	80034c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034b8:	e018      	b.n	80034ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
      break;
 80034be:	e015      	b.n	80034ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00e      	beq.n	80034ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      break;
 80034d0:	e00b      	b.n	80034ea <DMA_CheckFifoParam+0xe6>
      break;
 80034d2:	bf00      	nop
 80034d4:	e00a      	b.n	80034ec <DMA_CheckFifoParam+0xe8>
      break;
 80034d6:	bf00      	nop
 80034d8:	e008      	b.n	80034ec <DMA_CheckFifoParam+0xe8>
      break;
 80034da:	bf00      	nop
 80034dc:	e006      	b.n	80034ec <DMA_CheckFifoParam+0xe8>
      break;
 80034de:	bf00      	nop
 80034e0:	e004      	b.n	80034ec <DMA_CheckFifoParam+0xe8>
      break;
 80034e2:	bf00      	nop
 80034e4:	e002      	b.n	80034ec <DMA_CheckFifoParam+0xe8>
      break;   
 80034e6:	bf00      	nop
 80034e8:	e000      	b.n	80034ec <DMA_CheckFifoParam+0xe8>
      break;
 80034ea:	bf00      	nop
    }
  } 
  
  return status; 
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop

080034fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	e16b      	b.n	80037f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003518:	2201      	movs	r2, #1
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4013      	ands	r3, r2
 800352a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	429a      	cmp	r2, r3
 8003532:	f040 815a 	bne.w	80037ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d005      	beq.n	800354e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800354a:	2b02      	cmp	r3, #2
 800354c:	d130      	bne.n	80035b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	2203      	movs	r2, #3
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4313      	orrs	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003584:	2201      	movs	r2, #1
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 0201 	and.w	r2, r3, #1
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d017      	beq.n	80035ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2203      	movs	r2, #3
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d123      	bne.n	8003640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	08da      	lsrs	r2, r3, #3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3208      	adds	r2, #8
 8003600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	220f      	movs	r2, #15
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	08da      	lsrs	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3208      	adds	r2, #8
 800363a:	69b9      	ldr	r1, [r7, #24]
 800363c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	2203      	movs	r2, #3
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 0203 	and.w	r2, r3, #3
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80b4 	beq.w	80037ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	4b60      	ldr	r3, [pc, #384]	; (8003808 <HAL_GPIO_Init+0x30c>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4a5f      	ldr	r2, [pc, #380]	; (8003808 <HAL_GPIO_Init+0x30c>)
 800368c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003690:	6453      	str	r3, [r2, #68]	; 0x44
 8003692:	4b5d      	ldr	r3, [pc, #372]	; (8003808 <HAL_GPIO_Init+0x30c>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800369e:	4a5b      	ldr	r2, [pc, #364]	; (800380c <HAL_GPIO_Init+0x310>)
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	220f      	movs	r2, #15
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4013      	ands	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a52      	ldr	r2, [pc, #328]	; (8003810 <HAL_GPIO_Init+0x314>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d02b      	beq.n	8003722 <HAL_GPIO_Init+0x226>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a51      	ldr	r2, [pc, #324]	; (8003814 <HAL_GPIO_Init+0x318>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d025      	beq.n	800371e <HAL_GPIO_Init+0x222>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a50      	ldr	r2, [pc, #320]	; (8003818 <HAL_GPIO_Init+0x31c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d01f      	beq.n	800371a <HAL_GPIO_Init+0x21e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a4f      	ldr	r2, [pc, #316]	; (800381c <HAL_GPIO_Init+0x320>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d019      	beq.n	8003716 <HAL_GPIO_Init+0x21a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4e      	ldr	r2, [pc, #312]	; (8003820 <HAL_GPIO_Init+0x324>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d013      	beq.n	8003712 <HAL_GPIO_Init+0x216>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4d      	ldr	r2, [pc, #308]	; (8003824 <HAL_GPIO_Init+0x328>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00d      	beq.n	800370e <HAL_GPIO_Init+0x212>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a4c      	ldr	r2, [pc, #304]	; (8003828 <HAL_GPIO_Init+0x32c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <HAL_GPIO_Init+0x20e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a4b      	ldr	r2, [pc, #300]	; (800382c <HAL_GPIO_Init+0x330>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_GPIO_Init+0x20a>
 8003702:	2307      	movs	r3, #7
 8003704:	e00e      	b.n	8003724 <HAL_GPIO_Init+0x228>
 8003706:	2308      	movs	r3, #8
 8003708:	e00c      	b.n	8003724 <HAL_GPIO_Init+0x228>
 800370a:	2306      	movs	r3, #6
 800370c:	e00a      	b.n	8003724 <HAL_GPIO_Init+0x228>
 800370e:	2305      	movs	r3, #5
 8003710:	e008      	b.n	8003724 <HAL_GPIO_Init+0x228>
 8003712:	2304      	movs	r3, #4
 8003714:	e006      	b.n	8003724 <HAL_GPIO_Init+0x228>
 8003716:	2303      	movs	r3, #3
 8003718:	e004      	b.n	8003724 <HAL_GPIO_Init+0x228>
 800371a:	2302      	movs	r3, #2
 800371c:	e002      	b.n	8003724 <HAL_GPIO_Init+0x228>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_GPIO_Init+0x228>
 8003722:	2300      	movs	r3, #0
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	f002 0203 	and.w	r2, r2, #3
 800372a:	0092      	lsls	r2, r2, #2
 800372c:	4093      	lsls	r3, r2
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4313      	orrs	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003734:	4935      	ldr	r1, [pc, #212]	; (800380c <HAL_GPIO_Init+0x310>)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	089b      	lsrs	r3, r3, #2
 800373a:	3302      	adds	r3, #2
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003742:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <HAL_GPIO_Init+0x334>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003766:	4a32      	ldr	r2, [pc, #200]	; (8003830 <HAL_GPIO_Init+0x334>)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800376c:	4b30      	ldr	r3, [pc, #192]	; (8003830 <HAL_GPIO_Init+0x334>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003790:	4a27      	ldr	r2, [pc, #156]	; (8003830 <HAL_GPIO_Init+0x334>)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <HAL_GPIO_Init+0x334>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	43db      	mvns	r3, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4013      	ands	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ba:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <HAL_GPIO_Init+0x334>)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_GPIO_Init+0x334>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037e4:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_GPIO_Init+0x334>)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3301      	adds	r3, #1
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b0f      	cmp	r3, #15
 80037f4:	f67f ae90 	bls.w	8003518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	3724      	adds	r7, #36	; 0x24
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	40013800 	.word	0x40013800
 8003810:	40020000 	.word	0x40020000
 8003814:	40020400 	.word	0x40020400
 8003818:	40020800 	.word	0x40020800
 800381c:	40020c00 	.word	0x40020c00
 8003820:	40021000 	.word	0x40021000
 8003824:	40021400 	.word	0x40021400
 8003828:	40021800 	.word	0x40021800
 800382c:	40021c00 	.word	0x40021c00
 8003830:	40013c00 	.word	0x40013c00

08003834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	807b      	strh	r3, [r7, #2]
 8003840:	4613      	mov	r3, r2
 8003842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003844:	787b      	ldrb	r3, [r7, #1]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800384a:	887a      	ldrh	r2, [r7, #2]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003850:	e003      	b.n	800385a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003852:	887b      	ldrh	r3, [r7, #2]
 8003854:	041a      	lsls	r2, r3, #16
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	619a      	str	r2, [r3, #24]
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e267      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d075      	beq.n	8003972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003886:	4b88      	ldr	r3, [pc, #544]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b04      	cmp	r3, #4
 8003890:	d00c      	beq.n	80038ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003892:	4b85      	ldr	r3, [pc, #532]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800389a:	2b08      	cmp	r3, #8
 800389c:	d112      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4b82      	ldr	r3, [pc, #520]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	4b7e      	ldr	r3, [pc, #504]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05b      	beq.n	8003970 <HAL_RCC_OscConfig+0x108>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d157      	bne.n	8003970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e242      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x74>
 80038ce:	4b76      	ldr	r3, [pc, #472]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a75      	ldr	r2, [pc, #468]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e01d      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6f      	ldr	r2, [pc, #444]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b6d      	ldr	r3, [pc, #436]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6c      	ldr	r2, [pc, #432]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 8003900:	4b69      	ldr	r3, [pc, #420]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a68      	ldr	r2, [pc, #416]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a65      	ldr	r2, [pc, #404]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7ff f8a8 	bl	8002a74 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7ff f8a4 	bl	8002a74 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e207      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b5b      	ldr	r3, [pc, #364]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0xc0>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7ff f894 	bl	8002a74 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003950:	f7ff f890 	bl	8002a74 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1f3      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0xe8>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d063      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003992:	2b08      	cmp	r3, #8
 8003994:	d11c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b44      	ldr	r3, [pc, #272]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d116      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e1c7      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4937      	ldr	r1, [pc, #220]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	e03a      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d8:	4b34      	ldr	r3, [pc, #208]	; (8003aac <HAL_RCC_OscConfig+0x244>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7ff f849 	bl	8002a74 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e6:	f7ff f845 	bl	8002a74 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1a8      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4925      	ldr	r1, [pc, #148]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]
 8003a18:	e015      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <HAL_RCC_OscConfig+0x244>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7ff f828 	bl	8002a74 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a28:	f7ff f824 	bl	8002a74 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e187      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d036      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5a:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7ff f808 	bl	8002a74 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a68:	f7ff f804 	bl	8002a74 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e167      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x200>
 8003a86:	e01b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a88:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7fe fff1 	bl	8002a74 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	e00e      	b.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a96:	f7fe ffed 	bl	8002a74 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d907      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e150      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	42470000 	.word	0x42470000
 8003ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b88      	ldr	r3, [pc, #544]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ea      	bne.n	8003a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8097 	beq.w	8003bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b7d      	ldr	r3, [pc, #500]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b7a      	ldr	r3, [pc, #488]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d118      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b74      	ldr	r3, [pc, #464]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a73      	ldr	r2, [pc, #460]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe ffad 	bl	8002a74 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe ffa9 	bl	8002a74 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e10c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2ea>
 8003b44:	4b64      	ldr	r3, [pc, #400]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b48:	4a63      	ldr	r2, [pc, #396]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b50:	e01c      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x30c>
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5e:	4a5e      	ldr	r2, [pc, #376]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	6713      	str	r3, [r2, #112]	; 0x70
 8003b66:	4b5c      	ldr	r3, [pc, #368]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6713      	str	r3, [r2, #112]	; 0x70
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b74:	4b58      	ldr	r3, [pc, #352]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	4a57      	ldr	r2, [pc, #348]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b80:	4b55      	ldr	r3, [pc, #340]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a54      	ldr	r2, [pc, #336]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 0304 	bic.w	r3, r3, #4
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fe ff6e 	bl	8002a74 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f7fe ff6a 	bl	8002a74 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0cb      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ee      	beq.n	8003b9c <HAL_RCC_OscConfig+0x334>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc0:	f7fe ff58 	bl	8002a74 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fe ff54 	bl	8002a74 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0b5      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bde:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1ee      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	4a38      	ldr	r2, [pc, #224]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a1 	beq.w	8003d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c06:	4b34      	ldr	r3, [pc, #208]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d05c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d141      	bne.n	8003c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe ff28 	bl	8002a74 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe ff24 	bl	8002a74 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e087      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b27      	ldr	r3, [pc, #156]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	019b      	lsls	r3, r3, #6
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	491b      	ldr	r1, [pc, #108]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fe fefd 	bl	8002a74 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fe fef9 	bl	8002a74 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e05c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c90:	4b11      	ldr	r3, [pc, #68]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x416>
 8003c9c:	e054      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fee6 	bl	8002a74 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe fee2 	bl	8002a74 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e045      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x444>
 8003cca:	e03d      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e038      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <HAL_RCC_OscConfig+0x4ec>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d028      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d121      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d11a      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d111      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800

08003d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0cc      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b68      	ldr	r3, [pc, #416]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d90c      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b65      	ldr	r3, [pc, #404]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b63      	ldr	r3, [pc, #396]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0b8      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dac:	4b59      	ldr	r3, [pc, #356]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a58      	ldr	r2, [pc, #352]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc4:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a52      	ldr	r2, [pc, #328]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd0:	4b50      	ldr	r3, [pc, #320]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	494d      	ldr	r1, [pc, #308]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d044      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d119      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	4b3f      	ldr	r3, [pc, #252]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e06f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b3b      	ldr	r3, [pc, #236]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e067      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4934      	ldr	r1, [pc, #208]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fe fe14 	bl	8002a74 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fe fe10 	bl	8002a74 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d20c      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e032      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4916      	ldr	r1, [pc, #88]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	490e      	ldr	r1, [pc, #56]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ede:	f000 f821 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	490a      	ldr	r1, [pc, #40]	; (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	5ccb      	ldrb	r3, [r1, r3]
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fd74 	bl	80029ec <HAL_InitTick>

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023c00 	.word	0x40023c00
 8003f14:	40023800 	.word	0x40023800
 8003f18:	08011970 	.word	0x08011970
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	20000004 	.word	0x20000004

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f28:	b094      	sub	sp, #80	; 0x50
 8003f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f30:	2300      	movs	r3, #0
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f34:	2300      	movs	r3, #0
 8003f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3c:	4b79      	ldr	r3, [pc, #484]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d00d      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x40>
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	f200 80e1 	bhi.w	8004110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x34>
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f56:	e0db      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b73      	ldr	r3, [pc, #460]	; (8004128 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f5c:	e0db      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f5e:	4b73      	ldr	r3, [pc, #460]	; (800412c <HAL_RCC_GetSysClockFreq+0x208>)
 8003f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f62:	e0d8      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f64:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f6e:	4b6d      	ldr	r3, [pc, #436]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d063      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7a:	4b6a      	ldr	r3, [pc, #424]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	2200      	movs	r2, #0
 8003f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8e:	2300      	movs	r3, #0
 8003f90:	637b      	str	r3, [r7, #52]	; 0x34
 8003f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f96:	4622      	mov	r2, r4
 8003f98:	462b      	mov	r3, r5
 8003f9a:	f04f 0000 	mov.w	r0, #0
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	0159      	lsls	r1, r3, #5
 8003fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa8:	0150      	lsls	r0, r2, #5
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4621      	mov	r1, r4
 8003fb0:	1a51      	subs	r1, r2, r1
 8003fb2:	6139      	str	r1, [r7, #16]
 8003fb4:	4629      	mov	r1, r5
 8003fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc8:	4659      	mov	r1, fp
 8003fca:	018b      	lsls	r3, r1, #6
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	018a      	lsls	r2, r1, #6
 8003fd6:	4651      	mov	r1, sl
 8003fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003fdc:	4659      	mov	r1, fp
 8003fde:	eb63 0901 	sbc.w	r9, r3, r1
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff6:	4690      	mov	r8, r2
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	eb18 0303 	adds.w	r3, r8, r3
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	462b      	mov	r3, r5
 8004004:	eb49 0303 	adc.w	r3, r9, r3
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004016:	4629      	mov	r1, r5
 8004018:	024b      	lsls	r3, r1, #9
 800401a:	4621      	mov	r1, r4
 800401c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004020:	4621      	mov	r1, r4
 8004022:	024a      	lsls	r2, r1, #9
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800402a:	2200      	movs	r2, #0
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
 800402e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004034:	f7fc fb40 	bl	80006b8 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4613      	mov	r3, r2
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004040:	e058      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b38      	ldr	r3, [pc, #224]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	2200      	movs	r2, #0
 800404a:	4618      	mov	r0, r3
 800404c:	4611      	mov	r1, r2
 800404e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004052:	623b      	str	r3, [r7, #32]
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	f04f 0000 	mov.w	r0, #0
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	0159      	lsls	r1, r3, #5
 800406a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800406e:	0150      	lsls	r0, r2, #5
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4641      	mov	r1, r8
 8004076:	ebb2 0a01 	subs.w	sl, r2, r1
 800407a:	4649      	mov	r1, r9
 800407c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800408c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004094:	ebb2 040a 	subs.w	r4, r2, sl
 8004098:	eb63 050b 	sbc.w	r5, r3, fp
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	00eb      	lsls	r3, r5, #3
 80040a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040aa:	00e2      	lsls	r2, r4, #3
 80040ac:	4614      	mov	r4, r2
 80040ae:	461d      	mov	r5, r3
 80040b0:	4643      	mov	r3, r8
 80040b2:	18e3      	adds	r3, r4, r3
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	464b      	mov	r3, r9
 80040b8:	eb45 0303 	adc.w	r3, r5, r3
 80040bc:	607b      	str	r3, [r7, #4]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ca:	4629      	mov	r1, r5
 80040cc:	028b      	lsls	r3, r1, #10
 80040ce:	4621      	mov	r1, r4
 80040d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d4:	4621      	mov	r1, r4
 80040d6:	028a      	lsls	r2, r1, #10
 80040d8:	4610      	mov	r0, r2
 80040da:	4619      	mov	r1, r3
 80040dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040de:	2200      	movs	r2, #0
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	61fa      	str	r2, [r7, #28]
 80040e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e8:	f7fc fae6 	bl	80006b8 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4613      	mov	r3, r2
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	3301      	adds	r3, #1
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004108:	fbb2 f3f3 	udiv	r3, r2, r3
 800410c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800410e:	e002      	b.n	8004116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_RCC_GetSysClockFreq+0x204>)
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004118:	4618      	mov	r0, r3
 800411a:	3750      	adds	r7, #80	; 0x50
 800411c:	46bd      	mov	sp, r7
 800411e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	00f42400 	.word	0x00f42400
 800412c:	007a1200 	.word	0x007a1200

08004130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_RCC_GetHCLKFreq+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000000 	.word	0x20000000

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800414c:	f7ff fff0 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	; (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40023800 	.word	0x40023800
 800416c:	08011980 	.word	0x08011980

08004170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004174:	f7ff ffdc 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0b5b      	lsrs	r3, r3, #13
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	08011980 	.word	0x08011980

08004198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e07b      	b.n	80042a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d108      	bne.n	80041c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ba:	d009      	beq.n	80041d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	61da      	str	r2, [r3, #28]
 80041c2:	e005      	b.n	80041d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fd fefa 	bl	8001fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004206:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004254:	ea42 0103 	orr.w	r1, r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	f003 0104 	and.w	r1, r3, #4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f003 0210 	and.w	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004290:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b08c      	sub	sp, #48	; 0x30
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042b8:	2301      	movs	r3, #1
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_SPI_TransmitReceive+0x26>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e18a      	b.n	80045e6 <HAL_SPI_TransmitReceive+0x33c>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042d8:	f7fe fbcc 	bl	8002a74 <HAL_GetTick>
 80042dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80042ee:	887b      	ldrh	r3, [r7, #2]
 80042f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d00f      	beq.n	800431a <HAL_SPI_TransmitReceive+0x70>
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004300:	d107      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d103      	bne.n	8004312 <HAL_SPI_TransmitReceive+0x68>
 800430a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800430e:	2b04      	cmp	r3, #4
 8004310:	d003      	beq.n	800431a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004312:	2302      	movs	r3, #2
 8004314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004318:	e15b      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_SPI_TransmitReceive+0x82>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_SPI_TransmitReceive+0x82>
 8004326:	887b      	ldrh	r3, [r7, #2]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004332:	e14e      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b04      	cmp	r3, #4
 800433e:	d003      	beq.n	8004348 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2205      	movs	r2, #5
 8004344:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	887a      	ldrh	r2, [r7, #2]
 800435e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	887a      	ldrh	r2, [r7, #2]
 800436a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	887a      	ldrh	r2, [r7, #2]
 8004370:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d007      	beq.n	800439c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800439a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a4:	d178      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_SPI_TransmitReceive+0x10a>
 80043ae:	8b7b      	ldrh	r3, [r7, #26]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d166      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	1c9a      	adds	r2, r3, #2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043d8:	e053      	b.n	8004482 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d11b      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x176>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_SPI_TransmitReceive+0x176>
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d113      	bne.n	8004420 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	881a      	ldrh	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d119      	bne.n	8004462 <HAL_SPI_TransmitReceive+0x1b8>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d014      	beq.n	8004462 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	b292      	uxth	r2, r2
 8004444:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	1c9a      	adds	r2, r3, #2
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800445e:	2301      	movs	r3, #1
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004462:	f7fe fb07 	bl	8002a74 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800446e:	429a      	cmp	r2, r3
 8004470:	d807      	bhi.n	8004482 <HAL_SPI_TransmitReceive+0x1d8>
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004478:	d003      	beq.n	8004482 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004480:	e0a7      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1a6      	bne.n	80043da <HAL_SPI_TransmitReceive+0x130>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1a1      	bne.n	80043da <HAL_SPI_TransmitReceive+0x130>
 8004496:	e07c      	b.n	8004592 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_SPI_TransmitReceive+0x1fc>
 80044a0:	8b7b      	ldrh	r3, [r7, #26]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d16b      	bne.n	800457e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	7812      	ldrb	r2, [r2, #0]
 80044b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	3b01      	subs	r3, #1
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044cc:	e057      	b.n	800457e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d11c      	bne.n	8004516 <HAL_SPI_TransmitReceive+0x26c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d017      	beq.n	8004516 <HAL_SPI_TransmitReceive+0x26c>
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d114      	bne.n	8004516 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d119      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x2ae>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d014      	beq.n	8004558 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454a:	b29b      	uxth	r3, r3
 800454c:	3b01      	subs	r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004554:	2301      	movs	r3, #1
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004558:	f7fe fa8c 	bl	8002a74 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004564:	429a      	cmp	r2, r3
 8004566:	d803      	bhi.n	8004570 <HAL_SPI_TransmitReceive+0x2c6>
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800456e:	d102      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x2cc>
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	2b00      	cmp	r3, #0
 8004574:	d103      	bne.n	800457e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800457c:	e029      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1a2      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x224>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d19d      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f8b2 	bl	8004700 <SPI_EndRxTxTransaction>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045ae:	e010      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	e000      	b.n	80045d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80045d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3730      	adds	r7, #48	; 0x30
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	603b      	str	r3, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004600:	f7fe fa38 	bl	8002a74 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	4413      	add	r3, r2
 800460e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004610:	f7fe fa30 	bl	8002a74 <HAL_GetTick>
 8004614:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004616:	4b39      	ldr	r3, [pc, #228]	; (80046fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	015b      	lsls	r3, r3, #5
 800461c:	0d1b      	lsrs	r3, r3, #20
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	fb02 f303 	mul.w	r3, r2, r3
 8004624:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004626:	e054      	b.n	80046d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800462e:	d050      	beq.n	80046d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004630:	f7fe fa20 	bl	8002a74 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	429a      	cmp	r2, r3
 800463e:	d902      	bls.n	8004646 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d13d      	bne.n	80046c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004654:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465e:	d111      	bne.n	8004684 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004668:	d004      	beq.n	8004674 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004672:	d107      	bne.n	8004684 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004682:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468c:	d10f      	bne.n	80046ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e017      	b.n	80046f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4013      	ands	r3, r2
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	bf0c      	ite	eq
 80046e2:	2301      	moveq	r3, #1
 80046e4:	2300      	movne	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	79fb      	ldrb	r3, [r7, #7]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d19b      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000000 	.word	0x20000000

08004700 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <SPI_EndRxTxTransaction+0x7c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <SPI_EndRxTxTransaction+0x80>)
 8004712:	fba2 2303 	umull	r2, r3, r2, r3
 8004716:	0d5b      	lsrs	r3, r3, #21
 8004718:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472a:	d112      	bne.n	8004752 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2200      	movs	r2, #0
 8004734:	2180      	movs	r1, #128	; 0x80
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f7ff ff5a 	bl	80045f0 <SPI_WaitFlagStateUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	f043 0220 	orr.w	r2, r3, #32
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e00f      	b.n	8004772 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	3b01      	subs	r3, #1
 800475c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b80      	cmp	r3, #128	; 0x80
 800476a:	d0f2      	beq.n	8004752 <SPI_EndRxTxTransaction+0x52>
 800476c:	e000      	b.n	8004770 <SPI_EndRxTxTransaction+0x70>
        break;
 800476e:	bf00      	nop
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000000 	.word	0x20000000
 8004780:	165e9f81 	.word	0x165e9f81

08004784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e041      	b.n	800481a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fd ff0a 	bl	80025c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f000 fd88 	bl	80052d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	d001      	beq.n	800483c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e046      	b.n	80048ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a23      	ldr	r2, [pc, #140]	; (80048d8 <HAL_TIM_Base_Start+0xb4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d022      	beq.n	8004894 <HAL_TIM_Base_Start+0x70>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d01d      	beq.n	8004894 <HAL_TIM_Base_Start+0x70>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <HAL_TIM_Base_Start+0xb8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d018      	beq.n	8004894 <HAL_TIM_Base_Start+0x70>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1e      	ldr	r2, [pc, #120]	; (80048e0 <HAL_TIM_Base_Start+0xbc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <HAL_TIM_Base_Start+0x70>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a1c      	ldr	r2, [pc, #112]	; (80048e4 <HAL_TIM_Base_Start+0xc0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00e      	beq.n	8004894 <HAL_TIM_Base_Start+0x70>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <HAL_TIM_Base_Start+0xc4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d009      	beq.n	8004894 <HAL_TIM_Base_Start+0x70>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a19      	ldr	r2, [pc, #100]	; (80048ec <HAL_TIM_Base_Start+0xc8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_TIM_Base_Start+0x70>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <HAL_TIM_Base_Start+0xcc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d111      	bne.n	80048b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b06      	cmp	r3, #6
 80048a4:	d010      	beq.n	80048c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b6:	e007      	b.n	80048c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	40000c00 	.word	0x40000c00
 80048e8:	40010400 	.word	0x40010400
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40001800 	.word	0x40001800

080048f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e041      	b.n	800498a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fd fea4 	bl	8002668 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 fcd0 	bl	80052d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <HAL_TIM_PWM_Start+0x24>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	bf14      	ite	ne
 80049b0:	2301      	movne	r3, #1
 80049b2:	2300      	moveq	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	e022      	b.n	80049fe <HAL_TIM_PWM_Start+0x6a>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d109      	bne.n	80049d2 <HAL_TIM_PWM_Start+0x3e>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	bf14      	ite	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	2300      	moveq	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	e015      	b.n	80049fe <HAL_TIM_PWM_Start+0x6a>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d109      	bne.n	80049ec <HAL_TIM_PWM_Start+0x58>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	bf14      	ite	ne
 80049e4:	2301      	movne	r3, #1
 80049e6:	2300      	moveq	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e008      	b.n	80049fe <HAL_TIM_PWM_Start+0x6a>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07c      	b.n	8004b00 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_PWM_Start+0x82>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a14:	e013      	b.n	8004a3e <HAL_TIM_PWM_Start+0xaa>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start+0x92>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a24:	e00b      	b.n	8004a3e <HAL_TIM_PWM_Start+0xaa>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start+0xa2>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a34:	e003      	b.n	8004a3e <HAL_TIM_PWM_Start+0xaa>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2201      	movs	r2, #1
 8004a44:	6839      	ldr	r1, [r7, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 ff30 	bl	80058ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2d      	ldr	r2, [pc, #180]	; (8004b08 <HAL_TIM_PWM_Start+0x174>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d004      	beq.n	8004a60 <HAL_TIM_PWM_Start+0xcc>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <HAL_TIM_PWM_Start+0x178>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIM_PWM_Start+0xd0>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <HAL_TIM_PWM_Start+0xd2>
 8004a64:	2300      	movs	r3, #0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <HAL_TIM_PWM_Start+0x174>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d022      	beq.n	8004aca <HAL_TIM_PWM_Start+0x136>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8c:	d01d      	beq.n	8004aca <HAL_TIM_PWM_Start+0x136>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <HAL_TIM_PWM_Start+0x17c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d018      	beq.n	8004aca <HAL_TIM_PWM_Start+0x136>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <HAL_TIM_PWM_Start+0x180>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_TIM_PWM_Start+0x136>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1c      	ldr	r2, [pc, #112]	; (8004b18 <HAL_TIM_PWM_Start+0x184>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_TIM_PWM_Start+0x136>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <HAL_TIM_PWM_Start+0x178>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_TIM_PWM_Start+0x136>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a18      	ldr	r2, [pc, #96]	; (8004b1c <HAL_TIM_PWM_Start+0x188>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_TIM_PWM_Start+0x136>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <HAL_TIM_PWM_Start+0x18c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d111      	bne.n	8004aee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b06      	cmp	r3, #6
 8004ada:	d010      	beq.n	8004afe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	e007      	b.n	8004afe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40010400 	.word	0x40010400
 8004b10:	40000400 	.word	0x40000400
 8004b14:	40000800 	.word	0x40000800
 8004b18:	40000c00 	.word	0x40000c00
 8004b1c:	40014000 	.word	0x40014000
 8004b20:	40001800 	.word	0x40001800

08004b24 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_TIM_PWM_Start_IT+0x28>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e022      	b.n	8004b92 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d109      	bne.n	8004b66 <HAL_TIM_PWM_Start_IT+0x42>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	bf14      	ite	ne
 8004b5e:	2301      	movne	r3, #1
 8004b60:	2300      	moveq	r3, #0
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e015      	b.n	8004b92 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d109      	bne.n	8004b80 <HAL_TIM_PWM_Start_IT+0x5c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e008      	b.n	8004b92 <HAL_TIM_PWM_Start_IT+0x6e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	bf14      	ite	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e0c7      	b.n	8004d2a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_PWM_Start_IT+0x86>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba8:	e013      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0xae>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b04      	cmp	r3, #4
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_PWM_Start_IT+0x96>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb8:	e00b      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0xae>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_PWM_Start_IT+0xa6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc8:	e003      	b.n	8004bd2 <HAL_TIM_PWM_Start_IT+0xae>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2202      	movs	r2, #2
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	d841      	bhi.n	8004c5c <HAL_TIM_PWM_Start_IT+0x138>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c5d 	.word	0x08004c5d
 8004be8:	08004c5d 	.word	0x08004c5d
 8004bec:	08004c5d 	.word	0x08004c5d
 8004bf0:	08004c27 	.word	0x08004c27
 8004bf4:	08004c5d 	.word	0x08004c5d
 8004bf8:	08004c5d 	.word	0x08004c5d
 8004bfc:	08004c5d 	.word	0x08004c5d
 8004c00:	08004c39 	.word	0x08004c39
 8004c04:	08004c5d 	.word	0x08004c5d
 8004c08:	08004c5d 	.word	0x08004c5d
 8004c0c:	08004c5d 	.word	0x08004c5d
 8004c10:	08004c4b 	.word	0x08004c4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0202 	orr.w	r2, r2, #2
 8004c22:	60da      	str	r2, [r3, #12]
      break;
 8004c24:	e01d      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0204 	orr.w	r2, r2, #4
 8004c34:	60da      	str	r2, [r3, #12]
      break;
 8004c36:	e014      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0208 	orr.w	r2, r2, #8
 8004c46:	60da      	str	r2, [r3, #12]
      break;
 8004c48:	e00b      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0210 	orr.w	r2, r2, #16
 8004c58:	60da      	str	r2, [r3, #12]
      break;
 8004c5a:	e002      	b.n	8004c62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c60:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d15f      	bne.n	8004d28 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fe1b 	bl	80058ac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2e      	ldr	r2, [pc, #184]	; (8004d34 <HAL_TIM_PWM_Start_IT+0x210>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_TIM_PWM_Start_IT+0x166>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <HAL_TIM_PWM_Start_IT+0x214>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d101      	bne.n	8004c8e <HAL_TIM_PWM_Start_IT+0x16a>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HAL_TIM_PWM_Start_IT+0x16c>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ca2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a22      	ldr	r2, [pc, #136]	; (8004d34 <HAL_TIM_PWM_Start_IT+0x210>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d022      	beq.n	8004cf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1f      	ldr	r2, [pc, #124]	; (8004d3c <HAL_TIM_PWM_Start_IT+0x218>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d018      	beq.n	8004cf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a1e      	ldr	r2, [pc, #120]	; (8004d40 <HAL_TIM_PWM_Start_IT+0x21c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d013      	beq.n	8004cf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <HAL_TIM_PWM_Start_IT+0x220>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00e      	beq.n	8004cf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <HAL_TIM_PWM_Start_IT+0x214>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a18      	ldr	r2, [pc, #96]	; (8004d48 <HAL_TIM_PWM_Start_IT+0x224>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d004      	beq.n	8004cf4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <HAL_TIM_PWM_Start_IT+0x228>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d111      	bne.n	8004d18 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b06      	cmp	r3, #6
 8004d04:	d010      	beq.n	8004d28 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d16:	e007      	b.n	8004d28 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40000c00 	.word	0x40000c00
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40001800 	.word	0x40001800

08004d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d122      	bne.n	8004dac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d11b      	bne.n	8004dac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0202 	mvn.w	r2, #2
 8004d7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fa81 	bl	800529a <HAL_TIM_IC_CaptureCallback>
 8004d98:	e005      	b.n	8004da6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa73 	bl	8005286 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fa84 	bl	80052ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0304 	and.w	r3, r3, #4
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d122      	bne.n	8004e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d11b      	bne.n	8004e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0204 	mvn.w	r2, #4
 8004dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa57 	bl	800529a <HAL_TIM_IC_CaptureCallback>
 8004dec:	e005      	b.n	8004dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fa49 	bl	8005286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fa5a 	bl	80052ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b08      	cmp	r3, #8
 8004e0c:	d122      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b08      	cmp	r3, #8
 8004e1a:	d11b      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0208 	mvn.w	r2, #8
 8004e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2204      	movs	r2, #4
 8004e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa2d 	bl	800529a <HAL_TIM_IC_CaptureCallback>
 8004e40:	e005      	b.n	8004e4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fa1f 	bl	8005286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fa30 	bl	80052ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b10      	cmp	r3, #16
 8004e60:	d122      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d11b      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0210 	mvn.w	r2, #16
 8004e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2208      	movs	r2, #8
 8004e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa03 	bl	800529a <HAL_TIM_IC_CaptureCallback>
 8004e94:	e005      	b.n	8004ea2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f9f5 	bl	8005286 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fa06 	bl	80052ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d10e      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d107      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0201 	mvn.w	r2, #1
 8004ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f9cf 	bl	8005272 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ede:	2b80      	cmp	r3, #128	; 0x80
 8004ee0:	d10e      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eec:	2b80      	cmp	r3, #128	; 0x80
 8004eee:	d107      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fd82 	bl	8005a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d10e      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d107      	bne.n	8004f2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f9cb 	bl	80052c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b20      	cmp	r3, #32
 8004f38:	d10e      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d107      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0220 	mvn.w	r2, #32
 8004f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fd4c 	bl	80059f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e0ae      	b.n	80050dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	f200 809f 	bhi.w	80050cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	080050cd 	.word	0x080050cd
 8004f9c:	080050cd 	.word	0x080050cd
 8004fa0:	080050cd 	.word	0x080050cd
 8004fa4:	08005009 	.word	0x08005009
 8004fa8:	080050cd 	.word	0x080050cd
 8004fac:	080050cd 	.word	0x080050cd
 8004fb0:	080050cd 	.word	0x080050cd
 8004fb4:	0800504b 	.word	0x0800504b
 8004fb8:	080050cd 	.word	0x080050cd
 8004fbc:	080050cd 	.word	0x080050cd
 8004fc0:	080050cd 	.word	0x080050cd
 8004fc4:	0800508b 	.word	0x0800508b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68b9      	ldr	r1, [r7, #8]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fa22 	bl	8005418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0208 	orr.w	r2, r2, #8
 8004fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0204 	bic.w	r2, r2, #4
 8004ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6999      	ldr	r1, [r3, #24]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691a      	ldr	r2, [r3, #16]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	619a      	str	r2, [r3, #24]
      break;
 8005006:	e064      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68b9      	ldr	r1, [r7, #8]
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fa72 	bl	80054f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6999      	ldr	r1, [r3, #24]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	021a      	lsls	r2, r3, #8
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	619a      	str	r2, [r3, #24]
      break;
 8005048:	e043      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68b9      	ldr	r1, [r7, #8]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fac7 	bl	80055e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0208 	orr.w	r2, r2, #8
 8005064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0204 	bic.w	r2, r2, #4
 8005074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69d9      	ldr	r1, [r3, #28]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	691a      	ldr	r2, [r3, #16]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	61da      	str	r2, [r3, #28]
      break;
 8005088:	e023      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fb1b 	bl	80056cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69d9      	ldr	r1, [r3, #28]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	021a      	lsls	r2, r3, #8
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	61da      	str	r2, [r3, #28]
      break;
 80050ca:	e002      	b.n	80050d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	75fb      	strb	r3, [r7, #23]
      break;
 80050d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050da:	7dfb      	ldrb	r3, [r7, #23]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_TIM_ConfigClockSource+0x1c>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e0b4      	b.n	800526a <HAL_TIM_ConfigClockSource+0x186>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800511e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005126:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005138:	d03e      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0xd4>
 800513a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800513e:	f200 8087 	bhi.w	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005146:	f000 8086 	beq.w	8005256 <HAL_TIM_ConfigClockSource+0x172>
 800514a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800514e:	d87f      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005150:	2b70      	cmp	r3, #112	; 0x70
 8005152:	d01a      	beq.n	800518a <HAL_TIM_ConfigClockSource+0xa6>
 8005154:	2b70      	cmp	r3, #112	; 0x70
 8005156:	d87b      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005158:	2b60      	cmp	r3, #96	; 0x60
 800515a:	d050      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x11a>
 800515c:	2b60      	cmp	r3, #96	; 0x60
 800515e:	d877      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005160:	2b50      	cmp	r3, #80	; 0x50
 8005162:	d03c      	beq.n	80051de <HAL_TIM_ConfigClockSource+0xfa>
 8005164:	2b50      	cmp	r3, #80	; 0x50
 8005166:	d873      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005168:	2b40      	cmp	r3, #64	; 0x40
 800516a:	d058      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x13a>
 800516c:	2b40      	cmp	r3, #64	; 0x40
 800516e:	d86f      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005170:	2b30      	cmp	r3, #48	; 0x30
 8005172:	d064      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x15a>
 8005174:	2b30      	cmp	r3, #48	; 0x30
 8005176:	d86b      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005178:	2b20      	cmp	r3, #32
 800517a:	d060      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x15a>
 800517c:	2b20      	cmp	r3, #32
 800517e:	d867      	bhi.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d05c      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x15a>
 8005184:	2b10      	cmp	r3, #16
 8005186:	d05a      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x15a>
 8005188:	e062      	b.n	8005250 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6899      	ldr	r1, [r3, #8]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f000 fb67 	bl	800586c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	609a      	str	r2, [r3, #8]
      break;
 80051b6:	e04f      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	6899      	ldr	r1, [r3, #8]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f000 fb50 	bl	800586c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051da:	609a      	str	r2, [r3, #8]
      break;
 80051dc:	e03c      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6859      	ldr	r1, [r3, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f000 fac4 	bl	8005778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2150      	movs	r1, #80	; 0x50
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fb1d 	bl	8005836 <TIM_ITRx_SetConfig>
      break;
 80051fc:	e02c      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	461a      	mov	r2, r3
 800520c:	f000 fae3 	bl	80057d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2160      	movs	r1, #96	; 0x60
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fb0d 	bl	8005836 <TIM_ITRx_SetConfig>
      break;
 800521c:	e01c      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6859      	ldr	r1, [r3, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	461a      	mov	r2, r3
 800522c:	f000 faa4 	bl	8005778 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2140      	movs	r1, #64	; 0x40
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fafd 	bl	8005836 <TIM_ITRx_SetConfig>
      break;
 800523c:	e00c      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4619      	mov	r1, r3
 8005248:	4610      	mov	r0, r2
 800524a:	f000 faf4 	bl	8005836 <TIM_ITRx_SetConfig>
      break;
 800524e:	e003      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	73fb      	strb	r3, [r7, #15]
      break;
 8005254:	e000      	b.n	8005258 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005256:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005268:	7bfb      	ldrb	r3, [r7, #15]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005272:	b480      	push	{r7}
 8005274:	b083      	sub	sp, #12
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
	...

080052d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a40      	ldr	r2, [pc, #256]	; (80053ec <TIM_Base_SetConfig+0x114>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d013      	beq.n	8005318 <TIM_Base_SetConfig+0x40>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f6:	d00f      	beq.n	8005318 <TIM_Base_SetConfig+0x40>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a3d      	ldr	r2, [pc, #244]	; (80053f0 <TIM_Base_SetConfig+0x118>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00b      	beq.n	8005318 <TIM_Base_SetConfig+0x40>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a3c      	ldr	r2, [pc, #240]	; (80053f4 <TIM_Base_SetConfig+0x11c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d007      	beq.n	8005318 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a3b      	ldr	r2, [pc, #236]	; (80053f8 <TIM_Base_SetConfig+0x120>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d003      	beq.n	8005318 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a3a      	ldr	r2, [pc, #232]	; (80053fc <TIM_Base_SetConfig+0x124>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d108      	bne.n	800532a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <TIM_Base_SetConfig+0x114>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d02b      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005338:	d027      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a2c      	ldr	r2, [pc, #176]	; (80053f0 <TIM_Base_SetConfig+0x118>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d023      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a2b      	ldr	r2, [pc, #172]	; (80053f4 <TIM_Base_SetConfig+0x11c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01f      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a2a      	ldr	r2, [pc, #168]	; (80053f8 <TIM_Base_SetConfig+0x120>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01b      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a29      	ldr	r2, [pc, #164]	; (80053fc <TIM_Base_SetConfig+0x124>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d017      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a28      	ldr	r2, [pc, #160]	; (8005400 <TIM_Base_SetConfig+0x128>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a27      	ldr	r2, [pc, #156]	; (8005404 <TIM_Base_SetConfig+0x12c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d00f      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a26      	ldr	r2, [pc, #152]	; (8005408 <TIM_Base_SetConfig+0x130>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00b      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a25      	ldr	r2, [pc, #148]	; (800540c <TIM_Base_SetConfig+0x134>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d007      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a24      	ldr	r2, [pc, #144]	; (8005410 <TIM_Base_SetConfig+0x138>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d003      	beq.n	800538a <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a23      	ldr	r2, [pc, #140]	; (8005414 <TIM_Base_SetConfig+0x13c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d108      	bne.n	800539c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <TIM_Base_SetConfig+0x114>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_Base_SetConfig+0xf8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a0c      	ldr	r2, [pc, #48]	; (80053fc <TIM_Base_SetConfig+0x124>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d103      	bne.n	80053d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	615a      	str	r2, [r3, #20]
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40010000 	.word	0x40010000
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40010400 	.word	0x40010400
 8005400:	40014000 	.word	0x40014000
 8005404:	40014400 	.word	0x40014400
 8005408:	40014800 	.word	0x40014800
 800540c:	40001800 	.word	0x40001800
 8005410:	40001c00 	.word	0x40001c00
 8005414:	40002000 	.word	0x40002000

08005418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 0302 	bic.w	r3, r3, #2
 8005460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a20      	ldr	r2, [pc, #128]	; (80054f0 <TIM_OC1_SetConfig+0xd8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC1_SetConfig+0x64>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <TIM_OC1_SetConfig+0xdc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d10c      	bne.n	8005496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0308 	bic.w	r3, r3, #8
 8005482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 0304 	bic.w	r3, r3, #4
 8005494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <TIM_OC1_SetConfig+0xd8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <TIM_OC1_SetConfig+0x8e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <TIM_OC1_SetConfig+0xdc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d111      	bne.n	80054ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	621a      	str	r2, [r3, #32]
}
 80054e4:	bf00      	nop
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40010400 	.word	0x40010400

080054f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0210 	bic.w	r2, r3, #16
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4313      	orrs	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f023 0320 	bic.w	r3, r3, #32
 8005542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a22      	ldr	r2, [pc, #136]	; (80055dc <TIM_OC2_SetConfig+0xe4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_OC2_SetConfig+0x68>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <TIM_OC2_SetConfig+0xe8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d10d      	bne.n	800557c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800557a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a17      	ldr	r2, [pc, #92]	; (80055dc <TIM_OC2_SetConfig+0xe4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <TIM_OC2_SetConfig+0x94>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a16      	ldr	r2, [pc, #88]	; (80055e0 <TIM_OC2_SetConfig+0xe8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d113      	bne.n	80055b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800559a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40010400 	.word	0x40010400

080055e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800562c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <TIM_OC3_SetConfig+0xe0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_OC3_SetConfig+0x66>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a20      	ldr	r2, [pc, #128]	; (80056c8 <TIM_OC3_SetConfig+0xe4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d10d      	bne.n	8005666 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	021b      	lsls	r3, r3, #8
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a16      	ldr	r2, [pc, #88]	; (80056c4 <TIM_OC3_SetConfig+0xe0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d003      	beq.n	8005676 <TIM_OC3_SetConfig+0x92>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a15      	ldr	r2, [pc, #84]	; (80056c8 <TIM_OC3_SetConfig+0xe4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d113      	bne.n	800569e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800567c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	4313      	orrs	r3, r2
 800569c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	621a      	str	r2, [r3, #32]
}
 80056b8:	bf00      	nop
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40010400 	.word	0x40010400

080056cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	031b      	lsls	r3, r3, #12
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a12      	ldr	r2, [pc, #72]	; (8005770 <TIM_OC4_SetConfig+0xa4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_OC4_SetConfig+0x68>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a11      	ldr	r2, [pc, #68]	; (8005774 <TIM_OC4_SetConfig+0xa8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d109      	bne.n	8005748 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800573a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	019b      	lsls	r3, r3, #6
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000
 8005774:	40010400 	.word	0x40010400

08005778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	f023 0201 	bic.w	r2, r3, #1
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	011b      	lsls	r3, r3, #4
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f023 030a 	bic.w	r3, r3, #10
 80057b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b087      	sub	sp, #28
 80057da:	af00      	add	r7, sp, #0
 80057dc:	60f8      	str	r0, [r7, #12]
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f023 0210 	bic.w	r2, r3, #16
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	031b      	lsls	r3, r3, #12
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	f043 0307 	orr.w	r3, r3, #7
 8005858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	609a      	str	r2, [r3, #8]
}
 8005860:	bf00      	nop
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	021a      	lsls	r2, r3, #8
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	431a      	orrs	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4313      	orrs	r3, r2
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	609a      	str	r2, [r3, #8]
}
 80058a0:	bf00      	nop
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	2201      	movs	r2, #1
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
 80058c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a1a      	ldr	r2, [r3, #32]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	401a      	ands	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1a      	ldr	r2, [r3, #32]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 031f 	and.w	r3, r3, #31
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	fa01 f303 	lsl.w	r3, r1, r3
 80058e4:	431a      	orrs	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800590c:	2302      	movs	r3, #2
 800590e:	e05a      	b.n	80059c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d022      	beq.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595c:	d01d      	beq.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1d      	ldr	r2, [pc, #116]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d018      	beq.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1b      	ldr	r2, [pc, #108]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1a      	ldr	r2, [pc, #104]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a18      	ldr	r2, [pc, #96]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a15      	ldr	r2, [pc, #84]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d10c      	bne.n	80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40010000 	.word	0x40010000
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	40000c00 	.word	0x40000c00
 80059e4:	40010400 	.word	0x40010400
 80059e8:	40014000 	.word	0x40014000
 80059ec:	40001800 	.word	0x40001800

080059f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e03f      	b.n	8005aaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fc fe9a 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2224      	movs	r2, #36	; 0x24
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fde9 	bl	8006634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695a      	ldr	r2, [r3, #20]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b08a      	sub	sp, #40	; 0x28
 8005ab6:	af02      	add	r7, sp, #8
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d17c      	bne.n	8005bcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_UART_Transmit+0x2c>
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e075      	b.n	8005bce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_UART_Transmit+0x3e>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e06e      	b.n	8005bce <HAL_UART_Transmit+0x11c>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2221      	movs	r2, #33	; 0x21
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b06:	f7fc ffb5 	bl	8002a74 <HAL_GetTick>
 8005b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b20:	d108      	bne.n	8005b34 <HAL_UART_Transmit+0x82>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	e003      	b.n	8005b3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b44:	e02a      	b.n	8005b9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	2180      	movs	r1, #128	; 0x80
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 fb29 	bl	80061a8 <UART_WaitOnFlagUntilTimeout>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e036      	b.n	8005bce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10b      	bne.n	8005b7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	3302      	adds	r3, #2
 8005b7a:	61bb      	str	r3, [r7, #24]
 8005b7c:	e007      	b.n	8005b8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1cf      	bne.n	8005b46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2200      	movs	r2, #0
 8005bae:	2140      	movs	r1, #64	; 0x40
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 faf9 	bl	80061a8 <UART_WaitOnFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e006      	b.n	8005bce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e000      	b.n	8005bce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bcc:	2302      	movs	r3, #2
  }
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	4613      	mov	r3, r2
 8005be2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d11d      	bne.n	8005c2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <HAL_UART_Receive_IT+0x26>
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e016      	b.n	8005c2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_UART_Receive_IT+0x38>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e00f      	b.n	8005c2e <HAL_UART_Receive_IT+0x58>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c1c:	88fb      	ldrh	r3, [r7, #6]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68b9      	ldr	r1, [r7, #8]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 fb2e 	bl	8006284 <UART_Start_Receive_IT>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	e000      	b.n	8005c2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005c2c:	2302      	movs	r3, #2
  }
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b0ba      	sub	sp, #232	; 0xe8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10f      	bne.n	8005c9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d009      	beq.n	8005c9e <HAL_UART_IRQHandler+0x66>
 8005c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fc11 	bl	80064be <UART_Receive_IT>
      return;
 8005c9c:	e256      	b.n	800614c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	f000 80de 	beq.w	8005e64 <HAL_UART_IRQHandler+0x22c>
 8005ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d106      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 80d1 	beq.w	8005e64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <HAL_UART_IRQHandler+0xae>
 8005cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d005      	beq.n	8005ce6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	f043 0201 	orr.w	r2, r3, #1
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00b      	beq.n	8005d0a <HAL_UART_IRQHandler+0xd2>
 8005cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f043 0202 	orr.w	r2, r3, #2
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00b      	beq.n	8005d2e <HAL_UART_IRQHandler+0xf6>
 8005d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f043 0204 	orr.w	r2, r3, #4
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d011      	beq.n	8005d5e <HAL_UART_IRQHandler+0x126>
 8005d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d3e:	f003 0320 	and.w	r3, r3, #32
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d105      	bne.n	8005d52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d005      	beq.n	8005d5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	f043 0208 	orr.w	r2, r3, #8
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 81ed 	beq.w	8006142 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_UART_IRQHandler+0x14e>
 8005d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fb9c 	bl	80064be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b40      	cmp	r3, #64	; 0x40
 8005d92:	bf0c      	ite	eq
 8005d94:	2301      	moveq	r3, #1
 8005d96:	2300      	movne	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <HAL_UART_IRQHandler+0x17a>
 8005daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d04f      	beq.n	8005e52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 faa4 	bl	8006300 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b40      	cmp	r3, #64	; 0x40
 8005dc4:	d141      	bne.n	8005e4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3314      	adds	r3, #20
 8005dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dd4:	e853 3f00 	ldrex	r3, [r3]
 8005dd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ddc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3314      	adds	r3, #20
 8005dee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005df2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005df6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005dfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1d9      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d013      	beq.n	8005e42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	4a7d      	ldr	r2, [pc, #500]	; (8006014 <HAL_UART_IRQHandler+0x3dc>)
 8005e20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fd f8dc 	bl	8002fe4 <HAL_DMA_Abort_IT>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d016      	beq.n	8005e60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e40:	e00e      	b.n	8005e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f99a 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e48:	e00a      	b.n	8005e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f996 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e50:	e006      	b.n	8005e60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f992 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e5e:	e170      	b.n	8006142 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e60:	bf00      	nop
    return;
 8005e62:	e16e      	b.n	8006142 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	f040 814a 	bne.w	8006102 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e72:	f003 0310 	and.w	r3, r3, #16
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 8143 	beq.w	8006102 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 813c 	beq.w	8006102 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	f040 80b4 	bne.w	8006018 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ebc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8140 	beq.w	8006146 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005eca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	f080 8139 	bcs.w	8006146 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005eda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee6:	f000 8088 	beq.w	8005ffa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	330c      	adds	r3, #12
 8005ef0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	330c      	adds	r3, #12
 8005f12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1d9      	bne.n	8005eea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3314      	adds	r3, #20
 8005f3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f40:	e853 3f00 	ldrex	r3, [r3]
 8005f44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3314      	adds	r3, #20
 8005f56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e1      	bne.n	8005f36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3314      	adds	r3, #20
 8005f78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	3314      	adds	r3, #20
 8005f92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e3      	bne.n	8005f72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fca:	f023 0310 	bic.w	r3, r3, #16
 8005fce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005fdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e3      	bne.n	8005fb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fc ff85 	bl	8002f04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006002:	b29b      	uxth	r3, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	b29b      	uxth	r3, r3
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8c0 	bl	8006190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006010:	e099      	b.n	8006146 <HAL_UART_IRQHandler+0x50e>
 8006012:	bf00      	nop
 8006014:	080063c7 	.word	0x080063c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006020:	b29b      	uxth	r3, r3
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 808b 	beq.w	800614a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006034:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 8086 	beq.w	800614a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	330c      	adds	r3, #12
 8006044:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	e853 3f00 	ldrex	r3, [r3]
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800604e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006050:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006054:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	330c      	adds	r3, #12
 800605e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006062:	647a      	str	r2, [r7, #68]	; 0x44
 8006064:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006066:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800606a:	e841 2300 	strex	r3, r2, [r1]
 800606e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1e3      	bne.n	800603e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3314      	adds	r3, #20
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	623b      	str	r3, [r7, #32]
   return(result);
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	f023 0301 	bic.w	r3, r3, #1
 800608c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800609a:	633a      	str	r2, [r7, #48]	; 0x30
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e3      	bne.n	8006076 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	330c      	adds	r3, #12
 80060c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0310 	bic.w	r3, r3, #16
 80060d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	330c      	adds	r3, #12
 80060dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80060e0:	61fa      	str	r2, [r7, #28]
 80060e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	69b9      	ldr	r1, [r7, #24]
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	e841 2300 	strex	r3, r2, [r1]
 80060ec:	617b      	str	r3, [r7, #20]
   return(result);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e3      	bne.n	80060bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f848 	bl	8006190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006100:	e023      	b.n	800614a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <HAL_UART_IRQHandler+0x4ea>
 800610e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f967 	bl	80063ee <UART_Transmit_IT>
    return;
 8006120:	e014      	b.n	800614c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00e      	beq.n	800614c <HAL_UART_IRQHandler+0x514>
 800612e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d008      	beq.n	800614c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f9a7 	bl	800648e <UART_EndTransmit_IT>
    return;
 8006140:	e004      	b.n	800614c <HAL_UART_IRQHandler+0x514>
    return;
 8006142:	bf00      	nop
 8006144:	e002      	b.n	800614c <HAL_UART_IRQHandler+0x514>
      return;
 8006146:	bf00      	nop
 8006148:	e000      	b.n	800614c <HAL_UART_IRQHandler+0x514>
      return;
 800614a:	bf00      	nop
  }
}
 800614c:	37e8      	adds	r7, #232	; 0xe8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop

08006154 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b090      	sub	sp, #64	; 0x40
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	603b      	str	r3, [r7, #0]
 80061b4:	4613      	mov	r3, r2
 80061b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b8:	e050      	b.n	800625c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061c0:	d04c      	beq.n	800625c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061c8:	f7fc fc54 	bl	8002a74 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d241      	bcs.n	800625c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	330c      	adds	r3, #12
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061f8:	637a      	str	r2, [r7, #52]	; 0x34
 80061fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006200:	e841 2300 	strex	r3, r2, [r1]
 8006204:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1e5      	bne.n	80061d8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3314      	adds	r3, #20
 8006212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	e853 3f00 	ldrex	r3, [r3]
 800621a:	613b      	str	r3, [r7, #16]
   return(result);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f023 0301 	bic.w	r3, r3, #1
 8006222:	63bb      	str	r3, [r7, #56]	; 0x38
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3314      	adds	r3, #20
 800622a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800622c:	623a      	str	r2, [r7, #32]
 800622e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	69f9      	ldr	r1, [r7, #28]
 8006232:	6a3a      	ldr	r2, [r7, #32]
 8006234:	e841 2300 	strex	r3, r2, [r1]
 8006238:	61bb      	str	r3, [r7, #24]
   return(result);
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e5      	bne.n	800620c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e00f      	b.n	800627c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4013      	ands	r3, r2
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	429a      	cmp	r2, r3
 800626a:	bf0c      	ite	eq
 800626c:	2301      	moveq	r3, #1
 800626e:	2300      	movne	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	429a      	cmp	r2, r3
 8006278:	d09f      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3740      	adds	r7, #64	; 0x40
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	88fa      	ldrh	r2, [r7, #6]
 800629c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	88fa      	ldrh	r2, [r7, #6]
 80062a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2222      	movs	r2, #34	; 0x22
 80062ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d007      	beq.n	80062d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	695a      	ldr	r2, [r3, #20]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f042 0201 	orr.w	r2, r2, #1
 80062e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0220 	orr.w	r2, r2, #32
 80062f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b095      	sub	sp, #84	; 0x54
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800631e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	330c      	adds	r3, #12
 8006326:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006328:	643a      	str	r2, [r7, #64]	; 0x40
 800632a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800632e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e5      	bne.n	8006308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3314      	adds	r3, #20
 8006342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	61fb      	str	r3, [r7, #28]
   return(result);
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	64bb      	str	r3, [r7, #72]	; 0x48
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3314      	adds	r3, #20
 800635a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800635c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800636a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e5      	bne.n	800633c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	2b01      	cmp	r3, #1
 8006376:	d119      	bne.n	80063ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	330c      	adds	r3, #12
 800637e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	e853 3f00 	ldrex	r3, [r3]
 8006386:	60bb      	str	r3, [r7, #8]
   return(result);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f023 0310 	bic.w	r3, r3, #16
 800638e:	647b      	str	r3, [r7, #68]	; 0x44
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	330c      	adds	r3, #12
 8006396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006398:	61ba      	str	r2, [r7, #24]
 800639a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6979      	ldr	r1, [r7, #20]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	613b      	str	r3, [r7, #16]
   return(result);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e5      	bne.n	8006378 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063ba:	bf00      	nop
 80063bc:	3754      	adds	r7, #84	; 0x54
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff fecb 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b21      	cmp	r3, #33	; 0x21
 8006400:	d13e      	bne.n	8006480 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640a:	d114      	bne.n	8006436 <UART_Transmit_IT+0x48>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d110      	bne.n	8006436 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006428:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	1c9a      	adds	r2, r3, #2
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	621a      	str	r2, [r3, #32]
 8006434:	e008      	b.n	8006448 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6211      	str	r1, [r2, #32]
 8006440:	781a      	ldrb	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29b      	uxth	r3, r3
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	4619      	mov	r1, r3
 8006456:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10f      	bne.n	800647c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800646a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800647a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	e000      	b.n	8006482 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006480:	2302      	movs	r3, #2
  }
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff fe50 	bl	8006154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b08c      	sub	sp, #48	; 0x30
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b22      	cmp	r3, #34	; 0x22
 80064d0:	f040 80ab 	bne.w	800662a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064dc:	d117      	bne.n	800650e <UART_Receive_IT+0x50>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d113      	bne.n	800650e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006506:	1c9a      	adds	r2, r3, #2
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	629a      	str	r2, [r3, #40]	; 0x28
 800650c:	e026      	b.n	800655c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006514:	2300      	movs	r3, #0
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006520:	d007      	beq.n	8006532 <UART_Receive_IT+0x74>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <UART_Receive_IT+0x82>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	e008      	b.n	8006552 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800654c:	b2da      	uxtb	r2, r3
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006560:	b29b      	uxth	r3, r3
 8006562:	3b01      	subs	r3, #1
 8006564:	b29b      	uxth	r3, r3
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	4619      	mov	r1, r3
 800656a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800656c:	2b00      	cmp	r3, #0
 800656e:	d15a      	bne.n	8006626 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0220 	bic.w	r2, r2, #32
 800657e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800658e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695a      	ldr	r2, [r3, #20]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0201 	bic.w	r2, r2, #1
 800659e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d135      	bne.n	800661c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	613b      	str	r3, [r7, #16]
   return(result);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f023 0310 	bic.w	r3, r3, #16
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d6:	623a      	str	r2, [r7, #32]
 80065d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	69f9      	ldr	r1, [r7, #28]
 80065dc:	6a3a      	ldr	r2, [r7, #32]
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e5      	bne.n	80065b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b10      	cmp	r3, #16
 80065f6:	d10a      	bne.n	800660e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7ff fdbb 	bl	8006190 <HAL_UARTEx_RxEventCallback>
 800661a:	e002      	b.n	8006622 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff fda3 	bl	8006168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	e002      	b.n	800662c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	e000      	b.n	800662c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800662a:	2302      	movs	r3, #2
  }
}
 800662c:	4618      	mov	r0, r3
 800662e:	3730      	adds	r7, #48	; 0x30
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006638:	b0c0      	sub	sp, #256	; 0x100
 800663a:	af00      	add	r7, sp, #0
 800663c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006650:	68d9      	ldr	r1, [r3, #12]
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	ea40 0301 	orr.w	r3, r0, r1
 800665c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	431a      	orrs	r2, r3
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	431a      	orrs	r2, r3
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800668c:	f021 010c 	bic.w	r1, r1, #12
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800669a:	430b      	orrs	r3, r1
 800669c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800669e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ae:	6999      	ldr	r1, [r3, #24]
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	ea40 0301 	orr.w	r3, r0, r1
 80066ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b8f      	ldr	r3, [pc, #572]	; (8006900 <UART_SetConfig+0x2cc>)
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d005      	beq.n	80066d4 <UART_SetConfig+0xa0>
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b8d      	ldr	r3, [pc, #564]	; (8006904 <UART_SetConfig+0x2d0>)
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d104      	bne.n	80066de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066d4:	f7fd fd4c 	bl	8004170 <HAL_RCC_GetPCLK2Freq>
 80066d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066dc:	e003      	b.n	80066e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066de:	f7fd fd33 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 80066e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f0:	f040 810c 	bne.w	800690c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006706:	4622      	mov	r2, r4
 8006708:	462b      	mov	r3, r5
 800670a:	1891      	adds	r1, r2, r2
 800670c:	65b9      	str	r1, [r7, #88]	; 0x58
 800670e:	415b      	adcs	r3, r3
 8006710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006716:	4621      	mov	r1, r4
 8006718:	eb12 0801 	adds.w	r8, r2, r1
 800671c:	4629      	mov	r1, r5
 800671e:	eb43 0901 	adc.w	r9, r3, r1
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	f04f 0300 	mov.w	r3, #0
 800672a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800672e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006736:	4690      	mov	r8, r2
 8006738:	4699      	mov	r9, r3
 800673a:	4623      	mov	r3, r4
 800673c:	eb18 0303 	adds.w	r3, r8, r3
 8006740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006744:	462b      	mov	r3, r5
 8006746:	eb49 0303 	adc.w	r3, r9, r3
 800674a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800674e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800675a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800675e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006762:	460b      	mov	r3, r1
 8006764:	18db      	adds	r3, r3, r3
 8006766:	653b      	str	r3, [r7, #80]	; 0x50
 8006768:	4613      	mov	r3, r2
 800676a:	eb42 0303 	adc.w	r3, r2, r3
 800676e:	657b      	str	r3, [r7, #84]	; 0x54
 8006770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006778:	f7f9 ff9e 	bl	80006b8 <__aeabi_uldivmod>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4b61      	ldr	r3, [pc, #388]	; (8006908 <UART_SetConfig+0x2d4>)
 8006782:	fba3 2302 	umull	r2, r3, r3, r2
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	011c      	lsls	r4, r3, #4
 800678a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800678e:	2200      	movs	r2, #0
 8006790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006794:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800679c:	4642      	mov	r2, r8
 800679e:	464b      	mov	r3, r9
 80067a0:	1891      	adds	r1, r2, r2
 80067a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80067a4:	415b      	adcs	r3, r3
 80067a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067ac:	4641      	mov	r1, r8
 80067ae:	eb12 0a01 	adds.w	sl, r2, r1
 80067b2:	4649      	mov	r1, r9
 80067b4:	eb43 0b01 	adc.w	fp, r3, r1
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067cc:	4692      	mov	sl, r2
 80067ce:	469b      	mov	fp, r3
 80067d0:	4643      	mov	r3, r8
 80067d2:	eb1a 0303 	adds.w	r3, sl, r3
 80067d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067da:	464b      	mov	r3, r9
 80067dc:	eb4b 0303 	adc.w	r3, fp, r3
 80067e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067f8:	460b      	mov	r3, r1
 80067fa:	18db      	adds	r3, r3, r3
 80067fc:	643b      	str	r3, [r7, #64]	; 0x40
 80067fe:	4613      	mov	r3, r2
 8006800:	eb42 0303 	adc.w	r3, r2, r3
 8006804:	647b      	str	r3, [r7, #68]	; 0x44
 8006806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800680a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800680e:	f7f9 ff53 	bl	80006b8 <__aeabi_uldivmod>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4611      	mov	r1, r2
 8006818:	4b3b      	ldr	r3, [pc, #236]	; (8006908 <UART_SetConfig+0x2d4>)
 800681a:	fba3 2301 	umull	r2, r3, r3, r1
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	2264      	movs	r2, #100	; 0x64
 8006822:	fb02 f303 	mul.w	r3, r2, r3
 8006826:	1acb      	subs	r3, r1, r3
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800682e:	4b36      	ldr	r3, [pc, #216]	; (8006908 <UART_SetConfig+0x2d4>)
 8006830:	fba3 2302 	umull	r2, r3, r3, r2
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800683c:	441c      	add	r4, r3
 800683e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006842:	2200      	movs	r2, #0
 8006844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006848:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800684c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006850:	4642      	mov	r2, r8
 8006852:	464b      	mov	r3, r9
 8006854:	1891      	adds	r1, r2, r2
 8006856:	63b9      	str	r1, [r7, #56]	; 0x38
 8006858:	415b      	adcs	r3, r3
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800685c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006860:	4641      	mov	r1, r8
 8006862:	1851      	adds	r1, r2, r1
 8006864:	6339      	str	r1, [r7, #48]	; 0x30
 8006866:	4649      	mov	r1, r9
 8006868:	414b      	adcs	r3, r1
 800686a:	637b      	str	r3, [r7, #52]	; 0x34
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006878:	4659      	mov	r1, fp
 800687a:	00cb      	lsls	r3, r1, #3
 800687c:	4651      	mov	r1, sl
 800687e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006882:	4651      	mov	r1, sl
 8006884:	00ca      	lsls	r2, r1, #3
 8006886:	4610      	mov	r0, r2
 8006888:	4619      	mov	r1, r3
 800688a:	4603      	mov	r3, r0
 800688c:	4642      	mov	r2, r8
 800688e:	189b      	adds	r3, r3, r2
 8006890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006894:	464b      	mov	r3, r9
 8006896:	460a      	mov	r2, r1
 8006898:	eb42 0303 	adc.w	r3, r2, r3
 800689c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068b4:	460b      	mov	r3, r1
 80068b6:	18db      	adds	r3, r3, r3
 80068b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ba:	4613      	mov	r3, r2
 80068bc:	eb42 0303 	adc.w	r3, r2, r3
 80068c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068ca:	f7f9 fef5 	bl	80006b8 <__aeabi_uldivmod>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <UART_SetConfig+0x2d4>)
 80068d4:	fba3 1302 	umull	r1, r3, r3, r2
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	2164      	movs	r1, #100	; 0x64
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	3332      	adds	r3, #50	; 0x32
 80068e6:	4a08      	ldr	r2, [pc, #32]	; (8006908 <UART_SetConfig+0x2d4>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	095b      	lsrs	r3, r3, #5
 80068ee:	f003 0207 	and.w	r2, r3, #7
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4422      	add	r2, r4
 80068fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068fc:	e105      	b.n	8006b0a <UART_SetConfig+0x4d6>
 80068fe:	bf00      	nop
 8006900:	40011000 	.word	0x40011000
 8006904:	40011400 	.word	0x40011400
 8006908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800690c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006910:	2200      	movs	r2, #0
 8006912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006916:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800691a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800691e:	4642      	mov	r2, r8
 8006920:	464b      	mov	r3, r9
 8006922:	1891      	adds	r1, r2, r2
 8006924:	6239      	str	r1, [r7, #32]
 8006926:	415b      	adcs	r3, r3
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
 800692a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800692e:	4641      	mov	r1, r8
 8006930:	1854      	adds	r4, r2, r1
 8006932:	4649      	mov	r1, r9
 8006934:	eb43 0501 	adc.w	r5, r3, r1
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	f04f 0300 	mov.w	r3, #0
 8006940:	00eb      	lsls	r3, r5, #3
 8006942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006946:	00e2      	lsls	r2, r4, #3
 8006948:	4614      	mov	r4, r2
 800694a:	461d      	mov	r5, r3
 800694c:	4643      	mov	r3, r8
 800694e:	18e3      	adds	r3, r4, r3
 8006950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006954:	464b      	mov	r3, r9
 8006956:	eb45 0303 	adc.w	r3, r5, r3
 800695a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800696a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	f04f 0300 	mov.w	r3, #0
 8006976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800697a:	4629      	mov	r1, r5
 800697c:	008b      	lsls	r3, r1, #2
 800697e:	4621      	mov	r1, r4
 8006980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006984:	4621      	mov	r1, r4
 8006986:	008a      	lsls	r2, r1, #2
 8006988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800698c:	f7f9 fe94 	bl	80006b8 <__aeabi_uldivmod>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4b60      	ldr	r3, [pc, #384]	; (8006b18 <UART_SetConfig+0x4e4>)
 8006996:	fba3 2302 	umull	r2, r3, r3, r2
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	011c      	lsls	r4, r3, #4
 800699e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	1891      	adds	r1, r2, r2
 80069b6:	61b9      	str	r1, [r7, #24]
 80069b8:	415b      	adcs	r3, r3
 80069ba:	61fb      	str	r3, [r7, #28]
 80069bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069c0:	4641      	mov	r1, r8
 80069c2:	1851      	adds	r1, r2, r1
 80069c4:	6139      	str	r1, [r7, #16]
 80069c6:	4649      	mov	r1, r9
 80069c8:	414b      	adcs	r3, r1
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069d8:	4659      	mov	r1, fp
 80069da:	00cb      	lsls	r3, r1, #3
 80069dc:	4651      	mov	r1, sl
 80069de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069e2:	4651      	mov	r1, sl
 80069e4:	00ca      	lsls	r2, r1, #3
 80069e6:	4610      	mov	r0, r2
 80069e8:	4619      	mov	r1, r3
 80069ea:	4603      	mov	r3, r0
 80069ec:	4642      	mov	r2, r8
 80069ee:	189b      	adds	r3, r3, r2
 80069f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069f4:	464b      	mov	r3, r9
 80069f6:	460a      	mov	r2, r1
 80069f8:	eb42 0303 	adc.w	r3, r2, r3
 80069fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a18:	4649      	mov	r1, r9
 8006a1a:	008b      	lsls	r3, r1, #2
 8006a1c:	4641      	mov	r1, r8
 8006a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a22:	4641      	mov	r1, r8
 8006a24:	008a      	lsls	r2, r1, #2
 8006a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a2a:	f7f9 fe45 	bl	80006b8 <__aeabi_uldivmod>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4b39      	ldr	r3, [pc, #228]	; (8006b18 <UART_SetConfig+0x4e4>)
 8006a34:	fba3 1302 	umull	r1, r3, r3, r2
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	2164      	movs	r1, #100	; 0x64
 8006a3c:	fb01 f303 	mul.w	r3, r1, r3
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	3332      	adds	r3, #50	; 0x32
 8006a46:	4a34      	ldr	r2, [pc, #208]	; (8006b18 <UART_SetConfig+0x4e4>)
 8006a48:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4c:	095b      	lsrs	r3, r3, #5
 8006a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a52:	441c      	add	r4, r3
 8006a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a58:	2200      	movs	r2, #0
 8006a5a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a5c:	677a      	str	r2, [r7, #116]	; 0x74
 8006a5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a62:	4642      	mov	r2, r8
 8006a64:	464b      	mov	r3, r9
 8006a66:	1891      	adds	r1, r2, r2
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	415b      	adcs	r3, r3
 8006a6c:	60fb      	str	r3, [r7, #12]
 8006a6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a72:	4641      	mov	r1, r8
 8006a74:	1851      	adds	r1, r2, r1
 8006a76:	6039      	str	r1, [r7, #0]
 8006a78:	4649      	mov	r1, r9
 8006a7a:	414b      	adcs	r3, r1
 8006a7c:	607b      	str	r3, [r7, #4]
 8006a7e:	f04f 0200 	mov.w	r2, #0
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a8a:	4659      	mov	r1, fp
 8006a8c:	00cb      	lsls	r3, r1, #3
 8006a8e:	4651      	mov	r1, sl
 8006a90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a94:	4651      	mov	r1, sl
 8006a96:	00ca      	lsls	r2, r1, #3
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	189b      	adds	r3, r3, r2
 8006aa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aa4:	464b      	mov	r3, r9
 8006aa6:	460a      	mov	r2, r1
 8006aa8:	eb42 0303 	adc.w	r3, r2, r3
 8006aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ab8:	667a      	str	r2, [r7, #100]	; 0x64
 8006aba:	f04f 0200 	mov.w	r2, #0
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	008b      	lsls	r3, r1, #2
 8006aca:	4641      	mov	r1, r8
 8006acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	008a      	lsls	r2, r1, #2
 8006ad4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ad8:	f7f9 fdee 	bl	80006b8 <__aeabi_uldivmod>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4b0d      	ldr	r3, [pc, #52]	; (8006b18 <UART_SetConfig+0x4e4>)
 8006ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	2164      	movs	r1, #100	; 0x64
 8006aea:	fb01 f303 	mul.w	r3, r1, r3
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	3332      	adds	r3, #50	; 0x32
 8006af4:	4a08      	ldr	r2, [pc, #32]	; (8006b18 <UART_SetConfig+0x4e4>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	095b      	lsrs	r3, r3, #5
 8006afc:	f003 020f 	and.w	r2, r3, #15
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4422      	add	r2, r4
 8006b08:	609a      	str	r2, [r3, #8]
}
 8006b0a:	bf00      	nop
 8006b0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b10:	46bd      	mov	sp, r7
 8006b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b16:	bf00      	nop
 8006b18:	51eb851f 	.word	0x51eb851f

08006b1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006b20:	4904      	ldr	r1, [pc, #16]	; (8006b34 <MX_FATFS_Init+0x18>)
 8006b22:	4805      	ldr	r0, [pc, #20]	; (8006b38 <MX_FATFS_Init+0x1c>)
 8006b24:	f002 fec0 	bl	80098a8 <FATFS_LinkDriver>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4b03      	ldr	r3, [pc, #12]	; (8006b3c <MX_FATFS_Init+0x20>)
 8006b2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b30:	bf00      	nop
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20013734 	.word	0x20013734
 8006b38:	2000000c 	.word	0x2000000c
 8006b3c:	20013730 	.word	0x20013730

08006b40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006b40:	b480      	push	{r7}
 8006b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006b44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 f9d9 	bl	8006f14 <USER_SPI_initialize>
 8006b62:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fab7 	bl	80070ec <USER_SPI_status>
 8006b7e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3708      	adds	r7, #8
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4603      	mov	r3, r0
 8006b96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006b98:	7bf8      	ldrb	r0, [r7, #15]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	68b9      	ldr	r1, [r7, #8]
 8006ba0:	f000 faba 	bl	8007118 <USER_SPI_read>
 8006ba4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006bbe:	7bf8      	ldrb	r0, [r7, #15]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	f000 fb0d 	bl	80071e4 <USER_SPI_write>
 8006bca:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	603a      	str	r2, [r7, #0]
 8006bde:	71fb      	strb	r3, [r7, #7]
 8006be0:	460b      	mov	r3, r1
 8006be2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006be4:	79b9      	ldrb	r1, [r7, #6]
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fb76 	bl	80072dc <USER_SPI_ioctl>
 8006bf0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006c04:	f7fb ff36 	bl	8002a74 <HAL_GetTick>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	4a04      	ldr	r2, [pc, #16]	; (8006c1c <SPI_Timer_On+0x20>)
 8006c0c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006c0e:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <SPI_Timer_On+0x24>)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6013      	str	r3, [r2, #0]
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	2001373c 	.word	0x2001373c
 8006c20:	20013740 	.word	0x20013740

08006c24 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006c28:	f7fb ff24 	bl	8002a74 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <SPI_Timer_Status+0x24>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	1ad2      	subs	r2, r2, r3
 8006c34:	4b05      	ldr	r3, [pc, #20]	; (8006c4c <SPI_Timer_Status+0x28>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	bf34      	ite	cc
 8006c3c:	2301      	movcc	r3, #1
 8006c3e:	2300      	movcs	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	2001373c 	.word	0x2001373c
 8006c4c:	20013740 	.word	0x20013740

08006c50 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	4603      	mov	r3, r0
 8006c58:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006c5a:	f107 020f 	add.w	r2, r7, #15
 8006c5e:	1df9      	adds	r1, r7, #7
 8006c60:	2332      	movs	r3, #50	; 0x32
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	2301      	movs	r3, #1
 8006c66:	4804      	ldr	r0, [pc, #16]	; (8006c78 <xchg_spi+0x28>)
 8006c68:	f7fd fb1f 	bl	80042aa <HAL_SPI_TransmitReceive>
    return rxDat;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200008a0 	.word	0x200008a0

08006c7c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006c7c:	b590      	push	{r4, r7, lr}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e00a      	b.n	8006ca2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	18d4      	adds	r4, r2, r3
 8006c92:	20ff      	movs	r0, #255	; 0xff
 8006c94:	f7ff ffdc 	bl	8006c50 <xchg_spi>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d3f0      	bcc.n	8006c8c <rcvr_spi_multi+0x10>
	}
}
 8006caa:	bf00      	nop
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd90      	pop	{r4, r7, pc}

08006cb4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	e009      	b.n	8006cd8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff ffbf 	bl	8006c50 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d3f1      	bcc.n	8006cc4 <xmit_spi_multi+0x10>
	}
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006cf2:	f7fb febf 	bl	8002a74 <HAL_GetTick>
 8006cf6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006cfc:	20ff      	movs	r0, #255	; 0xff
 8006cfe:	f7ff ffa7 	bl	8006c50 <xchg_spi>
 8006d02:	4603      	mov	r3, r0
 8006d04:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	2bff      	cmp	r3, #255	; 0xff
 8006d0a:	d007      	beq.n	8006d1c <wait_ready+0x32>
 8006d0c:	f7fb feb2 	bl	8002a74 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d8ef      	bhi.n	8006cfc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	2bff      	cmp	r3, #255	; 0xff
 8006d20:	bf0c      	ite	eq
 8006d22:	2301      	moveq	r3, #1
 8006d24:	2300      	movne	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006d34:	2201      	movs	r2, #1
 8006d36:	2102      	movs	r1, #2
 8006d38:	4803      	ldr	r0, [pc, #12]	; (8006d48 <despiselect+0x18>)
 8006d3a:	f7fc fd7b 	bl	8003834 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006d3e:	20ff      	movs	r0, #255	; 0xff
 8006d40:	f7ff ff86 	bl	8006c50 <xchg_spi>

}
 8006d44:	bf00      	nop
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40020000 	.word	0x40020000

08006d4c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006d50:	2200      	movs	r2, #0
 8006d52:	2102      	movs	r1, #2
 8006d54:	4809      	ldr	r0, [pc, #36]	; (8006d7c <spiselect+0x30>)
 8006d56:	f7fc fd6d 	bl	8003834 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006d5a:	20ff      	movs	r0, #255	; 0xff
 8006d5c:	f7ff ff78 	bl	8006c50 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d64:	f7ff ffc1 	bl	8006cea <wait_ready>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <spiselect+0x26>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e002      	b.n	8006d78 <spiselect+0x2c>

	despiselect();
 8006d72:	f7ff ffdd 	bl	8006d30 <despiselect>
	return 0;	/* Timeout */
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40020000 	.word	0x40020000

08006d80 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006d8a:	20c8      	movs	r0, #200	; 0xc8
 8006d8c:	f7ff ff36 	bl	8006bfc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006d90:	20ff      	movs	r0, #255	; 0xff
 8006d92:	f7ff ff5d 	bl	8006c50 <xchg_spi>
 8006d96:	4603      	mov	r3, r0
 8006d98:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	2bff      	cmp	r3, #255	; 0xff
 8006d9e:	d104      	bne.n	8006daa <rcvr_datablock+0x2a>
 8006da0:	f7ff ff40 	bl	8006c24 <SPI_Timer_Status>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1f2      	bne.n	8006d90 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	2bfe      	cmp	r3, #254	; 0xfe
 8006dae:	d001      	beq.n	8006db4 <rcvr_datablock+0x34>
 8006db0:	2300      	movs	r3, #0
 8006db2:	e00a      	b.n	8006dca <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff ff60 	bl	8006c7c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006dbc:	20ff      	movs	r0, #255	; 0xff
 8006dbe:	f7ff ff47 	bl	8006c50 <xchg_spi>
 8006dc2:	20ff      	movs	r0, #255	; 0xff
 8006dc4:	f7ff ff44 	bl	8006c50 <xchg_spi>

	return 1;						/* Function succeeded */
 8006dc8:	2301      	movs	r3, #1
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006dde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006de2:	f7ff ff82 	bl	8006cea <wait_ready>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <xmit_datablock+0x1e>
 8006dec:	2300      	movs	r3, #0
 8006dee:	e01e      	b.n	8006e2e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006df0:	78fb      	ldrb	r3, [r7, #3]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff ff2c 	bl	8006c50 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	2bfd      	cmp	r3, #253	; 0xfd
 8006dfc:	d016      	beq.n	8006e2c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff ff56 	bl	8006cb4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006e08:	20ff      	movs	r0, #255	; 0xff
 8006e0a:	f7ff ff21 	bl	8006c50 <xchg_spi>
 8006e0e:	20ff      	movs	r0, #255	; 0xff
 8006e10:	f7ff ff1e 	bl	8006c50 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006e14:	20ff      	movs	r0, #255	; 0xff
 8006e16:	f7ff ff1b 	bl	8006c50 <xchg_spi>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	2b05      	cmp	r3, #5
 8006e26:	d001      	beq.n	8006e2c <xmit_datablock+0x5a>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e000      	b.n	8006e2e <xmit_datablock+0x5c>
	}
	return 1;
 8006e2c:	2301      	movs	r3, #1
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	6039      	str	r1, [r7, #0]
 8006e40:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	da0e      	bge.n	8006e68 <send_cmd+0x32>
		cmd &= 0x7F;
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e50:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006e52:	2100      	movs	r1, #0
 8006e54:	2037      	movs	r0, #55	; 0x37
 8006e56:	f7ff ffee 	bl	8006e36 <send_cmd>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d901      	bls.n	8006e68 <send_cmd+0x32>
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	e051      	b.n	8006f0c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	2b0c      	cmp	r3, #12
 8006e6c:	d008      	beq.n	8006e80 <send_cmd+0x4a>
		despiselect();
 8006e6e:	f7ff ff5f 	bl	8006d30 <despiselect>
		if (!spiselect()) return 0xFF;
 8006e72:	f7ff ff6b 	bl	8006d4c <spiselect>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <send_cmd+0x4a>
 8006e7c:	23ff      	movs	r3, #255	; 0xff
 8006e7e:	e045      	b.n	8006f0c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff fee1 	bl	8006c50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	0e1b      	lsrs	r3, r3, #24
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff fedb 	bl	8006c50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	0c1b      	lsrs	r3, r3, #16
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff fed5 	bl	8006c50 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	0a1b      	lsrs	r3, r3, #8
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7ff fecf 	bl	8006c50 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff feca 	bl	8006c50 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006ec0:	79fb      	ldrb	r3, [r7, #7]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <send_cmd+0x94>
 8006ec6:	2395      	movs	r3, #149	; 0x95
 8006ec8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d101      	bne.n	8006ed4 <send_cmd+0x9e>
 8006ed0:	2387      	movs	r3, #135	; 0x87
 8006ed2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff feba 	bl	8006c50 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	2b0c      	cmp	r3, #12
 8006ee0:	d102      	bne.n	8006ee8 <send_cmd+0xb2>
 8006ee2:	20ff      	movs	r0, #255	; 0xff
 8006ee4:	f7ff feb4 	bl	8006c50 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006ee8:	230a      	movs	r3, #10
 8006eea:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006eec:	20ff      	movs	r0, #255	; 0xff
 8006eee:	f7ff feaf 	bl	8006c50 <xchg_spi>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006ef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	da05      	bge.n	8006f0a <send_cmd+0xd4>
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <send_cmd+0xb6>

	return res;							/* Return received response */
 8006f0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <USER_SPI_initialize+0x14>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0d6      	b.n	80070d6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006f28:	4b6d      	ldr	r3, [pc, #436]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <USER_SPI_initialize+0x2a>
 8006f36:	4b6a      	ldr	r3, [pc, #424]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	e0cb      	b.n	80070d6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006f3e:	4b69      	ldr	r3, [pc, #420]	; (80070e4 <USER_SPI_initialize+0x1d0>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006f48:	4b66      	ldr	r3, [pc, #408]	; (80070e4 <USER_SPI_initialize+0x1d0>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006f50:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006f52:	230a      	movs	r3, #10
 8006f54:	73fb      	strb	r3, [r7, #15]
 8006f56:	e005      	b.n	8006f64 <USER_SPI_initialize+0x50>
 8006f58:	20ff      	movs	r0, #255	; 0xff
 8006f5a:	f7ff fe79 	bl	8006c50 <xchg_spi>
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f6      	bne.n	8006f58 <USER_SPI_initialize+0x44>

	ty = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006f6e:	2100      	movs	r1, #0
 8006f70:	2000      	movs	r0, #0
 8006f72:	f7ff ff60 	bl	8006e36 <send_cmd>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	f040 808b 	bne.w	8007094 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f82:	f7ff fe3b 	bl	8006bfc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006f86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f8a:	2008      	movs	r0, #8
 8006f8c:	f7ff ff53 	bl	8006e36 <send_cmd>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d151      	bne.n	800703a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]
 8006f9a:	e00d      	b.n	8006fb8 <USER_SPI_initialize+0xa4>
 8006f9c:	7bfc      	ldrb	r4, [r7, #15]
 8006f9e:	20ff      	movs	r0, #255	; 0xff
 8006fa0:	f7ff fe56 	bl	8006c50 <xchg_spi>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f104 0310 	add.w	r3, r4, #16
 8006fac:	443b      	add	r3, r7
 8006fae:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	73fb      	strb	r3, [r7, #15]
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d9ee      	bls.n	8006f9c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006fbe:	7abb      	ldrb	r3, [r7, #10]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d167      	bne.n	8007094 <USER_SPI_initialize+0x180>
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	2baa      	cmp	r3, #170	; 0xaa
 8006fc8:	d164      	bne.n	8007094 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006fca:	bf00      	nop
 8006fcc:	f7ff fe2a 	bl	8006c24 <SPI_Timer_Status>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d007      	beq.n	8006fe6 <USER_SPI_initialize+0xd2>
 8006fd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006fda:	20a9      	movs	r0, #169	; 0xa9
 8006fdc:	f7ff ff2b 	bl	8006e36 <send_cmd>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f2      	bne.n	8006fcc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006fe6:	f7ff fe1d 	bl	8006c24 <SPI_Timer_Status>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d051      	beq.n	8007094 <USER_SPI_initialize+0x180>
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	203a      	movs	r0, #58	; 0x3a
 8006ff4:	f7ff ff1f 	bl	8006e36 <send_cmd>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d14a      	bne.n	8007094 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
 8007002:	e00d      	b.n	8007020 <USER_SPI_initialize+0x10c>
 8007004:	7bfc      	ldrb	r4, [r7, #15]
 8007006:	20ff      	movs	r0, #255	; 0xff
 8007008:	f7ff fe22 	bl	8006c50 <xchg_spi>
 800700c:	4603      	mov	r3, r0
 800700e:	461a      	mov	r2, r3
 8007010:	f104 0310 	add.w	r3, r4, #16
 8007014:	443b      	add	r3, r7
 8007016:	f803 2c08 	strb.w	r2, [r3, #-8]
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	3301      	adds	r3, #1
 800701e:	73fb      	strb	r3, [r7, #15]
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d9ee      	bls.n	8007004 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007026:	7a3b      	ldrb	r3, [r7, #8]
 8007028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <USER_SPI_initialize+0x120>
 8007030:	230c      	movs	r3, #12
 8007032:	e000      	b.n	8007036 <USER_SPI_initialize+0x122>
 8007034:	2304      	movs	r3, #4
 8007036:	737b      	strb	r3, [r7, #13]
 8007038:	e02c      	b.n	8007094 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800703a:	2100      	movs	r1, #0
 800703c:	20a9      	movs	r0, #169	; 0xa9
 800703e:	f7ff fefa 	bl	8006e36 <send_cmd>
 8007042:	4603      	mov	r3, r0
 8007044:	2b01      	cmp	r3, #1
 8007046:	d804      	bhi.n	8007052 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007048:	2302      	movs	r3, #2
 800704a:	737b      	strb	r3, [r7, #13]
 800704c:	23a9      	movs	r3, #169	; 0xa9
 800704e:	73bb      	strb	r3, [r7, #14]
 8007050:	e003      	b.n	800705a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007052:	2301      	movs	r3, #1
 8007054:	737b      	strb	r3, [r7, #13]
 8007056:	2301      	movs	r3, #1
 8007058:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800705a:	bf00      	nop
 800705c:	f7ff fde2 	bl	8006c24 <SPI_Timer_Status>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <USER_SPI_initialize+0x162>
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2100      	movs	r1, #0
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff fee3 	bl	8006e36 <send_cmd>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1f2      	bne.n	800705c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007076:	f7ff fdd5 	bl	8006c24 <SPI_Timer_Status>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <USER_SPI_initialize+0x17c>
 8007080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007084:	2010      	movs	r0, #16
 8007086:	f7ff fed6 	bl	8006e36 <send_cmd>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <USER_SPI_initialize+0x180>
				ty = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007094:	4a14      	ldr	r2, [pc, #80]	; (80070e8 <USER_SPI_initialize+0x1d4>)
 8007096:	7b7b      	ldrb	r3, [r7, #13]
 8007098:	7013      	strb	r3, [r2, #0]
	despiselect();
 800709a:	f7ff fe49 	bl	8006d30 <despiselect>

	if (ty) {			/* OK */
 800709e:	7b7b      	ldrb	r3, [r7, #13]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d012      	beq.n	80070ca <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80070a4:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <USER_SPI_initialize+0x1d0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80070ae:	4b0d      	ldr	r3, [pc, #52]	; (80070e4 <USER_SPI_initialize+0x1d0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0210 	orr.w	r2, r2, #16
 80070b6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80070b8:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	f023 0301 	bic.w	r3, r3, #1
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	e002      	b.n	80070d0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80070d0:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <USER_SPI_initialize+0x1cc>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	b2db      	uxtb	r3, r3
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd90      	pop	{r4, r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000020 	.word	0x20000020
 80070e4:	200008a0 	.word	0x200008a0
 80070e8:	20013738 	.word	0x20013738

080070ec <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <USER_SPI_status+0x14>
 80070fc:	2301      	movs	r3, #1
 80070fe:	e002      	b.n	8007106 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <USER_SPI_status+0x28>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	b2db      	uxtb	r3, r3
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	20000020 	.word	0x20000020

08007118 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	60b9      	str	r1, [r7, #8]
 8007120:	607a      	str	r2, [r7, #4]
 8007122:	603b      	str	r3, [r7, #0]
 8007124:	4603      	mov	r3, r0
 8007126:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d102      	bne.n	8007134 <USER_SPI_read+0x1c>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <USER_SPI_read+0x20>
 8007134:	2304      	movs	r3, #4
 8007136:	e04d      	b.n	80071d4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007138:	4b28      	ldr	r3, [pc, #160]	; (80071dc <USER_SPI_read+0xc4>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <USER_SPI_read+0x32>
 8007146:	2303      	movs	r3, #3
 8007148:	e044      	b.n	80071d4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800714a:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <USER_SPI_read+0xc8>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	f003 0308 	and.w	r3, r3, #8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d102      	bne.n	800715c <USER_SPI_read+0x44>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	025b      	lsls	r3, r3, #9
 800715a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d111      	bne.n	8007186 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007162:	6879      	ldr	r1, [r7, #4]
 8007164:	2011      	movs	r0, #17
 8007166:	f7ff fe66 	bl	8006e36 <send_cmd>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d129      	bne.n	80071c4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007174:	68b8      	ldr	r0, [r7, #8]
 8007176:	f7ff fe03 	bl	8006d80 <rcvr_datablock>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d021      	beq.n	80071c4 <USER_SPI_read+0xac>
			count = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	e01e      	b.n	80071c4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	2012      	movs	r0, #18
 800718a:	f7ff fe54 	bl	8006e36 <send_cmd>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d117      	bne.n	80071c4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007198:	68b8      	ldr	r0, [r7, #8]
 800719a:	f7ff fdf1 	bl	8006d80 <rcvr_datablock>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <USER_SPI_read+0xa2>
				buff += 512;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80071aa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1ed      	bne.n	8007194 <USER_SPI_read+0x7c>
 80071b8:	e000      	b.n	80071bc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80071ba:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80071bc:	2100      	movs	r1, #0
 80071be:	200c      	movs	r0, #12
 80071c0:	f7ff fe39 	bl	8006e36 <send_cmd>
		}
	}
	despiselect();
 80071c4:	f7ff fdb4 	bl	8006d30 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bf14      	ite	ne
 80071ce:	2301      	movne	r3, #1
 80071d0:	2300      	moveq	r3, #0
 80071d2:	b2db      	uxtb	r3, r3
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20000020 	.word	0x20000020
 80071e0:	20013738 	.word	0x20013738

080071e4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	607a      	str	r2, [r7, #4]
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d102      	bne.n	8007200 <USER_SPI_write+0x1c>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <USER_SPI_write+0x20>
 8007200:	2304      	movs	r3, #4
 8007202:	e063      	b.n	80072cc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007204:	4b33      	ldr	r3, [pc, #204]	; (80072d4 <USER_SPI_write+0xf0>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	b2db      	uxtb	r3, r3
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d001      	beq.n	8007216 <USER_SPI_write+0x32>
 8007212:	2303      	movs	r3, #3
 8007214:	e05a      	b.n	80072cc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007216:	4b2f      	ldr	r3, [pc, #188]	; (80072d4 <USER_SPI_write+0xf0>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <USER_SPI_write+0x44>
 8007224:	2302      	movs	r3, #2
 8007226:	e051      	b.n	80072cc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007228:	4b2b      	ldr	r3, [pc, #172]	; (80072d8 <USER_SPI_write+0xf4>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	f003 0308 	and.w	r3, r3, #8
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <USER_SPI_write+0x56>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	025b      	lsls	r3, r3, #9
 8007238:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d110      	bne.n	8007262 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	2018      	movs	r0, #24
 8007244:	f7ff fdf7 	bl	8006e36 <send_cmd>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d136      	bne.n	80072bc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800724e:	21fe      	movs	r1, #254	; 0xfe
 8007250:	68b8      	ldr	r0, [r7, #8]
 8007252:	f7ff fdbe 	bl	8006dd2 <xmit_datablock>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d02f      	beq.n	80072bc <USER_SPI_write+0xd8>
			count = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	603b      	str	r3, [r7, #0]
 8007260:	e02c      	b.n	80072bc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007262:	4b1d      	ldr	r3, [pc, #116]	; (80072d8 <USER_SPI_write+0xf4>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f003 0306 	and.w	r3, r3, #6
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <USER_SPI_write+0x92>
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	2097      	movs	r0, #151	; 0x97
 8007272:	f7ff fde0 	bl	8006e36 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	2019      	movs	r0, #25
 800727a:	f7ff fddc 	bl	8006e36 <send_cmd>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d11b      	bne.n	80072bc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007284:	21fc      	movs	r1, #252	; 0xfc
 8007286:	68b8      	ldr	r0, [r7, #8]
 8007288:	f7ff fda3 	bl	8006dd2 <xmit_datablock>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <USER_SPI_write+0xc4>
				buff += 512;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007298:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	3b01      	subs	r3, #1
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1ee      	bne.n	8007284 <USER_SPI_write+0xa0>
 80072a6:	e000      	b.n	80072aa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80072a8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80072aa:	21fd      	movs	r1, #253	; 0xfd
 80072ac:	2000      	movs	r0, #0
 80072ae:	f7ff fd90 	bl	8006dd2 <xmit_datablock>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <USER_SPI_write+0xd8>
 80072b8:	2301      	movs	r3, #1
 80072ba:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80072bc:	f7ff fd38 	bl	8006d30 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	bf14      	ite	ne
 80072c6:	2301      	movne	r3, #1
 80072c8:	2300      	moveq	r3, #0
 80072ca:	b2db      	uxtb	r3, r3
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000020 	.word	0x20000020
 80072d8:	20013738 	.word	0x20013738

080072dc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	; 0x30
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	603a      	str	r2, [r7, #0]
 80072e6:	71fb      	strb	r3, [r7, #7]
 80072e8:	460b      	mov	r3, r1
 80072ea:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <USER_SPI_ioctl+0x1a>
 80072f2:	2304      	movs	r3, #4
 80072f4:	e15a      	b.n	80075ac <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80072f6:	4baf      	ldr	r3, [pc, #700]	; (80075b4 <USER_SPI_ioctl+0x2d8>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <USER_SPI_ioctl+0x2c>
 8007304:	2303      	movs	r3, #3
 8007306:	e151      	b.n	80075ac <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800730e:	79bb      	ldrb	r3, [r7, #6]
 8007310:	2b04      	cmp	r3, #4
 8007312:	f200 8136 	bhi.w	8007582 <USER_SPI_ioctl+0x2a6>
 8007316:	a201      	add	r2, pc, #4	; (adr r2, 800731c <USER_SPI_ioctl+0x40>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	08007331 	.word	0x08007331
 8007320:	08007345 	.word	0x08007345
 8007324:	08007583 	.word	0x08007583
 8007328:	080073f1 	.word	0x080073f1
 800732c:	080074e7 	.word	0x080074e7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007330:	f7ff fd0c 	bl	8006d4c <spiselect>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8127 	beq.w	800758a <USER_SPI_ioctl+0x2ae>
 800733c:	2300      	movs	r3, #0
 800733e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007342:	e122      	b.n	800758a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007344:	2100      	movs	r1, #0
 8007346:	2009      	movs	r0, #9
 8007348:	f7ff fd75 	bl	8006e36 <send_cmd>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	f040 811d 	bne.w	800758e <USER_SPI_ioctl+0x2b2>
 8007354:	f107 030c 	add.w	r3, r7, #12
 8007358:	2110      	movs	r1, #16
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fd10 	bl	8006d80 <rcvr_datablock>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8113 	beq.w	800758e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007368:	7b3b      	ldrb	r3, [r7, #12]
 800736a:	099b      	lsrs	r3, r3, #6
 800736c:	b2db      	uxtb	r3, r3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d111      	bne.n	8007396 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007372:	7d7b      	ldrb	r3, [r7, #21]
 8007374:	461a      	mov	r2, r3
 8007376:	7d3b      	ldrb	r3, [r7, #20]
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	4413      	add	r3, r2
 800737c:	461a      	mov	r2, r3
 800737e:	7cfb      	ldrb	r3, [r7, #19]
 8007380:	041b      	lsls	r3, r3, #16
 8007382:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007386:	4413      	add	r3, r2
 8007388:	3301      	adds	r3, #1
 800738a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	029a      	lsls	r2, r3, #10
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	e028      	b.n	80073e8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007396:	7c7b      	ldrb	r3, [r7, #17]
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	b2da      	uxtb	r2, r3
 800739e:	7dbb      	ldrb	r3, [r7, #22]
 80073a0:	09db      	lsrs	r3, r3, #7
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	4413      	add	r3, r2
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	7d7b      	ldrb	r3, [r7, #21]
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	f003 0306 	and.w	r3, r3, #6
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	4413      	add	r3, r2
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	3302      	adds	r3, #2
 80073ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80073be:	7d3b      	ldrb	r3, [r7, #20]
 80073c0:	099b      	lsrs	r3, r3, #6
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	461a      	mov	r2, r3
 80073c6:	7cfb      	ldrb	r3, [r7, #19]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	441a      	add	r2, r3
 80073cc:	7cbb      	ldrb	r3, [r7, #18]
 80073ce:	029b      	lsls	r3, r3, #10
 80073d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073d4:	4413      	add	r3, r2
 80073d6:	3301      	adds	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80073da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80073de:	3b09      	subs	r3, #9
 80073e0:	69fa      	ldr	r2, [r7, #28]
 80073e2:	409a      	lsls	r2, r3
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80073ee:	e0ce      	b.n	800758e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80073f0:	4b71      	ldr	r3, [pc, #452]	; (80075b8 <USER_SPI_ioctl+0x2dc>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d031      	beq.n	8007460 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80073fc:	2100      	movs	r1, #0
 80073fe:	208d      	movs	r0, #141	; 0x8d
 8007400:	f7ff fd19 	bl	8006e36 <send_cmd>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	f040 80c3 	bne.w	8007592 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800740c:	20ff      	movs	r0, #255	; 0xff
 800740e:	f7ff fc1f 	bl	8006c50 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007412:	f107 030c 	add.w	r3, r7, #12
 8007416:	2110      	movs	r1, #16
 8007418:	4618      	mov	r0, r3
 800741a:	f7ff fcb1 	bl	8006d80 <rcvr_datablock>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 80b6 	beq.w	8007592 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007426:	2330      	movs	r3, #48	; 0x30
 8007428:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800742c:	e007      	b.n	800743e <USER_SPI_ioctl+0x162>
 800742e:	20ff      	movs	r0, #255	; 0xff
 8007430:	f7ff fc0e 	bl	8006c50 <xchg_spi>
 8007434:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007438:	3b01      	subs	r3, #1
 800743a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800743e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f3      	bne.n	800742e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007446:	7dbb      	ldrb	r3, [r7, #22]
 8007448:	091b      	lsrs	r3, r3, #4
 800744a:	b2db      	uxtb	r3, r3
 800744c:	461a      	mov	r2, r3
 800744e:	2310      	movs	r3, #16
 8007450:	fa03 f202 	lsl.w	r2, r3, r2
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800745e:	e098      	b.n	8007592 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007460:	2100      	movs	r1, #0
 8007462:	2009      	movs	r0, #9
 8007464:	f7ff fce7 	bl	8006e36 <send_cmd>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	f040 8091 	bne.w	8007592 <USER_SPI_ioctl+0x2b6>
 8007470:	f107 030c 	add.w	r3, r7, #12
 8007474:	2110      	movs	r1, #16
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff fc82 	bl	8006d80 <rcvr_datablock>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 8087 	beq.w	8007592 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007484:	4b4c      	ldr	r3, [pc, #304]	; (80075b8 <USER_SPI_ioctl+0x2dc>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d012      	beq.n	80074b6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007490:	7dbb      	ldrb	r3, [r7, #22]
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007498:	7dfa      	ldrb	r2, [r7, #23]
 800749a:	09d2      	lsrs	r2, r2, #7
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	4413      	add	r3, r2
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	7e7b      	ldrb	r3, [r7, #25]
 80074a4:	099b      	lsrs	r3, r3, #6
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	fa02 f303 	lsl.w	r3, r2, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	e013      	b.n	80074de <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80074b6:	7dbb      	ldrb	r3, [r7, #22]
 80074b8:	109b      	asrs	r3, r3, #2
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f003 031f 	and.w	r3, r3, #31
 80074c0:	3301      	adds	r3, #1
 80074c2:	7dfa      	ldrb	r2, [r7, #23]
 80074c4:	00d2      	lsls	r2, r2, #3
 80074c6:	f002 0218 	and.w	r2, r2, #24
 80074ca:	7df9      	ldrb	r1, [r7, #23]
 80074cc:	0949      	lsrs	r1, r1, #5
 80074ce:	b2c9      	uxtb	r1, r1
 80074d0:	440a      	add	r2, r1
 80074d2:	3201      	adds	r2, #1
 80074d4:	fb02 f303 	mul.w	r3, r2, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80074e4:	e055      	b.n	8007592 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80074e6:	4b34      	ldr	r3, [pc, #208]	; (80075b8 <USER_SPI_ioctl+0x2dc>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	f003 0306 	and.w	r3, r3, #6
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d051      	beq.n	8007596 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80074f2:	f107 020c 	add.w	r2, r7, #12
 80074f6:	79fb      	ldrb	r3, [r7, #7]
 80074f8:	210b      	movs	r1, #11
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7ff feee 	bl	80072dc <USER_SPI_ioctl>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d149      	bne.n	800759a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007506:	7b3b      	ldrb	r3, [r7, #12]
 8007508:	099b      	lsrs	r3, r3, #6
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <USER_SPI_ioctl+0x23e>
 8007510:	7dbb      	ldrb	r3, [r7, #22]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	d041      	beq.n	800759e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	623b      	str	r3, [r7, #32]
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	62bb      	str	r3, [r7, #40]	; 0x28
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800752a:	4b23      	ldr	r3, [pc, #140]	; (80075b8 <USER_SPI_ioctl+0x2dc>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b00      	cmp	r3, #0
 8007534:	d105      	bne.n	8007542 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	025b      	lsls	r3, r3, #9
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28
 800753c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753e:	025b      	lsls	r3, r3, #9
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007544:	2020      	movs	r0, #32
 8007546:	f7ff fc76 	bl	8006e36 <send_cmd>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d128      	bne.n	80075a2 <USER_SPI_ioctl+0x2c6>
 8007550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007552:	2021      	movs	r0, #33	; 0x21
 8007554:	f7ff fc6f 	bl	8006e36 <send_cmd>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d121      	bne.n	80075a2 <USER_SPI_ioctl+0x2c6>
 800755e:	2100      	movs	r1, #0
 8007560:	2026      	movs	r0, #38	; 0x26
 8007562:	f7ff fc68 	bl	8006e36 <send_cmd>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d11a      	bne.n	80075a2 <USER_SPI_ioctl+0x2c6>
 800756c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007570:	f7ff fbbb 	bl	8006cea <wait_ready>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d013      	beq.n	80075a2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800757a:	2300      	movs	r3, #0
 800757c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007580:	e00f      	b.n	80075a2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007582:	2304      	movs	r3, #4
 8007584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007588:	e00c      	b.n	80075a4 <USER_SPI_ioctl+0x2c8>
		break;
 800758a:	bf00      	nop
 800758c:	e00a      	b.n	80075a4 <USER_SPI_ioctl+0x2c8>
		break;
 800758e:	bf00      	nop
 8007590:	e008      	b.n	80075a4 <USER_SPI_ioctl+0x2c8>
		break;
 8007592:	bf00      	nop
 8007594:	e006      	b.n	80075a4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007596:	bf00      	nop
 8007598:	e004      	b.n	80075a4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800759a:	bf00      	nop
 800759c:	e002      	b.n	80075a4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800759e:	bf00      	nop
 80075a0:	e000      	b.n	80075a4 <USER_SPI_ioctl+0x2c8>
		break;
 80075a2:	bf00      	nop
	}

	despiselect();
 80075a4:	f7ff fbc4 	bl	8006d30 <despiselect>

	return res;
 80075a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3730      	adds	r7, #48	; 0x30
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000020 	.word	0x20000020
 80075b8:	20013738 	.word	0x20013738

080075bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	4603      	mov	r3, r0
 80075c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	4a08      	ldr	r2, [pc, #32]	; (80075ec <disk_status+0x30>)
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	79fa      	ldrb	r2, [r7, #7]
 80075d4:	4905      	ldr	r1, [pc, #20]	; (80075ec <disk_status+0x30>)
 80075d6:	440a      	add	r2, r1
 80075d8:	7a12      	ldrb	r2, [r2, #8]
 80075da:	4610      	mov	r0, r2
 80075dc:	4798      	blx	r3
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	2001376c 	.word	0x2001376c

080075f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	4a0d      	ldr	r2, [pc, #52]	; (8007638 <disk_initialize+0x48>)
 8007602:	5cd3      	ldrb	r3, [r2, r3]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d111      	bne.n	800762c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	4a0b      	ldr	r2, [pc, #44]	; (8007638 <disk_initialize+0x48>)
 800760c:	2101      	movs	r1, #1
 800760e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007610:	79fb      	ldrb	r3, [r7, #7]
 8007612:	4a09      	ldr	r2, [pc, #36]	; (8007638 <disk_initialize+0x48>)
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	79fa      	ldrb	r2, [r7, #7]
 800761e:	4906      	ldr	r1, [pc, #24]	; (8007638 <disk_initialize+0x48>)
 8007620:	440a      	add	r2, r1
 8007622:	7a12      	ldrb	r2, [r2, #8]
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	2001376c 	.word	0x2001376c

0800763c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800763c:	b590      	push	{r4, r7, lr}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	607a      	str	r2, [r7, #4]
 8007646:	603b      	str	r3, [r7, #0]
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	4a0a      	ldr	r2, [pc, #40]	; (8007678 <disk_read+0x3c>)
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	689c      	ldr	r4, [r3, #8]
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	4a07      	ldr	r2, [pc, #28]	; (8007678 <disk_read+0x3c>)
 800765c:	4413      	add	r3, r2
 800765e:	7a18      	ldrb	r0, [r3, #8]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	68b9      	ldr	r1, [r7, #8]
 8007666:	47a0      	blx	r4
 8007668:	4603      	mov	r3, r0
 800766a:	75fb      	strb	r3, [r7, #23]
  return res;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
}
 800766e:	4618      	mov	r0, r3
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	bd90      	pop	{r4, r7, pc}
 8007676:	bf00      	nop
 8007678:	2001376c 	.word	0x2001376c

0800767c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800767c:	b590      	push	{r4, r7, lr}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	603b      	str	r3, [r7, #0]
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800768c:	7bfb      	ldrb	r3, [r7, #15]
 800768e:	4a0a      	ldr	r2, [pc, #40]	; (80076b8 <disk_write+0x3c>)
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	68dc      	ldr	r4, [r3, #12]
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	4a07      	ldr	r2, [pc, #28]	; (80076b8 <disk_write+0x3c>)
 800769c:	4413      	add	r3, r2
 800769e:	7a18      	ldrb	r0, [r3, #8]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	47a0      	blx	r4
 80076a8:	4603      	mov	r3, r0
 80076aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd90      	pop	{r4, r7, pc}
 80076b6:	bf00      	nop
 80076b8:	2001376c 	.word	0x2001376c

080076bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	603a      	str	r2, [r7, #0]
 80076c6:	71fb      	strb	r3, [r7, #7]
 80076c8:	460b      	mov	r3, r1
 80076ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	4a09      	ldr	r2, [pc, #36]	; (80076f4 <disk_ioctl+0x38>)
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	79fa      	ldrb	r2, [r7, #7]
 80076da:	4906      	ldr	r1, [pc, #24]	; (80076f4 <disk_ioctl+0x38>)
 80076dc:	440a      	add	r2, r1
 80076de:	7a10      	ldrb	r0, [r2, #8]
 80076e0:	79b9      	ldrb	r1, [r7, #6]
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	4798      	blx	r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	2001376c 	.word	0x2001376c

080076f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3301      	adds	r3, #1
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007708:	89fb      	ldrh	r3, [r7, #14]
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	b21a      	sxth	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	b21b      	sxth	r3, r3
 8007714:	4313      	orrs	r3, r2
 8007716:	b21b      	sxth	r3, r3
 8007718:	81fb      	strh	r3, [r7, #14]
	return rv;
 800771a:	89fb      	ldrh	r3, [r7, #14]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3303      	adds	r3, #3
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	021b      	lsls	r3, r3, #8
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	3202      	adds	r2, #2
 8007740:	7812      	ldrb	r2, [r2, #0]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	3201      	adds	r2, #1
 800774e:	7812      	ldrb	r2, [r2, #0]
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	021b      	lsls	r3, r3, #8
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7812      	ldrb	r2, [r2, #0]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007760:	68fb      	ldr	r3, [r7, #12]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	887a      	ldrh	r2, [r7, #2]
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	887b      	ldrh	r3, [r7, #2]
 8007788:	0a1b      	lsrs	r3, r3, #8
 800778a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	887a      	ldrh	r2, [r7, #2]
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	701a      	strb	r2, [r3, #0]
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	607a      	str	r2, [r7, #4]
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	0a1b      	lsrs	r3, r3, #8
 80077be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	607a      	str	r2, [r7, #4]
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	b2d2      	uxtb	r2, r2
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	0a1b      	lsrs	r3, r3, #8
 80077d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	0a1b      	lsrs	r3, r3, #8
 80077e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	701a      	strb	r2, [r3, #0]
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00d      	beq.n	8007832 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	1c53      	adds	r3, r2, #1
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	1c59      	adds	r1, r3, #1
 8007820:	6179      	str	r1, [r7, #20]
 8007822:	7812      	ldrb	r2, [r2, #0]
 8007824:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3b01      	subs	r3, #1
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1f1      	bne.n	8007816 <mem_cpy+0x1a>
	}
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800783e:	b480      	push	{r7}
 8007840:	b087      	sub	sp, #28
 8007842:	af00      	add	r7, sp, #0
 8007844:	60f8      	str	r0, [r7, #12]
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	617a      	str	r2, [r7, #20]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	b2d2      	uxtb	r2, r2
 8007858:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3b01      	subs	r3, #1
 800785e:	607b      	str	r3, [r7, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f3      	bne.n	800784e <mem_set+0x10>
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007874:	b480      	push	{r7}
 8007876:	b089      	sub	sp, #36	; 0x24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	61fb      	str	r3, [r7, #28]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007888:	2300      	movs	r3, #0
 800788a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	61fa      	str	r2, [r7, #28]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	4619      	mov	r1, r3
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	61ba      	str	r2, [r7, #24]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	1acb      	subs	r3, r1, r3
 80078a0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	607b      	str	r3, [r7, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <mem_cmp+0x40>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0eb      	beq.n	800788c <mem_cmp+0x18>

	return r;
 80078b4:	697b      	ldr	r3, [r7, #20]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3724      	adds	r7, #36	; 0x24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80078cc:	e002      	b.n	80078d4 <chk_chr+0x12>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	3301      	adds	r3, #1
 80078d2:	607b      	str	r3, [r7, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <chk_chr+0x26>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d1f2      	bne.n	80078ce <chk_chr+0xc>
	return *str;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	781b      	ldrb	r3, [r3, #0]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007902:	2300      	movs	r3, #0
 8007904:	60bb      	str	r3, [r7, #8]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	e029      	b.n	8007960 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800790c:	4a27      	ldr	r2, [pc, #156]	; (80079ac <chk_lock+0xb4>)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	4413      	add	r3, r2
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d01d      	beq.n	8007956 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800791a:	4a24      	ldr	r2, [pc, #144]	; (80079ac <chk_lock+0xb4>)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	4413      	add	r3, r2
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d116      	bne.n	800795a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800792c:	4a1f      	ldr	r2, [pc, #124]	; (80079ac <chk_lock+0xb4>)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	011b      	lsls	r3, r3, #4
 8007932:	4413      	add	r3, r2
 8007934:	3304      	adds	r3, #4
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800793c:	429a      	cmp	r2, r3
 800793e:	d10c      	bne.n	800795a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007940:	4a1a      	ldr	r2, [pc, #104]	; (80079ac <chk_lock+0xb4>)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	4413      	add	r3, r2
 8007948:	3308      	adds	r3, #8
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007950:	429a      	cmp	r2, r3
 8007952:	d102      	bne.n	800795a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007954:	e007      	b.n	8007966 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007956:	2301      	movs	r3, #1
 8007958:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3301      	adds	r3, #1
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d9d2      	bls.n	800790c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d109      	bne.n	8007980 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <chk_lock+0x80>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d101      	bne.n	800797c <chk_lock+0x84>
 8007978:	2300      	movs	r3, #0
 800797a:	e010      	b.n	800799e <chk_lock+0xa6>
 800797c:	2312      	movs	r3, #18
 800797e:	e00e      	b.n	800799e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d108      	bne.n	8007998 <chk_lock+0xa0>
 8007986:	4a09      	ldr	r2, [pc, #36]	; (80079ac <chk_lock+0xb4>)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	4413      	add	r3, r2
 800798e:	330c      	adds	r3, #12
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007996:	d101      	bne.n	800799c <chk_lock+0xa4>
 8007998:	2310      	movs	r3, #16
 800799a:	e000      	b.n	800799e <chk_lock+0xa6>
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	2001374c 	.word	0x2001374c

080079b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80079b6:	2300      	movs	r3, #0
 80079b8:	607b      	str	r3, [r7, #4]
 80079ba:	e002      	b.n	80079c2 <enq_lock+0x12>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3301      	adds	r3, #1
 80079c0:	607b      	str	r3, [r7, #4]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d806      	bhi.n	80079d6 <enq_lock+0x26>
 80079c8:	4a09      	ldr	r2, [pc, #36]	; (80079f0 <enq_lock+0x40>)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	011b      	lsls	r3, r3, #4
 80079ce:	4413      	add	r3, r2
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f2      	bne.n	80079bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	bf14      	ite	ne
 80079dc:	2301      	movne	r3, #1
 80079de:	2300      	moveq	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	2001374c 	.word	0x2001374c

080079f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e01f      	b.n	8007a44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007a04:	4a41      	ldr	r2, [pc, #260]	; (8007b0c <inc_lock+0x118>)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	4413      	add	r3, r2
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d113      	bne.n	8007a3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007a16:	4a3d      	ldr	r2, [pc, #244]	; (8007b0c <inc_lock+0x118>)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	4413      	add	r3, r2
 8007a1e:	3304      	adds	r3, #4
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d109      	bne.n	8007a3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007a2a:	4a38      	ldr	r2, [pc, #224]	; (8007b0c <inc_lock+0x118>)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	011b      	lsls	r3, r3, #4
 8007a30:	4413      	add	r3, r2
 8007a32:	3308      	adds	r3, #8
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d006      	beq.n	8007a4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3301      	adds	r3, #1
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d9dc      	bls.n	8007a04 <inc_lock+0x10>
 8007a4a:	e000      	b.n	8007a4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007a4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2b02      	cmp	r3, #2
 8007a52:	d132      	bne.n	8007aba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	e002      	b.n	8007a60 <inc_lock+0x6c>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d806      	bhi.n	8007a74 <inc_lock+0x80>
 8007a66:	4a29      	ldr	r2, [pc, #164]	; (8007b0c <inc_lock+0x118>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	4413      	add	r3, r2
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1f2      	bne.n	8007a5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d101      	bne.n	8007a7e <inc_lock+0x8a>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e040      	b.n	8007b00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	4922      	ldr	r1, [pc, #136]	; (8007b0c <inc_lock+0x118>)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	011b      	lsls	r3, r3, #4
 8007a88:	440b      	add	r3, r1
 8007a8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689a      	ldr	r2, [r3, #8]
 8007a90:	491e      	ldr	r1, [pc, #120]	; (8007b0c <inc_lock+0x118>)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	440b      	add	r3, r1
 8007a98:	3304      	adds	r3, #4
 8007a9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	695a      	ldr	r2, [r3, #20]
 8007aa0:	491a      	ldr	r1, [pc, #104]	; (8007b0c <inc_lock+0x118>)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	440b      	add	r3, r1
 8007aa8:	3308      	adds	r3, #8
 8007aaa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007aac:	4a17      	ldr	r2, [pc, #92]	; (8007b0c <inc_lock+0x118>)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	4413      	add	r3, r2
 8007ab4:	330c      	adds	r3, #12
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <inc_lock+0xe0>
 8007ac0:	4a12      	ldr	r2, [pc, #72]	; (8007b0c <inc_lock+0x118>)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	011b      	lsls	r3, r3, #4
 8007ac6:	4413      	add	r3, r2
 8007ac8:	330c      	adds	r3, #12
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <inc_lock+0xe0>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e015      	b.n	8007b00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d108      	bne.n	8007aec <inc_lock+0xf8>
 8007ada:	4a0c      	ldr	r2, [pc, #48]	; (8007b0c <inc_lock+0x118>)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	4413      	add	r3, r2
 8007ae2:	330c      	adds	r3, #12
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	e001      	b.n	8007af0 <inc_lock+0xfc>
 8007aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007af0:	4906      	ldr	r1, [pc, #24]	; (8007b0c <inc_lock+0x118>)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	440b      	add	r3, r1
 8007af8:	330c      	adds	r3, #12
 8007afa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	2001374c 	.word	0x2001374c

08007b10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	607b      	str	r3, [r7, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d825      	bhi.n	8007b70 <dec_lock+0x60>
		n = Files[i].ctr;
 8007b24:	4a17      	ldr	r2, [pc, #92]	; (8007b84 <dec_lock+0x74>)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	4413      	add	r3, r2
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007b32:	89fb      	ldrh	r3, [r7, #14]
 8007b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b38:	d101      	bne.n	8007b3e <dec_lock+0x2e>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007b3e:	89fb      	ldrh	r3, [r7, #14]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <dec_lock+0x3a>
 8007b44:	89fb      	ldrh	r3, [r7, #14]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007b4a:	4a0e      	ldr	r2, [pc, #56]	; (8007b84 <dec_lock+0x74>)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	4413      	add	r3, r2
 8007b52:	330c      	adds	r3, #12
 8007b54:	89fa      	ldrh	r2, [r7, #14]
 8007b56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007b58:	89fb      	ldrh	r3, [r7, #14]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d105      	bne.n	8007b6a <dec_lock+0x5a>
 8007b5e:	4a09      	ldr	r2, [pc, #36]	; (8007b84 <dec_lock+0x74>)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	4413      	add	r3, r2
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	737b      	strb	r3, [r7, #13]
 8007b6e:	e001      	b.n	8007b74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007b70:	2302      	movs	r3, #2
 8007b72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007b74:	7b7b      	ldrb	r3, [r7, #13]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	2001374c 	.word	0x2001374c

08007b88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]
 8007b94:	e010      	b.n	8007bb8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007b96:	4a0d      	ldr	r2, [pc, #52]	; (8007bcc <clear_lock+0x44>)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	4413      	add	r3, r2
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d105      	bne.n	8007bb2 <clear_lock+0x2a>
 8007ba6:	4a09      	ldr	r2, [pc, #36]	; (8007bcc <clear_lock+0x44>)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	011b      	lsls	r3, r3, #4
 8007bac:	4413      	add	r3, r2
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d9eb      	bls.n	8007b96 <clear_lock+0xe>
	}
}
 8007bbe:	bf00      	nop
 8007bc0:	bf00      	nop
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	2001374c 	.word	0x2001374c

08007bd0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	78db      	ldrb	r3, [r3, #3]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d034      	beq.n	8007c4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	7858      	ldrb	r0, [r3, #1]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	f7ff fd40 	bl	800767c <disk_write>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d002      	beq.n	8007c08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	73fb      	strb	r3, [r7, #15]
 8007c06:	e022      	b.n	8007c4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	1ad2      	subs	r2, r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d217      	bcs.n	8007c4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	789b      	ldrb	r3, [r3, #2]
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	e010      	b.n	8007c48 <sync_window+0x78>
					wsect += fs->fsize;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	7858      	ldrb	r0, [r3, #1]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	f7ff fd1d 	bl	800767c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	613b      	str	r3, [r7, #16]
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d8eb      	bhi.n	8007c26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d01b      	beq.n	8007ca8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ffad 	bl	8007bd0 <sync_window>
 8007c76:	4603      	mov	r3, r0
 8007c78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d113      	bne.n	8007ca8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7858      	ldrb	r0, [r3, #1]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	f7ff fcd5 	bl	800763c <disk_read>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff ff87 	bl	8007bd0 <sync_window>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d158      	bne.n	8007d7e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d148      	bne.n	8007d66 <sync_fs+0xb2>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	791b      	ldrb	r3, [r3, #4]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d144      	bne.n	8007d66 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3330      	adds	r3, #48	; 0x30
 8007ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fda9 	bl	800783e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3330      	adds	r3, #48	; 0x30
 8007cf0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007cf4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff fd38 	bl	800776e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3330      	adds	r3, #48	; 0x30
 8007d02:	4921      	ldr	r1, [pc, #132]	; (8007d88 <sync_fs+0xd4>)
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff fd4d 	bl	80077a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	3330      	adds	r3, #48	; 0x30
 8007d0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007d12:	491e      	ldr	r1, [pc, #120]	; (8007d8c <sync_fs+0xd8>)
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7ff fd45 	bl	80077a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3330      	adds	r3, #48	; 0x30
 8007d1e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f7ff fd3b 	bl	80077a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3330      	adds	r3, #48	; 0x30
 8007d32:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	f7ff fd31 	bl	80077a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	7858      	ldrb	r0, [r3, #1]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	f7ff fc8e 	bl	800767c <disk_write>
			fs->fsi_flag = 0;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	785b      	ldrb	r3, [r3, #1]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff fca4 	bl	80076bc <disk_ioctl>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <sync_fs+0xca>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	41615252 	.word	0x41615252
 8007d8c:	61417272 	.word	0x61417272

08007d90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	3b02      	subs	r3, #2
 8007d9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	3b02      	subs	r3, #2
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d301      	bcc.n	8007db0 <clust2sect+0x20>
 8007dac:	2300      	movs	r3, #0
 8007dae:	e008      	b.n	8007dc2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	895b      	ldrh	r3, [r3, #10]
 8007db4:	461a      	mov	r2, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	fb03 f202 	mul.w	r2, r3, r2
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc0:	4413      	add	r3, r2
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007dce:	b580      	push	{r7, lr}
 8007dd0:	b086      	sub	sp, #24
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d904      	bls.n	8007dee <get_fat+0x20>
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d302      	bcc.n	8007df4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007dee:	2301      	movs	r3, #1
 8007df0:	617b      	str	r3, [r7, #20]
 8007df2:	e08f      	b.n	8007f14 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007df8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	d062      	beq.n	8007ec8 <get_fat+0xfa>
 8007e02:	2b03      	cmp	r3, #3
 8007e04:	dc7c      	bgt.n	8007f00 <get_fat+0x132>
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d002      	beq.n	8007e10 <get_fat+0x42>
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d042      	beq.n	8007e94 <get_fat+0xc6>
 8007e0e:	e077      	b.n	8007f00 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	085b      	lsrs	r3, r3, #1
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	6a1a      	ldr	r2, [r3, #32]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	0a5b      	lsrs	r3, r3, #9
 8007e26:	4413      	add	r3, r2
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6938      	ldr	r0, [r7, #16]
 8007e2c:	f7ff ff14 	bl	8007c58 <move_window>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d167      	bne.n	8007f06 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	60fa      	str	r2, [r7, #12]
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4413      	add	r3, r2
 8007e44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e48:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	6a1a      	ldr	r2, [r3, #32]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	0a5b      	lsrs	r3, r3, #9
 8007e52:	4413      	add	r3, r2
 8007e54:	4619      	mov	r1, r3
 8007e56:	6938      	ldr	r0, [r7, #16]
 8007e58:	f7ff fefe 	bl	8007c58 <move_window>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d153      	bne.n	8007f0a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e70:	021b      	lsls	r3, r3, #8
 8007e72:	461a      	mov	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <get_fat+0xbc>
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	091b      	lsrs	r3, r3, #4
 8007e88:	e002      	b.n	8007e90 <get_fat+0xc2>
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e90:	617b      	str	r3, [r7, #20]
			break;
 8007e92:	e03f      	b.n	8007f14 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	6a1a      	ldr	r2, [r3, #32]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	0a1b      	lsrs	r3, r3, #8
 8007e9c:	4413      	add	r3, r2
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6938      	ldr	r0, [r7, #16]
 8007ea2:	f7ff fed9 	bl	8007c58 <move_window>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d130      	bne.n	8007f0e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007eba:	4413      	add	r3, r2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff fc1b 	bl	80076f8 <ld_word>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	617b      	str	r3, [r7, #20]
			break;
 8007ec6:	e025      	b.n	8007f14 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	6a1a      	ldr	r2, [r3, #32]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	09db      	lsrs	r3, r3, #7
 8007ed0:	4413      	add	r3, r2
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6938      	ldr	r0, [r7, #16]
 8007ed6:	f7ff febf 	bl	8007c58 <move_window>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d118      	bne.n	8007f12 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007eee:	4413      	add	r3, r2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7ff fc19 	bl	8007728 <ld_dword>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007efc:	617b      	str	r3, [r7, #20]
			break;
 8007efe:	e009      	b.n	8007f14 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007f00:	2301      	movs	r3, #1
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	e006      	b.n	8007f14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f06:	bf00      	nop
 8007f08:	e004      	b.n	8007f14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f0a:	bf00      	nop
 8007f0c:	e002      	b.n	8007f14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007f0e:	bf00      	nop
 8007f10:	e000      	b.n	8007f14 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007f12:	bf00      	nop
		}
	}

	return val;
 8007f14:	697b      	ldr	r3, [r7, #20]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007f1e:	b590      	push	{r4, r7, lr}
 8007f20:	b089      	sub	sp, #36	; 0x24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	f240 80d2 	bls.w	80080da <put_fat+0x1bc>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	f080 80cc 	bcs.w	80080da <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	f000 8096 	beq.w	8008078 <put_fat+0x15a>
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	f300 80cd 	bgt.w	80080ec <put_fat+0x1ce>
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d002      	beq.n	8007f5c <put_fat+0x3e>
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d06e      	beq.n	8008038 <put_fat+0x11a>
 8007f5a:	e0c7      	b.n	80080ec <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	61bb      	str	r3, [r7, #24]
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	085b      	lsrs	r3, r3, #1
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	4413      	add	r3, r2
 8007f68:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6a1a      	ldr	r2, [r3, #32]
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	0a5b      	lsrs	r3, r3, #9
 8007f72:	4413      	add	r3, r2
 8007f74:	4619      	mov	r1, r3
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff fe6e 	bl	8007c58 <move_window>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f80:	7ffb      	ldrb	r3, [r7, #31]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f040 80ab 	bne.w	80080de <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	1c59      	adds	r1, r3, #1
 8007f92:	61b9      	str	r1, [r7, #24]
 8007f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f98:	4413      	add	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00d      	beq.n	8007fc2 <put_fat+0xa4>
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b25b      	sxtb	r3, r3
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	b25a      	sxtb	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	b25b      	sxtb	r3, r3
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	b25b      	sxtb	r3, r3
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	e001      	b.n	8007fc6 <put_fat+0xa8>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a1a      	ldr	r2, [r3, #32]
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	0a5b      	lsrs	r3, r3, #9
 8007fd8:	4413      	add	r3, r2
 8007fda:	4619      	mov	r1, r3
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff fe3b 	bl	8007c58 <move_window>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fe6:	7ffb      	ldrb	r3, [r7, #31]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d17a      	bne.n	80080e2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff8:	4413      	add	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <put_fat+0xf0>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	091b      	lsrs	r3, r3, #4
 800800a:	b2db      	uxtb	r3, r3
 800800c:	e00e      	b.n	800802c <put_fat+0x10e>
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	b25b      	sxtb	r3, r3
 8008014:	f023 030f 	bic.w	r3, r3, #15
 8008018:	b25a      	sxtb	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	0a1b      	lsrs	r3, r3, #8
 800801e:	b25b      	sxtb	r3, r3
 8008020:	f003 030f 	and.w	r3, r3, #15
 8008024:	b25b      	sxtb	r3, r3
 8008026:	4313      	orrs	r3, r2
 8008028:	b25b      	sxtb	r3, r3
 800802a:	b2db      	uxtb	r3, r3
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2201      	movs	r2, #1
 8008034:	70da      	strb	r2, [r3, #3]
			break;
 8008036:	e059      	b.n	80080ec <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a1a      	ldr	r2, [r3, #32]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	0a1b      	lsrs	r3, r3, #8
 8008040:	4413      	add	r3, r2
 8008042:	4619      	mov	r1, r3
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff fe07 	bl	8007c58 <move_window>
 800804a:	4603      	mov	r3, r0
 800804c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800804e:	7ffb      	ldrb	r3, [r7, #31]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d148      	bne.n	80080e6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008062:	4413      	add	r3, r2
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	b292      	uxth	r2, r2
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff fb7f 	bl	800776e <st_word>
			fs->wflag = 1;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	70da      	strb	r2, [r3, #3]
			break;
 8008076:	e039      	b.n	80080ec <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a1a      	ldr	r2, [r3, #32]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	09db      	lsrs	r3, r3, #7
 8008080:	4413      	add	r3, r2
 8008082:	4619      	mov	r1, r3
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff fde7 	bl	8007c58 <move_window>
 800808a:	4603      	mov	r3, r0
 800808c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800808e:	7ffb      	ldrb	r3, [r7, #31]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d12a      	bne.n	80080ea <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80080a8:	4413      	add	r3, r2
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff fb3c 	bl	8007728 <ld_dword>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80080b6:	4323      	orrs	r3, r4
 80080b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80080c8:	4413      	add	r3, r2
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7ff fb69 	bl	80077a4 <st_dword>
			fs->wflag = 1;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	70da      	strb	r2, [r3, #3]
			break;
 80080d8:	e008      	b.n	80080ec <put_fat+0x1ce>
		}
	}
 80080da:	bf00      	nop
 80080dc:	e006      	b.n	80080ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80080de:	bf00      	nop
 80080e0:	e004      	b.n	80080ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80080e2:	bf00      	nop
 80080e4:	e002      	b.n	80080ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80080e6:	bf00      	nop
 80080e8:	e000      	b.n	80080ec <put_fat+0x1ce>
			if (res != FR_OK) break;
 80080ea:	bf00      	nop
	return res;
 80080ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3724      	adds	r7, #36	; 0x24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd90      	pop	{r4, r7, pc}

080080f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b088      	sub	sp, #32
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d904      	bls.n	800811c <remove_chain+0x26>
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	429a      	cmp	r2, r3
 800811a:	d301      	bcc.n	8008120 <remove_chain+0x2a>
 800811c:	2302      	movs	r3, #2
 800811e:	e04b      	b.n	80081b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00c      	beq.n	8008140 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008126:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	69b8      	ldr	r0, [r7, #24]
 800812e:	f7ff fef6 	bl	8007f1e <put_fat>
 8008132:	4603      	mov	r3, r0
 8008134:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008136:	7ffb      	ldrb	r3, [r7, #31]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <remove_chain+0x4a>
 800813c:	7ffb      	ldrb	r3, [r7, #31]
 800813e:	e03b      	b.n	80081b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008140:	68b9      	ldr	r1, [r7, #8]
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f7ff fe43 	bl	8007dce <get_fat>
 8008148:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d031      	beq.n	80081b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d101      	bne.n	800815a <remove_chain+0x64>
 8008156:	2302      	movs	r3, #2
 8008158:	e02e      	b.n	80081b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008160:	d101      	bne.n	8008166 <remove_chain+0x70>
 8008162:	2301      	movs	r3, #1
 8008164:	e028      	b.n	80081b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008166:	2200      	movs	r2, #0
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	69b8      	ldr	r0, [r7, #24]
 800816c:	f7ff fed7 	bl	8007f1e <put_fat>
 8008170:	4603      	mov	r3, r0
 8008172:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008174:	7ffb      	ldrb	r3, [r7, #31]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <remove_chain+0x88>
 800817a:	7ffb      	ldrb	r3, [r7, #31]
 800817c:	e01c      	b.n	80081b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	3b02      	subs	r3, #2
 8008188:	429a      	cmp	r2, r3
 800818a:	d20b      	bcs.n	80081a4 <remove_chain+0xae>
			fs->free_clst++;
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	791b      	ldrb	r3, [r3, #4]
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d3c6      	bcc.n	8008140 <remove_chain+0x4a>
 80081b2:	e000      	b.n	80081b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80081b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3720      	adds	r7, #32
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10d      	bne.n	80081f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d004      	beq.n	80081ec <create_chain+0x2c>
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d31b      	bcc.n	8008224 <create_chain+0x64>
 80081ec:	2301      	movs	r3, #1
 80081ee:	61bb      	str	r3, [r7, #24]
 80081f0:	e018      	b.n	8008224 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80081f2:	6839      	ldr	r1, [r7, #0]
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7ff fdea 	bl	8007dce <get_fat>
 80081fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d801      	bhi.n	8008206 <create_chain+0x46>
 8008202:	2301      	movs	r3, #1
 8008204:	e070      	b.n	80082e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800820c:	d101      	bne.n	8008212 <create_chain+0x52>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	e06a      	b.n	80082e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	429a      	cmp	r2, r3
 800821a:	d201      	bcs.n	8008220 <create_chain+0x60>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	e063      	b.n	80082e8 <create_chain+0x128>
		scl = clst;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	3301      	adds	r3, #1
 800822c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	69fa      	ldr	r2, [r7, #28]
 8008234:	429a      	cmp	r2, r3
 8008236:	d307      	bcc.n	8008248 <create_chain+0x88>
				ncl = 2;
 8008238:	2302      	movs	r3, #2
 800823a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800823c:	69fa      	ldr	r2, [r7, #28]
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	429a      	cmp	r2, r3
 8008242:	d901      	bls.n	8008248 <create_chain+0x88>
 8008244:	2300      	movs	r3, #0
 8008246:	e04f      	b.n	80082e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008248:	69f9      	ldr	r1, [r7, #28]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff fdbf 	bl	8007dce <get_fat>
 8008250:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00e      	beq.n	8008276 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d003      	beq.n	8008266 <create_chain+0xa6>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008264:	d101      	bne.n	800826a <create_chain+0xaa>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	e03e      	b.n	80082e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	429a      	cmp	r2, r3
 8008270:	d1da      	bne.n	8008228 <create_chain+0x68>
 8008272:	2300      	movs	r3, #0
 8008274:	e038      	b.n	80082e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008276:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800827c:	69f9      	ldr	r1, [r7, #28]
 800827e:	6938      	ldr	r0, [r7, #16]
 8008280:	f7ff fe4d 	bl	8007f1e <put_fat>
 8008284:	4603      	mov	r3, r0
 8008286:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008288:	7dfb      	ldrb	r3, [r7, #23]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <create_chain+0xe2>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d006      	beq.n	80082a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008294:	69fa      	ldr	r2, [r7, #28]
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6938      	ldr	r0, [r7, #16]
 800829a:	f7ff fe40 	bl	8007f1e <put_fat>
 800829e:	4603      	mov	r3, r0
 80082a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d116      	bne.n	80082d6 <create_chain+0x116>
		fs->last_clst = ncl;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	691a      	ldr	r2, [r3, #16]
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	3b02      	subs	r3, #2
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d804      	bhi.n	80082c6 <create_chain+0x106>
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	1e5a      	subs	r2, r3, #1
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	791b      	ldrb	r3, [r3, #4]
 80082ca:	f043 0301 	orr.w	r3, r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	711a      	strb	r2, [r3, #4]
 80082d4:	e007      	b.n	80082e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d102      	bne.n	80082e2 <create_chain+0x122>
 80082dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082e0:	e000      	b.n	80082e4 <create_chain+0x124>
 80082e2:	2301      	movs	r3, #1
 80082e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80082e6:	69fb      	ldr	r3, [r7, #28]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	3304      	adds	r3, #4
 8008306:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	0a5b      	lsrs	r3, r3, #9
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	8952      	ldrh	r2, [r2, #10]
 8008310:	fbb3 f3f2 	udiv	r3, r3, r2
 8008314:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1d1a      	adds	r2, r3, #4
 800831a:	613a      	str	r2, [r7, #16]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <clmt_clust+0x3a>
 8008326:	2300      	movs	r3, #0
 8008328:	e010      	b.n	800834c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	429a      	cmp	r2, r3
 8008330:	d307      	bcc.n	8008342 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	617b      	str	r3, [r7, #20]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	3304      	adds	r3, #4
 800833e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008340:	e7e9      	b.n	8008316 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008342:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	4413      	add	r3, r2
}
 800834c:	4618      	mov	r0, r3
 800834e:	371c      	adds	r7, #28
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800836e:	d204      	bcs.n	800837a <dir_sdi+0x22>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	f003 031f 	and.w	r3, r3, #31
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <dir_sdi+0x26>
		return FR_INT_ERR;
 800837a:	2302      	movs	r3, #2
 800837c:	e063      	b.n	8008446 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d106      	bne.n	800839e <dir_sdi+0x46>
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d902      	bls.n	800839e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10c      	bne.n	80083be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	095b      	lsrs	r3, r3, #5
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	8912      	ldrh	r2, [r2, #8]
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d301      	bcc.n	80083b4 <dir_sdi+0x5c>
 80083b0:	2302      	movs	r3, #2
 80083b2:	e048      	b.n	8008446 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	61da      	str	r2, [r3, #28]
 80083bc:	e029      	b.n	8008412 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	895b      	ldrh	r3, [r3, #10]
 80083c2:	025b      	lsls	r3, r3, #9
 80083c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80083c6:	e019      	b.n	80083fc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6979      	ldr	r1, [r7, #20]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7ff fcfe 	bl	8007dce <get_fat>
 80083d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083da:	d101      	bne.n	80083e0 <dir_sdi+0x88>
 80083dc:	2301      	movs	r3, #1
 80083de:	e032      	b.n	8008446 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d904      	bls.n	80083f0 <dir_sdi+0x98>
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d301      	bcc.n	80083f4 <dir_sdi+0x9c>
 80083f0:	2302      	movs	r3, #2
 80083f2:	e028      	b.n	8008446 <dir_sdi+0xee>
			ofs -= csz;
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	429a      	cmp	r2, r3
 8008402:	d2e1      	bcs.n	80083c8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008404:	6979      	ldr	r1, [r7, #20]
 8008406:	6938      	ldr	r0, [r7, #16]
 8008408:	f7ff fcc2 	bl	8007d90 <clust2sect>
 800840c:	4602      	mov	r2, r0
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <dir_sdi+0xcc>
 8008420:	2302      	movs	r3, #2
 8008422:	e010      	b.n	8008446 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	0a5b      	lsrs	r3, r3, #9
 800842c:	441a      	add	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843e:	441a      	add	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b086      	sub	sp, #24
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	3320      	adds	r3, #32
 8008464:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <dir_next+0x28>
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008474:	d301      	bcc.n	800847a <dir_next+0x2c>
 8008476:	2304      	movs	r3, #4
 8008478:	e0aa      	b.n	80085d0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008480:	2b00      	cmp	r3, #0
 8008482:	f040 8098 	bne.w	80085b6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	1c5a      	adds	r2, r3, #1
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10b      	bne.n	80084b0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	095b      	lsrs	r3, r3, #5
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	8912      	ldrh	r2, [r2, #8]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	f0c0 8088 	bcc.w	80085b6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	61da      	str	r2, [r3, #28]
 80084ac:	2304      	movs	r3, #4
 80084ae:	e08f      	b.n	80085d0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	0a5b      	lsrs	r3, r3, #9
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	8952      	ldrh	r2, [r2, #10]
 80084b8:	3a01      	subs	r2, #1
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d17a      	bne.n	80085b6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f7ff fc80 	bl	8007dce <get_fat>
 80084ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d801      	bhi.n	80084da <dir_next+0x8c>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e07a      	b.n	80085d0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e0:	d101      	bne.n	80084e6 <dir_next+0x98>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e074      	b.n	80085d0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	697a      	ldr	r2, [r7, #20]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d358      	bcc.n	80085a2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d104      	bne.n	8008500 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	61da      	str	r2, [r3, #28]
 80084fc:	2304      	movs	r3, #4
 80084fe:	e067      	b.n	80085d0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	4619      	mov	r1, r3
 8008508:	4610      	mov	r0, r2
 800850a:	f7ff fe59 	bl	80081c0 <create_chain>
 800850e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <dir_next+0xcc>
 8008516:	2307      	movs	r3, #7
 8008518:	e05a      	b.n	80085d0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d101      	bne.n	8008524 <dir_next+0xd6>
 8008520:	2302      	movs	r3, #2
 8008522:	e055      	b.n	80085d0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800852a:	d101      	bne.n	8008530 <dir_next+0xe2>
 800852c:	2301      	movs	r3, #1
 800852e:	e04f      	b.n	80085d0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f7ff fb4d 	bl	8007bd0 <sync_window>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <dir_next+0xf2>
 800853c:	2301      	movs	r3, #1
 800853e:	e047      	b.n	80085d0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	3330      	adds	r3, #48	; 0x30
 8008544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008548:	2100      	movs	r1, #0
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff f977 	bl	800783e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008550:	2300      	movs	r3, #0
 8008552:	613b      	str	r3, [r7, #16]
 8008554:	6979      	ldr	r1, [r7, #20]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f7ff fc1a 	bl	8007d90 <clust2sect>
 800855c:	4602      	mov	r2, r0
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	62da      	str	r2, [r3, #44]	; 0x2c
 8008562:	e012      	b.n	800858a <dir_next+0x13c>
						fs->wflag = 1;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fb30 	bl	8007bd0 <sync_window>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <dir_next+0x12c>
 8008576:	2301      	movs	r3, #1
 8008578:	e02a      	b.n	80085d0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	3301      	adds	r3, #1
 800857e:	613b      	str	r3, [r7, #16]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	62da      	str	r2, [r3, #44]	; 0x2c
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	895b      	ldrh	r3, [r3, #10]
 800858e:	461a      	mov	r2, r3
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	4293      	cmp	r3, r2
 8008594:	d3e6      	bcc.n	8008564 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	1ad2      	subs	r2, r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80085a8:	6979      	ldr	r1, [r7, #20]
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f7ff fbf0 	bl	8007d90 <clust2sect>
 80085b0:	4602      	mov	r2, r0
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c8:	441a      	add	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80085e8:	2100      	movs	r1, #0
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff feb4 	bl	8008358 <dir_sdi>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d12b      	bne.n	8008652 <dir_alloc+0x7a>
		n = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	4619      	mov	r1, r3
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff fb27 	bl	8007c58 <move_window>
 800860a:	4603      	mov	r3, r0
 800860c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d11d      	bne.n	8008650 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2be5      	cmp	r3, #229	; 0xe5
 800861c:	d004      	beq.n	8008628 <dir_alloc+0x50>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d107      	bne.n	8008638 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	3301      	adds	r3, #1
 800862c:	613b      	str	r3, [r7, #16]
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d102      	bne.n	800863c <dir_alloc+0x64>
 8008636:	e00c      	b.n	8008652 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008638:	2300      	movs	r3, #0
 800863a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800863c:	2101      	movs	r1, #1
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff ff05 	bl	800844e <dir_next>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0d7      	beq.n	80085fe <dir_alloc+0x26>
 800864e:	e000      	b.n	8008652 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008650:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	2b04      	cmp	r3, #4
 8008656:	d101      	bne.n	800865c <dir_alloc+0x84>
 8008658:	2307      	movs	r3, #7
 800865a:	75fb      	strb	r3, [r7, #23]
	return res;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	331a      	adds	r3, #26
 8008674:	4618      	mov	r0, r3
 8008676:	f7ff f83f 	bl	80076f8 <ld_word>
 800867a:	4603      	mov	r3, r0
 800867c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	2b03      	cmp	r3, #3
 8008684:	d109      	bne.n	800869a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	3314      	adds	r3, #20
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff f834 	bl	80076f8 <ld_word>
 8008690:	4603      	mov	r3, r0
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800869a:	68fb      	ldr	r3, [r7, #12]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	331a      	adds	r3, #26
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	b292      	uxth	r2, r2
 80086b8:	4611      	mov	r1, r2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7ff f857 	bl	800776e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d109      	bne.n	80086dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f103 0214 	add.w	r2, r3, #20
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	0c1b      	lsrs	r3, r3, #16
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	4619      	mov	r1, r3
 80086d6:	4610      	mov	r0, r2
 80086d8:	f7ff f849 	bl	800776e <st_word>
	}
}
 80086dc:	bf00      	nop
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80086f2:	2100      	movs	r1, #0
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f7ff fe2f 	bl	8008358 <dir_sdi>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <dir_find+0x24>
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	e03e      	b.n	8008786 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	4619      	mov	r1, r3
 800870e:	6938      	ldr	r0, [r7, #16]
 8008710:	f7ff faa2 	bl	8007c58 <move_window>
 8008714:	4603      	mov	r3, r0
 8008716:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008718:	7dfb      	ldrb	r3, [r7, #23]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d12f      	bne.n	800877e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008726:	7bfb      	ldrb	r3, [r7, #15]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <dir_find+0x4e>
 800872c:	2304      	movs	r3, #4
 800872e:	75fb      	strb	r3, [r7, #23]
 8008730:	e028      	b.n	8008784 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	330b      	adds	r3, #11
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800873e:	b2da      	uxtb	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a1b      	ldr	r3, [r3, #32]
 8008748:	330b      	adds	r3, #11
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	f003 0308 	and.w	r3, r3, #8
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <dir_find+0x86>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a18      	ldr	r0, [r3, #32]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3324      	adds	r3, #36	; 0x24
 800875c:	220b      	movs	r2, #11
 800875e:	4619      	mov	r1, r3
 8008760:	f7ff f888 	bl	8007874 <mem_cmp>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800876a:	2100      	movs	r1, #0
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff fe6e 	bl	800844e <dir_next>
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008776:	7dfb      	ldrb	r3, [r7, #23]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0c5      	beq.n	8008708 <dir_find+0x24>
 800877c:	e002      	b.n	8008784 <dir_find+0xa0>
		if (res != FR_OK) break;
 800877e:	bf00      	nop
 8008780:	e000      	b.n	8008784 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008782:	bf00      	nop

	return res;
 8008784:	7dfb      	ldrb	r3, [r7, #23]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800879c:	2101      	movs	r1, #1
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f7ff ff1a 	bl	80085d8 <dir_alloc>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d11c      	bne.n	80087e8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	4619      	mov	r1, r3
 80087b4:	68b8      	ldr	r0, [r7, #8]
 80087b6:	f7ff fa4f 	bl	8007c58 <move_window>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d111      	bne.n	80087e8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	2220      	movs	r2, #32
 80087ca:	2100      	movs	r1, #0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff f836 	bl	800783e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a18      	ldr	r0, [r3, #32]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3324      	adds	r3, #36	; 0x24
 80087da:	220b      	movs	r2, #11
 80087dc:	4619      	mov	r1, r3
 80087de:	f7ff f80d 	bl	80077fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2201      	movs	r2, #1
 80087e6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b088      	sub	sp, #32
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3324      	adds	r3, #36	; 0x24
 8008808:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800880a:	220b      	movs	r2, #11
 800880c:	2120      	movs	r1, #32
 800880e:	68b8      	ldr	r0, [r7, #8]
 8008810:	f7ff f815 	bl	800783e <mem_set>
	si = i = 0; ni = 8;
 8008814:	2300      	movs	r3, #0
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	61fb      	str	r3, [r7, #28]
 800881c:	2308      	movs	r3, #8
 800881e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	61fa      	str	r2, [r7, #28]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4413      	add	r3, r2
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800882e:	7efb      	ldrb	r3, [r7, #27]
 8008830:	2b20      	cmp	r3, #32
 8008832:	d94e      	bls.n	80088d2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008834:	7efb      	ldrb	r3, [r7, #27]
 8008836:	2b2f      	cmp	r3, #47	; 0x2f
 8008838:	d006      	beq.n	8008848 <create_name+0x54>
 800883a:	7efb      	ldrb	r3, [r7, #27]
 800883c:	2b5c      	cmp	r3, #92	; 0x5c
 800883e:	d110      	bne.n	8008862 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008840:	e002      	b.n	8008848 <create_name+0x54>
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	3301      	adds	r3, #1
 8008846:	61fb      	str	r3, [r7, #28]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	4413      	add	r3, r2
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b2f      	cmp	r3, #47	; 0x2f
 8008852:	d0f6      	beq.n	8008842 <create_name+0x4e>
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	4413      	add	r3, r2
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b5c      	cmp	r3, #92	; 0x5c
 800885e:	d0f0      	beq.n	8008842 <create_name+0x4e>
			break;
 8008860:	e038      	b.n	80088d4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008862:	7efb      	ldrb	r3, [r7, #27]
 8008864:	2b2e      	cmp	r3, #46	; 0x2e
 8008866:	d003      	beq.n	8008870 <create_name+0x7c>
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	429a      	cmp	r2, r3
 800886e:	d30c      	bcc.n	800888a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2b0b      	cmp	r3, #11
 8008874:	d002      	beq.n	800887c <create_name+0x88>
 8008876:	7efb      	ldrb	r3, [r7, #27]
 8008878:	2b2e      	cmp	r3, #46	; 0x2e
 800887a:	d001      	beq.n	8008880 <create_name+0x8c>
 800887c:	2306      	movs	r3, #6
 800887e:	e044      	b.n	800890a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008880:	2308      	movs	r3, #8
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	230b      	movs	r3, #11
 8008886:	617b      	str	r3, [r7, #20]
			continue;
 8008888:	e022      	b.n	80088d0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800888a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800888e:	2b00      	cmp	r3, #0
 8008890:	da04      	bge.n	800889c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008892:	7efb      	ldrb	r3, [r7, #27]
 8008894:	3b80      	subs	r3, #128	; 0x80
 8008896:	4a1f      	ldr	r2, [pc, #124]	; (8008914 <create_name+0x120>)
 8008898:	5cd3      	ldrb	r3, [r2, r3]
 800889a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800889c:	7efb      	ldrb	r3, [r7, #27]
 800889e:	4619      	mov	r1, r3
 80088a0:	481d      	ldr	r0, [pc, #116]	; (8008918 <create_name+0x124>)
 80088a2:	f7ff f80e 	bl	80078c2 <chk_chr>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <create_name+0xbc>
 80088ac:	2306      	movs	r3, #6
 80088ae:	e02c      	b.n	800890a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80088b0:	7efb      	ldrb	r3, [r7, #27]
 80088b2:	2b60      	cmp	r3, #96	; 0x60
 80088b4:	d905      	bls.n	80088c2 <create_name+0xce>
 80088b6:	7efb      	ldrb	r3, [r7, #27]
 80088b8:	2b7a      	cmp	r3, #122	; 0x7a
 80088ba:	d802      	bhi.n	80088c2 <create_name+0xce>
 80088bc:	7efb      	ldrb	r3, [r7, #27]
 80088be:	3b20      	subs	r3, #32
 80088c0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	1c5a      	adds	r2, r3, #1
 80088c6:	613a      	str	r2, [r7, #16]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	4413      	add	r3, r2
 80088cc:	7efa      	ldrb	r2, [r7, #27]
 80088ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80088d0:	e7a6      	b.n	8008820 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80088d2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	441a      	add	r2, r3
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <create_name+0xf4>
 80088e4:	2306      	movs	r3, #6
 80088e6:	e010      	b.n	800890a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2be5      	cmp	r3, #229	; 0xe5
 80088ee:	d102      	bne.n	80088f6 <create_name+0x102>
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2205      	movs	r2, #5
 80088f4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80088f6:	7efb      	ldrb	r3, [r7, #27]
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d801      	bhi.n	8008900 <create_name+0x10c>
 80088fc:	2204      	movs	r2, #4
 80088fe:	e000      	b.n	8008902 <create_name+0x10e>
 8008900:	2200      	movs	r2, #0
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	330b      	adds	r3, #11
 8008906:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008908:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800890a:	4618      	mov	r0, r3
 800890c:	3720      	adds	r7, #32
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	08011990 	.word	0x08011990
 8008918:	0800a9f0 	.word	0x0800a9f0

0800891c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008930:	e002      	b.n	8008938 <follow_path+0x1c>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2b2f      	cmp	r3, #47	; 0x2f
 800893e:	d0f8      	beq.n	8008932 <follow_path+0x16>
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b5c      	cmp	r3, #92	; 0x5c
 8008946:	d0f4      	beq.n	8008932 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	2200      	movs	r2, #0
 800894c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b1f      	cmp	r3, #31
 8008954:	d80a      	bhi.n	800896c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2280      	movs	r2, #128	; 0x80
 800895a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800895e:	2100      	movs	r1, #0
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff fcf9 	bl	8008358 <dir_sdi>
 8008966:	4603      	mov	r3, r0
 8008968:	75fb      	strb	r3, [r7, #23]
 800896a:	e043      	b.n	80089f4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800896c:	463b      	mov	r3, r7
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff ff3f 	bl	80087f4 <create_name>
 8008976:	4603      	mov	r3, r0
 8008978:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d134      	bne.n	80089ea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7ff feaf 	bl	80086e4 <dir_find>
 8008986:	4603      	mov	r3, r0
 8008988:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008990:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008992:	7dfb      	ldrb	r3, [r7, #23]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00a      	beq.n	80089ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	2b04      	cmp	r3, #4
 800899c:	d127      	bne.n	80089ee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800899e:	7afb      	ldrb	r3, [r7, #11]
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d122      	bne.n	80089ee <follow_path+0xd2>
 80089a8:	2305      	movs	r3, #5
 80089aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80089ac:	e01f      	b.n	80089ee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80089ae:	7afb      	ldrb	r3, [r7, #11]
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d11c      	bne.n	80089f2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	799b      	ldrb	r3, [r3, #6]
 80089bc:	f003 0310 	and.w	r3, r3, #16
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d102      	bne.n	80089ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 80089c4:	2305      	movs	r3, #5
 80089c6:	75fb      	strb	r3, [r7, #23]
 80089c8:	e014      	b.n	80089f4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d8:	4413      	add	r3, r2
 80089da:	4619      	mov	r1, r3
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f7ff fe42 	bl	8008666 <ld_clust>
 80089e2:	4602      	mov	r2, r0
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80089e8:	e7c0      	b.n	800896c <follow_path+0x50>
			if (res != FR_OK) break;
 80089ea:	bf00      	nop
 80089ec:	e002      	b.n	80089f4 <follow_path+0xd8>
				break;
 80089ee:	bf00      	nop
 80089f0:	e000      	b.n	80089f4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80089f2:	bf00      	nop
			}
		}
	}

	return res;
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b087      	sub	sp, #28
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d031      	beq.n	8008a78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	e002      	b.n	8008a22 <get_ldnumber+0x24>
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	617b      	str	r3, [r7, #20]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b20      	cmp	r3, #32
 8008a28:	d903      	bls.n	8008a32 <get_ldnumber+0x34>
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b3a      	cmp	r3, #58	; 0x3a
 8008a30:	d1f4      	bne.n	8008a1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b3a      	cmp	r3, #58	; 0x3a
 8008a38:	d11c      	bne.n	8008a74 <get_ldnumber+0x76>
			tp = *path;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	60fa      	str	r2, [r7, #12]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	3b30      	subs	r3, #48	; 0x30
 8008a4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b09      	cmp	r3, #9
 8008a50:	d80e      	bhi.n	8008a70 <get_ldnumber+0x72>
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d10a      	bne.n	8008a70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d107      	bne.n	8008a70 <get_ldnumber+0x72>
					vol = (int)i;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	3301      	adds	r3, #1
 8008a68:	617b      	str	r3, [r7, #20]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	e002      	b.n	8008a7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008a74:	2300      	movs	r3, #0
 8008a76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008a78:	693b      	ldr	r3, [r7, #16]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	371c      	adds	r7, #28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
	...

08008a88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	70da      	strb	r2, [r3, #3]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a9e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7ff f8d8 	bl	8007c58 <move_window>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <check_fs+0x2a>
 8008aae:	2304      	movs	r3, #4
 8008ab0:	e038      	b.n	8008b24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3330      	adds	r3, #48	; 0x30
 8008ab6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fe1c 	bl	80076f8 <ld_word>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d001      	beq.n	8008ad0 <check_fs+0x48>
 8008acc:	2303      	movs	r3, #3
 8008ace:	e029      	b.n	8008b24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ad6:	2be9      	cmp	r3, #233	; 0xe9
 8008ad8:	d009      	beq.n	8008aee <check_fs+0x66>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ae0:	2beb      	cmp	r3, #235	; 0xeb
 8008ae2:	d11e      	bne.n	8008b22 <check_fs+0x9a>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008aea:	2b90      	cmp	r3, #144	; 0x90
 8008aec:	d119      	bne.n	8008b22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3330      	adds	r3, #48	; 0x30
 8008af2:	3336      	adds	r3, #54	; 0x36
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fe17 	bl	8007728 <ld_dword>
 8008afa:	4603      	mov	r3, r0
 8008afc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008b00:	4a0a      	ldr	r2, [pc, #40]	; (8008b2c <check_fs+0xa4>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d101      	bne.n	8008b0a <check_fs+0x82>
 8008b06:	2300      	movs	r3, #0
 8008b08:	e00c      	b.n	8008b24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3330      	adds	r3, #48	; 0x30
 8008b0e:	3352      	adds	r3, #82	; 0x52
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe fe09 	bl	8007728 <ld_dword>
 8008b16:	4603      	mov	r3, r0
 8008b18:	4a05      	ldr	r2, [pc, #20]	; (8008b30 <check_fs+0xa8>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d101      	bne.n	8008b22 <check_fs+0x9a>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	e000      	b.n	8008b24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008b22:	2302      	movs	r3, #2
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	00544146 	.word	0x00544146
 8008b30:	33544146 	.word	0x33544146

08008b34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b096      	sub	sp, #88	; 0x58
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7ff ff58 	bl	80089fe <get_ldnumber>
 8008b4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	da01      	bge.n	8008b5a <find_volume+0x26>
 8008b56:	230b      	movs	r3, #11
 8008b58:	e22d      	b.n	8008fb6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008b5a:	4aa1      	ldr	r2, [pc, #644]	; (8008de0 <find_volume+0x2ac>)
 8008b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <find_volume+0x3a>
 8008b6a:	230c      	movs	r3, #12
 8008b6c:	e223      	b.n	8008fb6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	f023 0301 	bic.w	r3, r3, #1
 8008b7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d01a      	beq.n	8008bba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	785b      	ldrb	r3, [r3, #1]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fe fd17 	bl	80075bc <disk_status>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008b94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10c      	bne.n	8008bba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <find_volume+0x82>
 8008ba6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008baa:	f003 0304 	and.w	r3, r3, #4
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008bb2:	230a      	movs	r3, #10
 8008bb4:	e1ff      	b.n	8008fb6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	e1fd      	b.n	8008fb6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fe fd0f 	bl	80075f0 <disk_initialize>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008bd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008be4:	2303      	movs	r3, #3
 8008be6:	e1e6      	b.n	8008fb6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008be8:	79fb      	ldrb	r3, [r7, #7]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d007      	beq.n	8008bfe <find_volume+0xca>
 8008bee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bf2:	f003 0304 	and.w	r3, r3, #4
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008bfa:	230a      	movs	r3, #10
 8008bfc:	e1db      	b.n	8008fb6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008c02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c06:	f7ff ff3f 	bl	8008a88 <check_fs>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d149      	bne.n	8008cac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c18:	2300      	movs	r3, #0
 8008c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c1c:	e01e      	b.n	8008c5c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c26:	011b      	lsls	r3, r3, #4
 8008c28:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008c2c:	4413      	add	r3, r2
 8008c2e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	3304      	adds	r3, #4
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d006      	beq.n	8008c48 <find_volume+0x114>
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	3308      	adds	r3, #8
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7fe fd72 	bl	8007728 <ld_dword>
 8008c44:	4602      	mov	r2, r0
 8008c46:	e000      	b.n	8008c4a <find_volume+0x116>
 8008c48:	2200      	movs	r2, #0
 8008c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	3358      	adds	r3, #88	; 0x58
 8008c50:	443b      	add	r3, r7
 8008c52:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c58:	3301      	adds	r3, #1
 8008c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d9dd      	bls.n	8008c1e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008c62:	2300      	movs	r3, #0
 8008c64:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <find_volume+0x13e>
 8008c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	3358      	adds	r3, #88	; 0x58
 8008c78:	443b      	add	r3, r7
 8008c7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008c7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d005      	beq.n	8008c92 <find_volume+0x15e>
 8008c86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c8a:	f7ff fefd 	bl	8008a88 <check_fs>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	e000      	b.n	8008c94 <find_volume+0x160>
 8008c92:	2303      	movs	r3, #3
 8008c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d905      	bls.n	8008cac <find_volume+0x178>
 8008ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d9e2      	bls.n	8008c72 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008cac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d101      	bne.n	8008cb8 <find_volume+0x184>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e17e      	b.n	8008fb6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d901      	bls.n	8008cc4 <find_volume+0x190>
 8008cc0:	230d      	movs	r3, #13
 8008cc2:	e178      	b.n	8008fb6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	3330      	adds	r3, #48	; 0x30
 8008cc8:	330b      	adds	r3, #11
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fe fd14 	bl	80076f8 <ld_word>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd6:	d001      	beq.n	8008cdc <find_volume+0x1a8>
 8008cd8:	230d      	movs	r3, #13
 8008cda:	e16c      	b.n	8008fb6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	3330      	adds	r3, #48	; 0x30
 8008ce0:	3316      	adds	r3, #22
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fd08 	bl	80076f8 <ld_word>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d106      	bne.n	8008d00 <find_volume+0x1cc>
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf4:	3330      	adds	r3, #48	; 0x30
 8008cf6:	3324      	adds	r3, #36	; 0x24
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fd15 	bl	8007728 <ld_dword>
 8008cfe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d04:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	789b      	ldrb	r3, [r3, #2]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d005      	beq.n	8008d24 <find_volume+0x1f0>
 8008d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1a:	789b      	ldrb	r3, [r3, #2]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d001      	beq.n	8008d24 <find_volume+0x1f0>
 8008d20:	230d      	movs	r3, #13
 8008d22:	e148      	b.n	8008fb6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d26:	789b      	ldrb	r3, [r3, #2]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d2c:	fb02 f303 	mul.w	r3, r2, r3
 8008d30:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d40:	895b      	ldrh	r3, [r3, #10]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <find_volume+0x224>
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	895b      	ldrh	r3, [r3, #10]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	895b      	ldrh	r3, [r3, #10]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	4013      	ands	r3, r2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <find_volume+0x228>
 8008d58:	230d      	movs	r3, #13
 8008d5a:	e12c      	b.n	8008fb6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5e:	3330      	adds	r3, #48	; 0x30
 8008d60:	3311      	adds	r3, #17
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fe fcc8 	bl	80076f8 <ld_word>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	891b      	ldrh	r3, [r3, #8]
 8008d74:	f003 030f 	and.w	r3, r3, #15
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <find_volume+0x24e>
 8008d7e:	230d      	movs	r3, #13
 8008d80:	e119      	b.n	8008fb6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	3330      	adds	r3, #48	; 0x30
 8008d86:	3313      	adds	r3, #19
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe fcb5 	bl	80076f8 <ld_word>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d106      	bne.n	8008da6 <find_volume+0x272>
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	3330      	adds	r3, #48	; 0x30
 8008d9c:	3320      	adds	r3, #32
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe fcc2 	bl	8007728 <ld_dword>
 8008da4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	3330      	adds	r3, #48	; 0x30
 8008daa:	330e      	adds	r3, #14
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fe fca3 	bl	80076f8 <ld_word>
 8008db2:	4603      	mov	r3, r0
 8008db4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008db6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d101      	bne.n	8008dc0 <find_volume+0x28c>
 8008dbc:	230d      	movs	r3, #13
 8008dbe:	e0fa      	b.n	8008fb6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008dc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc4:	4413      	add	r3, r2
 8008dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dc8:	8912      	ldrh	r2, [r2, #8]
 8008dca:	0912      	lsrs	r2, r2, #4
 8008dcc:	b292      	uxth	r2, r2
 8008dce:	4413      	add	r3, r2
 8008dd0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008dd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d204      	bcs.n	8008de4 <find_volume+0x2b0>
 8008dda:	230d      	movs	r3, #13
 8008ddc:	e0eb      	b.n	8008fb6 <find_volume+0x482>
 8008dde:	bf00      	nop
 8008de0:	20013744 	.word	0x20013744
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dec:	8952      	ldrh	r2, [r2, #10]
 8008dee:	fbb3 f3f2 	udiv	r3, r3, r2
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <find_volume+0x2ca>
 8008dfa:	230d      	movs	r3, #13
 8008dfc:	e0db      	b.n	8008fb6 <find_volume+0x482>
		fmt = FS_FAT32;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e06:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d802      	bhi.n	8008e14 <find_volume+0x2e0>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d802      	bhi.n	8008e24 <find_volume+0x2f0>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	1c9a      	adds	r2, r3, #2
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e30:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e36:	441a      	add	r2, r3
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008e3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	441a      	add	r2, r3
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008e46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d11e      	bne.n	8008e8c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e50:	3330      	adds	r3, #48	; 0x30
 8008e52:	332a      	adds	r3, #42	; 0x2a
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fe fc4f 	bl	80076f8 <ld_word>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <find_volume+0x330>
 8008e60:	230d      	movs	r3, #13
 8008e62:	e0a8      	b.n	8008fb6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	891b      	ldrh	r3, [r3, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <find_volume+0x33c>
 8008e6c:	230d      	movs	r3, #13
 8008e6e:	e0a2      	b.n	8008fb6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	3330      	adds	r3, #48	; 0x30
 8008e74:	332c      	adds	r3, #44	; 0x2c
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe fc56 	bl	8007728 <ld_dword>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	647b      	str	r3, [r7, #68]	; 0x44
 8008e8a:	e01f      	b.n	8008ecc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	891b      	ldrh	r3, [r3, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <find_volume+0x364>
 8008e94:	230d      	movs	r3, #13
 8008e96:	e08e      	b.n	8008fb6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	6a1a      	ldr	r2, [r3, #32]
 8008e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e9e:	441a      	add	r2, r3
 8008ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d103      	bne.n	8008eb4 <find_volume+0x380>
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	005b      	lsls	r3, r3, #1
 8008eb2:	e00a      	b.n	8008eca <find_volume+0x396>
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	695a      	ldr	r2, [r3, #20]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	4413      	add	r3, r2
 8008ebe:	085a      	lsrs	r2, r3, #1
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008eca:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ece:	699a      	ldr	r2, [r3, #24]
 8008ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ed2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008ed6:	0a5b      	lsrs	r3, r3, #9
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d201      	bcs.n	8008ee0 <find_volume+0x3ac>
 8008edc:	230d      	movs	r3, #13
 8008ede:	e06a      	b.n	8008fb6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ee6:	611a      	str	r2, [r3, #16]
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef2:	2280      	movs	r2, #128	; 0x80
 8008ef4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008ef6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d149      	bne.n	8008f92 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	3330      	adds	r3, #48	; 0x30
 8008f02:	3330      	adds	r3, #48	; 0x30
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7fe fbf7 	bl	80076f8 <ld_word>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d140      	bne.n	8008f92 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f12:	3301      	adds	r3, #1
 8008f14:	4619      	mov	r1, r3
 8008f16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f18:	f7fe fe9e 	bl	8007c58 <move_window>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d137      	bne.n	8008f92 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f24:	2200      	movs	r2, #0
 8008f26:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2a:	3330      	adds	r3, #48	; 0x30
 8008f2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fe fbe1 	bl	80076f8 <ld_word>
 8008f36:	4603      	mov	r3, r0
 8008f38:	461a      	mov	r2, r3
 8008f3a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d127      	bne.n	8008f92 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f44:	3330      	adds	r3, #48	; 0x30
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fe fbee 	bl	8007728 <ld_dword>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	4a1c      	ldr	r2, [pc, #112]	; (8008fc0 <find_volume+0x48c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d11e      	bne.n	8008f92 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f56:	3330      	adds	r3, #48	; 0x30
 8008f58:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fe fbe3 	bl	8007728 <ld_dword>
 8008f62:	4603      	mov	r3, r0
 8008f64:	4a17      	ldr	r2, [pc, #92]	; (8008fc4 <find_volume+0x490>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d113      	bne.n	8008f92 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	3330      	adds	r3, #48	; 0x30
 8008f6e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fe fbd8 	bl	8007728 <ld_dword>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	3330      	adds	r3, #48	; 0x30
 8008f82:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe fbce 	bl	8007728 <ld_dword>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f90:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008f98:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <find_volume+0x494>)
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <find_volume+0x494>)
 8008fa4:	801a      	strh	r2, [r3, #0]
 8008fa6:	4b08      	ldr	r3, [pc, #32]	; (8008fc8 <find_volume+0x494>)
 8008fa8:	881a      	ldrh	r2, [r3, #0]
 8008faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008fae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008fb0:	f7fe fdea 	bl	8007b88 <clear_lock>
#endif
	return FR_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3758      	adds	r7, #88	; 0x58
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	41615252 	.word	0x41615252
 8008fc4:	61417272 	.word	0x61417272
 8008fc8:	20013748 	.word	0x20013748

08008fcc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008fd6:	2309      	movs	r3, #9
 8008fd8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d01c      	beq.n	800901a <validate+0x4e>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d018      	beq.n	800901a <validate+0x4e>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d013      	beq.n	800901a <validate+0x4e>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	889a      	ldrh	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	88db      	ldrh	r3, [r3, #6]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d10c      	bne.n	800901a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	785b      	ldrb	r3, [r3, #1]
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe fad8 	bl	80075bc <disk_status>
 800900c:	4603      	mov	r3, r0
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <validate+0x4e>
			res = FR_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d102      	bne.n	8009026 <validate+0x5a>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	e000      	b.n	8009028 <validate+0x5c>
 8009026:	2300      	movs	r3, #0
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	6013      	str	r3, [r2, #0]
	return res;
 800902c:	7bfb      	ldrb	r3, [r7, #15]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b088      	sub	sp, #32
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800904a:	f107 0310 	add.w	r3, r7, #16
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff fcd5 	bl	80089fe <get_ldnumber>
 8009054:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	2b00      	cmp	r3, #0
 800905a:	da01      	bge.n	8009060 <f_mount+0x28>
 800905c:	230b      	movs	r3, #11
 800905e:	e02b      	b.n	80090b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009060:	4a17      	ldr	r2, [pc, #92]	; (80090c0 <f_mount+0x88>)
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009068:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800906a:	69bb      	ldr	r3, [r7, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009070:	69b8      	ldr	r0, [r7, #24]
 8009072:	f7fe fd89 	bl	8007b88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2200      	movs	r2, #0
 800907a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	490d      	ldr	r1, [pc, #52]	; (80090c0 <f_mount+0x88>)
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <f_mount+0x66>
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d001      	beq.n	80090a2 <f_mount+0x6a>
 800909e:	2300      	movs	r3, #0
 80090a0:	e00a      	b.n	80090b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80090a2:	f107 010c 	add.w	r1, r7, #12
 80090a6:	f107 0308 	add.w	r3, r7, #8
 80090aa:	2200      	movs	r2, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7ff fd41 	bl	8008b34 <find_volume>
 80090b2:	4603      	mov	r3, r0
 80090b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80090b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3720      	adds	r7, #32
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	20013744 	.word	0x20013744

080090c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b098      	sub	sp, #96	; 0x60
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	4613      	mov	r3, r2
 80090d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <f_open+0x18>
 80090d8:	2309      	movs	r3, #9
 80090da:	e1ad      	b.n	8009438 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80090e4:	79fa      	ldrb	r2, [r7, #7]
 80090e6:	f107 0110 	add.w	r1, r7, #16
 80090ea:	f107 0308 	add.w	r3, r7, #8
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7ff fd20 	bl	8008b34 <find_volume>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80090fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f040 8191 	bne.w	8009426 <f_open+0x362>
		dj.obj.fs = fs;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	f107 0314 	add.w	r3, r7, #20
 800910e:	4611      	mov	r1, r2
 8009110:	4618      	mov	r0, r3
 8009112:	f7ff fc03 	bl	800891c <follow_path>
 8009116:	4603      	mov	r3, r0
 8009118:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800911c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009120:	2b00      	cmp	r3, #0
 8009122:	d11a      	bne.n	800915a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009124:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009128:	b25b      	sxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	da03      	bge.n	8009136 <f_open+0x72>
				res = FR_INVALID_NAME;
 800912e:	2306      	movs	r3, #6
 8009130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009134:	e011      	b.n	800915a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009136:	79fb      	ldrb	r3, [r7, #7]
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	bf14      	ite	ne
 8009140:	2301      	movne	r3, #1
 8009142:	2300      	moveq	r3, #0
 8009144:	b2db      	uxtb	r3, r3
 8009146:	461a      	mov	r2, r3
 8009148:	f107 0314 	add.w	r3, r7, #20
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fbd2 	bl	80078f8 <chk_lock>
 8009154:	4603      	mov	r3, r0
 8009156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800915a:	79fb      	ldrb	r3, [r7, #7]
 800915c:	f003 031c 	and.w	r3, r3, #28
 8009160:	2b00      	cmp	r3, #0
 8009162:	d07f      	beq.n	8009264 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009168:	2b00      	cmp	r3, #0
 800916a:	d017      	beq.n	800919c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800916c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009170:	2b04      	cmp	r3, #4
 8009172:	d10e      	bne.n	8009192 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009174:	f7fe fc1c 	bl	80079b0 <enq_lock>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d006      	beq.n	800918c <f_open+0xc8>
 800917e:	f107 0314 	add.w	r3, r7, #20
 8009182:	4618      	mov	r0, r3
 8009184:	f7ff fb03 	bl	800878e <dir_register>
 8009188:	4603      	mov	r3, r0
 800918a:	e000      	b.n	800918e <f_open+0xca>
 800918c:	2312      	movs	r3, #18
 800918e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	f043 0308 	orr.w	r3, r3, #8
 8009198:	71fb      	strb	r3, [r7, #7]
 800919a:	e010      	b.n	80091be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800919c:	7ebb      	ldrb	r3, [r7, #26]
 800919e:	f003 0311 	and.w	r3, r3, #17
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <f_open+0xea>
					res = FR_DENIED;
 80091a6:	2307      	movs	r3, #7
 80091a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80091ac:	e007      	b.n	80091be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80091ae:	79fb      	ldrb	r3, [r7, #7]
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <f_open+0xfa>
 80091b8:	2308      	movs	r3, #8
 80091ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80091be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d168      	bne.n	8009298 <f_open+0x1d4>
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d063      	beq.n	8009298 <f_open+0x1d4>
				dw = GET_FATTIME();
 80091d0:	f7fd fcb6 	bl	8006b40 <get_fattime>
 80091d4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80091d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d8:	330e      	adds	r3, #14
 80091da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fae1 	bl	80077a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80091e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e4:	3316      	adds	r3, #22
 80091e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe fadb 	bl	80077a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80091ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f0:	330b      	adds	r3, #11
 80091f2:	2220      	movs	r2, #32
 80091f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff fa32 	bl	8008666 <ld_clust>
 8009202:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009208:	2200      	movs	r2, #0
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff fa4a 	bl	80086a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009212:	331c      	adds	r3, #28
 8009214:	2100      	movs	r1, #0
 8009216:	4618      	mov	r0, r3
 8009218:	f7fe fac4 	bl	80077a4 <st_dword>
					fs->wflag = 1;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	2201      	movs	r2, #1
 8009220:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009224:	2b00      	cmp	r3, #0
 8009226:	d037      	beq.n	8009298 <f_open+0x1d4>
						dw = fs->winsect;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800922e:	f107 0314 	add.w	r3, r7, #20
 8009232:	2200      	movs	r2, #0
 8009234:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe ff5d 	bl	80080f6 <remove_chain>
 800923c:	4603      	mov	r3, r0
 800923e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009246:	2b00      	cmp	r3, #0
 8009248:	d126      	bne.n	8009298 <f_open+0x1d4>
							res = move_window(fs, dw);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fd02 	bl	8007c58 <move_window>
 8009254:	4603      	mov	r3, r0
 8009256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800925e:	3a01      	subs	r2, #1
 8009260:	60da      	str	r2, [r3, #12]
 8009262:	e019      	b.n	8009298 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009264:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009268:	2b00      	cmp	r3, #0
 800926a:	d115      	bne.n	8009298 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800926c:	7ebb      	ldrb	r3, [r7, #26]
 800926e:	f003 0310 	and.w	r3, r3, #16
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <f_open+0x1ba>
					res = FR_NO_FILE;
 8009276:	2304      	movs	r3, #4
 8009278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800927c:	e00c      	b.n	8009298 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	f003 0302 	and.w	r3, r3, #2
 8009284:	2b00      	cmp	r3, #0
 8009286:	d007      	beq.n	8009298 <f_open+0x1d4>
 8009288:	7ebb      	ldrb	r3, [r7, #26]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d002      	beq.n	8009298 <f_open+0x1d4>
						res = FR_DENIED;
 8009292:	2307      	movs	r3, #7
 8009294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800929c:	2b00      	cmp	r3, #0
 800929e:	d128      	bne.n	80092f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	f003 0308 	and.w	r3, r3, #8
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80092aa:	79fb      	ldrb	r3, [r7, #7]
 80092ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80092ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	f023 0301 	bic.w	r3, r3, #1
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bf14      	ite	ne
 80092ca:	2301      	movne	r3, #1
 80092cc:	2300      	moveq	r3, #0
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	461a      	mov	r2, r3
 80092d2:	f107 0314 	add.w	r3, r7, #20
 80092d6:	4611      	mov	r1, r2
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe fb8b 	bl	80079f4 <inc_lock>
 80092de:	4602      	mov	r2, r0
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d102      	bne.n	80092f2 <f_open+0x22e>
 80092ec:	2302      	movs	r3, #2
 80092ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80092f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f040 8095 	bne.w	8009426 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009300:	4611      	mov	r1, r2
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff f9af 	bl	8008666 <ld_clust>
 8009308:	4602      	mov	r2, r0
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800930e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009310:	331c      	adds	r3, #28
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe fa08 	bl	8007728 <ld_dword>
 8009318:	4602      	mov	r2, r0
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	88da      	ldrh	r2, [r3, #6]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	79fa      	ldrb	r2, [r7, #7]
 8009336:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2200      	movs	r2, #0
 8009348:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3330      	adds	r3, #48	; 0x30
 800934e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009352:	2100      	movs	r1, #0
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe fa72 	bl	800783e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	f003 0320 	and.w	r3, r3, #32
 8009360:	2b00      	cmp	r3, #0
 8009362:	d060      	beq.n	8009426 <f_open+0x362>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d05c      	beq.n	8009426 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	68da      	ldr	r2, [r3, #12]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	895b      	ldrh	r3, [r3, #10]
 8009378:	025b      	lsls	r3, r3, #9
 800937a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	657b      	str	r3, [r7, #84]	; 0x54
 8009388:	e016      	b.n	80093b8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800938e:	4618      	mov	r0, r3
 8009390:	f7fe fd1d 	bl	8007dce <get_fat>
 8009394:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009398:	2b01      	cmp	r3, #1
 800939a:	d802      	bhi.n	80093a2 <f_open+0x2de>
 800939c:	2302      	movs	r3, #2
 800939e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80093a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093a8:	d102      	bne.n	80093b0 <f_open+0x2ec>
 80093aa:	2301      	movs	r3, #1
 80093ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80093b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	657b      	str	r3, [r7, #84]	; 0x54
 80093b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d103      	bne.n	80093c8 <f_open+0x304>
 80093c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d8e0      	bhi.n	800938a <f_open+0x2c6>
				}
				fp->clust = clst;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80093ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d127      	bne.n	8009426 <f_open+0x362>
 80093d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d022      	beq.n	8009426 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7fe fcd3 	bl	8007d90 <clust2sect>
 80093ea:	6478      	str	r0, [r7, #68]	; 0x44
 80093ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d103      	bne.n	80093fa <f_open+0x336>
						res = FR_INT_ERR;
 80093f2:	2302      	movs	r3, #2
 80093f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80093f8:	e015      	b.n	8009426 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80093fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093fc:	0a5a      	lsrs	r2, r3, #9
 80093fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009400:	441a      	add	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	7858      	ldrb	r0, [r3, #1]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6a1a      	ldr	r2, [r3, #32]
 8009414:	2301      	movs	r3, #1
 8009416:	f7fe f911 	bl	800763c <disk_read>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <f_open+0x362>
 8009420:	2301      	movs	r3, #1
 8009422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009426:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800942a:	2b00      	cmp	r3, #0
 800942c:	d002      	beq.n	8009434 <f_open+0x370>
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009438:	4618      	mov	r0, r3
 800943a:	3760      	adds	r7, #96	; 0x60
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08e      	sub	sp, #56	; 0x38
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2200      	movs	r2, #0
 8009456:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f107 0214 	add.w	r2, r7, #20
 800945e:	4611      	mov	r1, r2
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff fdb3 	bl	8008fcc <validate>
 8009466:	4603      	mov	r3, r0
 8009468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800946c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009470:	2b00      	cmp	r3, #0
 8009472:	d107      	bne.n	8009484 <f_read+0x44>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	7d5b      	ldrb	r3, [r3, #21]
 8009478:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800947c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <f_read+0x4a>
 8009484:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009488:	e115      	b.n	80096b6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	7d1b      	ldrb	r3, [r3, #20]
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <f_read+0x5a>
 8009496:	2307      	movs	r3, #7
 8009498:	e10d      	b.n	80096b6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	1ad3      	subs	r3, r2, r3
 80094a4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	f240 80fe 	bls.w	80096ac <f_read+0x26c>
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80094b4:	e0fa      	b.n	80096ac <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f040 80c6 	bne.w	8009650 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	0a5b      	lsrs	r3, r3, #9
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	8952      	ldrh	r2, [r2, #10]
 80094ce:	3a01      	subs	r2, #1
 80094d0:	4013      	ands	r3, r2
 80094d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d12f      	bne.n	800953a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d103      	bne.n	80094ea <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	633b      	str	r3, [r7, #48]	; 0x30
 80094e8:	e013      	b.n	8009512 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d007      	beq.n	8009502 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	4619      	mov	r1, r3
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7fe fef9 	bl	80082f0 <clmt_clust>
 80094fe:	6338      	str	r0, [r7, #48]	; 0x30
 8009500:	e007      	b.n	8009512 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f7fe fc5f 	bl	8007dce <get_fat>
 8009510:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	2b01      	cmp	r3, #1
 8009516:	d804      	bhi.n	8009522 <f_read+0xe2>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2202      	movs	r2, #2
 800951c:	755a      	strb	r2, [r3, #21]
 800951e:	2302      	movs	r3, #2
 8009520:	e0c9      	b.n	80096b6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009528:	d104      	bne.n	8009534 <f_read+0xf4>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	755a      	strb	r2, [r3, #21]
 8009530:	2301      	movs	r3, #1
 8009532:	e0c0      	b.n	80096b6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009538:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7fe fc24 	bl	8007d90 <clust2sect>
 8009548:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d104      	bne.n	800955a <f_read+0x11a>
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2202      	movs	r2, #2
 8009554:	755a      	strb	r2, [r3, #21]
 8009556:	2302      	movs	r3, #2
 8009558:	e0ad      	b.n	80096b6 <f_read+0x276>
			sect += csect;
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	4413      	add	r3, r2
 8009560:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	0a5b      	lsrs	r3, r3, #9
 8009566:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956a:	2b00      	cmp	r3, #0
 800956c:	d039      	beq.n	80095e2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800956e:	69fa      	ldr	r2, [r7, #28]
 8009570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009572:	4413      	add	r3, r2
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	8952      	ldrh	r2, [r2, #10]
 8009578:	4293      	cmp	r3, r2
 800957a:	d905      	bls.n	8009588 <f_read+0x148>
					cc = fs->csize - csect;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	895b      	ldrh	r3, [r3, #10]
 8009580:	461a      	mov	r2, r3
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	7858      	ldrb	r0, [r3, #1]
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009592:	f7fe f853 	bl	800763c <disk_read>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d004      	beq.n	80095a6 <f_read+0x166>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2201      	movs	r2, #1
 80095a0:	755a      	strb	r2, [r3, #21]
 80095a2:	2301      	movs	r3, #1
 80095a4:	e087      	b.n	80096b6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	7d1b      	ldrb	r3, [r3, #20]
 80095aa:	b25b      	sxtb	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	da14      	bge.n	80095da <f_read+0x19a>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6a1a      	ldr	r2, [r3, #32]
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d90d      	bls.n	80095da <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6a1a      	ldr	r2, [r3, #32]
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	025b      	lsls	r3, r3, #9
 80095c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ca:	18d0      	adds	r0, r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3330      	adds	r3, #48	; 0x30
 80095d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095d4:	4619      	mov	r1, r3
 80095d6:	f7fe f911 	bl	80077fc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	025b      	lsls	r3, r3, #9
 80095de:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80095e0:	e050      	b.n	8009684 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d02e      	beq.n	800964a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	7d1b      	ldrb	r3, [r3, #20]
 80095f0:	b25b      	sxtb	r3, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	da18      	bge.n	8009628 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	7858      	ldrb	r0, [r3, #1]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a1a      	ldr	r2, [r3, #32]
 8009604:	2301      	movs	r3, #1
 8009606:	f7fe f839 	bl	800767c <disk_write>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <f_read+0x1da>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2201      	movs	r2, #1
 8009614:	755a      	strb	r2, [r3, #21]
 8009616:	2301      	movs	r3, #1
 8009618:	e04d      	b.n	80096b6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	7d1b      	ldrb	r3, [r3, #20]
 800961e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009622:	b2da      	uxtb	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	7858      	ldrb	r0, [r3, #1]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009632:	2301      	movs	r3, #1
 8009634:	69ba      	ldr	r2, [r7, #24]
 8009636:	f7fe f801 	bl	800763c <disk_read>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d004      	beq.n	800964a <f_read+0x20a>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	755a      	strb	r2, [r3, #21]
 8009646:	2301      	movs	r3, #1
 8009648:	e035      	b.n	80096b6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009658:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800965c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800965e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	429a      	cmp	r2, r3
 8009664:	d901      	bls.n	800966a <f_read+0x22a>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009678:	4413      	add	r3, r2
 800967a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800967c:	4619      	mov	r1, r3
 800967e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009680:	f7fe f8bc 	bl	80077fc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009688:	4413      	add	r3, r2
 800968a:	627b      	str	r3, [r7, #36]	; 0x24
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	699a      	ldr	r2, [r3, #24]
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	441a      	add	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	619a      	str	r2, [r3, #24]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	441a      	add	r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f47f af01 	bne.w	80094b6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3738      	adds	r7, #56	; 0x38
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b086      	sub	sp, #24
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f107 0208 	add.w	r2, r7, #8
 80096cc:	4611      	mov	r1, r2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fc7c 	bl	8008fcc <validate>
 80096d4:	4603      	mov	r3, r0
 80096d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d168      	bne.n	80097b0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7d1b      	ldrb	r3, [r3, #20]
 80096e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d062      	beq.n	80097b0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	7d1b      	ldrb	r3, [r3, #20]
 80096ee:	b25b      	sxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	da15      	bge.n	8009720 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	7858      	ldrb	r0, [r3, #1]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a1a      	ldr	r2, [r3, #32]
 8009702:	2301      	movs	r3, #1
 8009704:	f7fd ffba 	bl	800767c <disk_write>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <f_sync+0x54>
 800970e:	2301      	movs	r3, #1
 8009710:	e04f      	b.n	80097b2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	7d1b      	ldrb	r3, [r3, #20]
 8009716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800971a:	b2da      	uxtb	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009720:	f7fd fa0e 	bl	8006b40 <get_fattime>
 8009724:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	4619      	mov	r1, r3
 800972e:	4610      	mov	r0, r2
 8009730:	f7fe fa92 	bl	8007c58 <move_window>
 8009734:	4603      	mov	r3, r0
 8009736:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009738:	7dfb      	ldrb	r3, [r7, #23]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d138      	bne.n	80097b0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009742:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	330b      	adds	r3, #11
 8009748:	781a      	ldrb	r2, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	330b      	adds	r3, #11
 800974e:	f042 0220 	orr.w	r2, r2, #32
 8009752:	b2d2      	uxtb	r2, r2
 8009754:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	461a      	mov	r2, r3
 8009760:	68f9      	ldr	r1, [r7, #12]
 8009762:	f7fe ff9f 	bl	80086a4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f103 021c 	add.w	r2, r3, #28
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f7fe f816 	bl	80077a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3316      	adds	r3, #22
 800977c:	6939      	ldr	r1, [r7, #16]
 800977e:	4618      	mov	r0, r3
 8009780:	f7fe f810 	bl	80077a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3312      	adds	r3, #18
 8009788:	2100      	movs	r1, #0
 800978a:	4618      	mov	r0, r3
 800978c:	f7fd ffef 	bl	800776e <st_word>
					fs->wflag = 1;
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	2201      	movs	r2, #1
 8009794:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	4618      	mov	r0, r3
 800979a:	f7fe fa8b 	bl	8007cb4 <sync_fs>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	7d1b      	ldrb	r3, [r3, #20]
 80097a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80097b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff ff7b 	bl	80096be <f_sync>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d118      	bne.n	8009804 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f107 0208 	add.w	r2, r7, #8
 80097d8:	4611      	mov	r1, r2
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff fbf6 	bl	8008fcc <validate>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10c      	bne.n	8009804 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe f98e 	bl	8007b10 <dec_lock>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d102      	bne.n	8009804 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009804:	7bfb      	ldrb	r3, [r7, #15]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	4613      	mov	r3, r2
 800981c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800981e:	2301      	movs	r3, #1
 8009820:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009822:	2300      	movs	r3, #0
 8009824:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009826:	4b1f      	ldr	r3, [pc, #124]	; (80098a4 <FATFS_LinkDriverEx+0x94>)
 8009828:	7a5b      	ldrb	r3, [r3, #9]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	d131      	bne.n	8009894 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009830:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <FATFS_LinkDriverEx+0x94>)
 8009832:	7a5b      	ldrb	r3, [r3, #9]
 8009834:	b2db      	uxtb	r3, r3
 8009836:	461a      	mov	r2, r3
 8009838:	4b1a      	ldr	r3, [pc, #104]	; (80098a4 <FATFS_LinkDriverEx+0x94>)
 800983a:	2100      	movs	r1, #0
 800983c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800983e:	4b19      	ldr	r3, [pc, #100]	; (80098a4 <FATFS_LinkDriverEx+0x94>)
 8009840:	7a5b      	ldrb	r3, [r3, #9]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	4a17      	ldr	r2, [pc, #92]	; (80098a4 <FATFS_LinkDriverEx+0x94>)
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800984e:	4b15      	ldr	r3, [pc, #84]	; (80098a4 <FATFS_LinkDriverEx+0x94>)
 8009850:	7a5b      	ldrb	r3, [r3, #9]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	461a      	mov	r2, r3
 8009856:	4b13      	ldr	r3, [pc, #76]	; (80098a4 <FATFS_LinkDriverEx+0x94>)
 8009858:	4413      	add	r3, r2
 800985a:	79fa      	ldrb	r2, [r7, #7]
 800985c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800985e:	4b11      	ldr	r3, [pc, #68]	; (80098a4 <FATFS_LinkDriverEx+0x94>)
 8009860:	7a5b      	ldrb	r3, [r3, #9]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	1c5a      	adds	r2, r3, #1
 8009866:	b2d1      	uxtb	r1, r2
 8009868:	4a0e      	ldr	r2, [pc, #56]	; (80098a4 <FATFS_LinkDriverEx+0x94>)
 800986a:	7251      	strb	r1, [r2, #9]
 800986c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800986e:	7dbb      	ldrb	r3, [r7, #22]
 8009870:	3330      	adds	r3, #48	; 0x30
 8009872:	b2da      	uxtb	r2, r3
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	3301      	adds	r3, #1
 800987c:	223a      	movs	r2, #58	; 0x3a
 800987e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	3302      	adds	r3, #2
 8009884:	222f      	movs	r2, #47	; 0x2f
 8009886:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	3303      	adds	r3, #3
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009894:	7dfb      	ldrb	r3, [r7, #23]
}
 8009896:	4618      	mov	r0, r3
 8009898:	371c      	adds	r7, #28
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	2001376c 	.word	0x2001376c

080098a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80098b2:	2200      	movs	r2, #0
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff ffaa 	bl	8009810 <FATFS_LinkDriverEx>
 80098bc:	4603      	mov	r3, r0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <__errno>:
 80098c8:	4b01      	ldr	r3, [pc, #4]	; (80098d0 <__errno+0x8>)
 80098ca:	6818      	ldr	r0, [r3, #0]
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	20000024 	.word	0x20000024

080098d4 <__libc_init_array>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	4d0d      	ldr	r5, [pc, #52]	; (800990c <__libc_init_array+0x38>)
 80098d8:	4c0d      	ldr	r4, [pc, #52]	; (8009910 <__libc_init_array+0x3c>)
 80098da:	1b64      	subs	r4, r4, r5
 80098dc:	10a4      	asrs	r4, r4, #2
 80098de:	2600      	movs	r6, #0
 80098e0:	42a6      	cmp	r6, r4
 80098e2:	d109      	bne.n	80098f8 <__libc_init_array+0x24>
 80098e4:	4d0b      	ldr	r5, [pc, #44]	; (8009914 <__libc_init_array+0x40>)
 80098e6:	4c0c      	ldr	r4, [pc, #48]	; (8009918 <__libc_init_array+0x44>)
 80098e8:	f001 f832 	bl	800a950 <_init>
 80098ec:	1b64      	subs	r4, r4, r5
 80098ee:	10a4      	asrs	r4, r4, #2
 80098f0:	2600      	movs	r6, #0
 80098f2:	42a6      	cmp	r6, r4
 80098f4:	d105      	bne.n	8009902 <__libc_init_array+0x2e>
 80098f6:	bd70      	pop	{r4, r5, r6, pc}
 80098f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098fc:	4798      	blx	r3
 80098fe:	3601      	adds	r6, #1
 8009900:	e7ee      	b.n	80098e0 <__libc_init_array+0xc>
 8009902:	f855 3b04 	ldr.w	r3, [r5], #4
 8009906:	4798      	blx	r3
 8009908:	3601      	adds	r6, #1
 800990a:	e7f2      	b.n	80098f2 <__libc_init_array+0x1e>
 800990c:	08011ab0 	.word	0x08011ab0
 8009910:	08011ab0 	.word	0x08011ab0
 8009914:	08011ab0 	.word	0x08011ab0
 8009918:	08011ab4 	.word	0x08011ab4

0800991c <memcpy>:
 800991c:	440a      	add	r2, r1
 800991e:	4291      	cmp	r1, r2
 8009920:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009924:	d100      	bne.n	8009928 <memcpy+0xc>
 8009926:	4770      	bx	lr
 8009928:	b510      	push	{r4, lr}
 800992a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800992e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009932:	4291      	cmp	r1, r2
 8009934:	d1f9      	bne.n	800992a <memcpy+0xe>
 8009936:	bd10      	pop	{r4, pc}

08009938 <memset>:
 8009938:	4402      	add	r2, r0
 800993a:	4603      	mov	r3, r0
 800993c:	4293      	cmp	r3, r2
 800993e:	d100      	bne.n	8009942 <memset+0xa>
 8009940:	4770      	bx	lr
 8009942:	f803 1b01 	strb.w	r1, [r3], #1
 8009946:	e7f9      	b.n	800993c <memset+0x4>

08009948 <iprintf>:
 8009948:	b40f      	push	{r0, r1, r2, r3}
 800994a:	4b0a      	ldr	r3, [pc, #40]	; (8009974 <iprintf+0x2c>)
 800994c:	b513      	push	{r0, r1, r4, lr}
 800994e:	681c      	ldr	r4, [r3, #0]
 8009950:	b124      	cbz	r4, 800995c <iprintf+0x14>
 8009952:	69a3      	ldr	r3, [r4, #24]
 8009954:	b913      	cbnz	r3, 800995c <iprintf+0x14>
 8009956:	4620      	mov	r0, r4
 8009958:	f000 fa5e 	bl	8009e18 <__sinit>
 800995c:	ab05      	add	r3, sp, #20
 800995e:	9a04      	ldr	r2, [sp, #16]
 8009960:	68a1      	ldr	r1, [r4, #8]
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	4620      	mov	r0, r4
 8009966:	f000 fc67 	bl	800a238 <_vfiprintf_r>
 800996a:	b002      	add	sp, #8
 800996c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009970:	b004      	add	sp, #16
 8009972:	4770      	bx	lr
 8009974:	20000024 	.word	0x20000024

08009978 <_puts_r>:
 8009978:	b570      	push	{r4, r5, r6, lr}
 800997a:	460e      	mov	r6, r1
 800997c:	4605      	mov	r5, r0
 800997e:	b118      	cbz	r0, 8009988 <_puts_r+0x10>
 8009980:	6983      	ldr	r3, [r0, #24]
 8009982:	b90b      	cbnz	r3, 8009988 <_puts_r+0x10>
 8009984:	f000 fa48 	bl	8009e18 <__sinit>
 8009988:	69ab      	ldr	r3, [r5, #24]
 800998a:	68ac      	ldr	r4, [r5, #8]
 800998c:	b913      	cbnz	r3, 8009994 <_puts_r+0x1c>
 800998e:	4628      	mov	r0, r5
 8009990:	f000 fa42 	bl	8009e18 <__sinit>
 8009994:	4b2c      	ldr	r3, [pc, #176]	; (8009a48 <_puts_r+0xd0>)
 8009996:	429c      	cmp	r4, r3
 8009998:	d120      	bne.n	80099dc <_puts_r+0x64>
 800999a:	686c      	ldr	r4, [r5, #4]
 800999c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800999e:	07db      	lsls	r3, r3, #31
 80099a0:	d405      	bmi.n	80099ae <_puts_r+0x36>
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	0598      	lsls	r0, r3, #22
 80099a6:	d402      	bmi.n	80099ae <_puts_r+0x36>
 80099a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099aa:	f000 fad3 	bl	8009f54 <__retarget_lock_acquire_recursive>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	0719      	lsls	r1, r3, #28
 80099b2:	d51d      	bpl.n	80099f0 <_puts_r+0x78>
 80099b4:	6923      	ldr	r3, [r4, #16]
 80099b6:	b1db      	cbz	r3, 80099f0 <_puts_r+0x78>
 80099b8:	3e01      	subs	r6, #1
 80099ba:	68a3      	ldr	r3, [r4, #8]
 80099bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099c0:	3b01      	subs	r3, #1
 80099c2:	60a3      	str	r3, [r4, #8]
 80099c4:	bb39      	cbnz	r1, 8009a16 <_puts_r+0x9e>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	da38      	bge.n	8009a3c <_puts_r+0xc4>
 80099ca:	4622      	mov	r2, r4
 80099cc:	210a      	movs	r1, #10
 80099ce:	4628      	mov	r0, r5
 80099d0:	f000 f848 	bl	8009a64 <__swbuf_r>
 80099d4:	3001      	adds	r0, #1
 80099d6:	d011      	beq.n	80099fc <_puts_r+0x84>
 80099d8:	250a      	movs	r5, #10
 80099da:	e011      	b.n	8009a00 <_puts_r+0x88>
 80099dc:	4b1b      	ldr	r3, [pc, #108]	; (8009a4c <_puts_r+0xd4>)
 80099de:	429c      	cmp	r4, r3
 80099e0:	d101      	bne.n	80099e6 <_puts_r+0x6e>
 80099e2:	68ac      	ldr	r4, [r5, #8]
 80099e4:	e7da      	b.n	800999c <_puts_r+0x24>
 80099e6:	4b1a      	ldr	r3, [pc, #104]	; (8009a50 <_puts_r+0xd8>)
 80099e8:	429c      	cmp	r4, r3
 80099ea:	bf08      	it	eq
 80099ec:	68ec      	ldreq	r4, [r5, #12]
 80099ee:	e7d5      	b.n	800999c <_puts_r+0x24>
 80099f0:	4621      	mov	r1, r4
 80099f2:	4628      	mov	r0, r5
 80099f4:	f000 f888 	bl	8009b08 <__swsetup_r>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d0dd      	beq.n	80099b8 <_puts_r+0x40>
 80099fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a02:	07da      	lsls	r2, r3, #31
 8009a04:	d405      	bmi.n	8009a12 <_puts_r+0x9a>
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	059b      	lsls	r3, r3, #22
 8009a0a:	d402      	bmi.n	8009a12 <_puts_r+0x9a>
 8009a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a0e:	f000 faa2 	bl	8009f56 <__retarget_lock_release_recursive>
 8009a12:	4628      	mov	r0, r5
 8009a14:	bd70      	pop	{r4, r5, r6, pc}
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	da04      	bge.n	8009a24 <_puts_r+0xac>
 8009a1a:	69a2      	ldr	r2, [r4, #24]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	dc06      	bgt.n	8009a2e <_puts_r+0xb6>
 8009a20:	290a      	cmp	r1, #10
 8009a22:	d004      	beq.n	8009a2e <_puts_r+0xb6>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	1c5a      	adds	r2, r3, #1
 8009a28:	6022      	str	r2, [r4, #0]
 8009a2a:	7019      	strb	r1, [r3, #0]
 8009a2c:	e7c5      	b.n	80099ba <_puts_r+0x42>
 8009a2e:	4622      	mov	r2, r4
 8009a30:	4628      	mov	r0, r5
 8009a32:	f000 f817 	bl	8009a64 <__swbuf_r>
 8009a36:	3001      	adds	r0, #1
 8009a38:	d1bf      	bne.n	80099ba <_puts_r+0x42>
 8009a3a:	e7df      	b.n	80099fc <_puts_r+0x84>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	250a      	movs	r5, #10
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	6022      	str	r2, [r4, #0]
 8009a44:	701d      	strb	r5, [r3, #0]
 8009a46:	e7db      	b.n	8009a00 <_puts_r+0x88>
 8009a48:	08011a34 	.word	0x08011a34
 8009a4c:	08011a54 	.word	0x08011a54
 8009a50:	08011a14 	.word	0x08011a14

08009a54 <puts>:
 8009a54:	4b02      	ldr	r3, [pc, #8]	; (8009a60 <puts+0xc>)
 8009a56:	4601      	mov	r1, r0
 8009a58:	6818      	ldr	r0, [r3, #0]
 8009a5a:	f7ff bf8d 	b.w	8009978 <_puts_r>
 8009a5e:	bf00      	nop
 8009a60:	20000024 	.word	0x20000024

08009a64 <__swbuf_r>:
 8009a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a66:	460e      	mov	r6, r1
 8009a68:	4614      	mov	r4, r2
 8009a6a:	4605      	mov	r5, r0
 8009a6c:	b118      	cbz	r0, 8009a76 <__swbuf_r+0x12>
 8009a6e:	6983      	ldr	r3, [r0, #24]
 8009a70:	b90b      	cbnz	r3, 8009a76 <__swbuf_r+0x12>
 8009a72:	f000 f9d1 	bl	8009e18 <__sinit>
 8009a76:	4b21      	ldr	r3, [pc, #132]	; (8009afc <__swbuf_r+0x98>)
 8009a78:	429c      	cmp	r4, r3
 8009a7a:	d12b      	bne.n	8009ad4 <__swbuf_r+0x70>
 8009a7c:	686c      	ldr	r4, [r5, #4]
 8009a7e:	69a3      	ldr	r3, [r4, #24]
 8009a80:	60a3      	str	r3, [r4, #8]
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	071a      	lsls	r2, r3, #28
 8009a86:	d52f      	bpl.n	8009ae8 <__swbuf_r+0x84>
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	b36b      	cbz	r3, 8009ae8 <__swbuf_r+0x84>
 8009a8c:	6923      	ldr	r3, [r4, #16]
 8009a8e:	6820      	ldr	r0, [r4, #0]
 8009a90:	1ac0      	subs	r0, r0, r3
 8009a92:	6963      	ldr	r3, [r4, #20]
 8009a94:	b2f6      	uxtb	r6, r6
 8009a96:	4283      	cmp	r3, r0
 8009a98:	4637      	mov	r7, r6
 8009a9a:	dc04      	bgt.n	8009aa6 <__swbuf_r+0x42>
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f000 f926 	bl	8009cf0 <_fflush_r>
 8009aa4:	bb30      	cbnz	r0, 8009af4 <__swbuf_r+0x90>
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	60a3      	str	r3, [r4, #8]
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	6022      	str	r2, [r4, #0]
 8009ab2:	701e      	strb	r6, [r3, #0]
 8009ab4:	6963      	ldr	r3, [r4, #20]
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	4283      	cmp	r3, r0
 8009aba:	d004      	beq.n	8009ac6 <__swbuf_r+0x62>
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	07db      	lsls	r3, r3, #31
 8009ac0:	d506      	bpl.n	8009ad0 <__swbuf_r+0x6c>
 8009ac2:	2e0a      	cmp	r6, #10
 8009ac4:	d104      	bne.n	8009ad0 <__swbuf_r+0x6c>
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4628      	mov	r0, r5
 8009aca:	f000 f911 	bl	8009cf0 <_fflush_r>
 8009ace:	b988      	cbnz	r0, 8009af4 <__swbuf_r+0x90>
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ad4:	4b0a      	ldr	r3, [pc, #40]	; (8009b00 <__swbuf_r+0x9c>)
 8009ad6:	429c      	cmp	r4, r3
 8009ad8:	d101      	bne.n	8009ade <__swbuf_r+0x7a>
 8009ada:	68ac      	ldr	r4, [r5, #8]
 8009adc:	e7cf      	b.n	8009a7e <__swbuf_r+0x1a>
 8009ade:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <__swbuf_r+0xa0>)
 8009ae0:	429c      	cmp	r4, r3
 8009ae2:	bf08      	it	eq
 8009ae4:	68ec      	ldreq	r4, [r5, #12]
 8009ae6:	e7ca      	b.n	8009a7e <__swbuf_r+0x1a>
 8009ae8:	4621      	mov	r1, r4
 8009aea:	4628      	mov	r0, r5
 8009aec:	f000 f80c 	bl	8009b08 <__swsetup_r>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d0cb      	beq.n	8009a8c <__swbuf_r+0x28>
 8009af4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009af8:	e7ea      	b.n	8009ad0 <__swbuf_r+0x6c>
 8009afa:	bf00      	nop
 8009afc:	08011a34 	.word	0x08011a34
 8009b00:	08011a54 	.word	0x08011a54
 8009b04:	08011a14 	.word	0x08011a14

08009b08 <__swsetup_r>:
 8009b08:	4b32      	ldr	r3, [pc, #200]	; (8009bd4 <__swsetup_r+0xcc>)
 8009b0a:	b570      	push	{r4, r5, r6, lr}
 8009b0c:	681d      	ldr	r5, [r3, #0]
 8009b0e:	4606      	mov	r6, r0
 8009b10:	460c      	mov	r4, r1
 8009b12:	b125      	cbz	r5, 8009b1e <__swsetup_r+0x16>
 8009b14:	69ab      	ldr	r3, [r5, #24]
 8009b16:	b913      	cbnz	r3, 8009b1e <__swsetup_r+0x16>
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f000 f97d 	bl	8009e18 <__sinit>
 8009b1e:	4b2e      	ldr	r3, [pc, #184]	; (8009bd8 <__swsetup_r+0xd0>)
 8009b20:	429c      	cmp	r4, r3
 8009b22:	d10f      	bne.n	8009b44 <__swsetup_r+0x3c>
 8009b24:	686c      	ldr	r4, [r5, #4]
 8009b26:	89a3      	ldrh	r3, [r4, #12]
 8009b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b2c:	0719      	lsls	r1, r3, #28
 8009b2e:	d42c      	bmi.n	8009b8a <__swsetup_r+0x82>
 8009b30:	06dd      	lsls	r5, r3, #27
 8009b32:	d411      	bmi.n	8009b58 <__swsetup_r+0x50>
 8009b34:	2309      	movs	r3, #9
 8009b36:	6033      	str	r3, [r6, #0]
 8009b38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b3c:	81a3      	strh	r3, [r4, #12]
 8009b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b42:	e03e      	b.n	8009bc2 <__swsetup_r+0xba>
 8009b44:	4b25      	ldr	r3, [pc, #148]	; (8009bdc <__swsetup_r+0xd4>)
 8009b46:	429c      	cmp	r4, r3
 8009b48:	d101      	bne.n	8009b4e <__swsetup_r+0x46>
 8009b4a:	68ac      	ldr	r4, [r5, #8]
 8009b4c:	e7eb      	b.n	8009b26 <__swsetup_r+0x1e>
 8009b4e:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <__swsetup_r+0xd8>)
 8009b50:	429c      	cmp	r4, r3
 8009b52:	bf08      	it	eq
 8009b54:	68ec      	ldreq	r4, [r5, #12]
 8009b56:	e7e6      	b.n	8009b26 <__swsetup_r+0x1e>
 8009b58:	0758      	lsls	r0, r3, #29
 8009b5a:	d512      	bpl.n	8009b82 <__swsetup_r+0x7a>
 8009b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b5e:	b141      	cbz	r1, 8009b72 <__swsetup_r+0x6a>
 8009b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b64:	4299      	cmp	r1, r3
 8009b66:	d002      	beq.n	8009b6e <__swsetup_r+0x66>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f000 fa5b 	bl	800a024 <_free_r>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	6363      	str	r3, [r4, #52]	; 0x34
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b78:	81a3      	strh	r3, [r4, #12]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	6063      	str	r3, [r4, #4]
 8009b7e:	6923      	ldr	r3, [r4, #16]
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	f043 0308 	orr.w	r3, r3, #8
 8009b88:	81a3      	strh	r3, [r4, #12]
 8009b8a:	6923      	ldr	r3, [r4, #16]
 8009b8c:	b94b      	cbnz	r3, 8009ba2 <__swsetup_r+0x9a>
 8009b8e:	89a3      	ldrh	r3, [r4, #12]
 8009b90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b98:	d003      	beq.n	8009ba2 <__swsetup_r+0x9a>
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f000 fa01 	bl	8009fa4 <__smakebuf_r>
 8009ba2:	89a0      	ldrh	r0, [r4, #12]
 8009ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ba8:	f010 0301 	ands.w	r3, r0, #1
 8009bac:	d00a      	beq.n	8009bc4 <__swsetup_r+0xbc>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60a3      	str	r3, [r4, #8]
 8009bb2:	6963      	ldr	r3, [r4, #20]
 8009bb4:	425b      	negs	r3, r3
 8009bb6:	61a3      	str	r3, [r4, #24]
 8009bb8:	6923      	ldr	r3, [r4, #16]
 8009bba:	b943      	cbnz	r3, 8009bce <__swsetup_r+0xc6>
 8009bbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bc0:	d1ba      	bne.n	8009b38 <__swsetup_r+0x30>
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	0781      	lsls	r1, r0, #30
 8009bc6:	bf58      	it	pl
 8009bc8:	6963      	ldrpl	r3, [r4, #20]
 8009bca:	60a3      	str	r3, [r4, #8]
 8009bcc:	e7f4      	b.n	8009bb8 <__swsetup_r+0xb0>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	e7f7      	b.n	8009bc2 <__swsetup_r+0xba>
 8009bd2:	bf00      	nop
 8009bd4:	20000024 	.word	0x20000024
 8009bd8:	08011a34 	.word	0x08011a34
 8009bdc:	08011a54 	.word	0x08011a54
 8009be0:	08011a14 	.word	0x08011a14

08009be4 <__sflush_r>:
 8009be4:	898a      	ldrh	r2, [r1, #12]
 8009be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bea:	4605      	mov	r5, r0
 8009bec:	0710      	lsls	r0, r2, #28
 8009bee:	460c      	mov	r4, r1
 8009bf0:	d458      	bmi.n	8009ca4 <__sflush_r+0xc0>
 8009bf2:	684b      	ldr	r3, [r1, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dc05      	bgt.n	8009c04 <__sflush_r+0x20>
 8009bf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	dc02      	bgt.n	8009c04 <__sflush_r+0x20>
 8009bfe:	2000      	movs	r0, #0
 8009c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c06:	2e00      	cmp	r6, #0
 8009c08:	d0f9      	beq.n	8009bfe <__sflush_r+0x1a>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c10:	682f      	ldr	r7, [r5, #0]
 8009c12:	602b      	str	r3, [r5, #0]
 8009c14:	d032      	beq.n	8009c7c <__sflush_r+0x98>
 8009c16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	075a      	lsls	r2, r3, #29
 8009c1c:	d505      	bpl.n	8009c2a <__sflush_r+0x46>
 8009c1e:	6863      	ldr	r3, [r4, #4]
 8009c20:	1ac0      	subs	r0, r0, r3
 8009c22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c24:	b10b      	cbz	r3, 8009c2a <__sflush_r+0x46>
 8009c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c28:	1ac0      	subs	r0, r0, r3
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c30:	6a21      	ldr	r1, [r4, #32]
 8009c32:	4628      	mov	r0, r5
 8009c34:	47b0      	blx	r6
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	d106      	bne.n	8009c4a <__sflush_r+0x66>
 8009c3c:	6829      	ldr	r1, [r5, #0]
 8009c3e:	291d      	cmp	r1, #29
 8009c40:	d82c      	bhi.n	8009c9c <__sflush_r+0xb8>
 8009c42:	4a2a      	ldr	r2, [pc, #168]	; (8009cec <__sflush_r+0x108>)
 8009c44:	40ca      	lsrs	r2, r1
 8009c46:	07d6      	lsls	r6, r2, #31
 8009c48:	d528      	bpl.n	8009c9c <__sflush_r+0xb8>
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	6062      	str	r2, [r4, #4]
 8009c4e:	04d9      	lsls	r1, r3, #19
 8009c50:	6922      	ldr	r2, [r4, #16]
 8009c52:	6022      	str	r2, [r4, #0]
 8009c54:	d504      	bpl.n	8009c60 <__sflush_r+0x7c>
 8009c56:	1c42      	adds	r2, r0, #1
 8009c58:	d101      	bne.n	8009c5e <__sflush_r+0x7a>
 8009c5a:	682b      	ldr	r3, [r5, #0]
 8009c5c:	b903      	cbnz	r3, 8009c60 <__sflush_r+0x7c>
 8009c5e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c62:	602f      	str	r7, [r5, #0]
 8009c64:	2900      	cmp	r1, #0
 8009c66:	d0ca      	beq.n	8009bfe <__sflush_r+0x1a>
 8009c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c6c:	4299      	cmp	r1, r3
 8009c6e:	d002      	beq.n	8009c76 <__sflush_r+0x92>
 8009c70:	4628      	mov	r0, r5
 8009c72:	f000 f9d7 	bl	800a024 <_free_r>
 8009c76:	2000      	movs	r0, #0
 8009c78:	6360      	str	r0, [r4, #52]	; 0x34
 8009c7a:	e7c1      	b.n	8009c00 <__sflush_r+0x1c>
 8009c7c:	6a21      	ldr	r1, [r4, #32]
 8009c7e:	2301      	movs	r3, #1
 8009c80:	4628      	mov	r0, r5
 8009c82:	47b0      	blx	r6
 8009c84:	1c41      	adds	r1, r0, #1
 8009c86:	d1c7      	bne.n	8009c18 <__sflush_r+0x34>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0c4      	beq.n	8009c18 <__sflush_r+0x34>
 8009c8e:	2b1d      	cmp	r3, #29
 8009c90:	d001      	beq.n	8009c96 <__sflush_r+0xb2>
 8009c92:	2b16      	cmp	r3, #22
 8009c94:	d101      	bne.n	8009c9a <__sflush_r+0xb6>
 8009c96:	602f      	str	r7, [r5, #0]
 8009c98:	e7b1      	b.n	8009bfe <__sflush_r+0x1a>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca0:	81a3      	strh	r3, [r4, #12]
 8009ca2:	e7ad      	b.n	8009c00 <__sflush_r+0x1c>
 8009ca4:	690f      	ldr	r7, [r1, #16]
 8009ca6:	2f00      	cmp	r7, #0
 8009ca8:	d0a9      	beq.n	8009bfe <__sflush_r+0x1a>
 8009caa:	0793      	lsls	r3, r2, #30
 8009cac:	680e      	ldr	r6, [r1, #0]
 8009cae:	bf08      	it	eq
 8009cb0:	694b      	ldreq	r3, [r1, #20]
 8009cb2:	600f      	str	r7, [r1, #0]
 8009cb4:	bf18      	it	ne
 8009cb6:	2300      	movne	r3, #0
 8009cb8:	eba6 0807 	sub.w	r8, r6, r7
 8009cbc:	608b      	str	r3, [r1, #8]
 8009cbe:	f1b8 0f00 	cmp.w	r8, #0
 8009cc2:	dd9c      	ble.n	8009bfe <__sflush_r+0x1a>
 8009cc4:	6a21      	ldr	r1, [r4, #32]
 8009cc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cc8:	4643      	mov	r3, r8
 8009cca:	463a      	mov	r2, r7
 8009ccc:	4628      	mov	r0, r5
 8009cce:	47b0      	blx	r6
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	dc06      	bgt.n	8009ce2 <__sflush_r+0xfe>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ce0:	e78e      	b.n	8009c00 <__sflush_r+0x1c>
 8009ce2:	4407      	add	r7, r0
 8009ce4:	eba8 0800 	sub.w	r8, r8, r0
 8009ce8:	e7e9      	b.n	8009cbe <__sflush_r+0xda>
 8009cea:	bf00      	nop
 8009cec:	20400001 	.word	0x20400001

08009cf0 <_fflush_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	690b      	ldr	r3, [r1, #16]
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	b913      	cbnz	r3, 8009d00 <_fflush_r+0x10>
 8009cfa:	2500      	movs	r5, #0
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	b118      	cbz	r0, 8009d0a <_fflush_r+0x1a>
 8009d02:	6983      	ldr	r3, [r0, #24]
 8009d04:	b90b      	cbnz	r3, 8009d0a <_fflush_r+0x1a>
 8009d06:	f000 f887 	bl	8009e18 <__sinit>
 8009d0a:	4b14      	ldr	r3, [pc, #80]	; (8009d5c <_fflush_r+0x6c>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	d11b      	bne.n	8009d48 <_fflush_r+0x58>
 8009d10:	686c      	ldr	r4, [r5, #4]
 8009d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0ef      	beq.n	8009cfa <_fflush_r+0xa>
 8009d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d1c:	07d0      	lsls	r0, r2, #31
 8009d1e:	d404      	bmi.n	8009d2a <_fflush_r+0x3a>
 8009d20:	0599      	lsls	r1, r3, #22
 8009d22:	d402      	bmi.n	8009d2a <_fflush_r+0x3a>
 8009d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d26:	f000 f915 	bl	8009f54 <__retarget_lock_acquire_recursive>
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	f7ff ff59 	bl	8009be4 <__sflush_r>
 8009d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d34:	07da      	lsls	r2, r3, #31
 8009d36:	4605      	mov	r5, r0
 8009d38:	d4e0      	bmi.n	8009cfc <_fflush_r+0xc>
 8009d3a:	89a3      	ldrh	r3, [r4, #12]
 8009d3c:	059b      	lsls	r3, r3, #22
 8009d3e:	d4dd      	bmi.n	8009cfc <_fflush_r+0xc>
 8009d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d42:	f000 f908 	bl	8009f56 <__retarget_lock_release_recursive>
 8009d46:	e7d9      	b.n	8009cfc <_fflush_r+0xc>
 8009d48:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <_fflush_r+0x70>)
 8009d4a:	429c      	cmp	r4, r3
 8009d4c:	d101      	bne.n	8009d52 <_fflush_r+0x62>
 8009d4e:	68ac      	ldr	r4, [r5, #8]
 8009d50:	e7df      	b.n	8009d12 <_fflush_r+0x22>
 8009d52:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <_fflush_r+0x74>)
 8009d54:	429c      	cmp	r4, r3
 8009d56:	bf08      	it	eq
 8009d58:	68ec      	ldreq	r4, [r5, #12]
 8009d5a:	e7da      	b.n	8009d12 <_fflush_r+0x22>
 8009d5c:	08011a34 	.word	0x08011a34
 8009d60:	08011a54 	.word	0x08011a54
 8009d64:	08011a14 	.word	0x08011a14

08009d68 <std>:
 8009d68:	2300      	movs	r3, #0
 8009d6a:	b510      	push	{r4, lr}
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d76:	6083      	str	r3, [r0, #8]
 8009d78:	8181      	strh	r1, [r0, #12]
 8009d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d7c:	81c2      	strh	r2, [r0, #14]
 8009d7e:	6183      	str	r3, [r0, #24]
 8009d80:	4619      	mov	r1, r3
 8009d82:	2208      	movs	r2, #8
 8009d84:	305c      	adds	r0, #92	; 0x5c
 8009d86:	f7ff fdd7 	bl	8009938 <memset>
 8009d8a:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <std+0x38>)
 8009d8c:	6263      	str	r3, [r4, #36]	; 0x24
 8009d8e:	4b05      	ldr	r3, [pc, #20]	; (8009da4 <std+0x3c>)
 8009d90:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d92:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <std+0x40>)
 8009d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d96:	4b05      	ldr	r3, [pc, #20]	; (8009dac <std+0x44>)
 8009d98:	6224      	str	r4, [r4, #32]
 8009d9a:	6323      	str	r3, [r4, #48]	; 0x30
 8009d9c:	bd10      	pop	{r4, pc}
 8009d9e:	bf00      	nop
 8009da0:	0800a7e1 	.word	0x0800a7e1
 8009da4:	0800a803 	.word	0x0800a803
 8009da8:	0800a83b 	.word	0x0800a83b
 8009dac:	0800a85f 	.word	0x0800a85f

08009db0 <_cleanup_r>:
 8009db0:	4901      	ldr	r1, [pc, #4]	; (8009db8 <_cleanup_r+0x8>)
 8009db2:	f000 b8af 	b.w	8009f14 <_fwalk_reent>
 8009db6:	bf00      	nop
 8009db8:	08009cf1 	.word	0x08009cf1

08009dbc <__sfmoreglue>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	2268      	movs	r2, #104	; 0x68
 8009dc0:	1e4d      	subs	r5, r1, #1
 8009dc2:	4355      	muls	r5, r2
 8009dc4:	460e      	mov	r6, r1
 8009dc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009dca:	f000 f997 	bl	800a0fc <_malloc_r>
 8009dce:	4604      	mov	r4, r0
 8009dd0:	b140      	cbz	r0, 8009de4 <__sfmoreglue+0x28>
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	e9c0 1600 	strd	r1, r6, [r0]
 8009dd8:	300c      	adds	r0, #12
 8009dda:	60a0      	str	r0, [r4, #8]
 8009ddc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009de0:	f7ff fdaa 	bl	8009938 <memset>
 8009de4:	4620      	mov	r0, r4
 8009de6:	bd70      	pop	{r4, r5, r6, pc}

08009de8 <__sfp_lock_acquire>:
 8009de8:	4801      	ldr	r0, [pc, #4]	; (8009df0 <__sfp_lock_acquire+0x8>)
 8009dea:	f000 b8b3 	b.w	8009f54 <__retarget_lock_acquire_recursive>
 8009dee:	bf00      	nop
 8009df0:	20013779 	.word	0x20013779

08009df4 <__sfp_lock_release>:
 8009df4:	4801      	ldr	r0, [pc, #4]	; (8009dfc <__sfp_lock_release+0x8>)
 8009df6:	f000 b8ae 	b.w	8009f56 <__retarget_lock_release_recursive>
 8009dfa:	bf00      	nop
 8009dfc:	20013779 	.word	0x20013779

08009e00 <__sinit_lock_acquire>:
 8009e00:	4801      	ldr	r0, [pc, #4]	; (8009e08 <__sinit_lock_acquire+0x8>)
 8009e02:	f000 b8a7 	b.w	8009f54 <__retarget_lock_acquire_recursive>
 8009e06:	bf00      	nop
 8009e08:	2001377a 	.word	0x2001377a

08009e0c <__sinit_lock_release>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	; (8009e14 <__sinit_lock_release+0x8>)
 8009e0e:	f000 b8a2 	b.w	8009f56 <__retarget_lock_release_recursive>
 8009e12:	bf00      	nop
 8009e14:	2001377a 	.word	0x2001377a

08009e18 <__sinit>:
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	f7ff fff0 	bl	8009e00 <__sinit_lock_acquire>
 8009e20:	69a3      	ldr	r3, [r4, #24]
 8009e22:	b11b      	cbz	r3, 8009e2c <__sinit+0x14>
 8009e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e28:	f7ff bff0 	b.w	8009e0c <__sinit_lock_release>
 8009e2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e30:	6523      	str	r3, [r4, #80]	; 0x50
 8009e32:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <__sinit+0x68>)
 8009e34:	4a13      	ldr	r2, [pc, #76]	; (8009e84 <__sinit+0x6c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e3a:	42a3      	cmp	r3, r4
 8009e3c:	bf04      	itt	eq
 8009e3e:	2301      	moveq	r3, #1
 8009e40:	61a3      	streq	r3, [r4, #24]
 8009e42:	4620      	mov	r0, r4
 8009e44:	f000 f820 	bl	8009e88 <__sfp>
 8009e48:	6060      	str	r0, [r4, #4]
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 f81c 	bl	8009e88 <__sfp>
 8009e50:	60a0      	str	r0, [r4, #8]
 8009e52:	4620      	mov	r0, r4
 8009e54:	f000 f818 	bl	8009e88 <__sfp>
 8009e58:	2200      	movs	r2, #0
 8009e5a:	60e0      	str	r0, [r4, #12]
 8009e5c:	2104      	movs	r1, #4
 8009e5e:	6860      	ldr	r0, [r4, #4]
 8009e60:	f7ff ff82 	bl	8009d68 <std>
 8009e64:	68a0      	ldr	r0, [r4, #8]
 8009e66:	2201      	movs	r2, #1
 8009e68:	2109      	movs	r1, #9
 8009e6a:	f7ff ff7d 	bl	8009d68 <std>
 8009e6e:	68e0      	ldr	r0, [r4, #12]
 8009e70:	2202      	movs	r2, #2
 8009e72:	2112      	movs	r1, #18
 8009e74:	f7ff ff78 	bl	8009d68 <std>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	61a3      	str	r3, [r4, #24]
 8009e7c:	e7d2      	b.n	8009e24 <__sinit+0xc>
 8009e7e:	bf00      	nop
 8009e80:	08011a10 	.word	0x08011a10
 8009e84:	08009db1 	.word	0x08009db1

08009e88 <__sfp>:
 8009e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	f7ff ffac 	bl	8009de8 <__sfp_lock_acquire>
 8009e90:	4b1e      	ldr	r3, [pc, #120]	; (8009f0c <__sfp+0x84>)
 8009e92:	681e      	ldr	r6, [r3, #0]
 8009e94:	69b3      	ldr	r3, [r6, #24]
 8009e96:	b913      	cbnz	r3, 8009e9e <__sfp+0x16>
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f7ff ffbd 	bl	8009e18 <__sinit>
 8009e9e:	3648      	adds	r6, #72	; 0x48
 8009ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	d503      	bpl.n	8009eb0 <__sfp+0x28>
 8009ea8:	6833      	ldr	r3, [r6, #0]
 8009eaa:	b30b      	cbz	r3, 8009ef0 <__sfp+0x68>
 8009eac:	6836      	ldr	r6, [r6, #0]
 8009eae:	e7f7      	b.n	8009ea0 <__sfp+0x18>
 8009eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009eb4:	b9d5      	cbnz	r5, 8009eec <__sfp+0x64>
 8009eb6:	4b16      	ldr	r3, [pc, #88]	; (8009f10 <__sfp+0x88>)
 8009eb8:	60e3      	str	r3, [r4, #12]
 8009eba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ebe:	6665      	str	r5, [r4, #100]	; 0x64
 8009ec0:	f000 f847 	bl	8009f52 <__retarget_lock_init_recursive>
 8009ec4:	f7ff ff96 	bl	8009df4 <__sfp_lock_release>
 8009ec8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ecc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ed0:	6025      	str	r5, [r4, #0]
 8009ed2:	61a5      	str	r5, [r4, #24]
 8009ed4:	2208      	movs	r2, #8
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009edc:	f7ff fd2c 	bl	8009938 <memset>
 8009ee0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ee4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ee8:	4620      	mov	r0, r4
 8009eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eec:	3468      	adds	r4, #104	; 0x68
 8009eee:	e7d9      	b.n	8009ea4 <__sfp+0x1c>
 8009ef0:	2104      	movs	r1, #4
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f7ff ff62 	bl	8009dbc <__sfmoreglue>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	6030      	str	r0, [r6, #0]
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d1d5      	bne.n	8009eac <__sfp+0x24>
 8009f00:	f7ff ff78 	bl	8009df4 <__sfp_lock_release>
 8009f04:	230c      	movs	r3, #12
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	e7ee      	b.n	8009ee8 <__sfp+0x60>
 8009f0a:	bf00      	nop
 8009f0c:	08011a10 	.word	0x08011a10
 8009f10:	ffff0001 	.word	0xffff0001

08009f14 <_fwalk_reent>:
 8009f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f18:	4606      	mov	r6, r0
 8009f1a:	4688      	mov	r8, r1
 8009f1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f20:	2700      	movs	r7, #0
 8009f22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f26:	f1b9 0901 	subs.w	r9, r9, #1
 8009f2a:	d505      	bpl.n	8009f38 <_fwalk_reent+0x24>
 8009f2c:	6824      	ldr	r4, [r4, #0]
 8009f2e:	2c00      	cmp	r4, #0
 8009f30:	d1f7      	bne.n	8009f22 <_fwalk_reent+0xe>
 8009f32:	4638      	mov	r0, r7
 8009f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f38:	89ab      	ldrh	r3, [r5, #12]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d907      	bls.n	8009f4e <_fwalk_reent+0x3a>
 8009f3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f42:	3301      	adds	r3, #1
 8009f44:	d003      	beq.n	8009f4e <_fwalk_reent+0x3a>
 8009f46:	4629      	mov	r1, r5
 8009f48:	4630      	mov	r0, r6
 8009f4a:	47c0      	blx	r8
 8009f4c:	4307      	orrs	r7, r0
 8009f4e:	3568      	adds	r5, #104	; 0x68
 8009f50:	e7e9      	b.n	8009f26 <_fwalk_reent+0x12>

08009f52 <__retarget_lock_init_recursive>:
 8009f52:	4770      	bx	lr

08009f54 <__retarget_lock_acquire_recursive>:
 8009f54:	4770      	bx	lr

08009f56 <__retarget_lock_release_recursive>:
 8009f56:	4770      	bx	lr

08009f58 <__swhatbuf_r>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	460e      	mov	r6, r1
 8009f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f60:	2900      	cmp	r1, #0
 8009f62:	b096      	sub	sp, #88	; 0x58
 8009f64:	4614      	mov	r4, r2
 8009f66:	461d      	mov	r5, r3
 8009f68:	da08      	bge.n	8009f7c <__swhatbuf_r+0x24>
 8009f6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	602a      	str	r2, [r5, #0]
 8009f72:	061a      	lsls	r2, r3, #24
 8009f74:	d410      	bmi.n	8009f98 <__swhatbuf_r+0x40>
 8009f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f7a:	e00e      	b.n	8009f9a <__swhatbuf_r+0x42>
 8009f7c:	466a      	mov	r2, sp
 8009f7e:	f000 fc95 	bl	800a8ac <_fstat_r>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	dbf1      	blt.n	8009f6a <__swhatbuf_r+0x12>
 8009f86:	9a01      	ldr	r2, [sp, #4]
 8009f88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f90:	425a      	negs	r2, r3
 8009f92:	415a      	adcs	r2, r3
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	e7ee      	b.n	8009f76 <__swhatbuf_r+0x1e>
 8009f98:	2340      	movs	r3, #64	; 0x40
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	b016      	add	sp, #88	; 0x58
 8009fa0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fa4 <__smakebuf_r>:
 8009fa4:	898b      	ldrh	r3, [r1, #12]
 8009fa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fa8:	079d      	lsls	r5, r3, #30
 8009faa:	4606      	mov	r6, r0
 8009fac:	460c      	mov	r4, r1
 8009fae:	d507      	bpl.n	8009fc0 <__smakebuf_r+0x1c>
 8009fb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	6123      	str	r3, [r4, #16]
 8009fb8:	2301      	movs	r3, #1
 8009fba:	6163      	str	r3, [r4, #20]
 8009fbc:	b002      	add	sp, #8
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}
 8009fc0:	ab01      	add	r3, sp, #4
 8009fc2:	466a      	mov	r2, sp
 8009fc4:	f7ff ffc8 	bl	8009f58 <__swhatbuf_r>
 8009fc8:	9900      	ldr	r1, [sp, #0]
 8009fca:	4605      	mov	r5, r0
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f000 f895 	bl	800a0fc <_malloc_r>
 8009fd2:	b948      	cbnz	r0, 8009fe8 <__smakebuf_r+0x44>
 8009fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd8:	059a      	lsls	r2, r3, #22
 8009fda:	d4ef      	bmi.n	8009fbc <__smakebuf_r+0x18>
 8009fdc:	f023 0303 	bic.w	r3, r3, #3
 8009fe0:	f043 0302 	orr.w	r3, r3, #2
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	e7e3      	b.n	8009fb0 <__smakebuf_r+0xc>
 8009fe8:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <__smakebuf_r+0x7c>)
 8009fea:	62b3      	str	r3, [r6, #40]	; 0x28
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	6020      	str	r0, [r4, #0]
 8009ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ff4:	81a3      	strh	r3, [r4, #12]
 8009ff6:	9b00      	ldr	r3, [sp, #0]
 8009ff8:	6163      	str	r3, [r4, #20]
 8009ffa:	9b01      	ldr	r3, [sp, #4]
 8009ffc:	6120      	str	r0, [r4, #16]
 8009ffe:	b15b      	cbz	r3, 800a018 <__smakebuf_r+0x74>
 800a000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a004:	4630      	mov	r0, r6
 800a006:	f000 fc63 	bl	800a8d0 <_isatty_r>
 800a00a:	b128      	cbz	r0, 800a018 <__smakebuf_r+0x74>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	f023 0303 	bic.w	r3, r3, #3
 800a012:	f043 0301 	orr.w	r3, r3, #1
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	89a0      	ldrh	r0, [r4, #12]
 800a01a:	4305      	orrs	r5, r0
 800a01c:	81a5      	strh	r5, [r4, #12]
 800a01e:	e7cd      	b.n	8009fbc <__smakebuf_r+0x18>
 800a020:	08009db1 	.word	0x08009db1

0800a024 <_free_r>:
 800a024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a026:	2900      	cmp	r1, #0
 800a028:	d044      	beq.n	800a0b4 <_free_r+0x90>
 800a02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a02e:	9001      	str	r0, [sp, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	f1a1 0404 	sub.w	r4, r1, #4
 800a036:	bfb8      	it	lt
 800a038:	18e4      	addlt	r4, r4, r3
 800a03a:	f000 fc6b 	bl	800a914 <__malloc_lock>
 800a03e:	4a1e      	ldr	r2, [pc, #120]	; (800a0b8 <_free_r+0x94>)
 800a040:	9801      	ldr	r0, [sp, #4]
 800a042:	6813      	ldr	r3, [r2, #0]
 800a044:	b933      	cbnz	r3, 800a054 <_free_r+0x30>
 800a046:	6063      	str	r3, [r4, #4]
 800a048:	6014      	str	r4, [r2, #0]
 800a04a:	b003      	add	sp, #12
 800a04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a050:	f000 bc66 	b.w	800a920 <__malloc_unlock>
 800a054:	42a3      	cmp	r3, r4
 800a056:	d908      	bls.n	800a06a <_free_r+0x46>
 800a058:	6825      	ldr	r5, [r4, #0]
 800a05a:	1961      	adds	r1, r4, r5
 800a05c:	428b      	cmp	r3, r1
 800a05e:	bf01      	itttt	eq
 800a060:	6819      	ldreq	r1, [r3, #0]
 800a062:	685b      	ldreq	r3, [r3, #4]
 800a064:	1949      	addeq	r1, r1, r5
 800a066:	6021      	streq	r1, [r4, #0]
 800a068:	e7ed      	b.n	800a046 <_free_r+0x22>
 800a06a:	461a      	mov	r2, r3
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	b10b      	cbz	r3, 800a074 <_free_r+0x50>
 800a070:	42a3      	cmp	r3, r4
 800a072:	d9fa      	bls.n	800a06a <_free_r+0x46>
 800a074:	6811      	ldr	r1, [r2, #0]
 800a076:	1855      	adds	r5, r2, r1
 800a078:	42a5      	cmp	r5, r4
 800a07a:	d10b      	bne.n	800a094 <_free_r+0x70>
 800a07c:	6824      	ldr	r4, [r4, #0]
 800a07e:	4421      	add	r1, r4
 800a080:	1854      	adds	r4, r2, r1
 800a082:	42a3      	cmp	r3, r4
 800a084:	6011      	str	r1, [r2, #0]
 800a086:	d1e0      	bne.n	800a04a <_free_r+0x26>
 800a088:	681c      	ldr	r4, [r3, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	6053      	str	r3, [r2, #4]
 800a08e:	4421      	add	r1, r4
 800a090:	6011      	str	r1, [r2, #0]
 800a092:	e7da      	b.n	800a04a <_free_r+0x26>
 800a094:	d902      	bls.n	800a09c <_free_r+0x78>
 800a096:	230c      	movs	r3, #12
 800a098:	6003      	str	r3, [r0, #0]
 800a09a:	e7d6      	b.n	800a04a <_free_r+0x26>
 800a09c:	6825      	ldr	r5, [r4, #0]
 800a09e:	1961      	adds	r1, r4, r5
 800a0a0:	428b      	cmp	r3, r1
 800a0a2:	bf04      	itt	eq
 800a0a4:	6819      	ldreq	r1, [r3, #0]
 800a0a6:	685b      	ldreq	r3, [r3, #4]
 800a0a8:	6063      	str	r3, [r4, #4]
 800a0aa:	bf04      	itt	eq
 800a0ac:	1949      	addeq	r1, r1, r5
 800a0ae:	6021      	streq	r1, [r4, #0]
 800a0b0:	6054      	str	r4, [r2, #4]
 800a0b2:	e7ca      	b.n	800a04a <_free_r+0x26>
 800a0b4:	b003      	add	sp, #12
 800a0b6:	bd30      	pop	{r4, r5, pc}
 800a0b8:	2001377c 	.word	0x2001377c

0800a0bc <sbrk_aligned>:
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	4e0e      	ldr	r6, [pc, #56]	; (800a0f8 <sbrk_aligned+0x3c>)
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	6831      	ldr	r1, [r6, #0]
 800a0c4:	4605      	mov	r5, r0
 800a0c6:	b911      	cbnz	r1, 800a0ce <sbrk_aligned+0x12>
 800a0c8:	f000 fb7a 	bl	800a7c0 <_sbrk_r>
 800a0cc:	6030      	str	r0, [r6, #0]
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	f000 fb75 	bl	800a7c0 <_sbrk_r>
 800a0d6:	1c43      	adds	r3, r0, #1
 800a0d8:	d00a      	beq.n	800a0f0 <sbrk_aligned+0x34>
 800a0da:	1cc4      	adds	r4, r0, #3
 800a0dc:	f024 0403 	bic.w	r4, r4, #3
 800a0e0:	42a0      	cmp	r0, r4
 800a0e2:	d007      	beq.n	800a0f4 <sbrk_aligned+0x38>
 800a0e4:	1a21      	subs	r1, r4, r0
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f000 fb6a 	bl	800a7c0 <_sbrk_r>
 800a0ec:	3001      	adds	r0, #1
 800a0ee:	d101      	bne.n	800a0f4 <sbrk_aligned+0x38>
 800a0f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
 800a0f8:	20013780 	.word	0x20013780

0800a0fc <_malloc_r>:
 800a0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a100:	1ccd      	adds	r5, r1, #3
 800a102:	f025 0503 	bic.w	r5, r5, #3
 800a106:	3508      	adds	r5, #8
 800a108:	2d0c      	cmp	r5, #12
 800a10a:	bf38      	it	cc
 800a10c:	250c      	movcc	r5, #12
 800a10e:	2d00      	cmp	r5, #0
 800a110:	4607      	mov	r7, r0
 800a112:	db01      	blt.n	800a118 <_malloc_r+0x1c>
 800a114:	42a9      	cmp	r1, r5
 800a116:	d905      	bls.n	800a124 <_malloc_r+0x28>
 800a118:	230c      	movs	r3, #12
 800a11a:	603b      	str	r3, [r7, #0]
 800a11c:	2600      	movs	r6, #0
 800a11e:	4630      	mov	r0, r6
 800a120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a124:	4e2e      	ldr	r6, [pc, #184]	; (800a1e0 <_malloc_r+0xe4>)
 800a126:	f000 fbf5 	bl	800a914 <__malloc_lock>
 800a12a:	6833      	ldr	r3, [r6, #0]
 800a12c:	461c      	mov	r4, r3
 800a12e:	bb34      	cbnz	r4, 800a17e <_malloc_r+0x82>
 800a130:	4629      	mov	r1, r5
 800a132:	4638      	mov	r0, r7
 800a134:	f7ff ffc2 	bl	800a0bc <sbrk_aligned>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	4604      	mov	r4, r0
 800a13c:	d14d      	bne.n	800a1da <_malloc_r+0xde>
 800a13e:	6834      	ldr	r4, [r6, #0]
 800a140:	4626      	mov	r6, r4
 800a142:	2e00      	cmp	r6, #0
 800a144:	d140      	bne.n	800a1c8 <_malloc_r+0xcc>
 800a146:	6823      	ldr	r3, [r4, #0]
 800a148:	4631      	mov	r1, r6
 800a14a:	4638      	mov	r0, r7
 800a14c:	eb04 0803 	add.w	r8, r4, r3
 800a150:	f000 fb36 	bl	800a7c0 <_sbrk_r>
 800a154:	4580      	cmp	r8, r0
 800a156:	d13a      	bne.n	800a1ce <_malloc_r+0xd2>
 800a158:	6821      	ldr	r1, [r4, #0]
 800a15a:	3503      	adds	r5, #3
 800a15c:	1a6d      	subs	r5, r5, r1
 800a15e:	f025 0503 	bic.w	r5, r5, #3
 800a162:	3508      	adds	r5, #8
 800a164:	2d0c      	cmp	r5, #12
 800a166:	bf38      	it	cc
 800a168:	250c      	movcc	r5, #12
 800a16a:	4629      	mov	r1, r5
 800a16c:	4638      	mov	r0, r7
 800a16e:	f7ff ffa5 	bl	800a0bc <sbrk_aligned>
 800a172:	3001      	adds	r0, #1
 800a174:	d02b      	beq.n	800a1ce <_malloc_r+0xd2>
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	442b      	add	r3, r5
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	e00e      	b.n	800a19c <_malloc_r+0xa0>
 800a17e:	6822      	ldr	r2, [r4, #0]
 800a180:	1b52      	subs	r2, r2, r5
 800a182:	d41e      	bmi.n	800a1c2 <_malloc_r+0xc6>
 800a184:	2a0b      	cmp	r2, #11
 800a186:	d916      	bls.n	800a1b6 <_malloc_r+0xba>
 800a188:	1961      	adds	r1, r4, r5
 800a18a:	42a3      	cmp	r3, r4
 800a18c:	6025      	str	r5, [r4, #0]
 800a18e:	bf18      	it	ne
 800a190:	6059      	strne	r1, [r3, #4]
 800a192:	6863      	ldr	r3, [r4, #4]
 800a194:	bf08      	it	eq
 800a196:	6031      	streq	r1, [r6, #0]
 800a198:	5162      	str	r2, [r4, r5]
 800a19a:	604b      	str	r3, [r1, #4]
 800a19c:	4638      	mov	r0, r7
 800a19e:	f104 060b 	add.w	r6, r4, #11
 800a1a2:	f000 fbbd 	bl	800a920 <__malloc_unlock>
 800a1a6:	f026 0607 	bic.w	r6, r6, #7
 800a1aa:	1d23      	adds	r3, r4, #4
 800a1ac:	1af2      	subs	r2, r6, r3
 800a1ae:	d0b6      	beq.n	800a11e <_malloc_r+0x22>
 800a1b0:	1b9b      	subs	r3, r3, r6
 800a1b2:	50a3      	str	r3, [r4, r2]
 800a1b4:	e7b3      	b.n	800a11e <_malloc_r+0x22>
 800a1b6:	6862      	ldr	r2, [r4, #4]
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	bf0c      	ite	eq
 800a1bc:	6032      	streq	r2, [r6, #0]
 800a1be:	605a      	strne	r2, [r3, #4]
 800a1c0:	e7ec      	b.n	800a19c <_malloc_r+0xa0>
 800a1c2:	4623      	mov	r3, r4
 800a1c4:	6864      	ldr	r4, [r4, #4]
 800a1c6:	e7b2      	b.n	800a12e <_malloc_r+0x32>
 800a1c8:	4634      	mov	r4, r6
 800a1ca:	6876      	ldr	r6, [r6, #4]
 800a1cc:	e7b9      	b.n	800a142 <_malloc_r+0x46>
 800a1ce:	230c      	movs	r3, #12
 800a1d0:	603b      	str	r3, [r7, #0]
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	f000 fba4 	bl	800a920 <__malloc_unlock>
 800a1d8:	e7a1      	b.n	800a11e <_malloc_r+0x22>
 800a1da:	6025      	str	r5, [r4, #0]
 800a1dc:	e7de      	b.n	800a19c <_malloc_r+0xa0>
 800a1de:	bf00      	nop
 800a1e0:	2001377c 	.word	0x2001377c

0800a1e4 <__sfputc_r>:
 800a1e4:	6893      	ldr	r3, [r2, #8]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	b410      	push	{r4}
 800a1ec:	6093      	str	r3, [r2, #8]
 800a1ee:	da08      	bge.n	800a202 <__sfputc_r+0x1e>
 800a1f0:	6994      	ldr	r4, [r2, #24]
 800a1f2:	42a3      	cmp	r3, r4
 800a1f4:	db01      	blt.n	800a1fa <__sfputc_r+0x16>
 800a1f6:	290a      	cmp	r1, #10
 800a1f8:	d103      	bne.n	800a202 <__sfputc_r+0x1e>
 800a1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1fe:	f7ff bc31 	b.w	8009a64 <__swbuf_r>
 800a202:	6813      	ldr	r3, [r2, #0]
 800a204:	1c58      	adds	r0, r3, #1
 800a206:	6010      	str	r0, [r2, #0]
 800a208:	7019      	strb	r1, [r3, #0]
 800a20a:	4608      	mov	r0, r1
 800a20c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <__sfputs_r>:
 800a212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a214:	4606      	mov	r6, r0
 800a216:	460f      	mov	r7, r1
 800a218:	4614      	mov	r4, r2
 800a21a:	18d5      	adds	r5, r2, r3
 800a21c:	42ac      	cmp	r4, r5
 800a21e:	d101      	bne.n	800a224 <__sfputs_r+0x12>
 800a220:	2000      	movs	r0, #0
 800a222:	e007      	b.n	800a234 <__sfputs_r+0x22>
 800a224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a228:	463a      	mov	r2, r7
 800a22a:	4630      	mov	r0, r6
 800a22c:	f7ff ffda 	bl	800a1e4 <__sfputc_r>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	d1f3      	bne.n	800a21c <__sfputs_r+0xa>
 800a234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a238 <_vfiprintf_r>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	460d      	mov	r5, r1
 800a23e:	b09d      	sub	sp, #116	; 0x74
 800a240:	4614      	mov	r4, r2
 800a242:	4698      	mov	r8, r3
 800a244:	4606      	mov	r6, r0
 800a246:	b118      	cbz	r0, 800a250 <_vfiprintf_r+0x18>
 800a248:	6983      	ldr	r3, [r0, #24]
 800a24a:	b90b      	cbnz	r3, 800a250 <_vfiprintf_r+0x18>
 800a24c:	f7ff fde4 	bl	8009e18 <__sinit>
 800a250:	4b89      	ldr	r3, [pc, #548]	; (800a478 <_vfiprintf_r+0x240>)
 800a252:	429d      	cmp	r5, r3
 800a254:	d11b      	bne.n	800a28e <_vfiprintf_r+0x56>
 800a256:	6875      	ldr	r5, [r6, #4]
 800a258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a25a:	07d9      	lsls	r1, r3, #31
 800a25c:	d405      	bmi.n	800a26a <_vfiprintf_r+0x32>
 800a25e:	89ab      	ldrh	r3, [r5, #12]
 800a260:	059a      	lsls	r2, r3, #22
 800a262:	d402      	bmi.n	800a26a <_vfiprintf_r+0x32>
 800a264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a266:	f7ff fe75 	bl	8009f54 <__retarget_lock_acquire_recursive>
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	071b      	lsls	r3, r3, #28
 800a26e:	d501      	bpl.n	800a274 <_vfiprintf_r+0x3c>
 800a270:	692b      	ldr	r3, [r5, #16]
 800a272:	b9eb      	cbnz	r3, 800a2b0 <_vfiprintf_r+0x78>
 800a274:	4629      	mov	r1, r5
 800a276:	4630      	mov	r0, r6
 800a278:	f7ff fc46 	bl	8009b08 <__swsetup_r>
 800a27c:	b1c0      	cbz	r0, 800a2b0 <_vfiprintf_r+0x78>
 800a27e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a280:	07dc      	lsls	r4, r3, #31
 800a282:	d50e      	bpl.n	800a2a2 <_vfiprintf_r+0x6a>
 800a284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a288:	b01d      	add	sp, #116	; 0x74
 800a28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28e:	4b7b      	ldr	r3, [pc, #492]	; (800a47c <_vfiprintf_r+0x244>)
 800a290:	429d      	cmp	r5, r3
 800a292:	d101      	bne.n	800a298 <_vfiprintf_r+0x60>
 800a294:	68b5      	ldr	r5, [r6, #8]
 800a296:	e7df      	b.n	800a258 <_vfiprintf_r+0x20>
 800a298:	4b79      	ldr	r3, [pc, #484]	; (800a480 <_vfiprintf_r+0x248>)
 800a29a:	429d      	cmp	r5, r3
 800a29c:	bf08      	it	eq
 800a29e:	68f5      	ldreq	r5, [r6, #12]
 800a2a0:	e7da      	b.n	800a258 <_vfiprintf_r+0x20>
 800a2a2:	89ab      	ldrh	r3, [r5, #12]
 800a2a4:	0598      	lsls	r0, r3, #22
 800a2a6:	d4ed      	bmi.n	800a284 <_vfiprintf_r+0x4c>
 800a2a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2aa:	f7ff fe54 	bl	8009f56 <__retarget_lock_release_recursive>
 800a2ae:	e7e9      	b.n	800a284 <_vfiprintf_r+0x4c>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2b4:	2320      	movs	r3, #32
 800a2b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2be:	2330      	movs	r3, #48	; 0x30
 800a2c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a484 <_vfiprintf_r+0x24c>
 800a2c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2c8:	f04f 0901 	mov.w	r9, #1
 800a2cc:	4623      	mov	r3, r4
 800a2ce:	469a      	mov	sl, r3
 800a2d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2d4:	b10a      	cbz	r2, 800a2da <_vfiprintf_r+0xa2>
 800a2d6:	2a25      	cmp	r2, #37	; 0x25
 800a2d8:	d1f9      	bne.n	800a2ce <_vfiprintf_r+0x96>
 800a2da:	ebba 0b04 	subs.w	fp, sl, r4
 800a2de:	d00b      	beq.n	800a2f8 <_vfiprintf_r+0xc0>
 800a2e0:	465b      	mov	r3, fp
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f7ff ff93 	bl	800a212 <__sfputs_r>
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	f000 80aa 	beq.w	800a446 <_vfiprintf_r+0x20e>
 800a2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2f4:	445a      	add	r2, fp
 800a2f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f000 80a2 	beq.w	800a446 <_vfiprintf_r+0x20e>
 800a302:	2300      	movs	r3, #0
 800a304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a30c:	f10a 0a01 	add.w	sl, sl, #1
 800a310:	9304      	str	r3, [sp, #16]
 800a312:	9307      	str	r3, [sp, #28]
 800a314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a318:	931a      	str	r3, [sp, #104]	; 0x68
 800a31a:	4654      	mov	r4, sl
 800a31c:	2205      	movs	r2, #5
 800a31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a322:	4858      	ldr	r0, [pc, #352]	; (800a484 <_vfiprintf_r+0x24c>)
 800a324:	f7f5 ff6c 	bl	8000200 <memchr>
 800a328:	9a04      	ldr	r2, [sp, #16]
 800a32a:	b9d8      	cbnz	r0, 800a364 <_vfiprintf_r+0x12c>
 800a32c:	06d1      	lsls	r1, r2, #27
 800a32e:	bf44      	itt	mi
 800a330:	2320      	movmi	r3, #32
 800a332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a336:	0713      	lsls	r3, r2, #28
 800a338:	bf44      	itt	mi
 800a33a:	232b      	movmi	r3, #43	; 0x2b
 800a33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a340:	f89a 3000 	ldrb.w	r3, [sl]
 800a344:	2b2a      	cmp	r3, #42	; 0x2a
 800a346:	d015      	beq.n	800a374 <_vfiprintf_r+0x13c>
 800a348:	9a07      	ldr	r2, [sp, #28]
 800a34a:	4654      	mov	r4, sl
 800a34c:	2000      	movs	r0, #0
 800a34e:	f04f 0c0a 	mov.w	ip, #10
 800a352:	4621      	mov	r1, r4
 800a354:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a358:	3b30      	subs	r3, #48	; 0x30
 800a35a:	2b09      	cmp	r3, #9
 800a35c:	d94e      	bls.n	800a3fc <_vfiprintf_r+0x1c4>
 800a35e:	b1b0      	cbz	r0, 800a38e <_vfiprintf_r+0x156>
 800a360:	9207      	str	r2, [sp, #28]
 800a362:	e014      	b.n	800a38e <_vfiprintf_r+0x156>
 800a364:	eba0 0308 	sub.w	r3, r0, r8
 800a368:	fa09 f303 	lsl.w	r3, r9, r3
 800a36c:	4313      	orrs	r3, r2
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	46a2      	mov	sl, r4
 800a372:	e7d2      	b.n	800a31a <_vfiprintf_r+0xe2>
 800a374:	9b03      	ldr	r3, [sp, #12]
 800a376:	1d19      	adds	r1, r3, #4
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	9103      	str	r1, [sp, #12]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	bfbb      	ittet	lt
 800a380:	425b      	neglt	r3, r3
 800a382:	f042 0202 	orrlt.w	r2, r2, #2
 800a386:	9307      	strge	r3, [sp, #28]
 800a388:	9307      	strlt	r3, [sp, #28]
 800a38a:	bfb8      	it	lt
 800a38c:	9204      	strlt	r2, [sp, #16]
 800a38e:	7823      	ldrb	r3, [r4, #0]
 800a390:	2b2e      	cmp	r3, #46	; 0x2e
 800a392:	d10c      	bne.n	800a3ae <_vfiprintf_r+0x176>
 800a394:	7863      	ldrb	r3, [r4, #1]
 800a396:	2b2a      	cmp	r3, #42	; 0x2a
 800a398:	d135      	bne.n	800a406 <_vfiprintf_r+0x1ce>
 800a39a:	9b03      	ldr	r3, [sp, #12]
 800a39c:	1d1a      	adds	r2, r3, #4
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	9203      	str	r2, [sp, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	bfb8      	it	lt
 800a3a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a3aa:	3402      	adds	r4, #2
 800a3ac:	9305      	str	r3, [sp, #20]
 800a3ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a494 <_vfiprintf_r+0x25c>
 800a3b2:	7821      	ldrb	r1, [r4, #0]
 800a3b4:	2203      	movs	r2, #3
 800a3b6:	4650      	mov	r0, sl
 800a3b8:	f7f5 ff22 	bl	8000200 <memchr>
 800a3bc:	b140      	cbz	r0, 800a3d0 <_vfiprintf_r+0x198>
 800a3be:	2340      	movs	r3, #64	; 0x40
 800a3c0:	eba0 000a 	sub.w	r0, r0, sl
 800a3c4:	fa03 f000 	lsl.w	r0, r3, r0
 800a3c8:	9b04      	ldr	r3, [sp, #16]
 800a3ca:	4303      	orrs	r3, r0
 800a3cc:	3401      	adds	r4, #1
 800a3ce:	9304      	str	r3, [sp, #16]
 800a3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3d4:	482c      	ldr	r0, [pc, #176]	; (800a488 <_vfiprintf_r+0x250>)
 800a3d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3da:	2206      	movs	r2, #6
 800a3dc:	f7f5 ff10 	bl	8000200 <memchr>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d03f      	beq.n	800a464 <_vfiprintf_r+0x22c>
 800a3e4:	4b29      	ldr	r3, [pc, #164]	; (800a48c <_vfiprintf_r+0x254>)
 800a3e6:	bb1b      	cbnz	r3, 800a430 <_vfiprintf_r+0x1f8>
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	3307      	adds	r3, #7
 800a3ec:	f023 0307 	bic.w	r3, r3, #7
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	9303      	str	r3, [sp, #12]
 800a3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f6:	443b      	add	r3, r7
 800a3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fa:	e767      	b.n	800a2cc <_vfiprintf_r+0x94>
 800a3fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a400:	460c      	mov	r4, r1
 800a402:	2001      	movs	r0, #1
 800a404:	e7a5      	b.n	800a352 <_vfiprintf_r+0x11a>
 800a406:	2300      	movs	r3, #0
 800a408:	3401      	adds	r4, #1
 800a40a:	9305      	str	r3, [sp, #20]
 800a40c:	4619      	mov	r1, r3
 800a40e:	f04f 0c0a 	mov.w	ip, #10
 800a412:	4620      	mov	r0, r4
 800a414:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a418:	3a30      	subs	r2, #48	; 0x30
 800a41a:	2a09      	cmp	r2, #9
 800a41c:	d903      	bls.n	800a426 <_vfiprintf_r+0x1ee>
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0c5      	beq.n	800a3ae <_vfiprintf_r+0x176>
 800a422:	9105      	str	r1, [sp, #20]
 800a424:	e7c3      	b.n	800a3ae <_vfiprintf_r+0x176>
 800a426:	fb0c 2101 	mla	r1, ip, r1, r2
 800a42a:	4604      	mov	r4, r0
 800a42c:	2301      	movs	r3, #1
 800a42e:	e7f0      	b.n	800a412 <_vfiprintf_r+0x1da>
 800a430:	ab03      	add	r3, sp, #12
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	462a      	mov	r2, r5
 800a436:	4b16      	ldr	r3, [pc, #88]	; (800a490 <_vfiprintf_r+0x258>)
 800a438:	a904      	add	r1, sp, #16
 800a43a:	4630      	mov	r0, r6
 800a43c:	f3af 8000 	nop.w
 800a440:	4607      	mov	r7, r0
 800a442:	1c78      	adds	r0, r7, #1
 800a444:	d1d6      	bne.n	800a3f4 <_vfiprintf_r+0x1bc>
 800a446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a448:	07d9      	lsls	r1, r3, #31
 800a44a:	d405      	bmi.n	800a458 <_vfiprintf_r+0x220>
 800a44c:	89ab      	ldrh	r3, [r5, #12]
 800a44e:	059a      	lsls	r2, r3, #22
 800a450:	d402      	bmi.n	800a458 <_vfiprintf_r+0x220>
 800a452:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a454:	f7ff fd7f 	bl	8009f56 <__retarget_lock_release_recursive>
 800a458:	89ab      	ldrh	r3, [r5, #12]
 800a45a:	065b      	lsls	r3, r3, #25
 800a45c:	f53f af12 	bmi.w	800a284 <_vfiprintf_r+0x4c>
 800a460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a462:	e711      	b.n	800a288 <_vfiprintf_r+0x50>
 800a464:	ab03      	add	r3, sp, #12
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	462a      	mov	r2, r5
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <_vfiprintf_r+0x258>)
 800a46c:	a904      	add	r1, sp, #16
 800a46e:	4630      	mov	r0, r6
 800a470:	f000 f880 	bl	800a574 <_printf_i>
 800a474:	e7e4      	b.n	800a440 <_vfiprintf_r+0x208>
 800a476:	bf00      	nop
 800a478:	08011a34 	.word	0x08011a34
 800a47c:	08011a54 	.word	0x08011a54
 800a480:	08011a14 	.word	0x08011a14
 800a484:	08011a74 	.word	0x08011a74
 800a488:	08011a7e 	.word	0x08011a7e
 800a48c:	00000000 	.word	0x00000000
 800a490:	0800a213 	.word	0x0800a213
 800a494:	08011a7a 	.word	0x08011a7a

0800a498 <_printf_common>:
 800a498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49c:	4616      	mov	r6, r2
 800a49e:	4699      	mov	r9, r3
 800a4a0:	688a      	ldr	r2, [r1, #8]
 800a4a2:	690b      	ldr	r3, [r1, #16]
 800a4a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	bfb8      	it	lt
 800a4ac:	4613      	movlt	r3, r2
 800a4ae:	6033      	str	r3, [r6, #0]
 800a4b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	b10a      	cbz	r2, 800a4be <_printf_common+0x26>
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	6033      	str	r3, [r6, #0]
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	0699      	lsls	r1, r3, #26
 800a4c2:	bf42      	ittt	mi
 800a4c4:	6833      	ldrmi	r3, [r6, #0]
 800a4c6:	3302      	addmi	r3, #2
 800a4c8:	6033      	strmi	r3, [r6, #0]
 800a4ca:	6825      	ldr	r5, [r4, #0]
 800a4cc:	f015 0506 	ands.w	r5, r5, #6
 800a4d0:	d106      	bne.n	800a4e0 <_printf_common+0x48>
 800a4d2:	f104 0a19 	add.w	sl, r4, #25
 800a4d6:	68e3      	ldr	r3, [r4, #12]
 800a4d8:	6832      	ldr	r2, [r6, #0]
 800a4da:	1a9b      	subs	r3, r3, r2
 800a4dc:	42ab      	cmp	r3, r5
 800a4de:	dc26      	bgt.n	800a52e <_printf_common+0x96>
 800a4e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4e4:	1e13      	subs	r3, r2, #0
 800a4e6:	6822      	ldr	r2, [r4, #0]
 800a4e8:	bf18      	it	ne
 800a4ea:	2301      	movne	r3, #1
 800a4ec:	0692      	lsls	r2, r2, #26
 800a4ee:	d42b      	bmi.n	800a548 <_printf_common+0xb0>
 800a4f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4f4:	4649      	mov	r1, r9
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	47c0      	blx	r8
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	d01e      	beq.n	800a53c <_printf_common+0xa4>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	68e5      	ldr	r5, [r4, #12]
 800a502:	6832      	ldr	r2, [r6, #0]
 800a504:	f003 0306 	and.w	r3, r3, #6
 800a508:	2b04      	cmp	r3, #4
 800a50a:	bf08      	it	eq
 800a50c:	1aad      	subeq	r5, r5, r2
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	6922      	ldr	r2, [r4, #16]
 800a512:	bf0c      	ite	eq
 800a514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a518:	2500      	movne	r5, #0
 800a51a:	4293      	cmp	r3, r2
 800a51c:	bfc4      	itt	gt
 800a51e:	1a9b      	subgt	r3, r3, r2
 800a520:	18ed      	addgt	r5, r5, r3
 800a522:	2600      	movs	r6, #0
 800a524:	341a      	adds	r4, #26
 800a526:	42b5      	cmp	r5, r6
 800a528:	d11a      	bne.n	800a560 <_printf_common+0xc8>
 800a52a:	2000      	movs	r0, #0
 800a52c:	e008      	b.n	800a540 <_printf_common+0xa8>
 800a52e:	2301      	movs	r3, #1
 800a530:	4652      	mov	r2, sl
 800a532:	4649      	mov	r1, r9
 800a534:	4638      	mov	r0, r7
 800a536:	47c0      	blx	r8
 800a538:	3001      	adds	r0, #1
 800a53a:	d103      	bne.n	800a544 <_printf_common+0xac>
 800a53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a544:	3501      	adds	r5, #1
 800a546:	e7c6      	b.n	800a4d6 <_printf_common+0x3e>
 800a548:	18e1      	adds	r1, r4, r3
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	2030      	movs	r0, #48	; 0x30
 800a54e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a552:	4422      	add	r2, r4
 800a554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a55c:	3302      	adds	r3, #2
 800a55e:	e7c7      	b.n	800a4f0 <_printf_common+0x58>
 800a560:	2301      	movs	r3, #1
 800a562:	4622      	mov	r2, r4
 800a564:	4649      	mov	r1, r9
 800a566:	4638      	mov	r0, r7
 800a568:	47c0      	blx	r8
 800a56a:	3001      	adds	r0, #1
 800a56c:	d0e6      	beq.n	800a53c <_printf_common+0xa4>
 800a56e:	3601      	adds	r6, #1
 800a570:	e7d9      	b.n	800a526 <_printf_common+0x8e>
	...

0800a574 <_printf_i>:
 800a574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a578:	7e0f      	ldrb	r7, [r1, #24]
 800a57a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a57c:	2f78      	cmp	r7, #120	; 0x78
 800a57e:	4691      	mov	r9, r2
 800a580:	4680      	mov	r8, r0
 800a582:	460c      	mov	r4, r1
 800a584:	469a      	mov	sl, r3
 800a586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a58a:	d807      	bhi.n	800a59c <_printf_i+0x28>
 800a58c:	2f62      	cmp	r7, #98	; 0x62
 800a58e:	d80a      	bhi.n	800a5a6 <_printf_i+0x32>
 800a590:	2f00      	cmp	r7, #0
 800a592:	f000 80d8 	beq.w	800a746 <_printf_i+0x1d2>
 800a596:	2f58      	cmp	r7, #88	; 0x58
 800a598:	f000 80a3 	beq.w	800a6e2 <_printf_i+0x16e>
 800a59c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5a4:	e03a      	b.n	800a61c <_printf_i+0xa8>
 800a5a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5aa:	2b15      	cmp	r3, #21
 800a5ac:	d8f6      	bhi.n	800a59c <_printf_i+0x28>
 800a5ae:	a101      	add	r1, pc, #4	; (adr r1, 800a5b4 <_printf_i+0x40>)
 800a5b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5b4:	0800a60d 	.word	0x0800a60d
 800a5b8:	0800a621 	.word	0x0800a621
 800a5bc:	0800a59d 	.word	0x0800a59d
 800a5c0:	0800a59d 	.word	0x0800a59d
 800a5c4:	0800a59d 	.word	0x0800a59d
 800a5c8:	0800a59d 	.word	0x0800a59d
 800a5cc:	0800a621 	.word	0x0800a621
 800a5d0:	0800a59d 	.word	0x0800a59d
 800a5d4:	0800a59d 	.word	0x0800a59d
 800a5d8:	0800a59d 	.word	0x0800a59d
 800a5dc:	0800a59d 	.word	0x0800a59d
 800a5e0:	0800a72d 	.word	0x0800a72d
 800a5e4:	0800a651 	.word	0x0800a651
 800a5e8:	0800a70f 	.word	0x0800a70f
 800a5ec:	0800a59d 	.word	0x0800a59d
 800a5f0:	0800a59d 	.word	0x0800a59d
 800a5f4:	0800a74f 	.word	0x0800a74f
 800a5f8:	0800a59d 	.word	0x0800a59d
 800a5fc:	0800a651 	.word	0x0800a651
 800a600:	0800a59d 	.word	0x0800a59d
 800a604:	0800a59d 	.word	0x0800a59d
 800a608:	0800a717 	.word	0x0800a717
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	1d1a      	adds	r2, r3, #4
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	602a      	str	r2, [r5, #0]
 800a614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a61c:	2301      	movs	r3, #1
 800a61e:	e0a3      	b.n	800a768 <_printf_i+0x1f4>
 800a620:	6820      	ldr	r0, [r4, #0]
 800a622:	6829      	ldr	r1, [r5, #0]
 800a624:	0606      	lsls	r6, r0, #24
 800a626:	f101 0304 	add.w	r3, r1, #4
 800a62a:	d50a      	bpl.n	800a642 <_printf_i+0xce>
 800a62c:	680e      	ldr	r6, [r1, #0]
 800a62e:	602b      	str	r3, [r5, #0]
 800a630:	2e00      	cmp	r6, #0
 800a632:	da03      	bge.n	800a63c <_printf_i+0xc8>
 800a634:	232d      	movs	r3, #45	; 0x2d
 800a636:	4276      	negs	r6, r6
 800a638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a63c:	485e      	ldr	r0, [pc, #376]	; (800a7b8 <_printf_i+0x244>)
 800a63e:	230a      	movs	r3, #10
 800a640:	e019      	b.n	800a676 <_printf_i+0x102>
 800a642:	680e      	ldr	r6, [r1, #0]
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a64a:	bf18      	it	ne
 800a64c:	b236      	sxthne	r6, r6
 800a64e:	e7ef      	b.n	800a630 <_printf_i+0xbc>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	6820      	ldr	r0, [r4, #0]
 800a654:	1d19      	adds	r1, r3, #4
 800a656:	6029      	str	r1, [r5, #0]
 800a658:	0601      	lsls	r1, r0, #24
 800a65a:	d501      	bpl.n	800a660 <_printf_i+0xec>
 800a65c:	681e      	ldr	r6, [r3, #0]
 800a65e:	e002      	b.n	800a666 <_printf_i+0xf2>
 800a660:	0646      	lsls	r6, r0, #25
 800a662:	d5fb      	bpl.n	800a65c <_printf_i+0xe8>
 800a664:	881e      	ldrh	r6, [r3, #0]
 800a666:	4854      	ldr	r0, [pc, #336]	; (800a7b8 <_printf_i+0x244>)
 800a668:	2f6f      	cmp	r7, #111	; 0x6f
 800a66a:	bf0c      	ite	eq
 800a66c:	2308      	moveq	r3, #8
 800a66e:	230a      	movne	r3, #10
 800a670:	2100      	movs	r1, #0
 800a672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a676:	6865      	ldr	r5, [r4, #4]
 800a678:	60a5      	str	r5, [r4, #8]
 800a67a:	2d00      	cmp	r5, #0
 800a67c:	bfa2      	ittt	ge
 800a67e:	6821      	ldrge	r1, [r4, #0]
 800a680:	f021 0104 	bicge.w	r1, r1, #4
 800a684:	6021      	strge	r1, [r4, #0]
 800a686:	b90e      	cbnz	r6, 800a68c <_printf_i+0x118>
 800a688:	2d00      	cmp	r5, #0
 800a68a:	d04d      	beq.n	800a728 <_printf_i+0x1b4>
 800a68c:	4615      	mov	r5, r2
 800a68e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a692:	fb03 6711 	mls	r7, r3, r1, r6
 800a696:	5dc7      	ldrb	r7, [r0, r7]
 800a698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a69c:	4637      	mov	r7, r6
 800a69e:	42bb      	cmp	r3, r7
 800a6a0:	460e      	mov	r6, r1
 800a6a2:	d9f4      	bls.n	800a68e <_printf_i+0x11a>
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d10b      	bne.n	800a6c0 <_printf_i+0x14c>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	07de      	lsls	r6, r3, #31
 800a6ac:	d508      	bpl.n	800a6c0 <_printf_i+0x14c>
 800a6ae:	6923      	ldr	r3, [r4, #16]
 800a6b0:	6861      	ldr	r1, [r4, #4]
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	bfde      	ittt	le
 800a6b6:	2330      	movle	r3, #48	; 0x30
 800a6b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a6c0:	1b52      	subs	r2, r2, r5
 800a6c2:	6122      	str	r2, [r4, #16]
 800a6c4:	f8cd a000 	str.w	sl, [sp]
 800a6c8:	464b      	mov	r3, r9
 800a6ca:	aa03      	add	r2, sp, #12
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f7ff fee2 	bl	800a498 <_printf_common>
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d14c      	bne.n	800a772 <_printf_i+0x1fe>
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6dc:	b004      	add	sp, #16
 800a6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e2:	4835      	ldr	r0, [pc, #212]	; (800a7b8 <_printf_i+0x244>)
 800a6e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a6e8:	6829      	ldr	r1, [r5, #0]
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6f0:	6029      	str	r1, [r5, #0]
 800a6f2:	061d      	lsls	r5, r3, #24
 800a6f4:	d514      	bpl.n	800a720 <_printf_i+0x1ac>
 800a6f6:	07df      	lsls	r7, r3, #31
 800a6f8:	bf44      	itt	mi
 800a6fa:	f043 0320 	orrmi.w	r3, r3, #32
 800a6fe:	6023      	strmi	r3, [r4, #0]
 800a700:	b91e      	cbnz	r6, 800a70a <_printf_i+0x196>
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	f023 0320 	bic.w	r3, r3, #32
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	2310      	movs	r3, #16
 800a70c:	e7b0      	b.n	800a670 <_printf_i+0xfc>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	f043 0320 	orr.w	r3, r3, #32
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	2378      	movs	r3, #120	; 0x78
 800a718:	4828      	ldr	r0, [pc, #160]	; (800a7bc <_printf_i+0x248>)
 800a71a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a71e:	e7e3      	b.n	800a6e8 <_printf_i+0x174>
 800a720:	0659      	lsls	r1, r3, #25
 800a722:	bf48      	it	mi
 800a724:	b2b6      	uxthmi	r6, r6
 800a726:	e7e6      	b.n	800a6f6 <_printf_i+0x182>
 800a728:	4615      	mov	r5, r2
 800a72a:	e7bb      	b.n	800a6a4 <_printf_i+0x130>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	6826      	ldr	r6, [r4, #0]
 800a730:	6961      	ldr	r1, [r4, #20]
 800a732:	1d18      	adds	r0, r3, #4
 800a734:	6028      	str	r0, [r5, #0]
 800a736:	0635      	lsls	r5, r6, #24
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	d501      	bpl.n	800a740 <_printf_i+0x1cc>
 800a73c:	6019      	str	r1, [r3, #0]
 800a73e:	e002      	b.n	800a746 <_printf_i+0x1d2>
 800a740:	0670      	lsls	r0, r6, #25
 800a742:	d5fb      	bpl.n	800a73c <_printf_i+0x1c8>
 800a744:	8019      	strh	r1, [r3, #0]
 800a746:	2300      	movs	r3, #0
 800a748:	6123      	str	r3, [r4, #16]
 800a74a:	4615      	mov	r5, r2
 800a74c:	e7ba      	b.n	800a6c4 <_printf_i+0x150>
 800a74e:	682b      	ldr	r3, [r5, #0]
 800a750:	1d1a      	adds	r2, r3, #4
 800a752:	602a      	str	r2, [r5, #0]
 800a754:	681d      	ldr	r5, [r3, #0]
 800a756:	6862      	ldr	r2, [r4, #4]
 800a758:	2100      	movs	r1, #0
 800a75a:	4628      	mov	r0, r5
 800a75c:	f7f5 fd50 	bl	8000200 <memchr>
 800a760:	b108      	cbz	r0, 800a766 <_printf_i+0x1f2>
 800a762:	1b40      	subs	r0, r0, r5
 800a764:	6060      	str	r0, [r4, #4]
 800a766:	6863      	ldr	r3, [r4, #4]
 800a768:	6123      	str	r3, [r4, #16]
 800a76a:	2300      	movs	r3, #0
 800a76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a770:	e7a8      	b.n	800a6c4 <_printf_i+0x150>
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	462a      	mov	r2, r5
 800a776:	4649      	mov	r1, r9
 800a778:	4640      	mov	r0, r8
 800a77a:	47d0      	blx	sl
 800a77c:	3001      	adds	r0, #1
 800a77e:	d0ab      	beq.n	800a6d8 <_printf_i+0x164>
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	079b      	lsls	r3, r3, #30
 800a784:	d413      	bmi.n	800a7ae <_printf_i+0x23a>
 800a786:	68e0      	ldr	r0, [r4, #12]
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	4298      	cmp	r0, r3
 800a78c:	bfb8      	it	lt
 800a78e:	4618      	movlt	r0, r3
 800a790:	e7a4      	b.n	800a6dc <_printf_i+0x168>
 800a792:	2301      	movs	r3, #1
 800a794:	4632      	mov	r2, r6
 800a796:	4649      	mov	r1, r9
 800a798:	4640      	mov	r0, r8
 800a79a:	47d0      	blx	sl
 800a79c:	3001      	adds	r0, #1
 800a79e:	d09b      	beq.n	800a6d8 <_printf_i+0x164>
 800a7a0:	3501      	adds	r5, #1
 800a7a2:	68e3      	ldr	r3, [r4, #12]
 800a7a4:	9903      	ldr	r1, [sp, #12]
 800a7a6:	1a5b      	subs	r3, r3, r1
 800a7a8:	42ab      	cmp	r3, r5
 800a7aa:	dcf2      	bgt.n	800a792 <_printf_i+0x21e>
 800a7ac:	e7eb      	b.n	800a786 <_printf_i+0x212>
 800a7ae:	2500      	movs	r5, #0
 800a7b0:	f104 0619 	add.w	r6, r4, #25
 800a7b4:	e7f5      	b.n	800a7a2 <_printf_i+0x22e>
 800a7b6:	bf00      	nop
 800a7b8:	08011a85 	.word	0x08011a85
 800a7bc:	08011a96 	.word	0x08011a96

0800a7c0 <_sbrk_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4d06      	ldr	r5, [pc, #24]	; (800a7dc <_sbrk_r+0x1c>)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	602b      	str	r3, [r5, #0]
 800a7cc:	f7f7 fe00 	bl	80023d0 <_sbrk>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_sbrk_r+0x1a>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_sbrk_r+0x1a>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	20013784 	.word	0x20013784

0800a7e0 <__sread>:
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7e8:	f000 f8a0 	bl	800a92c <_read_r>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	bfab      	itete	ge
 800a7f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a7f4:	181b      	addge	r3, r3, r0
 800a7f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7fa:	bfac      	ite	ge
 800a7fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7fe:	81a3      	strhlt	r3, [r4, #12]
 800a800:	bd10      	pop	{r4, pc}

0800a802 <__swrite>:
 800a802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a806:	461f      	mov	r7, r3
 800a808:	898b      	ldrh	r3, [r1, #12]
 800a80a:	05db      	lsls	r3, r3, #23
 800a80c:	4605      	mov	r5, r0
 800a80e:	460c      	mov	r4, r1
 800a810:	4616      	mov	r6, r2
 800a812:	d505      	bpl.n	800a820 <__swrite+0x1e>
 800a814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a818:	2302      	movs	r3, #2
 800a81a:	2200      	movs	r2, #0
 800a81c:	f000 f868 	bl	800a8f0 <_lseek_r>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	4632      	mov	r2, r6
 800a82e:	463b      	mov	r3, r7
 800a830:	4628      	mov	r0, r5
 800a832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a836:	f000 b817 	b.w	800a868 <_write_r>

0800a83a <__sseek>:
 800a83a:	b510      	push	{r4, lr}
 800a83c:	460c      	mov	r4, r1
 800a83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a842:	f000 f855 	bl	800a8f0 <_lseek_r>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	bf15      	itete	ne
 800a84c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a84e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a852:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a856:	81a3      	strheq	r3, [r4, #12]
 800a858:	bf18      	it	ne
 800a85a:	81a3      	strhne	r3, [r4, #12]
 800a85c:	bd10      	pop	{r4, pc}

0800a85e <__sclose>:
 800a85e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a862:	f000 b813 	b.w	800a88c <_close_r>
	...

0800a868 <_write_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d07      	ldr	r5, [pc, #28]	; (800a888 <_write_r+0x20>)
 800a86c:	4604      	mov	r4, r0
 800a86e:	4608      	mov	r0, r1
 800a870:	4611      	mov	r1, r2
 800a872:	2200      	movs	r2, #0
 800a874:	602a      	str	r2, [r5, #0]
 800a876:	461a      	mov	r2, r3
 800a878:	f7f7 fd59 	bl	800232e <_write>
 800a87c:	1c43      	adds	r3, r0, #1
 800a87e:	d102      	bne.n	800a886 <_write_r+0x1e>
 800a880:	682b      	ldr	r3, [r5, #0]
 800a882:	b103      	cbz	r3, 800a886 <_write_r+0x1e>
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	bd38      	pop	{r3, r4, r5, pc}
 800a888:	20013784 	.word	0x20013784

0800a88c <_close_r>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	4d06      	ldr	r5, [pc, #24]	; (800a8a8 <_close_r+0x1c>)
 800a890:	2300      	movs	r3, #0
 800a892:	4604      	mov	r4, r0
 800a894:	4608      	mov	r0, r1
 800a896:	602b      	str	r3, [r5, #0]
 800a898:	f7f7 fd65 	bl	8002366 <_close>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d102      	bne.n	800a8a6 <_close_r+0x1a>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	b103      	cbz	r3, 800a8a6 <_close_r+0x1a>
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	bd38      	pop	{r3, r4, r5, pc}
 800a8a8:	20013784 	.word	0x20013784

0800a8ac <_fstat_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4d07      	ldr	r5, [pc, #28]	; (800a8cc <_fstat_r+0x20>)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	f7f7 fd60 	bl	800237e <_fstat>
 800a8be:	1c43      	adds	r3, r0, #1
 800a8c0:	d102      	bne.n	800a8c8 <_fstat_r+0x1c>
 800a8c2:	682b      	ldr	r3, [r5, #0]
 800a8c4:	b103      	cbz	r3, 800a8c8 <_fstat_r+0x1c>
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20013784 	.word	0x20013784

0800a8d0 <_isatty_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4d06      	ldr	r5, [pc, #24]	; (800a8ec <_isatty_r+0x1c>)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	602b      	str	r3, [r5, #0]
 800a8dc:	f7f7 fd5f 	bl	800239e <_isatty>
 800a8e0:	1c43      	adds	r3, r0, #1
 800a8e2:	d102      	bne.n	800a8ea <_isatty_r+0x1a>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	b103      	cbz	r3, 800a8ea <_isatty_r+0x1a>
 800a8e8:	6023      	str	r3, [r4, #0]
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	20013784 	.word	0x20013784

0800a8f0 <_lseek_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d07      	ldr	r5, [pc, #28]	; (800a910 <_lseek_r+0x20>)
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	4608      	mov	r0, r1
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	602a      	str	r2, [r5, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	f7f7 fd58 	bl	80023b4 <_lseek>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d102      	bne.n	800a90e <_lseek_r+0x1e>
 800a908:	682b      	ldr	r3, [r5, #0]
 800a90a:	b103      	cbz	r3, 800a90e <_lseek_r+0x1e>
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	20013784 	.word	0x20013784

0800a914 <__malloc_lock>:
 800a914:	4801      	ldr	r0, [pc, #4]	; (800a91c <__malloc_lock+0x8>)
 800a916:	f7ff bb1d 	b.w	8009f54 <__retarget_lock_acquire_recursive>
 800a91a:	bf00      	nop
 800a91c:	20013778 	.word	0x20013778

0800a920 <__malloc_unlock>:
 800a920:	4801      	ldr	r0, [pc, #4]	; (800a928 <__malloc_unlock+0x8>)
 800a922:	f7ff bb18 	b.w	8009f56 <__retarget_lock_release_recursive>
 800a926:	bf00      	nop
 800a928:	20013778 	.word	0x20013778

0800a92c <_read_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4d07      	ldr	r5, [pc, #28]	; (800a94c <_read_r+0x20>)
 800a930:	4604      	mov	r4, r0
 800a932:	4608      	mov	r0, r1
 800a934:	4611      	mov	r1, r2
 800a936:	2200      	movs	r2, #0
 800a938:	602a      	str	r2, [r5, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	f7f7 fcda 	bl	80022f4 <_read>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d102      	bne.n	800a94a <_read_r+0x1e>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b103      	cbz	r3, 800a94a <_read_r+0x1e>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	20013784 	.word	0x20013784

0800a950 <_init>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr

0800a95c <_fini>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr
