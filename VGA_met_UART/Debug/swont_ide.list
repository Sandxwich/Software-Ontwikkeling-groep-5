
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c43c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009d90  0800c5d0  0800c5d0  0001c5d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016360  08016360  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08016360  08016360  00026360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016368  08016368  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016368  08016368  00026368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801636c  0801636c  0002636c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08016370  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013700  20000088  080163f8  00030088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013788  080163f8  00033788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018067  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039a0  00000000  00000000  0004811f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0004bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0004ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c14  00000000  00000000  0004e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9ca  00000000  00000000  00074cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1647  00000000  00000000  000926a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163ced  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f30  00000000  00000000  00163d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5b4 	.word	0x0800c5b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c5b4 	.word	0x0800c5b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <API_draw_line>:
 * 	bitmap:
 *
 */

int API_draw_line(uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint8_t dikte, uint8_t color)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b08d      	sub	sp, #52	; 0x34
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4623      	mov	r3, r4
 8000f7c:	80fb      	strh	r3, [r7, #6]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80bb      	strh	r3, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	807b      	strh	r3, [r7, #2]
 8000f86:	4613      	mov	r3, r2
 8000f88:	803b      	strh	r3, [r7, #0]
	int error = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
	int dx = x_2 - x_1;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	617b      	str	r3, [r7, #20]
	int dy = y_2 - y_1;
 8000f96:	883a      	ldrh	r2, [r7, #0]
 8000f98:	88bb      	ldrh	r3, [r7, #4]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	613b      	str	r3, [r7, #16]
	int steps;
	if(dx>dy)
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dd05      	ble.n	8000fb2 <API_draw_line+0x46>
	{
		steps = abs(dx);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bfb8      	it	lt
 8000fac:	425b      	neglt	r3, r3
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb0:	e023      	b.n	8000ffa <API_draw_line+0x8e>
	}
	else if(dy>dx)
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dd05      	ble.n	8000fc6 <API_draw_line+0x5a>
	{
		steps = abs(dy);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bfb8      	it	lt
 8000fc0:	425b      	neglt	r3, r3
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fc4:	e019      	b.n	8000ffa <API_draw_line+0x8e>
	}
	else if (dx == dy)
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d105      	bne.n	8000fda <API_draw_line+0x6e>
	{
		steps = abs(dy);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bfb8      	it	lt
 8000fd4:	425b      	neglt	r3, r3
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd8:	e00f      	b.n	8000ffa <API_draw_line+0x8e>
	}
	else if(abs(dx)==abs(dy))
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000fe0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bfb8      	it	lt
 8000fea:	425b      	neglt	r3, r3
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d104      	bne.n	8000ffa <API_draw_line+0x8e>
		steps = abs(dy);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bfb8      	it	lt
 8000ff6:	425b      	neglt	r3, r3
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	float xIncrement = (float) dx / steps;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001012:	edc7 7a03 	vstr	s15, [r7, #12]
	float yIncrement = (float) dy / steps;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102e:	edc7 7a02 	vstr	s15, [r7, #8]
	int i;

	// Set the pixels along the center line of the given thickness
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8001032:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001036:	085b      	lsrs	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	425b      	negs	r3, r3
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
 800103e:	e053      	b.n	80010e8 <API_draw_line+0x17c>
		float x = x_1 + 0.5;
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa7e 	bl	8000544 <__aeabi_i2d>
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <API_draw_line+0x198>)
 800104e:	f7ff f92d 	bl	80002ac <__adddf3>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fdb5 	bl	8000bc8 <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
		float y = y_1 + i + 0.5;
 8001062:	88ba      	ldrh	r2, [r7, #4]
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001066:	4413      	add	r3, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa6b 	bl	8000544 <__aeabi_i2d>
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b24      	ldr	r3, [pc, #144]	; (8001104 <API_draw_line+0x198>)
 8001074:	f7ff f91a 	bl	80002ac <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fda2 	bl	8000bc8 <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	623b      	str	r3, [r7, #32]
		int j;
		for (j = 0; j < steps; j++) {
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	e025      	b.n	80010da <API_draw_line+0x16e>
			UB_VGA_SetPixel(x, y, color);
 800108e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001096:	ee17 3a90 	vmov	r3, s15
 800109a:	b29b      	uxth	r3, r3
 800109c:	edd7 7a08 	vldr	s15, [r7, #32]
 80010a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a4:	ee17 2a90 	vmov	r2, s15
 80010a8:	b291      	uxth	r1, r2
 80010aa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fae0 	bl	8003674 <UB_VGA_SetPixel>
			x += xIncrement;
 80010b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			y += yIncrement;
 80010c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80010c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d0:	edc7 7a08 	vstr	s15, [r7, #32]
		for (j = 0; j < steps; j++) {
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	3301      	adds	r3, #1
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	429a      	cmp	r2, r3
 80010e0:	dbd5      	blt.n	800108e <API_draw_line+0x122>
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 80010e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e4:	3301      	adds	r3, #1
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80010ec:	085b      	lsrs	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dda3      	ble.n	8001040 <API_draw_line+0xd4>
		}
	}
	return error;
 80010f8:	69bb      	ldr	r3, [r7, #24]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3734      	adds	r7, #52	; 0x34
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	3fe00000 	.word	0x3fe00000

08001108 <API_draw_rectangle>:
{
	UB_VGA_FillScreen(color);
}

void API_draw_rectangle(uint16_t x_lup, uint16_t y_lup, uint16_t breedte, uint16_t hoogte, uint8_t color, uint8_t gevuld)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4604      	mov	r4, r0
 8001110:	4608      	mov	r0, r1
 8001112:	4611      	mov	r1, r2
 8001114:	461a      	mov	r2, r3
 8001116:	4623      	mov	r3, r4
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	4603      	mov	r3, r0
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	4613      	mov	r3, r2
 8001124:	803b      	strh	r3, [r7, #0]
	int xp = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
	int yp = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]

	//draw lines along screen every y-value
	if(gevuld == 1)
 800112e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001132:	2b01      	cmp	r3, #1
 8001134:	d121      	bne.n	800117a <API_draw_rectangle+0x72>
	{
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	e017      	b.n	800116c <API_draw_rectangle+0x64>
		{
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e00b      	b.n	800115a <API_draw_rectangle+0x52>
			{
				UB_VGA_SetPixel(xp, yp, color);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	b29b      	uxth	r3, r3
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	b291      	uxth	r1, r2
 800114a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fa90 	bl	8003674 <UB_VGA_SetPixel>
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	4413      	add	r3, r2
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	429a      	cmp	r2, r3
 8001164:	dbed      	blt.n	8001142 <API_draw_rectangle+0x3a>
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3301      	adds	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	88ba      	ldrh	r2, [r7, #4]
 800116e:	883b      	ldrh	r3, [r7, #0]
 8001170:	4413      	add	r3, r2
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	429a      	cmp	r2, r3
 8001176:	dbe1      	blt.n	800113c <API_draw_rectangle+0x34>
						UB_VGA_SetPixel(xp, yp, color);
					}
				}
			}
	}
}
 8001178:	e042      	b.n	8001200 <API_draw_rectangle+0xf8>
	else if(gevuld == 0)
 800117a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800117e:	2b00      	cmp	r3, #0
 8001180:	d13e      	bne.n	8001200 <API_draw_rectangle+0xf8>
			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 8001182:	88bb      	ldrh	r3, [r7, #4]
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	e035      	b.n	80011f4 <API_draw_rectangle+0xec>
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e029      	b.n	80011e2 <API_draw_rectangle+0xda>
					if ((yp == y_lup) || (yp == (y_lup + hoogte)))
 800118e:	88bb      	ldrh	r3, [r7, #4]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	429a      	cmp	r2, r3
 8001194:	d005      	beq.n	80011a2 <API_draw_rectangle+0x9a>
 8001196:	88ba      	ldrh	r2, [r7, #4]
 8001198:	883b      	ldrh	r3, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d109      	bne.n	80011b6 <API_draw_rectangle+0xae>
						UB_VGA_SetPixel(xp, yp, color);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	b291      	uxth	r1, r2
 80011aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fa60 	bl	8003674 <UB_VGA_SetPixel>
 80011b4:	e012      	b.n	80011dc <API_draw_rectangle+0xd4>
					else if((xp == x_lup) || (xp == (x_lup + breedte)))
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d005      	beq.n	80011ca <API_draw_rectangle+0xc2>
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	4413      	add	r3, r2
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d108      	bne.n	80011dc <API_draw_rectangle+0xd4>
						UB_VGA_SetPixel(xp, yp, color);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	b291      	uxth	r1, r2
 80011d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fa4c 	bl	8003674 <UB_VGA_SetPixel>
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	88fa      	ldrh	r2, [r7, #6]
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	4413      	add	r3, r2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	ddcf      	ble.n	800118e <API_draw_rectangle+0x86>
			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3301      	adds	r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	88ba      	ldrh	r2, [r7, #4]
 80011f6:	883b      	ldrh	r3, [r7, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	ddc3      	ble.n	8001188 <API_draw_rectangle+0x80>
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}

08001208 <API_draw_circle>:

void API_draw_circle(uint16_t x_c, uint16_t y_c, uint16_t radius, uint8_t color)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	4604      	mov	r4, r0
 8001210:	4608      	mov	r0, r1
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	4623      	mov	r3, r4
 8001218:	80fb      	strh	r3, [r7, #6]
 800121a:	4603      	mov	r3, r0
 800121c:	80bb      	strh	r3, [r7, #4]
 800121e:	460b      	mov	r3, r1
 8001220:	807b      	strh	r3, [r7, #2]
 8001222:	4613      	mov	r3, r2
 8001224:	707b      	strb	r3, [r7, #1]
    int i;
    int j;
    int rads;
    int rad = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]


    for (j = -radius; j <= radius; j++)
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	425b      	negs	r3, r3
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	e056      	b.n	80012e0 <API_draw_circle+0xd8>
    {
        for (i = -radius; i <= radius; i++)
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	425b      	negs	r3, r3
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e04b      	b.n	80012d2 <API_draw_circle+0xca>
        {
            rads = (pow(i, 2) + pow(j, 2));
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff f982 	bl	8000544 <__aeabi_i2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80012f8 <API_draw_circle+0xf0>
 8001248:	ec43 2b10 	vmov	d0, r2, r3
 800124c:	f00a fa6c 	bl	800b728 <pow>
 8001250:	ec55 4b10 	vmov	r4, r5, d0
 8001254:	6938      	ldr	r0, [r7, #16]
 8001256:	f7ff f975 	bl	8000544 <__aeabi_i2d>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	ed9f 1b26 	vldr	d1, [pc, #152]	; 80012f8 <API_draw_circle+0xf0>
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f00a fa5f 	bl	800b728 <pow>
 800126a:	ec53 2b10 	vmov	r2, r3, d0
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f81b 	bl	80002ac <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fc7b 	bl	8000b78 <__aeabi_d2iz>
 8001282:	4603      	mov	r3, r0
 8001284:	60bb      	str	r3, [r7, #8]
            rad = sqrt(rads);
 8001286:	68b8      	ldr	r0, [r7, #8]
 8001288:	f7ff f95c 	bl	8000544 <__aeabi_i2d>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	ec43 2b10 	vmov	d0, r2, r3
 8001294:	f00a fab8 	bl	800b808 <sqrt>
 8001298:	ec53 2b10 	vmov	r2, r3, d0
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fc6a 	bl	8000b78 <__aeabi_d2iz>
 80012a4:	4603      	mov	r3, r0
 80012a6:	60fb      	str	r3, [r7, #12]

            if (rad == radius)
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d10d      	bne.n	80012cc <API_draw_circle+0xc4>
            {
                UB_VGA_SetPixel((x_c + i), (y_c + j), color);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	4413      	add	r3, r2
 80012b8:	b298      	uxth	r0, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	b29a      	uxth	r2, r3
 80012be:	88bb      	ldrh	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	787a      	ldrb	r2, [r7, #1]
 80012c6:	4619      	mov	r1, r3
 80012c8:	f002 f9d4 	bl	8003674 <UB_VGA_SetPixel>
        for (i = -radius; i <= radius; i++)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	ddaf      	ble.n	800123a <API_draw_circle+0x32>
    for (j = -radius; j <= radius; j++)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	3301      	adds	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dda4      	ble.n	8001232 <API_draw_circle+0x2a>
            }
        }
    }

}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bdb0      	pop	{r4, r5, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	f3af 8000 	nop.w
 80012f8:	00000000 	.word	0x00000000
 80012fc:	40000000 	.word	0x40000000

08001300 <API_draw_text>:
 *
 * @return Returns the last coordinates that the letter was printed
 *
 *****************************************************************************/
int API_draw_text(uint16_t x, uint16_t y, uint8_t kleur, char* tekst, char* fontnaam,uint8_t fontgrootte,char* fontstijl)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b08d      	sub	sp, #52	; 0x34
 8001304:	af04      	add	r7, sp, #16
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	4603      	mov	r3, r0
 800130a:	81fb      	strh	r3, [r7, #14]
 800130c:	460b      	mov	r3, r1
 800130e:	81bb      	strh	r3, [r7, #12]
 8001310:	4613      	mov	r3, r2
 8001312:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint16_t xd = x;
 8001314:	89fb      	ldrh	r3, [r7, #14]
 8001316:	83bb      	strh	r3, [r7, #28]
	uint16_t yd = y;
 8001318:	89bb      	ldrh	r3, [r7, #12]
 800131a:	837b      	strh	r3, [r7, #26]
	uint16_t* cord_p;
	unsigned char letter_style;
	if(strcmp(fontnaam, "arial")  == 0)
 800131c:	4952      	ldr	r1, [pc, #328]	; (8001468 <API_draw_text+0x168>)
 800131e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001320:	f7fe ff56 	bl	80001d0 <strcmp>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <API_draw_text+0x30>
	{
		letter_style = ARIAL;
 800132a:	2301      	movs	r3, #1
 800132c:	74fb      	strb	r3, [r7, #19]
 800132e:	e00e      	b.n	800134e <API_draw_text+0x4e>
	}
	else if(strcmp(fontnaam, "consolas")  == 0)
 8001330:	494e      	ldr	r1, [pc, #312]	; (800146c <API_draw_text+0x16c>)
 8001332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001334:	f7fe ff4c 	bl	80001d0 <strcmp>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <API_draw_text+0x44>
	{
		letter_style = CONSOLAS;
 800133e:	2302      	movs	r3, #2
 8001340:	74fb      	strb	r3, [r7, #19]
 8001342:	e004      	b.n	800134e <API_draw_text+0x4e>
	}
	else
	{
		API_err_handler(UNKNOWN_FONT);
 8001344:	2008      	movs	r0, #8
 8001346:	f000 fdad 	bl	8001ea4 <API_err_handler>
		return 0;
 800134a:	2300      	movs	r3, #0
 800134c:	e088      	b.n	8001460 <API_draw_text+0x160>
	}
	for(i = 0; tekst[i] != '\0'; i++)
 800134e:	2300      	movs	r3, #0
 8001350:	77fb      	strb	r3, [r7, #31]
 8001352:	e07d      	b.n	8001450 <API_draw_text+0x150>
	{
		if(tekst[i] < ASCII_START ||tekst[i] > 127)
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b1f      	cmp	r3, #31
 800135e:	d906      	bls.n	800136e <API_draw_text+0x6e>
 8001360:	7ffb      	ldrb	r3, [r7, #31]
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	da04      	bge.n	8001378 <API_draw_text+0x78>
		{
			API_err_handler(NOT_VALID_CHAR);
 800136e:	2010      	movs	r0, #16
 8001370:	f000 fd98 	bl	8001ea4 <API_err_handler>
			return 0;
 8001374:	2300      	movs	r3, #0
 8001376:	e073      	b.n	8001460 <API_draw_text+0x160>
		}
		switch(fontstijl[0])
 8001378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b76      	cmp	r3, #118	; 0x76
 800137e:	d023      	beq.n	80013c8 <API_draw_text+0xc8>
 8001380:	2b76      	cmp	r3, #118	; 0x76
 8001382:	dc5d      	bgt.n	8001440 <API_draw_text+0x140>
 8001384:	2b63      	cmp	r3, #99	; 0x63
 8001386:	d03d      	beq.n	8001404 <API_draw_text+0x104>
 8001388:	2b6e      	cmp	r3, #110	; 0x6e
 800138a:	d159      	bne.n	8001440 <API_draw_text+0x140>
		{
		case 'n':
			cord_p = draw_normal_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 800138c:	7ffb      	ldrb	r3, [r7, #31]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	7818      	ldrb	r0, [r3, #0]
 8001394:	8b7c      	ldrh	r4, [r7, #26]
 8001396:	8bba      	ldrh	r2, [r7, #28]
 8001398:	7cf9      	ldrb	r1, [r7, #19]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	4623      	mov	r3, r4
 80013aa:	f000 f861 	bl	8001470 <draw_normal_letter>
 80013ae:	6178      	str	r0, [r7, #20]
			if(cord_p == 0)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <API_draw_text+0xba>
				return 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e052      	b.n	8001460 <API_draw_text+0x160>
			xd = cord_p[0];
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	83bb      	strh	r3, [r7, #28]
			yd = cord_p[1];
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	885b      	ldrh	r3, [r3, #2]
 80013c4:	837b      	strh	r3, [r7, #26]
			break;
 80013c6:	e040      	b.n	800144a <API_draw_text+0x14a>
		case 'v':
			cord_p = draw_fat_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	7818      	ldrb	r0, [r3, #0]
 80013d0:	8b7c      	ldrh	r4, [r7, #26]
 80013d2:	8bba      	ldrh	r2, [r7, #28]
 80013d4:	7cf9      	ldrb	r1, [r7, #19]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	7afb      	ldrb	r3, [r7, #11]
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	4623      	mov	r3, r4
 80013e6:	f000 fa5d 	bl	80018a4 <draw_fat_letter>
 80013ea:	6178      	str	r0, [r7, #20]
			if(cord_p == 0)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <API_draw_text+0xf6>
				return 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e034      	b.n	8001460 <API_draw_text+0x160>
			xd = cord_p[0];
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	83bb      	strh	r3, [r7, #28]
			yd = cord_p[1];
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	885b      	ldrh	r3, [r3, #2]
 8001400:	837b      	strh	r3, [r7, #26]
			break;
 8001402:	e022      	b.n	800144a <API_draw_text+0x14a>
		case 'c':
			cord_p = draw_cursive_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	7818      	ldrb	r0, [r3, #0]
 800140c:	8b7c      	ldrh	r4, [r7, #26]
 800140e:	8bba      	ldrh	r2, [r7, #28]
 8001410:	7cf9      	ldrb	r1, [r7, #19]
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	4623      	mov	r3, r4
 8001422:	f000 f929 	bl	8001678 <draw_cursive_letter>
 8001426:	6178      	str	r0, [r7, #20]
			if(cord_p == 0)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <API_draw_text+0x132>
				return 0;
 800142e:	2300      	movs	r3, #0
 8001430:	e016      	b.n	8001460 <API_draw_text+0x160>
			xd = cord_p[0];
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	83bb      	strh	r3, [r7, #28]
			yd = cord_p[1];
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	885b      	ldrh	r3, [r3, #2]
 800143c:	837b      	strh	r3, [r7, #26]
			break;
 800143e:	e004      	b.n	800144a <API_draw_text+0x14a>
		default:
			API_err_handler(UNKNOWN_FONT_STYLE);
 8001440:	200a      	movs	r0, #10
 8001442:	f000 fd2f 	bl	8001ea4 <API_err_handler>
			return 0;
 8001446:	2300      	movs	r3, #0
 8001448:	e00a      	b.n	8001460 <API_draw_text+0x160>
	for(i = 0; tekst[i] != '\0'; i++)
 800144a:	7ffb      	ldrb	r3, [r7, #31]
 800144c:	3301      	adds	r3, #1
 800144e:	77fb      	strb	r3, [r7, #31]
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f47f af7b 	bne.w	8001354 <API_draw_text+0x54>
			break;
		}
	}
	return 0;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3724      	adds	r7, #36	; 0x24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}
 8001468:	0800c5d0 	.word	0x0800c5d0
 800146c:	0800c5d8 	.word	0x0800c5d8

08001470 <draw_normal_letter>:
 *
 * @return Returns the last coordinates that the letter was printed
 *
 *****************************************************************************/
uint16_t * draw_normal_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b08d      	sub	sp, #52	; 0x34
 8001474:	af00      	add	r7, sp, #0
 8001476:	4604      	mov	r4, r0
 8001478:	4608      	mov	r0, r1
 800147a:	4611      	mov	r1, r2
 800147c:	461a      	mov	r2, r3
 800147e:	4623      	mov	r3, r4
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	4603      	mov	r3, r0
 8001484:	71bb      	strb	r3, [r7, #6]
 8001486:	460b      	mov	r3, r1
 8001488:	80bb      	strh	r3, [r7, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	807b      	strh	r3, [r7, #2]
    uint16_t end_cords[2];
    uint16_t begin_x = xd;
 800148e:	88bb      	ldrh	r3, [r7, #4]
 8001490:	85fb      	strh	r3, [r7, #46]	; 0x2e
    int y_counter;
    int width;
    const uint8_t* glyph;
    int start_letter;
	uint8_t bitmap_height;
	if(letter_type == ARIAL)
 8001492:	79bb      	ldrb	r3, [r7, #6]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d134      	bne.n	8001502 <draw_normal_letter+0x92>
	{
		if(fontgrootte == SIZE_1)
 8001498:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800149c:	2b01      	cmp	r3, #1
 800149e:	d113      	bne.n	80014c8 <draw_normal_letter+0x58>
		{
			start_letter= arial_24_glyph_dsc[letter-ASCII_START][1];
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	3b20      	subs	r3, #32
 80014a4:	4a6c      	ldr	r2, [pc, #432]	; (8001658 <draw_normal_letter+0x1e8>)
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
			glyph = &arial_24_glyph_bitmap[start_letter];
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4a6a      	ldr	r2, [pc, #424]	; (800165c <draw_normal_letter+0x1ec>)
 80014b2:	4413      	add	r3, r2
 80014b4:	61fb      	str	r3, [r7, #28]
			width = arial_24_glyph_dsc[letter-ASCII_START][0];
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	3b20      	subs	r3, #32
 80014ba:	4a67      	ldr	r2, [pc, #412]	; (8001658 <draw_normal_letter+0x1e8>)
 80014bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014c0:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 80014c2:	2318      	movs	r3, #24
 80014c4:	76fb      	strb	r3, [r7, #27]
 80014c6:	e054      	b.n	8001572 <draw_normal_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 80014c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d113      	bne.n	80014f8 <draw_normal_letter+0x88>
		{
			start_letter= arial_glyph_dsc[letter-32][1];
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	3b20      	subs	r3, #32
 80014d4:	4a62      	ldr	r2, [pc, #392]	; (8001660 <draw_normal_letter+0x1f0>)
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	4413      	add	r3, r2
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	613b      	str	r3, [r7, #16]
			glyph = &arial_glyph_bitmap[start_letter];
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4a60      	ldr	r2, [pc, #384]	; (8001664 <draw_normal_letter+0x1f4>)
 80014e2:	4413      	add	r3, r2
 80014e4:	61fb      	str	r3, [r7, #28]
			width = arial_glyph_dsc[letter-32][0];
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	3b20      	subs	r3, #32
 80014ea:	4a5d      	ldr	r2, [pc, #372]	; (8001660 <draw_normal_letter+0x1f0>)
 80014ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014f0:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 80014f2:	2330      	movs	r3, #48	; 0x30
 80014f4:	76fb      	strb	r3, [r7, #27]
 80014f6:	e03c      	b.n	8001572 <draw_normal_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 80014f8:	2009      	movs	r0, #9
 80014fa:	f000 fcd3 	bl	8001ea4 <API_err_handler>
			return 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	e0a5      	b.n	800164e <draw_normal_letter+0x1de>
		}
	}
	else if(letter_type == CONSOLAS)
 8001502:	79bb      	ldrb	r3, [r7, #6]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d134      	bne.n	8001572 <draw_normal_letter+0x102>
	{
		if(fontgrootte == SIZE_1)
 8001508:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800150c:	2b01      	cmp	r3, #1
 800150e:	d113      	bne.n	8001538 <draw_normal_letter+0xc8>
		{
			start_letter= consolas_24_glyph_dsc[letter-32][1];
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	3b20      	subs	r3, #32
 8001514:	4a54      	ldr	r2, [pc, #336]	; (8001668 <draw_normal_letter+0x1f8>)
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	4413      	add	r3, r2
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	613b      	str	r3, [r7, #16]
			glyph = &consolas_24_glyph_bitmap[start_letter];
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4a52      	ldr	r2, [pc, #328]	; (800166c <draw_normal_letter+0x1fc>)
 8001522:	4413      	add	r3, r2
 8001524:	61fb      	str	r3, [r7, #28]
			width = consolas_24_glyph_dsc[letter-32][0];
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	3b20      	subs	r3, #32
 800152a:	4a4f      	ldr	r2, [pc, #316]	; (8001668 <draw_normal_letter+0x1f8>)
 800152c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001530:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 8001532:	2318      	movs	r3, #24
 8001534:	76fb      	strb	r3, [r7, #27]
 8001536:	e01c      	b.n	8001572 <draw_normal_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 8001538:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800153c:	2b02      	cmp	r3, #2
 800153e:	d113      	bne.n	8001568 <draw_normal_letter+0xf8>
		{
			start_letter= consolas_glyph_dsc[letter-32][1];
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	3b20      	subs	r3, #32
 8001544:	4a4a      	ldr	r2, [pc, #296]	; (8001670 <draw_normal_letter+0x200>)
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	4413      	add	r3, r2
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
			glyph = &consolas_glyph_bitmap[start_letter];
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4a48      	ldr	r2, [pc, #288]	; (8001674 <draw_normal_letter+0x204>)
 8001552:	4413      	add	r3, r2
 8001554:	61fb      	str	r3, [r7, #28]
			width = consolas_glyph_dsc[letter-32][0];
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3b20      	subs	r3, #32
 800155a:	4a45      	ldr	r2, [pc, #276]	; (8001670 <draw_normal_letter+0x200>)
 800155c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001560:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 8001562:	2330      	movs	r3, #48	; 0x30
 8001564:	76fb      	strb	r3, [r7, #27]
 8001566:	e004      	b.n	8001572 <draw_normal_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 8001568:	2009      	movs	r0, #9
 800156a:	f000 fc9b 	bl	8001ea4 <API_err_handler>
			return 0;
 800156e:	2300      	movs	r3, #0
 8001570:	e06d      	b.n	800164e <draw_normal_letter+0x1de>
		}
	}
	if(xd+width >= VGA_DISPLAY_X)
 8001572:	88ba      	ldrh	r2, [r7, #4]
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	4413      	add	r3, r2
 8001578:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800157c:	db06      	blt.n	800158c <draw_normal_letter+0x11c>
	{
		yd+=bitmap_height;
 800157e:	7efb      	ldrb	r3, [r7, #27]
 8001580:	b29a      	uxth	r2, r3
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	4413      	add	r3, r2
 8001586:	807b      	strh	r3, [r7, #2]
		begin_x=5;//sets x value to the left +5 pixels
 8001588:	2305      	movs	r3, #5
 800158a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
	if(yd >= VGA_DISPLAY_Y)
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	2bef      	cmp	r3, #239	; 0xef
 8001590:	d904      	bls.n	800159c <draw_normal_letter+0x12c>
	{
		API_err_handler(Y_TO_HIGH);
 8001592:	200c      	movs	r0, #12
 8001594:	f000 fc86 	bl	8001ea4 <API_err_handler>
		return 0;
 8001598:	2300      	movs	r3, #0
 800159a:	e058      	b.n	800164e <draw_normal_letter+0x1de>
	}
    if(width%8)
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <draw_normal_letter+0x13c>
    	width += 8;
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	3308      	adds	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
    width = (width/8);
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	da00      	bge.n	80015b4 <draw_normal_letter+0x144>
 80015b2:	3307      	adds	r3, #7
 80015b4:	10db      	asrs	r3, r3, #3
 80015b6:	623b      	str	r3, [r7, #32]


    for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
 80015bc:	e037      	b.n	800162e <draw_normal_letter+0x1be>
    {
        xd = begin_x;
 80015be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015c0:	80bb      	strh	r3, [r7, #4]
        for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 80015c2:	2300      	movs	r3, #0
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c6:	e028      	b.n	800161a <draw_normal_letter+0x1aa>
        {
        	for (int i = 7; i >= 0; i--)
 80015c8:	2307      	movs	r3, #7
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	e01f      	b.n	800160e <draw_normal_letter+0x19e>
        	{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	3301      	adds	r3, #1
 80015d2:	6a3a      	ldr	r2, [r7, #32]
 80015d4:	fb03 f202 	mul.w	r2, r3, r2
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	4413      	add	r3, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	461a      	mov	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa42 f303 	asr.w	r3, r2, r3
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <draw_normal_letter+0x192>
					UB_VGA_SetPixel(xd, yd, kleur);
 80015f4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80015f8:	8879      	ldrh	r1, [r7, #2]
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 f839 	bl	8003674 <UB_VGA_SetPixel>
				xd++;
 8001602:	88bb      	ldrh	r3, [r7, #4]
 8001604:	3301      	adds	r3, #1
 8001606:	80bb      	strh	r3, [r7, #4]
        	for (int i = 7; i >= 0; i--)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3b01      	subs	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	dadc      	bge.n	80015ce <draw_normal_letter+0x15e>
        for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	3301      	adds	r3, #1
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
 800161a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	429a      	cmp	r2, r3
 8001620:	dbd2      	blt.n	80015c8 <draw_normal_letter+0x158>
        	}
        }
        yd++;
 8001622:	887b      	ldrh	r3, [r7, #2]
 8001624:	3301      	adds	r3, #1
 8001626:	807b      	strh	r3, [r7, #2]
    for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	3301      	adds	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
 800162e:	7efb      	ldrb	r3, [r7, #27]
 8001630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001632:	429a      	cmp	r2, r3
 8001634:	dbc3      	blt.n	80015be <draw_normal_letter+0x14e>
    }
    end_cords[0] = xd;
 8001636:	88bb      	ldrh	r3, [r7, #4]
 8001638:	81bb      	strh	r3, [r7, #12]
    end_cords[1] = yd-bitmap_height;
 800163a:	7efb      	ldrb	r3, [r7, #27]
 800163c:	b29b      	uxth	r3, r3
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	b29b      	uxth	r3, r3
 8001644:	81fb      	strh	r3, [r7, #14]
    cord_p = end_cords;
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	64bb      	str	r3, [r7, #72]	; 0x48
    return cord_p;
 800164c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800164e:	4618      	mov	r0, r3
 8001650:	3734      	adds	r7, #52	; 0x34
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
 8001656:	bf00      	nop
 8001658:	080112ac 	.word	0x080112ac
 800165c:	08010334 	.word	0x08010334
 8001660:	0801003c 	.word	0x0801003c
 8001664:	0800ccdc 	.word	0x0800ccdc
 8001668:	08015cec 	.word	0x08015cec
 800166c:	08014c9c 	.word	0x08014c9c
 8001670:	0801499c 	.word	0x0801499c
 8001674:	080115ac 	.word	0x080115ac

08001678 <draw_cursive_letter>:
 *
 * @return Returns the last coordinates that the letter was printed
 *
 *****************************************************************************/
uint16_t * draw_cursive_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b08d      	sub	sp, #52	; 0x34
 800167c:	af00      	add	r7, sp, #0
 800167e:	4604      	mov	r4, r0
 8001680:	4608      	mov	r0, r1
 8001682:	4611      	mov	r1, r2
 8001684:	461a      	mov	r2, r3
 8001686:	4623      	mov	r3, r4
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	4603      	mov	r3, r0
 800168c:	71bb      	strb	r3, [r7, #6]
 800168e:	460b      	mov	r3, r1
 8001690:	80bb      	strh	r3, [r7, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	807b      	strh	r3, [r7, #2]
	uint16_t end_cords[2];
	uint16_t begin_x = xd;
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int width;
	const uint8_t* glyph;
	int start_letter;
	int angle;
	uint8_t bitmap_height;
	if(letter_type == ARIAL)
 800169a:	79bb      	ldrb	r3, [r7, #6]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d134      	bne.n	800170a <draw_cursive_letter+0x92>
	{
		if(fontgrootte == SIZE_1)
 80016a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d113      	bne.n	80016d0 <draw_cursive_letter+0x58>
		{
			start_letter= arial_24_glyph_dsc[letter-32][1];
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	3b20      	subs	r3, #32
 80016ac:	4a75      	ldr	r2, [pc, #468]	; (8001884 <draw_cursive_letter+0x20c>)
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4413      	add	r3, r2
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
			glyph = &arial_24_glyph_bitmap[start_letter];
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4a73      	ldr	r2, [pc, #460]	; (8001888 <draw_cursive_letter+0x210>)
 80016ba:	4413      	add	r3, r2
 80016bc:	61fb      	str	r3, [r7, #28]
			width = arial_24_glyph_dsc[letter-32][0];
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	3b20      	subs	r3, #32
 80016c2:	4a70      	ldr	r2, [pc, #448]	; (8001884 <draw_cursive_letter+0x20c>)
 80016c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016c8:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 80016ca:	2318      	movs	r3, #24
 80016cc:	75fb      	strb	r3, [r7, #23]
 80016ce:	e054      	b.n	800177a <draw_cursive_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 80016d0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d113      	bne.n	8001700 <draw_cursive_letter+0x88>
		{
			start_letter= arial_glyph_dsc[letter-32][1];
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	3b20      	subs	r3, #32
 80016dc:	4a6b      	ldr	r2, [pc, #428]	; (800188c <draw_cursive_letter+0x214>)
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	4413      	add	r3, r2
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	60fb      	str	r3, [r7, #12]
			glyph = &arial_glyph_bitmap[start_letter];
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4a69      	ldr	r2, [pc, #420]	; (8001890 <draw_cursive_letter+0x218>)
 80016ea:	4413      	add	r3, r2
 80016ec:	61fb      	str	r3, [r7, #28]
			width = arial_glyph_dsc[letter-32][0];
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	3b20      	subs	r3, #32
 80016f2:	4a66      	ldr	r2, [pc, #408]	; (800188c <draw_cursive_letter+0x214>)
 80016f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016f8:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 80016fa:	2330      	movs	r3, #48	; 0x30
 80016fc:	75fb      	strb	r3, [r7, #23]
 80016fe:	e03c      	b.n	800177a <draw_cursive_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 8001700:	2009      	movs	r0, #9
 8001702:	f000 fbcf 	bl	8001ea4 <API_err_handler>
			return 0;
 8001706:	2300      	movs	r3, #0
 8001708:	e0b8      	b.n	800187c <draw_cursive_letter+0x204>
		}
	}
	else if(letter_type == CONSOLAS)
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d134      	bne.n	800177a <draw_cursive_letter+0x102>
	{
		if(fontgrootte == SIZE_1)
 8001710:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001714:	2b01      	cmp	r3, #1
 8001716:	d113      	bne.n	8001740 <draw_cursive_letter+0xc8>
		{
			start_letter= consolas_24_glyph_dsc[letter-32][1];
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	3b20      	subs	r3, #32
 800171c:	4a5d      	ldr	r2, [pc, #372]	; (8001894 <draw_cursive_letter+0x21c>)
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	4413      	add	r3, r2
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	60fb      	str	r3, [r7, #12]
			glyph = &consolas_24_glyph_bitmap[start_letter];
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4a5b      	ldr	r2, [pc, #364]	; (8001898 <draw_cursive_letter+0x220>)
 800172a:	4413      	add	r3, r2
 800172c:	61fb      	str	r3, [r7, #28]
			width = consolas_24_glyph_dsc[letter-32][0];
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	3b20      	subs	r3, #32
 8001732:	4a58      	ldr	r2, [pc, #352]	; (8001894 <draw_cursive_letter+0x21c>)
 8001734:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001738:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 800173a:	2318      	movs	r3, #24
 800173c:	75fb      	strb	r3, [r7, #23]
 800173e:	e01c      	b.n	800177a <draw_cursive_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 8001740:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001744:	2b02      	cmp	r3, #2
 8001746:	d113      	bne.n	8001770 <draw_cursive_letter+0xf8>
		{
			start_letter= consolas_glyph_dsc[letter-32][1];
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	3b20      	subs	r3, #32
 800174c:	4a53      	ldr	r2, [pc, #332]	; (800189c <draw_cursive_letter+0x224>)
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4413      	add	r3, r2
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	60fb      	str	r3, [r7, #12]
			glyph = &consolas_glyph_bitmap[start_letter];
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	4a51      	ldr	r2, [pc, #324]	; (80018a0 <draw_cursive_letter+0x228>)
 800175a:	4413      	add	r3, r2
 800175c:	61fb      	str	r3, [r7, #28]
			width = consolas_glyph_dsc[letter-32][0];
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	3b20      	subs	r3, #32
 8001762:	4a4e      	ldr	r2, [pc, #312]	; (800189c <draw_cursive_letter+0x224>)
 8001764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001768:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 800176a:	2330      	movs	r3, #48	; 0x30
 800176c:	75fb      	strb	r3, [r7, #23]
 800176e:	e004      	b.n	800177a <draw_cursive_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 8001770:	2009      	movs	r0, #9
 8001772:	f000 fb97 	bl	8001ea4 <API_err_handler>
			return 0;
 8001776:	2300      	movs	r3, #0
 8001778:	e080      	b.n	800187c <draw_cursive_letter+0x204>
		}
	}
	if(xd+width*2 >= VGA_DISPLAY_X)
 800177a:	88ba      	ldrh	r2, [r7, #4]
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001786:	db06      	blt.n	8001796 <draw_cursive_letter+0x11e>
	{
		yd+=bitmap_height;
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	b29a      	uxth	r2, r3
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	4413      	add	r3, r2
 8001790:	807b      	strh	r3, [r7, #2]
		begin_x=5;//sets x value to the left +5 pixels
 8001792:	2305      	movs	r3, #5
 8001794:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
	if(yd >= VGA_DISPLAY_Y)
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	2bef      	cmp	r3, #239	; 0xef
 800179a:	d904      	bls.n	80017a6 <draw_cursive_letter+0x12e>
	{
		API_err_handler(Y_TO_HIGH);
 800179c:	200c      	movs	r0, #12
 800179e:	f000 fb81 	bl	8001ea4 <API_err_handler>
		return 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e06a      	b.n	800187c <draw_cursive_letter+0x204>
	}
	if(width%8)
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d002      	beq.n	80017b6 <draw_cursive_letter+0x13e>
		width += 8;
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	3308      	adds	r3, #8
 80017b4:	623b      	str	r3, [r7, #32]
	angle = width; //sets angle offset for cursive letter
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	61bb      	str	r3, [r7, #24]
	if(fontgrootte == SIZE_1)
 80017ba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d104      	bne.n	80017cc <draw_cursive_letter+0x154>
		angle = angle/2;
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	0fda      	lsrs	r2, r3, #31
 80017c6:	4413      	add	r3, r2
 80017c8:	105b      	asrs	r3, r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
	width = (width/8);
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da00      	bge.n	80017d4 <draw_cursive_letter+0x15c>
 80017d2:	3307      	adds	r3, #7
 80017d4:	10db      	asrs	r3, r3, #3
 80017d6:	623b      	str	r3, [r7, #32]
	for(y_counter = 0; y_counter < bitmap_height; y_counter++)
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
 80017dc:	e03e      	b.n	800185c <draw_cursive_letter+0x1e4>
	{
		xd = begin_x;
 80017de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017e0:	80bb      	strh	r3, [r7, #4]
		for(x_counter = 0; x_counter < width; x_counter++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017e6:	e02c      	b.n	8001842 <draw_cursive_letter+0x1ca>
		{
			for (int i = 7; i >= 0; i--)
 80017e8:	2307      	movs	r3, #7
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	e023      	b.n	8001836 <draw_cursive_letter+0x1be>
			{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	3301      	adds	r3, #1
 80017f2:	6a3a      	ldr	r2, [r7, #32]
 80017f4:	fb03 f202 	mul.w	r2, r3, r2
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	4413      	add	r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	fa42 f303 	asr.w	r3, r2, r3
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00a      	beq.n	800182a <draw_cursive_letter+0x1b2>
					UB_VGA_SetPixel(xd+angle, yd, kleur);
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	b29a      	uxth	r2, r3
 8001818:	88bb      	ldrh	r3, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001822:	8879      	ldrh	r1, [r7, #2]
 8001824:	4618      	mov	r0, r3
 8001826:	f001 ff25 	bl	8003674 <UB_VGA_SetPixel>
				xd++;
 800182a:	88bb      	ldrh	r3, [r7, #4]
 800182c:	3301      	adds	r3, #1
 800182e:	80bb      	strh	r3, [r7, #4]
			for (int i = 7; i >= 0; i--)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	3b01      	subs	r3, #1
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	dad8      	bge.n	80017ee <draw_cursive_letter+0x176>
		for(x_counter = 0; x_counter < width; x_counter++)
 800183c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183e:	3301      	adds	r3, #1
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
 8001842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	429a      	cmp	r2, r3
 8001848:	dbce      	blt.n	80017e8 <draw_cursive_letter+0x170>
			}
		}
		angle--; //decreases offset for each y layer to create an angle
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	3b01      	subs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
		yd++;
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	3301      	adds	r3, #1
 8001854:	807b      	strh	r3, [r7, #2]
	for(y_counter = 0; y_counter < bitmap_height; y_counter++)
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	3301      	adds	r3, #1
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	429a      	cmp	r2, r3
 8001862:	dbbc      	blt.n	80017de <draw_cursive_letter+0x166>
	}
	end_cords[0] = xd;
 8001864:	88bb      	ldrh	r3, [r7, #4]
 8001866:	813b      	strh	r3, [r7, #8]
    end_cords[1] = yd-bitmap_height;
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	b29b      	uxth	r3, r3
 800186c:	887a      	ldrh	r2, [r7, #2]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	817b      	strh	r3, [r7, #10]
    cord_p = end_cords;
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	64bb      	str	r3, [r7, #72]	; 0x48
    return cord_p;
 800187a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800187c:	4618      	mov	r0, r3
 800187e:	3734      	adds	r7, #52	; 0x34
 8001880:	46bd      	mov	sp, r7
 8001882:	bd90      	pop	{r4, r7, pc}
 8001884:	080112ac 	.word	0x080112ac
 8001888:	08010334 	.word	0x08010334
 800188c:	0801003c 	.word	0x0801003c
 8001890:	0800ccdc 	.word	0x0800ccdc
 8001894:	08015cec 	.word	0x08015cec
 8001898:	08014c9c 	.word	0x08014c9c
 800189c:	0801499c 	.word	0x0801499c
 80018a0:	080115ac 	.word	0x080115ac

080018a4 <draw_fat_letter>:
 *
 * @return Returns the last coordinates that the letter was printed
 *
 *****************************************************************************/
uint16_t * draw_fat_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b08d      	sub	sp, #52	; 0x34
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4604      	mov	r4, r0
 80018ac:	4608      	mov	r0, r1
 80018ae:	4611      	mov	r1, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4623      	mov	r3, r4
 80018b4:	71fb      	strb	r3, [r7, #7]
 80018b6:	4603      	mov	r3, r0
 80018b8:	71bb      	strb	r3, [r7, #6]
 80018ba:	460b      	mov	r3, r1
 80018bc:	80bb      	strh	r3, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	807b      	strh	r3, [r7, #2]
	uint16_t end_cords[2];
	uint16_t begin_x = xd;
 80018c2:	88bb      	ldrh	r3, [r7, #4]
 80018c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int width;
	const uint8_t* glyph;
	int start_letter;
	uint8_t bitmap_height;

	if(letter_type == ARIAL)
 80018c6:	79bb      	ldrb	r3, [r7, #6]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d134      	bne.n	8001936 <draw_fat_letter+0x92>
	{
		if(fontgrootte == SIZE_1)
 80018cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d113      	bne.n	80018fc <draw_fat_letter+0x58>
		{
			start_letter= arial_24_glyph_dsc[letter-32][1];
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	3b20      	subs	r3, #32
 80018d8:	4a7a      	ldr	r2, [pc, #488]	; (8001ac4 <draw_fat_letter+0x220>)
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4413      	add	r3, r2
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
			glyph = &arial_24_glyph_bitmap[start_letter];
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4a78      	ldr	r2, [pc, #480]	; (8001ac8 <draw_fat_letter+0x224>)
 80018e6:	4413      	add	r3, r2
 80018e8:	61fb      	str	r3, [r7, #28]
			width = arial_24_glyph_dsc[letter-32][0];
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	3b20      	subs	r3, #32
 80018ee:	4a75      	ldr	r2, [pc, #468]	; (8001ac4 <draw_fat_letter+0x220>)
 80018f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018f4:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 80018f6:	2318      	movs	r3, #24
 80018f8:	76fb      	strb	r3, [r7, #27]
 80018fa:	e054      	b.n	80019a6 <draw_fat_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 80018fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001900:	2b02      	cmp	r3, #2
 8001902:	d113      	bne.n	800192c <draw_fat_letter+0x88>
		{
			start_letter= arial_glyph_dsc[letter-32][1];
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	3b20      	subs	r3, #32
 8001908:	4a70      	ldr	r2, [pc, #448]	; (8001acc <draw_fat_letter+0x228>)
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4413      	add	r3, r2
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
			glyph = &arial_glyph_bitmap[start_letter];
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4a6e      	ldr	r2, [pc, #440]	; (8001ad0 <draw_fat_letter+0x22c>)
 8001916:	4413      	add	r3, r2
 8001918:	61fb      	str	r3, [r7, #28]
			width = arial_glyph_dsc[letter-32][0];
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	3b20      	subs	r3, #32
 800191e:	4a6b      	ldr	r2, [pc, #428]	; (8001acc <draw_fat_letter+0x228>)
 8001920:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001924:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 8001926:	2330      	movs	r3, #48	; 0x30
 8001928:	76fb      	strb	r3, [r7, #27]
 800192a:	e03c      	b.n	80019a6 <draw_fat_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 800192c:	2009      	movs	r0, #9
 800192e:	f000 fab9 	bl	8001ea4 <API_err_handler>
			return 0;
 8001932:	2300      	movs	r3, #0
 8001934:	e0c2      	b.n	8001abc <draw_fat_letter+0x218>
		}
	}
	else if(letter_type == CONSOLAS)
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d134      	bne.n	80019a6 <draw_fat_letter+0x102>
	{
		if(fontgrootte == SIZE_1)
 800193c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001940:	2b01      	cmp	r3, #1
 8001942:	d113      	bne.n	800196c <draw_fat_letter+0xc8>
		{
			start_letter= consolas_24_glyph_dsc[letter-32][1];
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	3b20      	subs	r3, #32
 8001948:	4a62      	ldr	r2, [pc, #392]	; (8001ad4 <draw_fat_letter+0x230>)
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4413      	add	r3, r2
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	613b      	str	r3, [r7, #16]
			glyph = &consolas_24_glyph_bitmap[start_letter];
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	4a60      	ldr	r2, [pc, #384]	; (8001ad8 <draw_fat_letter+0x234>)
 8001956:	4413      	add	r3, r2
 8001958:	61fb      	str	r3, [r7, #28]
			width = consolas_24_glyph_dsc[letter-32][0];
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	3b20      	subs	r3, #32
 800195e:	4a5d      	ldr	r2, [pc, #372]	; (8001ad4 <draw_fat_letter+0x230>)
 8001960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001964:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 8001966:	2318      	movs	r3, #24
 8001968:	76fb      	strb	r3, [r7, #27]
 800196a:	e01c      	b.n	80019a6 <draw_fat_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 800196c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001970:	2b02      	cmp	r3, #2
 8001972:	d113      	bne.n	800199c <draw_fat_letter+0xf8>
		{
			start_letter= consolas_glyph_dsc[letter-32][1];
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	3b20      	subs	r3, #32
 8001978:	4a58      	ldr	r2, [pc, #352]	; (8001adc <draw_fat_letter+0x238>)
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	613b      	str	r3, [r7, #16]
			glyph = &consolas_glyph_bitmap[start_letter];
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4a56      	ldr	r2, [pc, #344]	; (8001ae0 <draw_fat_letter+0x23c>)
 8001986:	4413      	add	r3, r2
 8001988:	61fb      	str	r3, [r7, #28]
			width = consolas_glyph_dsc[letter-32][0];
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	3b20      	subs	r3, #32
 800198e:	4a53      	ldr	r2, [pc, #332]	; (8001adc <draw_fat_letter+0x238>)
 8001990:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001994:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 8001996:	2330      	movs	r3, #48	; 0x30
 8001998:	76fb      	strb	r3, [r7, #27]
 800199a:	e004      	b.n	80019a6 <draw_fat_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 800199c:	2009      	movs	r0, #9
 800199e:	f000 fa81 	bl	8001ea4 <API_err_handler>
			return 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e08a      	b.n	8001abc <draw_fat_letter+0x218>
		}
	}
	if(xd+width+THICKNESS >= VGA_DISPLAY_X)
 80019a6:	88ba      	ldrh	r2, [r7, #4]
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	4413      	add	r3, r2
 80019ac:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80019b0:	dd06      	ble.n	80019c0 <draw_fat_letter+0x11c>
	{
		yd+=bitmap_height;
 80019b2:	7efb      	ldrb	r3, [r7, #27]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	4413      	add	r3, r2
 80019ba:	807b      	strh	r3, [r7, #2]
		begin_x=5;//sets x value to the left +5 pixels
 80019bc:	2305      	movs	r3, #5
 80019be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
	if(yd >= VGA_DISPLAY_Y)
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	2bef      	cmp	r3, #239	; 0xef
 80019c4:	d904      	bls.n	80019d0 <draw_fat_letter+0x12c>
	{
		API_err_handler(Y_TO_HIGH);
 80019c6:	200c      	movs	r0, #12
 80019c8:	f000 fa6c 	bl	8001ea4 <API_err_handler>
		return 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	e075      	b.n	8001abc <draw_fat_letter+0x218>
	}
	if(width%8)
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <draw_fat_letter+0x13c>
		width += 8;
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	3308      	adds	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
	width = (width/8);
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	da00      	bge.n	80019e8 <draw_fat_letter+0x144>
 80019e6:	3307      	adds	r3, #7
 80019e8:	10db      	asrs	r3, r3, #3
 80019ea:	623b      	str	r3, [r7, #32]
	if(width == 0)
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d102      	bne.n	80019f8 <draw_fat_letter+0x154>
		width++;
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	3301      	adds	r3, #1
 80019f6:	623b      	str	r3, [r7, #32]

	for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	e04e      	b.n	8001a9c <draw_fat_letter+0x1f8>
	{
		xd = begin_x;
 80019fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a00:	80bb      	strh	r3, [r7, #4]
		for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8001a02:	2300      	movs	r3, #0
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a06:	e03f      	b.n	8001a88 <draw_fat_letter+0x1e4>
		{
			for (int i = 7; i >= 0; i--)
 8001a08:	2307      	movs	r3, #7
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e036      	b.n	8001a7c <draw_fat_letter+0x1d8>
			{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	6a3a      	ldr	r2, [r7, #32]
 8001a14:	fb03 f202 	mul.w	r2, r3, r2
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	4413      	add	r3, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	fa42 f303 	asr.w	r3, r2, r3
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01d      	beq.n	8001a70 <draw_fat_letter+0x1cc>
				{
					UB_VGA_SetPixel(xd, yd, kleur);
 8001a34:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001a38:	8879      	ldrh	r1, [r7, #2]
 8001a3a:	88bb      	ldrh	r3, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 fe19 	bl	8003674 <UB_VGA_SetPixel>
					xd++;
 8001a42:	88bb      	ldrh	r3, [r7, #4]
 8001a44:	3301      	adds	r3, #1
 8001a46:	80bb      	strh	r3, [r7, #4]
					UB_VGA_SetPixel(xd, yd, kleur);
 8001a48:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001a4c:	8879      	ldrh	r1, [r7, #2]
 8001a4e:	88bb      	ldrh	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 fe0f 	bl	8003674 <UB_VGA_SetPixel>
					xd++;
 8001a56:	88bb      	ldrh	r3, [r7, #4]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	80bb      	strh	r3, [r7, #4]
					UB_VGA_SetPixel(xd, yd, kleur);
 8001a5c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001a60:	8879      	ldrh	r1, [r7, #2]
 8001a62:	88bb      	ldrh	r3, [r7, #4]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 fe05 	bl	8003674 <UB_VGA_SetPixel>
					xd-=2;
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	3b02      	subs	r3, #2
 8001a6e:	80bb      	strh	r3, [r7, #4]
				}
				xd++;
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	3301      	adds	r3, #1
 8001a74:	80bb      	strh	r3, [r7, #4]
			for (int i = 7; i >= 0; i--)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	dac5      	bge.n	8001a0e <draw_fat_letter+0x16a>
		for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	3301      	adds	r3, #1
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbbb      	blt.n	8001a08 <draw_fat_letter+0x164>
			}
		}
		yd++;
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	3301      	adds	r3, #1
 8001a94:	807b      	strh	r3, [r7, #2]
	for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	3301      	adds	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9c:	7efb      	ldrb	r3, [r7, #27]
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbac      	blt.n	80019fe <draw_fat_letter+0x15a>
	}
	end_cords[0] = xd;
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	81bb      	strh	r3, [r7, #12]
    end_cords[1] = yd-bitmap_height;
 8001aa8:	7efb      	ldrb	r3, [r7, #27]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	887a      	ldrh	r2, [r7, #2]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	81fb      	strh	r3, [r7, #14]
    cord_p = end_cords;
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	64bb      	str	r3, [r7, #72]	; 0x48
	return cord_p;
 8001aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3734      	adds	r7, #52	; 0x34
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}
 8001ac4:	080112ac 	.word	0x080112ac
 8001ac8:	08010334 	.word	0x08010334
 8001acc:	0801003c 	.word	0x0801003c
 8001ad0:	0800ccdc 	.word	0x0800ccdc
 8001ad4:	08015cec 	.word	0x08015cec
 8001ad8:	08014c9c 	.word	0x08014c9c
 8001adc:	0801499c 	.word	0x0801499c
 8001ae0:	080115ac 	.word	0x080115ac

08001ae4 <API_read_bitmap_SD>:
 *
 * @return Returns an error if error or returns nothing
 *
 *****************************************************************************/
int API_read_bitmap_SD(char *nr, uint16_t x_lup, uint16_t y_lup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001af0:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001af4:	6018      	str	r0, [r3, #0]
 8001af6:	4608      	mov	r0, r1
 8001af8:	4611      	mov	r1, r2
 8001afa:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001afe:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8001b02:	4602      	mov	r2, r0
 8001b04:	801a      	strh	r2, [r3, #0]
 8001b06:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b0a:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001b0e:	460a      	mov	r2, r1
 8001b10:	801a      	strh	r2, [r3, #0]

	// Fatfs variables
	FATFS FatFs;
    FIL fil; 		//File handle
    FRESULT fres; 	//Result after operations
    UINT SizeofBuffer = 30;
 8001b12:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b16:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001b1a:	221e      	movs	r2, #30
 8001b1c:	601a      	str	r2, [r3, #0]

    //Reading buffer
    uint k = 0; // kijken welk variable we zijn
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

    //Position vga
    uint16_t xp,yp,xp2,yp2;

    xp2 = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
    yp2 = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac

    //Information from file system
    unsigned int Height,Width;

    //Creating decimal shift register
	unsigned int ColourFile = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	unsigned int DecimalshiftBuff = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498

	unsigned char i;

	char readBuf[30];

	TCHAR File[] = "00.txt";
 8001b3c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b40:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001b44:	4a8a      	ldr	r2, [pc, #552]	; (8001d70 <API_read_bitmap_SD+0x28c>)
 8001b46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b4a:	6018      	str	r0, [r3, #0]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	8019      	strh	r1, [r3, #0]
 8001b50:	3302      	adds	r3, #2
 8001b52:	0c0a      	lsrs	r2, r1, #16
 8001b54:	701a      	strb	r2, [r3, #0]

	File[0] = nr[0];		// checked
 8001b56:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b5a:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b66:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001b6a:	701a      	strb	r2, [r3, #0]
	File[1] = nr[1];
 8001b6c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b70:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	785a      	ldrb	r2, [r3, #1]
 8001b78:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b7c:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001b80:	705a      	strb	r2, [r3, #1]

	xp = x_lup;
 8001b82:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b86:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
	yp = y_lup;
 8001b90:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b94:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0


    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001b9e:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4973      	ldr	r1, [pc, #460]	; (8001d74 <API_read_bitmap_SD+0x290>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f008 f8d4 	bl	8009d54 <f_mount>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK)
 8001bb2:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d004      	beq.n	8001bc4 <API_read_bitmap_SD+0xe0>
    {
    	API_err_handler(NO_SD_CARD_DETECTED);
 8001bba:	200e      	movs	r0, #14
 8001bbc:	f000 f972 	bl	8001ea4 <API_err_handler>
    	return 0; //error
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e0cf      	b.n	8001d64 <API_read_bitmap_SD+0x280>
    }

	fres = f_open(&fil, File, FA_READ);
 8001bc4:	f107 0108 	add.w	r1, r7, #8
 8001bc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f008 f906 	bl	8009de0 <f_open>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	if (fres != FR_OK)
 8001bda:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 80ad 	beq.w	8001d3e <API_read_bitmap_SD+0x25a>
	{
		API_err_handler(UNKNOWN_BITMAP);
 8001be4:	2007      	movs	r0, #7
 8001be6:	f000 f95d 	bl	8001ea4 <API_err_handler>
		return 0; //error
 8001bea:	2300      	movs	r3, #0
 8001bec:	e0ba      	b.n	8001d64 <API_read_bitmap_SD+0x280>
	}


	while (SizeofBuffer == 30)
	{
		f_read(&fil,(void*)readBuf, 30, &SizeofBuffer);
 8001bee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bf2:	f107 0110 	add.w	r1, r7, #16
 8001bf6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001bfa:	221e      	movs	r2, #30
 8001bfc:	f008 faae 	bl	800a15c <f_read>
		for (i=0; i<SizeofBuffer; i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 8001c06:	e090      	b.n	8001d2a <API_read_bitmap_SD+0x246>
		{

			if (readBuf[i] != 32)
 8001c08:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001c0c:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8001c10:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8001c14:	5cd3      	ldrb	r3, [r2, r3]
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	d019      	beq.n	8001c4e <API_read_bitmap_SD+0x16a>
			{
				DecimalshiftBuff = readBuf[i]-'0';
 8001c1a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001c1e:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8001c22:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8001c26:	5cd3      	ldrb	r3, [r2, r3]
 8001c28:	3b30      	subs	r3, #48	; 0x30
 8001c2a:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
				ColourFile *= 10;
 8001c2e:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
				ColourFile += DecimalshiftBuff;
 8001c3e:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001c42:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8001c46:	4413      	add	r3, r2
 8001c48:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8001c4c:	e068      	b.n	8001d20 <API_read_bitmap_SD+0x23c>
			}

			else if(readBuf[i] == 32)
 8001c4e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001c52:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8001c56:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d15f      	bne.n	8001d20 <API_read_bitmap_SD+0x23c>
			{
				if (k > 1)
 8001c60:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d942      	bls.n	8001cee <API_read_bitmap_SD+0x20a>
				{
					if (xp < VGA_DISPLAY_X && yp < VGA_DISPLAY_Y)
 8001c68:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001c6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c70:	d212      	bcs.n	8001c98 <API_read_bitmap_SD+0x1b4>
 8001c72:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8001c76:	2bef      	cmp	r3, #239	; 0xef
 8001c78:	d80e      	bhi.n	8001c98 <API_read_bitmap_SD+0x1b4>
					{
						VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = ColourFile;
 8001c7a:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	; 0x4b0
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	441a      	add	r2, r3
 8001c88:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001c92:	b2d1      	uxtb	r1, r2
 8001c94:	4a38      	ldr	r2, [pc, #224]	; (8001d78 <API_read_bitmap_SD+0x294>)
 8001c96:	54d1      	strb	r1, [r2, r3]
					}
					xp++;
 8001c98:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
					xp2++;
 8001ca2:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					if (xp2 >= Width)
 8001cac:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8001cb0:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d813      	bhi.n	8001ce0 <API_read_bitmap_SD+0x1fc>
					{
						yp++;
 8001cb8:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0
						yp2++;
 8001cc2:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac
						xp = x_lup;
 8001ccc:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001cd0:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
						xp2 = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					}
					if (yp2 == Height)
 8001ce0:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8001ce4:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d111      	bne.n	8001d10 <API_read_bitmap_SD+0x22c>
					{
						break;
 8001cec:	e027      	b.n	8001d3e <API_read_bitmap_SD+0x25a>
					}
				}
				else if (k == 0) // Hoogte van de bit map
 8001cee:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d104      	bne.n	8001d00 <API_read_bitmap_SD+0x21c>
				{
					Height = ColourFile;
 8001cf6:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001cfa:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8001cfe:	e007      	b.n	8001d10 <API_read_bitmap_SD+0x22c>
				}
				else if (k == 1)
 8001d00:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d103      	bne.n	8001d10 <API_read_bitmap_SD+0x22c>
				{
					Width = ColourFile;
 8001d08:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001d0c:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
				}

				k++;
 8001d10:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001d14:	3301      	adds	r3, #1
 8001d16:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
				ColourFile = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
		for (i=0; i<SizeofBuffer; i++)
 8001d20:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001d24:	3301      	adds	r3, #1
 8001d26:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 8001d2a:	f897 249f 	ldrb.w	r2, [r7, #1183]	; 0x49f
 8001d2e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001d32:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f4ff af65 	bcc.w	8001c08 <API_read_bitmap_SD+0x124>
	while (SizeofBuffer == 30)
 8001d3e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001d42:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b1e      	cmp	r3, #30
 8001d4a:	f43f af50 	beq.w	8001bee <API_read_bitmap_SD+0x10a>
			}

		}
	}

	f_close(&fil);
 8001d4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d52:	4618      	mov	r0, r3
 8001d54:	f008 fbbf 	bl	800a4d6 <f_close>

    f_mount(NULL, "", 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	4906      	ldr	r1, [pc, #24]	; (8001d74 <API_read_bitmap_SD+0x290>)
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f007 fff9 	bl	8009d54 <f_mount>

	return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	f507 6797 	add.w	r7, r7, #1208	; 0x4b8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	0800c5e8 	.word	0x0800c5e8
 8001d74:	0800c5e4 	.word	0x0800c5e4
 8001d78:	20000a30 	.word	0x20000a30

08001d7c <API_blur_screen>:
 *
 * @return Returns an error if error or returns nothing
 *
 *****************************************************************************/
int API_blur_screen()
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
	uint16_t xp, yp;
	uint16_t xp_2, yp_2;
	uint16_t sum = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	81bb      	strh	r3, [r7, #12]
 8001d8e:	e06d      	b.n	8001e6c <API_blur_screen+0xf0>
	{
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 8001d90:	2300      	movs	r3, #0
 8001d92:	81fb      	strh	r3, [r7, #14]
 8001d94:	e063      	b.n	8001e5e <API_blur_screen+0xe2>
	  {
	    sum = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	80fb      	strh	r3, [r7, #6]
	    i = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001d9e:	89bb      	ldrh	r3, [r7, #12]
 8001da0:	813b      	strh	r3, [r7, #8]
 8001da2:	e022      	b.n	8001dea <API_blur_screen+0x6e>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001da4:	89fb      	ldrh	r3, [r7, #14]
 8001da6:	817b      	strh	r3, [r7, #10]
 8001da8:	e013      	b.n	8001dd2 <API_blur_screen+0x56>
	      {
	        sum += VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2];
 8001daa:	893a      	ldrh	r2, [r7, #8]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	019b      	lsls	r3, r3, #6
 8001db4:	441a      	add	r2, r3
 8001db6:	897b      	ldrh	r3, [r7, #10]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a31      	ldr	r2, [pc, #196]	; (8001e80 <API_blur_screen+0x104>)
 8001dbc:	5cd3      	ldrb	r3, [r2, r3]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	80fb      	strh	r3, [r7, #6]
	        i++;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	603b      	str	r3, [r7, #0]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001dcc:	897b      	ldrh	r3, [r7, #10]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	817b      	strh	r3, [r7, #10]
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	1c9a      	adds	r2, r3, #2
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	db03      	blt.n	8001de4 <API_blur_screen+0x68>
 8001ddc:	897b      	ldrh	r3, [r7, #10]
 8001dde:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001de2:	d3e2      	bcc.n	8001daa <API_blur_screen+0x2e>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001de4:	893b      	ldrh	r3, [r7, #8]
 8001de6:	3301      	adds	r3, #1
 8001de8:	813b      	strh	r3, [r7, #8]
 8001dea:	89bb      	ldrh	r3, [r7, #12]
 8001dec:	1c9a      	adds	r2, r3, #2
 8001dee:	893b      	ldrh	r3, [r7, #8]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	db02      	blt.n	8001dfa <API_blur_screen+0x7e>
 8001df4:	893b      	ldrh	r3, [r7, #8]
 8001df6:	2bef      	cmp	r3, #239	; 0xef
 8001df8:	d9d4      	bls.n	8001da4 <API_blur_screen+0x28>
	      }
	    }
	    sum /= 9;
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <API_blur_screen+0x108>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	085b      	lsrs	r3, r3, #1
 8001e04:	80fb      	strh	r3, [r7, #6]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001e06:	89bb      	ldrh	r3, [r7, #12]
 8001e08:	813b      	strh	r3, [r7, #8]
 8001e0a:	e01d      	b.n	8001e48 <API_blur_screen+0xcc>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001e0c:	89fb      	ldrh	r3, [r7, #14]
 8001e0e:	817b      	strh	r3, [r7, #10]
 8001e10:	e00e      	b.n	8001e30 <API_blur_screen+0xb4>
	      {
	        VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2] = sum;
 8001e12:	893a      	ldrh	r2, [r7, #8]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	019b      	lsls	r3, r3, #6
 8001e1c:	441a      	add	r2, r3
 8001e1e:	897b      	ldrh	r3, [r7, #10]
 8001e20:	4413      	add	r3, r2
 8001e22:	88fa      	ldrh	r2, [r7, #6]
 8001e24:	b2d1      	uxtb	r1, r2
 8001e26:	4a16      	ldr	r2, [pc, #88]	; (8001e80 <API_blur_screen+0x104>)
 8001e28:	54d1      	strb	r1, [r2, r3]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001e2a:	897b      	ldrh	r3, [r7, #10]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	817b      	strh	r3, [r7, #10]
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	1c9a      	adds	r2, r3, #2
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	db03      	blt.n	8001e42 <API_blur_screen+0xc6>
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e40:	d3e7      	bcc.n	8001e12 <API_blur_screen+0x96>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001e42:	893b      	ldrh	r3, [r7, #8]
 8001e44:	3301      	adds	r3, #1
 8001e46:	813b      	strh	r3, [r7, #8]
 8001e48:	89bb      	ldrh	r3, [r7, #12]
 8001e4a:	1c9a      	adds	r2, r3, #2
 8001e4c:	893b      	ldrh	r3, [r7, #8]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	db02      	blt.n	8001e58 <API_blur_screen+0xdc>
 8001e52:	893b      	ldrh	r3, [r7, #8]
 8001e54:	2bef      	cmp	r3, #239	; 0xef
 8001e56:	d9d9      	bls.n	8001e0c <API_blur_screen+0x90>
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 8001e58:	89fb      	ldrh	r3, [r7, #14]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	81fb      	strh	r3, [r7, #14]
 8001e5e:	89fb      	ldrh	r3, [r7, #14]
 8001e60:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e64:	d397      	bcc.n	8001d96 <API_blur_screen+0x1a>
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 8001e66:	89bb      	ldrh	r3, [r7, #12]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	81bb      	strh	r3, [r7, #12]
 8001e6c:	89bb      	ldrh	r3, [r7, #12]
 8001e6e:	2bef      	cmp	r3, #239	; 0xef
 8001e70:	d98e      	bls.n	8001d90 <API_blur_screen+0x14>
	      }
	    }
	  }
	}
	return 0;
 8001e72:	2300      	movs	r3, #0
	}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	20000a30 	.word	0x20000a30
 8001e84:	38e38e39 	.word	0x38e38e39

08001e88 <API_wacht>:
 *
 * @return
 *
 *****************************************************************************/
unsigned int API_wacht(uint16_t msecs)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(msecs);
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f001 fc87 	bl	80037a8 <HAL_Delay>
	return 1;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <API_err_handler>:
 *
 * @return returns a message to the user
 *
 *****************************************************************************/
void API_err_handler(int API_err_in)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	switch(API_err_in)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	2b11      	cmp	r3, #17
 8001eb2:	f200 80ce 	bhi.w	8002052 <API_err_handler+0x1ae>
 8001eb6:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <API_err_handler+0x18>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001f05 	.word	0x08001f05
 8001ec0:	08001f13 	.word	0x08001f13
 8001ec4:	08001f21 	.word	0x08001f21
 8001ec8:	08001f2f 	.word	0x08001f2f
 8001ecc:	08001f3d 	.word	0x08001f3d
 8001ed0:	08001f4b 	.word	0x08001f4b
 8001ed4:	08001f59 	.word	0x08001f59
 8001ed8:	08001f67 	.word	0x08001f67
 8001edc:	08001f75 	.word	0x08001f75
 8001ee0:	08001f83 	.word	0x08001f83
 8001ee4:	08001f91 	.word	0x08001f91
 8001ee8:	08001f9f 	.word	0x08001f9f
 8001eec:	08001fad 	.word	0x08001fad
 8001ef0:	08001fbb 	.word	0x08001fbb
 8001ef4:	08001fc9 	.word	0x08001fc9
 8001ef8:	08002053 	.word	0x08002053
 8001efc:	08001fd7 	.word	0x08001fd7
 8001f00:	08001fe5 	.word	0x08001fe5
	{
	case INVALID_MESSAGE:
		printf("dit bericht is niet volgens de richtlijnen, type help voor meer informatie ");
 8001f04:	4857      	ldr	r0, [pc, #348]	; (8002064 <API_err_handler+0x1c0>)
 8001f06:	f008 fbad 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f0a:	4857      	ldr	r0, [pc, #348]	; (8002068 <API_err_handler+0x1c4>)
 8001f0c:	f008 fc46 	bl	800a79c <puts>
		break;
 8001f10:	e0a3      	b.n	800205a <API_err_handler+0x1b6>
	case X_OUT_OF_BOUNDS:
		printf("Een van de ingevulde X coordinaten is niet geldig, X mag niet groter zijn dan 320 ");
 8001f12:	4856      	ldr	r0, [pc, #344]	; (800206c <API_err_handler+0x1c8>)
 8001f14:	f008 fba6 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f18:	4853      	ldr	r0, [pc, #332]	; (8002068 <API_err_handler+0x1c4>)
 8001f1a:	f008 fc3f 	bl	800a79c <puts>
		break;
 8001f1e:	e09c      	b.n	800205a <API_err_handler+0x1b6>
	case Y_OUT_OF_BOUNDS:
		printf("Een van de ingevulde Y coordinaten is niet geldig, X mag niet groter zijn dan 240 ");
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <API_err_handler+0x1cc>)
 8001f22:	f008 fb9f 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f26:	4850      	ldr	r0, [pc, #320]	; (8002068 <API_err_handler+0x1c4>)
 8001f28:	f008 fc38 	bl	800a79c <puts>
		break;
 8001f2c:	e095      	b.n	800205a <API_err_handler+0x1b6>
	case NOT_A_NUMBER:
		printf("Op de plek waar je een getal in moet vullen heb je iets anders ingevuld ");
 8001f2e:	4851      	ldr	r0, [pc, #324]	; (8002074 <API_err_handler+0x1d0>)
 8001f30:	f008 fb98 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f34:	484c      	ldr	r0, [pc, #304]	; (8002068 <API_err_handler+0x1c4>)
 8001f36:	f008 fc31 	bl	800a79c <puts>
		break;
 8001f3a:	e08e      	b.n	800205a <API_err_handler+0x1b6>
	case NOT_A_CHARACTER:
		printf("Op de plek waar je een character in moet vullen heb je iets anders ingevuld ");
 8001f3c:	484e      	ldr	r0, [pc, #312]	; (8002078 <API_err_handler+0x1d4>)
 8001f3e:	f008 fb91 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f42:	4849      	ldr	r0, [pc, #292]	; (8002068 <API_err_handler+0x1c4>)
 8001f44:	f008 fc2a 	bl	800a79c <puts>
		break;
 8001f48:	e087      	b.n	800205a <API_err_handler+0x1b6>
	case UNKNOWN_COLOR:
		printf("de kleur die je hebt uitgekozen staat niet in de lijst van mogelijke kleuren ");
 8001f4a:	484c      	ldr	r0, [pc, #304]	; (800207c <API_err_handler+0x1d8>)
 8001f4c:	f008 fb8a 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f50:	4845      	ldr	r0, [pc, #276]	; (8002068 <API_err_handler+0x1c4>)
 8001f52:	f008 fc23 	bl	800a79c <puts>
		break;
 8001f56:	e080      	b.n	800205a <API_err_handler+0x1b6>
	case UNKNOWN_BITMAP:
		printf("de bitmap die je zoekt staat niet het lijst van mogelijke bitmaps ");
 8001f58:	4849      	ldr	r0, [pc, #292]	; (8002080 <API_err_handler+0x1dc>)
 8001f5a:	f008 fb83 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f5e:	4842      	ldr	r0, [pc, #264]	; (8002068 <API_err_handler+0x1c4>)
 8001f60:	f008 fc1c 	bl	800a79c <puts>
		break;
 8001f64:	e079      	b.n	800205a <API_err_handler+0x1b6>
	case UNKNOWN_FONT:
		printf("de font die je invult is niet bekent. probeer arial of consolas ");
 8001f66:	4847      	ldr	r0, [pc, #284]	; (8002084 <API_err_handler+0x1e0>)
 8001f68:	f008 fb7c 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f6c:	483e      	ldr	r0, [pc, #248]	; (8002068 <API_err_handler+0x1c4>)
 8001f6e:	f008 fc15 	bl	800a79c <puts>
		break;
 8001f72:	e072      	b.n	800205a <API_err_handler+0x1b6>
	case UNKNOWN_FONT_SIZE:
		printf("de size die je hier invult is niet geldig. probeer 1 of 2 ");
 8001f74:	4844      	ldr	r0, [pc, #272]	; (8002088 <API_err_handler+0x1e4>)
 8001f76:	f008 fb75 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f7a:	483b      	ldr	r0, [pc, #236]	; (8002068 <API_err_handler+0x1c4>)
 8001f7c:	f008 fc0e 	bl	800a79c <puts>
		break;
 8001f80:	e06b      	b.n	800205a <API_err_handler+0x1b6>
	case UNKNOWN_FONT_STYLE:
		printf("de stijl die je invult is niet bekent. probeer normaal, vet of cursief ");
 8001f82:	4842      	ldr	r0, [pc, #264]	; (800208c <API_err_handler+0x1e8>)
 8001f84:	f008 fb6e 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f88:	4837      	ldr	r0, [pc, #220]	; (8002068 <API_err_handler+0x1c4>)
 8001f8a:	f008 fc07 	bl	800a79c <puts>
		break;
 8001f8e:	e064      	b.n	800205a <API_err_handler+0x1b6>
	case UNKNOWN_FUNCTION:
		printf("de functie die je invult bestaat niet ");
 8001f90:	483f      	ldr	r0, [pc, #252]	; (8002090 <API_err_handler+0x1ec>)
 8001f92:	f008 fb67 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001f96:	4834      	ldr	r0, [pc, #208]	; (8002068 <API_err_handler+0x1c4>)
 8001f98:	f008 fc00 	bl	800a79c <puts>
		break;
 8001f9c:	e05d      	b.n	800205a <API_err_handler+0x1b6>
	case Y_TO_HIGH:
		printf("de functie gaat de maximale y waarde voorbij ");
 8001f9e:	483d      	ldr	r0, [pc, #244]	; (8002094 <API_err_handler+0x1f0>)
 8001fa0:	f008 fb60 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001fa4:	4830      	ldr	r0, [pc, #192]	; (8002068 <API_err_handler+0x1c4>)
 8001fa6:	f008 fbf9 	bl	800a79c <puts>
		break;
 8001faa:	e056      	b.n	800205a <API_err_handler+0x1b6>
	case X_TO_HIGH:
		printf("de functie gaat de maximale x waarde voorbij ");
 8001fac:	483a      	ldr	r0, [pc, #232]	; (8002098 <API_err_handler+0x1f4>)
 8001fae:	f008 fb59 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001fb2:	482d      	ldr	r0, [pc, #180]	; (8002068 <API_err_handler+0x1c4>)
 8001fb4:	f008 fbf2 	bl	800a79c <puts>
		break;
 8001fb8:	e04f      	b.n	800205a <API_err_handler+0x1b6>
	case NO_SD_CARD_DETECTED:
		printf("er is geen SD kaart aanwezig, check SD kaart slot ");
 8001fba:	4838      	ldr	r0, [pc, #224]	; (800209c <API_err_handler+0x1f8>)
 8001fbc:	f008 fb52 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001fc0:	4829      	ldr	r0, [pc, #164]	; (8002068 <API_err_handler+0x1c4>)
 8001fc2:	f008 fbeb 	bl	800a79c <puts>
		break;
 8001fc6:	e048      	b.n	800205a <API_err_handler+0x1b6>
	case NO_COMMA_DETECTED:
		printf("er mist een , tussen de verschillende onderdelen van je message ");
 8001fc8:	4835      	ldr	r0, [pc, #212]	; (80020a0 <API_err_handler+0x1fc>)
 8001fca:	f008 fb4b 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001fce:	4826      	ldr	r0, [pc, #152]	; (8002068 <API_err_handler+0x1c4>)
 8001fd0:	f008 fbe4 	bl	800a79c <puts>
		break;
 8001fd4:	e041      	b.n	800205a <API_err_handler+0x1b6>
	case NO_END_TERMINATOR:
		printf("er mist een string terminator in je message ");
 8001fd6:	4833      	ldr	r0, [pc, #204]	; (80020a4 <API_err_handler+0x200>)
 8001fd8:	f008 fb44 	bl	800a664 <iprintf>
		printf("type help voor meer informatie\n");
 8001fdc:	4822      	ldr	r0, [pc, #136]	; (8002068 <API_err_handler+0x1c4>)
 8001fde:	f008 fbdd 	bl	800a79c <puts>
		break;
 8001fe2:	e03a      	b.n	800205a <API_err_handler+0x1b6>
	case HELP:
		printf("------------------------------HELP-----------------------\n");
 8001fe4:	4830      	ldr	r0, [pc, #192]	; (80020a8 <API_err_handler+0x204>)
 8001fe6:	f008 fbd9 	bl	800a79c <puts>
		printf("\n");
 8001fea:	200a      	movs	r0, #10
 8001fec:	f008 fb52 	bl	800a694 <putchar>
		printf("Bericht layout's:\n");
 8001ff0:	482e      	ldr	r0, [pc, #184]	; (80020ac <API_err_handler+0x208>)
 8001ff2:	f008 fbd3 	bl	800a79c <puts>
		printf("tekst, x, y, kleur, tekst, fontnaam (arial, consolas), fontgrootte (1,2), fontstijl (normaal, vet, cursief)\n");
 8001ff6:	482e      	ldr	r0, [pc, #184]	; (80020b0 <API_err_handler+0x20c>)
 8001ff8:	f008 fbd0 	bl	800a79c <puts>
		printf("bitmap, nr, x-lup, y-lup  [tenminste: pijl (in 4 richtingen), smiley (boos, blij)]\n");
 8001ffc:	482d      	ldr	r0, [pc, #180]	; (80020b4 <API_err_handler+0x210>)
 8001ffe:	f008 fbcd 	bl	800a79c <puts>
		printf("clearscherm, kleur\n");
 8002002:	482d      	ldr	r0, [pc, #180]	; (80020b8 <API_err_handler+0x214>)
 8002004:	f008 fbca 	bl	800a79c <puts>
		printf("wacht, msecs\n");
 8002008:	482c      	ldr	r0, [pc, #176]	; (80020bc <API_err_handler+0x218>)
 800200a:	f008 fbc7 	bl	800a79c <puts>
		printf("cirkel, x, y, radius, kleur\n");
 800200e:	482c      	ldr	r0, [pc, #176]	; (80020c0 <API_err_handler+0x21c>)
 8002010:	f008 fbc4 	bl	800a79c <puts>
		printf("rechthoek, x_lup, y_lup, breedte, hoogte, kleur, gevuld (1,0) [als 1: rand (1px) met kleur]\n");
 8002014:	482b      	ldr	r0, [pc, #172]	; (80020c4 <API_err_handler+0x220>)
 8002016:	f008 fbc1 	bl	800a79c <puts>
		printf("lijn, x, y, x2, y2, kleur, dikte\n");
 800201a:	482b      	ldr	r0, [pc, #172]	; (80020c8 <API_err_handler+0x224>)
 800201c:	f008 fbbe 	bl	800a79c <puts>
		printf("blur\n");
 8002020:	482a      	ldr	r0, [pc, #168]	; (80020cc <API_err_handler+0x228>)
 8002022:	f008 fbbb 	bl	800a79c <puts>
		printf("\n");
 8002026:	200a      	movs	r0, #10
 8002028:	f008 fb34 	bl	800a694 <putchar>
		printf("Parameters:\n");
 800202c:	4828      	ldr	r0, [pc, #160]	; (80020d0 <API_err_handler+0x22c>)
 800202e:	f008 fbb5 	bl	800a79c <puts>
		printf("Y max = 240\n");
 8002032:	4828      	ldr	r0, [pc, #160]	; (80020d4 <API_err_handler+0x230>)
 8002034:	f008 fbb2 	bl	800a79c <puts>
		printf("X max = 320\n");
 8002038:	4827      	ldr	r0, [pc, #156]	; (80020d8 <API_err_handler+0x234>)
 800203a:	f008 fbaf 	bl	800a79c <puts>
		printf("\n");
 800203e:	200a      	movs	r0, #10
 8002040:	f008 fb28 	bl	800a694 <putchar>
		printf("Voor meer info check de Handleiding\n");
 8002044:	4825      	ldr	r0, [pc, #148]	; (80020dc <API_err_handler+0x238>)
 8002046:	f008 fba9 	bl	800a79c <puts>
		printf("------------------------------einde----------------------\n");
 800204a:	4825      	ldr	r0, [pc, #148]	; (80020e0 <API_err_handler+0x23c>)
 800204c:	f008 fba6 	bl	800a79c <puts>
		break;
 8002050:	e003      	b.n	800205a <API_err_handler+0x1b6>
	default:
		printf("onbekende error");
 8002052:	4824      	ldr	r0, [pc, #144]	; (80020e4 <API_err_handler+0x240>)
 8002054:	f008 fb06 	bl	800a664 <iprintf>
		break;
 8002058:	bf00      	nop
	}
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	0800c5f0 	.word	0x0800c5f0
 8002068:	0800c63c 	.word	0x0800c63c
 800206c:	0800c65c 	.word	0x0800c65c
 8002070:	0800c6b0 	.word	0x0800c6b0
 8002074:	0800c704 	.word	0x0800c704
 8002078:	0800c750 	.word	0x0800c750
 800207c:	0800c7a0 	.word	0x0800c7a0
 8002080:	0800c7f0 	.word	0x0800c7f0
 8002084:	0800c834 	.word	0x0800c834
 8002088:	0800c878 	.word	0x0800c878
 800208c:	0800c8b4 	.word	0x0800c8b4
 8002090:	0800c8fc 	.word	0x0800c8fc
 8002094:	0800c924 	.word	0x0800c924
 8002098:	0800c954 	.word	0x0800c954
 800209c:	0800c984 	.word	0x0800c984
 80020a0:	0800c9b8 	.word	0x0800c9b8
 80020a4:	0800c9fc 	.word	0x0800c9fc
 80020a8:	0800ca2c 	.word	0x0800ca2c
 80020ac:	0800ca68 	.word	0x0800ca68
 80020b0:	0800ca7c 	.word	0x0800ca7c
 80020b4:	0800cae8 	.word	0x0800cae8
 80020b8:	0800cb3c 	.word	0x0800cb3c
 80020bc:	0800cb50 	.word	0x0800cb50
 80020c0:	0800cb60 	.word	0x0800cb60
 80020c4:	0800cb7c 	.word	0x0800cb7c
 80020c8:	0800cbd8 	.word	0x0800cbd8
 80020cc:	0800cbfc 	.word	0x0800cbfc
 80020d0:	0800cc04 	.word	0x0800cc04
 80020d4:	0800cc10 	.word	0x0800cc10
 80020d8:	0800cc1c 	.word	0x0800cc1c
 80020dc:	0800cc28 	.word	0x0800cc28
 80020e0:	0800cc4c 	.word	0x0800cc4c
 80020e4:	0800cc88 	.word	0x0800cc88

080020e8 <LogicLayer_Parser>:
 *
 * @return deze functie returned de struct Message_parser hierin staan de verschillende variabelen opgedeeld in hokjes en het hoeveelheid ontvangen variabelen
 *
 *****************************************************************************/
Message_parser LogicLayer_Parser(char *PMessage, unsigned int Messagelength)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80020f4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80020f8:	6018      	str	r0, [r3, #0]
 80020fa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80020fe:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002102:	6019      	str	r1, [r3, #0]
 8002104:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002108:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800210c:	601a      	str	r2, [r3, #0]
	unsigned int i,j,k,l = 0;			// Maak iterators aan voor het maken van een moving window langs de buffer message
 800210e:	2300      	movs	r3, #0
 8002110:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	i = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	j = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	k = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404


	Message_parser PlocalParser;

	  while (PMessage[i] != 0) 	// Kijk voor line end
 8002126:	e08b      	b.n	8002240 <LogicLayer_Parser+0x158>
	  {

		  while (PMessage[i] != 44 && PMessage[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 8002128:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800212c:	3301      	adds	r3, #1
 800212e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 8002132:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002136:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800213a:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d903      	bls.n	800214c <LogicLayer_Parser+0x64>
			  {
				  API_err_handler(NO_COMMA_DETECTED);
 8002144:	200f      	movs	r0, #15
 8002146:	f7ff fead 	bl	8001ea4 <API_err_handler>
				  break;
 800214a:	e015      	b.n	8002178 <LogicLayer_Parser+0x90>
		  while (PMessage[i] != 44 && PMessage[i] != 0)		//Detectie van de comma seperator
 800214c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002150:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b2c      	cmp	r3, #44	; 0x2c
 8002160:	d00a      	beq.n	8002178 <LogicLayer_Parser+0x90>
 8002162:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002166:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1d7      	bne.n	8002128 <LogicLayer_Parser+0x40>
			  }
		  }

	  	  for (l=0; j<i; j++)
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 800217e:	e022      	b.n	80021c6 <LogicLayer_Parser+0xde>
	  	  {
	  		PlocalParser.Parser_Message[k][l] = PMessage[j];
 8002180:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002184:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800218e:	4413      	add	r3, r2
 8002190:	7818      	ldrb	r0, [r3, #0]
 8002192:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002196:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 800219a:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800219e:	2132      	movs	r1, #50	; 0x32
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	441a      	add	r2, r3
 80021a6:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80021aa:	4413      	add	r3, r2
 80021ac:	3301      	adds	r3, #1
 80021ae:	4602      	mov	r2, r0
 80021b0:	701a      	strb	r2, [r3, #0]
	  		l++;
 80021b2:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80021b6:	3301      	adds	r3, #1
 80021b8:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	  	  for (l=0; j<i; j++)
 80021bc:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80021c0:	3301      	adds	r3, #1
 80021c2:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80021c6:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80021ca:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d3d6      	bcc.n	8002180 <LogicLayer_Parser+0x98>
	  	  }

	  	  j = i+1;
 80021d2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80021d6:	3301      	adds	r3, #1
 80021d8:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

	  	  if (PMessage[j] == 0x20)	// checking for spaces between lines
 80021dc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80021e0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80021ea:	4413      	add	r3, r2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d104      	bne.n	80021fc <LogicLayer_Parser+0x114>
	  	  {
	  		  j++;
 80021f2:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80021f6:	3301      	adds	r3, #1
 80021f8:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	  	  }

	  	  PlocalParser.Parser_Message[k][l] = '\0';
 80021fc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002200:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 8002204:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002208:	2132      	movs	r1, #50	; 0x32
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	441a      	add	r2, r3
 8002210:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8002214:	4413      	add	r3, r2
 8002216:	3301      	adds	r3, #1
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]

	  	  i++;		//verhoog de iterator om niet in een oneindige loop te komen ivm while loop en komma detectie
 800221c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002220:	3301      	adds	r3, #1
 8002222:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	  	  k=(k+1);	//verhoog iterator voor meerdere berichten opslag
 8002226:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800222a:	3301      	adds	r3, #1
 800222c:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 8002230:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002234:	2b14      	cmp	r3, #20
 8002236:	d903      	bls.n	8002240 <LogicLayer_Parser+0x158>
	  	  	  {
	  		  	  API_err_handler(NO_END_TERMINATOR);
 8002238:	2011      	movs	r0, #17
 800223a:	f7ff fe33 	bl	8001ea4 <API_err_handler>
	  		  	  break;
 800223e:	e00b      	b.n	8002258 <LogicLayer_Parser+0x170>
	  while (PMessage[i] != 0) 	// Kijk voor line end
 8002240:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002244:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 800224e:	4413      	add	r3, r2
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f47f af7a 	bne.w	800214c <LogicLayer_Parser+0x64>
	  	  	  }

	  }

	PlocalParser.Variable_length = k;
 8002258:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800225c:	b2da      	uxtb	r2, r3
 800225e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002262:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002266:	701a      	strb	r2, [r3, #0]

	return PlocalParser;
 8002268:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800226c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002276:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8002282:	461a      	mov	r2, r3
 8002284:	f008 f9d8 	bl	800a638 <memcpy>
}
 8002288:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800228c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <LogicLayer_CommandCheck>:
 *
 * @return returned niks tenzij de commando niet gevonden is
 *
 *****************************************************************************/
int LogicLayer_CommandCheck(Message_parser* PlocalParser)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	int i;
	unsigned char stringLength = sizeof(commands_check) / sizeof(commands_check[0]);
 80022a4:	230a      	movs	r3, #10
 80022a6:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCheck = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	727b      	strb	r3, [r7, #9]
	unsigned char stringCorrect = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	72fb      	strb	r3, [r7, #11]

	for (i = 1; i <= stringLength; i++)
 80022b0:	2301      	movs	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	e016      	b.n	80022e4 <LogicLayer_CommandCheck+0x48>
	{
		stringCheck = strcmp(PlocalParser->Parser_Message[0],commands_check[i-1]);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	1c58      	adds	r0, r3, #1
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1e5a      	subs	r2, r3, #1
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <LogicLayer_CommandCheck+0x6c>)
 80022c8:	4413      	add	r3, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7fd ff80 	bl	80001d0 <strcmp>
 80022d0:	4603      	mov	r3, r0
 80022d2:	727b      	strb	r3, [r7, #9]
		if (stringCheck == 0)
 80022d4:	7a7b      	ldrb	r3, [r7, #9]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <LogicLayer_CommandCheck+0x42>
		{
			stringCorrect = i;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	72fb      	strb	r3, [r7, #11]
	for (i = 1; i <= stringLength; i++)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	7abb      	ldrb	r3, [r7, #10]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dde4      	ble.n	80022b6 <LogicLayer_CommandCheck+0x1a>
		}
	}

	if (stringCorrect != 0)
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <LogicLayer_CommandCheck+0x5a>
	{
		return stringCorrect;
 80022f2:	7afb      	ldrb	r3, [r7, #11]
 80022f4:	e003      	b.n	80022fe <LogicLayer_CommandCheck+0x62>
	}
	else
		API_err_handler(UNKNOWN_FUNCTION);
 80022f6:	200b      	movs	r0, #11
 80022f8:	f7ff fdd4 	bl	8001ea4 <API_err_handler>
	return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	08015fec 	.word	0x08015fec

0800230c <LogicLayer_CommandSwitch>:
 *
 * @return returned niks tenzij er niet genoeg variabelen mee zijn gegeven
 *
 *****************************************************************************/
int LogicLayer_CommandSwitch(Message_parser* PlocalParser, unsigned char Command)
{
 800230c:	b5b0      	push	{r4, r5, r7, lr}
 800230e:	b092      	sub	sp, #72	; 0x48
 8002310:	af04      	add	r7, sp, #16
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
	switch (Command)
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	3b01      	subs	r3, #1
 800231c:	2b09      	cmp	r3, #9
 800231e:	f200 824a 	bhi.w	80027b6 <LogicLayer_CommandSwitch+0x4aa>
 8002322:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <LogicLayer_CommandSwitch+0x1c>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002351 	.word	0x08002351
 800232c:	0800243d 	.word	0x0800243d
 8002330:	08002543 	.word	0x08002543
 8002334:	080025e1 	.word	0x080025e1
 8002338:	08002659 	.word	0x08002659
 800233c:	08002685 	.word	0x08002685
 8002340:	080027b7 	.word	0x080027b7
 8002344:	080026bb 	.word	0x080026bb
 8002348:	08002799 	.word	0x08002799
 800234c:	080027b1 	.word	0x080027b1
	{
		case 1:	//lijn
		{
			if (PlocalParser->Variable_length-1 == 6)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b07      	cmp	r3, #7
 8002356:	d16c      	bne.n	8002432 <LogicLayer_CommandSwitch+0x126>
			{
				unsigned short x_1, y_1, x_2, y_2;
				unsigned char dikte, color;
				x_1 = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[1]), 1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3333      	adds	r3, #51	; 0x33
 800235c:	4618      	mov	r0, r3
 800235e:	f7fd ff41 	bl	80001e4 <strlen>
 8002362:	4603      	mov	r3, r0
 8002364:	2201      	movs	r2, #1
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fa6f 	bl	800284c <LogicLayer_intToAscii>
 800236e:	4603      	mov	r3, r0
 8002370:	82bb      	strh	r3, [r7, #20]
				y_1 = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[2]), 2);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3365      	adds	r3, #101	; 0x65
 8002376:	4618      	mov	r0, r3
 8002378:	f7fd ff34 	bl	80001e4 <strlen>
 800237c:	4603      	mov	r3, r0
 800237e:	2202      	movs	r2, #2
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fa62 	bl	800284c <LogicLayer_intToAscii>
 8002388:	4603      	mov	r3, r0
 800238a:	827b      	strh	r3, [r7, #18]
				x_2 = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[3]), 3);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3397      	adds	r3, #151	; 0x97
 8002390:	4618      	mov	r0, r3
 8002392:	f7fd ff27 	bl	80001e4 <strlen>
 8002396:	4603      	mov	r3, r0
 8002398:	2203      	movs	r2, #3
 800239a:	4619      	mov	r1, r3
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fa55 	bl	800284c <LogicLayer_intToAscii>
 80023a2:	4603      	mov	r3, r0
 80023a4:	823b      	strh	r3, [r7, #16]
				y_2 = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[4]), 4);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	33c9      	adds	r3, #201	; 0xc9
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fd ff1a 	bl	80001e4 <strlen>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2204      	movs	r2, #4
 80023b4:	4619      	mov	r1, r3
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fa48 	bl	800284c <LogicLayer_intToAscii>
 80023bc:	4603      	mov	r3, r0
 80023be:	81fb      	strh	r3, [r7, #14]
				color = LogicLayer_ColourCheck(PlocalParser, 5);
 80023c0:	2105      	movs	r1, #5
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa02 	bl	80027cc <LogicLayer_ColourCheck>
 80023c8:	4603      	mov	r3, r0
 80023ca:	737b      	strb	r3, [r7, #13]
				dikte = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[6]), 6);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f203 132d 	addw	r3, r3, #301	; 0x12d
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fd ff06 	bl	80001e4 <strlen>
 80023d8:	4603      	mov	r3, r0
 80023da:	2206      	movs	r2, #6
 80023dc:	4619      	mov	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 fa34 	bl	800284c <LogicLayer_intToAscii>
 80023e4:	4603      	mov	r3, r0
 80023e6:	733b      	strb	r3, [r7, #12]
				if(x_1 > VGA_DISPLAY_X || x_2 > VGA_DISPLAY_X)
 80023e8:	8abb      	ldrh	r3, [r7, #20]
 80023ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80023ee:	d803      	bhi.n	80023f8 <LogicLayer_CommandSwitch+0xec>
 80023f0:	8a3b      	ldrh	r3, [r7, #16]
 80023f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80023f6:	d904      	bls.n	8002402 <LogicLayer_CommandSwitch+0xf6>
				{
					API_err_handler(X_OUT_OF_BOUNDS);
 80023f8:	2002      	movs	r0, #2
 80023fa:	f7ff fd53 	bl	8001ea4 <API_err_handler>
					return 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	e1df      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_1 > VGA_DISPLAY_Y || y_2 > VGA_DISPLAY_Y)
 8002402:	8a7b      	ldrh	r3, [r7, #18]
 8002404:	2bf0      	cmp	r3, #240	; 0xf0
 8002406:	d802      	bhi.n	800240e <LogicLayer_CommandSwitch+0x102>
 8002408:	89fb      	ldrh	r3, [r7, #14]
 800240a:	2bf0      	cmp	r3, #240	; 0xf0
 800240c:	d904      	bls.n	8002418 <LogicLayer_CommandSwitch+0x10c>
				{
					API_err_handler(Y_OUT_OF_BOUNDS);
 800240e:	2003      	movs	r0, #3
 8002410:	f7ff fd48 	bl	8001ea4 <API_err_handler>
					return 0;
 8002414:	2300      	movs	r3, #0
 8002416:	e1d4      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				API_draw_line(x_1, y_1, x_2, y_2, dikte, color);
 8002418:	89fc      	ldrh	r4, [r7, #14]
 800241a:	8a3a      	ldrh	r2, [r7, #16]
 800241c:	8a79      	ldrh	r1, [r7, #18]
 800241e:	8ab8      	ldrh	r0, [r7, #20]
 8002420:	7b7b      	ldrb	r3, [r7, #13]
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	7b3b      	ldrb	r3, [r7, #12]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4623      	mov	r3, r4
 800242a:	f7fe fd9f 	bl	8000f6c <API_draw_line>
				return 0;
 800242e:	2300      	movs	r3, #0
 8002430:	e1c7      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				break;
			}
			else
				API_err_handler(INVALID_MESSAGE);
 8002432:	2001      	movs	r0, #1
 8002434:	f7ff fd36 	bl	8001ea4 <API_err_handler>
			return 0;
 8002438:	2300      	movs	r3, #0
 800243a:	e1c2      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
		}

		case 2:	//rechthoek
		{
			if (PlocalParser->Variable_length-1 == 6)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b07      	cmp	r3, #7
 8002442:	d179      	bne.n	8002538 <LogicLayer_CommandSwitch+0x22c>
			{
				unsigned short x_lup,  y_lup,  breedte,  hoogte;
				unsigned char color, gevuld;
				x_lup = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[1]), 1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3333      	adds	r3, #51	; 0x33
 8002448:	4618      	mov	r0, r3
 800244a:	f7fd fecb 	bl	80001e4 <strlen>
 800244e:	4603      	mov	r3, r0
 8002450:	2201      	movs	r2, #1
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f9f9 	bl	800284c <LogicLayer_intToAscii>
 800245a:	4603      	mov	r3, r0
 800245c:	83fb      	strh	r3, [r7, #30]
				y_lup = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[2]), 2);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3365      	adds	r3, #101	; 0x65
 8002462:	4618      	mov	r0, r3
 8002464:	f7fd febe 	bl	80001e4 <strlen>
 8002468:	4603      	mov	r3, r0
 800246a:	2202      	movs	r2, #2
 800246c:	4619      	mov	r1, r3
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f9ec 	bl	800284c <LogicLayer_intToAscii>
 8002474:	4603      	mov	r3, r0
 8002476:	83bb      	strh	r3, [r7, #28]
				breedte = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[3]), 3);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3397      	adds	r3, #151	; 0x97
 800247c:	4618      	mov	r0, r3
 800247e:	f7fd feb1 	bl	80001e4 <strlen>
 8002482:	4603      	mov	r3, r0
 8002484:	2203      	movs	r2, #3
 8002486:	4619      	mov	r1, r3
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f9df 	bl	800284c <LogicLayer_intToAscii>
 800248e:	4603      	mov	r3, r0
 8002490:	837b      	strh	r3, [r7, #26]
				hoogte = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[4]), 4);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	33c9      	adds	r3, #201	; 0xc9
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd fea4 	bl	80001e4 <strlen>
 800249c:	4603      	mov	r3, r0
 800249e:	2204      	movs	r2, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f9d2 	bl	800284c <LogicLayer_intToAscii>
 80024a8:	4603      	mov	r3, r0
 80024aa:	833b      	strh	r3, [r7, #24]
				color = LogicLayer_ColourCheck(PlocalParser, 5);
 80024ac:	2105      	movs	r1, #5
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f98c 	bl	80027cc <LogicLayer_ColourCheck>
 80024b4:	4603      	mov	r3, r0
 80024b6:	75fb      	strb	r3, [r7, #23]
				gevuld = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[6]), 6);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 132d 	addw	r3, r3, #301	; 0x12d
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fe90 	bl	80001e4 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2206      	movs	r2, #6
 80024c8:	4619      	mov	r1, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f9be 	bl	800284c <LogicLayer_intToAscii>
 80024d0:	4603      	mov	r3, r0
 80024d2:	75bb      	strb	r3, [r7, #22]
				if(x_lup > VGA_DISPLAY_X)
 80024d4:	8bfb      	ldrh	r3, [r7, #30]
 80024d6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024da:	d904      	bls.n	80024e6 <LogicLayer_CommandSwitch+0x1da>
				{
					API_err_handler(X_OUT_OF_BOUNDS);
 80024dc:	2002      	movs	r0, #2
 80024de:	f7ff fce1 	bl	8001ea4 <API_err_handler>
					return 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e16d      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				if(x_lup+breedte > VGA_DISPLAY_X)
 80024e6:	8bfa      	ldrh	r2, [r7, #30]
 80024e8:	8b7b      	ldrh	r3, [r7, #26]
 80024ea:	4413      	add	r3, r2
 80024ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024f0:	dd04      	ble.n	80024fc <LogicLayer_CommandSwitch+0x1f0>
				{
					API_err_handler(X_TO_HIGH);
 80024f2:	200d      	movs	r0, #13
 80024f4:	f7ff fcd6 	bl	8001ea4 <API_err_handler>
					return 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e162      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_lup > VGA_DISPLAY_Y)
 80024fc:	8bbb      	ldrh	r3, [r7, #28]
 80024fe:	2bf0      	cmp	r3, #240	; 0xf0
 8002500:	d904      	bls.n	800250c <LogicLayer_CommandSwitch+0x200>
				{
					API_err_handler(Y_OUT_OF_BOUNDS);
 8002502:	2003      	movs	r0, #3
 8002504:	f7ff fcce 	bl	8001ea4 <API_err_handler>
					return 0;
 8002508:	2300      	movs	r3, #0
 800250a:	e15a      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_lup+hoogte > VGA_DISPLAY_Y)
 800250c:	8bba      	ldrh	r2, [r7, #28]
 800250e:	8b3b      	ldrh	r3, [r7, #24]
 8002510:	4413      	add	r3, r2
 8002512:	2bf0      	cmp	r3, #240	; 0xf0
 8002514:	dd04      	ble.n	8002520 <LogicLayer_CommandSwitch+0x214>
				{
					API_err_handler(Y_TO_HIGH);
 8002516:	200c      	movs	r0, #12
 8002518:	f7ff fcc4 	bl	8001ea4 <API_err_handler>
					return 0;
 800251c:	2300      	movs	r3, #0
 800251e:	e150      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}

				API_draw_rectangle(x_lup, y_lup, breedte, hoogte, color, gevuld);
 8002520:	8b3c      	ldrh	r4, [r7, #24]
 8002522:	8b7a      	ldrh	r2, [r7, #26]
 8002524:	8bb9      	ldrh	r1, [r7, #28]
 8002526:	8bf8      	ldrh	r0, [r7, #30]
 8002528:	7dbb      	ldrb	r3, [r7, #22]
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	4623      	mov	r3, r4
 8002532:	f7fe fde9 	bl	8001108 <API_draw_rectangle>

				break;
 8002536:	e143      	b.n	80027c0 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 8002538:	2001      	movs	r0, #1
 800253a:	f7ff fcb3 	bl	8001ea4 <API_err_handler>
			return 0;
 800253e:	2300      	movs	r3, #0
 8002540:	e13f      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
		}

		case 3: //tekst
		{
			if (PlocalParser->Variable_length-1 == 7)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b08      	cmp	r3, #8
 8002548:	d145      	bne.n	80025d6 <LogicLayer_CommandSwitch+0x2ca>
			{
				uint16_t x = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[1]), 1);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3333      	adds	r3, #51	; 0x33
 800254e:	4618      	mov	r0, r3
 8002550:	f7fd fe48 	bl	80001e4 <strlen>
 8002554:	4603      	mov	r3, r0
 8002556:	2201      	movs	r2, #1
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f976 	bl	800284c <LogicLayer_intToAscii>
 8002560:	4603      	mov	r3, r0
 8002562:	84bb      	strh	r3, [r7, #36]	; 0x24
				uint16_t y = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[2]), 2);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3365      	adds	r3, #101	; 0x65
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd fe3b 	bl	80001e4 <strlen>
 800256e:	4603      	mov	r3, r0
 8002570:	2202      	movs	r2, #2
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f969 	bl	800284c <LogicLayer_intToAscii>
 800257a:	4603      	mov	r3, r0
 800257c:	847b      	strh	r3, [r7, #34]	; 0x22
				uint8_t kleur = LogicLayer_ColourCheck(PlocalParser, 3);
 800257e:	2103      	movs	r1, #3
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f923 	bl	80027cc <LogicLayer_ColourCheck>
 8002586:	4603      	mov	r3, r0
 8002588:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				uint8_t fontgrootte = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[6]), 6);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd fe26 	bl	80001e4 <strlen>
 8002598:	4603      	mov	r3, r0
 800259a:	2206      	movs	r2, #6
 800259c:	4619      	mov	r1, r3
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f954 	bl	800284c <LogicLayer_intToAscii>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 3020 	strb.w	r3, [r7, #32]

				API_draw_text(x, y, kleur, PlocalParser->Parser_Message[4],PlocalParser->Parser_Message[5], fontgrootte, PlocalParser->Parser_Message[7]);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f103 05c9 	add.w	r5, r3, #201	; 0xc9
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	33fb      	adds	r3, #251	; 0xfb
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	f202 125f 	addw	r2, r2, #351	; 0x15f
 80025ba:	f897 4021 	ldrb.w	r4, [r7, #33]	; 0x21
 80025be:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80025c0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80025c2:	9202      	str	r2, [sp, #8]
 80025c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025c8:	9201      	str	r2, [sp, #4]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	462b      	mov	r3, r5
 80025ce:	4622      	mov	r2, r4
 80025d0:	f7fe fe96 	bl	8001300 <API_draw_text>
				break;
 80025d4:	e0f4      	b.n	80027c0 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7ff fc64 	bl	8001ea4 <API_err_handler>
			return 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	e0f0      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
		}

		case 4: //bitmap
		{

			if (PlocalParser->Variable_length-1 == 3)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d132      	bne.n	800264e <LogicLayer_CommandSwitch+0x342>
			{
				unsigned short x_lup = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[2]), 2);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3365      	adds	r3, #101	; 0x65
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd fdf9 	bl	80001e4 <strlen>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2202      	movs	r2, #2
 80025f6:	4619      	mov	r1, r3
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f927 	bl	800284c <LogicLayer_intToAscii>
 80025fe:	4603      	mov	r3, r0
 8002600:	853b      	strh	r3, [r7, #40]	; 0x28
				unsigned short y_lup = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[3]), 3);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3397      	adds	r3, #151	; 0x97
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd fdec 	bl	80001e4 <strlen>
 800260c:	4603      	mov	r3, r0
 800260e:	2203      	movs	r2, #3
 8002610:	4619      	mov	r1, r3
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f91a 	bl	800284c <LogicLayer_intToAscii>
 8002618:	4603      	mov	r3, r0
 800261a:	84fb      	strh	r3, [r7, #38]	; 0x26
				if(x_lup > VGA_DISPLAY_X)
 800261c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800261e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002622:	d904      	bls.n	800262e <LogicLayer_CommandSwitch+0x322>
				{
					API_err_handler(X_OUT_OF_BOUNDS);
 8002624:	2002      	movs	r0, #2
 8002626:	f7ff fc3d 	bl	8001ea4 <API_err_handler>
					return 0;
 800262a:	2300      	movs	r3, #0
 800262c:	e0c9      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_lup > VGA_DISPLAY_Y)
 800262e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002630:	2bf0      	cmp	r3, #240	; 0xf0
 8002632:	d904      	bls.n	800263e <LogicLayer_CommandSwitch+0x332>
				{
					API_err_handler(Y_OUT_OF_BOUNDS);
 8002634:	2003      	movs	r0, #3
 8002636:	f7ff fc35 	bl	8001ea4 <API_err_handler>
					return 0;
 800263a:	2300      	movs	r3, #0
 800263c:	e0c1      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				API_read_bitmap_SD(PlocalParser->Parser_Message[1], x_lup, y_lup);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3333      	adds	r3, #51	; 0x33
 8002642:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002644:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fa4c 	bl	8001ae4 <API_read_bitmap_SD>
				break;
 800264c:	e0b8      	b.n	80027c0 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 800264e:	2001      	movs	r0, #1
 8002650:	f7ff fc28 	bl	8001ea4 <API_err_handler>
			return 0;
 8002654:	2300      	movs	r3, #0
 8002656:	e0b4      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
		}

		case 5: //clearscherm
		{
			if (PlocalParser->Variable_length-1 == 1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d10c      	bne.n	800267a <LogicLayer_CommandSwitch+0x36e>
			{
				unsigned char color;
				color = LogicLayer_ColourCheck(PlocalParser, 1);
 8002660:	2101      	movs	r1, #1
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f8b2 	bl	80027cc <LogicLayer_ColourCheck>
 8002668:	4603      	mov	r3, r0
 800266a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				UB_VGA_FillScreen(color);
 800266e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002672:	4618      	mov	r0, r3
 8002674:	f000 ffda 	bl	800362c <UB_VGA_FillScreen>
				break;
 8002678:	e0a2      	b.n	80027c0 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 800267a:	2001      	movs	r0, #1
 800267c:	f7ff fc12 	bl	8001ea4 <API_err_handler>
			return 0;
 8002680:	2300      	movs	r3, #0
 8002682:	e09e      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
		}

		case 6:
		{
			if (PlocalParser->Variable_length-1 == 1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d111      	bne.n	80026b0 <LogicLayer_CommandSwitch+0x3a4>
			{
				unsigned int msecs = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[1]), 1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3333      	adds	r3, #51	; 0x33
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd fda7 	bl	80001e4 <strlen>
 8002696:	4603      	mov	r3, r0
 8002698:	2201      	movs	r2, #1
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f8d5 	bl	800284c <LogicLayer_intToAscii>
 80026a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				API_wacht(msecs);
 80026a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fbed 	bl	8001e88 <API_wacht>
				break;
 80026ae:	e087      	b.n	80027c0 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff fbf7 	bl	8001ea4 <API_err_handler>
			return 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e083      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
		}

		case 8:
		{
			if (PlocalParser->Variable_length-1 == 4)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d165      	bne.n	800278e <LogicLayer_CommandSwitch+0x482>
			{
				uint16_t x_c = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[1]), 1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3333      	adds	r3, #51	; 0x33
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fd fd8c 	bl	80001e4 <strlen>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2201      	movs	r2, #1
 80026d0:	4619      	mov	r1, r3
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8ba 	bl	800284c <LogicLayer_intToAscii>
 80026d8:	4603      	mov	r3, r0
 80026da:	86fb      	strh	r3, [r7, #54]	; 0x36
				uint16_t y_c = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[2]), 2);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3365      	adds	r3, #101	; 0x65
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd fd7f 	bl	80001e4 <strlen>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2202      	movs	r2, #2
 80026ea:	4619      	mov	r1, r3
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f8ad 	bl	800284c <LogicLayer_intToAscii>
 80026f2:	4603      	mov	r3, r0
 80026f4:	86bb      	strh	r3, [r7, #52]	; 0x34
				uint16_t radius = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[3]), 3);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3397      	adds	r3, #151	; 0x97
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd fd72 	bl	80001e4 <strlen>
 8002700:	4603      	mov	r3, r0
 8002702:	2203      	movs	r2, #3
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f8a0 	bl	800284c <LogicLayer_intToAscii>
 800270c:	4603      	mov	r3, r0
 800270e:	867b      	strh	r3, [r7, #50]	; 0x32
				uint8_t color = LogicLayer_ColourCheck(PlocalParser, 4);
 8002710:	2104      	movs	r1, #4
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f85a 	bl	80027cc <LogicLayer_ColourCheck>
 8002718:	4603      	mov	r3, r0
 800271a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				if(x_c > VGA_DISPLAY_X)
 800271e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002720:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002724:	d904      	bls.n	8002730 <LogicLayer_CommandSwitch+0x424>
				{
					API_err_handler(X_OUT_OF_BOUNDS);
 8002726:	2002      	movs	r0, #2
 8002728:	f7ff fbbc 	bl	8001ea4 <API_err_handler>
					return 0;
 800272c:	2300      	movs	r3, #0
 800272e:	e048      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				if(x_c+radius > VGA_DISPLAY_X || x_c-radius < 0)
 8002730:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002732:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002734:	4413      	add	r3, r2
 8002736:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800273a:	dc04      	bgt.n	8002746 <LogicLayer_CommandSwitch+0x43a>
 800273c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800273e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	da04      	bge.n	8002750 <LogicLayer_CommandSwitch+0x444>
				{
					API_err_handler(X_TO_HIGH);
 8002746:	200d      	movs	r0, #13
 8002748:	f7ff fbac 	bl	8001ea4 <API_err_handler>
					return 0;
 800274c:	2300      	movs	r3, #0
 800274e:	e038      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_c > VGA_DISPLAY_Y)
 8002750:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002752:	2bf0      	cmp	r3, #240	; 0xf0
 8002754:	d904      	bls.n	8002760 <LogicLayer_CommandSwitch+0x454>
				{
					API_err_handler(Y_OUT_OF_BOUNDS);
 8002756:	2003      	movs	r0, #3
 8002758:	f7ff fba4 	bl	8001ea4 <API_err_handler>
					return 0;
 800275c:	2300      	movs	r3, #0
 800275e:	e030      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_c+radius > VGA_DISPLAY_Y || y_c-radius < 0)
 8002760:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002762:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002764:	4413      	add	r3, r2
 8002766:	2bf0      	cmp	r3, #240	; 0xf0
 8002768:	dc04      	bgt.n	8002774 <LogicLayer_CommandSwitch+0x468>
 800276a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800276c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	da04      	bge.n	800277e <LogicLayer_CommandSwitch+0x472>
				{
					API_err_handler(Y_TO_HIGH);
 8002774:	200c      	movs	r0, #12
 8002776:	f7ff fb95 	bl	8001ea4 <API_err_handler>
					return 0;
 800277a:	2300      	movs	r3, #0
 800277c:	e021      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
				}
				API_draw_circle(x_c, y_c, radius, color);
 800277e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002782:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8002784:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8002786:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8002788:	f7fe fd3e 	bl	8001208 <API_draw_circle>

				break;
 800278c:	e018      	b.n	80027c0 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 800278e:	2001      	movs	r0, #1
 8002790:	f7ff fb88 	bl	8001ea4 <API_err_handler>
			return 0;
 8002794:	2300      	movs	r3, #0
 8002796:	e014      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
		}

		case 9:
		{
			if (PlocalParser->Variable_length-1 == 1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d102      	bne.n	80027a6 <LogicLayer_CommandSwitch+0x49a>
			{
				API_blur_screen();
 80027a0:	f7ff faec 	bl	8001d7c <API_blur_screen>
				break;
 80027a4:	e00c      	b.n	80027c0 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7ff fb7c 	bl	8001ea4 <API_err_handler>
			return 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e008      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
		}

		case 10:
		{
			API_err_handler(HELP);
 80027b0:	2012      	movs	r0, #18
 80027b2:	f7ff fb77 	bl	8001ea4 <API_err_handler>
		}
		default:
		{
			API_err_handler(NO_ERROR);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7ff fb74 	bl	8001ea4 <API_err_handler>
			return 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <LogicLayer_CommandSwitch+0x4b6>
		}
	}
	return NO_ERROR;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3738      	adds	r7, #56	; 0x38
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bdb0      	pop	{r4, r5, r7, pc}
 80027ca:	bf00      	nop

080027cc <LogicLayer_ColourCheck>:
 *
 * @return returned nul tenzij de kleur niet is gevonden
 *
 *****************************************************************************/
int LogicLayer_ColourCheck(Message_parser* PlocalParser, unsigned char StructLocation)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	70fb      	strb	r3, [r7, #3]
	int i;
	unsigned char stringLength = sizeof(message_col_string) / sizeof(message_col_string[0])+1;
 80027d8:	2310      	movs	r3, #16
 80027da:	72fb      	strb	r3, [r7, #11]
	unsigned char stringCheck = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCorrect = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	727b      	strb	r3, [r7, #9]

	for (i = 1; i < stringLength; i++)
 80027e4:	2301      	movs	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e020      	b.n	800282c <LogicLayer_ColourCheck+0x60>
	{
		stringCheck = strcmp(PlocalParser->Parser_Message[StructLocation],message_col_string[i-1]);
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	2232      	movs	r2, #50	; 0x32
 80027ee:	fb02 f303 	mul.w	r3, r2, r3
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	1c58      	adds	r0, r3, #1
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e5a      	subs	r2, r3, #1
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4a0f      	ldr	r2, [pc, #60]	; (8002844 <LogicLayer_ColourCheck+0x78>)
 8002806:	4413      	add	r3, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f7fd fce1 	bl	80001d0 <strcmp>
 800280e:	4603      	mov	r3, r0
 8002810:	72bb      	strb	r3, [r7, #10]
		if (stringCheck == 0)
 8002812:	7abb      	ldrb	r3, [r7, #10]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d106      	bne.n	8002826 <LogicLayer_ColourCheck+0x5a>
		{
			return stringCorrect = message_col[i-1];
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3b01      	subs	r3, #1
 800281c:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <LogicLayer_ColourCheck+0x7c>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	727b      	strb	r3, [r7, #9]
 8002822:	7a7b      	ldrb	r3, [r7, #9]
 8002824:	e00a      	b.n	800283c <LogicLayer_ColourCheck+0x70>
	for (i = 1; i < stringLength; i++)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3301      	adds	r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	429a      	cmp	r2, r3
 8002832:	dbda      	blt.n	80027ea <LogicLayer_ColourCheck+0x1e>
		}
	}

	API_err_handler(UNKNOWN_COLOR);
 8002834:	2006      	movs	r0, #6
 8002836:	f7ff fb35 	bl	8001ea4 <API_err_handler>
	return 0;
 800283a:	2300      	movs	r3, #0

}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	080160b4 	.word	0x080160b4
 8002848:	080161e0 	.word	0x080161e0

0800284c <LogicLayer_intToAscii>:
 *
 * @return returned nul tenzij de gegeven waardes geen cijfer is
 *
 *****************************************************************************/
unsigned int LogicLayer_intToAscii(Message_parser* PlocalParser, int numbersize, int StructLocation)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	unsigned char i = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	77fb      	strb	r3, [r7, #31]
	unsigned char DecimalshiftBuff = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]
	unsigned int decimalvalue = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < numbersize; i++)
 8002864:	2300      	movs	r3, #0
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e020      	b.n	80028ac <LogicLayer_intToAscii+0x60>
	{

		DecimalshiftBuff = PlocalParser->Parser_Message[StructLocation][i];	// making sure array doesnt have a negative number
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	68f9      	ldr	r1, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	2032      	movs	r0, #50	; 0x32
 8002872:	fb00 f202 	mul.w	r2, r0, r2
 8002876:	440a      	add	r2, r1
 8002878:	4413      	add	r3, r2
 800287a:	3301      	adds	r3, #1
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	75fb      	strb	r3, [r7, #23]
		if (DecimalshiftBuff < '0' ||  DecimalshiftBuff > '9')
 8002880:	7dfb      	ldrb	r3, [r7, #23]
 8002882:	2b2f      	cmp	r3, #47	; 0x2f
 8002884:	d90f      	bls.n	80028a6 <LogicLayer_intToAscii+0x5a>
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b39      	cmp	r3, #57	; 0x39
 800288a:	d80c      	bhi.n	80028a6 <LogicLayer_intToAscii+0x5a>
		{

		}
		else
		{
			DecimalshiftBuff -= '0';
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	3b30      	subs	r3, #48	; 0x30
 8002890:	75fb      	strb	r3, [r7, #23]

			decimalvalue *= 10;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	61bb      	str	r3, [r7, #24]
			decimalvalue += DecimalshiftBuff;
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4413      	add	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 80028a6:	7ffb      	ldrb	r3, [r7, #31]
 80028a8:	3301      	adds	r3, #1
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	7ffb      	ldrb	r3, [r7, #31]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	dcda      	bgt.n	800286a <LogicLayer_intToAscii+0x1e>
		}
	}
	return decimalvalue;
 80028b4:	69bb      	ldr	r3, [r7, #24]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_DMA_Init+0x3c>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a0b      	ldr	r2, [pc, #44]	; (8002900 <MX_DMA_Init+0x3c>)
 80028d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_DMA_Init+0x3c>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	2044      	movs	r0, #68	; 0x44
 80028ec:	f001 f85b 	bl	80039a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80028f0:	2044      	movs	r0, #68	; 0x44
 80028f2:	f001 f874 	bl	80039de <HAL_NVIC_EnableIRQ>

}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023800 	.word	0x40023800

08002904 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290a:	f107 0314 	add.w	r3, r7, #20
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <MX_GPIO_Init+0x108>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a3a      	ldr	r2, [pc, #232]	; (8002a0c <MX_GPIO_Init+0x108>)
 8002924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <MX_GPIO_Init+0x108>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	4b34      	ldr	r3, [pc, #208]	; (8002a0c <MX_GPIO_Init+0x108>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a33      	ldr	r2, [pc, #204]	; (8002a0c <MX_GPIO_Init+0x108>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <MX_GPIO_Init+0x108>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <MX_GPIO_Init+0x108>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a2c      	ldr	r2, [pc, #176]	; (8002a0c <MX_GPIO_Init+0x108>)
 800295c:	f043 0310 	orr.w	r3, r3, #16
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <MX_GPIO_Init+0x108>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <MX_GPIO_Init+0x108>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <MX_GPIO_Init+0x108>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <MX_GPIO_Init+0x108>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800298a:	2200      	movs	r2, #0
 800298c:	2102      	movs	r1, #2
 800298e:	4820      	ldr	r0, [pc, #128]	; (8002a10 <MX_GPIO_Init+0x10c>)
 8002990:	f001 fdde 	bl	8004550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8002994:	2200      	movs	r2, #0
 8002996:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800299a:	481e      	ldr	r0, [pc, #120]	; (8002a14 <MX_GPIO_Init+0x110>)
 800299c:	f001 fdd8 	bl	8004550 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 80029a0:	2200      	movs	r2, #0
 80029a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029a6:	481c      	ldr	r0, [pc, #112]	; (8002a18 <MX_GPIO_Init+0x114>)
 80029a8:	f001 fdd2 	bl	8004550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80029ac:	2302      	movs	r3, #2
 80029ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b0:	2301      	movs	r3, #1
 80029b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029b4:	2301      	movs	r3, #1
 80029b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b8:	2300      	movs	r3, #0
 80029ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	4813      	ldr	r0, [pc, #76]	; (8002a10 <MX_GPIO_Init+0x10c>)
 80029c4:	f001 fc28 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80029c8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80029cc:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ce:	2301      	movs	r3, #1
 80029d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <MX_GPIO_Init+0x110>)
 80029e2:	f001 fc19 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80029e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	4806      	ldr	r0, [pc, #24]	; (8002a18 <MX_GPIO_Init+0x114>)
 8002a00:	f001 fc0a 	bl	8004218 <HAL_GPIO_Init>

}
 8002a04:	bf00      	nop
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40020400 	.word	0x40020400

08002a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a24:	f000 fe4e 	bl	80036c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a28:	f000 f8b0 	bl	8002b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a2c:	f7ff ff6a 	bl	8002904 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a30:	f7ff ff48 	bl	80028c4 <MX_DMA_Init>
  MX_TIM1_Init();
 8002a34:	f000 fb9c 	bl	8003170 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002a38:	f000 fbea 	bl	8003210 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002a3c:	f000 fd00 	bl	8003440 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002a40:	f004 fefa 	bl	8007838 <MX_FATFS_Init>
  MX_SPI1_Init();
 8002a44:	f000 f926 	bl	8002c94 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8002a48:	f000 fd9e 	bl	8003588 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f000 fded 	bl	800362c <UB_VGA_FillScreen>
  unsigned int i = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
  for(i = 0; i < LINE_BUFLEN; i++)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002a5e:	e00b      	b.n	8002a78 <main+0x5c>
	  input.line_rx_buffer[i] = 0;
 8002a60:	4a46      	ldr	r2, [pc, #280]	; (8002b7c <main+0x160>)
 8002a62:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002a66:	4413      	add	r3, r2
 8002a68:	3301      	adds	r3, #1
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8002a6e:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002a72:	3301      	adds	r3, #1
 8002a74:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002a78:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a80:	d3ee      	bcc.n	8002a60 <main+0x44>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8002a82:	4b3e      	ldr	r3, [pc, #248]	; (8002b7c <main+0x160>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8002a88:	4b3c      	ldr	r3, [pc, #240]	; (8002b7c <main+0x160>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 8002a90:	4b3a      	ldr	r3, [pc, #232]	; (8002b7c <main+0x160>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, LINE_BUFLEN);
 8002a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a9c:	4937      	ldr	r1, [pc, #220]	; (8002b7c <main+0x160>)
 8002a9e:	4838      	ldr	r0, [pc, #224]	; (8002b80 <main+0x164>)
 8002aa0:	f003 ff27 	bl	80068f2 <HAL_UART_Receive_IT>

  int Test = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 8002aaa:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <main+0x160>)
 8002aac:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8002ab0:	2bff      	cmp	r3, #255	; 0xff
 8002ab2:	d1fa      	bne.n	8002aaa <main+0x8e>
	  {
		  Debugging = LogicLayer_Parser(input.line_rx_buffer, LINE_BUFLEN);
 8002ab4:	4c33      	ldr	r4, [pc, #204]	; (8002b84 <main+0x168>)
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002abc:	4932      	ldr	r1, [pc, #200]	; (8002b88 <main+0x16c>)
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fb12 	bl	80020e8 <LogicLayer_Parser>
 8002ac4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002ac8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002acc:	4620      	mov	r0, r4
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f007 fdaf 	bl	800a638 <memcpy>
		  Test = LogicLayer_CommandCheck(&Debugging);
 8002ada:	482a      	ldr	r0, [pc, #168]	; (8002b84 <main+0x168>)
 8002adc:	f7ff fbde 	bl	800229c <LogicLayer_CommandCheck>
 8002ae0:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
		  if (Test == 0)
 8002ae4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d006      	beq.n	8002afa <main+0xde>
		  {
			  //error handler
		  }
		  else
		  {
			  LogicLayer_CommandSwitch(&Debugging, Test);
 8002aec:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4619      	mov	r1, r3
 8002af4:	4823      	ldr	r0, [pc, #140]	; (8002b84 <main+0x168>)
 8002af6:	f7ff fc09 	bl	800230c <LogicLayer_CommandSwitch>
		  }
		  for(i = 0; i < LINE_BUFLEN; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002b00:	e00b      	b.n	8002b1a <main+0xfe>
			  input.line_rx_buffer[i] = 0;
 8002b02:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <main+0x160>)
 8002b04:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b08:	4413      	add	r3, r2
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
		  for(i = 0; i < LINE_BUFLEN; i++)
 8002b10:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b14:	3301      	adds	r3, #1
 8002b16:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002b1a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b22:	d3ee      	bcc.n	8002b02 <main+0xe6>
		  for (i = 0; i < ARGUMENTEN_LEN; i++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002b2a:	e01e      	b.n	8002b6a <main+0x14e>
			  for (int j = 0; j < BUFFER_LEN_PARSER; j++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8002b32:	e011      	b.n	8002b58 <main+0x13c>
				  Debugging.Parser_Message[i][j] = 0;
 8002b34:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <main+0x168>)
 8002b36:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b3a:	2132      	movs	r1, #50	; 0x32
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	441a      	add	r2, r3
 8002b42:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002b46:	4413      	add	r3, r2
 8002b48:	3301      	adds	r3, #1
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
			  for (int j = 0; j < BUFFER_LEN_PARSER; j++)
 8002b4e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002b52:	3301      	adds	r3, #1
 8002b54:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8002b58:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002b5c:	2b31      	cmp	r3, #49	; 0x31
 8002b5e:	dde9      	ble.n	8002b34 <main+0x118>
		  for (i = 0; i < ARGUMENTEN_LEN; i++)
 8002b60:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b64:	3301      	adds	r3, #1
 8002b66:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002b6a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b6e:	2b13      	cmp	r3, #19
 8002b70:	d9dc      	bls.n	8002b2c <main+0x110>
		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8002b72:	4b02      	ldr	r3, [pc, #8]	; (8002b7c <main+0x160>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8002b7a:	e796      	b.n	8002aaa <main+0x8e>
 8002b7c:	200000a4 	.word	0x200000a4
 8002b80:	200009ec 	.word	0x200009ec
 8002b84:	200004b4 	.word	0x200004b4
 8002b88:	200000a5 	.word	0x200000a5

08002b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b094      	sub	sp, #80	; 0x50
 8002b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b92:	f107 0320 	add.w	r3, r7, #32
 8002b96:	2230      	movs	r2, #48	; 0x30
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f007 fd5a 	bl	800a654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <SystemClock_Config+0xcc>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <SystemClock_Config+0xcc>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc0:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <SystemClock_Config+0xcc>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bcc:	2300      	movs	r3, #0
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	4b22      	ldr	r3, [pc, #136]	; (8002c5c <SystemClock_Config+0xd0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <SystemClock_Config+0xd0>)
 8002bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <SystemClock_Config+0xd0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c00:	23a8      	movs	r3, #168	; 0xa8
 8002c02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c04:	2302      	movs	r3, #2
 8002c06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c08:	2307      	movs	r3, #7
 8002c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c0c:	f107 0320 	add.w	r3, r7, #32
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fcb7 	bl	8004584 <HAL_RCC_OscConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c1c:	f000 f832 	bl	8002c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c20:	230f      	movs	r3, #15
 8002c22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c24:	2302      	movs	r3, #2
 8002c26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	2105      	movs	r1, #5
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 ff18 	bl	8004a74 <HAL_RCC_ClockConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c4a:	f000 f81b 	bl	8002c84 <Error_Handler>
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3750      	adds	r7, #80	; 0x50
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40007000 	.word	0x40007000

08002c60 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8002c68:	1d39      	adds	r1, r7, #4
 8002c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4803      	ldr	r0, [pc, #12]	; (8002c80 <__io_putchar+0x20>)
 8002c72:	f003 fdac 	bl	80067ce <HAL_UART_Transmit>
	return ch;												//Return the character
 8002c76:	687b      	ldr	r3, [r7, #4]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200009ec 	.word	0x200009ec

08002c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002c9a:	4a18      	ldr	r2, [pc, #96]	; (8002cfc <MX_SPI1_Init+0x68>)
 8002c9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002ca0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ca4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cb8:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002cc8:	2238      	movs	r2, #56	; 0x38
 8002cca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002ce0:	220a      	movs	r2, #10
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ce4:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <MX_SPI1_Init+0x64>)
 8002ce6:	f002 f8e5 	bl	8004eb4 <HAL_SPI_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cf0:	f7ff ffc8 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cf4:	bf00      	nop
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	200008a0 	.word	0x200008a0
 8002cfc:	40013000 	.word	0x40013000

08002d00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	; (8002dc0 <HAL_SPI_MspInit+0xc0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d149      	bne.n	8002db6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <HAL_SPI_MspInit+0xc4>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	4a26      	ldr	r2, [pc, #152]	; (8002dc4 <HAL_SPI_MspInit+0xc4>)
 8002d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d30:	6453      	str	r3, [r2, #68]	; 0x44
 8002d32:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <HAL_SPI_MspInit+0xc4>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_SPI_MspInit+0xc4>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <HAL_SPI_MspInit+0xc4>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_SPI_MspInit+0xc4>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_SPI_MspInit+0xc4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_SPI_MspInit+0xc4>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <HAL_SPI_MspInit+0xc4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d76:	23c0      	movs	r3, #192	; 0xc0
 8002d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d86:	2305      	movs	r3, #5
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	4619      	mov	r1, r3
 8002d90:	480d      	ldr	r0, [pc, #52]	; (8002dc8 <HAL_SPI_MspInit+0xc8>)
 8002d92:	f001 fa41 	bl	8004218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d96:	2308      	movs	r3, #8
 8002d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002da6:	2305      	movs	r3, #5
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	4619      	mov	r1, r3
 8002db0:	4806      	ldr	r0, [pc, #24]	; (8002dcc <HAL_SPI_MspInit+0xcc>)
 8002db2:	f001 fa31 	bl	8004218 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002db6:	bf00      	nop
 8002db8:	3728      	adds	r7, #40	; 0x28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40013000 	.word	0x40013000
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	40020400 	.word	0x40020400

08002dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <HAL_MspInit+0x4c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <HAL_MspInit+0x4c>)
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <HAL_MspInit+0x4c>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_MspInit+0x4c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_MspInit+0x4c>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_MspInit+0x4c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <HardFault_Handler+0x4>

08002e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <MemManage_Handler+0x4>

08002e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <BusFault_Handler+0x4>

08002e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <UsageFault_Handler+0x4>

08002e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e74:	f000 fc78 	bl	8003768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e80:	4828      	ldr	r0, [pc, #160]	; (8002f24 <TIM2_IRQHandler+0xa8>)
 8002e82:	f002 fdf3 	bl	8005a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8002e86:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <TIM2_IRQHandler+0xa8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f06f 0208 	mvn.w	r2, #8
 8002e8e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002e9a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8002ea4:	d905      	bls.n	8002eb2 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8002eac:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <TIM2_IRQHandler+0xb0>)
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002eb0:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d802      	bhi.n	8002ec0 <TIM2_IRQHandler+0x44>
 8002eba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ebe:	e001      	b.n	8002ec4 <TIM2_IRQHandler+0x48>
 8002ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec4:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <TIM2_IRQHandler+0xb4>)
 8002ec6:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	2b23      	cmp	r3, #35	; 0x23
 8002ece:	d927      	bls.n	8002f20 <TIM2_IRQHandler+0xa4>
 8002ed0:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	f240 2202 	movw	r2, #514	; 0x202
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d821      	bhi.n	8002f20 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8002edc:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <TIM2_IRQHandler+0xb8>)
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <TIM2_IRQHandler+0xb8>)
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <TIM2_IRQHandler+0xbc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <TIM2_IRQHandler+0xbc>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8002ef8:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <TIM2_IRQHandler+0xc0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <TIM2_IRQHandler+0xc0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8002f08:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f203 1341 	addw	r3, r3, #321	; 0x141
 8002f1c:	4a02      	ldr	r2, [pc, #8]	; (8002f28 <TIM2_IRQHandler+0xac>)
 8002f1e:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000944 	.word	0x20000944
 8002f28:	20013720 	.word	0x20013720
 8002f2c:	20000a30 	.word	0x20000a30
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40026488 	.word	0x40026488
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	2000098c 	.word	0x2000098c

08002f40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <USART2_IRQHandler+0x70>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	2b0a      	cmp	r3, #10
 8002f50:	d026      	beq.n	8002fa0 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b0d      	cmp	r3, #13
 8002f56:	d002      	beq.n	8002f5e <USART2_IRQHandler+0x1e>
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8002f5c:	d10e      	bne.n	8002f7c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <USART2_IRQHandler+0x74>)
 8002f60:	22ff      	movs	r2, #255	; 0xff
 8002f62:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <USART2_IRQHandler+0x74>)
 8002f68:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f6c:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <USART2_IRQHandler+0x74>)
 8002f6e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <USART2_IRQHandler+0x74>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002f7a:	e011      	b.n	8002fa0 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <USART2_IRQHandler+0x74>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <USART2_IRQHandler+0x74>)
 8002f86:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	; (8002fb4 <USART2_IRQHandler+0x74>)
 8002f8c:	4413      	add	r3, r2
 8002f8e:	79fa      	ldrb	r2, [r7, #7]
 8002f90:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <USART2_IRQHandler+0x74>)
 8002f94:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f98:	3301      	adds	r3, #1
 8002f9a:	4a06      	ldr	r2, [pc, #24]	; (8002fb4 <USART2_IRQHandler+0x74>)
 8002f9c:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <USART2_IRQHandler+0x78>)
 8002fa2:	f003 fcd7 	bl	8006954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40004400 	.word	0x40004400
 8002fb4:	200000a4 	.word	0x200000a4
 8002fb8:	200009ec 	.word	0x200009ec

08002fbc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <DMA2_Stream5_IRQHandler+0x48>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6a1a      	ldr	r2, [r3, #32]
 8002fc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10f      	bne.n	8002ff0 <DMA2_Stream5_IRQHandler+0x34>
 8002fd0:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <DMA2_Stream5_IRQHandler+0x48>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a1a      	ldr	r2, [r3, #32]
 8002fd6:	f240 4344 	movw	r3, #1092	; 0x444
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <DMA2_Stream5_IRQHandler+0x34>
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <DMA2_Stream5_IRQHandler+0x48>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <DMA2_Stream5_IRQHandler+0x48>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <DMA2_Stream5_IRQHandler+0x4c>)
 8002ff2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002ff8:	4804      	ldr	r0, [pc, #16]	; (800300c <DMA2_Stream5_IRQHandler+0x50>)
 8002ffa:	f000 fea3 	bl	8003d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200008fc 	.word	0x200008fc
 8003008:	40021000 	.word	0x40021000
 800300c:	2000098c 	.word	0x2000098c

08003010 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	e00a      	b.n	8003038 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003022:	f3af 8000 	nop.w
 8003026:	4601      	mov	r1, r0
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	60ba      	str	r2, [r7, #8]
 800302e:	b2ca      	uxtb	r2, r1
 8003030:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	429a      	cmp	r2, r3
 800303e:	dbf0      	blt.n	8003022 <_read+0x12>
	}

return len;
 8003040:	687b      	ldr	r3, [r7, #4]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e009      	b.n	8003070 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	60ba      	str	r2, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fdfb 	bl	8002c60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3301      	adds	r3, #1
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	dbf1      	blt.n	800305c <_write+0x12>
	}
	return len;
 8003078:	687b      	ldr	r3, [r7, #4]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <_close>:

int _close(int file)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
	return -1;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030aa:	605a      	str	r2, [r3, #4]
	return 0;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <_isatty>:

int _isatty(int file)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
	return 1;
 80030c2:	2301      	movs	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
	return 0;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <_sbrk+0x50>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d102      	bne.n	8003102 <_sbrk+0x16>
		heap_end = &end;
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <_sbrk+0x50>)
 80030fe:	4a10      	ldr	r2, [pc, #64]	; (8003140 <_sbrk+0x54>)
 8003100:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <_sbrk+0x50>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <_sbrk+0x50>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	466a      	mov	r2, sp
 8003112:	4293      	cmp	r3, r2
 8003114:	d907      	bls.n	8003126 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003116:	f007 fa65 	bl	800a5e4 <__errno>
 800311a:	4603      	mov	r3, r0
 800311c:	220c      	movs	r2, #12
 800311e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
 8003124:	e006      	b.n	8003134 <_sbrk+0x48>
	}

	heap_end += incr;
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <_sbrk+0x50>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	4a03      	ldr	r2, [pc, #12]	; (800313c <_sbrk+0x50>)
 8003130:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003132:	68fb      	ldr	r3, [r7, #12]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200008f8 	.word	0x200008f8
 8003140:	20013788 	.word	0x20013788

08003144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <SystemInit+0x28>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	4a07      	ldr	r2, [pc, #28]	; (800316c <SystemInit+0x28>)
 8003150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <SystemInit+0x28>)
 800315a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800315e:	609a      	str	r2, [r3, #8]
#endif
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003176:	f107 0308 	add.w	r3, r7, #8
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003184:	463b      	mov	r3, r7
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800318c:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <MX_TIM1_Init+0x98>)
 800318e:	4a1f      	ldr	r2, [pc, #124]	; (800320c <MX_TIM1_Init+0x9c>)
 8003190:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <MX_TIM1_Init+0x98>)
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003198:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <MX_TIM1_Init+0x98>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 800319e:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <MX_TIM1_Init+0x98>)
 80031a0:	220b      	movs	r2, #11
 80031a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031a4:	4b18      	ldr	r3, [pc, #96]	; (8003208 <MX_TIM1_Init+0x98>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <MX_TIM1_Init+0x98>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031b0:	4b15      	ldr	r3, [pc, #84]	; (8003208 <MX_TIM1_Init+0x98>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031b6:	4814      	ldr	r0, [pc, #80]	; (8003208 <MX_TIM1_Init+0x98>)
 80031b8:	f002 f972 	bl	80054a0 <HAL_TIM_Base_Init>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80031c2:	f7ff fd5f 	bl	8002c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	4619      	mov	r1, r3
 80031d2:	480d      	ldr	r0, [pc, #52]	; (8003208 <MX_TIM1_Init+0x98>)
 80031d4:	f002 fe14 	bl	8005e00 <HAL_TIM_ConfigClockSource>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80031de:	f7ff fd51 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031ea:	463b      	mov	r3, r7
 80031ec:	4619      	mov	r1, r3
 80031ee:	4806      	ldr	r0, [pc, #24]	; (8003208 <MX_TIM1_Init+0x98>)
 80031f0:	f003 fa10 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80031fa:	f7ff fd43 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80031fe:	bf00      	nop
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	200008fc 	.word	0x200008fc
 800320c:	40010000 	.word	0x40010000

08003210 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003216:	f107 0320 	add.w	r3, r7, #32
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003220:	1d3b      	adds	r3, r7, #4
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	609a      	str	r2, [r3, #8]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	611a      	str	r2, [r3, #16]
 800322e:	615a      	str	r2, [r3, #20]
 8003230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003232:	4b2a      	ldr	r3, [pc, #168]	; (80032dc <MX_TIM2_Init+0xcc>)
 8003234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003238:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 800323a:	4b28      	ldr	r3, [pc, #160]	; (80032dc <MX_TIM2_Init+0xcc>)
 800323c:	2200      	movs	r2, #0
 800323e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003240:	4b26      	ldr	r3, [pc, #152]	; (80032dc <MX_TIM2_Init+0xcc>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8003246:	4b25      	ldr	r3, [pc, #148]	; (80032dc <MX_TIM2_Init+0xcc>)
 8003248:	f640 226b 	movw	r2, #2667	; 0xa6b
 800324c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <MX_TIM2_Init+0xcc>)
 8003250:	2200      	movs	r2, #0
 8003252:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003254:	4b21      	ldr	r3, [pc, #132]	; (80032dc <MX_TIM2_Init+0xcc>)
 8003256:	2200      	movs	r2, #0
 8003258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800325a:	4820      	ldr	r0, [pc, #128]	; (80032dc <MX_TIM2_Init+0xcc>)
 800325c:	f002 f9d8 	bl	8005610 <HAL_TIM_PWM_Init>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8003266:	f7ff fd0d 	bl	8002c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800326e:	2300      	movs	r3, #0
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003272:	f107 0320 	add.w	r3, r7, #32
 8003276:	4619      	mov	r1, r3
 8003278:	4818      	ldr	r0, [pc, #96]	; (80032dc <MX_TIM2_Init+0xcc>)
 800327a:	f003 f9cb 	bl	8006614 <HAL_TIMEx_MasterConfigSynchronization>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8003284:	f7ff fcfe 	bl	8002c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003288:	2360      	movs	r3, #96	; 0x60
 800328a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 800328c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8003290:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003292:	2302      	movs	r3, #2
 8003294:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	2208      	movs	r2, #8
 800329e:	4619      	mov	r1, r3
 80032a0:	480e      	ldr	r0, [pc, #56]	; (80032dc <MX_TIM2_Init+0xcc>)
 80032a2:	f002 fceb 	bl	8005c7c <HAL_TIM_PWM_ConfigChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80032ac:	f7ff fcea 	bl	8002c84 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 80032b0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80032b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	220c      	movs	r2, #12
 80032ba:	4619      	mov	r1, r3
 80032bc:	4807      	ldr	r0, [pc, #28]	; (80032dc <MX_TIM2_Init+0xcc>)
 80032be:	f002 fcdd 	bl	8005c7c <HAL_TIM_PWM_ConfigChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80032c8:	f7ff fcdc 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032cc:	4803      	ldr	r0, [pc, #12]	; (80032dc <MX_TIM2_Init+0xcc>)
 80032ce:	f000 f87f 	bl	80033d0 <HAL_TIM_MspPostInit>

}
 80032d2:	bf00      	nop
 80032d4:	3728      	adds	r7, #40	; 0x28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000944 	.word	0x20000944

080032e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a21      	ldr	r2, [pc, #132]	; (8003374 <HAL_TIM_Base_MspInit+0x94>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d13c      	bne.n	800336c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <HAL_TIM_Base_MspInit+0x98>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	4a1f      	ldr	r2, [pc, #124]	; (8003378 <HAL_TIM_Base_MspInit+0x98>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6453      	str	r3, [r2, #68]	; 0x44
 8003302:	4b1d      	ldr	r3, [pc, #116]	; (8003378 <HAL_TIM_Base_MspInit+0x98>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800330e:	4b1b      	ldr	r3, [pc, #108]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <HAL_TIM_Base_MspInit+0xa0>)
 8003312:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 8003316:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800331a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800331c:	4b17      	ldr	r3, [pc, #92]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 800331e:	2240      	movs	r2, #64	; 0x40
 8003320:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003322:	4b16      	ldr	r3, [pc, #88]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 8003324:	2200      	movs	r2, #0
 8003326:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003328:	4b14      	ldr	r3, [pc, #80]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 800332a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800332e:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 8003332:	2200      	movs	r2, #0
 8003334:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003336:	4b11      	ldr	r3, [pc, #68]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 800333e:	2200      	movs	r2, #0
 8003340:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 8003344:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003348:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 800334c:	2200      	movs	r2, #0
 800334e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003350:	480a      	ldr	r0, [pc, #40]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 8003352:	f000 fb5f 	bl	8003a14 <HAL_DMA_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 800335c:	f7ff fc92 	bl	8002c84 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a06      	ldr	r2, [pc, #24]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 8003364:	621a      	str	r2, [r3, #32]
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <HAL_TIM_Base_MspInit+0x9c>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40010000 	.word	0x40010000
 8003378:	40023800 	.word	0x40023800
 800337c:	2000098c 	.word	0x2000098c
 8003380:	40026488 	.word	0x40026488

08003384 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003394:	d115      	bne.n	80033c2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <HAL_TIM_PWM_MspInit+0x48>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <HAL_TIM_PWM_MspInit+0x48>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_TIM_PWM_MspInit+0x48>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	201c      	movs	r0, #28
 80033b8:	f000 faf5 	bl	80039a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033bc:	201c      	movs	r0, #28
 80033be:	f000 fb0e 	bl	80039de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d8:	f107 030c 	add.w	r3, r7, #12
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	60da      	str	r2, [r3, #12]
 80033e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d11e      	bne.n	8003430 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_TIM_MspPostInit+0x68>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <HAL_TIM_MspPostInit+0x68>)
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_TIM_MspPostInit+0x68>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 800340e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003414:	2302      	movs	r3, #2
 8003416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341c:	2303      	movs	r3, #3
 800341e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003420:	2301      	movs	r3, #1
 8003422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8003424:	f107 030c 	add.w	r3, r7, #12
 8003428:	4619      	mov	r1, r3
 800342a:	4804      	ldr	r0, [pc, #16]	; (800343c <HAL_TIM_MspPostInit+0x6c>)
 800342c:	f000 fef4 	bl	8004218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003430:	bf00      	nop
 8003432:	3720      	adds	r7, #32
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40023800 	.word	0x40023800
 800343c:	40020400 	.word	0x40020400

08003440 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <MX_USART2_UART_Init+0x50>)
 8003448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <MX_USART2_UART_Init+0x4c>)
 800344c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <MX_USART2_UART_Init+0x4c>)
 800345a:	2200      	movs	r2, #0
 800345c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003460:	2200      	movs	r2, #0
 8003462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003466:	220c      	movs	r2, #12
 8003468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <MX_USART2_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003476:	4805      	ldr	r0, [pc, #20]	; (800348c <MX_USART2_UART_Init+0x4c>)
 8003478:	f003 f95c 	bl	8006734 <HAL_UART_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003482:	f7ff fbff 	bl	8002c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200009ec 	.word	0x200009ec
 8003490:	40004400 	.word	0x40004400

08003494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	f107 0314 	add.w	r3, r7, #20
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_UART_MspInit+0x94>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d133      	bne.n	800351e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	4b1c      	ldr	r3, [pc, #112]	; (800352c <HAL_UART_MspInit+0x98>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	4a1b      	ldr	r2, [pc, #108]	; (800352c <HAL_UART_MspInit+0x98>)
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c4:	6413      	str	r3, [r2, #64]	; 0x40
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_UART_MspInit+0x98>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	613b      	str	r3, [r7, #16]
 80034d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_UART_MspInit+0x98>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	4a14      	ldr	r2, [pc, #80]	; (800352c <HAL_UART_MspInit+0x98>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30
 80034e2:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_UART_MspInit+0x98>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034ee:	230c      	movs	r3, #12
 80034f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f2:	2302      	movs	r3, #2
 80034f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fa:	2303      	movs	r3, #3
 80034fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034fe:	2307      	movs	r3, #7
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003502:	f107 0314 	add.w	r3, r7, #20
 8003506:	4619      	mov	r1, r3
 8003508:	4809      	ldr	r0, [pc, #36]	; (8003530 <HAL_UART_MspInit+0x9c>)
 800350a:	f000 fe85 	bl	8004218 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	2026      	movs	r0, #38	; 0x26
 8003514:	f000 fa47 	bl	80039a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003518:	2026      	movs	r0, #38	; 0x26
 800351a:	f000 fa60 	bl	80039de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800351e:	bf00      	nop
 8003520:	3728      	adds	r7, #40	; 0x28
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40004400 	.word	0x40004400
 800352c:	40023800 	.word	0x40023800
 8003530:	40020000 	.word	0x40020000

08003534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003534:	f8df d034 	ldr.w	sp, [pc, #52]	; 800356c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003538:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800353a:	e003      	b.n	8003544 <LoopCopyDataInit>

0800353c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800353c:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800353e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003540:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003542:	3104      	adds	r1, #4

08003544 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003544:	480b      	ldr	r0, [pc, #44]	; (8003574 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003548:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800354a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800354c:	d3f6      	bcc.n	800353c <CopyDataInit>
  ldr  r2, =_sbss
 800354e:	4a0b      	ldr	r2, [pc, #44]	; (800357c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003550:	e002      	b.n	8003558 <LoopFillZerobss>

08003552 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003552:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003554:	f842 3b04 	str.w	r3, [r2], #4

08003558 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800355a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800355c:	d3f9      	bcc.n	8003552 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800355e:	f7ff fdf1 	bl	8003144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003562:	f007 f845 	bl	800a5f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003566:	f7ff fa59 	bl	8002a1c <main>
  bx  lr    
 800356a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800356c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003570:	08016370 	.word	0x08016370
  ldr  r0, =_sdata
 8003574:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003578:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 800357c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8003580:	20013788 	.word	0x20013788

08003584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003584:	e7fe      	b.n	8003584 <ADC_IRQHandler>
	...

08003588 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 800358c:	4b1f      	ldr	r3, [pc, #124]	; (800360c <UB_VGA_Screen_Init+0x84>)
 800358e:	2200      	movs	r2, #0
 8003590:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <UB_VGA_Screen_Init+0x84>)
 8003594:	2200      	movs	r2, #0
 8003596:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <UB_VGA_Screen_Init+0x84>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 800359e:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <UB_VGA_Screen_Init+0x88>)
 80035a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035a4:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80035a6:	481b      	ldr	r0, [pc, #108]	; (8003614 <UB_VGA_Screen_Init+0x8c>)
 80035a8:	f001 ffca 	bl	8005540 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80035ac:	210c      	movs	r1, #12
 80035ae:	4819      	ldr	r0, [pc, #100]	; (8003614 <UB_VGA_Screen_Init+0x8c>)
 80035b0:	f002 f87e 	bl	80056b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80035b4:	2108      	movs	r1, #8
 80035b6:	4817      	ldr	r0, [pc, #92]	; (8003614 <UB_VGA_Screen_Init+0x8c>)
 80035b8:	f002 f942 	bl	8005840 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80035bc:	4b16      	ldr	r3, [pc, #88]	; (8003618 <UB_VGA_Screen_Init+0x90>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <UB_VGA_Screen_Init+0x90>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035ca:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80035cc:	4b12      	ldr	r3, [pc, #72]	; (8003618 <UB_VGA_Screen_Init+0x90>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <UB_VGA_Screen_Init+0x90>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80035dc:	490f      	ldr	r1, [pc, #60]	; (800361c <UB_VGA_Screen_Init+0x94>)
 80035de:	f240 1341 	movw	r3, #321	; 0x141
 80035e2:	4a0f      	ldr	r2, [pc, #60]	; (8003620 <UB_VGA_Screen_Init+0x98>)
 80035e4:	480f      	ldr	r0, [pc, #60]	; (8003624 <UB_VGA_Screen_Init+0x9c>)
 80035e6:	f000 fac3 	bl	8003b70 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80035ea:	480e      	ldr	r0, [pc, #56]	; (8003624 <UB_VGA_Screen_Init+0x9c>)
 80035ec:	f000 fa12 	bl	8003a14 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <UB_VGA_Screen_Init+0x9c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <UB_VGA_Screen_Init+0x9c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0210 	orr.w	r2, r2, #16
 80035fe:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8003600:	4b09      	ldr	r3, [pc, #36]	; (8003628 <UB_VGA_Screen_Init+0xa0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a01      	ldr	r2, [pc, #4]	; (800360c <UB_VGA_Screen_Init+0x84>)
 8003606:	6093      	str	r3, [r2, #8]
}
 8003608:	bf00      	nop
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20013720 	.word	0x20013720
 8003610:	40020400 	.word	0x40020400
 8003614:	20000944 	.word	0x20000944
 8003618:	200008fc 	.word	0x200008fc
 800361c:	20000a30 	.word	0x20000a30
 8003620:	40021015 	.word	0x40021015
 8003624:	2000098c 	.word	0x2000098c
 8003628:	40026488 	.word	0x40026488

0800362c <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8003636:	2300      	movs	r3, #0
 8003638:	81bb      	strh	r3, [r7, #12]
 800363a:	e012      	b.n	8003662 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800363c:	2300      	movs	r3, #0
 800363e:	81fb      	strh	r3, [r7, #14]
 8003640:	e008      	b.n	8003654 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8003642:	79fa      	ldrb	r2, [r7, #7]
 8003644:	89b9      	ldrh	r1, [r7, #12]
 8003646:	89fb      	ldrh	r3, [r7, #14]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f813 	bl	8003674 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800364e:	89fb      	ldrh	r3, [r7, #14]
 8003650:	3301      	adds	r3, #1
 8003652:	81fb      	strh	r3, [r7, #14]
 8003654:	89fb      	ldrh	r3, [r7, #14]
 8003656:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800365a:	d3f2      	bcc.n	8003642 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800365c:	89bb      	ldrh	r3, [r7, #12]
 800365e:	3301      	adds	r3, #1
 8003660:	81bb      	strh	r3, [r7, #12]
 8003662:	89bb      	ldrh	r3, [r7, #12]
 8003664:	2bef      	cmp	r3, #239	; 0xef
 8003666:	d9e9      	bls.n	800363c <UB_VGA_FillScreen+0x10>
    }
  }
}
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	80fb      	strh	r3, [r7, #6]
 800367e:	460b      	mov	r3, r1
 8003680:	80bb      	strh	r3, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800368c:	d301      	bcc.n	8003692 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8003692:	88bb      	ldrh	r3, [r7, #4]
 8003694:	2bef      	cmp	r3, #239	; 0xef
 8003696:	d901      	bls.n	800369c <UB_VGA_SetPixel+0x28>
    yp = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 800369c:	88ba      	ldrh	r2, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	441a      	add	r2, r3
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	4413      	add	r3, r2
 80036ac:	4904      	ldr	r1, [pc, #16]	; (80036c0 <UB_VGA_SetPixel+0x4c>)
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	54ca      	strb	r2, [r1, r3]
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000a30 	.word	0x20000a30

080036c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <HAL_Init+0x40>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0d      	ldr	r2, [pc, #52]	; (8003704 <HAL_Init+0x40>)
 80036ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_Init+0x40>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <HAL_Init+0x40>)
 80036da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_Init+0x40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a07      	ldr	r2, [pc, #28]	; (8003704 <HAL_Init+0x40>)
 80036e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ec:	2003      	movs	r0, #3
 80036ee:	f000 f94f 	bl	8003990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036f2:	2000      	movs	r0, #0
 80036f4:	f000 f808 	bl	8003708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f8:	f7ff fb6a 	bl	8002dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023c00 	.word	0x40023c00

08003708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_InitTick+0x54>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_InitTick+0x58>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800371e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f967 	bl	80039fa <HAL_SYSTICK_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e00e      	b.n	8003754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b0f      	cmp	r3, #15
 800373a:	d80a      	bhi.n	8003752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800373c:	2200      	movs	r2, #0
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f000 f92f 	bl	80039a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003748:	4a06      	ldr	r2, [pc, #24]	; (8003764 <HAL_InitTick+0x5c>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e000      	b.n	8003754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000000 	.word	0x20000000
 8003760:	20000008 	.word	0x20000008
 8003764:	20000004 	.word	0x20000004

08003768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_IncTick+0x20>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_IncTick+0x24>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4413      	add	r3, r2
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_IncTick+0x24>)
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000008 	.word	0x20000008
 800378c:	2001372c 	.word	0x2001372c

08003790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return uwTick;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_GetTick+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	2001372c 	.word	0x2001372c

080037a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7ff ffee 	bl	8003790 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d005      	beq.n	80037ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_Delay+0x44>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ce:	bf00      	nop
 80037d0:	f7ff ffde 	bl	8003790 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d8f7      	bhi.n	80037d0 <HAL_Delay+0x28>
  {
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000008 	.word	0x20000008

080037f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <__NVIC_SetPriorityGrouping+0x44>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800380c:	4013      	ands	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800381c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003822:	4a04      	ldr	r2, [pc, #16]	; (8003834 <__NVIC_SetPriorityGrouping+0x44>)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	60d3      	str	r3, [r2, #12]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <__NVIC_GetPriorityGrouping+0x18>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	f003 0307 	and.w	r3, r3, #7
}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	2b00      	cmp	r3, #0
 8003864:	db0b      	blt.n	800387e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	4907      	ldr	r1, [pc, #28]	; (800388c <__NVIC_EnableIRQ+0x38>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2001      	movs	r0, #1
 8003876:	fa00 f202 	lsl.w	r2, r0, r2
 800387a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000e100 	.word	0xe000e100

08003890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	db0a      	blt.n	80038ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	490c      	ldr	r1, [pc, #48]	; (80038dc <__NVIC_SetPriority+0x4c>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	440b      	add	r3, r1
 80038b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b8:	e00a      	b.n	80038d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4908      	ldr	r1, [pc, #32]	; (80038e0 <__NVIC_SetPriority+0x50>)
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	3b04      	subs	r3, #4
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	440b      	add	r3, r1
 80038ce:	761a      	strb	r2, [r3, #24]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000e100 	.word	0xe000e100
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f1c3 0307 	rsb	r3, r3, #7
 80038fe:	2b04      	cmp	r3, #4
 8003900:	bf28      	it	cs
 8003902:	2304      	movcs	r3, #4
 8003904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3304      	adds	r3, #4
 800390a:	2b06      	cmp	r3, #6
 800390c:	d902      	bls.n	8003914 <NVIC_EncodePriority+0x30>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3b03      	subs	r3, #3
 8003912:	e000      	b.n	8003916 <NVIC_EncodePriority+0x32>
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	f04f 32ff 	mov.w	r2, #4294967295
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	401a      	ands	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800392c:	f04f 31ff 	mov.w	r1, #4294967295
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	43d9      	mvns	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	4313      	orrs	r3, r2
         );
}
 800393e:	4618      	mov	r0, r3
 8003940:	3724      	adds	r7, #36	; 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800395c:	d301      	bcc.n	8003962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800395e:	2301      	movs	r3, #1
 8003960:	e00f      	b.n	8003982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <SysTick_Config+0x40>)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800396a:	210f      	movs	r1, #15
 800396c:	f04f 30ff 	mov.w	r0, #4294967295
 8003970:	f7ff ff8e 	bl	8003890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <SysTick_Config+0x40>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800397a:	4b04      	ldr	r3, [pc, #16]	; (800398c <SysTick_Config+0x40>)
 800397c:	2207      	movs	r2, #7
 800397e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	e000e010 	.word	0xe000e010

08003990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff29 	bl	80037f0 <__NVIC_SetPriorityGrouping>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b8:	f7ff ff3e 	bl	8003838 <__NVIC_GetPriorityGrouping>
 80039bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	6978      	ldr	r0, [r7, #20]
 80039c4:	f7ff ff8e 	bl	80038e4 <NVIC_EncodePriority>
 80039c8:	4602      	mov	r2, r0
 80039ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff5d 	bl	8003890 <__NVIC_SetPriority>
}
 80039d6:	bf00      	nop
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	4603      	mov	r3, r0
 80039e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff ff31 	bl	8003854 <__NVIC_EnableIRQ>
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff ffa2 	bl	800394c <SysTick_Config>
 8003a08:	4603      	mov	r3, r0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a20:	f7ff feb6 	bl	8003790 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e099      	b.n	8003b64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a50:	e00f      	b.n	8003a72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a52:	f7ff fe9d 	bl	8003790 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d908      	bls.n	8003a72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e078      	b.n	8003b64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e8      	bne.n	8003a52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	4b38      	ldr	r3, [pc, #224]	; (8003b6c <HAL_DMA_Init+0x158>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d107      	bne.n	8003adc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f023 0307 	bic.w	r3, r3, #7
 8003af2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d117      	bne.n	8003b36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00e      	beq.n	8003b36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 fb01 	bl	8004120 <DMA_CheckFifoParam>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b32:	2301      	movs	r3, #1
 8003b34:	e016      	b.n	8003b64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fab8 	bl	80040b4 <DMA_CalcBaseAndBitshift>
 8003b44:	4603      	mov	r3, r0
 8003b46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	223f      	movs	r2, #63	; 0x3f
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	f010803f 	.word	0xf010803f

08003b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_DMA_Start_IT+0x26>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e040      	b.n	8003c18 <HAL_DMA_Start_IT+0xa8>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d12f      	bne.n	8003c0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fa4a 	bl	8004058 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc8:	223f      	movs	r2, #63	; 0x3f
 8003bca:	409a      	lsls	r2, r3
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0216 	orr.w	r2, r2, #22
 8003bde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0208 	orr.w	r2, r2, #8
 8003bf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e005      	b.n	8003c16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
 8003c14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c2e:	f7ff fdaf 	bl	8003790 <HAL_GetTick>
 8003c32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d008      	beq.n	8003c52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2280      	movs	r2, #128	; 0x80
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e052      	b.n	8003cf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0216 	bic.w	r2, r2, #22
 8003c60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <HAL_DMA_Abort+0x62>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0208 	bic.w	r2, r2, #8
 8003c90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ca2:	e013      	b.n	8003ccc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ca4:	f7ff fd74 	bl	8003790 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d90c      	bls.n	8003ccc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2203      	movs	r2, #3
 8003cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e015      	b.n	8003cf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1e4      	bne.n	8003ca4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	223f      	movs	r2, #63	; 0x3f
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d004      	beq.n	8003d1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2280      	movs	r2, #128	; 0x80
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e00c      	b.n	8003d38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2205      	movs	r2, #5
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0201 	bic.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d50:	4b8e      	ldr	r3, [pc, #568]	; (8003f8c <HAL_DMA_IRQHandler+0x248>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a8e      	ldr	r2, [pc, #568]	; (8003f90 <HAL_DMA_IRQHandler+0x24c>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	0a9b      	lsrs	r3, r3, #10
 8003d5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	2208      	movs	r2, #8
 8003d70:	409a      	lsls	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d01a      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d013      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	f043 0201 	orr.w	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d012      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f043 0202 	orr.w	r2, r3, #2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dea:	2204      	movs	r2, #4
 8003dec:	409a      	lsls	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d012      	beq.n	8003e1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	2204      	movs	r2, #4
 8003e0a:	409a      	lsls	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	f043 0204 	orr.w	r2, r3, #4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	2210      	movs	r2, #16
 8003e22:	409a      	lsls	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d043      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d03c      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3e:	2210      	movs	r2, #16
 8003e40:	409a      	lsls	r2, r3
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d018      	beq.n	8003e86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d024      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
 8003e72:	e01f      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01b      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	4798      	blx	r3
 8003e84:	e016      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d107      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f022 0208 	bic.w	r2, r2, #8
 8003ea2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	2220      	movs	r2, #32
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 808f 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 8087 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	2220      	movs	r2, #32
 8003edc:	409a      	lsls	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b05      	cmp	r3, #5
 8003eec:	d136      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0216 	bic.w	r2, r2, #22
 8003efc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <HAL_DMA_IRQHandler+0x1da>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0208 	bic.w	r2, r2, #8
 8003f2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	223f      	movs	r2, #63	; 0x3f
 8003f34:	409a      	lsls	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d07e      	beq.n	8004050 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	4798      	blx	r3
        }
        return;
 8003f5a:	e079      	b.n	8004050 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01d      	beq.n	8003fa6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d031      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	4798      	blx	r3
 8003f88:	e02c      	b.n	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
 8003f8a:	bf00      	nop
 8003f8c:	20000000 	.word	0x20000000
 8003f90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d023      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4798      	blx	r3
 8003fa4:	e01e      	b.n	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10f      	bne.n	8003fd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0210 	bic.w	r2, r2, #16
 8003fc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d032      	beq.n	8004052 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d022      	beq.n	800403e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2205      	movs	r2, #5
 8003ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0201 	bic.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	3301      	adds	r3, #1
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	429a      	cmp	r2, r3
 800401a:	d307      	bcc.n	800402c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f2      	bne.n	8004010 <HAL_DMA_IRQHandler+0x2cc>
 800402a:	e000      	b.n	800402e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800402c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
 800404e:	e000      	b.n	8004052 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004050:	bf00      	nop
    }
  }
}
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004074:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d108      	bne.n	8004098 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004096:	e007      	b.n	80040a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	60da      	str	r2, [r3, #12]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	3b10      	subs	r3, #16
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <DMA_CalcBaseAndBitshift+0x64>)
 80040c6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040ce:	4a13      	ldr	r2, [pc, #76]	; (800411c <DMA_CalcBaseAndBitshift+0x68>)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d909      	bls.n	80040f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	1d1a      	adds	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	659a      	str	r2, [r3, #88]	; 0x58
 80040f4:	e007      	b.n	8004106 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	aaaaaaab 	.word	0xaaaaaaab
 800411c:	0801620c 	.word	0x0801620c

08004120 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11f      	bne.n	800417a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d856      	bhi.n	80041ee <DMA_CheckFifoParam+0xce>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <DMA_CheckFifoParam+0x28>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	08004159 	.word	0x08004159
 800414c:	0800416b 	.word	0x0800416b
 8004150:	08004159 	.word	0x08004159
 8004154:	080041ef 	.word	0x080041ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d046      	beq.n	80041f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004168:	e043      	b.n	80041f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004172:	d140      	bne.n	80041f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004178:	e03d      	b.n	80041f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004182:	d121      	bne.n	80041c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d837      	bhi.n	80041fa <DMA_CheckFifoParam+0xda>
 800418a:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <DMA_CheckFifoParam+0x70>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041a7 	.word	0x080041a7
 8004198:	080041a1 	.word	0x080041a1
 800419c:	080041b9 	.word	0x080041b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
      break;
 80041a4:	e030      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d025      	beq.n	80041fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b6:	e022      	b.n	80041fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041c0:	d11f      	bne.n	8004202 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041c6:	e01c      	b.n	8004202 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d903      	bls.n	80041d6 <DMA_CheckFifoParam+0xb6>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	2b03      	cmp	r3, #3
 80041d2:	d003      	beq.n	80041dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041d4:	e018      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
      break;
 80041da:	e015      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00e      	beq.n	8004206 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      break;
 80041ec:	e00b      	b.n	8004206 <DMA_CheckFifoParam+0xe6>
      break;
 80041ee:	bf00      	nop
 80041f0:	e00a      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041f2:	bf00      	nop
 80041f4:	e008      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041f6:	bf00      	nop
 80041f8:	e006      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041fa:	bf00      	nop
 80041fc:	e004      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 80041fe:	bf00      	nop
 8004200:	e002      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;   
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <DMA_CheckFifoParam+0xe8>
      break;
 8004206:	bf00      	nop
    }
  } 
  
  return status; 
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop

08004218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	; 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422e:	2300      	movs	r3, #0
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	e16b      	b.n	800450c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004234:	2201      	movs	r2, #1
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4013      	ands	r3, r2
 8004246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	429a      	cmp	r2, r3
 800424e:	f040 815a 	bne.w	8004506 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b01      	cmp	r3, #1
 800425c:	d005      	beq.n	800426a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004266:	2b02      	cmp	r3, #2
 8004268:	d130      	bne.n	80042cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	2203      	movs	r2, #3
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4013      	ands	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	69ba      	ldr	r2, [r7, #24]
 8004290:	4313      	orrs	r3, r2
 8004292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042a0:	2201      	movs	r2, #1
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 0201 	and.w	r2, r3, #1
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d017      	beq.n	8004308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	2203      	movs	r2, #3
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	43db      	mvns	r3, r3
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4013      	ands	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0303 	and.w	r3, r3, #3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d123      	bne.n	800435c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	08da      	lsrs	r2, r3, #3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3208      	adds	r2, #8
 800431c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	220f      	movs	r2, #15
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	4013      	ands	r3, r2
 8004336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	08da      	lsrs	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3208      	adds	r2, #8
 8004356:	69b9      	ldr	r1, [r7, #24]
 8004358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	2203      	movs	r2, #3
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 0203 	and.w	r2, r3, #3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80b4 	beq.w	8004506 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	4b60      	ldr	r3, [pc, #384]	; (8004524 <HAL_GPIO_Init+0x30c>)
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	4a5f      	ldr	r2, [pc, #380]	; (8004524 <HAL_GPIO_Init+0x30c>)
 80043a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043ac:	6453      	str	r3, [r2, #68]	; 0x44
 80043ae:	4b5d      	ldr	r3, [pc, #372]	; (8004524 <HAL_GPIO_Init+0x30c>)
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ba:	4a5b      	ldr	r2, [pc, #364]	; (8004528 <HAL_GPIO_Init+0x310>)
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	089b      	lsrs	r3, r3, #2
 80043c0:	3302      	adds	r3, #2
 80043c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	220f      	movs	r2, #15
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a52      	ldr	r2, [pc, #328]	; (800452c <HAL_GPIO_Init+0x314>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d02b      	beq.n	800443e <HAL_GPIO_Init+0x226>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a51      	ldr	r2, [pc, #324]	; (8004530 <HAL_GPIO_Init+0x318>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d025      	beq.n	800443a <HAL_GPIO_Init+0x222>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a50      	ldr	r2, [pc, #320]	; (8004534 <HAL_GPIO_Init+0x31c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01f      	beq.n	8004436 <HAL_GPIO_Init+0x21e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a4f      	ldr	r2, [pc, #316]	; (8004538 <HAL_GPIO_Init+0x320>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d019      	beq.n	8004432 <HAL_GPIO_Init+0x21a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a4e      	ldr	r2, [pc, #312]	; (800453c <HAL_GPIO_Init+0x324>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_GPIO_Init+0x216>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a4d      	ldr	r2, [pc, #308]	; (8004540 <HAL_GPIO_Init+0x328>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00d      	beq.n	800442a <HAL_GPIO_Init+0x212>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a4c      	ldr	r2, [pc, #304]	; (8004544 <HAL_GPIO_Init+0x32c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <HAL_GPIO_Init+0x20e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4b      	ldr	r2, [pc, #300]	; (8004548 <HAL_GPIO_Init+0x330>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d101      	bne.n	8004422 <HAL_GPIO_Init+0x20a>
 800441e:	2307      	movs	r3, #7
 8004420:	e00e      	b.n	8004440 <HAL_GPIO_Init+0x228>
 8004422:	2308      	movs	r3, #8
 8004424:	e00c      	b.n	8004440 <HAL_GPIO_Init+0x228>
 8004426:	2306      	movs	r3, #6
 8004428:	e00a      	b.n	8004440 <HAL_GPIO_Init+0x228>
 800442a:	2305      	movs	r3, #5
 800442c:	e008      	b.n	8004440 <HAL_GPIO_Init+0x228>
 800442e:	2304      	movs	r3, #4
 8004430:	e006      	b.n	8004440 <HAL_GPIO_Init+0x228>
 8004432:	2303      	movs	r3, #3
 8004434:	e004      	b.n	8004440 <HAL_GPIO_Init+0x228>
 8004436:	2302      	movs	r3, #2
 8004438:	e002      	b.n	8004440 <HAL_GPIO_Init+0x228>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <HAL_GPIO_Init+0x228>
 800443e:	2300      	movs	r3, #0
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	f002 0203 	and.w	r2, r2, #3
 8004446:	0092      	lsls	r2, r2, #2
 8004448:	4093      	lsls	r3, r2
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004450:	4935      	ldr	r1, [pc, #212]	; (8004528 <HAL_GPIO_Init+0x310>)
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	3302      	adds	r3, #2
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800445e:	4b3b      	ldr	r3, [pc, #236]	; (800454c <HAL_GPIO_Init+0x334>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004482:	4a32      	ldr	r2, [pc, #200]	; (800454c <HAL_GPIO_Init+0x334>)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004488:	4b30      	ldr	r3, [pc, #192]	; (800454c <HAL_GPIO_Init+0x334>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044ac:	4a27      	ldr	r2, [pc, #156]	; (800454c <HAL_GPIO_Init+0x334>)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <HAL_GPIO_Init+0x334>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4013      	ands	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <HAL_GPIO_Init+0x334>)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044dc:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_GPIO_Init+0x334>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4013      	ands	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004500:	4a12      	ldr	r2, [pc, #72]	; (800454c <HAL_GPIO_Init+0x334>)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3301      	adds	r3, #1
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b0f      	cmp	r3, #15
 8004510:	f67f ae90 	bls.w	8004234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3724      	adds	r7, #36	; 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800
 8004528:	40013800 	.word	0x40013800
 800452c:	40020000 	.word	0x40020000
 8004530:	40020400 	.word	0x40020400
 8004534:	40020800 	.word	0x40020800
 8004538:	40020c00 	.word	0x40020c00
 800453c:	40021000 	.word	0x40021000
 8004540:	40021400 	.word	0x40021400
 8004544:	40021800 	.word	0x40021800
 8004548:	40021c00 	.word	0x40021c00
 800454c:	40013c00 	.word	0x40013c00

08004550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
 800455c:	4613      	mov	r3, r2
 800455e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004560:	787b      	ldrb	r3, [r7, #1]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004566:	887a      	ldrh	r2, [r7, #2]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800456c:	e003      	b.n	8004576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800456e:	887b      	ldrh	r3, [r7, #2]
 8004570:	041a      	lsls	r2, r3, #16
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	619a      	str	r2, [r3, #24]
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e267      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d075      	beq.n	800468e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045a2:	4b88      	ldr	r3, [pc, #544]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d00c      	beq.n	80045c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ae:	4b85      	ldr	r3, [pc, #532]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d112      	bne.n	80045e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ba:	4b82      	ldr	r3, [pc, #520]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c6:	d10b      	bne.n	80045e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c8:	4b7e      	ldr	r3, [pc, #504]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d05b      	beq.n	800468c <HAL_RCC_OscConfig+0x108>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d157      	bne.n	800468c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e242      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e8:	d106      	bne.n	80045f8 <HAL_RCC_OscConfig+0x74>
 80045ea:	4b76      	ldr	r3, [pc, #472]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a75      	ldr	r2, [pc, #468]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	e01d      	b.n	8004634 <HAL_RCC_OscConfig+0xb0>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0x98>
 8004602:	4b70      	ldr	r3, [pc, #448]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a6f      	ldr	r2, [pc, #444]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800460c:	6013      	str	r3, [r2, #0]
 800460e:	4b6d      	ldr	r3, [pc, #436]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6c      	ldr	r2, [pc, #432]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	e00b      	b.n	8004634 <HAL_RCC_OscConfig+0xb0>
 800461c:	4b69      	ldr	r3, [pc, #420]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a68      	ldr	r2, [pc, #416]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	4b66      	ldr	r3, [pc, #408]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a65      	ldr	r2, [pc, #404]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 800462e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d013      	beq.n	8004664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463c:	f7ff f8a8 	bl	8003790 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004644:	f7ff f8a4 	bl	8003790 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e207      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCC_OscConfig+0xc0>
 8004662:	e014      	b.n	800468e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7ff f894 	bl	8003790 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800466c:	f7ff f890 	bl	8003790 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e1f3      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	4b51      	ldr	r3, [pc, #324]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f0      	bne.n	800466c <HAL_RCC_OscConfig+0xe8>
 800468a:	e000      	b.n	800468e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d063      	beq.n	8004762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800469a:	4b4a      	ldr	r3, [pc, #296]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a6:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d11c      	bne.n	80046ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046b2:	4b44      	ldr	r3, [pc, #272]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d116      	bne.n	80046ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046be:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_RCC_OscConfig+0x152>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e1c7      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d6:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4937      	ldr	r1, [pc, #220]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ea:	e03a      	b.n	8004762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d020      	beq.n	8004736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046f4:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_RCC_OscConfig+0x244>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fa:	f7ff f849 	bl	8003790 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004702:	f7ff f845 	bl	8003790 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e1a8      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004720:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	4925      	ldr	r1, [pc, #148]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]
 8004734:	e015      	b.n	8004762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <HAL_RCC_OscConfig+0x244>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7ff f828 	bl	8003790 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004744:	f7ff f824 	bl	8003790 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e187      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	2b00      	cmp	r3, #0
 800476c:	d036      	beq.n	80047dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d016      	beq.n	80047a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <HAL_RCC_OscConfig+0x248>)
 8004778:	2201      	movs	r2, #1
 800477a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7ff f808 	bl	8003790 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004784:	f7ff f804 	bl	8003790 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e167      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCC_OscConfig+0x240>)
 8004798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x200>
 80047a2:	e01b      	b.n	80047dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047a4:	4b09      	ldr	r3, [pc, #36]	; (80047cc <HAL_RCC_OscConfig+0x248>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047aa:	f7fe fff1 	bl	8003790 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b0:	e00e      	b.n	80047d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047b2:	f7fe ffed 	bl	8003790 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d907      	bls.n	80047d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e150      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
 80047c4:	40023800 	.word	0x40023800
 80047c8:	42470000 	.word	0x42470000
 80047cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d0:	4b88      	ldr	r3, [pc, #544]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 80047d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ea      	bne.n	80047b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8097 	beq.w	8004918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ee:	4b81      	ldr	r3, [pc, #516]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10f      	bne.n	800481a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	4b7d      	ldr	r3, [pc, #500]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	4a7c      	ldr	r2, [pc, #496]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004808:	6413      	str	r3, [r2, #64]	; 0x40
 800480a:	4b7a      	ldr	r3, [pc, #488]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004816:	2301      	movs	r3, #1
 8004818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481a:	4b77      	ldr	r3, [pc, #476]	; (80049f8 <HAL_RCC_OscConfig+0x474>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d118      	bne.n	8004858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004826:	4b74      	ldr	r3, [pc, #464]	; (80049f8 <HAL_RCC_OscConfig+0x474>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a73      	ldr	r2, [pc, #460]	; (80049f8 <HAL_RCC_OscConfig+0x474>)
 800482c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004832:	f7fe ffad 	bl	8003790 <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483a:	f7fe ffa9 	bl	8003790 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e10c      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484c:	4b6a      	ldr	r3, [pc, #424]	; (80049f8 <HAL_RCC_OscConfig+0x474>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d106      	bne.n	800486e <HAL_RCC_OscConfig+0x2ea>
 8004860:	4b64      	ldr	r3, [pc, #400]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004864:	4a63      	ldr	r2, [pc, #396]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6713      	str	r3, [r2, #112]	; 0x70
 800486c:	e01c      	b.n	80048a8 <HAL_RCC_OscConfig+0x324>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b05      	cmp	r3, #5
 8004874:	d10c      	bne.n	8004890 <HAL_RCC_OscConfig+0x30c>
 8004876:	4b5f      	ldr	r3, [pc, #380]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	4a5e      	ldr	r2, [pc, #376]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 800487c:	f043 0304 	orr.w	r3, r3, #4
 8004880:	6713      	str	r3, [r2, #112]	; 0x70
 8004882:	4b5c      	ldr	r3, [pc, #368]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	4a5b      	ldr	r2, [pc, #364]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6713      	str	r3, [r2, #112]	; 0x70
 800488e:	e00b      	b.n	80048a8 <HAL_RCC_OscConfig+0x324>
 8004890:	4b58      	ldr	r3, [pc, #352]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004894:	4a57      	ldr	r2, [pc, #348]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004896:	f023 0301 	bic.w	r3, r3, #1
 800489a:	6713      	str	r3, [r2, #112]	; 0x70
 800489c:	4b55      	ldr	r3, [pc, #340]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	4a54      	ldr	r2, [pc, #336]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 0304 	bic.w	r3, r3, #4
 80048a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d015      	beq.n	80048dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b0:	f7fe ff6e 	bl	8003790 <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b8:	f7fe ff6a 	bl	8003790 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e0cb      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ce:	4b49      	ldr	r3, [pc, #292]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 80048d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0ee      	beq.n	80048b8 <HAL_RCC_OscConfig+0x334>
 80048da:	e014      	b.n	8004906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048dc:	f7fe ff58 	bl	8003790 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e2:	e00a      	b.n	80048fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7fe ff54 	bl	8003790 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0b5      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048fa:	4b3e      	ldr	r3, [pc, #248]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 80048fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ee      	bne.n	80048e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d105      	bne.n	8004918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490c:	4b39      	ldr	r3, [pc, #228]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 800490e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004910:	4a38      	ldr	r2, [pc, #224]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a1 	beq.w	8004a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004922:	4b34      	ldr	r3, [pc, #208]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b08      	cmp	r3, #8
 800492c:	d05c      	beq.n	80049e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d141      	bne.n	80049ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004936:	4b31      	ldr	r3, [pc, #196]	; (80049fc <HAL_RCC_OscConfig+0x478>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fe ff28 	bl	8003790 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004944:	f7fe ff24 	bl	8003790 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e087      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	019b      	lsls	r3, r3, #6
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	3b01      	subs	r3, #1
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	491b      	ldr	r1, [pc, #108]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498c:	4b1b      	ldr	r3, [pc, #108]	; (80049fc <HAL_RCC_OscConfig+0x478>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004992:	f7fe fefd 	bl	8003790 <HAL_GetTick>
 8004996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004998:	e008      	b.n	80049ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800499a:	f7fe fef9 	bl	8003790 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e05c      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ac:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0f0      	beq.n	800499a <HAL_RCC_OscConfig+0x416>
 80049b8:	e054      	b.n	8004a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ba:	4b10      	ldr	r3, [pc, #64]	; (80049fc <HAL_RCC_OscConfig+0x478>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fe fee6 	bl	8003790 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c8:	f7fe fee2 	bl	8003790 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e045      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCC_OscConfig+0x470>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x444>
 80049e6:	e03d      	b.n	8004a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e038      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40007000 	.word	0x40007000
 80049fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a00:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <HAL_RCC_OscConfig+0x4ec>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d028      	beq.n	8004a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d121      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d11a      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d111      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d107      	bne.n	8004a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023800 	.word	0x40023800

08004a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0cc      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a88:	4b68      	ldr	r3, [pc, #416]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d90c      	bls.n	8004ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a96:	4b65      	ldr	r3, [pc, #404]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b63      	ldr	r3, [pc, #396]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0b8      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d020      	beq.n	8004afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac8:	4b59      	ldr	r3, [pc, #356]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a58      	ldr	r2, [pc, #352]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae0:	4b53      	ldr	r3, [pc, #332]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4a52      	ldr	r2, [pc, #328]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aec:	4b50      	ldr	r3, [pc, #320]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	494d      	ldr	r1, [pc, #308]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d044      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b47      	ldr	r3, [pc, #284]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d119      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e07f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d107      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b32:	4b3f      	ldr	r3, [pc, #252]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e06f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b42:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e067      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b52:	4b37      	ldr	r3, [pc, #220]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f023 0203 	bic.w	r2, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4934      	ldr	r1, [pc, #208]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b64:	f7fe fe14 	bl	8003790 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6c:	f7fe fe10 	bl	8003790 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e04f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 020c 	and.w	r2, r3, #12
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1eb      	bne.n	8004b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b94:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d20c      	bcs.n	8004bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e032      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc8:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4916      	ldr	r1, [pc, #88]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004be6:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	490e      	ldr	r1, [pc, #56]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bfa:	f000 f821 	bl	8004c40 <HAL_RCC_GetSysClockFreq>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	490a      	ldr	r1, [pc, #40]	; (8004c34 <HAL_RCC_ClockConfig+0x1c0>)
 8004c0c:	5ccb      	ldrb	r3, [r1, r3]
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	4a09      	ldr	r2, [pc, #36]	; (8004c38 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c16:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCC_ClockConfig+0x1c8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fe fd74 	bl	8003708 <HAL_InitTick>

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023c00 	.word	0x40023c00
 8004c30:	40023800 	.word	0x40023800
 8004c34:	080161f4 	.word	0x080161f4
 8004c38:	20000000 	.word	0x20000000
 8004c3c:	20000004 	.word	0x20000004

08004c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c44:	b094      	sub	sp, #80	; 0x50
 8004c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c50:	2300      	movs	r3, #0
 8004c52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c58:	4b79      	ldr	r3, [pc, #484]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 030c 	and.w	r3, r3, #12
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d00d      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0x40>
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	f200 80e1 	bhi.w	8004e2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_RCC_GetSysClockFreq+0x34>
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d003      	beq.n	8004c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c72:	e0db      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b73      	ldr	r3, [pc, #460]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c78:	e0db      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c7a:	4b73      	ldr	r3, [pc, #460]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c7e:	e0d8      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c80:	4b6f      	ldr	r3, [pc, #444]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c8a:	4b6d      	ldr	r3, [pc, #436]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d063      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c96:	4b6a      	ldr	r3, [pc, #424]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	099b      	lsrs	r3, r3, #6
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8004caa:	2300      	movs	r3, #0
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
 8004cae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	f04f 0000 	mov.w	r0, #0
 8004cba:	f04f 0100 	mov.w	r1, #0
 8004cbe:	0159      	lsls	r1, r3, #5
 8004cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc4:	0150      	lsls	r0, r2, #5
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4621      	mov	r1, r4
 8004ccc:	1a51      	subs	r1, r2, r1
 8004cce:	6139      	str	r1, [r7, #16]
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	018b      	lsls	r3, r1, #6
 8004ce8:	4651      	mov	r1, sl
 8004cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cee:	4651      	mov	r1, sl
 8004cf0:	018a      	lsls	r2, r1, #6
 8004cf2:	4651      	mov	r1, sl
 8004cf4:	ebb2 0801 	subs.w	r8, r2, r1
 8004cf8:	4659      	mov	r1, fp
 8004cfa:	eb63 0901 	sbc.w	r9, r3, r1
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d12:	4690      	mov	r8, r2
 8004d14:	4699      	mov	r9, r3
 8004d16:	4623      	mov	r3, r4
 8004d18:	eb18 0303 	adds.w	r3, r8, r3
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	462b      	mov	r3, r5
 8004d20:	eb49 0303 	adc.w	r3, r9, r3
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d32:	4629      	mov	r1, r5
 8004d34:	024b      	lsls	r3, r1, #9
 8004d36:	4621      	mov	r1, r4
 8004d38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	024a      	lsls	r2, r1, #9
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d46:	2200      	movs	r2, #0
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d50:	f7fb ff8a 	bl	8000c68 <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d5c:	e058      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d5e:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	099b      	lsrs	r3, r3, #6
 8004d64:	2200      	movs	r2, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	4611      	mov	r1, r2
 8004d6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d6e:	623b      	str	r3, [r7, #32]
 8004d70:	2300      	movs	r3, #0
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
 8004d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	f04f 0000 	mov.w	r0, #0
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	0159      	lsls	r1, r3, #5
 8004d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d8a:	0150      	lsls	r0, r2, #5
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4641      	mov	r1, r8
 8004d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d96:	4649      	mov	r1, r9
 8004d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004db0:	ebb2 040a 	subs.w	r4, r2, sl
 8004db4:	eb63 050b 	sbc.w	r5, r3, fp
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	00eb      	lsls	r3, r5, #3
 8004dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dc6:	00e2      	lsls	r2, r4, #3
 8004dc8:	4614      	mov	r4, r2
 8004dca:	461d      	mov	r5, r3
 8004dcc:	4643      	mov	r3, r8
 8004dce:	18e3      	adds	r3, r4, r3
 8004dd0:	603b      	str	r3, [r7, #0]
 8004dd2:	464b      	mov	r3, r9
 8004dd4:	eb45 0303 	adc.w	r3, r5, r3
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004de6:	4629      	mov	r1, r5
 8004de8:	028b      	lsls	r3, r1, #10
 8004dea:	4621      	mov	r1, r4
 8004dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004df0:	4621      	mov	r1, r4
 8004df2:	028a      	lsls	r2, r1, #10
 8004df4:	4610      	mov	r0, r2
 8004df6:	4619      	mov	r1, r3
 8004df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	61fa      	str	r2, [r7, #28]
 8004e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e04:	f7fb ff30 	bl	8000c68 <__aeabi_uldivmod>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e2a:	e002      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3750      	adds	r7, #80	; 0x50
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e3e:	bf00      	nop
 8004e40:	40023800 	.word	0x40023800
 8004e44:	00f42400 	.word	0x00f42400
 8004e48:	007a1200 	.word	0x007a1200

08004e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e50:	4b03      	ldr	r3, [pc, #12]	; (8004e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e52:	681b      	ldr	r3, [r3, #0]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	20000000 	.word	0x20000000

08004e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e68:	f7ff fff0 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	0a9b      	lsrs	r3, r3, #10
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	4903      	ldr	r1, [pc, #12]	; (8004e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e7a:	5ccb      	ldrb	r3, [r1, r3]
 8004e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40023800 	.word	0x40023800
 8004e88:	08016204 	.word	0x08016204

08004e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e90:	f7ff ffdc 	bl	8004e4c <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	0b5b      	lsrs	r3, r3, #13
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4903      	ldr	r1, [pc, #12]	; (8004eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	08016204 	.word	0x08016204

08004eb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e07b      	b.n	8004fbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d108      	bne.n	8004ee0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed6:	d009      	beq.n	8004eec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	61da      	str	r2, [r3, #28]
 8004ede:	e005      	b.n	8004eec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fd fefa 	bl	8002d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	ea42 0103 	orr.w	r1, r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	f003 0104 	and.w	r1, r3, #4
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f003 0210 	and.w	r2, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b08c      	sub	sp, #48	; 0x30
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	607a      	str	r2, [r7, #4]
 8004fd2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x26>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e18a      	b.n	8005302 <HAL_SPI_TransmitReceive+0x33c>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff4:	f7fe fbcc 	bl	8003790 <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800500a:	887b      	ldrh	r3, [r7, #2]
 800500c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800500e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005012:	2b01      	cmp	r3, #1
 8005014:	d00f      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x70>
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800501c:	d107      	bne.n	800502e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d103      	bne.n	800502e <HAL_SPI_TransmitReceive+0x68>
 8005026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800502a:	2b04      	cmp	r3, #4
 800502c:	d003      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800502e:	2302      	movs	r3, #2
 8005030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005034:	e15b      	b.n	80052ee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x82>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x82>
 8005042:	887b      	ldrh	r3, [r7, #2]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800504e:	e14e      	b.n	80052ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b04      	cmp	r3, #4
 800505a:	d003      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2205      	movs	r2, #5
 8005060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	887a      	ldrh	r2, [r7, #2]
 8005074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	887a      	ldrh	r2, [r7, #2]
 800507a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	887a      	ldrh	r2, [r7, #2]
 8005086:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	887a      	ldrh	r2, [r7, #2]
 800508c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b40      	cmp	r3, #64	; 0x40
 80050a6:	d007      	beq.n	80050b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c0:	d178      	bne.n	80051b4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x10a>
 80050ca:	8b7b      	ldrh	r3, [r7, #26]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d166      	bne.n	800519e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	881a      	ldrh	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f4:	e053      	b.n	800519e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b02      	cmp	r3, #2
 8005102:	d11b      	bne.n	800513c <HAL_SPI_TransmitReceive+0x176>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d016      	beq.n	800513c <HAL_SPI_TransmitReceive+0x176>
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d113      	bne.n	800513c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	881a      	ldrh	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	1c9a      	adds	r2, r3, #2
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b01      	cmp	r3, #1
 8005148:	d119      	bne.n	800517e <HAL_SPI_TransmitReceive+0x1b8>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d014      	beq.n	800517e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	b292      	uxth	r2, r2
 8005160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	1c9a      	adds	r2, r3, #2
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800517a:	2301      	movs	r3, #1
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800517e:	f7fe fb07 	bl	8003790 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800518a:	429a      	cmp	r2, r3
 800518c:	d807      	bhi.n	800519e <HAL_SPI_TransmitReceive+0x1d8>
 800518e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d003      	beq.n	800519e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800519c:	e0a7      	b.n	80052ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1a6      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x130>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1a1      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x130>
 80051b2:	e07c      	b.n	80052ae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_SPI_TransmitReceive+0x1fc>
 80051bc:	8b7b      	ldrh	r3, [r7, #26]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d16b      	bne.n	800529a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051de:	b29b      	uxth	r3, r3
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e8:	e057      	b.n	800529a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d11c      	bne.n	8005232 <HAL_SPI_TransmitReceive+0x26c>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d017      	beq.n	8005232 <HAL_SPI_TransmitReceive+0x26c>
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	2b01      	cmp	r3, #1
 8005206:	d114      	bne.n	8005232 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	7812      	ldrb	r2, [r2, #0]
 8005214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d119      	bne.n	8005274 <HAL_SPI_TransmitReceive+0x2ae>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d014      	beq.n	8005274 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005270:	2301      	movs	r3, #1
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005274:	f7fe fa8c 	bl	8003790 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005280:	429a      	cmp	r2, r3
 8005282:	d803      	bhi.n	800528c <HAL_SPI_TransmitReceive+0x2c6>
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d102      	bne.n	8005292 <HAL_SPI_TransmitReceive+0x2cc>
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005298:	e029      	b.n	80052ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1a2      	bne.n	80051ea <HAL_SPI_TransmitReceive+0x224>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d19d      	bne.n	80051ea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f8b2 	bl	800541c <SPI_EndRxTxTransaction>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d006      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052ca:	e010      	b.n	80052ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10b      	bne.n	80052ec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	e000      	b.n	80052ee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005302:	4618      	mov	r0, r3
 8005304:	3730      	adds	r7, #48	; 0x30
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800531c:	f7fe fa38 	bl	8003790 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	4413      	add	r3, r2
 800532a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800532c:	f7fe fa30 	bl	8003790 <HAL_GetTick>
 8005330:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005332:	4b39      	ldr	r3, [pc, #228]	; (8005418 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	015b      	lsls	r3, r3, #5
 8005338:	0d1b      	lsrs	r3, r3, #20
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	fb02 f303 	mul.w	r3, r2, r3
 8005340:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005342:	e054      	b.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d050      	beq.n	80053ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800534c:	f7fe fa20 	bl	8003790 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	429a      	cmp	r2, r3
 800535a:	d902      	bls.n	8005362 <SPI_WaitFlagStateUntilTimeout+0x56>
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d13d      	bne.n	80053de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005370:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537a:	d111      	bne.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005384:	d004      	beq.n	8005390 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800538e:	d107      	bne.n	80053a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a8:	d10f      	bne.n	80053ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e017      	b.n	800540e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4013      	ands	r3, r2
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	429a      	cmp	r2, r3
 800540a:	d19b      	bne.n	8005344 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000000 	.word	0x20000000

0800541c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005428:	4b1b      	ldr	r3, [pc, #108]	; (8005498 <SPI_EndRxTxTransaction+0x7c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1b      	ldr	r2, [pc, #108]	; (800549c <SPI_EndRxTxTransaction+0x80>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	0d5b      	lsrs	r3, r3, #21
 8005434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005438:	fb02 f303 	mul.w	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005446:	d112      	bne.n	800546e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2200      	movs	r2, #0
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff ff5a 	bl	800530c <SPI_WaitFlagStateUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d016      	beq.n	800548c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e00f      	b.n	800548e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	3b01      	subs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d0f2      	beq.n	800546e <SPI_EndRxTxTransaction+0x52>
 8005488:	e000      	b.n	800548c <SPI_EndRxTxTransaction+0x70>
        break;
 800548a:	bf00      	nop
  }

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000000 	.word	0x20000000
 800549c:	165e9f81 	.word	0x165e9f81

080054a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e041      	b.n	8005536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fd ff0a 	bl	80032e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4610      	mov	r0, r2
 80054e0:	f000 fd88 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	d001      	beq.n	8005558 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e046      	b.n	80055e6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a23      	ldr	r2, [pc, #140]	; (80055f4 <HAL_TIM_Base_Start+0xb4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d022      	beq.n	80055b0 <HAL_TIM_Base_Start+0x70>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005572:	d01d      	beq.n	80055b0 <HAL_TIM_Base_Start+0x70>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <HAL_TIM_Base_Start+0xb8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d018      	beq.n	80055b0 <HAL_TIM_Base_Start+0x70>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <HAL_TIM_Base_Start+0xbc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <HAL_TIM_Base_Start+0x70>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1c      	ldr	r2, [pc, #112]	; (8005600 <HAL_TIM_Base_Start+0xc0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00e      	beq.n	80055b0 <HAL_TIM_Base_Start+0x70>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <HAL_TIM_Base_Start+0xc4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d009      	beq.n	80055b0 <HAL_TIM_Base_Start+0x70>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a19      	ldr	r2, [pc, #100]	; (8005608 <HAL_TIM_Base_Start+0xc8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_TIM_Base_Start+0x70>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a18      	ldr	r2, [pc, #96]	; (800560c <HAL_TIM_Base_Start+0xcc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d111      	bne.n	80055d4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b06      	cmp	r3, #6
 80055c0:	d010      	beq.n	80055e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f042 0201 	orr.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d2:	e007      	b.n	80055e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0201 	orr.w	r2, r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800
 8005600:	40000c00 	.word	0x40000c00
 8005604:	40010400 	.word	0x40010400
 8005608:	40014000 	.word	0x40014000
 800560c:	40001800 	.word	0x40001800

08005610 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e041      	b.n	80056a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fd fea4 	bl	8003384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f000 fcd0 	bl	8005ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <HAL_TIM_PWM_Start+0x24>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	bf14      	ite	ne
 80056cc:	2301      	movne	r3, #1
 80056ce:	2300      	moveq	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	e022      	b.n	800571a <HAL_TIM_PWM_Start+0x6a>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d109      	bne.n	80056ee <HAL_TIM_PWM_Start+0x3e>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	bf14      	ite	ne
 80056e6:	2301      	movne	r3, #1
 80056e8:	2300      	moveq	r3, #0
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	e015      	b.n	800571a <HAL_TIM_PWM_Start+0x6a>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d109      	bne.n	8005708 <HAL_TIM_PWM_Start+0x58>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	bf14      	ite	ne
 8005700:	2301      	movne	r3, #1
 8005702:	2300      	moveq	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	e008      	b.n	800571a <HAL_TIM_PWM_Start+0x6a>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e07c      	b.n	800581c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <HAL_TIM_PWM_Start+0x82>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005730:	e013      	b.n	800575a <HAL_TIM_PWM_Start+0xaa>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b04      	cmp	r3, #4
 8005736:	d104      	bne.n	8005742 <HAL_TIM_PWM_Start+0x92>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005740:	e00b      	b.n	800575a <HAL_TIM_PWM_Start+0xaa>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d104      	bne.n	8005752 <HAL_TIM_PWM_Start+0xa2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2202      	movs	r2, #2
 800574c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005750:	e003      	b.n	800575a <HAL_TIM_PWM_Start+0xaa>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2202      	movs	r2, #2
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2201      	movs	r2, #1
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 ff30 	bl	80065c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a2d      	ldr	r2, [pc, #180]	; (8005824 <HAL_TIM_PWM_Start+0x174>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d004      	beq.n	800577c <HAL_TIM_PWM_Start+0xcc>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2c      	ldr	r2, [pc, #176]	; (8005828 <HAL_TIM_PWM_Start+0x178>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d101      	bne.n	8005780 <HAL_TIM_PWM_Start+0xd0>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <HAL_TIM_PWM_Start+0xd2>
 8005780:	2300      	movs	r3, #0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005794:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a22      	ldr	r2, [pc, #136]	; (8005824 <HAL_TIM_PWM_Start+0x174>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x136>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a8:	d01d      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x136>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1f      	ldr	r2, [pc, #124]	; (800582c <HAL_TIM_PWM_Start+0x17c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x136>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1d      	ldr	r2, [pc, #116]	; (8005830 <HAL_TIM_PWM_Start+0x180>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x136>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <HAL_TIM_PWM_Start+0x184>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x136>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_TIM_PWM_Start+0x178>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x136>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a18      	ldr	r2, [pc, #96]	; (8005838 <HAL_TIM_PWM_Start+0x188>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x136>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a16      	ldr	r2, [pc, #88]	; (800583c <HAL_TIM_PWM_Start+0x18c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d111      	bne.n	800580a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b06      	cmp	r3, #6
 80057f6:	d010      	beq.n	800581a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0201 	orr.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	e007      	b.n	800581a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0201 	orr.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40010000 	.word	0x40010000
 8005828:	40010400 	.word	0x40010400
 800582c:	40000400 	.word	0x40000400
 8005830:	40000800 	.word	0x40000800
 8005834:	40000c00 	.word	0x40000c00
 8005838:	40014000 	.word	0x40014000
 800583c:	40001800 	.word	0x40001800

08005840 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <HAL_TIM_PWM_Start_IT+0x28>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	e022      	b.n	80058ae <HAL_TIM_PWM_Start_IT+0x6e>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b04      	cmp	r3, #4
 800586c:	d109      	bne.n	8005882 <HAL_TIM_PWM_Start_IT+0x42>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	bf14      	ite	ne
 800587a:	2301      	movne	r3, #1
 800587c:	2300      	moveq	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	e015      	b.n	80058ae <HAL_TIM_PWM_Start_IT+0x6e>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d109      	bne.n	800589c <HAL_TIM_PWM_Start_IT+0x5c>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	bf14      	ite	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2300      	moveq	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	e008      	b.n	80058ae <HAL_TIM_PWM_Start_IT+0x6e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e0c7      	b.n	8005a46 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_PWM_Start_IT+0x86>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c4:	e013      	b.n	80058ee <HAL_TIM_PWM_Start_IT+0xae>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_PWM_Start_IT+0x96>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d4:	e00b      	b.n	80058ee <HAL_TIM_PWM_Start_IT+0xae>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d104      	bne.n	80058e6 <HAL_TIM_PWM_Start_IT+0xa6>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e4:	e003      	b.n	80058ee <HAL_TIM_PWM_Start_IT+0xae>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d841      	bhi.n	8005978 <HAL_TIM_PWM_Start_IT+0x138>
 80058f4:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <HAL_TIM_PWM_Start_IT+0xbc>)
 80058f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fa:	bf00      	nop
 80058fc:	08005931 	.word	0x08005931
 8005900:	08005979 	.word	0x08005979
 8005904:	08005979 	.word	0x08005979
 8005908:	08005979 	.word	0x08005979
 800590c:	08005943 	.word	0x08005943
 8005910:	08005979 	.word	0x08005979
 8005914:	08005979 	.word	0x08005979
 8005918:	08005979 	.word	0x08005979
 800591c:	08005955 	.word	0x08005955
 8005920:	08005979 	.word	0x08005979
 8005924:	08005979 	.word	0x08005979
 8005928:	08005979 	.word	0x08005979
 800592c:	08005967 	.word	0x08005967
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0202 	orr.w	r2, r2, #2
 800593e:	60da      	str	r2, [r3, #12]
      break;
 8005940:	e01d      	b.n	800597e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0204 	orr.w	r2, r2, #4
 8005950:	60da      	str	r2, [r3, #12]
      break;
 8005952:	e014      	b.n	800597e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0208 	orr.w	r2, r2, #8
 8005962:	60da      	str	r2, [r3, #12]
      break;
 8005964:	e00b      	b.n	800597e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0210 	orr.w	r2, r2, #16
 8005974:	60da      	str	r2, [r3, #12]
      break;
 8005976:	e002      	b.n	800597e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      break;
 800597c:	bf00      	nop
  }

  if (status == HAL_OK)
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d15f      	bne.n	8005a44 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2201      	movs	r2, #1
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fe1b 	bl	80065c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2e      	ldr	r2, [pc, #184]	; (8005a50 <HAL_TIM_PWM_Start_IT+0x210>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <HAL_TIM_PWM_Start_IT+0x166>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2c      	ldr	r2, [pc, #176]	; (8005a54 <HAL_TIM_PWM_Start_IT+0x214>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d101      	bne.n	80059aa <HAL_TIM_PWM_Start_IT+0x16a>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <HAL_TIM_PWM_Start_IT+0x16c>
 80059aa:	2300      	movs	r3, #0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <HAL_TIM_PWM_Start_IT+0x210>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d022      	beq.n	8005a10 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d01d      	beq.n	8005a10 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <HAL_TIM_PWM_Start_IT+0x218>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d018      	beq.n	8005a10 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1e      	ldr	r2, [pc, #120]	; (8005a5c <HAL_TIM_PWM_Start_IT+0x21c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1c      	ldr	r2, [pc, #112]	; (8005a60 <HAL_TIM_PWM_Start_IT+0x220>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <HAL_TIM_PWM_Start_IT+0x214>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <HAL_TIM_PWM_Start_IT+0x224>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a17      	ldr	r2, [pc, #92]	; (8005a68 <HAL_TIM_PWM_Start_IT+0x228>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d111      	bne.n	8005a34 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b06      	cmp	r3, #6
 8005a20:	d010      	beq.n	8005a44 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a32:	e007      	b.n	8005a44 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40010000 	.word	0x40010000
 8005a54:	40010400 	.word	0x40010400
 8005a58:	40000400 	.word	0x40000400
 8005a5c:	40000800 	.word	0x40000800
 8005a60:	40000c00 	.word	0x40000c00
 8005a64:	40014000 	.word	0x40014000
 8005a68:	40001800 	.word	0x40001800

08005a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d122      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d11b      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f06f 0202 	mvn.w	r2, #2
 8005a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa81 	bl	8005fb6 <HAL_TIM_IC_CaptureCallback>
 8005ab4:	e005      	b.n	8005ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fa73 	bl	8005fa2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fa84 	bl	8005fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d122      	bne.n	8005b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	d11b      	bne.n	8005b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0204 	mvn.w	r2, #4
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fa57 	bl	8005fb6 <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fa49 	bl	8005fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fa5a 	bl	8005fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d122      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d11b      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0208 	mvn.w	r2, #8
 8005b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2204      	movs	r2, #4
 8005b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa2d 	bl	8005fb6 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa1f 	bl	8005fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fa30 	bl	8005fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	d122      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0210 	mvn.w	r2, #16
 8005b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2208      	movs	r2, #8
 8005b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa03 	bl	8005fb6 <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9f5 	bl	8005fa2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fa06 	bl	8005fca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0201 	mvn.w	r2, #1
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f9cf 	bl	8005f8e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfa:	2b80      	cmp	r3, #128	; 0x80
 8005bfc:	d10e      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c08:	2b80      	cmp	r3, #128	; 0x80
 8005c0a:	d107      	bne.n	8005c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fd82 	bl	8006720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c26:	2b40      	cmp	r3, #64	; 0x40
 8005c28:	d10e      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b40      	cmp	r3, #64	; 0x40
 8005c36:	d107      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f9cb 	bl	8005fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d10e      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b20      	cmp	r3, #32
 8005c62:	d107      	bne.n	8005c74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0220 	mvn.w	r2, #32
 8005c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fd4c 	bl	800670c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e0ae      	b.n	8005df8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b0c      	cmp	r3, #12
 8005ca6:	f200 809f 	bhi.w	8005de8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005caa:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005de9 	.word	0x08005de9
 8005cb8:	08005de9 	.word	0x08005de9
 8005cbc:	08005de9 	.word	0x08005de9
 8005cc0:	08005d25 	.word	0x08005d25
 8005cc4:	08005de9 	.word	0x08005de9
 8005cc8:	08005de9 	.word	0x08005de9
 8005ccc:	08005de9 	.word	0x08005de9
 8005cd0:	08005d67 	.word	0x08005d67
 8005cd4:	08005de9 	.word	0x08005de9
 8005cd8:	08005de9 	.word	0x08005de9
 8005cdc:	08005de9 	.word	0x08005de9
 8005ce0:	08005da7 	.word	0x08005da7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fa22 	bl	8006134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0208 	orr.w	r2, r2, #8
 8005cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0204 	bic.w	r2, r2, #4
 8005d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6999      	ldr	r1, [r3, #24]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	619a      	str	r2, [r3, #24]
      break;
 8005d22:	e064      	b.n	8005dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fa72 	bl	8006214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699a      	ldr	r2, [r3, #24]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6999      	ldr	r1, [r3, #24]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	619a      	str	r2, [r3, #24]
      break;
 8005d64:	e043      	b.n	8005dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68b9      	ldr	r1, [r7, #8]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fac7 	bl	8006300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0208 	orr.w	r2, r2, #8
 8005d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0204 	bic.w	r2, r2, #4
 8005d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69d9      	ldr	r1, [r3, #28]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	61da      	str	r2, [r3, #28]
      break;
 8005da4:	e023      	b.n	8005dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68b9      	ldr	r1, [r7, #8]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fb1b 	bl	80063e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69d9      	ldr	r1, [r3, #28]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	021a      	lsls	r2, r3, #8
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	61da      	str	r2, [r3, #28]
      break;
 8005de6:	e002      	b.n	8005dee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	75fb      	strb	r3, [r7, #23]
      break;
 8005dec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_TIM_ConfigClockSource+0x1c>
 8005e18:	2302      	movs	r3, #2
 8005e1a:	e0b4      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x186>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e54:	d03e      	beq.n	8005ed4 <HAL_TIM_ConfigClockSource+0xd4>
 8005e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5a:	f200 8087 	bhi.w	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e62:	f000 8086 	beq.w	8005f72 <HAL_TIM_ConfigClockSource+0x172>
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6a:	d87f      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e6c:	2b70      	cmp	r3, #112	; 0x70
 8005e6e:	d01a      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0xa6>
 8005e70:	2b70      	cmp	r3, #112	; 0x70
 8005e72:	d87b      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e74:	2b60      	cmp	r3, #96	; 0x60
 8005e76:	d050      	beq.n	8005f1a <HAL_TIM_ConfigClockSource+0x11a>
 8005e78:	2b60      	cmp	r3, #96	; 0x60
 8005e7a:	d877      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e7c:	2b50      	cmp	r3, #80	; 0x50
 8005e7e:	d03c      	beq.n	8005efa <HAL_TIM_ConfigClockSource+0xfa>
 8005e80:	2b50      	cmp	r3, #80	; 0x50
 8005e82:	d873      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e84:	2b40      	cmp	r3, #64	; 0x40
 8005e86:	d058      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0x13a>
 8005e88:	2b40      	cmp	r3, #64	; 0x40
 8005e8a:	d86f      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e8c:	2b30      	cmp	r3, #48	; 0x30
 8005e8e:	d064      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x15a>
 8005e90:	2b30      	cmp	r3, #48	; 0x30
 8005e92:	d86b      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e94:	2b20      	cmp	r3, #32
 8005e96:	d060      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x15a>
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d867      	bhi.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d05c      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x15a>
 8005ea0:	2b10      	cmp	r3, #16
 8005ea2:	d05a      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0x15a>
 8005ea4:	e062      	b.n	8005f6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6899      	ldr	r1, [r3, #8]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f000 fb67 	bl	8006588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ec8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	609a      	str	r2, [r3, #8]
      break;
 8005ed2:	e04f      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	6899      	ldr	r1, [r3, #8]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f000 fb50 	bl	8006588 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ef6:	609a      	str	r2, [r3, #8]
      break;
 8005ef8:	e03c      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6818      	ldr	r0, [r3, #0]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	6859      	ldr	r1, [r3, #4]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	461a      	mov	r2, r3
 8005f08:	f000 fac4 	bl	8006494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2150      	movs	r1, #80	; 0x50
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fb1d 	bl	8006552 <TIM_ITRx_SetConfig>
      break;
 8005f18:	e02c      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6859      	ldr	r1, [r3, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f000 fae3 	bl	80064f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2160      	movs	r1, #96	; 0x60
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fb0d 	bl	8006552 <TIM_ITRx_SetConfig>
      break;
 8005f38:	e01c      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6859      	ldr	r1, [r3, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	461a      	mov	r2, r3
 8005f48:	f000 faa4 	bl	8006494 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2140      	movs	r1, #64	; 0x40
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fafd 	bl	8006552 <TIM_ITRx_SetConfig>
      break;
 8005f58:	e00c      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4619      	mov	r1, r3
 8005f64:	4610      	mov	r0, r2
 8005f66:	f000 faf4 	bl	8006552 <TIM_ITRx_SetConfig>
      break;
 8005f6a:	e003      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f70:	e000      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
	...

08005ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a40      	ldr	r2, [pc, #256]	; (8006108 <TIM_Base_SetConfig+0x114>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006012:	d00f      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3d      	ldr	r2, [pc, #244]	; (800610c <TIM_Base_SetConfig+0x118>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3c      	ldr	r2, [pc, #240]	; (8006110 <TIM_Base_SetConfig+0x11c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3b      	ldr	r2, [pc, #236]	; (8006114 <TIM_Base_SetConfig+0x120>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a3a      	ldr	r2, [pc, #232]	; (8006118 <TIM_Base_SetConfig+0x124>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d108      	bne.n	8006046 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800603a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a2f      	ldr	r2, [pc, #188]	; (8006108 <TIM_Base_SetConfig+0x114>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d02b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006054:	d027      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2c      	ldr	r2, [pc, #176]	; (800610c <TIM_Base_SetConfig+0x118>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d023      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2b      	ldr	r2, [pc, #172]	; (8006110 <TIM_Base_SetConfig+0x11c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01f      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2a      	ldr	r2, [pc, #168]	; (8006114 <TIM_Base_SetConfig+0x120>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a29      	ldr	r2, [pc, #164]	; (8006118 <TIM_Base_SetConfig+0x124>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d017      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a28      	ldr	r2, [pc, #160]	; (800611c <TIM_Base_SetConfig+0x128>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a27      	ldr	r2, [pc, #156]	; (8006120 <TIM_Base_SetConfig+0x12c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00f      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a26      	ldr	r2, [pc, #152]	; (8006124 <TIM_Base_SetConfig+0x130>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00b      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a25      	ldr	r2, [pc, #148]	; (8006128 <TIM_Base_SetConfig+0x134>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a24      	ldr	r2, [pc, #144]	; (800612c <TIM_Base_SetConfig+0x138>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a23      	ldr	r2, [pc, #140]	; (8006130 <TIM_Base_SetConfig+0x13c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d108      	bne.n	80060b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <TIM_Base_SetConfig+0x114>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_Base_SetConfig+0xf8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a0c      	ldr	r2, [pc, #48]	; (8006118 <TIM_Base_SetConfig+0x124>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d103      	bne.n	80060f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	615a      	str	r2, [r3, #20]
}
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40010000 	.word	0x40010000
 800610c:	40000400 	.word	0x40000400
 8006110:	40000800 	.word	0x40000800
 8006114:	40000c00 	.word	0x40000c00
 8006118:	40010400 	.word	0x40010400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800
 8006128:	40001800 	.word	0x40001800
 800612c:	40001c00 	.word	0x40001c00
 8006130:	40002000 	.word	0x40002000

08006134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f023 0201 	bic.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 0302 	bic.w	r3, r3, #2
 800617c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a20      	ldr	r2, [pc, #128]	; (800620c <TIM_OC1_SetConfig+0xd8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC1_SetConfig+0x64>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <TIM_OC1_SetConfig+0xdc>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10c      	bne.n	80061b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0308 	bic.w	r3, r3, #8
 800619e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 0304 	bic.w	r3, r3, #4
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a15      	ldr	r2, [pc, #84]	; (800620c <TIM_OC1_SetConfig+0xd8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC1_SetConfig+0x8e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a14      	ldr	r2, [pc, #80]	; (8006210 <TIM_OC1_SetConfig+0xdc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d111      	bne.n	80061e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	621a      	str	r2, [r3, #32]
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	40010000 	.word	0x40010000
 8006210:	40010400 	.word	0x40010400

08006214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f023 0210 	bic.w	r2, r3, #16
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	021b      	lsls	r3, r3, #8
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0320 	bic.w	r3, r3, #32
 800625e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	4313      	orrs	r3, r2
 800626a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a22      	ldr	r2, [pc, #136]	; (80062f8 <TIM_OC2_SetConfig+0xe4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC2_SetConfig+0x68>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a21      	ldr	r2, [pc, #132]	; (80062fc <TIM_OC2_SetConfig+0xe8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d10d      	bne.n	8006298 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <TIM_OC2_SetConfig+0xe4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_OC2_SetConfig+0x94>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a16      	ldr	r2, [pc, #88]	; (80062fc <TIM_OC2_SetConfig+0xe8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d113      	bne.n	80062d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40010400 	.word	0x40010400

08006300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0303 	bic.w	r3, r3, #3
 8006336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a21      	ldr	r2, [pc, #132]	; (80063e0 <TIM_OC3_SetConfig+0xe0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_OC3_SetConfig+0x66>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a20      	ldr	r2, [pc, #128]	; (80063e4 <TIM_OC3_SetConfig+0xe4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d10d      	bne.n	8006382 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800636c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a16      	ldr	r2, [pc, #88]	; (80063e0 <TIM_OC3_SetConfig+0xe0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_OC3_SetConfig+0x92>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a15      	ldr	r2, [pc, #84]	; (80063e4 <TIM_OC3_SetConfig+0xe4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d113      	bne.n	80063ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	621a      	str	r2, [r3, #32]
}
 80063d4:	bf00      	nop
 80063d6:	371c      	adds	r7, #28
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40010400 	.word	0x40010400

080063e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	021b      	lsls	r3, r3, #8
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	031b      	lsls	r3, r3, #12
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a12      	ldr	r2, [pc, #72]	; (800648c <TIM_OC4_SetConfig+0xa4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d003      	beq.n	8006450 <TIM_OC4_SetConfig+0x68>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a11      	ldr	r2, [pc, #68]	; (8006490 <TIM_OC4_SetConfig+0xa8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d109      	bne.n	8006464 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	019b      	lsls	r3, r3, #6
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40010400 	.word	0x40010400

08006494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 030a 	bic.w	r3, r3, #10
 80064d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b087      	sub	sp, #28
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0210 	bic.w	r2, r3, #16
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800651c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	031b      	lsls	r3, r3, #12
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800652e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
 800655a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006568:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	f043 0307 	orr.w	r3, r3, #7
 8006574:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	609a      	str	r2, [r3, #8]
}
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006588:	b480      	push	{r7}
 800658a:	b087      	sub	sp, #28
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	021a      	lsls	r2, r3, #8
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	431a      	orrs	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	609a      	str	r2, [r3, #8]
}
 80065bc:	bf00      	nop
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2201      	movs	r2, #1
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a1a      	ldr	r2, [r3, #32]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	43db      	mvns	r3, r3
 80065ea:	401a      	ands	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1a      	ldr	r2, [r3, #32]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	431a      	orrs	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006628:	2302      	movs	r3, #2
 800662a:	e05a      	b.n	80066e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a21      	ldr	r2, [pc, #132]	; (80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d022      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006678:	d01d      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d018      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1b      	ldr	r2, [pc, #108]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00e      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a18      	ldr	r2, [pc, #96]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a17      	ldr	r2, [pc, #92]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a15      	ldr	r2, [pc, #84]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d10c      	bne.n	80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40010000 	.word	0x40010000
 80066f4:	40000400 	.word	0x40000400
 80066f8:	40000800 	.word	0x40000800
 80066fc:	40000c00 	.word	0x40000c00
 8006700:	40010400 	.word	0x40010400
 8006704:	40014000 	.word	0x40014000
 8006708:	40001800 	.word	0x40001800

0800670c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e03f      	b.n	80067c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fc fe9a 	bl	8003494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	; 0x24
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006776:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fde9 	bl	8007350 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691a      	ldr	r2, [r3, #16]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800678c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695a      	ldr	r2, [r3, #20]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800679c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b08a      	sub	sp, #40	; 0x28
 80067d2:	af02      	add	r7, sp, #8
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	603b      	str	r3, [r7, #0]
 80067da:	4613      	mov	r3, r2
 80067dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b20      	cmp	r3, #32
 80067ec:	d17c      	bne.n	80068e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <HAL_UART_Transmit+0x2c>
 80067f4:	88fb      	ldrh	r3, [r7, #6]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e075      	b.n	80068ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_UART_Transmit+0x3e>
 8006808:	2302      	movs	r3, #2
 800680a:	e06e      	b.n	80068ea <HAL_UART_Transmit+0x11c>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2221      	movs	r2, #33	; 0x21
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006822:	f7fc ffb5 	bl	8003790 <HAL_GetTick>
 8006826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	88fa      	ldrh	r2, [r7, #6]
 800682c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	88fa      	ldrh	r2, [r7, #6]
 8006832:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683c:	d108      	bne.n	8006850 <HAL_UART_Transmit+0x82>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d104      	bne.n	8006850 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	e003      	b.n	8006858 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006860:	e02a      	b.n	80068b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2200      	movs	r2, #0
 800686a:	2180      	movs	r1, #128	; 0x80
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 fb29 	bl	8006ec4 <UART_WaitOnFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e036      	b.n	80068ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10b      	bne.n	800689a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	3302      	adds	r3, #2
 8006896:	61bb      	str	r3, [r7, #24]
 8006898:	e007      	b.n	80068aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	3301      	adds	r3, #1
 80068a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1cf      	bne.n	8006862 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2200      	movs	r2, #0
 80068ca:	2140      	movs	r1, #64	; 0x40
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 faf9 	bl	8006ec4 <UART_WaitOnFlagUntilTimeout>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e006      	b.n	80068ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	e000      	b.n	80068ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80068e8:	2302      	movs	r3, #2
  }
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3720      	adds	r7, #32
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	4613      	mov	r3, r2
 80068fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b20      	cmp	r3, #32
 800690a:	d11d      	bne.n	8006948 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <HAL_UART_Receive_IT+0x26>
 8006912:	88fb      	ldrh	r3, [r7, #6]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e016      	b.n	800694a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_UART_Receive_IT+0x38>
 8006926:	2302      	movs	r3, #2
 8006928:	e00f      	b.n	800694a <HAL_UART_Receive_IT+0x58>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006938:	88fb      	ldrh	r3, [r7, #6]
 800693a:	461a      	mov	r2, r3
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 fb2e 	bl	8006fa0 <UART_Start_Receive_IT>
 8006944:	4603      	mov	r3, r0
 8006946:	e000      	b.n	800694a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006948:	2302      	movs	r3, #2
  }
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b0ba      	sub	sp, #232	; 0xe8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800697a:	2300      	movs	r3, #0
 800697c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006980:	2300      	movs	r3, #0
 8006982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10f      	bne.n	80069ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800699a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d009      	beq.n	80069ba <HAL_UART_IRQHandler+0x66>
 80069a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fc11 	bl	80071da <UART_Receive_IT>
      return;
 80069b8:	e256      	b.n	8006e68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 80de 	beq.w	8006b80 <HAL_UART_IRQHandler+0x22c>
 80069c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d106      	bne.n	80069de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 80d1 	beq.w	8006b80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00b      	beq.n	8006a02 <HAL_UART_IRQHandler+0xae>
 80069ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fa:	f043 0201 	orr.w	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <HAL_UART_IRQHandler+0xd2>
 8006a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f043 0202 	orr.w	r2, r3, #2
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00b      	beq.n	8006a4a <HAL_UART_IRQHandler+0xf6>
 8006a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f043 0204 	orr.w	r2, r3, #4
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d011      	beq.n	8006a7a <HAL_UART_IRQHandler+0x126>
 8006a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d105      	bne.n	8006a6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	f043 0208 	orr.w	r2, r3, #8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 81ed 	beq.w	8006e5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x14e>
 8006a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a94:	f003 0320 	and.w	r3, r3, #32
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fb9c 	bl	80071da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b40      	cmp	r3, #64	; 0x40
 8006aae:	bf0c      	ite	eq
 8006ab0:	2301      	moveq	r3, #1
 8006ab2:	2300      	movne	r3, #0
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d103      	bne.n	8006ace <HAL_UART_IRQHandler+0x17a>
 8006ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d04f      	beq.n	8006b6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 faa4 	bl	800701c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	695b      	ldr	r3, [r3, #20]
 8006ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ade:	2b40      	cmp	r3, #64	; 0x40
 8006ae0:	d141      	bne.n	8006b66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3314      	adds	r3, #20
 8006ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006afc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	3314      	adds	r3, #20
 8006b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b1e:	e841 2300 	strex	r3, r2, [r1]
 8006b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1d9      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d013      	beq.n	8006b5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3a:	4a7d      	ldr	r2, [pc, #500]	; (8006d30 <HAL_UART_IRQHandler+0x3dc>)
 8006b3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fd f8dc 	bl	8003d00 <HAL_DMA_Abort_IT>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d016      	beq.n	8006b7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	e00e      	b.n	8006b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f99a 	bl	8006e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	e00a      	b.n	8006b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f996 	bl	8006e98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6c:	e006      	b.n	8006b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f992 	bl	8006e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b7a:	e170      	b.n	8006e5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7c:	bf00      	nop
    return;
 8006b7e:	e16e      	b.n	8006e5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	f040 814a 	bne.w	8006e1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b8e:	f003 0310 	and.w	r3, r3, #16
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 8143 	beq.w	8006e1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 813c 	beq.w	8006e1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60bb      	str	r3, [r7, #8]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc6:	2b40      	cmp	r3, #64	; 0x40
 8006bc8:	f040 80b4 	bne.w	8006d34 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 8140 	beq.w	8006e62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bea:	429a      	cmp	r2, r3
 8006bec:	f080 8139 	bcs.w	8006e62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bf6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c02:	f000 8088 	beq.w	8006d16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c14:	e853 3f00 	ldrex	r3, [r3]
 8006c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	330c      	adds	r3, #12
 8006c2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1d9      	bne.n	8006c06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3314      	adds	r3, #20
 8006c58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3314      	adds	r3, #20
 8006c72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1e1      	bne.n	8006c52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3314      	adds	r3, #20
 8006c94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3314      	adds	r3, #20
 8006cae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e3      	bne.n	8006c8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	330c      	adds	r3, #12
 8006cda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ce6:	f023 0310 	bic.w	r3, r3, #16
 8006cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	330c      	adds	r3, #12
 8006cf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006cf8:	65ba      	str	r2, [r7, #88]	; 0x58
 8006cfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006cfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e3      	bne.n	8006cd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fc ff85 	bl	8003c20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	4619      	mov	r1, r3
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f8c0 	bl	8006eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d2c:	e099      	b.n	8006e62 <HAL_UART_IRQHandler+0x50e>
 8006d2e:	bf00      	nop
 8006d30:	080070e3 	.word	0x080070e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 808b 	beq.w	8006e66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8086 	beq.w	8006e66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d7e:	647a      	str	r2, [r7, #68]	; 0x44
 8006d80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1e3      	bne.n	8006d5a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3314      	adds	r3, #20
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	623b      	str	r3, [r7, #32]
   return(result);
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3314      	adds	r3, #20
 8006db2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006db6:	633a      	str	r2, [r7, #48]	; 0x30
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e3      	bne.n	8006d92 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	330c      	adds	r3, #12
 8006dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0310 	bic.w	r3, r3, #16
 8006dee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	330c      	adds	r3, #12
 8006df8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006dfc:	61fa      	str	r2, [r7, #28]
 8006dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e00:	69b9      	ldr	r1, [r7, #24]
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	e841 2300 	strex	r3, r2, [r1]
 8006e08:	617b      	str	r3, [r7, #20]
   return(result);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e3      	bne.n	8006dd8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f848 	bl	8006eac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e1c:	e023      	b.n	8006e66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d009      	beq.n	8006e3e <HAL_UART_IRQHandler+0x4ea>
 8006e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f967 	bl	800710a <UART_Transmit_IT>
    return;
 8006e3c:	e014      	b.n	8006e68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00e      	beq.n	8006e68 <HAL_UART_IRQHandler+0x514>
 8006e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d008      	beq.n	8006e68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f9a7 	bl	80071aa <UART_EndTransmit_IT>
    return;
 8006e5c:	e004      	b.n	8006e68 <HAL_UART_IRQHandler+0x514>
    return;
 8006e5e:	bf00      	nop
 8006e60:	e002      	b.n	8006e68 <HAL_UART_IRQHandler+0x514>
      return;
 8006e62:	bf00      	nop
 8006e64:	e000      	b.n	8006e68 <HAL_UART_IRQHandler+0x514>
      return;
 8006e66:	bf00      	nop
  }
}
 8006e68:	37e8      	adds	r7, #232	; 0xe8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b090      	sub	sp, #64	; 0x40
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ed4:	e050      	b.n	8006f78 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006edc:	d04c      	beq.n	8006f78 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d007      	beq.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ee4:	f7fc fc54 	bl	8003790 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d241      	bcs.n	8006f78 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	330c      	adds	r3, #12
 8006f12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f14:	637a      	str	r2, [r7, #52]	; 0x34
 8006f16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f1c:	e841 2300 	strex	r3, r2, [r1]
 8006f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1e5      	bne.n	8006ef4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	3314      	adds	r3, #20
 8006f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	613b      	str	r3, [r7, #16]
   return(result);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f023 0301 	bic.w	r3, r3, #1
 8006f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3314      	adds	r3, #20
 8006f46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f48:	623a      	str	r2, [r7, #32]
 8006f4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	69f9      	ldr	r1, [r7, #28]
 8006f4e:	6a3a      	ldr	r2, [r7, #32]
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e5      	bne.n	8006f28 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e00f      	b.n	8006f98 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4013      	ands	r3, r2
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	bf0c      	ite	eq
 8006f88:	2301      	moveq	r3, #1
 8006f8a:	2300      	movne	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d09f      	beq.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3740      	adds	r7, #64	; 0x40
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	88fa      	ldrh	r2, [r7, #6]
 8006fbe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2222      	movs	r2, #34	; 0x22
 8006fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d007      	beq.n	8006fee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	695a      	ldr	r2, [r3, #20]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0201 	orr.w	r2, r2, #1
 8006ffc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0220 	orr.w	r2, r2, #32
 800700c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800701c:	b480      	push	{r7}
 800701e:	b095      	sub	sp, #84	; 0x54
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	330c      	adds	r3, #12
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702e:	e853 3f00 	ldrex	r3, [r3]
 8007032:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800703a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	330c      	adds	r3, #12
 8007042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007044:	643a      	str	r2, [r7, #64]	; 0x40
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007048:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800704a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800704c:	e841 2300 	strex	r3, r2, [r1]
 8007050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	2b00      	cmp	r3, #0
 8007056:	d1e5      	bne.n	8007024 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3314      	adds	r3, #20
 800705e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	61fb      	str	r3, [r7, #28]
   return(result);
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f023 0301 	bic.w	r3, r3, #1
 800706e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3314      	adds	r3, #20
 8007076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007078:	62fa      	str	r2, [r7, #44]	; 0x2c
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800707e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e5      	bne.n	8007058 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007090:	2b01      	cmp	r3, #1
 8007092:	d119      	bne.n	80070c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	330c      	adds	r3, #12
 800709a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f023 0310 	bic.w	r3, r3, #16
 80070aa:	647b      	str	r3, [r7, #68]	; 0x44
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070b4:	61ba      	str	r2, [r7, #24]
 80070b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6979      	ldr	r1, [r7, #20]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	613b      	str	r3, [r7, #16]
   return(result);
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e5      	bne.n	8007094 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070d6:	bf00      	nop
 80070d8:	3754      	adds	r7, #84	; 0x54
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7ff fecb 	bl	8006e98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007102:	bf00      	nop
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b21      	cmp	r3, #33	; 0x21
 800711c:	d13e      	bne.n	800719c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	d114      	bne.n	8007152 <UART_Transmit_IT+0x48>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d110      	bne.n	8007152 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007144:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	1c9a      	adds	r2, r3, #2
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	621a      	str	r2, [r3, #32]
 8007150:	e008      	b.n	8007164 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	1c59      	adds	r1, r3, #1
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6211      	str	r1, [r2, #32]
 800715c:	781a      	ldrb	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29b      	uxth	r3, r3
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	4619      	mov	r1, r3
 8007172:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10f      	bne.n	8007198 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007186:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007196:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7ff fe50 	bl	8006e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b08c      	sub	sp, #48	; 0x30
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b22      	cmp	r3, #34	; 0x22
 80071ec:	f040 80ab 	bne.w	8007346 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f8:	d117      	bne.n	800722a <UART_Receive_IT+0x50>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d113      	bne.n	800722a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	b29b      	uxth	r3, r3
 8007214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007218:	b29a      	uxth	r2, r3
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007222:	1c9a      	adds	r2, r3, #2
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	629a      	str	r2, [r3, #40]	; 0x28
 8007228:	e026      	b.n	8007278 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007230:	2300      	movs	r3, #0
 8007232:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723c:	d007      	beq.n	800724e <UART_Receive_IT+0x74>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10a      	bne.n	800725c <UART_Receive_IT+0x82>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	b2da      	uxtb	r2, r3
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	701a      	strb	r2, [r3, #0]
 800725a:	e008      	b.n	800726e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007268:	b2da      	uxtb	r2, r3
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29b      	uxth	r3, r3
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4619      	mov	r1, r3
 8007286:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007288:	2b00      	cmp	r3, #0
 800728a:	d15a      	bne.n	8007342 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0220 	bic.w	r2, r2, #32
 800729a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695a      	ldr	r2, [r3, #20]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0201 	bic.w	r2, r2, #1
 80072ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d135      	bne.n	8007338 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	330c      	adds	r3, #12
 80072d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	613b      	str	r3, [r7, #16]
   return(result);
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f023 0310 	bic.w	r3, r3, #16
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	330c      	adds	r3, #12
 80072f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f2:	623a      	str	r2, [r7, #32]
 80072f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	69f9      	ldr	r1, [r7, #28]
 80072f8:	6a3a      	ldr	r2, [r7, #32]
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e5      	bne.n	80072d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0310 	and.w	r3, r3, #16
 8007310:	2b10      	cmp	r3, #16
 8007312:	d10a      	bne.n	800732a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7ff fdbb 	bl	8006eac <HAL_UARTEx_RxEventCallback>
 8007336:	e002      	b.n	800733e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff fda3 	bl	8006e84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	e002      	b.n	8007348 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e000      	b.n	8007348 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007346:	2302      	movs	r3, #2
  }
}
 8007348:	4618      	mov	r0, r3
 800734a:	3730      	adds	r7, #48	; 0x30
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007354:	b0c0      	sub	sp, #256	; 0x100
 8007356:	af00      	add	r7, sp, #0
 8007358:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800735c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736c:	68d9      	ldr	r1, [r3, #12]
 800736e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	ea40 0301 	orr.w	r3, r0, r1
 8007378:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800737a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	431a      	orrs	r2, r3
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	431a      	orrs	r2, r3
 8007390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800739c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073a8:	f021 010c 	bic.w	r1, r1, #12
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073b6:	430b      	orrs	r3, r1
 80073b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ca:	6999      	ldr	r1, [r3, #24]
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	ea40 0301 	orr.w	r3, r0, r1
 80073d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	4b8f      	ldr	r3, [pc, #572]	; (800761c <UART_SetConfig+0x2cc>)
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d005      	beq.n	80073f0 <UART_SetConfig+0xa0>
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	4b8d      	ldr	r3, [pc, #564]	; (8007620 <UART_SetConfig+0x2d0>)
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d104      	bne.n	80073fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073f0:	f7fd fd4c 	bl	8004e8c <HAL_RCC_GetPCLK2Freq>
 80073f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80073f8:	e003      	b.n	8007402 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073fa:	f7fd fd33 	bl	8004e64 <HAL_RCC_GetPCLK1Freq>
 80073fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740c:	f040 810c 	bne.w	8007628 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007414:	2200      	movs	r2, #0
 8007416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800741a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800741e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007422:	4622      	mov	r2, r4
 8007424:	462b      	mov	r3, r5
 8007426:	1891      	adds	r1, r2, r2
 8007428:	65b9      	str	r1, [r7, #88]	; 0x58
 800742a:	415b      	adcs	r3, r3
 800742c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800742e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007432:	4621      	mov	r1, r4
 8007434:	eb12 0801 	adds.w	r8, r2, r1
 8007438:	4629      	mov	r1, r5
 800743a:	eb43 0901 	adc.w	r9, r3, r1
 800743e:	f04f 0200 	mov.w	r2, #0
 8007442:	f04f 0300 	mov.w	r3, #0
 8007446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800744a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800744e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007452:	4690      	mov	r8, r2
 8007454:	4699      	mov	r9, r3
 8007456:	4623      	mov	r3, r4
 8007458:	eb18 0303 	adds.w	r3, r8, r3
 800745c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007460:	462b      	mov	r3, r5
 8007462:	eb49 0303 	adc.w	r3, r9, r3
 8007466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800746a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007476:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800747a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800747e:	460b      	mov	r3, r1
 8007480:	18db      	adds	r3, r3, r3
 8007482:	653b      	str	r3, [r7, #80]	; 0x50
 8007484:	4613      	mov	r3, r2
 8007486:	eb42 0303 	adc.w	r3, r2, r3
 800748a:	657b      	str	r3, [r7, #84]	; 0x54
 800748c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007490:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007494:	f7f9 fbe8 	bl	8000c68 <__aeabi_uldivmod>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4b61      	ldr	r3, [pc, #388]	; (8007624 <UART_SetConfig+0x2d4>)
 800749e:	fba3 2302 	umull	r2, r3, r3, r2
 80074a2:	095b      	lsrs	r3, r3, #5
 80074a4:	011c      	lsls	r4, r3, #4
 80074a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80074b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80074b8:	4642      	mov	r2, r8
 80074ba:	464b      	mov	r3, r9
 80074bc:	1891      	adds	r1, r2, r2
 80074be:	64b9      	str	r1, [r7, #72]	; 0x48
 80074c0:	415b      	adcs	r3, r3
 80074c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074c8:	4641      	mov	r1, r8
 80074ca:	eb12 0a01 	adds.w	sl, r2, r1
 80074ce:	4649      	mov	r1, r9
 80074d0:	eb43 0b01 	adc.w	fp, r3, r1
 80074d4:	f04f 0200 	mov.w	r2, #0
 80074d8:	f04f 0300 	mov.w	r3, #0
 80074dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074e8:	4692      	mov	sl, r2
 80074ea:	469b      	mov	fp, r3
 80074ec:	4643      	mov	r3, r8
 80074ee:	eb1a 0303 	adds.w	r3, sl, r3
 80074f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074f6:	464b      	mov	r3, r9
 80074f8:	eb4b 0303 	adc.w	r3, fp, r3
 80074fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800750c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007510:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007514:	460b      	mov	r3, r1
 8007516:	18db      	adds	r3, r3, r3
 8007518:	643b      	str	r3, [r7, #64]	; 0x40
 800751a:	4613      	mov	r3, r2
 800751c:	eb42 0303 	adc.w	r3, r2, r3
 8007520:	647b      	str	r3, [r7, #68]	; 0x44
 8007522:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007526:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800752a:	f7f9 fb9d 	bl	8000c68 <__aeabi_uldivmod>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4611      	mov	r1, r2
 8007534:	4b3b      	ldr	r3, [pc, #236]	; (8007624 <UART_SetConfig+0x2d4>)
 8007536:	fba3 2301 	umull	r2, r3, r3, r1
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	2264      	movs	r2, #100	; 0x64
 800753e:	fb02 f303 	mul.w	r3, r2, r3
 8007542:	1acb      	subs	r3, r1, r3
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800754a:	4b36      	ldr	r3, [pc, #216]	; (8007624 <UART_SetConfig+0x2d4>)
 800754c:	fba3 2302 	umull	r2, r3, r3, r2
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007558:	441c      	add	r4, r3
 800755a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800755e:	2200      	movs	r2, #0
 8007560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007564:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007568:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800756c:	4642      	mov	r2, r8
 800756e:	464b      	mov	r3, r9
 8007570:	1891      	adds	r1, r2, r2
 8007572:	63b9      	str	r1, [r7, #56]	; 0x38
 8007574:	415b      	adcs	r3, r3
 8007576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007578:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800757c:	4641      	mov	r1, r8
 800757e:	1851      	adds	r1, r2, r1
 8007580:	6339      	str	r1, [r7, #48]	; 0x30
 8007582:	4649      	mov	r1, r9
 8007584:	414b      	adcs	r3, r1
 8007586:	637b      	str	r3, [r7, #52]	; 0x34
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007594:	4659      	mov	r1, fp
 8007596:	00cb      	lsls	r3, r1, #3
 8007598:	4651      	mov	r1, sl
 800759a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800759e:	4651      	mov	r1, sl
 80075a0:	00ca      	lsls	r2, r1, #3
 80075a2:	4610      	mov	r0, r2
 80075a4:	4619      	mov	r1, r3
 80075a6:	4603      	mov	r3, r0
 80075a8:	4642      	mov	r2, r8
 80075aa:	189b      	adds	r3, r3, r2
 80075ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075b0:	464b      	mov	r3, r9
 80075b2:	460a      	mov	r2, r1
 80075b4:	eb42 0303 	adc.w	r3, r2, r3
 80075b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80075cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075d0:	460b      	mov	r3, r1
 80075d2:	18db      	adds	r3, r3, r3
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80075d6:	4613      	mov	r3, r2
 80075d8:	eb42 0303 	adc.w	r3, r2, r3
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075e6:	f7f9 fb3f 	bl	8000c68 <__aeabi_uldivmod>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <UART_SetConfig+0x2d4>)
 80075f0:	fba3 1302 	umull	r1, r3, r3, r2
 80075f4:	095b      	lsrs	r3, r3, #5
 80075f6:	2164      	movs	r1, #100	; 0x64
 80075f8:	fb01 f303 	mul.w	r3, r1, r3
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	3332      	adds	r3, #50	; 0x32
 8007602:	4a08      	ldr	r2, [pc, #32]	; (8007624 <UART_SetConfig+0x2d4>)
 8007604:	fba2 2303 	umull	r2, r3, r2, r3
 8007608:	095b      	lsrs	r3, r3, #5
 800760a:	f003 0207 	and.w	r2, r3, #7
 800760e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4422      	add	r2, r4
 8007616:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007618:	e105      	b.n	8007826 <UART_SetConfig+0x4d6>
 800761a:	bf00      	nop
 800761c:	40011000 	.word	0x40011000
 8007620:	40011400 	.word	0x40011400
 8007624:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007628:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800762c:	2200      	movs	r2, #0
 800762e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007632:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007636:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800763a:	4642      	mov	r2, r8
 800763c:	464b      	mov	r3, r9
 800763e:	1891      	adds	r1, r2, r2
 8007640:	6239      	str	r1, [r7, #32]
 8007642:	415b      	adcs	r3, r3
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
 8007646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800764a:	4641      	mov	r1, r8
 800764c:	1854      	adds	r4, r2, r1
 800764e:	4649      	mov	r1, r9
 8007650:	eb43 0501 	adc.w	r5, r3, r1
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	f04f 0300 	mov.w	r3, #0
 800765c:	00eb      	lsls	r3, r5, #3
 800765e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007662:	00e2      	lsls	r2, r4, #3
 8007664:	4614      	mov	r4, r2
 8007666:	461d      	mov	r5, r3
 8007668:	4643      	mov	r3, r8
 800766a:	18e3      	adds	r3, r4, r3
 800766c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007670:	464b      	mov	r3, r9
 8007672:	eb45 0303 	adc.w	r3, r5, r3
 8007676:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800767a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007686:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800768a:	f04f 0200 	mov.w	r2, #0
 800768e:	f04f 0300 	mov.w	r3, #0
 8007692:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007696:	4629      	mov	r1, r5
 8007698:	008b      	lsls	r3, r1, #2
 800769a:	4621      	mov	r1, r4
 800769c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076a0:	4621      	mov	r1, r4
 80076a2:	008a      	lsls	r2, r1, #2
 80076a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80076a8:	f7f9 fade 	bl	8000c68 <__aeabi_uldivmod>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4b60      	ldr	r3, [pc, #384]	; (8007834 <UART_SetConfig+0x4e4>)
 80076b2:	fba3 2302 	umull	r2, r3, r3, r2
 80076b6:	095b      	lsrs	r3, r3, #5
 80076b8:	011c      	lsls	r4, r3, #4
 80076ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076be:	2200      	movs	r2, #0
 80076c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80076c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80076cc:	4642      	mov	r2, r8
 80076ce:	464b      	mov	r3, r9
 80076d0:	1891      	adds	r1, r2, r2
 80076d2:	61b9      	str	r1, [r7, #24]
 80076d4:	415b      	adcs	r3, r3
 80076d6:	61fb      	str	r3, [r7, #28]
 80076d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076dc:	4641      	mov	r1, r8
 80076de:	1851      	adds	r1, r2, r1
 80076e0:	6139      	str	r1, [r7, #16]
 80076e2:	4649      	mov	r1, r9
 80076e4:	414b      	adcs	r3, r1
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076f4:	4659      	mov	r1, fp
 80076f6:	00cb      	lsls	r3, r1, #3
 80076f8:	4651      	mov	r1, sl
 80076fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076fe:	4651      	mov	r1, sl
 8007700:	00ca      	lsls	r2, r1, #3
 8007702:	4610      	mov	r0, r2
 8007704:	4619      	mov	r1, r3
 8007706:	4603      	mov	r3, r0
 8007708:	4642      	mov	r2, r8
 800770a:	189b      	adds	r3, r3, r2
 800770c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007710:	464b      	mov	r3, r9
 8007712:	460a      	mov	r2, r1
 8007714:	eb42 0303 	adc.w	r3, r2, r3
 8007718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	67bb      	str	r3, [r7, #120]	; 0x78
 8007726:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	f04f 0300 	mov.w	r3, #0
 8007730:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007734:	4649      	mov	r1, r9
 8007736:	008b      	lsls	r3, r1, #2
 8007738:	4641      	mov	r1, r8
 800773a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800773e:	4641      	mov	r1, r8
 8007740:	008a      	lsls	r2, r1, #2
 8007742:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007746:	f7f9 fa8f 	bl	8000c68 <__aeabi_uldivmod>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4b39      	ldr	r3, [pc, #228]	; (8007834 <UART_SetConfig+0x4e4>)
 8007750:	fba3 1302 	umull	r1, r3, r3, r2
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	2164      	movs	r1, #100	; 0x64
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	3332      	adds	r3, #50	; 0x32
 8007762:	4a34      	ldr	r2, [pc, #208]	; (8007834 <UART_SetConfig+0x4e4>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800776e:	441c      	add	r4, r3
 8007770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007774:	2200      	movs	r2, #0
 8007776:	673b      	str	r3, [r7, #112]	; 0x70
 8007778:	677a      	str	r2, [r7, #116]	; 0x74
 800777a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800777e:	4642      	mov	r2, r8
 8007780:	464b      	mov	r3, r9
 8007782:	1891      	adds	r1, r2, r2
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	415b      	adcs	r3, r3
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800778e:	4641      	mov	r1, r8
 8007790:	1851      	adds	r1, r2, r1
 8007792:	6039      	str	r1, [r7, #0]
 8007794:	4649      	mov	r1, r9
 8007796:	414b      	adcs	r3, r1
 8007798:	607b      	str	r3, [r7, #4]
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	f04f 0300 	mov.w	r3, #0
 80077a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077a6:	4659      	mov	r1, fp
 80077a8:	00cb      	lsls	r3, r1, #3
 80077aa:	4651      	mov	r1, sl
 80077ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077b0:	4651      	mov	r1, sl
 80077b2:	00ca      	lsls	r2, r1, #3
 80077b4:	4610      	mov	r0, r2
 80077b6:	4619      	mov	r1, r3
 80077b8:	4603      	mov	r3, r0
 80077ba:	4642      	mov	r2, r8
 80077bc:	189b      	adds	r3, r3, r2
 80077be:	66bb      	str	r3, [r7, #104]	; 0x68
 80077c0:	464b      	mov	r3, r9
 80077c2:	460a      	mov	r2, r1
 80077c4:	eb42 0303 	adc.w	r3, r2, r3
 80077c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	663b      	str	r3, [r7, #96]	; 0x60
 80077d4:	667a      	str	r2, [r7, #100]	; 0x64
 80077d6:	f04f 0200 	mov.w	r2, #0
 80077da:	f04f 0300 	mov.w	r3, #0
 80077de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80077e2:	4649      	mov	r1, r9
 80077e4:	008b      	lsls	r3, r1, #2
 80077e6:	4641      	mov	r1, r8
 80077e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ec:	4641      	mov	r1, r8
 80077ee:	008a      	lsls	r2, r1, #2
 80077f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80077f4:	f7f9 fa38 	bl	8000c68 <__aeabi_uldivmod>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <UART_SetConfig+0x4e4>)
 80077fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	2164      	movs	r1, #100	; 0x64
 8007806:	fb01 f303 	mul.w	r3, r1, r3
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	3332      	adds	r3, #50	; 0x32
 8007810:	4a08      	ldr	r2, [pc, #32]	; (8007834 <UART_SetConfig+0x4e4>)
 8007812:	fba2 2303 	umull	r2, r3, r2, r3
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	f003 020f 	and.w	r2, r3, #15
 800781c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4422      	add	r2, r4
 8007824:	609a      	str	r2, [r3, #8]
}
 8007826:	bf00      	nop
 8007828:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800782c:	46bd      	mov	sp, r7
 800782e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007832:	bf00      	nop
 8007834:	51eb851f 	.word	0x51eb851f

08007838 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800783c:	4904      	ldr	r1, [pc, #16]	; (8007850 <MX_FATFS_Init+0x18>)
 800783e:	4805      	ldr	r0, [pc, #20]	; (8007854 <MX_FATFS_Init+0x1c>)
 8007840:	f002 fec0 	bl	800a5c4 <FATFS_LinkDriver>
 8007844:	4603      	mov	r3, r0
 8007846:	461a      	mov	r2, r3
 8007848:	4b03      	ldr	r3, [pc, #12]	; (8007858 <MX_FATFS_Init+0x20>)
 800784a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800784c:	bf00      	nop
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20013734 	.word	0x20013734
 8007854:	2000000c 	.word	0x2000000c
 8007858:	20013730 	.word	0x20013730

0800785c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007860:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007862:	4618      	mov	r0, r3
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f9d9 	bl	8007c30 <USER_SPI_initialize>
 800787e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007880:	4618      	mov	r0, r3
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	4618      	mov	r0, r3
 8007896:	f000 fab7 	bl	8007e08 <USER_SPI_status>
 800789a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800789c:	4618      	mov	r0, r3
 800789e:	3708      	adds	r7, #8
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60b9      	str	r1, [r7, #8]
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80078b4:	7bf8      	ldrb	r0, [r7, #15]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	68b9      	ldr	r1, [r7, #8]
 80078bc:	f000 faba 	bl	8007e34 <USER_SPI_read>
 80078c0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b084      	sub	sp, #16
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	603b      	str	r3, [r7, #0]
 80078d6:	4603      	mov	r3, r0
 80078d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80078da:	7bf8      	ldrb	r0, [r7, #15]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	68b9      	ldr	r1, [r7, #8]
 80078e2:	f000 fb0d 	bl	8007f00 <USER_SPI_write>
 80078e6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	603a      	str	r2, [r7, #0]
 80078fa:	71fb      	strb	r3, [r7, #7]
 80078fc:	460b      	mov	r3, r1
 80078fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007900:	79b9      	ldrb	r1, [r7, #6]
 8007902:	79fb      	ldrb	r3, [r7, #7]
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fb76 	bl	8007ff8 <USER_SPI_ioctl>
 800790c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007920:	f7fb ff36 	bl	8003790 <HAL_GetTick>
 8007924:	4603      	mov	r3, r0
 8007926:	4a04      	ldr	r2, [pc, #16]	; (8007938 <SPI_Timer_On+0x20>)
 8007928:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800792a:	4a04      	ldr	r2, [pc, #16]	; (800793c <SPI_Timer_On+0x24>)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6013      	str	r3, [r2, #0]
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	2001373c 	.word	0x2001373c
 800793c:	20013740 	.word	0x20013740

08007940 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007944:	f7fb ff24 	bl	8003790 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	4b06      	ldr	r3, [pc, #24]	; (8007964 <SPI_Timer_Status+0x24>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <SPI_Timer_Status+0x28>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	bf34      	ite	cc
 8007958:	2301      	movcc	r3, #1
 800795a:	2300      	movcs	r3, #0
 800795c:	b2db      	uxtb	r3, r3
}
 800795e:	4618      	mov	r0, r3
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	2001373c 	.word	0x2001373c
 8007968:	20013740 	.word	0x20013740

0800796c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af02      	add	r7, sp, #8
 8007972:	4603      	mov	r3, r0
 8007974:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007976:	f107 020f 	add.w	r2, r7, #15
 800797a:	1df9      	adds	r1, r7, #7
 800797c:	2332      	movs	r3, #50	; 0x32
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2301      	movs	r3, #1
 8007982:	4804      	ldr	r0, [pc, #16]	; (8007994 <xchg_spi+0x28>)
 8007984:	f7fd fb1f 	bl	8004fc6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007988:	7bfb      	ldrb	r3, [r7, #15]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	200008a0 	.word	0x200008a0

08007998 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	e00a      	b.n	80079be <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	18d4      	adds	r4, r2, r3
 80079ae:	20ff      	movs	r0, #255	; 0xff
 80079b0:	f7ff ffdc 	bl	800796c <xchg_spi>
 80079b4:	4603      	mov	r3, r0
 80079b6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d3f0      	bcc.n	80079a8 <rcvr_spi_multi+0x10>
	}
}
 80079c6:	bf00      	nop
 80079c8:	bf00      	nop
 80079ca:	3714      	adds	r7, #20
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd90      	pop	{r4, r7, pc}

080079d0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80079da:	2300      	movs	r3, #0
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	e009      	b.n	80079f4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	4413      	add	r3, r2
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff ffbf 	bl	800796c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3301      	adds	r3, #1
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d3f1      	bcc.n	80079e0 <xmit_spi_multi+0x10>
	}
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b086      	sub	sp, #24
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007a0e:	f7fb febf 	bl	8003790 <HAL_GetTick>
 8007a12:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007a18:	20ff      	movs	r0, #255	; 0xff
 8007a1a:	f7ff ffa7 	bl	800796c <xchg_spi>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	2bff      	cmp	r3, #255	; 0xff
 8007a26:	d007      	beq.n	8007a38 <wait_ready+0x32>
 8007a28:	f7fb feb2 	bl	8003790 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d8ef      	bhi.n	8007a18 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	2bff      	cmp	r3, #255	; 0xff
 8007a3c:	bf0c      	ite	eq
 8007a3e:	2301      	moveq	r3, #1
 8007a40:	2300      	movne	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007a50:	2201      	movs	r2, #1
 8007a52:	2102      	movs	r1, #2
 8007a54:	4803      	ldr	r0, [pc, #12]	; (8007a64 <despiselect+0x18>)
 8007a56:	f7fc fd7b 	bl	8004550 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007a5a:	20ff      	movs	r0, #255	; 0xff
 8007a5c:	f7ff ff86 	bl	800796c <xchg_spi>

}
 8007a60:	bf00      	nop
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40020000 	.word	0x40020000

08007a68 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2102      	movs	r1, #2
 8007a70:	4809      	ldr	r0, [pc, #36]	; (8007a98 <spiselect+0x30>)
 8007a72:	f7fc fd6d 	bl	8004550 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007a76:	20ff      	movs	r0, #255	; 0xff
 8007a78:	f7ff ff78 	bl	800796c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a80:	f7ff ffc1 	bl	8007a06 <wait_ready>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <spiselect+0x26>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e002      	b.n	8007a94 <spiselect+0x2c>

	despiselect();
 8007a8e:	f7ff ffdd 	bl	8007a4c <despiselect>
	return 0;	/* Timeout */
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	40020000 	.word	0x40020000

08007a9c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007aa6:	20c8      	movs	r0, #200	; 0xc8
 8007aa8:	f7ff ff36 	bl	8007918 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007aac:	20ff      	movs	r0, #255	; 0xff
 8007aae:	f7ff ff5d 	bl	800796c <xchg_spi>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	2bff      	cmp	r3, #255	; 0xff
 8007aba:	d104      	bne.n	8007ac6 <rcvr_datablock+0x2a>
 8007abc:	f7ff ff40 	bl	8007940 <SPI_Timer_Status>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1f2      	bne.n	8007aac <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2bfe      	cmp	r3, #254	; 0xfe
 8007aca:	d001      	beq.n	8007ad0 <rcvr_datablock+0x34>
 8007acc:	2300      	movs	r3, #0
 8007ace:	e00a      	b.n	8007ae6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff ff60 	bl	8007998 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007ad8:	20ff      	movs	r0, #255	; 0xff
 8007ada:	f7ff ff47 	bl	800796c <xchg_spi>
 8007ade:	20ff      	movs	r0, #255	; 0xff
 8007ae0:	f7ff ff44 	bl	800796c <xchg_spi>

	return 1;						/* Function succeeded */
 8007ae4:	2301      	movs	r3, #1
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}

08007aee <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b084      	sub	sp, #16
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	460b      	mov	r3, r1
 8007af8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007afa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007afe:	f7ff ff82 	bl	8007a06 <wait_ready>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d101      	bne.n	8007b0c <xmit_datablock+0x1e>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e01e      	b.n	8007b4a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff ff2c 	bl	800796c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	2bfd      	cmp	r3, #253	; 0xfd
 8007b18:	d016      	beq.n	8007b48 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff ff56 	bl	80079d0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007b24:	20ff      	movs	r0, #255	; 0xff
 8007b26:	f7ff ff21 	bl	800796c <xchg_spi>
 8007b2a:	20ff      	movs	r0, #255	; 0xff
 8007b2c:	f7ff ff1e 	bl	800796c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007b30:	20ff      	movs	r0, #255	; 0xff
 8007b32:	f7ff ff1b 	bl	800796c <xchg_spi>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
 8007b3c:	f003 031f 	and.w	r3, r3, #31
 8007b40:	2b05      	cmp	r3, #5
 8007b42:	d001      	beq.n	8007b48 <xmit_datablock+0x5a>
 8007b44:	2300      	movs	r3, #0
 8007b46:	e000      	b.n	8007b4a <xmit_datablock+0x5c>
	}
	return 1;
 8007b48:	2301      	movs	r3, #1
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	4603      	mov	r3, r0
 8007b5a:	6039      	str	r1, [r7, #0]
 8007b5c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	da0e      	bge.n	8007b84 <send_cmd+0x32>
		cmd &= 0x7F;
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b6c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007b6e:	2100      	movs	r1, #0
 8007b70:	2037      	movs	r0, #55	; 0x37
 8007b72:	f7ff ffee 	bl	8007b52 <send_cmd>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d901      	bls.n	8007b84 <send_cmd+0x32>
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	e051      	b.n	8007c28 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	2b0c      	cmp	r3, #12
 8007b88:	d008      	beq.n	8007b9c <send_cmd+0x4a>
		despiselect();
 8007b8a:	f7ff ff5f 	bl	8007a4c <despiselect>
		if (!spiselect()) return 0xFF;
 8007b8e:	f7ff ff6b 	bl	8007a68 <spiselect>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <send_cmd+0x4a>
 8007b98:	23ff      	movs	r3, #255	; 0xff
 8007b9a:	e045      	b.n	8007c28 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff fee1 	bl	800796c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	0e1b      	lsrs	r3, r3, #24
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fedb 	bl	800796c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	0c1b      	lsrs	r3, r3, #16
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff fed5 	bl	800796c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	0a1b      	lsrs	r3, r3, #8
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff fecf 	bl	800796c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7ff feca 	bl	800796c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007bd8:	2301      	movs	r3, #1
 8007bda:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <send_cmd+0x94>
 8007be2:	2395      	movs	r3, #149	; 0x95
 8007be4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007be6:	79fb      	ldrb	r3, [r7, #7]
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d101      	bne.n	8007bf0 <send_cmd+0x9e>
 8007bec:	2387      	movs	r3, #135	; 0x87
 8007bee:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff feba 	bl	800796c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	2b0c      	cmp	r3, #12
 8007bfc:	d102      	bne.n	8007c04 <send_cmd+0xb2>
 8007bfe:	20ff      	movs	r0, #255	; 0xff
 8007c00:	f7ff feb4 	bl	800796c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007c04:	230a      	movs	r3, #10
 8007c06:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007c08:	20ff      	movs	r0, #255	; 0xff
 8007c0a:	f7ff feaf 	bl	800796c <xchg_spi>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007c12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	da05      	bge.n	8007c26 <send_cmd+0xd4>
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	73fb      	strb	r3, [r7, #15]
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1f0      	bne.n	8007c08 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007c30:	b590      	push	{r4, r7, lr}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007c3a:	79fb      	ldrb	r3, [r7, #7]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <USER_SPI_initialize+0x14>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e0d6      	b.n	8007df2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007c44:	4b6d      	ldr	r3, [pc, #436]	; (8007dfc <USER_SPI_initialize+0x1cc>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <USER_SPI_initialize+0x2a>
 8007c52:	4b6a      	ldr	r3, [pc, #424]	; (8007dfc <USER_SPI_initialize+0x1cc>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	e0cb      	b.n	8007df2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007c5a:	4b69      	ldr	r3, [pc, #420]	; (8007e00 <USER_SPI_initialize+0x1d0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007c64:	4b66      	ldr	r3, [pc, #408]	; (8007e00 <USER_SPI_initialize+0x1d0>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8007c6c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007c6e:	230a      	movs	r3, #10
 8007c70:	73fb      	strb	r3, [r7, #15]
 8007c72:	e005      	b.n	8007c80 <USER_SPI_initialize+0x50>
 8007c74:	20ff      	movs	r0, #255	; 0xff
 8007c76:	f7ff fe79 	bl	800796c <xchg_spi>
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1f6      	bne.n	8007c74 <USER_SPI_initialize+0x44>

	ty = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	f7ff ff60 	bl	8007b52 <send_cmd>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	f040 808b 	bne.w	8007db0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007c9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c9e:	f7ff fe3b 	bl	8007918 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007ca2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ca6:	2008      	movs	r0, #8
 8007ca8:	f7ff ff53 	bl	8007b52 <send_cmd>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d151      	bne.n	8007d56 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]
 8007cb6:	e00d      	b.n	8007cd4 <USER_SPI_initialize+0xa4>
 8007cb8:	7bfc      	ldrb	r4, [r7, #15]
 8007cba:	20ff      	movs	r0, #255	; 0xff
 8007cbc:	f7ff fe56 	bl	800796c <xchg_spi>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f104 0310 	add.w	r3, r4, #16
 8007cc8:	443b      	add	r3, r7
 8007cca:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	73fb      	strb	r3, [r7, #15]
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d9ee      	bls.n	8007cb8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007cda:	7abb      	ldrb	r3, [r7, #10]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d167      	bne.n	8007db0 <USER_SPI_initialize+0x180>
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	2baa      	cmp	r3, #170	; 0xaa
 8007ce4:	d164      	bne.n	8007db0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007ce6:	bf00      	nop
 8007ce8:	f7ff fe2a 	bl	8007940 <SPI_Timer_Status>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d007      	beq.n	8007d02 <USER_SPI_initialize+0xd2>
 8007cf2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007cf6:	20a9      	movs	r0, #169	; 0xa9
 8007cf8:	f7ff ff2b 	bl	8007b52 <send_cmd>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f2      	bne.n	8007ce8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007d02:	f7ff fe1d 	bl	8007940 <SPI_Timer_Status>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d051      	beq.n	8007db0 <USER_SPI_initialize+0x180>
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	203a      	movs	r0, #58	; 0x3a
 8007d10:	f7ff ff1f 	bl	8007b52 <send_cmd>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d14a      	bne.n	8007db0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]
 8007d1e:	e00d      	b.n	8007d3c <USER_SPI_initialize+0x10c>
 8007d20:	7bfc      	ldrb	r4, [r7, #15]
 8007d22:	20ff      	movs	r0, #255	; 0xff
 8007d24:	f7ff fe22 	bl	800796c <xchg_spi>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f104 0310 	add.w	r3, r4, #16
 8007d30:	443b      	add	r3, r7
 8007d32:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d9ee      	bls.n	8007d20 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007d42:	7a3b      	ldrb	r3, [r7, #8]
 8007d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <USER_SPI_initialize+0x120>
 8007d4c:	230c      	movs	r3, #12
 8007d4e:	e000      	b.n	8007d52 <USER_SPI_initialize+0x122>
 8007d50:	2304      	movs	r3, #4
 8007d52:	737b      	strb	r3, [r7, #13]
 8007d54:	e02c      	b.n	8007db0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007d56:	2100      	movs	r1, #0
 8007d58:	20a9      	movs	r0, #169	; 0xa9
 8007d5a:	f7ff fefa 	bl	8007b52 <send_cmd>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d804      	bhi.n	8007d6e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007d64:	2302      	movs	r3, #2
 8007d66:	737b      	strb	r3, [r7, #13]
 8007d68:	23a9      	movs	r3, #169	; 0xa9
 8007d6a:	73bb      	strb	r3, [r7, #14]
 8007d6c:	e003      	b.n	8007d76 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007d6e:	2301      	movs	r3, #1
 8007d70:	737b      	strb	r3, [r7, #13]
 8007d72:	2301      	movs	r3, #1
 8007d74:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007d76:	bf00      	nop
 8007d78:	f7ff fde2 	bl	8007940 <SPI_Timer_Status>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <USER_SPI_initialize+0x162>
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	2100      	movs	r1, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fee3 	bl	8007b52 <send_cmd>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f2      	bne.n	8007d78 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007d92:	f7ff fdd5 	bl	8007940 <SPI_Timer_Status>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <USER_SPI_initialize+0x17c>
 8007d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007da0:	2010      	movs	r0, #16
 8007da2:	f7ff fed6 	bl	8007b52 <send_cmd>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <USER_SPI_initialize+0x180>
				ty = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007db0:	4a14      	ldr	r2, [pc, #80]	; (8007e04 <USER_SPI_initialize+0x1d4>)
 8007db2:	7b7b      	ldrb	r3, [r7, #13]
 8007db4:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007db6:	f7ff fe49 	bl	8007a4c <despiselect>

	if (ty) {			/* OK */
 8007dba:	7b7b      	ldrb	r3, [r7, #13]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d012      	beq.n	8007de6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <USER_SPI_initialize+0x1d0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007dca:	4b0d      	ldr	r3, [pc, #52]	; (8007e00 <USER_SPI_initialize+0x1d0>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0210 	orr.w	r2, r2, #16
 8007dd2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007dd4:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <USER_SPI_initialize+0x1cc>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	f023 0301 	bic.w	r3, r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <USER_SPI_initialize+0x1cc>)
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	e002      	b.n	8007dec <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <USER_SPI_initialize+0x1cc>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007dec:	4b03      	ldr	r3, [pc, #12]	; (8007dfc <USER_SPI_initialize+0x1cc>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	b2db      	uxtb	r3, r3
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd90      	pop	{r4, r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000020 	.word	0x20000020
 8007e00:	200008a0 	.word	0x200008a0
 8007e04:	20013738 	.word	0x20013738

08007e08 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <USER_SPI_status+0x14>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e002      	b.n	8007e22 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007e1c:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <USER_SPI_status+0x28>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	b2db      	uxtb	r3, r3
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	20000020 	.word	0x20000020

08007e34 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	607a      	str	r2, [r7, #4]
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d102      	bne.n	8007e50 <USER_SPI_read+0x1c>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <USER_SPI_read+0x20>
 8007e50:	2304      	movs	r3, #4
 8007e52:	e04d      	b.n	8007ef0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007e54:	4b28      	ldr	r3, [pc, #160]	; (8007ef8 <USER_SPI_read+0xc4>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <USER_SPI_read+0x32>
 8007e62:	2303      	movs	r3, #3
 8007e64:	e044      	b.n	8007ef0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007e66:	4b25      	ldr	r3, [pc, #148]	; (8007efc <USER_SPI_read+0xc8>)
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	f003 0308 	and.w	r3, r3, #8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d102      	bne.n	8007e78 <USER_SPI_read+0x44>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	025b      	lsls	r3, r3, #9
 8007e76:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d111      	bne.n	8007ea2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	2011      	movs	r0, #17
 8007e82:	f7ff fe66 	bl	8007b52 <send_cmd>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d129      	bne.n	8007ee0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e90:	68b8      	ldr	r0, [r7, #8]
 8007e92:	f7ff fe03 	bl	8007a9c <rcvr_datablock>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d021      	beq.n	8007ee0 <USER_SPI_read+0xac>
			count = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	603b      	str	r3, [r7, #0]
 8007ea0:	e01e      	b.n	8007ee0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	2012      	movs	r0, #18
 8007ea6:	f7ff fe54 	bl	8007b52 <send_cmd>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d117      	bne.n	8007ee0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007eb4:	68b8      	ldr	r0, [r7, #8]
 8007eb6:	f7ff fdf1 	bl	8007a9c <rcvr_datablock>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <USER_SPI_read+0xa2>
				buff += 512;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ec6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	603b      	str	r3, [r7, #0]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1ed      	bne.n	8007eb0 <USER_SPI_read+0x7c>
 8007ed4:	e000      	b.n	8007ed8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007ed6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007ed8:	2100      	movs	r1, #0
 8007eda:	200c      	movs	r0, #12
 8007edc:	f7ff fe39 	bl	8007b52 <send_cmd>
		}
	}
	despiselect();
 8007ee0:	f7ff fdb4 	bl	8007a4c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	bf14      	ite	ne
 8007eea:	2301      	movne	r3, #1
 8007eec:	2300      	moveq	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20000020 	.word	0x20000020
 8007efc:	20013738 	.word	0x20013738

08007f00 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	607a      	str	r2, [r7, #4]
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d102      	bne.n	8007f1c <USER_SPI_write+0x1c>
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <USER_SPI_write+0x20>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	e063      	b.n	8007fe8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007f20:	4b33      	ldr	r3, [pc, #204]	; (8007ff0 <USER_SPI_write+0xf0>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <USER_SPI_write+0x32>
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e05a      	b.n	8007fe8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007f32:	4b2f      	ldr	r3, [pc, #188]	; (8007ff0 <USER_SPI_write+0xf0>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <USER_SPI_write+0x44>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e051      	b.n	8007fe8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007f44:	4b2b      	ldr	r3, [pc, #172]	; (8007ff4 <USER_SPI_write+0xf4>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	f003 0308 	and.w	r3, r3, #8
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <USER_SPI_write+0x56>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	025b      	lsls	r3, r3, #9
 8007f54:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d110      	bne.n	8007f7e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	2018      	movs	r0, #24
 8007f60:	f7ff fdf7 	bl	8007b52 <send_cmd>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d136      	bne.n	8007fd8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007f6a:	21fe      	movs	r1, #254	; 0xfe
 8007f6c:	68b8      	ldr	r0, [r7, #8]
 8007f6e:	f7ff fdbe 	bl	8007aee <xmit_datablock>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d02f      	beq.n	8007fd8 <USER_SPI_write+0xd8>
			count = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	e02c      	b.n	8007fd8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007f7e:	4b1d      	ldr	r3, [pc, #116]	; (8007ff4 <USER_SPI_write+0xf4>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	f003 0306 	and.w	r3, r3, #6
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <USER_SPI_write+0x92>
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	2097      	movs	r0, #151	; 0x97
 8007f8e:	f7ff fde0 	bl	8007b52 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	2019      	movs	r0, #25
 8007f96:	f7ff fddc 	bl	8007b52 <send_cmd>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d11b      	bne.n	8007fd8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007fa0:	21fc      	movs	r1, #252	; 0xfc
 8007fa2:	68b8      	ldr	r0, [r7, #8]
 8007fa4:	f7ff fda3 	bl	8007aee <xmit_datablock>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00a      	beq.n	8007fc4 <USER_SPI_write+0xc4>
				buff += 512;
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007fb4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1ee      	bne.n	8007fa0 <USER_SPI_write+0xa0>
 8007fc2:	e000      	b.n	8007fc6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007fc4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007fc6:	21fd      	movs	r1, #253	; 0xfd
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f7ff fd90 	bl	8007aee <xmit_datablock>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <USER_SPI_write+0xd8>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007fd8:	f7ff fd38 	bl	8007a4c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bf14      	ite	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	2300      	moveq	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20000020 	.word	0x20000020
 8007ff4:	20013738 	.word	0x20013738

08007ff8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08c      	sub	sp, #48	; 0x30
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	603a      	str	r2, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
 8008004:	460b      	mov	r3, r1
 8008006:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <USER_SPI_ioctl+0x1a>
 800800e:	2304      	movs	r3, #4
 8008010:	e15a      	b.n	80082c8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8008012:	4baf      	ldr	r3, [pc, #700]	; (80082d0 <USER_SPI_ioctl+0x2d8>)
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <USER_SPI_ioctl+0x2c>
 8008020:	2303      	movs	r3, #3
 8008022:	e151      	b.n	80082c8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800802a:	79bb      	ldrb	r3, [r7, #6]
 800802c:	2b04      	cmp	r3, #4
 800802e:	f200 8136 	bhi.w	800829e <USER_SPI_ioctl+0x2a6>
 8008032:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <USER_SPI_ioctl+0x40>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	0800804d 	.word	0x0800804d
 800803c:	08008061 	.word	0x08008061
 8008040:	0800829f 	.word	0x0800829f
 8008044:	0800810d 	.word	0x0800810d
 8008048:	08008203 	.word	0x08008203
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800804c:	f7ff fd0c 	bl	8007a68 <spiselect>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 8127 	beq.w	80082a6 <USER_SPI_ioctl+0x2ae>
 8008058:	2300      	movs	r3, #0
 800805a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800805e:	e122      	b.n	80082a6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008060:	2100      	movs	r1, #0
 8008062:	2009      	movs	r0, #9
 8008064:	f7ff fd75 	bl	8007b52 <send_cmd>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	f040 811d 	bne.w	80082aa <USER_SPI_ioctl+0x2b2>
 8008070:	f107 030c 	add.w	r3, r7, #12
 8008074:	2110      	movs	r1, #16
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff fd10 	bl	8007a9c <rcvr_datablock>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 8113 	beq.w	80082aa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008084:	7b3b      	ldrb	r3, [r7, #12]
 8008086:	099b      	lsrs	r3, r3, #6
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b01      	cmp	r3, #1
 800808c:	d111      	bne.n	80080b2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800808e:	7d7b      	ldrb	r3, [r7, #21]
 8008090:	461a      	mov	r2, r3
 8008092:	7d3b      	ldrb	r3, [r7, #20]
 8008094:	021b      	lsls	r3, r3, #8
 8008096:	4413      	add	r3, r2
 8008098:	461a      	mov	r2, r3
 800809a:	7cfb      	ldrb	r3, [r7, #19]
 800809c:	041b      	lsls	r3, r3, #16
 800809e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80080a2:	4413      	add	r3, r2
 80080a4:	3301      	adds	r3, #1
 80080a6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	029a      	lsls	r2, r3, #10
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	e028      	b.n	8008104 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80080b2:	7c7b      	ldrb	r3, [r7, #17]
 80080b4:	f003 030f 	and.w	r3, r3, #15
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	7dbb      	ldrb	r3, [r7, #22]
 80080bc:	09db      	lsrs	r3, r3, #7
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	4413      	add	r3, r2
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	7d7b      	ldrb	r3, [r7, #21]
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	f003 0306 	and.w	r3, r3, #6
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	4413      	add	r3, r2
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	3302      	adds	r3, #2
 80080d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80080da:	7d3b      	ldrb	r3, [r7, #20]
 80080dc:	099b      	lsrs	r3, r3, #6
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	461a      	mov	r2, r3
 80080e2:	7cfb      	ldrb	r3, [r7, #19]
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	441a      	add	r2, r3
 80080e8:	7cbb      	ldrb	r3, [r7, #18]
 80080ea:	029b      	lsls	r3, r3, #10
 80080ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080f0:	4413      	add	r3, r2
 80080f2:	3301      	adds	r3, #1
 80080f4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80080f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80080fa:	3b09      	subs	r3, #9
 80080fc:	69fa      	ldr	r2, [r7, #28]
 80080fe:	409a      	lsls	r2, r3
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800810a:	e0ce      	b.n	80082aa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800810c:	4b71      	ldr	r3, [pc, #452]	; (80082d4 <USER_SPI_ioctl+0x2dc>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	d031      	beq.n	800817c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008118:	2100      	movs	r1, #0
 800811a:	208d      	movs	r0, #141	; 0x8d
 800811c:	f7ff fd19 	bl	8007b52 <send_cmd>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	f040 80c3 	bne.w	80082ae <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008128:	20ff      	movs	r0, #255	; 0xff
 800812a:	f7ff fc1f 	bl	800796c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800812e:	f107 030c 	add.w	r3, r7, #12
 8008132:	2110      	movs	r1, #16
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff fcb1 	bl	8007a9c <rcvr_datablock>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 80b6 	beq.w	80082ae <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008142:	2330      	movs	r3, #48	; 0x30
 8008144:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008148:	e007      	b.n	800815a <USER_SPI_ioctl+0x162>
 800814a:	20ff      	movs	r0, #255	; 0xff
 800814c:	f7ff fc0e 	bl	800796c <xchg_spi>
 8008150:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008154:	3b01      	subs	r3, #1
 8008156:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800815a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f3      	bne.n	800814a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008162:	7dbb      	ldrb	r3, [r7, #22]
 8008164:	091b      	lsrs	r3, r3, #4
 8008166:	b2db      	uxtb	r3, r3
 8008168:	461a      	mov	r2, r3
 800816a:	2310      	movs	r3, #16
 800816c:	fa03 f202 	lsl.w	r2, r3, r2
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800817a:	e098      	b.n	80082ae <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800817c:	2100      	movs	r1, #0
 800817e:	2009      	movs	r0, #9
 8008180:	f7ff fce7 	bl	8007b52 <send_cmd>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	f040 8091 	bne.w	80082ae <USER_SPI_ioctl+0x2b6>
 800818c:	f107 030c 	add.w	r3, r7, #12
 8008190:	2110      	movs	r1, #16
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff fc82 	bl	8007a9c <rcvr_datablock>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 8087 	beq.w	80082ae <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80081a0:	4b4c      	ldr	r3, [pc, #304]	; (80082d4 <USER_SPI_ioctl+0x2dc>)
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	f003 0302 	and.w	r3, r3, #2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d012      	beq.n	80081d2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80081ac:	7dbb      	ldrb	r3, [r7, #22]
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80081b4:	7dfa      	ldrb	r2, [r7, #23]
 80081b6:	09d2      	lsrs	r2, r2, #7
 80081b8:	b2d2      	uxtb	r2, r2
 80081ba:	4413      	add	r3, r2
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	7e7b      	ldrb	r3, [r7, #25]
 80081c0:	099b      	lsrs	r3, r3, #6
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	3b01      	subs	r3, #1
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e013      	b.n	80081fa <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80081d2:	7dbb      	ldrb	r3, [r7, #22]
 80081d4:	109b      	asrs	r3, r3, #2
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f003 031f 	and.w	r3, r3, #31
 80081dc:	3301      	adds	r3, #1
 80081de:	7dfa      	ldrb	r2, [r7, #23]
 80081e0:	00d2      	lsls	r2, r2, #3
 80081e2:	f002 0218 	and.w	r2, r2, #24
 80081e6:	7df9      	ldrb	r1, [r7, #23]
 80081e8:	0949      	lsrs	r1, r1, #5
 80081ea:	b2c9      	uxtb	r1, r1
 80081ec:	440a      	add	r2, r1
 80081ee:	3201      	adds	r2, #1
 80081f0:	fb02 f303 	mul.w	r3, r2, r3
 80081f4:	461a      	mov	r2, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008200:	e055      	b.n	80082ae <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008202:	4b34      	ldr	r3, [pc, #208]	; (80082d4 <USER_SPI_ioctl+0x2dc>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f003 0306 	and.w	r3, r3, #6
 800820a:	2b00      	cmp	r3, #0
 800820c:	d051      	beq.n	80082b2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800820e:	f107 020c 	add.w	r2, r7, #12
 8008212:	79fb      	ldrb	r3, [r7, #7]
 8008214:	210b      	movs	r1, #11
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff feee 	bl	8007ff8 <USER_SPI_ioctl>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d149      	bne.n	80082b6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008222:	7b3b      	ldrb	r3, [r7, #12]
 8008224:	099b      	lsrs	r3, r3, #6
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	d104      	bne.n	8008236 <USER_SPI_ioctl+0x23e>
 800822c:	7dbb      	ldrb	r3, [r7, #22]
 800822e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d041      	beq.n	80082ba <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	623b      	str	r3, [r7, #32]
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8008246:	4b23      	ldr	r3, [pc, #140]	; (80082d4 <USER_SPI_ioctl+0x2dc>)
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d105      	bne.n	800825e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	025b      	lsls	r3, r3, #9
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	025b      	lsls	r3, r3, #9
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800825e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008260:	2020      	movs	r0, #32
 8008262:	f7ff fc76 	bl	8007b52 <send_cmd>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d128      	bne.n	80082be <USER_SPI_ioctl+0x2c6>
 800826c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800826e:	2021      	movs	r0, #33	; 0x21
 8008270:	f7ff fc6f 	bl	8007b52 <send_cmd>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d121      	bne.n	80082be <USER_SPI_ioctl+0x2c6>
 800827a:	2100      	movs	r1, #0
 800827c:	2026      	movs	r0, #38	; 0x26
 800827e:	f7ff fc68 	bl	8007b52 <send_cmd>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d11a      	bne.n	80082be <USER_SPI_ioctl+0x2c6>
 8008288:	f247 5030 	movw	r0, #30000	; 0x7530
 800828c:	f7ff fbbb 	bl	8007a06 <wait_ready>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d013      	beq.n	80082be <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008296:	2300      	movs	r3, #0
 8008298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800829c:	e00f      	b.n	80082be <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800829e:	2304      	movs	r3, #4
 80082a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80082a4:	e00c      	b.n	80082c0 <USER_SPI_ioctl+0x2c8>
		break;
 80082a6:	bf00      	nop
 80082a8:	e00a      	b.n	80082c0 <USER_SPI_ioctl+0x2c8>
		break;
 80082aa:	bf00      	nop
 80082ac:	e008      	b.n	80082c0 <USER_SPI_ioctl+0x2c8>
		break;
 80082ae:	bf00      	nop
 80082b0:	e006      	b.n	80082c0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80082b2:	bf00      	nop
 80082b4:	e004      	b.n	80082c0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80082b6:	bf00      	nop
 80082b8:	e002      	b.n	80082c0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80082ba:	bf00      	nop
 80082bc:	e000      	b.n	80082c0 <USER_SPI_ioctl+0x2c8>
		break;
 80082be:	bf00      	nop
	}

	despiselect();
 80082c0:	f7ff fbc4 	bl	8007a4c <despiselect>

	return res;
 80082c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3730      	adds	r7, #48	; 0x30
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20000020 	.word	0x20000020
 80082d4:	20013738 	.word	0x20013738

080082d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	4a08      	ldr	r2, [pc, #32]	; (8008308 <disk_status+0x30>)
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	79fa      	ldrb	r2, [r7, #7]
 80082f0:	4905      	ldr	r1, [pc, #20]	; (8008308 <disk_status+0x30>)
 80082f2:	440a      	add	r2, r1
 80082f4:	7a12      	ldrb	r2, [r2, #8]
 80082f6:	4610      	mov	r0, r2
 80082f8:	4798      	blx	r3
 80082fa:	4603      	mov	r3, r0
 80082fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80082fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	2001376c 	.word	0x2001376c

0800830c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	4603      	mov	r3, r0
 8008314:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	4a0d      	ldr	r2, [pc, #52]	; (8008354 <disk_initialize+0x48>)
 800831e:	5cd3      	ldrb	r3, [r2, r3]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d111      	bne.n	8008348 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	4a0b      	ldr	r2, [pc, #44]	; (8008354 <disk_initialize+0x48>)
 8008328:	2101      	movs	r1, #1
 800832a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	4a09      	ldr	r2, [pc, #36]	; (8008354 <disk_initialize+0x48>)
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	79fa      	ldrb	r2, [r7, #7]
 800833a:	4906      	ldr	r1, [pc, #24]	; (8008354 <disk_initialize+0x48>)
 800833c:	440a      	add	r2, r1
 800833e:	7a12      	ldrb	r2, [r2, #8]
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	2001376c 	.word	0x2001376c

08008358 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008358:	b590      	push	{r4, r7, lr}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
 8008362:	603b      	str	r3, [r7, #0]
 8008364:	4603      	mov	r3, r0
 8008366:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	4a0a      	ldr	r2, [pc, #40]	; (8008394 <disk_read+0x3c>)
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	689c      	ldr	r4, [r3, #8]
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	4a07      	ldr	r2, [pc, #28]	; (8008394 <disk_read+0x3c>)
 8008378:	4413      	add	r3, r2
 800837a:	7a18      	ldrb	r0, [r3, #8]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	47a0      	blx	r4
 8008384:	4603      	mov	r3, r0
 8008386:	75fb      	strb	r3, [r7, #23]
  return res;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
}
 800838a:	4618      	mov	r0, r3
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	bd90      	pop	{r4, r7, pc}
 8008392:	bf00      	nop
 8008394:	2001376c 	.word	0x2001376c

08008398 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008398:	b590      	push	{r4, r7, lr}
 800839a:	b087      	sub	sp, #28
 800839c:	af00      	add	r7, sp, #0
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	607a      	str	r2, [r7, #4]
 80083a2:	603b      	str	r3, [r7, #0]
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	4a0a      	ldr	r2, [pc, #40]	; (80083d4 <disk_write+0x3c>)
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	68dc      	ldr	r4, [r3, #12]
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	4a07      	ldr	r2, [pc, #28]	; (80083d4 <disk_write+0x3c>)
 80083b8:	4413      	add	r3, r2
 80083ba:	7a18      	ldrb	r0, [r3, #8]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	68b9      	ldr	r1, [r7, #8]
 80083c2:	47a0      	blx	r4
 80083c4:	4603      	mov	r3, r0
 80083c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	371c      	adds	r7, #28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd90      	pop	{r4, r7, pc}
 80083d2:	bf00      	nop
 80083d4:	2001376c 	.word	0x2001376c

080083d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	603a      	str	r2, [r7, #0]
 80083e2:	71fb      	strb	r3, [r7, #7]
 80083e4:	460b      	mov	r3, r1
 80083e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	4a09      	ldr	r2, [pc, #36]	; (8008410 <disk_ioctl+0x38>)
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	79fa      	ldrb	r2, [r7, #7]
 80083f6:	4906      	ldr	r1, [pc, #24]	; (8008410 <disk_ioctl+0x38>)
 80083f8:	440a      	add	r2, r1
 80083fa:	7a10      	ldrb	r0, [r2, #8]
 80083fc:	79b9      	ldrb	r1, [r7, #6]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	4798      	blx	r3
 8008402:	4603      	mov	r3, r0
 8008404:	73fb      	strb	r3, [r7, #15]
  return res;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	2001376c 	.word	0x2001376c

08008414 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3301      	adds	r3, #1
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008424:	89fb      	ldrh	r3, [r7, #14]
 8008426:	021b      	lsls	r3, r3, #8
 8008428:	b21a      	sxth	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	b21b      	sxth	r3, r3
 8008430:	4313      	orrs	r3, r2
 8008432:	b21b      	sxth	r3, r3
 8008434:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008436:	89fb      	ldrh	r3, [r7, #14]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3303      	adds	r3, #3
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	3202      	adds	r2, #2
 800845c:	7812      	ldrb	r2, [r2, #0]
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	3201      	adds	r2, #1
 800846a:	7812      	ldrb	r2, [r2, #0]
 800846c:	4313      	orrs	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	021b      	lsls	r3, r3, #8
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
	return rv;
 800847c:	68fb      	ldr	r3, [r7, #12]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	887a      	ldrh	r2, [r7, #2]
 800849e:	b2d2      	uxtb	r2, r2
 80084a0:	701a      	strb	r2, [r3, #0]
 80084a2:	887b      	ldrh	r3, [r7, #2]
 80084a4:	0a1b      	lsrs	r3, r3, #8
 80084a6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	607a      	str	r2, [r7, #4]
 80084ae:	887a      	ldrh	r2, [r7, #2]
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	701a      	strb	r2, [r3, #0]
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	701a      	strb	r2, [r3, #0]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	0a1b      	lsrs	r3, r3, #8
 80084da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	607a      	str	r2, [r7, #4]
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	b2d2      	uxtb	r2, r2
 80084e6:	701a      	strb	r2, [r3, #0]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	0a1b      	lsrs	r3, r3, #8
 80084ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	b2d2      	uxtb	r2, r2
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	0a1b      	lsrs	r3, r3, #8
 80084fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	607a      	str	r2, [r7, #4]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	b2d2      	uxtb	r2, r2
 800850a:	701a      	strb	r2, [r3, #0]
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00d      	beq.n	800854e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	1c53      	adds	r3, r2, #1
 8008536:	613b      	str	r3, [r7, #16]
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	1c59      	adds	r1, r3, #1
 800853c:	6179      	str	r1, [r7, #20]
 800853e:	7812      	ldrb	r2, [r2, #0]
 8008540:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	3b01      	subs	r3, #1
 8008546:	607b      	str	r3, [r7, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1f1      	bne.n	8008532 <mem_cpy+0x1a>
	}
}
 800854e:	bf00      	nop
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800855a:	b480      	push	{r7}
 800855c:	b087      	sub	sp, #28
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	60b9      	str	r1, [r7, #8]
 8008564:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	617a      	str	r2, [r7, #20]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	b2d2      	uxtb	r2, r2
 8008574:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3b01      	subs	r3, #1
 800857a:	607b      	str	r3, [r7, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1f3      	bne.n	800856a <mem_set+0x10>
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	371c      	adds	r7, #28
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008590:	b480      	push	{r7}
 8008592:	b089      	sub	sp, #36	; 0x24
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	61fb      	str	r3, [r7, #28]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	61fa      	str	r2, [r7, #28]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	4619      	mov	r1, r3
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	61ba      	str	r2, [r7, #24]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	1acb      	subs	r3, r1, r3
 80085bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	607b      	str	r3, [r7, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <mem_cmp+0x40>
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0eb      	beq.n	80085a8 <mem_cmp+0x18>

	return r;
 80085d0:	697b      	ldr	r3, [r7, #20]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3724      	adds	r7, #36	; 0x24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80085e8:	e002      	b.n	80085f0 <chk_chr+0x12>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	3301      	adds	r3, #1
 80085ee:	607b      	str	r3, [r7, #4]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <chk_chr+0x26>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	4293      	cmp	r3, r2
 8008602:	d1f2      	bne.n	80085ea <chk_chr+0xc>
	return *str;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	781b      	ldrb	r3, [r3, #0]
}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800861e:	2300      	movs	r3, #0
 8008620:	60bb      	str	r3, [r7, #8]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	e029      	b.n	800867c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008628:	4a27      	ldr	r2, [pc, #156]	; (80086c8 <chk_lock+0xb4>)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	4413      	add	r3, r2
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d01d      	beq.n	8008672 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008636:	4a24      	ldr	r2, [pc, #144]	; (80086c8 <chk_lock+0xb4>)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	4413      	add	r3, r2
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	429a      	cmp	r2, r3
 8008646:	d116      	bne.n	8008676 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008648:	4a1f      	ldr	r2, [pc, #124]	; (80086c8 <chk_lock+0xb4>)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	011b      	lsls	r3, r3, #4
 800864e:	4413      	add	r3, r2
 8008650:	3304      	adds	r3, #4
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008658:	429a      	cmp	r2, r3
 800865a:	d10c      	bne.n	8008676 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800865c:	4a1a      	ldr	r2, [pc, #104]	; (80086c8 <chk_lock+0xb4>)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	011b      	lsls	r3, r3, #4
 8008662:	4413      	add	r3, r2
 8008664:	3308      	adds	r3, #8
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800866c:	429a      	cmp	r2, r3
 800866e:	d102      	bne.n	8008676 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008670:	e007      	b.n	8008682 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008672:	2301      	movs	r3, #1
 8008674:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d9d2      	bls.n	8008628 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d109      	bne.n	800869c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d102      	bne.n	8008694 <chk_lock+0x80>
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b02      	cmp	r3, #2
 8008692:	d101      	bne.n	8008698 <chk_lock+0x84>
 8008694:	2300      	movs	r3, #0
 8008696:	e010      	b.n	80086ba <chk_lock+0xa6>
 8008698:	2312      	movs	r3, #18
 800869a:	e00e      	b.n	80086ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d108      	bne.n	80086b4 <chk_lock+0xa0>
 80086a2:	4a09      	ldr	r2, [pc, #36]	; (80086c8 <chk_lock+0xb4>)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	4413      	add	r3, r2
 80086aa:	330c      	adds	r3, #12
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b2:	d101      	bne.n	80086b8 <chk_lock+0xa4>
 80086b4:	2310      	movs	r3, #16
 80086b6:	e000      	b.n	80086ba <chk_lock+0xa6>
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	2001374c 	.word	0x2001374c

080086cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80086d2:	2300      	movs	r3, #0
 80086d4:	607b      	str	r3, [r7, #4]
 80086d6:	e002      	b.n	80086de <enq_lock+0x12>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	3301      	adds	r3, #1
 80086dc:	607b      	str	r3, [r7, #4]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d806      	bhi.n	80086f2 <enq_lock+0x26>
 80086e4:	4a09      	ldr	r2, [pc, #36]	; (800870c <enq_lock+0x40>)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	011b      	lsls	r3, r3, #4
 80086ea:	4413      	add	r3, r2
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1f2      	bne.n	80086d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	bf14      	ite	ne
 80086f8:	2301      	movne	r3, #1
 80086fa:	2300      	moveq	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
}
 80086fe:	4618      	mov	r0, r3
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	2001374c 	.word	0x2001374c

08008710 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	e01f      	b.n	8008760 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008720:	4a41      	ldr	r2, [pc, #260]	; (8008828 <inc_lock+0x118>)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	4413      	add	r3, r2
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d113      	bne.n	800875a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008732:	4a3d      	ldr	r2, [pc, #244]	; (8008828 <inc_lock+0x118>)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	4413      	add	r3, r2
 800873a:	3304      	adds	r3, #4
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008742:	429a      	cmp	r2, r3
 8008744:	d109      	bne.n	800875a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008746:	4a38      	ldr	r2, [pc, #224]	; (8008828 <inc_lock+0x118>)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	4413      	add	r3, r2
 800874e:	3308      	adds	r3, #8
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008756:	429a      	cmp	r2, r3
 8008758:	d006      	beq.n	8008768 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3301      	adds	r3, #1
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d9dc      	bls.n	8008720 <inc_lock+0x10>
 8008766:	e000      	b.n	800876a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008768:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d132      	bne.n	80087d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	e002      	b.n	800877c <inc_lock+0x6c>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3301      	adds	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d806      	bhi.n	8008790 <inc_lock+0x80>
 8008782:	4a29      	ldr	r2, [pc, #164]	; (8008828 <inc_lock+0x118>)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	011b      	lsls	r3, r3, #4
 8008788:	4413      	add	r3, r2
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1f2      	bne.n	8008776 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2b02      	cmp	r3, #2
 8008794:	d101      	bne.n	800879a <inc_lock+0x8a>
 8008796:	2300      	movs	r3, #0
 8008798:	e040      	b.n	800881c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	4922      	ldr	r1, [pc, #136]	; (8008828 <inc_lock+0x118>)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	440b      	add	r3, r1
 80087a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	491e      	ldr	r1, [pc, #120]	; (8008828 <inc_lock+0x118>)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	011b      	lsls	r3, r3, #4
 80087b2:	440b      	add	r3, r1
 80087b4:	3304      	adds	r3, #4
 80087b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	695a      	ldr	r2, [r3, #20]
 80087bc:	491a      	ldr	r1, [pc, #104]	; (8008828 <inc_lock+0x118>)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	011b      	lsls	r3, r3, #4
 80087c2:	440b      	add	r3, r1
 80087c4:	3308      	adds	r3, #8
 80087c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80087c8:	4a17      	ldr	r2, [pc, #92]	; (8008828 <inc_lock+0x118>)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	011b      	lsls	r3, r3, #4
 80087ce:	4413      	add	r3, r2
 80087d0:	330c      	adds	r3, #12
 80087d2:	2200      	movs	r2, #0
 80087d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d009      	beq.n	80087f0 <inc_lock+0xe0>
 80087dc:	4a12      	ldr	r2, [pc, #72]	; (8008828 <inc_lock+0x118>)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	011b      	lsls	r3, r3, #4
 80087e2:	4413      	add	r3, r2
 80087e4:	330c      	adds	r3, #12
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <inc_lock+0xe0>
 80087ec:	2300      	movs	r3, #0
 80087ee:	e015      	b.n	800881c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d108      	bne.n	8008808 <inc_lock+0xf8>
 80087f6:	4a0c      	ldr	r2, [pc, #48]	; (8008828 <inc_lock+0x118>)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	011b      	lsls	r3, r3, #4
 80087fc:	4413      	add	r3, r2
 80087fe:	330c      	adds	r3, #12
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	3301      	adds	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	e001      	b.n	800880c <inc_lock+0xfc>
 8008808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800880c:	4906      	ldr	r1, [pc, #24]	; (8008828 <inc_lock+0x118>)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	011b      	lsls	r3, r3, #4
 8008812:	440b      	add	r3, r1
 8008814:	330c      	adds	r3, #12
 8008816:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	3301      	adds	r3, #1
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	2001374c 	.word	0x2001374c

0800882c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	3b01      	subs	r3, #1
 8008838:	607b      	str	r3, [r7, #4]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d825      	bhi.n	800888c <dec_lock+0x60>
		n = Files[i].ctr;
 8008840:	4a17      	ldr	r2, [pc, #92]	; (80088a0 <dec_lock+0x74>)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	4413      	add	r3, r2
 8008848:	330c      	adds	r3, #12
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800884e:	89fb      	ldrh	r3, [r7, #14]
 8008850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008854:	d101      	bne.n	800885a <dec_lock+0x2e>
 8008856:	2300      	movs	r3, #0
 8008858:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800885a:	89fb      	ldrh	r3, [r7, #14]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <dec_lock+0x3a>
 8008860:	89fb      	ldrh	r3, [r7, #14]
 8008862:	3b01      	subs	r3, #1
 8008864:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008866:	4a0e      	ldr	r2, [pc, #56]	; (80088a0 <dec_lock+0x74>)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	011b      	lsls	r3, r3, #4
 800886c:	4413      	add	r3, r2
 800886e:	330c      	adds	r3, #12
 8008870:	89fa      	ldrh	r2, [r7, #14]
 8008872:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008874:	89fb      	ldrh	r3, [r7, #14]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d105      	bne.n	8008886 <dec_lock+0x5a>
 800887a:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <dec_lock+0x74>)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	011b      	lsls	r3, r3, #4
 8008880:	4413      	add	r3, r2
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	737b      	strb	r3, [r7, #13]
 800888a:	e001      	b.n	8008890 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800888c:	2302      	movs	r3, #2
 800888e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008890:	7b7b      	ldrb	r3, [r7, #13]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	2001374c 	.word	0x2001374c

080088a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]
 80088b0:	e010      	b.n	80088d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80088b2:	4a0d      	ldr	r2, [pc, #52]	; (80088e8 <clear_lock+0x44>)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	4413      	add	r3, r2
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d105      	bne.n	80088ce <clear_lock+0x2a>
 80088c2:	4a09      	ldr	r2, [pc, #36]	; (80088e8 <clear_lock+0x44>)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	4413      	add	r3, r2
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	3301      	adds	r3, #1
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d9eb      	bls.n	80088b2 <clear_lock+0xe>
	}
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	2001374c 	.word	0x2001374c

080088ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	78db      	ldrb	r3, [r3, #3]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d034      	beq.n	800896a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	7858      	ldrb	r0, [r3, #1]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008910:	2301      	movs	r3, #1
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	f7ff fd40 	bl	8008398 <disk_write>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d002      	beq.n	8008924 <sync_window+0x38>
			res = FR_DISK_ERR;
 800891e:	2301      	movs	r3, #1
 8008920:	73fb      	strb	r3, [r7, #15]
 8008922:	e022      	b.n	800896a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	1ad2      	subs	r2, r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	429a      	cmp	r2, r3
 8008938:	d217      	bcs.n	800896a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	789b      	ldrb	r3, [r3, #2]
 800893e:	613b      	str	r3, [r7, #16]
 8008940:	e010      	b.n	8008964 <sync_window+0x78>
					wsect += fs->fsize;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4413      	add	r3, r2
 800894a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7858      	ldrb	r0, [r3, #1]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008956:	2301      	movs	r3, #1
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	f7ff fd1d 	bl	8008398 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	3b01      	subs	r3, #1
 8008962:	613b      	str	r3, [r7, #16]
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d8eb      	bhi.n	8008942 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800896a:	7bfb      	ldrb	r3, [r7, #15]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	429a      	cmp	r2, r3
 800898a:	d01b      	beq.n	80089c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7ff ffad 	bl	80088ec <sync_window>
 8008992:	4603      	mov	r3, r0
 8008994:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d113      	bne.n	80089c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	7858      	ldrb	r0, [r3, #1]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089a6:	2301      	movs	r3, #1
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	f7ff fcd5 	bl	8008358 <disk_read>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d004      	beq.n	80089be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80089b4:	f04f 33ff 	mov.w	r3, #4294967295
 80089b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f7ff ff87 	bl	80088ec <sync_window>
 80089de:	4603      	mov	r3, r0
 80089e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d158      	bne.n	8008a9a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b03      	cmp	r3, #3
 80089ee:	d148      	bne.n	8008a82 <sync_fs+0xb2>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	791b      	ldrb	r3, [r3, #4]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d144      	bne.n	8008a82 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3330      	adds	r3, #48	; 0x30
 80089fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a00:	2100      	movs	r1, #0
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fda9 	bl	800855a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	3330      	adds	r3, #48	; 0x30
 8008a0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a10:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff fd38 	bl	800848a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	3330      	adds	r3, #48	; 0x30
 8008a1e:	4921      	ldr	r1, [pc, #132]	; (8008aa4 <sync_fs+0xd4>)
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7ff fd4d 	bl	80084c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3330      	adds	r3, #48	; 0x30
 8008a2a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008a2e:	491e      	ldr	r1, [pc, #120]	; (8008aa8 <sync_fs+0xd8>)
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff fd45 	bl	80084c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3330      	adds	r3, #48	; 0x30
 8008a3a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	4619      	mov	r1, r3
 8008a44:	4610      	mov	r0, r2
 8008a46:	f7ff fd3b 	bl	80084c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	3330      	adds	r3, #48	; 0x30
 8008a4e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	4619      	mov	r1, r3
 8008a58:	4610      	mov	r0, r2
 8008a5a:	f7ff fd31 	bl	80084c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7858      	ldrb	r0, [r3, #1]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a76:	2301      	movs	r3, #1
 8008a78:	f7ff fc8e 	bl	8008398 <disk_write>
			fs->fsi_flag = 0;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	2200      	movs	r2, #0
 8008a88:	2100      	movs	r1, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7ff fca4 	bl	80083d8 <disk_ioctl>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <sync_fs+0xca>
 8008a96:	2301      	movs	r3, #1
 8008a98:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	41615252 	.word	0x41615252
 8008aa8:	61417272 	.word	0x61417272

08008aac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	3b02      	subs	r3, #2
 8008aba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	3b02      	subs	r3, #2
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d301      	bcc.n	8008acc <clust2sect+0x20>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e008      	b.n	8008ade <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	895b      	ldrh	r3, [r3, #10]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	fb03 f202 	mul.w	r2, r3, r2
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	4413      	add	r3, r2
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b086      	sub	sp, #24
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d904      	bls.n	8008b0a <get_fat+0x20>
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d302      	bcc.n	8008b10 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	617b      	str	r3, [r7, #20]
 8008b0e:	e08f      	b.n	8008c30 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008b10:	f04f 33ff 	mov.w	r3, #4294967295
 8008b14:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d062      	beq.n	8008be4 <get_fat+0xfa>
 8008b1e:	2b03      	cmp	r3, #3
 8008b20:	dc7c      	bgt.n	8008c1c <get_fat+0x132>
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d002      	beq.n	8008b2c <get_fat+0x42>
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d042      	beq.n	8008bb0 <get_fat+0xc6>
 8008b2a:	e077      	b.n	8008c1c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	085b      	lsrs	r3, r3, #1
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	6a1a      	ldr	r2, [r3, #32]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	0a5b      	lsrs	r3, r3, #9
 8008b42:	4413      	add	r3, r2
 8008b44:	4619      	mov	r1, r3
 8008b46:	6938      	ldr	r0, [r7, #16]
 8008b48:	f7ff ff14 	bl	8008974 <move_window>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d167      	bne.n	8008c22 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	1c5a      	adds	r2, r3, #1
 8008b56:	60fa      	str	r2, [r7, #12]
 8008b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	6a1a      	ldr	r2, [r3, #32]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	0a5b      	lsrs	r3, r3, #9
 8008b6e:	4413      	add	r3, r2
 8008b70:	4619      	mov	r1, r3
 8008b72:	6938      	ldr	r0, [r7, #16]
 8008b74:	f7ff fefe 	bl	8008974 <move_window>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d153      	bne.n	8008c26 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	4413      	add	r3, r2
 8008b88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b8c:	021b      	lsls	r3, r3, #8
 8008b8e:	461a      	mov	r2, r3
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d002      	beq.n	8008ba6 <get_fat+0xbc>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	091b      	lsrs	r3, r3, #4
 8008ba4:	e002      	b.n	8008bac <get_fat+0xc2>
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bac:	617b      	str	r3, [r7, #20]
			break;
 8008bae:	e03f      	b.n	8008c30 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	6a1a      	ldr	r2, [r3, #32]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	0a1b      	lsrs	r3, r3, #8
 8008bb8:	4413      	add	r3, r2
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6938      	ldr	r0, [r7, #16]
 8008bbe:	f7ff fed9 	bl	8008974 <move_window>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d130      	bne.n	8008c2a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008bd6:	4413      	add	r3, r2
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff fc1b 	bl	8008414 <ld_word>
 8008bde:	4603      	mov	r3, r0
 8008be0:	617b      	str	r3, [r7, #20]
			break;
 8008be2:	e025      	b.n	8008c30 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	6a1a      	ldr	r2, [r3, #32]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	09db      	lsrs	r3, r3, #7
 8008bec:	4413      	add	r3, r2
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6938      	ldr	r0, [r7, #16]
 8008bf2:	f7ff febf 	bl	8008974 <move_window>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d118      	bne.n	8008c2e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c0a:	4413      	add	r3, r2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7ff fc19 	bl	8008444 <ld_dword>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c18:	617b      	str	r3, [r7, #20]
			break;
 8008c1a:	e009      	b.n	8008c30 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	e006      	b.n	8008c30 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c22:	bf00      	nop
 8008c24:	e004      	b.n	8008c30 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c26:	bf00      	nop
 8008c28:	e002      	b.n	8008c30 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c2a:	bf00      	nop
 8008c2c:	e000      	b.n	8008c30 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c2e:	bf00      	nop
		}
	}

	return val;
 8008c30:	697b      	ldr	r3, [r7, #20]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008c3a:	b590      	push	{r4, r7, lr}
 8008c3c:	b089      	sub	sp, #36	; 0x24
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008c46:	2302      	movs	r3, #2
 8008c48:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	f240 80d2 	bls.w	8008df6 <put_fat+0x1bc>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	f080 80cc 	bcs.w	8008df6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	f000 8096 	beq.w	8008d94 <put_fat+0x15a>
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	f300 80cd 	bgt.w	8008e08 <put_fat+0x1ce>
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d002      	beq.n	8008c78 <put_fat+0x3e>
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d06e      	beq.n	8008d54 <put_fat+0x11a>
 8008c76:	e0c7      	b.n	8008e08 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	61bb      	str	r3, [r7, #24]
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	085b      	lsrs	r3, r3, #1
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	4413      	add	r3, r2
 8008c84:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6a1a      	ldr	r2, [r3, #32]
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	0a5b      	lsrs	r3, r3, #9
 8008c8e:	4413      	add	r3, r2
 8008c90:	4619      	mov	r1, r3
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7ff fe6e 	bl	8008974 <move_window>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c9c:	7ffb      	ldrb	r3, [r7, #31]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f040 80ab 	bne.w	8008dfa <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	1c59      	adds	r1, r3, #1
 8008cae:	61b9      	str	r1, [r7, #24]
 8008cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb4:	4413      	add	r3, r2
 8008cb6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00d      	beq.n	8008cde <put_fat+0xa4>
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	b25b      	sxtb	r3, r3
 8008cc8:	f003 030f 	and.w	r3, r3, #15
 8008ccc:	b25a      	sxtb	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	011b      	lsls	r3, r3, #4
 8008cd4:	b25b      	sxtb	r3, r3
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	b25b      	sxtb	r3, r3
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	e001      	b.n	8008ce2 <put_fat+0xa8>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6a1a      	ldr	r2, [r3, #32]
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	0a5b      	lsrs	r3, r3, #9
 8008cf4:	4413      	add	r3, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f7ff fe3b 	bl	8008974 <move_window>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d02:	7ffb      	ldrb	r3, [r7, #31]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d17a      	bne.n	8008dfe <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d14:	4413      	add	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <put_fat+0xf0>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	091b      	lsrs	r3, r3, #4
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	e00e      	b.n	8008d48 <put_fat+0x10e>
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	b25b      	sxtb	r3, r3
 8008d30:	f023 030f 	bic.w	r3, r3, #15
 8008d34:	b25a      	sxtb	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	0a1b      	lsrs	r3, r3, #8
 8008d3a:	b25b      	sxtb	r3, r3
 8008d3c:	f003 030f 	and.w	r3, r3, #15
 8008d40:	b25b      	sxtb	r3, r3
 8008d42:	4313      	orrs	r3, r2
 8008d44:	b25b      	sxtb	r3, r3
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	70da      	strb	r2, [r3, #3]
			break;
 8008d52:	e059      	b.n	8008e08 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a1a      	ldr	r2, [r3, #32]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	0a1b      	lsrs	r3, r3, #8
 8008d5c:	4413      	add	r3, r2
 8008d5e:	4619      	mov	r1, r3
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f7ff fe07 	bl	8008974 <move_window>
 8008d66:	4603      	mov	r3, r0
 8008d68:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d6a:	7ffb      	ldrb	r3, [r7, #31]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d148      	bne.n	8008e02 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008d7e:	4413      	add	r3, r2
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	b292      	uxth	r2, r2
 8008d84:	4611      	mov	r1, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7ff fb7f 	bl	800848a <st_word>
			fs->wflag = 1;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	70da      	strb	r2, [r3, #3]
			break;
 8008d92:	e039      	b.n	8008e08 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a1a      	ldr	r2, [r3, #32]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	09db      	lsrs	r3, r3, #7
 8008d9c:	4413      	add	r3, r2
 8008d9e:	4619      	mov	r1, r3
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f7ff fde7 	bl	8008974 <move_window>
 8008da6:	4603      	mov	r3, r0
 8008da8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008daa:	7ffb      	ldrb	r3, [r7, #31]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d12a      	bne.n	8008e06 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008dc4:	4413      	add	r3, r2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff fb3c 	bl	8008444 <ld_dword>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008dd2:	4323      	orrs	r3, r4
 8008dd4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008de4:	4413      	add	r3, r2
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff fb69 	bl	80084c0 <st_dword>
			fs->wflag = 1;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	70da      	strb	r2, [r3, #3]
			break;
 8008df4:	e008      	b.n	8008e08 <put_fat+0x1ce>
		}
	}
 8008df6:	bf00      	nop
 8008df8:	e006      	b.n	8008e08 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008dfa:	bf00      	nop
 8008dfc:	e004      	b.n	8008e08 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008dfe:	bf00      	nop
 8008e00:	e002      	b.n	8008e08 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e02:	bf00      	nop
 8008e04:	e000      	b.n	8008e08 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e06:	bf00      	nop
	return res;
 8008e08:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3724      	adds	r7, #36	; 0x24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd90      	pop	{r4, r7, pc}

08008e12 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b088      	sub	sp, #32
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d904      	bls.n	8008e38 <remove_chain+0x26>
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d301      	bcc.n	8008e3c <remove_chain+0x2a>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e04b      	b.n	8008ed4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00c      	beq.n	8008e5c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008e42:	f04f 32ff 	mov.w	r2, #4294967295
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	69b8      	ldr	r0, [r7, #24]
 8008e4a:	f7ff fef6 	bl	8008c3a <put_fat>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008e52:	7ffb      	ldrb	r3, [r7, #31]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d001      	beq.n	8008e5c <remove_chain+0x4a>
 8008e58:	7ffb      	ldrb	r3, [r7, #31]
 8008e5a:	e03b      	b.n	8008ed4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f7ff fe43 	bl	8008aea <get_fat>
 8008e64:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d031      	beq.n	8008ed0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <remove_chain+0x64>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e02e      	b.n	8008ed4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7c:	d101      	bne.n	8008e82 <remove_chain+0x70>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e028      	b.n	8008ed4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008e82:	2200      	movs	r2, #0
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	69b8      	ldr	r0, [r7, #24]
 8008e88:	f7ff fed7 	bl	8008c3a <put_fat>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008e90:	7ffb      	ldrb	r3, [r7, #31]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <remove_chain+0x88>
 8008e96:	7ffb      	ldrb	r3, [r7, #31]
 8008e98:	e01c      	b.n	8008ed4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	691a      	ldr	r2, [r3, #16]
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	3b02      	subs	r3, #2
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d20b      	bcs.n	8008ec0 <remove_chain+0xae>
			fs->free_clst++;
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	791b      	ldrb	r3, [r3, #4]
 8008eb6:	f043 0301 	orr.w	r3, r3, #1
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d3c6      	bcc.n	8008e5c <remove_chain+0x4a>
 8008ece:	e000      	b.n	8008ed2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008ed0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3720      	adds	r7, #32
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b088      	sub	sp, #32
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10d      	bne.n	8008f0e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d004      	beq.n	8008f08 <create_chain+0x2c>
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d31b      	bcc.n	8008f40 <create_chain+0x64>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	61bb      	str	r3, [r7, #24]
 8008f0c:	e018      	b.n	8008f40 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff fdea 	bl	8008aea <get_fat>
 8008f16:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d801      	bhi.n	8008f22 <create_chain+0x46>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e070      	b.n	8009004 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d101      	bne.n	8008f2e <create_chain+0x52>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	e06a      	b.n	8009004 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d201      	bcs.n	8008f3c <create_chain+0x60>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	e063      	b.n	8009004 <create_chain+0x128>
		scl = clst;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	3301      	adds	r3, #1
 8008f48:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	69fa      	ldr	r2, [r7, #28]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d307      	bcc.n	8008f64 <create_chain+0x88>
				ncl = 2;
 8008f54:	2302      	movs	r3, #2
 8008f56:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008f58:	69fa      	ldr	r2, [r7, #28]
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d901      	bls.n	8008f64 <create_chain+0x88>
 8008f60:	2300      	movs	r3, #0
 8008f62:	e04f      	b.n	8009004 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008f64:	69f9      	ldr	r1, [r7, #28]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7ff fdbf 	bl	8008aea <get_fat>
 8008f6c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00e      	beq.n	8008f92 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d003      	beq.n	8008f82 <create_chain+0xa6>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f80:	d101      	bne.n	8008f86 <create_chain+0xaa>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	e03e      	b.n	8009004 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d1da      	bne.n	8008f44 <create_chain+0x68>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	e038      	b.n	8009004 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008f92:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008f94:	f04f 32ff 	mov.w	r2, #4294967295
 8008f98:	69f9      	ldr	r1, [r7, #28]
 8008f9a:	6938      	ldr	r0, [r7, #16]
 8008f9c:	f7ff fe4d 	bl	8008c3a <put_fat>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008fa4:	7dfb      	ldrb	r3, [r7, #23]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d109      	bne.n	8008fbe <create_chain+0xe2>
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d006      	beq.n	8008fbe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008fb0:	69fa      	ldr	r2, [r7, #28]
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6938      	ldr	r0, [r7, #16]
 8008fb6:	f7ff fe40 	bl	8008c3a <put_fat>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008fbe:	7dfb      	ldrb	r3, [r7, #23]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d116      	bne.n	8008ff2 <create_chain+0x116>
		fs->last_clst = ncl;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	69fa      	ldr	r2, [r7, #28]
 8008fc8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	691a      	ldr	r2, [r3, #16]
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	3b02      	subs	r3, #2
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d804      	bhi.n	8008fe2 <create_chain+0x106>
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	1e5a      	subs	r2, r3, #1
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	791b      	ldrb	r3, [r3, #4]
 8008fe6:	f043 0301 	orr.w	r3, r3, #1
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	711a      	strb	r2, [r3, #4]
 8008ff0:	e007      	b.n	8009002 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008ff2:	7dfb      	ldrb	r3, [r7, #23]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d102      	bne.n	8008ffe <create_chain+0x122>
 8008ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ffc:	e000      	b.n	8009000 <create_chain+0x124>
 8008ffe:	2301      	movs	r3, #1
 8009000:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009002:	69fb      	ldr	r3, [r7, #28]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3720      	adds	r7, #32
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009020:	3304      	adds	r3, #4
 8009022:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	0a5b      	lsrs	r3, r3, #9
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	8952      	ldrh	r2, [r2, #10]
 800902c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009030:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	1d1a      	adds	r2, r3, #4
 8009036:	613a      	str	r2, [r7, #16]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <clmt_clust+0x3a>
 8009042:	2300      	movs	r3, #0
 8009044:	e010      	b.n	8009068 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	429a      	cmp	r2, r3
 800904c:	d307      	bcc.n	800905e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	617b      	str	r3, [r7, #20]
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	3304      	adds	r3, #4
 800905a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800905c:	e7e9      	b.n	8009032 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800905e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	4413      	add	r3, r2
}
 8009068:	4618      	mov	r0, r3
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800908a:	d204      	bcs.n	8009096 <dir_sdi+0x22>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f003 031f 	and.w	r3, r3, #31
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <dir_sdi+0x26>
		return FR_INT_ERR;
 8009096:	2302      	movs	r3, #2
 8009098:	e063      	b.n	8009162 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d106      	bne.n	80090ba <dir_sdi+0x46>
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d902      	bls.n	80090ba <dir_sdi+0x46>
		clst = fs->dirbase;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10c      	bne.n	80090da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	095b      	lsrs	r3, r3, #5
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	8912      	ldrh	r2, [r2, #8]
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d301      	bcc.n	80090d0 <dir_sdi+0x5c>
 80090cc:	2302      	movs	r3, #2
 80090ce:	e048      	b.n	8009162 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	61da      	str	r2, [r3, #28]
 80090d8:	e029      	b.n	800912e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	895b      	ldrh	r3, [r3, #10]
 80090de:	025b      	lsls	r3, r3, #9
 80090e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80090e2:	e019      	b.n	8009118 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6979      	ldr	r1, [r7, #20]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff fcfe 	bl	8008aea <get_fat>
 80090ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f6:	d101      	bne.n	80090fc <dir_sdi+0x88>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e032      	b.n	8009162 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d904      	bls.n	800910c <dir_sdi+0x98>
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	429a      	cmp	r2, r3
 800910a:	d301      	bcc.n	8009110 <dir_sdi+0x9c>
 800910c:	2302      	movs	r3, #2
 800910e:	e028      	b.n	8009162 <dir_sdi+0xee>
			ofs -= csz;
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	429a      	cmp	r2, r3
 800911e:	d2e1      	bcs.n	80090e4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009120:	6979      	ldr	r1, [r7, #20]
 8009122:	6938      	ldr	r0, [r7, #16]
 8009124:	f7ff fcc2 	bl	8008aac <clust2sect>
 8009128:	4602      	mov	r2, r0
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <dir_sdi+0xcc>
 800913c:	2302      	movs	r3, #2
 800913e:	e010      	b.n	8009162 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	69da      	ldr	r2, [r3, #28]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	0a5b      	lsrs	r3, r3, #9
 8009148:	441a      	add	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915a:	441a      	add	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b086      	sub	sp, #24
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	3320      	adds	r3, #32
 8009180:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <dir_next+0x28>
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009190:	d301      	bcc.n	8009196 <dir_next+0x2c>
 8009192:	2304      	movs	r3, #4
 8009194:	e0aa      	b.n	80092ec <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800919c:	2b00      	cmp	r3, #0
 800919e:	f040 8098 	bne.w	80092d2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10b      	bne.n	80091cc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	095b      	lsrs	r3, r3, #5
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	8912      	ldrh	r2, [r2, #8]
 80091bc:	4293      	cmp	r3, r2
 80091be:	f0c0 8088 	bcc.w	80092d2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	61da      	str	r2, [r3, #28]
 80091c8:	2304      	movs	r3, #4
 80091ca:	e08f      	b.n	80092ec <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	0a5b      	lsrs	r3, r3, #9
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	8952      	ldrh	r2, [r2, #10]
 80091d4:	3a01      	subs	r2, #1
 80091d6:	4013      	ands	r3, r2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d17a      	bne.n	80092d2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	4619      	mov	r1, r3
 80091e4:	4610      	mov	r0, r2
 80091e6:	f7ff fc80 	bl	8008aea <get_fat>
 80091ea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d801      	bhi.n	80091f6 <dir_next+0x8c>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e07a      	b.n	80092ec <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fc:	d101      	bne.n	8009202 <dir_next+0x98>
 80091fe:	2301      	movs	r3, #1
 8009200:	e074      	b.n	80092ec <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	429a      	cmp	r2, r3
 800920a:	d358      	bcc.n	80092be <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	61da      	str	r2, [r3, #28]
 8009218:	2304      	movs	r3, #4
 800921a:	e067      	b.n	80092ec <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	4619      	mov	r1, r3
 8009224:	4610      	mov	r0, r2
 8009226:	f7ff fe59 	bl	8008edc <create_chain>
 800922a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <dir_next+0xcc>
 8009232:	2307      	movs	r3, #7
 8009234:	e05a      	b.n	80092ec <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d101      	bne.n	8009240 <dir_next+0xd6>
 800923c:	2302      	movs	r3, #2
 800923e:	e055      	b.n	80092ec <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009246:	d101      	bne.n	800924c <dir_next+0xe2>
 8009248:	2301      	movs	r3, #1
 800924a:	e04f      	b.n	80092ec <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f7ff fb4d 	bl	80088ec <sync_window>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <dir_next+0xf2>
 8009258:	2301      	movs	r3, #1
 800925a:	e047      	b.n	80092ec <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3330      	adds	r3, #48	; 0x30
 8009260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009264:	2100      	movs	r1, #0
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff f977 	bl	800855a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800926c:	2300      	movs	r3, #0
 800926e:	613b      	str	r3, [r7, #16]
 8009270:	6979      	ldr	r1, [r7, #20]
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7ff fc1a 	bl	8008aac <clust2sect>
 8009278:	4602      	mov	r2, r0
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	62da      	str	r2, [r3, #44]	; 0x2c
 800927e:	e012      	b.n	80092a6 <dir_next+0x13c>
						fs->wflag = 1;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2201      	movs	r2, #1
 8009284:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f7ff fb30 	bl	80088ec <sync_window>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <dir_next+0x12c>
 8009292:	2301      	movs	r3, #1
 8009294:	e02a      	b.n	80092ec <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	3301      	adds	r3, #1
 800929a:	613b      	str	r3, [r7, #16]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	895b      	ldrh	r3, [r3, #10]
 80092aa:	461a      	mov	r2, r3
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d3e6      	bcc.n	8009280 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	1ad2      	subs	r2, r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80092c4:	6979      	ldr	r1, [r7, #20]
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f7ff fbf0 	bl	8008aac <clust2sect>
 80092cc:	4602      	mov	r2, r0
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e4:	441a      	add	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009304:	2100      	movs	r1, #0
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff feb4 	bl	8009074 <dir_sdi>
 800930c:	4603      	mov	r3, r0
 800930e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d12b      	bne.n	800936e <dir_alloc+0x7a>
		n = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	4619      	mov	r1, r3
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f7ff fb27 	bl	8008974 <move_window>
 8009326:	4603      	mov	r3, r0
 8009328:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11d      	bne.n	800936c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	2be5      	cmp	r3, #229	; 0xe5
 8009338:	d004      	beq.n	8009344 <dir_alloc+0x50>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d107      	bne.n	8009354 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	3301      	adds	r3, #1
 8009348:	613b      	str	r3, [r7, #16]
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d102      	bne.n	8009358 <dir_alloc+0x64>
 8009352:	e00c      	b.n	800936e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009354:	2300      	movs	r3, #0
 8009356:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009358:	2101      	movs	r1, #1
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff ff05 	bl	800916a <dir_next>
 8009360:	4603      	mov	r3, r0
 8009362:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009364:	7dfb      	ldrb	r3, [r7, #23]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0d7      	beq.n	800931a <dir_alloc+0x26>
 800936a:	e000      	b.n	800936e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800936c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	2b04      	cmp	r3, #4
 8009372:	d101      	bne.n	8009378 <dir_alloc+0x84>
 8009374:	2307      	movs	r3, #7
 8009376:	75fb      	strb	r3, [r7, #23]
	return res;
 8009378:	7dfb      	ldrb	r3, [r7, #23]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	331a      	adds	r3, #26
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff f83f 	bl	8008414 <ld_word>
 8009396:	4603      	mov	r3, r0
 8009398:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d109      	bne.n	80093b6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	3314      	adds	r3, #20
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff f834 	bl	8008414 <ld_word>
 80093ac:	4603      	mov	r3, r0
 80093ae:	041b      	lsls	r3, r3, #16
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80093b6:	68fb      	ldr	r3, [r7, #12]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	331a      	adds	r3, #26
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	b292      	uxth	r2, r2
 80093d4:	4611      	mov	r1, r2
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff f857 	bl	800848a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d109      	bne.n	80093f8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	f103 0214 	add.w	r2, r3, #20
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	0c1b      	lsrs	r3, r3, #16
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	4619      	mov	r1, r3
 80093f2:	4610      	mov	r0, r2
 80093f4:	f7ff f849 	bl	800848a <st_word>
	}
}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800940e:	2100      	movs	r1, #0
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff fe2f 	bl	8009074 <dir_sdi>
 8009416:	4603      	mov	r3, r0
 8009418:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800941a:	7dfb      	ldrb	r3, [r7, #23]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <dir_find+0x24>
 8009420:	7dfb      	ldrb	r3, [r7, #23]
 8009422:	e03e      	b.n	80094a2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	4619      	mov	r1, r3
 800942a:	6938      	ldr	r0, [r7, #16]
 800942c:	f7ff faa2 	bl	8008974 <move_window>
 8009430:	4603      	mov	r3, r0
 8009432:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009434:	7dfb      	ldrb	r3, [r7, #23]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d12f      	bne.n	800949a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <dir_find+0x4e>
 8009448:	2304      	movs	r3, #4
 800944a:	75fb      	strb	r3, [r7, #23]
 800944c:	e028      	b.n	80094a0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	330b      	adds	r3, #11
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800945a:	b2da      	uxtb	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	330b      	adds	r3, #11
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f003 0308 	and.w	r3, r3, #8
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <dir_find+0x86>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a18      	ldr	r0, [r3, #32]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3324      	adds	r3, #36	; 0x24
 8009478:	220b      	movs	r2, #11
 800947a:	4619      	mov	r1, r3
 800947c:	f7ff f888 	bl	8008590 <mem_cmp>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00b      	beq.n	800949e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009486:	2100      	movs	r1, #0
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7ff fe6e 	bl	800916a <dir_next>
 800948e:	4603      	mov	r3, r0
 8009490:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009492:	7dfb      	ldrb	r3, [r7, #23]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0c5      	beq.n	8009424 <dir_find+0x24>
 8009498:	e002      	b.n	80094a0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800949a:	bf00      	nop
 800949c:	e000      	b.n	80094a0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800949e:	bf00      	nop

	return res;
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80094b8:	2101      	movs	r1, #1
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff ff1a 	bl	80092f4 <dir_alloc>
 80094c0:	4603      	mov	r3, r0
 80094c2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d11c      	bne.n	8009504 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	4619      	mov	r1, r3
 80094d0:	68b8      	ldr	r0, [r7, #8]
 80094d2:	f7ff fa4f 	bl	8008974 <move_window>
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d111      	bne.n	8009504 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	2220      	movs	r2, #32
 80094e6:	2100      	movs	r1, #0
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff f836 	bl	800855a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a18      	ldr	r0, [r3, #32]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3324      	adds	r3, #36	; 0x24
 80094f6:	220b      	movs	r2, #11
 80094f8:	4619      	mov	r1, r3
 80094fa:	f7ff f80d 	bl	8008518 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2201      	movs	r2, #1
 8009502:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009504:	7bfb      	ldrb	r3, [r7, #15]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3324      	adds	r3, #36	; 0x24
 8009524:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009526:	220b      	movs	r2, #11
 8009528:	2120      	movs	r1, #32
 800952a:	68b8      	ldr	r0, [r7, #8]
 800952c:	f7ff f815 	bl	800855a <mem_set>
	si = i = 0; ni = 8;
 8009530:	2300      	movs	r3, #0
 8009532:	613b      	str	r3, [r7, #16]
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	61fb      	str	r3, [r7, #28]
 8009538:	2308      	movs	r3, #8
 800953a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	61fa      	str	r2, [r7, #28]
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	4413      	add	r3, r2
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800954a:	7efb      	ldrb	r3, [r7, #27]
 800954c:	2b20      	cmp	r3, #32
 800954e:	d94e      	bls.n	80095ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009550:	7efb      	ldrb	r3, [r7, #27]
 8009552:	2b2f      	cmp	r3, #47	; 0x2f
 8009554:	d006      	beq.n	8009564 <create_name+0x54>
 8009556:	7efb      	ldrb	r3, [r7, #27]
 8009558:	2b5c      	cmp	r3, #92	; 0x5c
 800955a:	d110      	bne.n	800957e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800955c:	e002      	b.n	8009564 <create_name+0x54>
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	3301      	adds	r3, #1
 8009562:	61fb      	str	r3, [r7, #28]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	4413      	add	r3, r2
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	2b2f      	cmp	r3, #47	; 0x2f
 800956e:	d0f6      	beq.n	800955e <create_name+0x4e>
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	4413      	add	r3, r2
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	2b5c      	cmp	r3, #92	; 0x5c
 800957a:	d0f0      	beq.n	800955e <create_name+0x4e>
			break;
 800957c:	e038      	b.n	80095f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800957e:	7efb      	ldrb	r3, [r7, #27]
 8009580:	2b2e      	cmp	r3, #46	; 0x2e
 8009582:	d003      	beq.n	800958c <create_name+0x7c>
 8009584:	693a      	ldr	r2, [r7, #16]
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	429a      	cmp	r2, r3
 800958a:	d30c      	bcc.n	80095a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b0b      	cmp	r3, #11
 8009590:	d002      	beq.n	8009598 <create_name+0x88>
 8009592:	7efb      	ldrb	r3, [r7, #27]
 8009594:	2b2e      	cmp	r3, #46	; 0x2e
 8009596:	d001      	beq.n	800959c <create_name+0x8c>
 8009598:	2306      	movs	r3, #6
 800959a:	e044      	b.n	8009626 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800959c:	2308      	movs	r3, #8
 800959e:	613b      	str	r3, [r7, #16]
 80095a0:	230b      	movs	r3, #11
 80095a2:	617b      	str	r3, [r7, #20]
			continue;
 80095a4:	e022      	b.n	80095ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80095a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	da04      	bge.n	80095b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80095ae:	7efb      	ldrb	r3, [r7, #27]
 80095b0:	3b80      	subs	r3, #128	; 0x80
 80095b2:	4a1f      	ldr	r2, [pc, #124]	; (8009630 <create_name+0x120>)
 80095b4:	5cd3      	ldrb	r3, [r2, r3]
 80095b6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80095b8:	7efb      	ldrb	r3, [r7, #27]
 80095ba:	4619      	mov	r1, r3
 80095bc:	481d      	ldr	r0, [pc, #116]	; (8009634 <create_name+0x124>)
 80095be:	f7ff f80e 	bl	80085de <chk_chr>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <create_name+0xbc>
 80095c8:	2306      	movs	r3, #6
 80095ca:	e02c      	b.n	8009626 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80095cc:	7efb      	ldrb	r3, [r7, #27]
 80095ce:	2b60      	cmp	r3, #96	; 0x60
 80095d0:	d905      	bls.n	80095de <create_name+0xce>
 80095d2:	7efb      	ldrb	r3, [r7, #27]
 80095d4:	2b7a      	cmp	r3, #122	; 0x7a
 80095d6:	d802      	bhi.n	80095de <create_name+0xce>
 80095d8:	7efb      	ldrb	r3, [r7, #27]
 80095da:	3b20      	subs	r3, #32
 80095dc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	613a      	str	r2, [r7, #16]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	4413      	add	r3, r2
 80095e8:	7efa      	ldrb	r2, [r7, #27]
 80095ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80095ec:	e7a6      	b.n	800953c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80095ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	441a      	add	r2, r3
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <create_name+0xf4>
 8009600:	2306      	movs	r3, #6
 8009602:	e010      	b.n	8009626 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	2be5      	cmp	r3, #229	; 0xe5
 800960a:	d102      	bne.n	8009612 <create_name+0x102>
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2205      	movs	r2, #5
 8009610:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009612:	7efb      	ldrb	r3, [r7, #27]
 8009614:	2b20      	cmp	r3, #32
 8009616:	d801      	bhi.n	800961c <create_name+0x10c>
 8009618:	2204      	movs	r2, #4
 800961a:	e000      	b.n	800961e <create_name+0x10e>
 800961c:	2200      	movs	r2, #0
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	330b      	adds	r3, #11
 8009622:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009624:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009626:	4618      	mov	r0, r3
 8009628:	3720      	adds	r7, #32
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	08016214 	.word	0x08016214
 8009634:	0800cc98 	.word	0x0800cc98

08009638 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800964c:	e002      	b.n	8009654 <follow_path+0x1c>
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	3301      	adds	r3, #1
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	2b2f      	cmp	r3, #47	; 0x2f
 800965a:	d0f8      	beq.n	800964e <follow_path+0x16>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	2b5c      	cmp	r3, #92	; 0x5c
 8009662:	d0f4      	beq.n	800964e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	2200      	movs	r2, #0
 8009668:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	2b1f      	cmp	r3, #31
 8009670:	d80a      	bhi.n	8009688 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2280      	movs	r2, #128	; 0x80
 8009676:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800967a:	2100      	movs	r1, #0
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7ff fcf9 	bl	8009074 <dir_sdi>
 8009682:	4603      	mov	r3, r0
 8009684:	75fb      	strb	r3, [r7, #23]
 8009686:	e043      	b.n	8009710 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009688:	463b      	mov	r3, r7
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff ff3f 	bl	8009510 <create_name>
 8009692:	4603      	mov	r3, r0
 8009694:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009696:	7dfb      	ldrb	r3, [r7, #23]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d134      	bne.n	8009706 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7ff feaf 	bl	8009400 <dir_find>
 80096a2:	4603      	mov	r3, r0
 80096a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00a      	beq.n	80096ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	2b04      	cmp	r3, #4
 80096b8:	d127      	bne.n	800970a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80096ba:	7afb      	ldrb	r3, [r7, #11]
 80096bc:	f003 0304 	and.w	r3, r3, #4
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d122      	bne.n	800970a <follow_path+0xd2>
 80096c4:	2305      	movs	r3, #5
 80096c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80096c8:	e01f      	b.n	800970a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80096ca:	7afb      	ldrb	r3, [r7, #11]
 80096cc:	f003 0304 	and.w	r3, r3, #4
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d11c      	bne.n	800970e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	799b      	ldrb	r3, [r3, #6]
 80096d8:	f003 0310 	and.w	r3, r3, #16
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d102      	bne.n	80096e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80096e0:	2305      	movs	r3, #5
 80096e2:	75fb      	strb	r3, [r7, #23]
 80096e4:	e014      	b.n	8009710 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	695b      	ldr	r3, [r3, #20]
 80096f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f4:	4413      	add	r3, r2
 80096f6:	4619      	mov	r1, r3
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7ff fe42 	bl	8009382 <ld_clust>
 80096fe:	4602      	mov	r2, r0
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009704:	e7c0      	b.n	8009688 <follow_path+0x50>
			if (res != FR_OK) break;
 8009706:	bf00      	nop
 8009708:	e002      	b.n	8009710 <follow_path+0xd8>
				break;
 800970a:	bf00      	nop
 800970c:	e000      	b.n	8009710 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800970e:	bf00      	nop
			}
		}
	}

	return res;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800971a:	b480      	push	{r7}
 800971c:	b087      	sub	sp, #28
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009722:	f04f 33ff 	mov.w	r3, #4294967295
 8009726:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d031      	beq.n	8009794 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	617b      	str	r3, [r7, #20]
 8009736:	e002      	b.n	800973e <get_ldnumber+0x24>
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	3301      	adds	r3, #1
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b20      	cmp	r3, #32
 8009744:	d903      	bls.n	800974e <get_ldnumber+0x34>
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2b3a      	cmp	r3, #58	; 0x3a
 800974c:	d1f4      	bne.n	8009738 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b3a      	cmp	r3, #58	; 0x3a
 8009754:	d11c      	bne.n	8009790 <get_ldnumber+0x76>
			tp = *path;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	60fa      	str	r2, [r7, #12]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	3b30      	subs	r3, #48	; 0x30
 8009766:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2b09      	cmp	r3, #9
 800976c:	d80e      	bhi.n	800978c <get_ldnumber+0x72>
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	429a      	cmp	r2, r3
 8009774:	d10a      	bne.n	800978c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d107      	bne.n	800978c <get_ldnumber+0x72>
					vol = (int)i;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	3301      	adds	r3, #1
 8009784:	617b      	str	r3, [r7, #20]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	e002      	b.n	8009796 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009790:	2300      	movs	r3, #0
 8009792:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009794:	693b      	ldr	r3, [r7, #16]
}
 8009796:	4618      	mov	r0, r3
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
	...

080097a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	70da      	strb	r2, [r3, #3]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f04f 32ff 	mov.w	r2, #4294967295
 80097ba:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7ff f8d8 	bl	8008974 <move_window>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <check_fs+0x2a>
 80097ca:	2304      	movs	r3, #4
 80097cc:	e038      	b.n	8009840 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3330      	adds	r3, #48	; 0x30
 80097d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe fe1c 	bl	8008414 <ld_word>
 80097dc:	4603      	mov	r3, r0
 80097de:	461a      	mov	r2, r3
 80097e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d001      	beq.n	80097ec <check_fs+0x48>
 80097e8:	2303      	movs	r3, #3
 80097ea:	e029      	b.n	8009840 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097f2:	2be9      	cmp	r3, #233	; 0xe9
 80097f4:	d009      	beq.n	800980a <check_fs+0x66>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097fc:	2beb      	cmp	r3, #235	; 0xeb
 80097fe:	d11e      	bne.n	800983e <check_fs+0x9a>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009806:	2b90      	cmp	r3, #144	; 0x90
 8009808:	d119      	bne.n	800983e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3330      	adds	r3, #48	; 0x30
 800980e:	3336      	adds	r3, #54	; 0x36
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fe17 	bl	8008444 <ld_dword>
 8009816:	4603      	mov	r3, r0
 8009818:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800981c:	4a0a      	ldr	r2, [pc, #40]	; (8009848 <check_fs+0xa4>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d101      	bne.n	8009826 <check_fs+0x82>
 8009822:	2300      	movs	r3, #0
 8009824:	e00c      	b.n	8009840 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	3330      	adds	r3, #48	; 0x30
 800982a:	3352      	adds	r3, #82	; 0x52
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe fe09 	bl	8008444 <ld_dword>
 8009832:	4603      	mov	r3, r0
 8009834:	4a05      	ldr	r2, [pc, #20]	; (800984c <check_fs+0xa8>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d101      	bne.n	800983e <check_fs+0x9a>
 800983a:	2300      	movs	r3, #0
 800983c:	e000      	b.n	8009840 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800983e:	2302      	movs	r3, #2
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	00544146 	.word	0x00544146
 800984c:	33544146 	.word	0x33544146

08009850 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b096      	sub	sp, #88	; 0x58
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	4613      	mov	r3, r2
 800985c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2200      	movs	r2, #0
 8009862:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f7ff ff58 	bl	800971a <get_ldnumber>
 800986a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800986c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986e:	2b00      	cmp	r3, #0
 8009870:	da01      	bge.n	8009876 <find_volume+0x26>
 8009872:	230b      	movs	r3, #11
 8009874:	e22d      	b.n	8009cd2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009876:	4aa1      	ldr	r2, [pc, #644]	; (8009afc <find_volume+0x2ac>)
 8009878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800987a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800987e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <find_volume+0x3a>
 8009886:	230c      	movs	r3, #12
 8009888:	e223      	b.n	8009cd2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800988e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009890:	79fb      	ldrb	r3, [r7, #7]
 8009892:	f023 0301 	bic.w	r3, r3, #1
 8009896:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d01a      	beq.n	80098d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fe fd17 	bl	80082d8 <disk_status>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80098b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d10c      	bne.n	80098d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80098bc:	79fb      	ldrb	r3, [r7, #7]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d007      	beq.n	80098d2 <find_volume+0x82>
 80098c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d001      	beq.n	80098d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80098ce:	230a      	movs	r3, #10
 80098d0:	e1ff      	b.n	8009cd2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80098d2:	2300      	movs	r3, #0
 80098d4:	e1fd      	b.n	8009cd2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80098d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d8:	2200      	movs	r2, #0
 80098da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80098dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80098e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e6:	785b      	ldrb	r3, [r3, #1]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe fd0f 	bl	800830c <disk_initialize>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80098f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009900:	2303      	movs	r3, #3
 8009902:	e1e6      	b.n	8009cd2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d007      	beq.n	800991a <find_volume+0xca>
 800990a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800990e:	f003 0304 	and.w	r3, r3, #4
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009916:	230a      	movs	r3, #10
 8009918:	e1db      	b.n	8009cd2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800991e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009920:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009922:	f7ff ff3f 	bl	80097a4 <check_fs>
 8009926:	4603      	mov	r3, r0
 8009928:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800992c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009930:	2b02      	cmp	r3, #2
 8009932:	d149      	bne.n	80099c8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009934:	2300      	movs	r3, #0
 8009936:	643b      	str	r3, [r7, #64]	; 0x40
 8009938:	e01e      	b.n	8009978 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009948:	4413      	add	r3, r2
 800994a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800994c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994e:	3304      	adds	r3, #4
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d006      	beq.n	8009964 <find_volume+0x114>
 8009956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009958:	3308      	adds	r3, #8
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe fd72 	bl	8008444 <ld_dword>
 8009960:	4602      	mov	r2, r0
 8009962:	e000      	b.n	8009966 <find_volume+0x116>
 8009964:	2200      	movs	r2, #0
 8009966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	3358      	adds	r3, #88	; 0x58
 800996c:	443b      	add	r3, r7
 800996e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009974:	3301      	adds	r3, #1
 8009976:	643b      	str	r3, [r7, #64]	; 0x40
 8009978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800997a:	2b03      	cmp	r3, #3
 800997c:	d9dd      	bls.n	800993a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800997e:	2300      	movs	r3, #0
 8009980:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <find_volume+0x13e>
 8009988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800998a:	3b01      	subs	r3, #1
 800998c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800998e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	3358      	adds	r3, #88	; 0x58
 8009994:	443b      	add	r3, r7
 8009996:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800999a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800999c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d005      	beq.n	80099ae <find_volume+0x15e>
 80099a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099a6:	f7ff fefd 	bl	80097a4 <check_fs>
 80099aa:	4603      	mov	r3, r0
 80099ac:	e000      	b.n	80099b0 <find_volume+0x160>
 80099ae:	2303      	movs	r3, #3
 80099b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80099b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d905      	bls.n	80099c8 <find_volume+0x178>
 80099bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099be:	3301      	adds	r3, #1
 80099c0:	643b      	str	r3, [r7, #64]	; 0x40
 80099c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099c4:	2b03      	cmp	r3, #3
 80099c6:	d9e2      	bls.n	800998e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80099c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d101      	bne.n	80099d4 <find_volume+0x184>
 80099d0:	2301      	movs	r3, #1
 80099d2:	e17e      	b.n	8009cd2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80099d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d901      	bls.n	80099e0 <find_volume+0x190>
 80099dc:	230d      	movs	r3, #13
 80099de:	e178      	b.n	8009cd2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80099e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e2:	3330      	adds	r3, #48	; 0x30
 80099e4:	330b      	adds	r3, #11
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe fd14 	bl	8008414 <ld_word>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099f2:	d001      	beq.n	80099f8 <find_volume+0x1a8>
 80099f4:	230d      	movs	r3, #13
 80099f6:	e16c      	b.n	8009cd2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	3330      	adds	r3, #48	; 0x30
 80099fc:	3316      	adds	r3, #22
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe fd08 	bl	8008414 <ld_word>
 8009a04:	4603      	mov	r3, r0
 8009a06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d106      	bne.n	8009a1c <find_volume+0x1cc>
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	3330      	adds	r3, #48	; 0x30
 8009a12:	3324      	adds	r3, #36	; 0x24
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fe fd15 	bl	8008444 <ld_dword>
 8009a1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a20:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2e:	789b      	ldrb	r3, [r3, #2]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d005      	beq.n	8009a40 <find_volume+0x1f0>
 8009a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a36:	789b      	ldrb	r3, [r3, #2]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d001      	beq.n	8009a40 <find_volume+0x1f0>
 8009a3c:	230d      	movs	r3, #13
 8009a3e:	e148      	b.n	8009cd2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a42:	789b      	ldrb	r3, [r3, #2]
 8009a44:	461a      	mov	r2, r3
 8009a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a48:	fb02 f303 	mul.w	r3, r2, r3
 8009a4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5c:	895b      	ldrh	r3, [r3, #10]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d008      	beq.n	8009a74 <find_volume+0x224>
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	895b      	ldrh	r3, [r3, #10]
 8009a66:	461a      	mov	r2, r3
 8009a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6a:	895b      	ldrh	r3, [r3, #10]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	4013      	ands	r3, r2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <find_volume+0x228>
 8009a74:	230d      	movs	r3, #13
 8009a76:	e12c      	b.n	8009cd2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7a:	3330      	adds	r3, #48	; 0x30
 8009a7c:	3311      	adds	r3, #17
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7fe fcc8 	bl	8008414 <ld_word>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8e:	891b      	ldrh	r3, [r3, #8]
 8009a90:	f003 030f 	and.w	r3, r3, #15
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <find_volume+0x24e>
 8009a9a:	230d      	movs	r3, #13
 8009a9c:	e119      	b.n	8009cd2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa0:	3330      	adds	r3, #48	; 0x30
 8009aa2:	3313      	adds	r3, #19
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fe fcb5 	bl	8008414 <ld_word>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d106      	bne.n	8009ac2 <find_volume+0x272>
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab6:	3330      	adds	r3, #48	; 0x30
 8009ab8:	3320      	adds	r3, #32
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fe fcc2 	bl	8008444 <ld_dword>
 8009ac0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac4:	3330      	adds	r3, #48	; 0x30
 8009ac6:	330e      	adds	r3, #14
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe fca3 	bl	8008414 <ld_word>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009ad2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <find_volume+0x28c>
 8009ad8:	230d      	movs	r3, #13
 8009ada:	e0fa      	b.n	8009cd2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009adc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae0:	4413      	add	r3, r2
 8009ae2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ae4:	8912      	ldrh	r2, [r2, #8]
 8009ae6:	0912      	lsrs	r2, r2, #4
 8009ae8:	b292      	uxth	r2, r2
 8009aea:	4413      	add	r3, r2
 8009aec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009aee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d204      	bcs.n	8009b00 <find_volume+0x2b0>
 8009af6:	230d      	movs	r3, #13
 8009af8:	e0eb      	b.n	8009cd2 <find_volume+0x482>
 8009afa:	bf00      	nop
 8009afc:	20013744 	.word	0x20013744
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b08:	8952      	ldrh	r2, [r2, #10]
 8009b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b0e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <find_volume+0x2ca>
 8009b16:	230d      	movs	r3, #13
 8009b18:	e0db      	b.n	8009cd2 <find_volume+0x482>
		fmt = FS_FAT32;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d802      	bhi.n	8009b30 <find_volume+0x2e0>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d802      	bhi.n	8009b40 <find_volume+0x2f0>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	1c9a      	adds	r2, r3, #2
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b4c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009b4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b52:	441a      	add	r2, r3
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009b58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	441a      	add	r2, r3
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b60:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009b62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d11e      	bne.n	8009ba8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6c:	3330      	adds	r3, #48	; 0x30
 8009b6e:	332a      	adds	r3, #42	; 0x2a
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fe fc4f 	bl	8008414 <ld_word>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <find_volume+0x330>
 8009b7c:	230d      	movs	r3, #13
 8009b7e:	e0a8      	b.n	8009cd2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b82:	891b      	ldrh	r3, [r3, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <find_volume+0x33c>
 8009b88:	230d      	movs	r3, #13
 8009b8a:	e0a2      	b.n	8009cd2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8e:	3330      	adds	r3, #48	; 0x30
 8009b90:	332c      	adds	r3, #44	; 0x2c
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7fe fc56 	bl	8008444 <ld_dword>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8009ba6:	e01f      	b.n	8009be8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	891b      	ldrh	r3, [r3, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <find_volume+0x364>
 8009bb0:	230d      	movs	r3, #13
 8009bb2:	e08e      	b.n	8009cd2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	6a1a      	ldr	r2, [r3, #32]
 8009bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bba:	441a      	add	r2, r3
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009bc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d103      	bne.n	8009bd0 <find_volume+0x380>
 8009bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	e00a      	b.n	8009be6 <find_volume+0x396>
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd2:	695a      	ldr	r2, [r3, #20]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	4413      	add	r3, r2
 8009bda:	085a      	lsrs	r2, r3, #1
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bde:	695b      	ldr	r3, [r3, #20]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009be6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	699a      	ldr	r2, [r3, #24]
 8009bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009bf2:	0a5b      	lsrs	r3, r3, #9
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d201      	bcs.n	8009bfc <find_volume+0x3ac>
 8009bf8:	230d      	movs	r3, #13
 8009bfa:	e06a      	b.n	8009cd2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009c02:	611a      	str	r2, [r3, #16]
 8009c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c06:	691a      	ldr	r2, [r3, #16]
 8009c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0e:	2280      	movs	r2, #128	; 0x80
 8009c10:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009c12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d149      	bne.n	8009cae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1c:	3330      	adds	r3, #48	; 0x30
 8009c1e:	3330      	adds	r3, #48	; 0x30
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fe fbf7 	bl	8008414 <ld_word>
 8009c26:	4603      	mov	r3, r0
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d140      	bne.n	8009cae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c2e:	3301      	adds	r3, #1
 8009c30:	4619      	mov	r1, r3
 8009c32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c34:	f7fe fe9e 	bl	8008974 <move_window>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d137      	bne.n	8009cae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c40:	2200      	movs	r2, #0
 8009c42:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c46:	3330      	adds	r3, #48	; 0x30
 8009c48:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7fe fbe1 	bl	8008414 <ld_word>
 8009c52:	4603      	mov	r3, r0
 8009c54:	461a      	mov	r2, r3
 8009c56:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d127      	bne.n	8009cae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c60:	3330      	adds	r3, #48	; 0x30
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fe fbee 	bl	8008444 <ld_dword>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	4a1c      	ldr	r2, [pc, #112]	; (8009cdc <find_volume+0x48c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d11e      	bne.n	8009cae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	3330      	adds	r3, #48	; 0x30
 8009c74:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7fe fbe3 	bl	8008444 <ld_dword>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4a17      	ldr	r2, [pc, #92]	; (8009ce0 <find_volume+0x490>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d113      	bne.n	8009cae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	3330      	adds	r3, #48	; 0x30
 8009c8a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fe fbd8 	bl	8008444 <ld_dword>
 8009c94:	4602      	mov	r2, r0
 8009c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c98:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9c:	3330      	adds	r3, #48	; 0x30
 8009c9e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe fbce 	bl	8008444 <ld_dword>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cac:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009cb4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <find_volume+0x494>)
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	4b09      	ldr	r3, [pc, #36]	; (8009ce4 <find_volume+0x494>)
 8009cc0:	801a      	strh	r2, [r3, #0]
 8009cc2:	4b08      	ldr	r3, [pc, #32]	; (8009ce4 <find_volume+0x494>)
 8009cc4:	881a      	ldrh	r2, [r3, #0]
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009cca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ccc:	f7fe fdea 	bl	80088a4 <clear_lock>
#endif
	return FR_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3758      	adds	r7, #88	; 0x58
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	41615252 	.word	0x41615252
 8009ce0:	61417272 	.word	0x61417272
 8009ce4:	20013748 	.word	0x20013748

08009ce8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009cf2:	2309      	movs	r3, #9
 8009cf4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01c      	beq.n	8009d36 <validate+0x4e>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d018      	beq.n	8009d36 <validate+0x4e>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d013      	beq.n	8009d36 <validate+0x4e>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	889a      	ldrh	r2, [r3, #4]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	88db      	ldrh	r3, [r3, #6]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d10c      	bne.n	8009d36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	785b      	ldrb	r3, [r3, #1]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fad8 	bl	80082d8 <disk_status>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <validate+0x4e>
			res = FR_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <validate+0x5a>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	e000      	b.n	8009d44 <validate+0x5c>
 8009d42:	2300      	movs	r3, #0
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	6013      	str	r3, [r2, #0]
	return res;
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b088      	sub	sp, #32
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009d66:	f107 0310 	add.w	r3, r7, #16
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7ff fcd5 	bl	800971a <get_ldnumber>
 8009d70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	da01      	bge.n	8009d7c <f_mount+0x28>
 8009d78:	230b      	movs	r3, #11
 8009d7a:	e02b      	b.n	8009dd4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009d7c:	4a17      	ldr	r2, [pc, #92]	; (8009ddc <f_mount+0x88>)
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d005      	beq.n	8009d98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009d8c:	69b8      	ldr	r0, [r7, #24]
 8009d8e:	f7fe fd89 	bl	80088a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	2200      	movs	r2, #0
 8009d96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d002      	beq.n	8009da4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	490d      	ldr	r1, [pc, #52]	; (8009ddc <f_mount+0x88>)
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <f_mount+0x66>
 8009db4:	79fb      	ldrb	r3, [r7, #7]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d001      	beq.n	8009dbe <f_mount+0x6a>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	e00a      	b.n	8009dd4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009dbe:	f107 010c 	add.w	r1, r7, #12
 8009dc2:	f107 0308 	add.w	r3, r7, #8
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7ff fd41 	bl	8009850 <find_volume>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3720      	adds	r7, #32
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	20013744 	.word	0x20013744

08009de0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b098      	sub	sp, #96	; 0x60
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	4613      	mov	r3, r2
 8009dec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d101      	bne.n	8009df8 <f_open+0x18>
 8009df4:	2309      	movs	r3, #9
 8009df6:	e1ad      	b.n	800a154 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009dfe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009e00:	79fa      	ldrb	r2, [r7, #7]
 8009e02:	f107 0110 	add.w	r1, r7, #16
 8009e06:	f107 0308 	add.w	r3, r7, #8
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff fd20 	bl	8009850 <find_volume>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f040 8191 	bne.w	800a142 <f_open+0x362>
		dj.obj.fs = fs;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009e24:	68ba      	ldr	r2, [r7, #8]
 8009e26:	f107 0314 	add.w	r3, r7, #20
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff fc03 	bl	8009638 <follow_path>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009e38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d11a      	bne.n	8009e76 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009e40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e44:	b25b      	sxtb	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	da03      	bge.n	8009e52 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009e4a:	2306      	movs	r3, #6
 8009e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009e50:	e011      	b.n	8009e76 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	f023 0301 	bic.w	r3, r3, #1
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	bf14      	ite	ne
 8009e5c:	2301      	movne	r3, #1
 8009e5e:	2300      	moveq	r3, #0
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	461a      	mov	r2, r3
 8009e64:	f107 0314 	add.w	r3, r7, #20
 8009e68:	4611      	mov	r1, r2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fbd2 	bl	8008614 <chk_lock>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009e76:	79fb      	ldrb	r3, [r7, #7]
 8009e78:	f003 031c 	and.w	r3, r3, #28
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d07f      	beq.n	8009f80 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009e80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d017      	beq.n	8009eb8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d10e      	bne.n	8009eae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009e90:	f7fe fc1c 	bl	80086cc <enq_lock>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d006      	beq.n	8009ea8 <f_open+0xc8>
 8009e9a:	f107 0314 	add.w	r3, r7, #20
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7ff fb03 	bl	80094aa <dir_register>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	e000      	b.n	8009eaa <f_open+0xca>
 8009ea8:	2312      	movs	r3, #18
 8009eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	f043 0308 	orr.w	r3, r3, #8
 8009eb4:	71fb      	strb	r3, [r7, #7]
 8009eb6:	e010      	b.n	8009eda <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009eb8:	7ebb      	ldrb	r3, [r7, #26]
 8009eba:	f003 0311 	and.w	r3, r3, #17
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <f_open+0xea>
					res = FR_DENIED;
 8009ec2:	2307      	movs	r3, #7
 8009ec4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ec8:	e007      	b.n	8009eda <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009eca:	79fb      	ldrb	r3, [r7, #7]
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <f_open+0xfa>
 8009ed4:	2308      	movs	r3, #8
 8009ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009eda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d168      	bne.n	8009fb4 <f_open+0x1d4>
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	f003 0308 	and.w	r3, r3, #8
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d063      	beq.n	8009fb4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009eec:	f7fd fcb6 	bl	800785c <get_fattime>
 8009ef0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef4:	330e      	adds	r3, #14
 8009ef6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fe fae1 	bl	80084c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f00:	3316      	adds	r3, #22
 8009f02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe fadb 	bl	80084c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0c:	330b      	adds	r3, #11
 8009f0e:	2220      	movs	r2, #32
 8009f10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f16:	4611      	mov	r1, r2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7ff fa32 	bl	8009382 <ld_clust>
 8009f1e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f24:	2200      	movs	r2, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7ff fa4a 	bl	80093c0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2e:	331c      	adds	r3, #28
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fac4 	bl	80084c0 <st_dword>
					fs->wflag = 1;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d037      	beq.n	8009fb4 <f_open+0x1d4>
						dw = fs->winsect;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f48:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009f4a:	f107 0314 	add.w	r3, r7, #20
 8009f4e:	2200      	movs	r2, #0
 8009f50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7fe ff5d 	bl	8008e12 <remove_chain>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009f5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d126      	bne.n	8009fb4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe fd02 	bl	8008974 <move_window>
 8009f70:	4603      	mov	r3, r0
 8009f72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f7a:	3a01      	subs	r2, #1
 8009f7c:	60da      	str	r2, [r3, #12]
 8009f7e:	e019      	b.n	8009fb4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009f80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d115      	bne.n	8009fb4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009f88:	7ebb      	ldrb	r3, [r7, #26]
 8009f8a:	f003 0310 	and.w	r3, r3, #16
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009f92:	2304      	movs	r3, #4
 8009f94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009f98:	e00c      	b.n	8009fb4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009f9a:	79fb      	ldrb	r3, [r7, #7]
 8009f9c:	f003 0302 	and.w	r3, r3, #2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d007      	beq.n	8009fb4 <f_open+0x1d4>
 8009fa4:	7ebb      	ldrb	r3, [r7, #26]
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d002      	beq.n	8009fb4 <f_open+0x1d4>
						res = FR_DENIED;
 8009fae:	2307      	movs	r3, #7
 8009fb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009fb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d128      	bne.n	800a00e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009fbc:	79fb      	ldrb	r3, [r7, #7]
 8009fbe:	f003 0308 	and.w	r3, r3, #8
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d003      	beq.n	8009fce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fcc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	f023 0301 	bic.w	r3, r3, #1
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	bf14      	ite	ne
 8009fe6:	2301      	movne	r3, #1
 8009fe8:	2300      	moveq	r3, #0
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	461a      	mov	r2, r3
 8009fee:	f107 0314 	add.w	r3, r7, #20
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7fe fb8b 	bl	8008710 <inc_lock>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	691b      	ldr	r3, [r3, #16]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d102      	bne.n	800a00e <f_open+0x22e>
 800a008:	2302      	movs	r3, #2
 800a00a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a00e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a012:	2b00      	cmp	r3, #0
 800a014:	f040 8095 	bne.w	800a142 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a01c:	4611      	mov	r1, r2
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff f9af 	bl	8009382 <ld_clust>
 800a024:	4602      	mov	r2, r0
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02c:	331c      	adds	r3, #28
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe fa08 	bl	8008444 <ld_dword>
 800a034:	4602      	mov	r2, r0
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	88da      	ldrh	r2, [r3, #6]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	79fa      	ldrb	r2, [r7, #7]
 800a052:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	3330      	adds	r3, #48	; 0x30
 800a06a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a06e:	2100      	movs	r1, #0
 800a070:	4618      	mov	r0, r3
 800a072:	f7fe fa72 	bl	800855a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a076:	79fb      	ldrb	r3, [r7, #7]
 800a078:	f003 0320 	and.w	r3, r3, #32
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d060      	beq.n	800a142 <f_open+0x362>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d05c      	beq.n	800a142 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	68da      	ldr	r2, [r3, #12]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	895b      	ldrh	r3, [r3, #10]
 800a094:	025b      	lsls	r3, r3, #9
 800a096:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	657b      	str	r3, [r7, #84]	; 0x54
 800a0a4:	e016      	b.n	800a0d4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fd1d 	bl	8008aea <get_fat>
 800a0b0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a0b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d802      	bhi.n	800a0be <f_open+0x2de>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a0be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c4:	d102      	bne.n	800a0cc <f_open+0x2ec>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a0cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	657b      	str	r3, [r7, #84]	; 0x54
 800a0d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d103      	bne.n	800a0e4 <f_open+0x304>
 800a0dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d8e0      	bhi.n	800a0a6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a0ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d127      	bne.n	800a142 <f_open+0x362>
 800a0f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d022      	beq.n	800a142 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a100:	4618      	mov	r0, r3
 800a102:	f7fe fcd3 	bl	8008aac <clust2sect>
 800a106:	6478      	str	r0, [r7, #68]	; 0x44
 800a108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d103      	bne.n	800a116 <f_open+0x336>
						res = FR_INT_ERR;
 800a10e:	2302      	movs	r3, #2
 800a110:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a114:	e015      	b.n	800a142 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a118:	0a5a      	lsrs	r2, r3, #9
 800a11a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a11c:	441a      	add	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	7858      	ldrb	r0, [r3, #1]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a1a      	ldr	r2, [r3, #32]
 800a130:	2301      	movs	r3, #1
 800a132:	f7fe f911 	bl	8008358 <disk_read>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <f_open+0x362>
 800a13c:	2301      	movs	r3, #1
 800a13e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <f_open+0x370>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a150:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a154:	4618      	mov	r0, r3
 800a156:	3760      	adds	r7, #96	; 0x60
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08e      	sub	sp, #56	; 0x38
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f107 0214 	add.w	r2, r7, #20
 800a17a:	4611      	mov	r1, r2
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7ff fdb3 	bl	8009ce8 <validate>
 800a182:	4603      	mov	r3, r0
 800a184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d107      	bne.n	800a1a0 <f_read+0x44>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	7d5b      	ldrb	r3, [r3, #21]
 800a194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d002      	beq.n	800a1a6 <f_read+0x4a>
 800a1a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1a4:	e115      	b.n	800a3d2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	7d1b      	ldrb	r3, [r3, #20]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <f_read+0x5a>
 800a1b2:	2307      	movs	r3, #7
 800a1b4:	e10d      	b.n	800a3d2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	68da      	ldr	r2, [r3, #12]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	6a3b      	ldr	r3, [r7, #32]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	f240 80fe 	bls.w	800a3c8 <f_read+0x26c>
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a1d0:	e0fa      	b.n	800a3c8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f040 80c6 	bne.w	800a36c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	0a5b      	lsrs	r3, r3, #9
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	8952      	ldrh	r2, [r2, #10]
 800a1ea:	3a01      	subs	r2, #1
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d12f      	bne.n	800a256 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d103      	bne.n	800a206 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	633b      	str	r3, [r7, #48]	; 0x30
 800a204:	e013      	b.n	800a22e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d007      	beq.n	800a21e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	4619      	mov	r1, r3
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f7fe fef9 	bl	800900c <clmt_clust>
 800a21a:	6338      	str	r0, [r7, #48]	; 0x30
 800a21c:	e007      	b.n	800a22e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	69db      	ldr	r3, [r3, #28]
 800a224:	4619      	mov	r1, r3
 800a226:	4610      	mov	r0, r2
 800a228:	f7fe fc5f 	bl	8008aea <get_fat>
 800a22c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	2b01      	cmp	r3, #1
 800a232:	d804      	bhi.n	800a23e <f_read+0xe2>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2202      	movs	r2, #2
 800a238:	755a      	strb	r2, [r3, #21]
 800a23a:	2302      	movs	r3, #2
 800a23c:	e0c9      	b.n	800a3d2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a244:	d104      	bne.n	800a250 <f_read+0xf4>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	755a      	strb	r2, [r3, #21]
 800a24c:	2301      	movs	r3, #1
 800a24e:	e0c0      	b.n	800a3d2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a254:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	69db      	ldr	r3, [r3, #28]
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fe fc24 	bl	8008aac <clust2sect>
 800a264:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d104      	bne.n	800a276 <f_read+0x11a>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2202      	movs	r2, #2
 800a270:	755a      	strb	r2, [r3, #21]
 800a272:	2302      	movs	r3, #2
 800a274:	e0ad      	b.n	800a3d2 <f_read+0x276>
			sect += csect;
 800a276:	69ba      	ldr	r2, [r7, #24]
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	4413      	add	r3, r2
 800a27c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	0a5b      	lsrs	r3, r3, #9
 800a282:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a286:	2b00      	cmp	r3, #0
 800a288:	d039      	beq.n	800a2fe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a28a:	69fa      	ldr	r2, [r7, #28]
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	4413      	add	r3, r2
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	8952      	ldrh	r2, [r2, #10]
 800a294:	4293      	cmp	r3, r2
 800a296:	d905      	bls.n	800a2a4 <f_read+0x148>
					cc = fs->csize - csect;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	895b      	ldrh	r3, [r3, #10]
 800a29c:	461a      	mov	r2, r3
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	7858      	ldrb	r0, [r3, #1]
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2ae:	f7fe f853 	bl	8008358 <disk_read>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d004      	beq.n	800a2c2 <f_read+0x166>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	755a      	strb	r2, [r3, #21]
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e087      	b.n	800a3d2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	7d1b      	ldrb	r3, [r3, #20]
 800a2c6:	b25b      	sxtb	r3, r3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	da14      	bge.n	800a2f6 <f_read+0x19a>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a1a      	ldr	r2, [r3, #32]
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d90d      	bls.n	800a2f6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6a1a      	ldr	r2, [r3, #32]
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	025b      	lsls	r3, r3, #9
 800a2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e6:	18d0      	adds	r0, r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3330      	adds	r3, #48	; 0x30
 800a2ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	f7fe f911 	bl	8008518 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f8:	025b      	lsls	r3, r3, #9
 800a2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a2fc:	e050      	b.n	800a3a0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	69ba      	ldr	r2, [r7, #24]
 800a304:	429a      	cmp	r2, r3
 800a306:	d02e      	beq.n	800a366 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	7d1b      	ldrb	r3, [r3, #20]
 800a30c:	b25b      	sxtb	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	da18      	bge.n	800a344 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	7858      	ldrb	r0, [r3, #1]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a1a      	ldr	r2, [r3, #32]
 800a320:	2301      	movs	r3, #1
 800a322:	f7fe f839 	bl	8008398 <disk_write>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d004      	beq.n	800a336 <f_read+0x1da>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2201      	movs	r2, #1
 800a330:	755a      	strb	r2, [r3, #21]
 800a332:	2301      	movs	r3, #1
 800a334:	e04d      	b.n	800a3d2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	7d1b      	ldrb	r3, [r3, #20]
 800a33a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	7858      	ldrb	r0, [r3, #1]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a34e:	2301      	movs	r3, #1
 800a350:	69ba      	ldr	r2, [r7, #24]
 800a352:	f7fe f801 	bl	8008358 <disk_read>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <f_read+0x20a>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2201      	movs	r2, #1
 800a360:	755a      	strb	r2, [r3, #21]
 800a362:	2301      	movs	r3, #1
 800a364:	e035      	b.n	800a3d2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	69ba      	ldr	r2, [r7, #24]
 800a36a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a374:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a378:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a37a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d901      	bls.n	800a386 <f_read+0x22a>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a394:	4413      	add	r3, r2
 800a396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a398:	4619      	mov	r1, r3
 800a39a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a39c:	f7fe f8bc 	bl	8008518 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a4:	4413      	add	r3, r2
 800a3a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	699a      	ldr	r2, [r3, #24]
 800a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ae:	441a      	add	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	619a      	str	r2, [r3, #24]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ba:	441a      	add	r2, r3
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f47f af01 	bne.w	800a1d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3738      	adds	r7, #56	; 0x38
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b086      	sub	sp, #24
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f107 0208 	add.w	r2, r7, #8
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff fc7c 	bl	8009ce8 <validate>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d168      	bne.n	800a4cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	7d1b      	ldrb	r3, [r3, #20]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a402:	2b00      	cmp	r3, #0
 800a404:	d062      	beq.n	800a4cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	7d1b      	ldrb	r3, [r3, #20]
 800a40a:	b25b      	sxtb	r3, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	da15      	bge.n	800a43c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	7858      	ldrb	r0, [r3, #1]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a1a      	ldr	r2, [r3, #32]
 800a41e:	2301      	movs	r3, #1
 800a420:	f7fd ffba 	bl	8008398 <disk_write>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <f_sync+0x54>
 800a42a:	2301      	movs	r3, #1
 800a42c:	e04f      	b.n	800a4ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	7d1b      	ldrb	r3, [r3, #20]
 800a432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a436:	b2da      	uxtb	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a43c:	f7fd fa0e 	bl	800785c <get_fattime>
 800a440:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	4619      	mov	r1, r3
 800a44a:	4610      	mov	r0, r2
 800a44c:	f7fe fa92 	bl	8008974 <move_window>
 800a450:	4603      	mov	r3, r0
 800a452:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a454:	7dfb      	ldrb	r3, [r7, #23]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d138      	bne.n	800a4cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	330b      	adds	r3, #11
 800a464:	781a      	ldrb	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	330b      	adds	r3, #11
 800a46a:	f042 0220 	orr.w	r2, r2, #32
 800a46e:	b2d2      	uxtb	r2, r2
 800a470:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6818      	ldr	r0, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	461a      	mov	r2, r3
 800a47c:	68f9      	ldr	r1, [r7, #12]
 800a47e:	f7fe ff9f 	bl	80093c0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f103 021c 	add.w	r2, r3, #28
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	4619      	mov	r1, r3
 800a48e:	4610      	mov	r0, r2
 800a490:	f7fe f816 	bl	80084c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3316      	adds	r3, #22
 800a498:	6939      	ldr	r1, [r7, #16]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fe f810 	bl	80084c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3312      	adds	r3, #18
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fd ffef 	bl	800848a <st_word>
					fs->wflag = 1;
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f7fe fa8b 	bl	80089d0 <sync_fs>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	7d1b      	ldrb	r3, [r3, #20]
 800a4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7ff ff7b 	bl	800a3da <f_sync>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d118      	bne.n	800a520 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f107 0208 	add.w	r2, r7, #8
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff fbf6 	bl	8009ce8 <validate>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a500:	7bfb      	ldrb	r3, [r7, #15]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d10c      	bne.n	800a520 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fe f98e 	bl	800882c <dec_lock>
 800a510:	4603      	mov	r3, r0
 800a512:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d102      	bne.n	800a520 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a520:	7bfb      	ldrb	r3, [r7, #15]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
	...

0800a52c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	4613      	mov	r3, r2
 800a538:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a53a:	2301      	movs	r3, #1
 800a53c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a542:	4b1f      	ldr	r3, [pc, #124]	; (800a5c0 <FATFS_LinkDriverEx+0x94>)
 800a544:	7a5b      	ldrb	r3, [r3, #9]
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d131      	bne.n	800a5b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a54c:	4b1c      	ldr	r3, [pc, #112]	; (800a5c0 <FATFS_LinkDriverEx+0x94>)
 800a54e:	7a5b      	ldrb	r3, [r3, #9]
 800a550:	b2db      	uxtb	r3, r3
 800a552:	461a      	mov	r2, r3
 800a554:	4b1a      	ldr	r3, [pc, #104]	; (800a5c0 <FATFS_LinkDriverEx+0x94>)
 800a556:	2100      	movs	r1, #0
 800a558:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a55a:	4b19      	ldr	r3, [pc, #100]	; (800a5c0 <FATFS_LinkDriverEx+0x94>)
 800a55c:	7a5b      	ldrb	r3, [r3, #9]
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	4a17      	ldr	r2, [pc, #92]	; (800a5c0 <FATFS_LinkDriverEx+0x94>)
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a56a:	4b15      	ldr	r3, [pc, #84]	; (800a5c0 <FATFS_LinkDriverEx+0x94>)
 800a56c:	7a5b      	ldrb	r3, [r3, #9]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	461a      	mov	r2, r3
 800a572:	4b13      	ldr	r3, [pc, #76]	; (800a5c0 <FATFS_LinkDriverEx+0x94>)
 800a574:	4413      	add	r3, r2
 800a576:	79fa      	ldrb	r2, [r7, #7]
 800a578:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a57a:	4b11      	ldr	r3, [pc, #68]	; (800a5c0 <FATFS_LinkDriverEx+0x94>)
 800a57c:	7a5b      	ldrb	r3, [r3, #9]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	b2d1      	uxtb	r1, r2
 800a584:	4a0e      	ldr	r2, [pc, #56]	; (800a5c0 <FATFS_LinkDriverEx+0x94>)
 800a586:	7251      	strb	r1, [r2, #9]
 800a588:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a58a:	7dbb      	ldrb	r3, [r7, #22]
 800a58c:	3330      	adds	r3, #48	; 0x30
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	3301      	adds	r3, #1
 800a598:	223a      	movs	r2, #58	; 0x3a
 800a59a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	3302      	adds	r3, #2
 800a5a0:	222f      	movs	r2, #47	; 0x2f
 800a5a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3303      	adds	r3, #3
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	371c      	adds	r7, #28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	2001376c 	.word	0x2001376c

0800a5c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7ff ffaa 	bl	800a52c <FATFS_LinkDriverEx>
 800a5d8:	4603      	mov	r3, r0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
	...

0800a5e4 <__errno>:
 800a5e4:	4b01      	ldr	r3, [pc, #4]	; (800a5ec <__errno+0x8>)
 800a5e6:	6818      	ldr	r0, [r3, #0]
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	20000024 	.word	0x20000024

0800a5f0 <__libc_init_array>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	4d0d      	ldr	r5, [pc, #52]	; (800a628 <__libc_init_array+0x38>)
 800a5f4:	4c0d      	ldr	r4, [pc, #52]	; (800a62c <__libc_init_array+0x3c>)
 800a5f6:	1b64      	subs	r4, r4, r5
 800a5f8:	10a4      	asrs	r4, r4, #2
 800a5fa:	2600      	movs	r6, #0
 800a5fc:	42a6      	cmp	r6, r4
 800a5fe:	d109      	bne.n	800a614 <__libc_init_array+0x24>
 800a600:	4d0b      	ldr	r5, [pc, #44]	; (800a630 <__libc_init_array+0x40>)
 800a602:	4c0c      	ldr	r4, [pc, #48]	; (800a634 <__libc_init_array+0x44>)
 800a604:	f001 ffd6 	bl	800c5b4 <_init>
 800a608:	1b64      	subs	r4, r4, r5
 800a60a:	10a4      	asrs	r4, r4, #2
 800a60c:	2600      	movs	r6, #0
 800a60e:	42a6      	cmp	r6, r4
 800a610:	d105      	bne.n	800a61e <__libc_init_array+0x2e>
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	f855 3b04 	ldr.w	r3, [r5], #4
 800a618:	4798      	blx	r3
 800a61a:	3601      	adds	r6, #1
 800a61c:	e7ee      	b.n	800a5fc <__libc_init_array+0xc>
 800a61e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a622:	4798      	blx	r3
 800a624:	3601      	adds	r6, #1
 800a626:	e7f2      	b.n	800a60e <__libc_init_array+0x1e>
 800a628:	08016368 	.word	0x08016368
 800a62c:	08016368 	.word	0x08016368
 800a630:	08016368 	.word	0x08016368
 800a634:	0801636c 	.word	0x0801636c

0800a638 <memcpy>:
 800a638:	440a      	add	r2, r1
 800a63a:	4291      	cmp	r1, r2
 800a63c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a640:	d100      	bne.n	800a644 <memcpy+0xc>
 800a642:	4770      	bx	lr
 800a644:	b510      	push	{r4, lr}
 800a646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a64a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a64e:	4291      	cmp	r1, r2
 800a650:	d1f9      	bne.n	800a646 <memcpy+0xe>
 800a652:	bd10      	pop	{r4, pc}

0800a654 <memset>:
 800a654:	4402      	add	r2, r0
 800a656:	4603      	mov	r3, r0
 800a658:	4293      	cmp	r3, r2
 800a65a:	d100      	bne.n	800a65e <memset+0xa>
 800a65c:	4770      	bx	lr
 800a65e:	f803 1b01 	strb.w	r1, [r3], #1
 800a662:	e7f9      	b.n	800a658 <memset+0x4>

0800a664 <iprintf>:
 800a664:	b40f      	push	{r0, r1, r2, r3}
 800a666:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <iprintf+0x2c>)
 800a668:	b513      	push	{r0, r1, r4, lr}
 800a66a:	681c      	ldr	r4, [r3, #0]
 800a66c:	b124      	cbz	r4, 800a678 <iprintf+0x14>
 800a66e:	69a3      	ldr	r3, [r4, #24]
 800a670:	b913      	cbnz	r3, 800a678 <iprintf+0x14>
 800a672:	4620      	mov	r0, r4
 800a674:	f000 fa74 	bl	800ab60 <__sinit>
 800a678:	ab05      	add	r3, sp, #20
 800a67a:	9a04      	ldr	r2, [sp, #16]
 800a67c:	68a1      	ldr	r1, [r4, #8]
 800a67e:	9301      	str	r3, [sp, #4]
 800a680:	4620      	mov	r0, r4
 800a682:	f000 fc7d 	bl	800af80 <_vfiprintf_r>
 800a686:	b002      	add	sp, #8
 800a688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a68c:	b004      	add	sp, #16
 800a68e:	4770      	bx	lr
 800a690:	20000024 	.word	0x20000024

0800a694 <putchar>:
 800a694:	4b09      	ldr	r3, [pc, #36]	; (800a6bc <putchar+0x28>)
 800a696:	b513      	push	{r0, r1, r4, lr}
 800a698:	681c      	ldr	r4, [r3, #0]
 800a69a:	4601      	mov	r1, r0
 800a69c:	b134      	cbz	r4, 800a6ac <putchar+0x18>
 800a69e:	69a3      	ldr	r3, [r4, #24]
 800a6a0:	b923      	cbnz	r3, 800a6ac <putchar+0x18>
 800a6a2:	9001      	str	r0, [sp, #4]
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fa5b 	bl	800ab60 <__sinit>
 800a6aa:	9901      	ldr	r1, [sp, #4]
 800a6ac:	68a2      	ldr	r2, [r4, #8]
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	b002      	add	sp, #8
 800a6b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b6:	f000 bf27 	b.w	800b508 <_putc_r>
 800a6ba:	bf00      	nop
 800a6bc:	20000024 	.word	0x20000024

0800a6c0 <_puts_r>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	460e      	mov	r6, r1
 800a6c4:	4605      	mov	r5, r0
 800a6c6:	b118      	cbz	r0, 800a6d0 <_puts_r+0x10>
 800a6c8:	6983      	ldr	r3, [r0, #24]
 800a6ca:	b90b      	cbnz	r3, 800a6d0 <_puts_r+0x10>
 800a6cc:	f000 fa48 	bl	800ab60 <__sinit>
 800a6d0:	69ab      	ldr	r3, [r5, #24]
 800a6d2:	68ac      	ldr	r4, [r5, #8]
 800a6d4:	b913      	cbnz	r3, 800a6dc <_puts_r+0x1c>
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	f000 fa42 	bl	800ab60 <__sinit>
 800a6dc:	4b2c      	ldr	r3, [pc, #176]	; (800a790 <_puts_r+0xd0>)
 800a6de:	429c      	cmp	r4, r3
 800a6e0:	d120      	bne.n	800a724 <_puts_r+0x64>
 800a6e2:	686c      	ldr	r4, [r5, #4]
 800a6e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6e6:	07db      	lsls	r3, r3, #31
 800a6e8:	d405      	bmi.n	800a6f6 <_puts_r+0x36>
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	0598      	lsls	r0, r3, #22
 800a6ee:	d402      	bmi.n	800a6f6 <_puts_r+0x36>
 800a6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6f2:	f000 fad3 	bl	800ac9c <__retarget_lock_acquire_recursive>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	0719      	lsls	r1, r3, #28
 800a6fa:	d51d      	bpl.n	800a738 <_puts_r+0x78>
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	b1db      	cbz	r3, 800a738 <_puts_r+0x78>
 800a700:	3e01      	subs	r6, #1
 800a702:	68a3      	ldr	r3, [r4, #8]
 800a704:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a708:	3b01      	subs	r3, #1
 800a70a:	60a3      	str	r3, [r4, #8]
 800a70c:	bb39      	cbnz	r1, 800a75e <_puts_r+0x9e>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	da38      	bge.n	800a784 <_puts_r+0xc4>
 800a712:	4622      	mov	r2, r4
 800a714:	210a      	movs	r1, #10
 800a716:	4628      	mov	r0, r5
 800a718:	f000 f848 	bl	800a7ac <__swbuf_r>
 800a71c:	3001      	adds	r0, #1
 800a71e:	d011      	beq.n	800a744 <_puts_r+0x84>
 800a720:	250a      	movs	r5, #10
 800a722:	e011      	b.n	800a748 <_puts_r+0x88>
 800a724:	4b1b      	ldr	r3, [pc, #108]	; (800a794 <_puts_r+0xd4>)
 800a726:	429c      	cmp	r4, r3
 800a728:	d101      	bne.n	800a72e <_puts_r+0x6e>
 800a72a:	68ac      	ldr	r4, [r5, #8]
 800a72c:	e7da      	b.n	800a6e4 <_puts_r+0x24>
 800a72e:	4b1a      	ldr	r3, [pc, #104]	; (800a798 <_puts_r+0xd8>)
 800a730:	429c      	cmp	r4, r3
 800a732:	bf08      	it	eq
 800a734:	68ec      	ldreq	r4, [r5, #12]
 800a736:	e7d5      	b.n	800a6e4 <_puts_r+0x24>
 800a738:	4621      	mov	r1, r4
 800a73a:	4628      	mov	r0, r5
 800a73c:	f000 f888 	bl	800a850 <__swsetup_r>
 800a740:	2800      	cmp	r0, #0
 800a742:	d0dd      	beq.n	800a700 <_puts_r+0x40>
 800a744:	f04f 35ff 	mov.w	r5, #4294967295
 800a748:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a74a:	07da      	lsls	r2, r3, #31
 800a74c:	d405      	bmi.n	800a75a <_puts_r+0x9a>
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	059b      	lsls	r3, r3, #22
 800a752:	d402      	bmi.n	800a75a <_puts_r+0x9a>
 800a754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a756:	f000 faa2 	bl	800ac9e <__retarget_lock_release_recursive>
 800a75a:	4628      	mov	r0, r5
 800a75c:	bd70      	pop	{r4, r5, r6, pc}
 800a75e:	2b00      	cmp	r3, #0
 800a760:	da04      	bge.n	800a76c <_puts_r+0xac>
 800a762:	69a2      	ldr	r2, [r4, #24]
 800a764:	429a      	cmp	r2, r3
 800a766:	dc06      	bgt.n	800a776 <_puts_r+0xb6>
 800a768:	290a      	cmp	r1, #10
 800a76a:	d004      	beq.n	800a776 <_puts_r+0xb6>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	6022      	str	r2, [r4, #0]
 800a772:	7019      	strb	r1, [r3, #0]
 800a774:	e7c5      	b.n	800a702 <_puts_r+0x42>
 800a776:	4622      	mov	r2, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	f000 f817 	bl	800a7ac <__swbuf_r>
 800a77e:	3001      	adds	r0, #1
 800a780:	d1bf      	bne.n	800a702 <_puts_r+0x42>
 800a782:	e7df      	b.n	800a744 <_puts_r+0x84>
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	250a      	movs	r5, #10
 800a788:	1c5a      	adds	r2, r3, #1
 800a78a:	6022      	str	r2, [r4, #0]
 800a78c:	701d      	strb	r5, [r3, #0]
 800a78e:	e7db      	b.n	800a748 <_puts_r+0x88>
 800a790:	080162b8 	.word	0x080162b8
 800a794:	080162d8 	.word	0x080162d8
 800a798:	08016298 	.word	0x08016298

0800a79c <puts>:
 800a79c:	4b02      	ldr	r3, [pc, #8]	; (800a7a8 <puts+0xc>)
 800a79e:	4601      	mov	r1, r0
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	f7ff bf8d 	b.w	800a6c0 <_puts_r>
 800a7a6:	bf00      	nop
 800a7a8:	20000024 	.word	0x20000024

0800a7ac <__swbuf_r>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	460e      	mov	r6, r1
 800a7b0:	4614      	mov	r4, r2
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	b118      	cbz	r0, 800a7be <__swbuf_r+0x12>
 800a7b6:	6983      	ldr	r3, [r0, #24]
 800a7b8:	b90b      	cbnz	r3, 800a7be <__swbuf_r+0x12>
 800a7ba:	f000 f9d1 	bl	800ab60 <__sinit>
 800a7be:	4b21      	ldr	r3, [pc, #132]	; (800a844 <__swbuf_r+0x98>)
 800a7c0:	429c      	cmp	r4, r3
 800a7c2:	d12b      	bne.n	800a81c <__swbuf_r+0x70>
 800a7c4:	686c      	ldr	r4, [r5, #4]
 800a7c6:	69a3      	ldr	r3, [r4, #24]
 800a7c8:	60a3      	str	r3, [r4, #8]
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	071a      	lsls	r2, r3, #28
 800a7ce:	d52f      	bpl.n	800a830 <__swbuf_r+0x84>
 800a7d0:	6923      	ldr	r3, [r4, #16]
 800a7d2:	b36b      	cbz	r3, 800a830 <__swbuf_r+0x84>
 800a7d4:	6923      	ldr	r3, [r4, #16]
 800a7d6:	6820      	ldr	r0, [r4, #0]
 800a7d8:	1ac0      	subs	r0, r0, r3
 800a7da:	6963      	ldr	r3, [r4, #20]
 800a7dc:	b2f6      	uxtb	r6, r6
 800a7de:	4283      	cmp	r3, r0
 800a7e0:	4637      	mov	r7, r6
 800a7e2:	dc04      	bgt.n	800a7ee <__swbuf_r+0x42>
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	f000 f926 	bl	800aa38 <_fflush_r>
 800a7ec:	bb30      	cbnz	r0, 800a83c <__swbuf_r+0x90>
 800a7ee:	68a3      	ldr	r3, [r4, #8]
 800a7f0:	3b01      	subs	r3, #1
 800a7f2:	60a3      	str	r3, [r4, #8]
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	6022      	str	r2, [r4, #0]
 800a7fa:	701e      	strb	r6, [r3, #0]
 800a7fc:	6963      	ldr	r3, [r4, #20]
 800a7fe:	3001      	adds	r0, #1
 800a800:	4283      	cmp	r3, r0
 800a802:	d004      	beq.n	800a80e <__swbuf_r+0x62>
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	07db      	lsls	r3, r3, #31
 800a808:	d506      	bpl.n	800a818 <__swbuf_r+0x6c>
 800a80a:	2e0a      	cmp	r6, #10
 800a80c:	d104      	bne.n	800a818 <__swbuf_r+0x6c>
 800a80e:	4621      	mov	r1, r4
 800a810:	4628      	mov	r0, r5
 800a812:	f000 f911 	bl	800aa38 <_fflush_r>
 800a816:	b988      	cbnz	r0, 800a83c <__swbuf_r+0x90>
 800a818:	4638      	mov	r0, r7
 800a81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a81c:	4b0a      	ldr	r3, [pc, #40]	; (800a848 <__swbuf_r+0x9c>)
 800a81e:	429c      	cmp	r4, r3
 800a820:	d101      	bne.n	800a826 <__swbuf_r+0x7a>
 800a822:	68ac      	ldr	r4, [r5, #8]
 800a824:	e7cf      	b.n	800a7c6 <__swbuf_r+0x1a>
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <__swbuf_r+0xa0>)
 800a828:	429c      	cmp	r4, r3
 800a82a:	bf08      	it	eq
 800a82c:	68ec      	ldreq	r4, [r5, #12]
 800a82e:	e7ca      	b.n	800a7c6 <__swbuf_r+0x1a>
 800a830:	4621      	mov	r1, r4
 800a832:	4628      	mov	r0, r5
 800a834:	f000 f80c 	bl	800a850 <__swsetup_r>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d0cb      	beq.n	800a7d4 <__swbuf_r+0x28>
 800a83c:	f04f 37ff 	mov.w	r7, #4294967295
 800a840:	e7ea      	b.n	800a818 <__swbuf_r+0x6c>
 800a842:	bf00      	nop
 800a844:	080162b8 	.word	0x080162b8
 800a848:	080162d8 	.word	0x080162d8
 800a84c:	08016298 	.word	0x08016298

0800a850 <__swsetup_r>:
 800a850:	4b32      	ldr	r3, [pc, #200]	; (800a91c <__swsetup_r+0xcc>)
 800a852:	b570      	push	{r4, r5, r6, lr}
 800a854:	681d      	ldr	r5, [r3, #0]
 800a856:	4606      	mov	r6, r0
 800a858:	460c      	mov	r4, r1
 800a85a:	b125      	cbz	r5, 800a866 <__swsetup_r+0x16>
 800a85c:	69ab      	ldr	r3, [r5, #24]
 800a85e:	b913      	cbnz	r3, 800a866 <__swsetup_r+0x16>
 800a860:	4628      	mov	r0, r5
 800a862:	f000 f97d 	bl	800ab60 <__sinit>
 800a866:	4b2e      	ldr	r3, [pc, #184]	; (800a920 <__swsetup_r+0xd0>)
 800a868:	429c      	cmp	r4, r3
 800a86a:	d10f      	bne.n	800a88c <__swsetup_r+0x3c>
 800a86c:	686c      	ldr	r4, [r5, #4]
 800a86e:	89a3      	ldrh	r3, [r4, #12]
 800a870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a874:	0719      	lsls	r1, r3, #28
 800a876:	d42c      	bmi.n	800a8d2 <__swsetup_r+0x82>
 800a878:	06dd      	lsls	r5, r3, #27
 800a87a:	d411      	bmi.n	800a8a0 <__swsetup_r+0x50>
 800a87c:	2309      	movs	r3, #9
 800a87e:	6033      	str	r3, [r6, #0]
 800a880:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a884:	81a3      	strh	r3, [r4, #12]
 800a886:	f04f 30ff 	mov.w	r0, #4294967295
 800a88a:	e03e      	b.n	800a90a <__swsetup_r+0xba>
 800a88c:	4b25      	ldr	r3, [pc, #148]	; (800a924 <__swsetup_r+0xd4>)
 800a88e:	429c      	cmp	r4, r3
 800a890:	d101      	bne.n	800a896 <__swsetup_r+0x46>
 800a892:	68ac      	ldr	r4, [r5, #8]
 800a894:	e7eb      	b.n	800a86e <__swsetup_r+0x1e>
 800a896:	4b24      	ldr	r3, [pc, #144]	; (800a928 <__swsetup_r+0xd8>)
 800a898:	429c      	cmp	r4, r3
 800a89a:	bf08      	it	eq
 800a89c:	68ec      	ldreq	r4, [r5, #12]
 800a89e:	e7e6      	b.n	800a86e <__swsetup_r+0x1e>
 800a8a0:	0758      	lsls	r0, r3, #29
 800a8a2:	d512      	bpl.n	800a8ca <__swsetup_r+0x7a>
 800a8a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8a6:	b141      	cbz	r1, 800a8ba <__swsetup_r+0x6a>
 800a8a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8ac:	4299      	cmp	r1, r3
 800a8ae:	d002      	beq.n	800a8b6 <__swsetup_r+0x66>
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f000 fa5b 	bl	800ad6c <_free_r>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	6363      	str	r3, [r4, #52]	; 0x34
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8c0:	81a3      	strh	r3, [r4, #12]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	6063      	str	r3, [r4, #4]
 800a8c6:	6923      	ldr	r3, [r4, #16]
 800a8c8:	6023      	str	r3, [r4, #0]
 800a8ca:	89a3      	ldrh	r3, [r4, #12]
 800a8cc:	f043 0308 	orr.w	r3, r3, #8
 800a8d0:	81a3      	strh	r3, [r4, #12]
 800a8d2:	6923      	ldr	r3, [r4, #16]
 800a8d4:	b94b      	cbnz	r3, 800a8ea <__swsetup_r+0x9a>
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e0:	d003      	beq.n	800a8ea <__swsetup_r+0x9a>
 800a8e2:	4621      	mov	r1, r4
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	f000 fa01 	bl	800acec <__smakebuf_r>
 800a8ea:	89a0      	ldrh	r0, [r4, #12]
 800a8ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8f0:	f010 0301 	ands.w	r3, r0, #1
 800a8f4:	d00a      	beq.n	800a90c <__swsetup_r+0xbc>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60a3      	str	r3, [r4, #8]
 800a8fa:	6963      	ldr	r3, [r4, #20]
 800a8fc:	425b      	negs	r3, r3
 800a8fe:	61a3      	str	r3, [r4, #24]
 800a900:	6923      	ldr	r3, [r4, #16]
 800a902:	b943      	cbnz	r3, 800a916 <__swsetup_r+0xc6>
 800a904:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a908:	d1ba      	bne.n	800a880 <__swsetup_r+0x30>
 800a90a:	bd70      	pop	{r4, r5, r6, pc}
 800a90c:	0781      	lsls	r1, r0, #30
 800a90e:	bf58      	it	pl
 800a910:	6963      	ldrpl	r3, [r4, #20]
 800a912:	60a3      	str	r3, [r4, #8]
 800a914:	e7f4      	b.n	800a900 <__swsetup_r+0xb0>
 800a916:	2000      	movs	r0, #0
 800a918:	e7f7      	b.n	800a90a <__swsetup_r+0xba>
 800a91a:	bf00      	nop
 800a91c:	20000024 	.word	0x20000024
 800a920:	080162b8 	.word	0x080162b8
 800a924:	080162d8 	.word	0x080162d8
 800a928:	08016298 	.word	0x08016298

0800a92c <__sflush_r>:
 800a92c:	898a      	ldrh	r2, [r1, #12]
 800a92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a932:	4605      	mov	r5, r0
 800a934:	0710      	lsls	r0, r2, #28
 800a936:	460c      	mov	r4, r1
 800a938:	d458      	bmi.n	800a9ec <__sflush_r+0xc0>
 800a93a:	684b      	ldr	r3, [r1, #4]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	dc05      	bgt.n	800a94c <__sflush_r+0x20>
 800a940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a942:	2b00      	cmp	r3, #0
 800a944:	dc02      	bgt.n	800a94c <__sflush_r+0x20>
 800a946:	2000      	movs	r0, #0
 800a948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a94e:	2e00      	cmp	r6, #0
 800a950:	d0f9      	beq.n	800a946 <__sflush_r+0x1a>
 800a952:	2300      	movs	r3, #0
 800a954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a958:	682f      	ldr	r7, [r5, #0]
 800a95a:	602b      	str	r3, [r5, #0]
 800a95c:	d032      	beq.n	800a9c4 <__sflush_r+0x98>
 800a95e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a960:	89a3      	ldrh	r3, [r4, #12]
 800a962:	075a      	lsls	r2, r3, #29
 800a964:	d505      	bpl.n	800a972 <__sflush_r+0x46>
 800a966:	6863      	ldr	r3, [r4, #4]
 800a968:	1ac0      	subs	r0, r0, r3
 800a96a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a96c:	b10b      	cbz	r3, 800a972 <__sflush_r+0x46>
 800a96e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a970:	1ac0      	subs	r0, r0, r3
 800a972:	2300      	movs	r3, #0
 800a974:	4602      	mov	r2, r0
 800a976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a978:	6a21      	ldr	r1, [r4, #32]
 800a97a:	4628      	mov	r0, r5
 800a97c:	47b0      	blx	r6
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	d106      	bne.n	800a992 <__sflush_r+0x66>
 800a984:	6829      	ldr	r1, [r5, #0]
 800a986:	291d      	cmp	r1, #29
 800a988:	d82c      	bhi.n	800a9e4 <__sflush_r+0xb8>
 800a98a:	4a2a      	ldr	r2, [pc, #168]	; (800aa34 <__sflush_r+0x108>)
 800a98c:	40ca      	lsrs	r2, r1
 800a98e:	07d6      	lsls	r6, r2, #31
 800a990:	d528      	bpl.n	800a9e4 <__sflush_r+0xb8>
 800a992:	2200      	movs	r2, #0
 800a994:	6062      	str	r2, [r4, #4]
 800a996:	04d9      	lsls	r1, r3, #19
 800a998:	6922      	ldr	r2, [r4, #16]
 800a99a:	6022      	str	r2, [r4, #0]
 800a99c:	d504      	bpl.n	800a9a8 <__sflush_r+0x7c>
 800a99e:	1c42      	adds	r2, r0, #1
 800a9a0:	d101      	bne.n	800a9a6 <__sflush_r+0x7a>
 800a9a2:	682b      	ldr	r3, [r5, #0]
 800a9a4:	b903      	cbnz	r3, 800a9a8 <__sflush_r+0x7c>
 800a9a6:	6560      	str	r0, [r4, #84]	; 0x54
 800a9a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9aa:	602f      	str	r7, [r5, #0]
 800a9ac:	2900      	cmp	r1, #0
 800a9ae:	d0ca      	beq.n	800a946 <__sflush_r+0x1a>
 800a9b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9b4:	4299      	cmp	r1, r3
 800a9b6:	d002      	beq.n	800a9be <__sflush_r+0x92>
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	f000 f9d7 	bl	800ad6c <_free_r>
 800a9be:	2000      	movs	r0, #0
 800a9c0:	6360      	str	r0, [r4, #52]	; 0x34
 800a9c2:	e7c1      	b.n	800a948 <__sflush_r+0x1c>
 800a9c4:	6a21      	ldr	r1, [r4, #32]
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b0      	blx	r6
 800a9cc:	1c41      	adds	r1, r0, #1
 800a9ce:	d1c7      	bne.n	800a960 <__sflush_r+0x34>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0c4      	beq.n	800a960 <__sflush_r+0x34>
 800a9d6:	2b1d      	cmp	r3, #29
 800a9d8:	d001      	beq.n	800a9de <__sflush_r+0xb2>
 800a9da:	2b16      	cmp	r3, #22
 800a9dc:	d101      	bne.n	800a9e2 <__sflush_r+0xb6>
 800a9de:	602f      	str	r7, [r5, #0]
 800a9e0:	e7b1      	b.n	800a946 <__sflush_r+0x1a>
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9e8:	81a3      	strh	r3, [r4, #12]
 800a9ea:	e7ad      	b.n	800a948 <__sflush_r+0x1c>
 800a9ec:	690f      	ldr	r7, [r1, #16]
 800a9ee:	2f00      	cmp	r7, #0
 800a9f0:	d0a9      	beq.n	800a946 <__sflush_r+0x1a>
 800a9f2:	0793      	lsls	r3, r2, #30
 800a9f4:	680e      	ldr	r6, [r1, #0]
 800a9f6:	bf08      	it	eq
 800a9f8:	694b      	ldreq	r3, [r1, #20]
 800a9fa:	600f      	str	r7, [r1, #0]
 800a9fc:	bf18      	it	ne
 800a9fe:	2300      	movne	r3, #0
 800aa00:	eba6 0807 	sub.w	r8, r6, r7
 800aa04:	608b      	str	r3, [r1, #8]
 800aa06:	f1b8 0f00 	cmp.w	r8, #0
 800aa0a:	dd9c      	ble.n	800a946 <__sflush_r+0x1a>
 800aa0c:	6a21      	ldr	r1, [r4, #32]
 800aa0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa10:	4643      	mov	r3, r8
 800aa12:	463a      	mov	r2, r7
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b0      	blx	r6
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	dc06      	bgt.n	800aa2a <__sflush_r+0xfe>
 800aa1c:	89a3      	ldrh	r3, [r4, #12]
 800aa1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa22:	81a3      	strh	r3, [r4, #12]
 800aa24:	f04f 30ff 	mov.w	r0, #4294967295
 800aa28:	e78e      	b.n	800a948 <__sflush_r+0x1c>
 800aa2a:	4407      	add	r7, r0
 800aa2c:	eba8 0800 	sub.w	r8, r8, r0
 800aa30:	e7e9      	b.n	800aa06 <__sflush_r+0xda>
 800aa32:	bf00      	nop
 800aa34:	20400001 	.word	0x20400001

0800aa38 <_fflush_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	690b      	ldr	r3, [r1, #16]
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	b913      	cbnz	r3, 800aa48 <_fflush_r+0x10>
 800aa42:	2500      	movs	r5, #0
 800aa44:	4628      	mov	r0, r5
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	b118      	cbz	r0, 800aa52 <_fflush_r+0x1a>
 800aa4a:	6983      	ldr	r3, [r0, #24]
 800aa4c:	b90b      	cbnz	r3, 800aa52 <_fflush_r+0x1a>
 800aa4e:	f000 f887 	bl	800ab60 <__sinit>
 800aa52:	4b14      	ldr	r3, [pc, #80]	; (800aaa4 <_fflush_r+0x6c>)
 800aa54:	429c      	cmp	r4, r3
 800aa56:	d11b      	bne.n	800aa90 <_fflush_r+0x58>
 800aa58:	686c      	ldr	r4, [r5, #4]
 800aa5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0ef      	beq.n	800aa42 <_fflush_r+0xa>
 800aa62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa64:	07d0      	lsls	r0, r2, #31
 800aa66:	d404      	bmi.n	800aa72 <_fflush_r+0x3a>
 800aa68:	0599      	lsls	r1, r3, #22
 800aa6a:	d402      	bmi.n	800aa72 <_fflush_r+0x3a>
 800aa6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa6e:	f000 f915 	bl	800ac9c <__retarget_lock_acquire_recursive>
 800aa72:	4628      	mov	r0, r5
 800aa74:	4621      	mov	r1, r4
 800aa76:	f7ff ff59 	bl	800a92c <__sflush_r>
 800aa7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa7c:	07da      	lsls	r2, r3, #31
 800aa7e:	4605      	mov	r5, r0
 800aa80:	d4e0      	bmi.n	800aa44 <_fflush_r+0xc>
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	059b      	lsls	r3, r3, #22
 800aa86:	d4dd      	bmi.n	800aa44 <_fflush_r+0xc>
 800aa88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa8a:	f000 f908 	bl	800ac9e <__retarget_lock_release_recursive>
 800aa8e:	e7d9      	b.n	800aa44 <_fflush_r+0xc>
 800aa90:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <_fflush_r+0x70>)
 800aa92:	429c      	cmp	r4, r3
 800aa94:	d101      	bne.n	800aa9a <_fflush_r+0x62>
 800aa96:	68ac      	ldr	r4, [r5, #8]
 800aa98:	e7df      	b.n	800aa5a <_fflush_r+0x22>
 800aa9a:	4b04      	ldr	r3, [pc, #16]	; (800aaac <_fflush_r+0x74>)
 800aa9c:	429c      	cmp	r4, r3
 800aa9e:	bf08      	it	eq
 800aaa0:	68ec      	ldreq	r4, [r5, #12]
 800aaa2:	e7da      	b.n	800aa5a <_fflush_r+0x22>
 800aaa4:	080162b8 	.word	0x080162b8
 800aaa8:	080162d8 	.word	0x080162d8
 800aaac:	08016298 	.word	0x08016298

0800aab0 <std>:
 800aab0:	2300      	movs	r3, #0
 800aab2:	b510      	push	{r4, lr}
 800aab4:	4604      	mov	r4, r0
 800aab6:	e9c0 3300 	strd	r3, r3, [r0]
 800aaba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aabe:	6083      	str	r3, [r0, #8]
 800aac0:	8181      	strh	r1, [r0, #12]
 800aac2:	6643      	str	r3, [r0, #100]	; 0x64
 800aac4:	81c2      	strh	r2, [r0, #14]
 800aac6:	6183      	str	r3, [r0, #24]
 800aac8:	4619      	mov	r1, r3
 800aaca:	2208      	movs	r2, #8
 800aacc:	305c      	adds	r0, #92	; 0x5c
 800aace:	f7ff fdc1 	bl	800a654 <memset>
 800aad2:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <std+0x38>)
 800aad4:	6263      	str	r3, [r4, #36]	; 0x24
 800aad6:	4b05      	ldr	r3, [pc, #20]	; (800aaec <std+0x3c>)
 800aad8:	62a3      	str	r3, [r4, #40]	; 0x28
 800aada:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <std+0x40>)
 800aadc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aade:	4b05      	ldr	r3, [pc, #20]	; (800aaf4 <std+0x44>)
 800aae0:	6224      	str	r4, [r4, #32]
 800aae2:	6323      	str	r3, [r4, #48]	; 0x30
 800aae4:	bd10      	pop	{r4, pc}
 800aae6:	bf00      	nop
 800aae8:	0800b5b9 	.word	0x0800b5b9
 800aaec:	0800b5db 	.word	0x0800b5db
 800aaf0:	0800b613 	.word	0x0800b613
 800aaf4:	0800b637 	.word	0x0800b637

0800aaf8 <_cleanup_r>:
 800aaf8:	4901      	ldr	r1, [pc, #4]	; (800ab00 <_cleanup_r+0x8>)
 800aafa:	f000 b8af 	b.w	800ac5c <_fwalk_reent>
 800aafe:	bf00      	nop
 800ab00:	0800aa39 	.word	0x0800aa39

0800ab04 <__sfmoreglue>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	2268      	movs	r2, #104	; 0x68
 800ab08:	1e4d      	subs	r5, r1, #1
 800ab0a:	4355      	muls	r5, r2
 800ab0c:	460e      	mov	r6, r1
 800ab0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab12:	f000 f997 	bl	800ae44 <_malloc_r>
 800ab16:	4604      	mov	r4, r0
 800ab18:	b140      	cbz	r0, 800ab2c <__sfmoreglue+0x28>
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	e9c0 1600 	strd	r1, r6, [r0]
 800ab20:	300c      	adds	r0, #12
 800ab22:	60a0      	str	r0, [r4, #8]
 800ab24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab28:	f7ff fd94 	bl	800a654 <memset>
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}

0800ab30 <__sfp_lock_acquire>:
 800ab30:	4801      	ldr	r0, [pc, #4]	; (800ab38 <__sfp_lock_acquire+0x8>)
 800ab32:	f000 b8b3 	b.w	800ac9c <__retarget_lock_acquire_recursive>
 800ab36:	bf00      	nop
 800ab38:	20013779 	.word	0x20013779

0800ab3c <__sfp_lock_release>:
 800ab3c:	4801      	ldr	r0, [pc, #4]	; (800ab44 <__sfp_lock_release+0x8>)
 800ab3e:	f000 b8ae 	b.w	800ac9e <__retarget_lock_release_recursive>
 800ab42:	bf00      	nop
 800ab44:	20013779 	.word	0x20013779

0800ab48 <__sinit_lock_acquire>:
 800ab48:	4801      	ldr	r0, [pc, #4]	; (800ab50 <__sinit_lock_acquire+0x8>)
 800ab4a:	f000 b8a7 	b.w	800ac9c <__retarget_lock_acquire_recursive>
 800ab4e:	bf00      	nop
 800ab50:	2001377a 	.word	0x2001377a

0800ab54 <__sinit_lock_release>:
 800ab54:	4801      	ldr	r0, [pc, #4]	; (800ab5c <__sinit_lock_release+0x8>)
 800ab56:	f000 b8a2 	b.w	800ac9e <__retarget_lock_release_recursive>
 800ab5a:	bf00      	nop
 800ab5c:	2001377a 	.word	0x2001377a

0800ab60 <__sinit>:
 800ab60:	b510      	push	{r4, lr}
 800ab62:	4604      	mov	r4, r0
 800ab64:	f7ff fff0 	bl	800ab48 <__sinit_lock_acquire>
 800ab68:	69a3      	ldr	r3, [r4, #24]
 800ab6a:	b11b      	cbz	r3, 800ab74 <__sinit+0x14>
 800ab6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab70:	f7ff bff0 	b.w	800ab54 <__sinit_lock_release>
 800ab74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab78:	6523      	str	r3, [r4, #80]	; 0x50
 800ab7a:	4b13      	ldr	r3, [pc, #76]	; (800abc8 <__sinit+0x68>)
 800ab7c:	4a13      	ldr	r2, [pc, #76]	; (800abcc <__sinit+0x6c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab82:	42a3      	cmp	r3, r4
 800ab84:	bf04      	itt	eq
 800ab86:	2301      	moveq	r3, #1
 800ab88:	61a3      	streq	r3, [r4, #24]
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f000 f820 	bl	800abd0 <__sfp>
 800ab90:	6060      	str	r0, [r4, #4]
 800ab92:	4620      	mov	r0, r4
 800ab94:	f000 f81c 	bl	800abd0 <__sfp>
 800ab98:	60a0      	str	r0, [r4, #8]
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 f818 	bl	800abd0 <__sfp>
 800aba0:	2200      	movs	r2, #0
 800aba2:	60e0      	str	r0, [r4, #12]
 800aba4:	2104      	movs	r1, #4
 800aba6:	6860      	ldr	r0, [r4, #4]
 800aba8:	f7ff ff82 	bl	800aab0 <std>
 800abac:	68a0      	ldr	r0, [r4, #8]
 800abae:	2201      	movs	r2, #1
 800abb0:	2109      	movs	r1, #9
 800abb2:	f7ff ff7d 	bl	800aab0 <std>
 800abb6:	68e0      	ldr	r0, [r4, #12]
 800abb8:	2202      	movs	r2, #2
 800abba:	2112      	movs	r1, #18
 800abbc:	f7ff ff78 	bl	800aab0 <std>
 800abc0:	2301      	movs	r3, #1
 800abc2:	61a3      	str	r3, [r4, #24]
 800abc4:	e7d2      	b.n	800ab6c <__sinit+0xc>
 800abc6:	bf00      	nop
 800abc8:	08016294 	.word	0x08016294
 800abcc:	0800aaf9 	.word	0x0800aaf9

0800abd0 <__sfp>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	4607      	mov	r7, r0
 800abd4:	f7ff ffac 	bl	800ab30 <__sfp_lock_acquire>
 800abd8:	4b1e      	ldr	r3, [pc, #120]	; (800ac54 <__sfp+0x84>)
 800abda:	681e      	ldr	r6, [r3, #0]
 800abdc:	69b3      	ldr	r3, [r6, #24]
 800abde:	b913      	cbnz	r3, 800abe6 <__sfp+0x16>
 800abe0:	4630      	mov	r0, r6
 800abe2:	f7ff ffbd 	bl	800ab60 <__sinit>
 800abe6:	3648      	adds	r6, #72	; 0x48
 800abe8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abec:	3b01      	subs	r3, #1
 800abee:	d503      	bpl.n	800abf8 <__sfp+0x28>
 800abf0:	6833      	ldr	r3, [r6, #0]
 800abf2:	b30b      	cbz	r3, 800ac38 <__sfp+0x68>
 800abf4:	6836      	ldr	r6, [r6, #0]
 800abf6:	e7f7      	b.n	800abe8 <__sfp+0x18>
 800abf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abfc:	b9d5      	cbnz	r5, 800ac34 <__sfp+0x64>
 800abfe:	4b16      	ldr	r3, [pc, #88]	; (800ac58 <__sfp+0x88>)
 800ac00:	60e3      	str	r3, [r4, #12]
 800ac02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac06:	6665      	str	r5, [r4, #100]	; 0x64
 800ac08:	f000 f847 	bl	800ac9a <__retarget_lock_init_recursive>
 800ac0c:	f7ff ff96 	bl	800ab3c <__sfp_lock_release>
 800ac10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac18:	6025      	str	r5, [r4, #0]
 800ac1a:	61a5      	str	r5, [r4, #24]
 800ac1c:	2208      	movs	r2, #8
 800ac1e:	4629      	mov	r1, r5
 800ac20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac24:	f7ff fd16 	bl	800a654 <memset>
 800ac28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac30:	4620      	mov	r0, r4
 800ac32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac34:	3468      	adds	r4, #104	; 0x68
 800ac36:	e7d9      	b.n	800abec <__sfp+0x1c>
 800ac38:	2104      	movs	r1, #4
 800ac3a:	4638      	mov	r0, r7
 800ac3c:	f7ff ff62 	bl	800ab04 <__sfmoreglue>
 800ac40:	4604      	mov	r4, r0
 800ac42:	6030      	str	r0, [r6, #0]
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d1d5      	bne.n	800abf4 <__sfp+0x24>
 800ac48:	f7ff ff78 	bl	800ab3c <__sfp_lock_release>
 800ac4c:	230c      	movs	r3, #12
 800ac4e:	603b      	str	r3, [r7, #0]
 800ac50:	e7ee      	b.n	800ac30 <__sfp+0x60>
 800ac52:	bf00      	nop
 800ac54:	08016294 	.word	0x08016294
 800ac58:	ffff0001 	.word	0xffff0001

0800ac5c <_fwalk_reent>:
 800ac5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac60:	4606      	mov	r6, r0
 800ac62:	4688      	mov	r8, r1
 800ac64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac68:	2700      	movs	r7, #0
 800ac6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac6e:	f1b9 0901 	subs.w	r9, r9, #1
 800ac72:	d505      	bpl.n	800ac80 <_fwalk_reent+0x24>
 800ac74:	6824      	ldr	r4, [r4, #0]
 800ac76:	2c00      	cmp	r4, #0
 800ac78:	d1f7      	bne.n	800ac6a <_fwalk_reent+0xe>
 800ac7a:	4638      	mov	r0, r7
 800ac7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac80:	89ab      	ldrh	r3, [r5, #12]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d907      	bls.n	800ac96 <_fwalk_reent+0x3a>
 800ac86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	d003      	beq.n	800ac96 <_fwalk_reent+0x3a>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4630      	mov	r0, r6
 800ac92:	47c0      	blx	r8
 800ac94:	4307      	orrs	r7, r0
 800ac96:	3568      	adds	r5, #104	; 0x68
 800ac98:	e7e9      	b.n	800ac6e <_fwalk_reent+0x12>

0800ac9a <__retarget_lock_init_recursive>:
 800ac9a:	4770      	bx	lr

0800ac9c <__retarget_lock_acquire_recursive>:
 800ac9c:	4770      	bx	lr

0800ac9e <__retarget_lock_release_recursive>:
 800ac9e:	4770      	bx	lr

0800aca0 <__swhatbuf_r>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	460e      	mov	r6, r1
 800aca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca8:	2900      	cmp	r1, #0
 800acaa:	b096      	sub	sp, #88	; 0x58
 800acac:	4614      	mov	r4, r2
 800acae:	461d      	mov	r5, r3
 800acb0:	da08      	bge.n	800acc4 <__swhatbuf_r+0x24>
 800acb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	602a      	str	r2, [r5, #0]
 800acba:	061a      	lsls	r2, r3, #24
 800acbc:	d410      	bmi.n	800ace0 <__swhatbuf_r+0x40>
 800acbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acc2:	e00e      	b.n	800ace2 <__swhatbuf_r+0x42>
 800acc4:	466a      	mov	r2, sp
 800acc6:	f000 fcdd 	bl	800b684 <_fstat_r>
 800acca:	2800      	cmp	r0, #0
 800accc:	dbf1      	blt.n	800acb2 <__swhatbuf_r+0x12>
 800acce:	9a01      	ldr	r2, [sp, #4]
 800acd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800acd8:	425a      	negs	r2, r3
 800acda:	415a      	adcs	r2, r3
 800acdc:	602a      	str	r2, [r5, #0]
 800acde:	e7ee      	b.n	800acbe <__swhatbuf_r+0x1e>
 800ace0:	2340      	movs	r3, #64	; 0x40
 800ace2:	2000      	movs	r0, #0
 800ace4:	6023      	str	r3, [r4, #0]
 800ace6:	b016      	add	sp, #88	; 0x58
 800ace8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acec <__smakebuf_r>:
 800acec:	898b      	ldrh	r3, [r1, #12]
 800acee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acf0:	079d      	lsls	r5, r3, #30
 800acf2:	4606      	mov	r6, r0
 800acf4:	460c      	mov	r4, r1
 800acf6:	d507      	bpl.n	800ad08 <__smakebuf_r+0x1c>
 800acf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	6123      	str	r3, [r4, #16]
 800ad00:	2301      	movs	r3, #1
 800ad02:	6163      	str	r3, [r4, #20]
 800ad04:	b002      	add	sp, #8
 800ad06:	bd70      	pop	{r4, r5, r6, pc}
 800ad08:	ab01      	add	r3, sp, #4
 800ad0a:	466a      	mov	r2, sp
 800ad0c:	f7ff ffc8 	bl	800aca0 <__swhatbuf_r>
 800ad10:	9900      	ldr	r1, [sp, #0]
 800ad12:	4605      	mov	r5, r0
 800ad14:	4630      	mov	r0, r6
 800ad16:	f000 f895 	bl	800ae44 <_malloc_r>
 800ad1a:	b948      	cbnz	r0, 800ad30 <__smakebuf_r+0x44>
 800ad1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad20:	059a      	lsls	r2, r3, #22
 800ad22:	d4ef      	bmi.n	800ad04 <__smakebuf_r+0x18>
 800ad24:	f023 0303 	bic.w	r3, r3, #3
 800ad28:	f043 0302 	orr.w	r3, r3, #2
 800ad2c:	81a3      	strh	r3, [r4, #12]
 800ad2e:	e7e3      	b.n	800acf8 <__smakebuf_r+0xc>
 800ad30:	4b0d      	ldr	r3, [pc, #52]	; (800ad68 <__smakebuf_r+0x7c>)
 800ad32:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	6020      	str	r0, [r4, #0]
 800ad38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad3c:	81a3      	strh	r3, [r4, #12]
 800ad3e:	9b00      	ldr	r3, [sp, #0]
 800ad40:	6163      	str	r3, [r4, #20]
 800ad42:	9b01      	ldr	r3, [sp, #4]
 800ad44:	6120      	str	r0, [r4, #16]
 800ad46:	b15b      	cbz	r3, 800ad60 <__smakebuf_r+0x74>
 800ad48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	f000 fcab 	bl	800b6a8 <_isatty_r>
 800ad52:	b128      	cbz	r0, 800ad60 <__smakebuf_r+0x74>
 800ad54:	89a3      	ldrh	r3, [r4, #12]
 800ad56:	f023 0303 	bic.w	r3, r3, #3
 800ad5a:	f043 0301 	orr.w	r3, r3, #1
 800ad5e:	81a3      	strh	r3, [r4, #12]
 800ad60:	89a0      	ldrh	r0, [r4, #12]
 800ad62:	4305      	orrs	r5, r0
 800ad64:	81a5      	strh	r5, [r4, #12]
 800ad66:	e7cd      	b.n	800ad04 <__smakebuf_r+0x18>
 800ad68:	0800aaf9 	.word	0x0800aaf9

0800ad6c <_free_r>:
 800ad6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad6e:	2900      	cmp	r1, #0
 800ad70:	d044      	beq.n	800adfc <_free_r+0x90>
 800ad72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad76:	9001      	str	r0, [sp, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad7e:	bfb8      	it	lt
 800ad80:	18e4      	addlt	r4, r4, r3
 800ad82:	f000 fcb3 	bl	800b6ec <__malloc_lock>
 800ad86:	4a1e      	ldr	r2, [pc, #120]	; (800ae00 <_free_r+0x94>)
 800ad88:	9801      	ldr	r0, [sp, #4]
 800ad8a:	6813      	ldr	r3, [r2, #0]
 800ad8c:	b933      	cbnz	r3, 800ad9c <_free_r+0x30>
 800ad8e:	6063      	str	r3, [r4, #4]
 800ad90:	6014      	str	r4, [r2, #0]
 800ad92:	b003      	add	sp, #12
 800ad94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad98:	f000 bcae 	b.w	800b6f8 <__malloc_unlock>
 800ad9c:	42a3      	cmp	r3, r4
 800ad9e:	d908      	bls.n	800adb2 <_free_r+0x46>
 800ada0:	6825      	ldr	r5, [r4, #0]
 800ada2:	1961      	adds	r1, r4, r5
 800ada4:	428b      	cmp	r3, r1
 800ada6:	bf01      	itttt	eq
 800ada8:	6819      	ldreq	r1, [r3, #0]
 800adaa:	685b      	ldreq	r3, [r3, #4]
 800adac:	1949      	addeq	r1, r1, r5
 800adae:	6021      	streq	r1, [r4, #0]
 800adb0:	e7ed      	b.n	800ad8e <_free_r+0x22>
 800adb2:	461a      	mov	r2, r3
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	b10b      	cbz	r3, 800adbc <_free_r+0x50>
 800adb8:	42a3      	cmp	r3, r4
 800adba:	d9fa      	bls.n	800adb2 <_free_r+0x46>
 800adbc:	6811      	ldr	r1, [r2, #0]
 800adbe:	1855      	adds	r5, r2, r1
 800adc0:	42a5      	cmp	r5, r4
 800adc2:	d10b      	bne.n	800addc <_free_r+0x70>
 800adc4:	6824      	ldr	r4, [r4, #0]
 800adc6:	4421      	add	r1, r4
 800adc8:	1854      	adds	r4, r2, r1
 800adca:	42a3      	cmp	r3, r4
 800adcc:	6011      	str	r1, [r2, #0]
 800adce:	d1e0      	bne.n	800ad92 <_free_r+0x26>
 800add0:	681c      	ldr	r4, [r3, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	6053      	str	r3, [r2, #4]
 800add6:	4421      	add	r1, r4
 800add8:	6011      	str	r1, [r2, #0]
 800adda:	e7da      	b.n	800ad92 <_free_r+0x26>
 800addc:	d902      	bls.n	800ade4 <_free_r+0x78>
 800adde:	230c      	movs	r3, #12
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	e7d6      	b.n	800ad92 <_free_r+0x26>
 800ade4:	6825      	ldr	r5, [r4, #0]
 800ade6:	1961      	adds	r1, r4, r5
 800ade8:	428b      	cmp	r3, r1
 800adea:	bf04      	itt	eq
 800adec:	6819      	ldreq	r1, [r3, #0]
 800adee:	685b      	ldreq	r3, [r3, #4]
 800adf0:	6063      	str	r3, [r4, #4]
 800adf2:	bf04      	itt	eq
 800adf4:	1949      	addeq	r1, r1, r5
 800adf6:	6021      	streq	r1, [r4, #0]
 800adf8:	6054      	str	r4, [r2, #4]
 800adfa:	e7ca      	b.n	800ad92 <_free_r+0x26>
 800adfc:	b003      	add	sp, #12
 800adfe:	bd30      	pop	{r4, r5, pc}
 800ae00:	2001377c 	.word	0x2001377c

0800ae04 <sbrk_aligned>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	4e0e      	ldr	r6, [pc, #56]	; (800ae40 <sbrk_aligned+0x3c>)
 800ae08:	460c      	mov	r4, r1
 800ae0a:	6831      	ldr	r1, [r6, #0]
 800ae0c:	4605      	mov	r5, r0
 800ae0e:	b911      	cbnz	r1, 800ae16 <sbrk_aligned+0x12>
 800ae10:	f000 fbc2 	bl	800b598 <_sbrk_r>
 800ae14:	6030      	str	r0, [r6, #0]
 800ae16:	4621      	mov	r1, r4
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f000 fbbd 	bl	800b598 <_sbrk_r>
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	d00a      	beq.n	800ae38 <sbrk_aligned+0x34>
 800ae22:	1cc4      	adds	r4, r0, #3
 800ae24:	f024 0403 	bic.w	r4, r4, #3
 800ae28:	42a0      	cmp	r0, r4
 800ae2a:	d007      	beq.n	800ae3c <sbrk_aligned+0x38>
 800ae2c:	1a21      	subs	r1, r4, r0
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f000 fbb2 	bl	800b598 <_sbrk_r>
 800ae34:	3001      	adds	r0, #1
 800ae36:	d101      	bne.n	800ae3c <sbrk_aligned+0x38>
 800ae38:	f04f 34ff 	mov.w	r4, #4294967295
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	20013780 	.word	0x20013780

0800ae44 <_malloc_r>:
 800ae44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae48:	1ccd      	adds	r5, r1, #3
 800ae4a:	f025 0503 	bic.w	r5, r5, #3
 800ae4e:	3508      	adds	r5, #8
 800ae50:	2d0c      	cmp	r5, #12
 800ae52:	bf38      	it	cc
 800ae54:	250c      	movcc	r5, #12
 800ae56:	2d00      	cmp	r5, #0
 800ae58:	4607      	mov	r7, r0
 800ae5a:	db01      	blt.n	800ae60 <_malloc_r+0x1c>
 800ae5c:	42a9      	cmp	r1, r5
 800ae5e:	d905      	bls.n	800ae6c <_malloc_r+0x28>
 800ae60:	230c      	movs	r3, #12
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	2600      	movs	r6, #0
 800ae66:	4630      	mov	r0, r6
 800ae68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae6c:	4e2e      	ldr	r6, [pc, #184]	; (800af28 <_malloc_r+0xe4>)
 800ae6e:	f000 fc3d 	bl	800b6ec <__malloc_lock>
 800ae72:	6833      	ldr	r3, [r6, #0]
 800ae74:	461c      	mov	r4, r3
 800ae76:	bb34      	cbnz	r4, 800aec6 <_malloc_r+0x82>
 800ae78:	4629      	mov	r1, r5
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	f7ff ffc2 	bl	800ae04 <sbrk_aligned>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	4604      	mov	r4, r0
 800ae84:	d14d      	bne.n	800af22 <_malloc_r+0xde>
 800ae86:	6834      	ldr	r4, [r6, #0]
 800ae88:	4626      	mov	r6, r4
 800ae8a:	2e00      	cmp	r6, #0
 800ae8c:	d140      	bne.n	800af10 <_malloc_r+0xcc>
 800ae8e:	6823      	ldr	r3, [r4, #0]
 800ae90:	4631      	mov	r1, r6
 800ae92:	4638      	mov	r0, r7
 800ae94:	eb04 0803 	add.w	r8, r4, r3
 800ae98:	f000 fb7e 	bl	800b598 <_sbrk_r>
 800ae9c:	4580      	cmp	r8, r0
 800ae9e:	d13a      	bne.n	800af16 <_malloc_r+0xd2>
 800aea0:	6821      	ldr	r1, [r4, #0]
 800aea2:	3503      	adds	r5, #3
 800aea4:	1a6d      	subs	r5, r5, r1
 800aea6:	f025 0503 	bic.w	r5, r5, #3
 800aeaa:	3508      	adds	r5, #8
 800aeac:	2d0c      	cmp	r5, #12
 800aeae:	bf38      	it	cc
 800aeb0:	250c      	movcc	r5, #12
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f7ff ffa5 	bl	800ae04 <sbrk_aligned>
 800aeba:	3001      	adds	r0, #1
 800aebc:	d02b      	beq.n	800af16 <_malloc_r+0xd2>
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	442b      	add	r3, r5
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	e00e      	b.n	800aee4 <_malloc_r+0xa0>
 800aec6:	6822      	ldr	r2, [r4, #0]
 800aec8:	1b52      	subs	r2, r2, r5
 800aeca:	d41e      	bmi.n	800af0a <_malloc_r+0xc6>
 800aecc:	2a0b      	cmp	r2, #11
 800aece:	d916      	bls.n	800aefe <_malloc_r+0xba>
 800aed0:	1961      	adds	r1, r4, r5
 800aed2:	42a3      	cmp	r3, r4
 800aed4:	6025      	str	r5, [r4, #0]
 800aed6:	bf18      	it	ne
 800aed8:	6059      	strne	r1, [r3, #4]
 800aeda:	6863      	ldr	r3, [r4, #4]
 800aedc:	bf08      	it	eq
 800aede:	6031      	streq	r1, [r6, #0]
 800aee0:	5162      	str	r2, [r4, r5]
 800aee2:	604b      	str	r3, [r1, #4]
 800aee4:	4638      	mov	r0, r7
 800aee6:	f104 060b 	add.w	r6, r4, #11
 800aeea:	f000 fc05 	bl	800b6f8 <__malloc_unlock>
 800aeee:	f026 0607 	bic.w	r6, r6, #7
 800aef2:	1d23      	adds	r3, r4, #4
 800aef4:	1af2      	subs	r2, r6, r3
 800aef6:	d0b6      	beq.n	800ae66 <_malloc_r+0x22>
 800aef8:	1b9b      	subs	r3, r3, r6
 800aefa:	50a3      	str	r3, [r4, r2]
 800aefc:	e7b3      	b.n	800ae66 <_malloc_r+0x22>
 800aefe:	6862      	ldr	r2, [r4, #4]
 800af00:	42a3      	cmp	r3, r4
 800af02:	bf0c      	ite	eq
 800af04:	6032      	streq	r2, [r6, #0]
 800af06:	605a      	strne	r2, [r3, #4]
 800af08:	e7ec      	b.n	800aee4 <_malloc_r+0xa0>
 800af0a:	4623      	mov	r3, r4
 800af0c:	6864      	ldr	r4, [r4, #4]
 800af0e:	e7b2      	b.n	800ae76 <_malloc_r+0x32>
 800af10:	4634      	mov	r4, r6
 800af12:	6876      	ldr	r6, [r6, #4]
 800af14:	e7b9      	b.n	800ae8a <_malloc_r+0x46>
 800af16:	230c      	movs	r3, #12
 800af18:	603b      	str	r3, [r7, #0]
 800af1a:	4638      	mov	r0, r7
 800af1c:	f000 fbec 	bl	800b6f8 <__malloc_unlock>
 800af20:	e7a1      	b.n	800ae66 <_malloc_r+0x22>
 800af22:	6025      	str	r5, [r4, #0]
 800af24:	e7de      	b.n	800aee4 <_malloc_r+0xa0>
 800af26:	bf00      	nop
 800af28:	2001377c 	.word	0x2001377c

0800af2c <__sfputc_r>:
 800af2c:	6893      	ldr	r3, [r2, #8]
 800af2e:	3b01      	subs	r3, #1
 800af30:	2b00      	cmp	r3, #0
 800af32:	b410      	push	{r4}
 800af34:	6093      	str	r3, [r2, #8]
 800af36:	da08      	bge.n	800af4a <__sfputc_r+0x1e>
 800af38:	6994      	ldr	r4, [r2, #24]
 800af3a:	42a3      	cmp	r3, r4
 800af3c:	db01      	blt.n	800af42 <__sfputc_r+0x16>
 800af3e:	290a      	cmp	r1, #10
 800af40:	d103      	bne.n	800af4a <__sfputc_r+0x1e>
 800af42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af46:	f7ff bc31 	b.w	800a7ac <__swbuf_r>
 800af4a:	6813      	ldr	r3, [r2, #0]
 800af4c:	1c58      	adds	r0, r3, #1
 800af4e:	6010      	str	r0, [r2, #0]
 800af50:	7019      	strb	r1, [r3, #0]
 800af52:	4608      	mov	r0, r1
 800af54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <__sfputs_r>:
 800af5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5c:	4606      	mov	r6, r0
 800af5e:	460f      	mov	r7, r1
 800af60:	4614      	mov	r4, r2
 800af62:	18d5      	adds	r5, r2, r3
 800af64:	42ac      	cmp	r4, r5
 800af66:	d101      	bne.n	800af6c <__sfputs_r+0x12>
 800af68:	2000      	movs	r0, #0
 800af6a:	e007      	b.n	800af7c <__sfputs_r+0x22>
 800af6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af70:	463a      	mov	r2, r7
 800af72:	4630      	mov	r0, r6
 800af74:	f7ff ffda 	bl	800af2c <__sfputc_r>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d1f3      	bne.n	800af64 <__sfputs_r+0xa>
 800af7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af80 <_vfiprintf_r>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	460d      	mov	r5, r1
 800af86:	b09d      	sub	sp, #116	; 0x74
 800af88:	4614      	mov	r4, r2
 800af8a:	4698      	mov	r8, r3
 800af8c:	4606      	mov	r6, r0
 800af8e:	b118      	cbz	r0, 800af98 <_vfiprintf_r+0x18>
 800af90:	6983      	ldr	r3, [r0, #24]
 800af92:	b90b      	cbnz	r3, 800af98 <_vfiprintf_r+0x18>
 800af94:	f7ff fde4 	bl	800ab60 <__sinit>
 800af98:	4b89      	ldr	r3, [pc, #548]	; (800b1c0 <_vfiprintf_r+0x240>)
 800af9a:	429d      	cmp	r5, r3
 800af9c:	d11b      	bne.n	800afd6 <_vfiprintf_r+0x56>
 800af9e:	6875      	ldr	r5, [r6, #4]
 800afa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afa2:	07d9      	lsls	r1, r3, #31
 800afa4:	d405      	bmi.n	800afb2 <_vfiprintf_r+0x32>
 800afa6:	89ab      	ldrh	r3, [r5, #12]
 800afa8:	059a      	lsls	r2, r3, #22
 800afaa:	d402      	bmi.n	800afb2 <_vfiprintf_r+0x32>
 800afac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afae:	f7ff fe75 	bl	800ac9c <__retarget_lock_acquire_recursive>
 800afb2:	89ab      	ldrh	r3, [r5, #12]
 800afb4:	071b      	lsls	r3, r3, #28
 800afb6:	d501      	bpl.n	800afbc <_vfiprintf_r+0x3c>
 800afb8:	692b      	ldr	r3, [r5, #16]
 800afba:	b9eb      	cbnz	r3, 800aff8 <_vfiprintf_r+0x78>
 800afbc:	4629      	mov	r1, r5
 800afbe:	4630      	mov	r0, r6
 800afc0:	f7ff fc46 	bl	800a850 <__swsetup_r>
 800afc4:	b1c0      	cbz	r0, 800aff8 <_vfiprintf_r+0x78>
 800afc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afc8:	07dc      	lsls	r4, r3, #31
 800afca:	d50e      	bpl.n	800afea <_vfiprintf_r+0x6a>
 800afcc:	f04f 30ff 	mov.w	r0, #4294967295
 800afd0:	b01d      	add	sp, #116	; 0x74
 800afd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd6:	4b7b      	ldr	r3, [pc, #492]	; (800b1c4 <_vfiprintf_r+0x244>)
 800afd8:	429d      	cmp	r5, r3
 800afda:	d101      	bne.n	800afe0 <_vfiprintf_r+0x60>
 800afdc:	68b5      	ldr	r5, [r6, #8]
 800afde:	e7df      	b.n	800afa0 <_vfiprintf_r+0x20>
 800afe0:	4b79      	ldr	r3, [pc, #484]	; (800b1c8 <_vfiprintf_r+0x248>)
 800afe2:	429d      	cmp	r5, r3
 800afe4:	bf08      	it	eq
 800afe6:	68f5      	ldreq	r5, [r6, #12]
 800afe8:	e7da      	b.n	800afa0 <_vfiprintf_r+0x20>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	0598      	lsls	r0, r3, #22
 800afee:	d4ed      	bmi.n	800afcc <_vfiprintf_r+0x4c>
 800aff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aff2:	f7ff fe54 	bl	800ac9e <__retarget_lock_release_recursive>
 800aff6:	e7e9      	b.n	800afcc <_vfiprintf_r+0x4c>
 800aff8:	2300      	movs	r3, #0
 800affa:	9309      	str	r3, [sp, #36]	; 0x24
 800affc:	2320      	movs	r3, #32
 800affe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b002:	f8cd 800c 	str.w	r8, [sp, #12]
 800b006:	2330      	movs	r3, #48	; 0x30
 800b008:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1cc <_vfiprintf_r+0x24c>
 800b00c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b010:	f04f 0901 	mov.w	r9, #1
 800b014:	4623      	mov	r3, r4
 800b016:	469a      	mov	sl, r3
 800b018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b01c:	b10a      	cbz	r2, 800b022 <_vfiprintf_r+0xa2>
 800b01e:	2a25      	cmp	r2, #37	; 0x25
 800b020:	d1f9      	bne.n	800b016 <_vfiprintf_r+0x96>
 800b022:	ebba 0b04 	subs.w	fp, sl, r4
 800b026:	d00b      	beq.n	800b040 <_vfiprintf_r+0xc0>
 800b028:	465b      	mov	r3, fp
 800b02a:	4622      	mov	r2, r4
 800b02c:	4629      	mov	r1, r5
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff ff93 	bl	800af5a <__sfputs_r>
 800b034:	3001      	adds	r0, #1
 800b036:	f000 80aa 	beq.w	800b18e <_vfiprintf_r+0x20e>
 800b03a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b03c:	445a      	add	r2, fp
 800b03e:	9209      	str	r2, [sp, #36]	; 0x24
 800b040:	f89a 3000 	ldrb.w	r3, [sl]
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 80a2 	beq.w	800b18e <_vfiprintf_r+0x20e>
 800b04a:	2300      	movs	r3, #0
 800b04c:	f04f 32ff 	mov.w	r2, #4294967295
 800b050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b054:	f10a 0a01 	add.w	sl, sl, #1
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	9307      	str	r3, [sp, #28]
 800b05c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b060:	931a      	str	r3, [sp, #104]	; 0x68
 800b062:	4654      	mov	r4, sl
 800b064:	2205      	movs	r2, #5
 800b066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b06a:	4858      	ldr	r0, [pc, #352]	; (800b1cc <_vfiprintf_r+0x24c>)
 800b06c:	f7f5 f8c8 	bl	8000200 <memchr>
 800b070:	9a04      	ldr	r2, [sp, #16]
 800b072:	b9d8      	cbnz	r0, 800b0ac <_vfiprintf_r+0x12c>
 800b074:	06d1      	lsls	r1, r2, #27
 800b076:	bf44      	itt	mi
 800b078:	2320      	movmi	r3, #32
 800b07a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b07e:	0713      	lsls	r3, r2, #28
 800b080:	bf44      	itt	mi
 800b082:	232b      	movmi	r3, #43	; 0x2b
 800b084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b088:	f89a 3000 	ldrb.w	r3, [sl]
 800b08c:	2b2a      	cmp	r3, #42	; 0x2a
 800b08e:	d015      	beq.n	800b0bc <_vfiprintf_r+0x13c>
 800b090:	9a07      	ldr	r2, [sp, #28]
 800b092:	4654      	mov	r4, sl
 800b094:	2000      	movs	r0, #0
 800b096:	f04f 0c0a 	mov.w	ip, #10
 800b09a:	4621      	mov	r1, r4
 800b09c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0a0:	3b30      	subs	r3, #48	; 0x30
 800b0a2:	2b09      	cmp	r3, #9
 800b0a4:	d94e      	bls.n	800b144 <_vfiprintf_r+0x1c4>
 800b0a6:	b1b0      	cbz	r0, 800b0d6 <_vfiprintf_r+0x156>
 800b0a8:	9207      	str	r2, [sp, #28]
 800b0aa:	e014      	b.n	800b0d6 <_vfiprintf_r+0x156>
 800b0ac:	eba0 0308 	sub.w	r3, r0, r8
 800b0b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	9304      	str	r3, [sp, #16]
 800b0b8:	46a2      	mov	sl, r4
 800b0ba:	e7d2      	b.n	800b062 <_vfiprintf_r+0xe2>
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	1d19      	adds	r1, r3, #4
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	9103      	str	r1, [sp, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	bfbb      	ittet	lt
 800b0c8:	425b      	neglt	r3, r3
 800b0ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ce:	9307      	strge	r3, [sp, #28]
 800b0d0:	9307      	strlt	r3, [sp, #28]
 800b0d2:	bfb8      	it	lt
 800b0d4:	9204      	strlt	r2, [sp, #16]
 800b0d6:	7823      	ldrb	r3, [r4, #0]
 800b0d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0da:	d10c      	bne.n	800b0f6 <_vfiprintf_r+0x176>
 800b0dc:	7863      	ldrb	r3, [r4, #1]
 800b0de:	2b2a      	cmp	r3, #42	; 0x2a
 800b0e0:	d135      	bne.n	800b14e <_vfiprintf_r+0x1ce>
 800b0e2:	9b03      	ldr	r3, [sp, #12]
 800b0e4:	1d1a      	adds	r2, r3, #4
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	9203      	str	r2, [sp, #12]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	bfb8      	it	lt
 800b0ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0f2:	3402      	adds	r4, #2
 800b0f4:	9305      	str	r3, [sp, #20]
 800b0f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1dc <_vfiprintf_r+0x25c>
 800b0fa:	7821      	ldrb	r1, [r4, #0]
 800b0fc:	2203      	movs	r2, #3
 800b0fe:	4650      	mov	r0, sl
 800b100:	f7f5 f87e 	bl	8000200 <memchr>
 800b104:	b140      	cbz	r0, 800b118 <_vfiprintf_r+0x198>
 800b106:	2340      	movs	r3, #64	; 0x40
 800b108:	eba0 000a 	sub.w	r0, r0, sl
 800b10c:	fa03 f000 	lsl.w	r0, r3, r0
 800b110:	9b04      	ldr	r3, [sp, #16]
 800b112:	4303      	orrs	r3, r0
 800b114:	3401      	adds	r4, #1
 800b116:	9304      	str	r3, [sp, #16]
 800b118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11c:	482c      	ldr	r0, [pc, #176]	; (800b1d0 <_vfiprintf_r+0x250>)
 800b11e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b122:	2206      	movs	r2, #6
 800b124:	f7f5 f86c 	bl	8000200 <memchr>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d03f      	beq.n	800b1ac <_vfiprintf_r+0x22c>
 800b12c:	4b29      	ldr	r3, [pc, #164]	; (800b1d4 <_vfiprintf_r+0x254>)
 800b12e:	bb1b      	cbnz	r3, 800b178 <_vfiprintf_r+0x1f8>
 800b130:	9b03      	ldr	r3, [sp, #12]
 800b132:	3307      	adds	r3, #7
 800b134:	f023 0307 	bic.w	r3, r3, #7
 800b138:	3308      	adds	r3, #8
 800b13a:	9303      	str	r3, [sp, #12]
 800b13c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13e:	443b      	add	r3, r7
 800b140:	9309      	str	r3, [sp, #36]	; 0x24
 800b142:	e767      	b.n	800b014 <_vfiprintf_r+0x94>
 800b144:	fb0c 3202 	mla	r2, ip, r2, r3
 800b148:	460c      	mov	r4, r1
 800b14a:	2001      	movs	r0, #1
 800b14c:	e7a5      	b.n	800b09a <_vfiprintf_r+0x11a>
 800b14e:	2300      	movs	r3, #0
 800b150:	3401      	adds	r4, #1
 800b152:	9305      	str	r3, [sp, #20]
 800b154:	4619      	mov	r1, r3
 800b156:	f04f 0c0a 	mov.w	ip, #10
 800b15a:	4620      	mov	r0, r4
 800b15c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b160:	3a30      	subs	r2, #48	; 0x30
 800b162:	2a09      	cmp	r2, #9
 800b164:	d903      	bls.n	800b16e <_vfiprintf_r+0x1ee>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d0c5      	beq.n	800b0f6 <_vfiprintf_r+0x176>
 800b16a:	9105      	str	r1, [sp, #20]
 800b16c:	e7c3      	b.n	800b0f6 <_vfiprintf_r+0x176>
 800b16e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b172:	4604      	mov	r4, r0
 800b174:	2301      	movs	r3, #1
 800b176:	e7f0      	b.n	800b15a <_vfiprintf_r+0x1da>
 800b178:	ab03      	add	r3, sp, #12
 800b17a:	9300      	str	r3, [sp, #0]
 800b17c:	462a      	mov	r2, r5
 800b17e:	4b16      	ldr	r3, [pc, #88]	; (800b1d8 <_vfiprintf_r+0x258>)
 800b180:	a904      	add	r1, sp, #16
 800b182:	4630      	mov	r0, r6
 800b184:	f3af 8000 	nop.w
 800b188:	4607      	mov	r7, r0
 800b18a:	1c78      	adds	r0, r7, #1
 800b18c:	d1d6      	bne.n	800b13c <_vfiprintf_r+0x1bc>
 800b18e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b190:	07d9      	lsls	r1, r3, #31
 800b192:	d405      	bmi.n	800b1a0 <_vfiprintf_r+0x220>
 800b194:	89ab      	ldrh	r3, [r5, #12]
 800b196:	059a      	lsls	r2, r3, #22
 800b198:	d402      	bmi.n	800b1a0 <_vfiprintf_r+0x220>
 800b19a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b19c:	f7ff fd7f 	bl	800ac9e <__retarget_lock_release_recursive>
 800b1a0:	89ab      	ldrh	r3, [r5, #12]
 800b1a2:	065b      	lsls	r3, r3, #25
 800b1a4:	f53f af12 	bmi.w	800afcc <_vfiprintf_r+0x4c>
 800b1a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1aa:	e711      	b.n	800afd0 <_vfiprintf_r+0x50>
 800b1ac:	ab03      	add	r3, sp, #12
 800b1ae:	9300      	str	r3, [sp, #0]
 800b1b0:	462a      	mov	r2, r5
 800b1b2:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <_vfiprintf_r+0x258>)
 800b1b4:	a904      	add	r1, sp, #16
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f000 f880 	bl	800b2bc <_printf_i>
 800b1bc:	e7e4      	b.n	800b188 <_vfiprintf_r+0x208>
 800b1be:	bf00      	nop
 800b1c0:	080162b8 	.word	0x080162b8
 800b1c4:	080162d8 	.word	0x080162d8
 800b1c8:	08016298 	.word	0x08016298
 800b1cc:	080162f8 	.word	0x080162f8
 800b1d0:	08016302 	.word	0x08016302
 800b1d4:	00000000 	.word	0x00000000
 800b1d8:	0800af5b 	.word	0x0800af5b
 800b1dc:	080162fe 	.word	0x080162fe

0800b1e0 <_printf_common>:
 800b1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e4:	4616      	mov	r6, r2
 800b1e6:	4699      	mov	r9, r3
 800b1e8:	688a      	ldr	r2, [r1, #8]
 800b1ea:	690b      	ldr	r3, [r1, #16]
 800b1ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	bfb8      	it	lt
 800b1f4:	4613      	movlt	r3, r2
 800b1f6:	6033      	str	r3, [r6, #0]
 800b1f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1fc:	4607      	mov	r7, r0
 800b1fe:	460c      	mov	r4, r1
 800b200:	b10a      	cbz	r2, 800b206 <_printf_common+0x26>
 800b202:	3301      	adds	r3, #1
 800b204:	6033      	str	r3, [r6, #0]
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	0699      	lsls	r1, r3, #26
 800b20a:	bf42      	ittt	mi
 800b20c:	6833      	ldrmi	r3, [r6, #0]
 800b20e:	3302      	addmi	r3, #2
 800b210:	6033      	strmi	r3, [r6, #0]
 800b212:	6825      	ldr	r5, [r4, #0]
 800b214:	f015 0506 	ands.w	r5, r5, #6
 800b218:	d106      	bne.n	800b228 <_printf_common+0x48>
 800b21a:	f104 0a19 	add.w	sl, r4, #25
 800b21e:	68e3      	ldr	r3, [r4, #12]
 800b220:	6832      	ldr	r2, [r6, #0]
 800b222:	1a9b      	subs	r3, r3, r2
 800b224:	42ab      	cmp	r3, r5
 800b226:	dc26      	bgt.n	800b276 <_printf_common+0x96>
 800b228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b22c:	1e13      	subs	r3, r2, #0
 800b22e:	6822      	ldr	r2, [r4, #0]
 800b230:	bf18      	it	ne
 800b232:	2301      	movne	r3, #1
 800b234:	0692      	lsls	r2, r2, #26
 800b236:	d42b      	bmi.n	800b290 <_printf_common+0xb0>
 800b238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b23c:	4649      	mov	r1, r9
 800b23e:	4638      	mov	r0, r7
 800b240:	47c0      	blx	r8
 800b242:	3001      	adds	r0, #1
 800b244:	d01e      	beq.n	800b284 <_printf_common+0xa4>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	68e5      	ldr	r5, [r4, #12]
 800b24a:	6832      	ldr	r2, [r6, #0]
 800b24c:	f003 0306 	and.w	r3, r3, #6
 800b250:	2b04      	cmp	r3, #4
 800b252:	bf08      	it	eq
 800b254:	1aad      	subeq	r5, r5, r2
 800b256:	68a3      	ldr	r3, [r4, #8]
 800b258:	6922      	ldr	r2, [r4, #16]
 800b25a:	bf0c      	ite	eq
 800b25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b260:	2500      	movne	r5, #0
 800b262:	4293      	cmp	r3, r2
 800b264:	bfc4      	itt	gt
 800b266:	1a9b      	subgt	r3, r3, r2
 800b268:	18ed      	addgt	r5, r5, r3
 800b26a:	2600      	movs	r6, #0
 800b26c:	341a      	adds	r4, #26
 800b26e:	42b5      	cmp	r5, r6
 800b270:	d11a      	bne.n	800b2a8 <_printf_common+0xc8>
 800b272:	2000      	movs	r0, #0
 800b274:	e008      	b.n	800b288 <_printf_common+0xa8>
 800b276:	2301      	movs	r3, #1
 800b278:	4652      	mov	r2, sl
 800b27a:	4649      	mov	r1, r9
 800b27c:	4638      	mov	r0, r7
 800b27e:	47c0      	blx	r8
 800b280:	3001      	adds	r0, #1
 800b282:	d103      	bne.n	800b28c <_printf_common+0xac>
 800b284:	f04f 30ff 	mov.w	r0, #4294967295
 800b288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28c:	3501      	adds	r5, #1
 800b28e:	e7c6      	b.n	800b21e <_printf_common+0x3e>
 800b290:	18e1      	adds	r1, r4, r3
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	2030      	movs	r0, #48	; 0x30
 800b296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b29a:	4422      	add	r2, r4
 800b29c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	e7c7      	b.n	800b238 <_printf_common+0x58>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	4622      	mov	r2, r4
 800b2ac:	4649      	mov	r1, r9
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	47c0      	blx	r8
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	d0e6      	beq.n	800b284 <_printf_common+0xa4>
 800b2b6:	3601      	adds	r6, #1
 800b2b8:	e7d9      	b.n	800b26e <_printf_common+0x8e>
	...

0800b2bc <_printf_i>:
 800b2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c0:	7e0f      	ldrb	r7, [r1, #24]
 800b2c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2c4:	2f78      	cmp	r7, #120	; 0x78
 800b2c6:	4691      	mov	r9, r2
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	469a      	mov	sl, r3
 800b2ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2d2:	d807      	bhi.n	800b2e4 <_printf_i+0x28>
 800b2d4:	2f62      	cmp	r7, #98	; 0x62
 800b2d6:	d80a      	bhi.n	800b2ee <_printf_i+0x32>
 800b2d8:	2f00      	cmp	r7, #0
 800b2da:	f000 80d8 	beq.w	800b48e <_printf_i+0x1d2>
 800b2de:	2f58      	cmp	r7, #88	; 0x58
 800b2e0:	f000 80a3 	beq.w	800b42a <_printf_i+0x16e>
 800b2e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2ec:	e03a      	b.n	800b364 <_printf_i+0xa8>
 800b2ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2f2:	2b15      	cmp	r3, #21
 800b2f4:	d8f6      	bhi.n	800b2e4 <_printf_i+0x28>
 800b2f6:	a101      	add	r1, pc, #4	; (adr r1, 800b2fc <_printf_i+0x40>)
 800b2f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2fc:	0800b355 	.word	0x0800b355
 800b300:	0800b369 	.word	0x0800b369
 800b304:	0800b2e5 	.word	0x0800b2e5
 800b308:	0800b2e5 	.word	0x0800b2e5
 800b30c:	0800b2e5 	.word	0x0800b2e5
 800b310:	0800b2e5 	.word	0x0800b2e5
 800b314:	0800b369 	.word	0x0800b369
 800b318:	0800b2e5 	.word	0x0800b2e5
 800b31c:	0800b2e5 	.word	0x0800b2e5
 800b320:	0800b2e5 	.word	0x0800b2e5
 800b324:	0800b2e5 	.word	0x0800b2e5
 800b328:	0800b475 	.word	0x0800b475
 800b32c:	0800b399 	.word	0x0800b399
 800b330:	0800b457 	.word	0x0800b457
 800b334:	0800b2e5 	.word	0x0800b2e5
 800b338:	0800b2e5 	.word	0x0800b2e5
 800b33c:	0800b497 	.word	0x0800b497
 800b340:	0800b2e5 	.word	0x0800b2e5
 800b344:	0800b399 	.word	0x0800b399
 800b348:	0800b2e5 	.word	0x0800b2e5
 800b34c:	0800b2e5 	.word	0x0800b2e5
 800b350:	0800b45f 	.word	0x0800b45f
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	1d1a      	adds	r2, r3, #4
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	602a      	str	r2, [r5, #0]
 800b35c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b364:	2301      	movs	r3, #1
 800b366:	e0a3      	b.n	800b4b0 <_printf_i+0x1f4>
 800b368:	6820      	ldr	r0, [r4, #0]
 800b36a:	6829      	ldr	r1, [r5, #0]
 800b36c:	0606      	lsls	r6, r0, #24
 800b36e:	f101 0304 	add.w	r3, r1, #4
 800b372:	d50a      	bpl.n	800b38a <_printf_i+0xce>
 800b374:	680e      	ldr	r6, [r1, #0]
 800b376:	602b      	str	r3, [r5, #0]
 800b378:	2e00      	cmp	r6, #0
 800b37a:	da03      	bge.n	800b384 <_printf_i+0xc8>
 800b37c:	232d      	movs	r3, #45	; 0x2d
 800b37e:	4276      	negs	r6, r6
 800b380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b384:	485e      	ldr	r0, [pc, #376]	; (800b500 <_printf_i+0x244>)
 800b386:	230a      	movs	r3, #10
 800b388:	e019      	b.n	800b3be <_printf_i+0x102>
 800b38a:	680e      	ldr	r6, [r1, #0]
 800b38c:	602b      	str	r3, [r5, #0]
 800b38e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b392:	bf18      	it	ne
 800b394:	b236      	sxthne	r6, r6
 800b396:	e7ef      	b.n	800b378 <_printf_i+0xbc>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	6820      	ldr	r0, [r4, #0]
 800b39c:	1d19      	adds	r1, r3, #4
 800b39e:	6029      	str	r1, [r5, #0]
 800b3a0:	0601      	lsls	r1, r0, #24
 800b3a2:	d501      	bpl.n	800b3a8 <_printf_i+0xec>
 800b3a4:	681e      	ldr	r6, [r3, #0]
 800b3a6:	e002      	b.n	800b3ae <_printf_i+0xf2>
 800b3a8:	0646      	lsls	r6, r0, #25
 800b3aa:	d5fb      	bpl.n	800b3a4 <_printf_i+0xe8>
 800b3ac:	881e      	ldrh	r6, [r3, #0]
 800b3ae:	4854      	ldr	r0, [pc, #336]	; (800b500 <_printf_i+0x244>)
 800b3b0:	2f6f      	cmp	r7, #111	; 0x6f
 800b3b2:	bf0c      	ite	eq
 800b3b4:	2308      	moveq	r3, #8
 800b3b6:	230a      	movne	r3, #10
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3be:	6865      	ldr	r5, [r4, #4]
 800b3c0:	60a5      	str	r5, [r4, #8]
 800b3c2:	2d00      	cmp	r5, #0
 800b3c4:	bfa2      	ittt	ge
 800b3c6:	6821      	ldrge	r1, [r4, #0]
 800b3c8:	f021 0104 	bicge.w	r1, r1, #4
 800b3cc:	6021      	strge	r1, [r4, #0]
 800b3ce:	b90e      	cbnz	r6, 800b3d4 <_printf_i+0x118>
 800b3d0:	2d00      	cmp	r5, #0
 800b3d2:	d04d      	beq.n	800b470 <_printf_i+0x1b4>
 800b3d4:	4615      	mov	r5, r2
 800b3d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3da:	fb03 6711 	mls	r7, r3, r1, r6
 800b3de:	5dc7      	ldrb	r7, [r0, r7]
 800b3e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3e4:	4637      	mov	r7, r6
 800b3e6:	42bb      	cmp	r3, r7
 800b3e8:	460e      	mov	r6, r1
 800b3ea:	d9f4      	bls.n	800b3d6 <_printf_i+0x11a>
 800b3ec:	2b08      	cmp	r3, #8
 800b3ee:	d10b      	bne.n	800b408 <_printf_i+0x14c>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	07de      	lsls	r6, r3, #31
 800b3f4:	d508      	bpl.n	800b408 <_printf_i+0x14c>
 800b3f6:	6923      	ldr	r3, [r4, #16]
 800b3f8:	6861      	ldr	r1, [r4, #4]
 800b3fa:	4299      	cmp	r1, r3
 800b3fc:	bfde      	ittt	le
 800b3fe:	2330      	movle	r3, #48	; 0x30
 800b400:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b404:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b408:	1b52      	subs	r2, r2, r5
 800b40a:	6122      	str	r2, [r4, #16]
 800b40c:	f8cd a000 	str.w	sl, [sp]
 800b410:	464b      	mov	r3, r9
 800b412:	aa03      	add	r2, sp, #12
 800b414:	4621      	mov	r1, r4
 800b416:	4640      	mov	r0, r8
 800b418:	f7ff fee2 	bl	800b1e0 <_printf_common>
 800b41c:	3001      	adds	r0, #1
 800b41e:	d14c      	bne.n	800b4ba <_printf_i+0x1fe>
 800b420:	f04f 30ff 	mov.w	r0, #4294967295
 800b424:	b004      	add	sp, #16
 800b426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b42a:	4835      	ldr	r0, [pc, #212]	; (800b500 <_printf_i+0x244>)
 800b42c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b430:	6829      	ldr	r1, [r5, #0]
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	f851 6b04 	ldr.w	r6, [r1], #4
 800b438:	6029      	str	r1, [r5, #0]
 800b43a:	061d      	lsls	r5, r3, #24
 800b43c:	d514      	bpl.n	800b468 <_printf_i+0x1ac>
 800b43e:	07df      	lsls	r7, r3, #31
 800b440:	bf44      	itt	mi
 800b442:	f043 0320 	orrmi.w	r3, r3, #32
 800b446:	6023      	strmi	r3, [r4, #0]
 800b448:	b91e      	cbnz	r6, 800b452 <_printf_i+0x196>
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	f023 0320 	bic.w	r3, r3, #32
 800b450:	6023      	str	r3, [r4, #0]
 800b452:	2310      	movs	r3, #16
 800b454:	e7b0      	b.n	800b3b8 <_printf_i+0xfc>
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	f043 0320 	orr.w	r3, r3, #32
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	2378      	movs	r3, #120	; 0x78
 800b460:	4828      	ldr	r0, [pc, #160]	; (800b504 <_printf_i+0x248>)
 800b462:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b466:	e7e3      	b.n	800b430 <_printf_i+0x174>
 800b468:	0659      	lsls	r1, r3, #25
 800b46a:	bf48      	it	mi
 800b46c:	b2b6      	uxthmi	r6, r6
 800b46e:	e7e6      	b.n	800b43e <_printf_i+0x182>
 800b470:	4615      	mov	r5, r2
 800b472:	e7bb      	b.n	800b3ec <_printf_i+0x130>
 800b474:	682b      	ldr	r3, [r5, #0]
 800b476:	6826      	ldr	r6, [r4, #0]
 800b478:	6961      	ldr	r1, [r4, #20]
 800b47a:	1d18      	adds	r0, r3, #4
 800b47c:	6028      	str	r0, [r5, #0]
 800b47e:	0635      	lsls	r5, r6, #24
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	d501      	bpl.n	800b488 <_printf_i+0x1cc>
 800b484:	6019      	str	r1, [r3, #0]
 800b486:	e002      	b.n	800b48e <_printf_i+0x1d2>
 800b488:	0670      	lsls	r0, r6, #25
 800b48a:	d5fb      	bpl.n	800b484 <_printf_i+0x1c8>
 800b48c:	8019      	strh	r1, [r3, #0]
 800b48e:	2300      	movs	r3, #0
 800b490:	6123      	str	r3, [r4, #16]
 800b492:	4615      	mov	r5, r2
 800b494:	e7ba      	b.n	800b40c <_printf_i+0x150>
 800b496:	682b      	ldr	r3, [r5, #0]
 800b498:	1d1a      	adds	r2, r3, #4
 800b49a:	602a      	str	r2, [r5, #0]
 800b49c:	681d      	ldr	r5, [r3, #0]
 800b49e:	6862      	ldr	r2, [r4, #4]
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f7f4 feac 	bl	8000200 <memchr>
 800b4a8:	b108      	cbz	r0, 800b4ae <_printf_i+0x1f2>
 800b4aa:	1b40      	subs	r0, r0, r5
 800b4ac:	6060      	str	r0, [r4, #4]
 800b4ae:	6863      	ldr	r3, [r4, #4]
 800b4b0:	6123      	str	r3, [r4, #16]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4b8:	e7a8      	b.n	800b40c <_printf_i+0x150>
 800b4ba:	6923      	ldr	r3, [r4, #16]
 800b4bc:	462a      	mov	r2, r5
 800b4be:	4649      	mov	r1, r9
 800b4c0:	4640      	mov	r0, r8
 800b4c2:	47d0      	blx	sl
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	d0ab      	beq.n	800b420 <_printf_i+0x164>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	079b      	lsls	r3, r3, #30
 800b4cc:	d413      	bmi.n	800b4f6 <_printf_i+0x23a>
 800b4ce:	68e0      	ldr	r0, [r4, #12]
 800b4d0:	9b03      	ldr	r3, [sp, #12]
 800b4d2:	4298      	cmp	r0, r3
 800b4d4:	bfb8      	it	lt
 800b4d6:	4618      	movlt	r0, r3
 800b4d8:	e7a4      	b.n	800b424 <_printf_i+0x168>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4632      	mov	r2, r6
 800b4de:	4649      	mov	r1, r9
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	47d0      	blx	sl
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d09b      	beq.n	800b420 <_printf_i+0x164>
 800b4e8:	3501      	adds	r5, #1
 800b4ea:	68e3      	ldr	r3, [r4, #12]
 800b4ec:	9903      	ldr	r1, [sp, #12]
 800b4ee:	1a5b      	subs	r3, r3, r1
 800b4f0:	42ab      	cmp	r3, r5
 800b4f2:	dcf2      	bgt.n	800b4da <_printf_i+0x21e>
 800b4f4:	e7eb      	b.n	800b4ce <_printf_i+0x212>
 800b4f6:	2500      	movs	r5, #0
 800b4f8:	f104 0619 	add.w	r6, r4, #25
 800b4fc:	e7f5      	b.n	800b4ea <_printf_i+0x22e>
 800b4fe:	bf00      	nop
 800b500:	08016309 	.word	0x08016309
 800b504:	0801631a 	.word	0x0801631a

0800b508 <_putc_r>:
 800b508:	b570      	push	{r4, r5, r6, lr}
 800b50a:	460d      	mov	r5, r1
 800b50c:	4614      	mov	r4, r2
 800b50e:	4606      	mov	r6, r0
 800b510:	b118      	cbz	r0, 800b51a <_putc_r+0x12>
 800b512:	6983      	ldr	r3, [r0, #24]
 800b514:	b90b      	cbnz	r3, 800b51a <_putc_r+0x12>
 800b516:	f7ff fb23 	bl	800ab60 <__sinit>
 800b51a:	4b1c      	ldr	r3, [pc, #112]	; (800b58c <_putc_r+0x84>)
 800b51c:	429c      	cmp	r4, r3
 800b51e:	d124      	bne.n	800b56a <_putc_r+0x62>
 800b520:	6874      	ldr	r4, [r6, #4]
 800b522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b524:	07d8      	lsls	r0, r3, #31
 800b526:	d405      	bmi.n	800b534 <_putc_r+0x2c>
 800b528:	89a3      	ldrh	r3, [r4, #12]
 800b52a:	0599      	lsls	r1, r3, #22
 800b52c:	d402      	bmi.n	800b534 <_putc_r+0x2c>
 800b52e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b530:	f7ff fbb4 	bl	800ac9c <__retarget_lock_acquire_recursive>
 800b534:	68a3      	ldr	r3, [r4, #8]
 800b536:	3b01      	subs	r3, #1
 800b538:	2b00      	cmp	r3, #0
 800b53a:	60a3      	str	r3, [r4, #8]
 800b53c:	da05      	bge.n	800b54a <_putc_r+0x42>
 800b53e:	69a2      	ldr	r2, [r4, #24]
 800b540:	4293      	cmp	r3, r2
 800b542:	db1c      	blt.n	800b57e <_putc_r+0x76>
 800b544:	b2eb      	uxtb	r3, r5
 800b546:	2b0a      	cmp	r3, #10
 800b548:	d019      	beq.n	800b57e <_putc_r+0x76>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	1c5a      	adds	r2, r3, #1
 800b54e:	6022      	str	r2, [r4, #0]
 800b550:	701d      	strb	r5, [r3, #0]
 800b552:	b2ed      	uxtb	r5, r5
 800b554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b556:	07da      	lsls	r2, r3, #31
 800b558:	d405      	bmi.n	800b566 <_putc_r+0x5e>
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	059b      	lsls	r3, r3, #22
 800b55e:	d402      	bmi.n	800b566 <_putc_r+0x5e>
 800b560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b562:	f7ff fb9c 	bl	800ac9e <__retarget_lock_release_recursive>
 800b566:	4628      	mov	r0, r5
 800b568:	bd70      	pop	{r4, r5, r6, pc}
 800b56a:	4b09      	ldr	r3, [pc, #36]	; (800b590 <_putc_r+0x88>)
 800b56c:	429c      	cmp	r4, r3
 800b56e:	d101      	bne.n	800b574 <_putc_r+0x6c>
 800b570:	68b4      	ldr	r4, [r6, #8]
 800b572:	e7d6      	b.n	800b522 <_putc_r+0x1a>
 800b574:	4b07      	ldr	r3, [pc, #28]	; (800b594 <_putc_r+0x8c>)
 800b576:	429c      	cmp	r4, r3
 800b578:	bf08      	it	eq
 800b57a:	68f4      	ldreq	r4, [r6, #12]
 800b57c:	e7d1      	b.n	800b522 <_putc_r+0x1a>
 800b57e:	4629      	mov	r1, r5
 800b580:	4622      	mov	r2, r4
 800b582:	4630      	mov	r0, r6
 800b584:	f7ff f912 	bl	800a7ac <__swbuf_r>
 800b588:	4605      	mov	r5, r0
 800b58a:	e7e3      	b.n	800b554 <_putc_r+0x4c>
 800b58c:	080162b8 	.word	0x080162b8
 800b590:	080162d8 	.word	0x080162d8
 800b594:	08016298 	.word	0x08016298

0800b598 <_sbrk_r>:
 800b598:	b538      	push	{r3, r4, r5, lr}
 800b59a:	4d06      	ldr	r5, [pc, #24]	; (800b5b4 <_sbrk_r+0x1c>)
 800b59c:	2300      	movs	r3, #0
 800b59e:	4604      	mov	r4, r0
 800b5a0:	4608      	mov	r0, r1
 800b5a2:	602b      	str	r3, [r5, #0]
 800b5a4:	f7f7 fda2 	bl	80030ec <_sbrk>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d102      	bne.n	800b5b2 <_sbrk_r+0x1a>
 800b5ac:	682b      	ldr	r3, [r5, #0]
 800b5ae:	b103      	cbz	r3, 800b5b2 <_sbrk_r+0x1a>
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	bd38      	pop	{r3, r4, r5, pc}
 800b5b4:	20013784 	.word	0x20013784

0800b5b8 <__sread>:
 800b5b8:	b510      	push	{r4, lr}
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c0:	f000 f8a0 	bl	800b704 <_read_r>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	bfab      	itete	ge
 800b5c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b5cc:	181b      	addge	r3, r3, r0
 800b5ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5d2:	bfac      	ite	ge
 800b5d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5d6:	81a3      	strhlt	r3, [r4, #12]
 800b5d8:	bd10      	pop	{r4, pc}

0800b5da <__swrite>:
 800b5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5de:	461f      	mov	r7, r3
 800b5e0:	898b      	ldrh	r3, [r1, #12]
 800b5e2:	05db      	lsls	r3, r3, #23
 800b5e4:	4605      	mov	r5, r0
 800b5e6:	460c      	mov	r4, r1
 800b5e8:	4616      	mov	r6, r2
 800b5ea:	d505      	bpl.n	800b5f8 <__swrite+0x1e>
 800b5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f000 f868 	bl	800b6c8 <_lseek_r>
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	4632      	mov	r2, r6
 800b606:	463b      	mov	r3, r7
 800b608:	4628      	mov	r0, r5
 800b60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b60e:	f000 b817 	b.w	800b640 <_write_r>

0800b612 <__sseek>:
 800b612:	b510      	push	{r4, lr}
 800b614:	460c      	mov	r4, r1
 800b616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61a:	f000 f855 	bl	800b6c8 <_lseek_r>
 800b61e:	1c43      	adds	r3, r0, #1
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	bf15      	itete	ne
 800b624:	6560      	strne	r0, [r4, #84]	; 0x54
 800b626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b62a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b62e:	81a3      	strheq	r3, [r4, #12]
 800b630:	bf18      	it	ne
 800b632:	81a3      	strhne	r3, [r4, #12]
 800b634:	bd10      	pop	{r4, pc}

0800b636 <__sclose>:
 800b636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b63a:	f000 b813 	b.w	800b664 <_close_r>
	...

0800b640 <_write_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d07      	ldr	r5, [pc, #28]	; (800b660 <_write_r+0x20>)
 800b644:	4604      	mov	r4, r0
 800b646:	4608      	mov	r0, r1
 800b648:	4611      	mov	r1, r2
 800b64a:	2200      	movs	r2, #0
 800b64c:	602a      	str	r2, [r5, #0]
 800b64e:	461a      	mov	r2, r3
 800b650:	f7f7 fcfb 	bl	800304a <_write>
 800b654:	1c43      	adds	r3, r0, #1
 800b656:	d102      	bne.n	800b65e <_write_r+0x1e>
 800b658:	682b      	ldr	r3, [r5, #0]
 800b65a:	b103      	cbz	r3, 800b65e <_write_r+0x1e>
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	bd38      	pop	{r3, r4, r5, pc}
 800b660:	20013784 	.word	0x20013784

0800b664 <_close_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	4d06      	ldr	r5, [pc, #24]	; (800b680 <_close_r+0x1c>)
 800b668:	2300      	movs	r3, #0
 800b66a:	4604      	mov	r4, r0
 800b66c:	4608      	mov	r0, r1
 800b66e:	602b      	str	r3, [r5, #0]
 800b670:	f7f7 fd07 	bl	8003082 <_close>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d102      	bne.n	800b67e <_close_r+0x1a>
 800b678:	682b      	ldr	r3, [r5, #0]
 800b67a:	b103      	cbz	r3, 800b67e <_close_r+0x1a>
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	20013784 	.word	0x20013784

0800b684 <_fstat_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4d07      	ldr	r5, [pc, #28]	; (800b6a4 <_fstat_r+0x20>)
 800b688:	2300      	movs	r3, #0
 800b68a:	4604      	mov	r4, r0
 800b68c:	4608      	mov	r0, r1
 800b68e:	4611      	mov	r1, r2
 800b690:	602b      	str	r3, [r5, #0]
 800b692:	f7f7 fd02 	bl	800309a <_fstat>
 800b696:	1c43      	adds	r3, r0, #1
 800b698:	d102      	bne.n	800b6a0 <_fstat_r+0x1c>
 800b69a:	682b      	ldr	r3, [r5, #0]
 800b69c:	b103      	cbz	r3, 800b6a0 <_fstat_r+0x1c>
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	bd38      	pop	{r3, r4, r5, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20013784 	.word	0x20013784

0800b6a8 <_isatty_r>:
 800b6a8:	b538      	push	{r3, r4, r5, lr}
 800b6aa:	4d06      	ldr	r5, [pc, #24]	; (800b6c4 <_isatty_r+0x1c>)
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	4604      	mov	r4, r0
 800b6b0:	4608      	mov	r0, r1
 800b6b2:	602b      	str	r3, [r5, #0]
 800b6b4:	f7f7 fd01 	bl	80030ba <_isatty>
 800b6b8:	1c43      	adds	r3, r0, #1
 800b6ba:	d102      	bne.n	800b6c2 <_isatty_r+0x1a>
 800b6bc:	682b      	ldr	r3, [r5, #0]
 800b6be:	b103      	cbz	r3, 800b6c2 <_isatty_r+0x1a>
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	bd38      	pop	{r3, r4, r5, pc}
 800b6c4:	20013784 	.word	0x20013784

0800b6c8 <_lseek_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	4d07      	ldr	r5, [pc, #28]	; (800b6e8 <_lseek_r+0x20>)
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	4608      	mov	r0, r1
 800b6d0:	4611      	mov	r1, r2
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	602a      	str	r2, [r5, #0]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f7f7 fcfa 	bl	80030d0 <_lseek>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_lseek_r+0x1e>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_lseek_r+0x1e>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	20013784 	.word	0x20013784

0800b6ec <__malloc_lock>:
 800b6ec:	4801      	ldr	r0, [pc, #4]	; (800b6f4 <__malloc_lock+0x8>)
 800b6ee:	f7ff bad5 	b.w	800ac9c <__retarget_lock_acquire_recursive>
 800b6f2:	bf00      	nop
 800b6f4:	20013778 	.word	0x20013778

0800b6f8 <__malloc_unlock>:
 800b6f8:	4801      	ldr	r0, [pc, #4]	; (800b700 <__malloc_unlock+0x8>)
 800b6fa:	f7ff bad0 	b.w	800ac9e <__retarget_lock_release_recursive>
 800b6fe:	bf00      	nop
 800b700:	20013778 	.word	0x20013778

0800b704 <_read_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4d07      	ldr	r5, [pc, #28]	; (800b724 <_read_r+0x20>)
 800b708:	4604      	mov	r4, r0
 800b70a:	4608      	mov	r0, r1
 800b70c:	4611      	mov	r1, r2
 800b70e:	2200      	movs	r2, #0
 800b710:	602a      	str	r2, [r5, #0]
 800b712:	461a      	mov	r2, r3
 800b714:	f7f7 fc7c 	bl	8003010 <_read>
 800b718:	1c43      	adds	r3, r0, #1
 800b71a:	d102      	bne.n	800b722 <_read_r+0x1e>
 800b71c:	682b      	ldr	r3, [r5, #0]
 800b71e:	b103      	cbz	r3, 800b722 <_read_r+0x1e>
 800b720:	6023      	str	r3, [r4, #0]
 800b722:	bd38      	pop	{r3, r4, r5, pc}
 800b724:	20013784 	.word	0x20013784

0800b728 <pow>:
 800b728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72a:	ed2d 8b02 	vpush	{d8}
 800b72e:	eeb0 8a40 	vmov.f32	s16, s0
 800b732:	eef0 8a60 	vmov.f32	s17, s1
 800b736:	ec55 4b11 	vmov	r4, r5, d1
 800b73a:	f000 f891 	bl	800b860 <__ieee754_pow>
 800b73e:	4622      	mov	r2, r4
 800b740:	462b      	mov	r3, r5
 800b742:	4620      	mov	r0, r4
 800b744:	4629      	mov	r1, r5
 800b746:	ec57 6b10 	vmov	r6, r7, d0
 800b74a:	f7f5 f9ff 	bl	8000b4c <__aeabi_dcmpun>
 800b74e:	2800      	cmp	r0, #0
 800b750:	d13b      	bne.n	800b7ca <pow+0xa2>
 800b752:	ec51 0b18 	vmov	r0, r1, d8
 800b756:	2200      	movs	r2, #0
 800b758:	2300      	movs	r3, #0
 800b75a:	f7f5 f9c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b75e:	b1b8      	cbz	r0, 800b790 <pow+0x68>
 800b760:	2200      	movs	r2, #0
 800b762:	2300      	movs	r3, #0
 800b764:	4620      	mov	r0, r4
 800b766:	4629      	mov	r1, r5
 800b768:	f7f5 f9be 	bl	8000ae8 <__aeabi_dcmpeq>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d146      	bne.n	800b7fe <pow+0xd6>
 800b770:	ec45 4b10 	vmov	d0, r4, r5
 800b774:	f000 fe8d 	bl	800c492 <finite>
 800b778:	b338      	cbz	r0, 800b7ca <pow+0xa2>
 800b77a:	2200      	movs	r2, #0
 800b77c:	2300      	movs	r3, #0
 800b77e:	4620      	mov	r0, r4
 800b780:	4629      	mov	r1, r5
 800b782:	f7f5 f9bb 	bl	8000afc <__aeabi_dcmplt>
 800b786:	b300      	cbz	r0, 800b7ca <pow+0xa2>
 800b788:	f7fe ff2c 	bl	800a5e4 <__errno>
 800b78c:	2322      	movs	r3, #34	; 0x22
 800b78e:	e01b      	b.n	800b7c8 <pow+0xa0>
 800b790:	ec47 6b10 	vmov	d0, r6, r7
 800b794:	f000 fe7d 	bl	800c492 <finite>
 800b798:	b9e0      	cbnz	r0, 800b7d4 <pow+0xac>
 800b79a:	eeb0 0a48 	vmov.f32	s0, s16
 800b79e:	eef0 0a68 	vmov.f32	s1, s17
 800b7a2:	f000 fe76 	bl	800c492 <finite>
 800b7a6:	b1a8      	cbz	r0, 800b7d4 <pow+0xac>
 800b7a8:	ec45 4b10 	vmov	d0, r4, r5
 800b7ac:	f000 fe71 	bl	800c492 <finite>
 800b7b0:	b180      	cbz	r0, 800b7d4 <pow+0xac>
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	4639      	mov	r1, r7
 800b7ba:	f7f5 f9c7 	bl	8000b4c <__aeabi_dcmpun>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d0e2      	beq.n	800b788 <pow+0x60>
 800b7c2:	f7fe ff0f 	bl	800a5e4 <__errno>
 800b7c6:	2321      	movs	r3, #33	; 0x21
 800b7c8:	6003      	str	r3, [r0, #0]
 800b7ca:	ecbd 8b02 	vpop	{d8}
 800b7ce:	ec47 6b10 	vmov	d0, r6, r7
 800b7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	4630      	mov	r0, r6
 800b7da:	4639      	mov	r1, r7
 800b7dc:	f7f5 f984 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d0f2      	beq.n	800b7ca <pow+0xa2>
 800b7e4:	eeb0 0a48 	vmov.f32	s0, s16
 800b7e8:	eef0 0a68 	vmov.f32	s1, s17
 800b7ec:	f000 fe51 	bl	800c492 <finite>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d0ea      	beq.n	800b7ca <pow+0xa2>
 800b7f4:	ec45 4b10 	vmov	d0, r4, r5
 800b7f8:	f000 fe4b 	bl	800c492 <finite>
 800b7fc:	e7c3      	b.n	800b786 <pow+0x5e>
 800b7fe:	4f01      	ldr	r7, [pc, #4]	; (800b804 <pow+0xdc>)
 800b800:	2600      	movs	r6, #0
 800b802:	e7e2      	b.n	800b7ca <pow+0xa2>
 800b804:	3ff00000 	.word	0x3ff00000

0800b808 <sqrt>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	ed2d 8b02 	vpush	{d8}
 800b80e:	ec55 4b10 	vmov	r4, r5, d0
 800b812:	f000 fd53 	bl	800c2bc <__ieee754_sqrt>
 800b816:	4622      	mov	r2, r4
 800b818:	462b      	mov	r3, r5
 800b81a:	4620      	mov	r0, r4
 800b81c:	4629      	mov	r1, r5
 800b81e:	eeb0 8a40 	vmov.f32	s16, s0
 800b822:	eef0 8a60 	vmov.f32	s17, s1
 800b826:	f7f5 f991 	bl	8000b4c <__aeabi_dcmpun>
 800b82a:	b990      	cbnz	r0, 800b852 <sqrt+0x4a>
 800b82c:	2200      	movs	r2, #0
 800b82e:	2300      	movs	r3, #0
 800b830:	4620      	mov	r0, r4
 800b832:	4629      	mov	r1, r5
 800b834:	f7f5 f962 	bl	8000afc <__aeabi_dcmplt>
 800b838:	b158      	cbz	r0, 800b852 <sqrt+0x4a>
 800b83a:	f7fe fed3 	bl	800a5e4 <__errno>
 800b83e:	2321      	movs	r3, #33	; 0x21
 800b840:	6003      	str	r3, [r0, #0]
 800b842:	2200      	movs	r2, #0
 800b844:	2300      	movs	r3, #0
 800b846:	4610      	mov	r0, r2
 800b848:	4619      	mov	r1, r3
 800b84a:	f7f5 f80f 	bl	800086c <__aeabi_ddiv>
 800b84e:	ec41 0b18 	vmov	d8, r0, r1
 800b852:	eeb0 0a48 	vmov.f32	s0, s16
 800b856:	eef0 0a68 	vmov.f32	s1, s17
 800b85a:	ecbd 8b02 	vpop	{d8}
 800b85e:	bd38      	pop	{r3, r4, r5, pc}

0800b860 <__ieee754_pow>:
 800b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	ed2d 8b06 	vpush	{d8-d10}
 800b868:	b089      	sub	sp, #36	; 0x24
 800b86a:	ed8d 1b00 	vstr	d1, [sp]
 800b86e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b872:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b876:	ea58 0102 	orrs.w	r1, r8, r2
 800b87a:	ec57 6b10 	vmov	r6, r7, d0
 800b87e:	d115      	bne.n	800b8ac <__ieee754_pow+0x4c>
 800b880:	19b3      	adds	r3, r6, r6
 800b882:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b886:	4152      	adcs	r2, r2
 800b888:	4299      	cmp	r1, r3
 800b88a:	4b89      	ldr	r3, [pc, #548]	; (800bab0 <__ieee754_pow+0x250>)
 800b88c:	4193      	sbcs	r3, r2
 800b88e:	f080 84d2 	bcs.w	800c236 <__ieee754_pow+0x9d6>
 800b892:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b896:	4630      	mov	r0, r6
 800b898:	4639      	mov	r1, r7
 800b89a:	f7f4 fd07 	bl	80002ac <__adddf3>
 800b89e:	ec41 0b10 	vmov	d0, r0, r1
 800b8a2:	b009      	add	sp, #36	; 0x24
 800b8a4:	ecbd 8b06 	vpop	{d8-d10}
 800b8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ac:	4b81      	ldr	r3, [pc, #516]	; (800bab4 <__ieee754_pow+0x254>)
 800b8ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b8b2:	429c      	cmp	r4, r3
 800b8b4:	ee10 aa10 	vmov	sl, s0
 800b8b8:	463d      	mov	r5, r7
 800b8ba:	dc06      	bgt.n	800b8ca <__ieee754_pow+0x6a>
 800b8bc:	d101      	bne.n	800b8c2 <__ieee754_pow+0x62>
 800b8be:	2e00      	cmp	r6, #0
 800b8c0:	d1e7      	bne.n	800b892 <__ieee754_pow+0x32>
 800b8c2:	4598      	cmp	r8, r3
 800b8c4:	dc01      	bgt.n	800b8ca <__ieee754_pow+0x6a>
 800b8c6:	d10f      	bne.n	800b8e8 <__ieee754_pow+0x88>
 800b8c8:	b172      	cbz	r2, 800b8e8 <__ieee754_pow+0x88>
 800b8ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b8ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b8d2:	ea55 050a 	orrs.w	r5, r5, sl
 800b8d6:	d1dc      	bne.n	800b892 <__ieee754_pow+0x32>
 800b8d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b8dc:	18db      	adds	r3, r3, r3
 800b8de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b8e2:	4152      	adcs	r2, r2
 800b8e4:	429d      	cmp	r5, r3
 800b8e6:	e7d0      	b.n	800b88a <__ieee754_pow+0x2a>
 800b8e8:	2d00      	cmp	r5, #0
 800b8ea:	da3b      	bge.n	800b964 <__ieee754_pow+0x104>
 800b8ec:	4b72      	ldr	r3, [pc, #456]	; (800bab8 <__ieee754_pow+0x258>)
 800b8ee:	4598      	cmp	r8, r3
 800b8f0:	dc51      	bgt.n	800b996 <__ieee754_pow+0x136>
 800b8f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b8f6:	4598      	cmp	r8, r3
 800b8f8:	f340 84ac 	ble.w	800c254 <__ieee754_pow+0x9f4>
 800b8fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b900:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b904:	2b14      	cmp	r3, #20
 800b906:	dd0f      	ble.n	800b928 <__ieee754_pow+0xc8>
 800b908:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b90c:	fa22 f103 	lsr.w	r1, r2, r3
 800b910:	fa01 f303 	lsl.w	r3, r1, r3
 800b914:	4293      	cmp	r3, r2
 800b916:	f040 849d 	bne.w	800c254 <__ieee754_pow+0x9f4>
 800b91a:	f001 0101 	and.w	r1, r1, #1
 800b91e:	f1c1 0302 	rsb	r3, r1, #2
 800b922:	9304      	str	r3, [sp, #16]
 800b924:	b182      	cbz	r2, 800b948 <__ieee754_pow+0xe8>
 800b926:	e05f      	b.n	800b9e8 <__ieee754_pow+0x188>
 800b928:	2a00      	cmp	r2, #0
 800b92a:	d15b      	bne.n	800b9e4 <__ieee754_pow+0x184>
 800b92c:	f1c3 0314 	rsb	r3, r3, #20
 800b930:	fa48 f103 	asr.w	r1, r8, r3
 800b934:	fa01 f303 	lsl.w	r3, r1, r3
 800b938:	4543      	cmp	r3, r8
 800b93a:	f040 8488 	bne.w	800c24e <__ieee754_pow+0x9ee>
 800b93e:	f001 0101 	and.w	r1, r1, #1
 800b942:	f1c1 0302 	rsb	r3, r1, #2
 800b946:	9304      	str	r3, [sp, #16]
 800b948:	4b5c      	ldr	r3, [pc, #368]	; (800babc <__ieee754_pow+0x25c>)
 800b94a:	4598      	cmp	r8, r3
 800b94c:	d132      	bne.n	800b9b4 <__ieee754_pow+0x154>
 800b94e:	f1b9 0f00 	cmp.w	r9, #0
 800b952:	f280 8478 	bge.w	800c246 <__ieee754_pow+0x9e6>
 800b956:	4959      	ldr	r1, [pc, #356]	; (800babc <__ieee754_pow+0x25c>)
 800b958:	4632      	mov	r2, r6
 800b95a:	463b      	mov	r3, r7
 800b95c:	2000      	movs	r0, #0
 800b95e:	f7f4 ff85 	bl	800086c <__aeabi_ddiv>
 800b962:	e79c      	b.n	800b89e <__ieee754_pow+0x3e>
 800b964:	2300      	movs	r3, #0
 800b966:	9304      	str	r3, [sp, #16]
 800b968:	2a00      	cmp	r2, #0
 800b96a:	d13d      	bne.n	800b9e8 <__ieee754_pow+0x188>
 800b96c:	4b51      	ldr	r3, [pc, #324]	; (800bab4 <__ieee754_pow+0x254>)
 800b96e:	4598      	cmp	r8, r3
 800b970:	d1ea      	bne.n	800b948 <__ieee754_pow+0xe8>
 800b972:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b976:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b97a:	ea53 030a 	orrs.w	r3, r3, sl
 800b97e:	f000 845a 	beq.w	800c236 <__ieee754_pow+0x9d6>
 800b982:	4b4f      	ldr	r3, [pc, #316]	; (800bac0 <__ieee754_pow+0x260>)
 800b984:	429c      	cmp	r4, r3
 800b986:	dd08      	ble.n	800b99a <__ieee754_pow+0x13a>
 800b988:	f1b9 0f00 	cmp.w	r9, #0
 800b98c:	f2c0 8457 	blt.w	800c23e <__ieee754_pow+0x9de>
 800b990:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b994:	e783      	b.n	800b89e <__ieee754_pow+0x3e>
 800b996:	2302      	movs	r3, #2
 800b998:	e7e5      	b.n	800b966 <__ieee754_pow+0x106>
 800b99a:	f1b9 0f00 	cmp.w	r9, #0
 800b99e:	f04f 0000 	mov.w	r0, #0
 800b9a2:	f04f 0100 	mov.w	r1, #0
 800b9a6:	f6bf af7a 	bge.w	800b89e <__ieee754_pow+0x3e>
 800b9aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b9ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9b2:	e774      	b.n	800b89e <__ieee754_pow+0x3e>
 800b9b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b9b8:	d106      	bne.n	800b9c8 <__ieee754_pow+0x168>
 800b9ba:	4632      	mov	r2, r6
 800b9bc:	463b      	mov	r3, r7
 800b9be:	4630      	mov	r0, r6
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	f7f4 fe29 	bl	8000618 <__aeabi_dmul>
 800b9c6:	e76a      	b.n	800b89e <__ieee754_pow+0x3e>
 800b9c8:	4b3e      	ldr	r3, [pc, #248]	; (800bac4 <__ieee754_pow+0x264>)
 800b9ca:	4599      	cmp	r9, r3
 800b9cc:	d10c      	bne.n	800b9e8 <__ieee754_pow+0x188>
 800b9ce:	2d00      	cmp	r5, #0
 800b9d0:	db0a      	blt.n	800b9e8 <__ieee754_pow+0x188>
 800b9d2:	ec47 6b10 	vmov	d0, r6, r7
 800b9d6:	b009      	add	sp, #36	; 0x24
 800b9d8:	ecbd 8b06 	vpop	{d8-d10}
 800b9dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	f000 bc6c 	b.w	800c2bc <__ieee754_sqrt>
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	9304      	str	r3, [sp, #16]
 800b9e8:	ec47 6b10 	vmov	d0, r6, r7
 800b9ec:	f000 fd48 	bl	800c480 <fabs>
 800b9f0:	ec51 0b10 	vmov	r0, r1, d0
 800b9f4:	f1ba 0f00 	cmp.w	sl, #0
 800b9f8:	d129      	bne.n	800ba4e <__ieee754_pow+0x1ee>
 800b9fa:	b124      	cbz	r4, 800ba06 <__ieee754_pow+0x1a6>
 800b9fc:	4b2f      	ldr	r3, [pc, #188]	; (800babc <__ieee754_pow+0x25c>)
 800b9fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d123      	bne.n	800ba4e <__ieee754_pow+0x1ee>
 800ba06:	f1b9 0f00 	cmp.w	r9, #0
 800ba0a:	da05      	bge.n	800ba18 <__ieee754_pow+0x1b8>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	2000      	movs	r0, #0
 800ba12:	492a      	ldr	r1, [pc, #168]	; (800babc <__ieee754_pow+0x25c>)
 800ba14:	f7f4 ff2a 	bl	800086c <__aeabi_ddiv>
 800ba18:	2d00      	cmp	r5, #0
 800ba1a:	f6bf af40 	bge.w	800b89e <__ieee754_pow+0x3e>
 800ba1e:	9b04      	ldr	r3, [sp, #16]
 800ba20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ba24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ba28:	4323      	orrs	r3, r4
 800ba2a:	d108      	bne.n	800ba3e <__ieee754_pow+0x1de>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4610      	mov	r0, r2
 800ba32:	4619      	mov	r1, r3
 800ba34:	f7f4 fc38 	bl	80002a8 <__aeabi_dsub>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	e78f      	b.n	800b95e <__ieee754_pow+0xfe>
 800ba3e:	9b04      	ldr	r3, [sp, #16]
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	f47f af2c 	bne.w	800b89e <__ieee754_pow+0x3e>
 800ba46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	e727      	b.n	800b89e <__ieee754_pow+0x3e>
 800ba4e:	0feb      	lsrs	r3, r5, #31
 800ba50:	3b01      	subs	r3, #1
 800ba52:	9306      	str	r3, [sp, #24]
 800ba54:	9a06      	ldr	r2, [sp, #24]
 800ba56:	9b04      	ldr	r3, [sp, #16]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	d102      	bne.n	800ba62 <__ieee754_pow+0x202>
 800ba5c:	4632      	mov	r2, r6
 800ba5e:	463b      	mov	r3, r7
 800ba60:	e7e6      	b.n	800ba30 <__ieee754_pow+0x1d0>
 800ba62:	4b19      	ldr	r3, [pc, #100]	; (800bac8 <__ieee754_pow+0x268>)
 800ba64:	4598      	cmp	r8, r3
 800ba66:	f340 80fb 	ble.w	800bc60 <__ieee754_pow+0x400>
 800ba6a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ba6e:	4598      	cmp	r8, r3
 800ba70:	4b13      	ldr	r3, [pc, #76]	; (800bac0 <__ieee754_pow+0x260>)
 800ba72:	dd0c      	ble.n	800ba8e <__ieee754_pow+0x22e>
 800ba74:	429c      	cmp	r4, r3
 800ba76:	dc0f      	bgt.n	800ba98 <__ieee754_pow+0x238>
 800ba78:	f1b9 0f00 	cmp.w	r9, #0
 800ba7c:	da0f      	bge.n	800ba9e <__ieee754_pow+0x23e>
 800ba7e:	2000      	movs	r0, #0
 800ba80:	b009      	add	sp, #36	; 0x24
 800ba82:	ecbd 8b06 	vpop	{d8-d10}
 800ba86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba8a:	f000 bcf0 	b.w	800c46e <__math_oflow>
 800ba8e:	429c      	cmp	r4, r3
 800ba90:	dbf2      	blt.n	800ba78 <__ieee754_pow+0x218>
 800ba92:	4b0a      	ldr	r3, [pc, #40]	; (800babc <__ieee754_pow+0x25c>)
 800ba94:	429c      	cmp	r4, r3
 800ba96:	dd19      	ble.n	800bacc <__ieee754_pow+0x26c>
 800ba98:	f1b9 0f00 	cmp.w	r9, #0
 800ba9c:	dcef      	bgt.n	800ba7e <__ieee754_pow+0x21e>
 800ba9e:	2000      	movs	r0, #0
 800baa0:	b009      	add	sp, #36	; 0x24
 800baa2:	ecbd 8b06 	vpop	{d8-d10}
 800baa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baaa:	f000 bcd7 	b.w	800c45c <__math_uflow>
 800baae:	bf00      	nop
 800bab0:	fff00000 	.word	0xfff00000
 800bab4:	7ff00000 	.word	0x7ff00000
 800bab8:	433fffff 	.word	0x433fffff
 800babc:	3ff00000 	.word	0x3ff00000
 800bac0:	3fefffff 	.word	0x3fefffff
 800bac4:	3fe00000 	.word	0x3fe00000
 800bac8:	41e00000 	.word	0x41e00000
 800bacc:	4b60      	ldr	r3, [pc, #384]	; (800bc50 <__ieee754_pow+0x3f0>)
 800bace:	2200      	movs	r2, #0
 800bad0:	f7f4 fbea 	bl	80002a8 <__aeabi_dsub>
 800bad4:	a354      	add	r3, pc, #336	; (adr r3, 800bc28 <__ieee754_pow+0x3c8>)
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	4604      	mov	r4, r0
 800badc:	460d      	mov	r5, r1
 800bade:	f7f4 fd9b 	bl	8000618 <__aeabi_dmul>
 800bae2:	a353      	add	r3, pc, #332	; (adr r3, 800bc30 <__ieee754_pow+0x3d0>)
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	4606      	mov	r6, r0
 800baea:	460f      	mov	r7, r1
 800baec:	4620      	mov	r0, r4
 800baee:	4629      	mov	r1, r5
 800baf0:	f7f4 fd92 	bl	8000618 <__aeabi_dmul>
 800baf4:	4b57      	ldr	r3, [pc, #348]	; (800bc54 <__ieee754_pow+0x3f4>)
 800baf6:	4682      	mov	sl, r0
 800baf8:	468b      	mov	fp, r1
 800bafa:	2200      	movs	r2, #0
 800bafc:	4620      	mov	r0, r4
 800bafe:	4629      	mov	r1, r5
 800bb00:	f7f4 fd8a 	bl	8000618 <__aeabi_dmul>
 800bb04:	4602      	mov	r2, r0
 800bb06:	460b      	mov	r3, r1
 800bb08:	a14b      	add	r1, pc, #300	; (adr r1, 800bc38 <__ieee754_pow+0x3d8>)
 800bb0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb0e:	f7f4 fbcb 	bl	80002a8 <__aeabi_dsub>
 800bb12:	4622      	mov	r2, r4
 800bb14:	462b      	mov	r3, r5
 800bb16:	f7f4 fd7f 	bl	8000618 <__aeabi_dmul>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	2000      	movs	r0, #0
 800bb20:	494d      	ldr	r1, [pc, #308]	; (800bc58 <__ieee754_pow+0x3f8>)
 800bb22:	f7f4 fbc1 	bl	80002a8 <__aeabi_dsub>
 800bb26:	4622      	mov	r2, r4
 800bb28:	4680      	mov	r8, r0
 800bb2a:	4689      	mov	r9, r1
 800bb2c:	462b      	mov	r3, r5
 800bb2e:	4620      	mov	r0, r4
 800bb30:	4629      	mov	r1, r5
 800bb32:	f7f4 fd71 	bl	8000618 <__aeabi_dmul>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	4640      	mov	r0, r8
 800bb3c:	4649      	mov	r1, r9
 800bb3e:	f7f4 fd6b 	bl	8000618 <__aeabi_dmul>
 800bb42:	a33f      	add	r3, pc, #252	; (adr r3, 800bc40 <__ieee754_pow+0x3e0>)
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f7f4 fd66 	bl	8000618 <__aeabi_dmul>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4650      	mov	r0, sl
 800bb52:	4659      	mov	r1, fp
 800bb54:	f7f4 fba8 	bl	80002a8 <__aeabi_dsub>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4680      	mov	r8, r0
 800bb5e:	4689      	mov	r9, r1
 800bb60:	4630      	mov	r0, r6
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f4 fba2 	bl	80002ac <__adddf3>
 800bb68:	2000      	movs	r0, #0
 800bb6a:	4632      	mov	r2, r6
 800bb6c:	463b      	mov	r3, r7
 800bb6e:	4604      	mov	r4, r0
 800bb70:	460d      	mov	r5, r1
 800bb72:	f7f4 fb99 	bl	80002a8 <__aeabi_dsub>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4640      	mov	r0, r8
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	f7f4 fb93 	bl	80002a8 <__aeabi_dsub>
 800bb82:	9b04      	ldr	r3, [sp, #16]
 800bb84:	9a06      	ldr	r2, [sp, #24]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	4682      	mov	sl, r0
 800bb8c:	468b      	mov	fp, r1
 800bb8e:	f040 81e7 	bne.w	800bf60 <__ieee754_pow+0x700>
 800bb92:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bc48 <__ieee754_pow+0x3e8>
 800bb96:	eeb0 8a47 	vmov.f32	s16, s14
 800bb9a:	eef0 8a67 	vmov.f32	s17, s15
 800bb9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bba2:	2600      	movs	r6, #0
 800bba4:	4632      	mov	r2, r6
 800bba6:	463b      	mov	r3, r7
 800bba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbac:	f7f4 fb7c 	bl	80002a8 <__aeabi_dsub>
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	462b      	mov	r3, r5
 800bbb4:	f7f4 fd30 	bl	8000618 <__aeabi_dmul>
 800bbb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbbc:	4680      	mov	r8, r0
 800bbbe:	4689      	mov	r9, r1
 800bbc0:	4650      	mov	r0, sl
 800bbc2:	4659      	mov	r1, fp
 800bbc4:	f7f4 fd28 	bl	8000618 <__aeabi_dmul>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4640      	mov	r0, r8
 800bbce:	4649      	mov	r1, r9
 800bbd0:	f7f4 fb6c 	bl	80002ac <__adddf3>
 800bbd4:	4632      	mov	r2, r6
 800bbd6:	463b      	mov	r3, r7
 800bbd8:	4680      	mov	r8, r0
 800bbda:	4689      	mov	r9, r1
 800bbdc:	4620      	mov	r0, r4
 800bbde:	4629      	mov	r1, r5
 800bbe0:	f7f4 fd1a 	bl	8000618 <__aeabi_dmul>
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	460d      	mov	r5, r1
 800bbea:	4602      	mov	r2, r0
 800bbec:	4649      	mov	r1, r9
 800bbee:	4640      	mov	r0, r8
 800bbf0:	f7f4 fb5c 	bl	80002ac <__adddf3>
 800bbf4:	4b19      	ldr	r3, [pc, #100]	; (800bc5c <__ieee754_pow+0x3fc>)
 800bbf6:	4299      	cmp	r1, r3
 800bbf8:	ec45 4b19 	vmov	d9, r4, r5
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	460f      	mov	r7, r1
 800bc00:	468b      	mov	fp, r1
 800bc02:	f340 82f1 	ble.w	800c1e8 <__ieee754_pow+0x988>
 800bc06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bc0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bc0e:	4303      	orrs	r3, r0
 800bc10:	f000 81e4 	beq.w	800bfdc <__ieee754_pow+0x77c>
 800bc14:	ec51 0b18 	vmov	r0, r1, d8
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f7f4 ff6e 	bl	8000afc <__aeabi_dcmplt>
 800bc20:	3800      	subs	r0, #0
 800bc22:	bf18      	it	ne
 800bc24:	2001      	movne	r0, #1
 800bc26:	e72b      	b.n	800ba80 <__ieee754_pow+0x220>
 800bc28:	60000000 	.word	0x60000000
 800bc2c:	3ff71547 	.word	0x3ff71547
 800bc30:	f85ddf44 	.word	0xf85ddf44
 800bc34:	3e54ae0b 	.word	0x3e54ae0b
 800bc38:	55555555 	.word	0x55555555
 800bc3c:	3fd55555 	.word	0x3fd55555
 800bc40:	652b82fe 	.word	0x652b82fe
 800bc44:	3ff71547 	.word	0x3ff71547
 800bc48:	00000000 	.word	0x00000000
 800bc4c:	bff00000 	.word	0xbff00000
 800bc50:	3ff00000 	.word	0x3ff00000
 800bc54:	3fd00000 	.word	0x3fd00000
 800bc58:	3fe00000 	.word	0x3fe00000
 800bc5c:	408fffff 	.word	0x408fffff
 800bc60:	4bd5      	ldr	r3, [pc, #852]	; (800bfb8 <__ieee754_pow+0x758>)
 800bc62:	402b      	ands	r3, r5
 800bc64:	2200      	movs	r2, #0
 800bc66:	b92b      	cbnz	r3, 800bc74 <__ieee754_pow+0x414>
 800bc68:	4bd4      	ldr	r3, [pc, #848]	; (800bfbc <__ieee754_pow+0x75c>)
 800bc6a:	f7f4 fcd5 	bl	8000618 <__aeabi_dmul>
 800bc6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bc72:	460c      	mov	r4, r1
 800bc74:	1523      	asrs	r3, r4, #20
 800bc76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc7a:	4413      	add	r3, r2
 800bc7c:	9305      	str	r3, [sp, #20]
 800bc7e:	4bd0      	ldr	r3, [pc, #832]	; (800bfc0 <__ieee754_pow+0x760>)
 800bc80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bc88:	429c      	cmp	r4, r3
 800bc8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc8e:	dd08      	ble.n	800bca2 <__ieee754_pow+0x442>
 800bc90:	4bcc      	ldr	r3, [pc, #816]	; (800bfc4 <__ieee754_pow+0x764>)
 800bc92:	429c      	cmp	r4, r3
 800bc94:	f340 8162 	ble.w	800bf5c <__ieee754_pow+0x6fc>
 800bc98:	9b05      	ldr	r3, [sp, #20]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	9305      	str	r3, [sp, #20]
 800bc9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bca2:	2400      	movs	r4, #0
 800bca4:	00e3      	lsls	r3, r4, #3
 800bca6:	9307      	str	r3, [sp, #28]
 800bca8:	4bc7      	ldr	r3, [pc, #796]	; (800bfc8 <__ieee754_pow+0x768>)
 800bcaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcae:	ed93 7b00 	vldr	d7, [r3]
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	ec53 2b17 	vmov	r2, r3, d7
 800bcb8:	eeb0 9a47 	vmov.f32	s18, s14
 800bcbc:	eef0 9a67 	vmov.f32	s19, s15
 800bcc0:	4682      	mov	sl, r0
 800bcc2:	f7f4 faf1 	bl	80002a8 <__aeabi_dsub>
 800bcc6:	4652      	mov	r2, sl
 800bcc8:	4606      	mov	r6, r0
 800bcca:	460f      	mov	r7, r1
 800bccc:	462b      	mov	r3, r5
 800bcce:	ec51 0b19 	vmov	r0, r1, d9
 800bcd2:	f7f4 faeb 	bl	80002ac <__adddf3>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	2000      	movs	r0, #0
 800bcdc:	49bb      	ldr	r1, [pc, #748]	; (800bfcc <__ieee754_pow+0x76c>)
 800bcde:	f7f4 fdc5 	bl	800086c <__aeabi_ddiv>
 800bce2:	ec41 0b1a 	vmov	d10, r0, r1
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	4630      	mov	r0, r6
 800bcec:	4639      	mov	r1, r7
 800bcee:	f7f4 fc93 	bl	8000618 <__aeabi_dmul>
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcf8:	9302      	str	r3, [sp, #8]
 800bcfa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bcfe:	46ab      	mov	fp, r5
 800bd00:	106d      	asrs	r5, r5, #1
 800bd02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bd06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bd0a:	ec41 0b18 	vmov	d8, r0, r1
 800bd0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bd12:	2200      	movs	r2, #0
 800bd14:	4640      	mov	r0, r8
 800bd16:	4649      	mov	r1, r9
 800bd18:	4614      	mov	r4, r2
 800bd1a:	461d      	mov	r5, r3
 800bd1c:	f7f4 fc7c 	bl	8000618 <__aeabi_dmul>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	4630      	mov	r0, r6
 800bd26:	4639      	mov	r1, r7
 800bd28:	f7f4 fabe 	bl	80002a8 <__aeabi_dsub>
 800bd2c:	ec53 2b19 	vmov	r2, r3, d9
 800bd30:	4606      	mov	r6, r0
 800bd32:	460f      	mov	r7, r1
 800bd34:	4620      	mov	r0, r4
 800bd36:	4629      	mov	r1, r5
 800bd38:	f7f4 fab6 	bl	80002a8 <__aeabi_dsub>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4650      	mov	r0, sl
 800bd42:	4659      	mov	r1, fp
 800bd44:	f7f4 fab0 	bl	80002a8 <__aeabi_dsub>
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	f7f4 fc64 	bl	8000618 <__aeabi_dmul>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4630      	mov	r0, r6
 800bd56:	4639      	mov	r1, r7
 800bd58:	f7f4 faa6 	bl	80002a8 <__aeabi_dsub>
 800bd5c:	ec53 2b1a 	vmov	r2, r3, d10
 800bd60:	f7f4 fc5a 	bl	8000618 <__aeabi_dmul>
 800bd64:	ec53 2b18 	vmov	r2, r3, d8
 800bd68:	ec41 0b19 	vmov	d9, r0, r1
 800bd6c:	ec51 0b18 	vmov	r0, r1, d8
 800bd70:	f7f4 fc52 	bl	8000618 <__aeabi_dmul>
 800bd74:	a37c      	add	r3, pc, #496	; (adr r3, 800bf68 <__ieee754_pow+0x708>)
 800bd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	460d      	mov	r5, r1
 800bd7e:	f7f4 fc4b 	bl	8000618 <__aeabi_dmul>
 800bd82:	a37b      	add	r3, pc, #492	; (adr r3, 800bf70 <__ieee754_pow+0x710>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	f7f4 fa90 	bl	80002ac <__adddf3>
 800bd8c:	4622      	mov	r2, r4
 800bd8e:	462b      	mov	r3, r5
 800bd90:	f7f4 fc42 	bl	8000618 <__aeabi_dmul>
 800bd94:	a378      	add	r3, pc, #480	; (adr r3, 800bf78 <__ieee754_pow+0x718>)
 800bd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9a:	f7f4 fa87 	bl	80002ac <__adddf3>
 800bd9e:	4622      	mov	r2, r4
 800bda0:	462b      	mov	r3, r5
 800bda2:	f7f4 fc39 	bl	8000618 <__aeabi_dmul>
 800bda6:	a376      	add	r3, pc, #472	; (adr r3, 800bf80 <__ieee754_pow+0x720>)
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	f7f4 fa7e 	bl	80002ac <__adddf3>
 800bdb0:	4622      	mov	r2, r4
 800bdb2:	462b      	mov	r3, r5
 800bdb4:	f7f4 fc30 	bl	8000618 <__aeabi_dmul>
 800bdb8:	a373      	add	r3, pc, #460	; (adr r3, 800bf88 <__ieee754_pow+0x728>)
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	f7f4 fa75 	bl	80002ac <__adddf3>
 800bdc2:	4622      	mov	r2, r4
 800bdc4:	462b      	mov	r3, r5
 800bdc6:	f7f4 fc27 	bl	8000618 <__aeabi_dmul>
 800bdca:	a371      	add	r3, pc, #452	; (adr r3, 800bf90 <__ieee754_pow+0x730>)
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	f7f4 fa6c 	bl	80002ac <__adddf3>
 800bdd4:	4622      	mov	r2, r4
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	460f      	mov	r7, r1
 800bdda:	462b      	mov	r3, r5
 800bddc:	4620      	mov	r0, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7f4 fc1a 	bl	8000618 <__aeabi_dmul>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4630      	mov	r0, r6
 800bdea:	4639      	mov	r1, r7
 800bdec:	f7f4 fc14 	bl	8000618 <__aeabi_dmul>
 800bdf0:	4642      	mov	r2, r8
 800bdf2:	4604      	mov	r4, r0
 800bdf4:	460d      	mov	r5, r1
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	ec51 0b18 	vmov	r0, r1, d8
 800bdfc:	f7f4 fa56 	bl	80002ac <__adddf3>
 800be00:	ec53 2b19 	vmov	r2, r3, d9
 800be04:	f7f4 fc08 	bl	8000618 <__aeabi_dmul>
 800be08:	4622      	mov	r2, r4
 800be0a:	462b      	mov	r3, r5
 800be0c:	f7f4 fa4e 	bl	80002ac <__adddf3>
 800be10:	4642      	mov	r2, r8
 800be12:	4682      	mov	sl, r0
 800be14:	468b      	mov	fp, r1
 800be16:	464b      	mov	r3, r9
 800be18:	4640      	mov	r0, r8
 800be1a:	4649      	mov	r1, r9
 800be1c:	f7f4 fbfc 	bl	8000618 <__aeabi_dmul>
 800be20:	4b6b      	ldr	r3, [pc, #428]	; (800bfd0 <__ieee754_pow+0x770>)
 800be22:	2200      	movs	r2, #0
 800be24:	4606      	mov	r6, r0
 800be26:	460f      	mov	r7, r1
 800be28:	f7f4 fa40 	bl	80002ac <__adddf3>
 800be2c:	4652      	mov	r2, sl
 800be2e:	465b      	mov	r3, fp
 800be30:	f7f4 fa3c 	bl	80002ac <__adddf3>
 800be34:	2000      	movs	r0, #0
 800be36:	4604      	mov	r4, r0
 800be38:	460d      	mov	r5, r1
 800be3a:	4602      	mov	r2, r0
 800be3c:	460b      	mov	r3, r1
 800be3e:	4640      	mov	r0, r8
 800be40:	4649      	mov	r1, r9
 800be42:	f7f4 fbe9 	bl	8000618 <__aeabi_dmul>
 800be46:	4b62      	ldr	r3, [pc, #392]	; (800bfd0 <__ieee754_pow+0x770>)
 800be48:	4680      	mov	r8, r0
 800be4a:	4689      	mov	r9, r1
 800be4c:	2200      	movs	r2, #0
 800be4e:	4620      	mov	r0, r4
 800be50:	4629      	mov	r1, r5
 800be52:	f7f4 fa29 	bl	80002a8 <__aeabi_dsub>
 800be56:	4632      	mov	r2, r6
 800be58:	463b      	mov	r3, r7
 800be5a:	f7f4 fa25 	bl	80002a8 <__aeabi_dsub>
 800be5e:	4602      	mov	r2, r0
 800be60:	460b      	mov	r3, r1
 800be62:	4650      	mov	r0, sl
 800be64:	4659      	mov	r1, fp
 800be66:	f7f4 fa1f 	bl	80002a8 <__aeabi_dsub>
 800be6a:	ec53 2b18 	vmov	r2, r3, d8
 800be6e:	f7f4 fbd3 	bl	8000618 <__aeabi_dmul>
 800be72:	4622      	mov	r2, r4
 800be74:	4606      	mov	r6, r0
 800be76:	460f      	mov	r7, r1
 800be78:	462b      	mov	r3, r5
 800be7a:	ec51 0b19 	vmov	r0, r1, d9
 800be7e:	f7f4 fbcb 	bl	8000618 <__aeabi_dmul>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	4630      	mov	r0, r6
 800be88:	4639      	mov	r1, r7
 800be8a:	f7f4 fa0f 	bl	80002ac <__adddf3>
 800be8e:	4606      	mov	r6, r0
 800be90:	460f      	mov	r7, r1
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	4640      	mov	r0, r8
 800be98:	4649      	mov	r1, r9
 800be9a:	f7f4 fa07 	bl	80002ac <__adddf3>
 800be9e:	a33e      	add	r3, pc, #248	; (adr r3, 800bf98 <__ieee754_pow+0x738>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	2000      	movs	r0, #0
 800bea6:	4604      	mov	r4, r0
 800bea8:	460d      	mov	r5, r1
 800beaa:	f7f4 fbb5 	bl	8000618 <__aeabi_dmul>
 800beae:	4642      	mov	r2, r8
 800beb0:	ec41 0b18 	vmov	d8, r0, r1
 800beb4:	464b      	mov	r3, r9
 800beb6:	4620      	mov	r0, r4
 800beb8:	4629      	mov	r1, r5
 800beba:	f7f4 f9f5 	bl	80002a8 <__aeabi_dsub>
 800bebe:	4602      	mov	r2, r0
 800bec0:	460b      	mov	r3, r1
 800bec2:	4630      	mov	r0, r6
 800bec4:	4639      	mov	r1, r7
 800bec6:	f7f4 f9ef 	bl	80002a8 <__aeabi_dsub>
 800beca:	a335      	add	r3, pc, #212	; (adr r3, 800bfa0 <__ieee754_pow+0x740>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	f7f4 fba2 	bl	8000618 <__aeabi_dmul>
 800bed4:	a334      	add	r3, pc, #208	; (adr r3, 800bfa8 <__ieee754_pow+0x748>)
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	4606      	mov	r6, r0
 800bedc:	460f      	mov	r7, r1
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 fb99 	bl	8000618 <__aeabi_dmul>
 800bee6:	4602      	mov	r2, r0
 800bee8:	460b      	mov	r3, r1
 800beea:	4630      	mov	r0, r6
 800beec:	4639      	mov	r1, r7
 800beee:	f7f4 f9dd 	bl	80002ac <__adddf3>
 800bef2:	9a07      	ldr	r2, [sp, #28]
 800bef4:	4b37      	ldr	r3, [pc, #220]	; (800bfd4 <__ieee754_pow+0x774>)
 800bef6:	4413      	add	r3, r2
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	f7f4 f9d6 	bl	80002ac <__adddf3>
 800bf00:	4682      	mov	sl, r0
 800bf02:	9805      	ldr	r0, [sp, #20]
 800bf04:	468b      	mov	fp, r1
 800bf06:	f7f4 fb1d 	bl	8000544 <__aeabi_i2d>
 800bf0a:	9a07      	ldr	r2, [sp, #28]
 800bf0c:	4b32      	ldr	r3, [pc, #200]	; (800bfd8 <__ieee754_pow+0x778>)
 800bf0e:	4413      	add	r3, r2
 800bf10:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf14:	4606      	mov	r6, r0
 800bf16:	460f      	mov	r7, r1
 800bf18:	4652      	mov	r2, sl
 800bf1a:	465b      	mov	r3, fp
 800bf1c:	ec51 0b18 	vmov	r0, r1, d8
 800bf20:	f7f4 f9c4 	bl	80002ac <__adddf3>
 800bf24:	4642      	mov	r2, r8
 800bf26:	464b      	mov	r3, r9
 800bf28:	f7f4 f9c0 	bl	80002ac <__adddf3>
 800bf2c:	4632      	mov	r2, r6
 800bf2e:	463b      	mov	r3, r7
 800bf30:	f7f4 f9bc 	bl	80002ac <__adddf3>
 800bf34:	2000      	movs	r0, #0
 800bf36:	4632      	mov	r2, r6
 800bf38:	463b      	mov	r3, r7
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	460d      	mov	r5, r1
 800bf3e:	f7f4 f9b3 	bl	80002a8 <__aeabi_dsub>
 800bf42:	4642      	mov	r2, r8
 800bf44:	464b      	mov	r3, r9
 800bf46:	f7f4 f9af 	bl	80002a8 <__aeabi_dsub>
 800bf4a:	ec53 2b18 	vmov	r2, r3, d8
 800bf4e:	f7f4 f9ab 	bl	80002a8 <__aeabi_dsub>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4650      	mov	r0, sl
 800bf58:	4659      	mov	r1, fp
 800bf5a:	e610      	b.n	800bb7e <__ieee754_pow+0x31e>
 800bf5c:	2401      	movs	r4, #1
 800bf5e:	e6a1      	b.n	800bca4 <__ieee754_pow+0x444>
 800bf60:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bfb0 <__ieee754_pow+0x750>
 800bf64:	e617      	b.n	800bb96 <__ieee754_pow+0x336>
 800bf66:	bf00      	nop
 800bf68:	4a454eef 	.word	0x4a454eef
 800bf6c:	3fca7e28 	.word	0x3fca7e28
 800bf70:	93c9db65 	.word	0x93c9db65
 800bf74:	3fcd864a 	.word	0x3fcd864a
 800bf78:	a91d4101 	.word	0xa91d4101
 800bf7c:	3fd17460 	.word	0x3fd17460
 800bf80:	518f264d 	.word	0x518f264d
 800bf84:	3fd55555 	.word	0x3fd55555
 800bf88:	db6fabff 	.word	0xdb6fabff
 800bf8c:	3fdb6db6 	.word	0x3fdb6db6
 800bf90:	33333303 	.word	0x33333303
 800bf94:	3fe33333 	.word	0x3fe33333
 800bf98:	e0000000 	.word	0xe0000000
 800bf9c:	3feec709 	.word	0x3feec709
 800bfa0:	dc3a03fd 	.word	0xdc3a03fd
 800bfa4:	3feec709 	.word	0x3feec709
 800bfa8:	145b01f5 	.word	0x145b01f5
 800bfac:	be3e2fe0 	.word	0xbe3e2fe0
 800bfb0:	00000000 	.word	0x00000000
 800bfb4:	3ff00000 	.word	0x3ff00000
 800bfb8:	7ff00000 	.word	0x7ff00000
 800bfbc:	43400000 	.word	0x43400000
 800bfc0:	0003988e 	.word	0x0003988e
 800bfc4:	000bb679 	.word	0x000bb679
 800bfc8:	08016330 	.word	0x08016330
 800bfcc:	3ff00000 	.word	0x3ff00000
 800bfd0:	40080000 	.word	0x40080000
 800bfd4:	08016350 	.word	0x08016350
 800bfd8:	08016340 	.word	0x08016340
 800bfdc:	a3b5      	add	r3, pc, #724	; (adr r3, 800c2b4 <__ieee754_pow+0xa54>)
 800bfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe2:	4640      	mov	r0, r8
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	f7f4 f961 	bl	80002ac <__adddf3>
 800bfea:	4622      	mov	r2, r4
 800bfec:	ec41 0b1a 	vmov	d10, r0, r1
 800bff0:	462b      	mov	r3, r5
 800bff2:	4630      	mov	r0, r6
 800bff4:	4639      	mov	r1, r7
 800bff6:	f7f4 f957 	bl	80002a8 <__aeabi_dsub>
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	ec51 0b1a 	vmov	r0, r1, d10
 800c002:	f7f4 fd99 	bl	8000b38 <__aeabi_dcmpgt>
 800c006:	2800      	cmp	r0, #0
 800c008:	f47f ae04 	bne.w	800bc14 <__ieee754_pow+0x3b4>
 800c00c:	4aa4      	ldr	r2, [pc, #656]	; (800c2a0 <__ieee754_pow+0xa40>)
 800c00e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c012:	4293      	cmp	r3, r2
 800c014:	f340 8108 	ble.w	800c228 <__ieee754_pow+0x9c8>
 800c018:	151b      	asrs	r3, r3, #20
 800c01a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c01e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c022:	fa4a f303 	asr.w	r3, sl, r3
 800c026:	445b      	add	r3, fp
 800c028:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c02c:	4e9d      	ldr	r6, [pc, #628]	; (800c2a4 <__ieee754_pow+0xa44>)
 800c02e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c032:	4116      	asrs	r6, r2
 800c034:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c038:	2000      	movs	r0, #0
 800c03a:	ea23 0106 	bic.w	r1, r3, r6
 800c03e:	f1c2 0214 	rsb	r2, r2, #20
 800c042:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c046:	fa4a fa02 	asr.w	sl, sl, r2
 800c04a:	f1bb 0f00 	cmp.w	fp, #0
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4620      	mov	r0, r4
 800c054:	4629      	mov	r1, r5
 800c056:	bfb8      	it	lt
 800c058:	f1ca 0a00 	rsblt	sl, sl, #0
 800c05c:	f7f4 f924 	bl	80002a8 <__aeabi_dsub>
 800c060:	ec41 0b19 	vmov	d9, r0, r1
 800c064:	4642      	mov	r2, r8
 800c066:	464b      	mov	r3, r9
 800c068:	ec51 0b19 	vmov	r0, r1, d9
 800c06c:	f7f4 f91e 	bl	80002ac <__adddf3>
 800c070:	a37b      	add	r3, pc, #492	; (adr r3, 800c260 <__ieee754_pow+0xa00>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	2000      	movs	r0, #0
 800c078:	4604      	mov	r4, r0
 800c07a:	460d      	mov	r5, r1
 800c07c:	f7f4 facc 	bl	8000618 <__aeabi_dmul>
 800c080:	ec53 2b19 	vmov	r2, r3, d9
 800c084:	4606      	mov	r6, r0
 800c086:	460f      	mov	r7, r1
 800c088:	4620      	mov	r0, r4
 800c08a:	4629      	mov	r1, r5
 800c08c:	f7f4 f90c 	bl	80002a8 <__aeabi_dsub>
 800c090:	4602      	mov	r2, r0
 800c092:	460b      	mov	r3, r1
 800c094:	4640      	mov	r0, r8
 800c096:	4649      	mov	r1, r9
 800c098:	f7f4 f906 	bl	80002a8 <__aeabi_dsub>
 800c09c:	a372      	add	r3, pc, #456	; (adr r3, 800c268 <__ieee754_pow+0xa08>)
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f7f4 fab9 	bl	8000618 <__aeabi_dmul>
 800c0a6:	a372      	add	r3, pc, #456	; (adr r3, 800c270 <__ieee754_pow+0xa10>)
 800c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ac:	4680      	mov	r8, r0
 800c0ae:	4689      	mov	r9, r1
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	f7f4 fab0 	bl	8000618 <__aeabi_dmul>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4640      	mov	r0, r8
 800c0be:	4649      	mov	r1, r9
 800c0c0:	f7f4 f8f4 	bl	80002ac <__adddf3>
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	460d      	mov	r5, r1
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	4639      	mov	r1, r7
 800c0d0:	f7f4 f8ec 	bl	80002ac <__adddf3>
 800c0d4:	4632      	mov	r2, r6
 800c0d6:	463b      	mov	r3, r7
 800c0d8:	4680      	mov	r8, r0
 800c0da:	4689      	mov	r9, r1
 800c0dc:	f7f4 f8e4 	bl	80002a8 <__aeabi_dsub>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	f7f4 f8de 	bl	80002a8 <__aeabi_dsub>
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	460f      	mov	r7, r1
 800c0f2:	464b      	mov	r3, r9
 800c0f4:	4640      	mov	r0, r8
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	f7f4 fa8e 	bl	8000618 <__aeabi_dmul>
 800c0fc:	a35e      	add	r3, pc, #376	; (adr r3, 800c278 <__ieee754_pow+0xa18>)
 800c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c102:	4604      	mov	r4, r0
 800c104:	460d      	mov	r5, r1
 800c106:	f7f4 fa87 	bl	8000618 <__aeabi_dmul>
 800c10a:	a35d      	add	r3, pc, #372	; (adr r3, 800c280 <__ieee754_pow+0xa20>)
 800c10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c110:	f7f4 f8ca 	bl	80002a8 <__aeabi_dsub>
 800c114:	4622      	mov	r2, r4
 800c116:	462b      	mov	r3, r5
 800c118:	f7f4 fa7e 	bl	8000618 <__aeabi_dmul>
 800c11c:	a35a      	add	r3, pc, #360	; (adr r3, 800c288 <__ieee754_pow+0xa28>)
 800c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c122:	f7f4 f8c3 	bl	80002ac <__adddf3>
 800c126:	4622      	mov	r2, r4
 800c128:	462b      	mov	r3, r5
 800c12a:	f7f4 fa75 	bl	8000618 <__aeabi_dmul>
 800c12e:	a358      	add	r3, pc, #352	; (adr r3, 800c290 <__ieee754_pow+0xa30>)
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	f7f4 f8b8 	bl	80002a8 <__aeabi_dsub>
 800c138:	4622      	mov	r2, r4
 800c13a:	462b      	mov	r3, r5
 800c13c:	f7f4 fa6c 	bl	8000618 <__aeabi_dmul>
 800c140:	a355      	add	r3, pc, #340	; (adr r3, 800c298 <__ieee754_pow+0xa38>)
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	f7f4 f8b1 	bl	80002ac <__adddf3>
 800c14a:	4622      	mov	r2, r4
 800c14c:	462b      	mov	r3, r5
 800c14e:	f7f4 fa63 	bl	8000618 <__aeabi_dmul>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	4640      	mov	r0, r8
 800c158:	4649      	mov	r1, r9
 800c15a:	f7f4 f8a5 	bl	80002a8 <__aeabi_dsub>
 800c15e:	4604      	mov	r4, r0
 800c160:	460d      	mov	r5, r1
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	4640      	mov	r0, r8
 800c168:	4649      	mov	r1, r9
 800c16a:	f7f4 fa55 	bl	8000618 <__aeabi_dmul>
 800c16e:	2200      	movs	r2, #0
 800c170:	ec41 0b19 	vmov	d9, r0, r1
 800c174:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c178:	4620      	mov	r0, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	f7f4 f894 	bl	80002a8 <__aeabi_dsub>
 800c180:	4602      	mov	r2, r0
 800c182:	460b      	mov	r3, r1
 800c184:	ec51 0b19 	vmov	r0, r1, d9
 800c188:	f7f4 fb70 	bl	800086c <__aeabi_ddiv>
 800c18c:	4632      	mov	r2, r6
 800c18e:	4604      	mov	r4, r0
 800c190:	460d      	mov	r5, r1
 800c192:	463b      	mov	r3, r7
 800c194:	4640      	mov	r0, r8
 800c196:	4649      	mov	r1, r9
 800c198:	f7f4 fa3e 	bl	8000618 <__aeabi_dmul>
 800c19c:	4632      	mov	r2, r6
 800c19e:	463b      	mov	r3, r7
 800c1a0:	f7f4 f884 	bl	80002ac <__adddf3>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	f7f4 f87c 	bl	80002a8 <__aeabi_dsub>
 800c1b0:	4642      	mov	r2, r8
 800c1b2:	464b      	mov	r3, r9
 800c1b4:	f7f4 f878 	bl	80002a8 <__aeabi_dsub>
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	493a      	ldr	r1, [pc, #232]	; (800c2a8 <__ieee754_pow+0xa48>)
 800c1be:	2000      	movs	r0, #0
 800c1c0:	f7f4 f872 	bl	80002a8 <__aeabi_dsub>
 800c1c4:	ec41 0b10 	vmov	d0, r0, r1
 800c1c8:	ee10 3a90 	vmov	r3, s1
 800c1cc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c1d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1d4:	da2b      	bge.n	800c22e <__ieee754_pow+0x9ce>
 800c1d6:	4650      	mov	r0, sl
 800c1d8:	f000 f966 	bl	800c4a8 <scalbn>
 800c1dc:	ec51 0b10 	vmov	r0, r1, d0
 800c1e0:	ec53 2b18 	vmov	r2, r3, d8
 800c1e4:	f7ff bbed 	b.w	800b9c2 <__ieee754_pow+0x162>
 800c1e8:	4b30      	ldr	r3, [pc, #192]	; (800c2ac <__ieee754_pow+0xa4c>)
 800c1ea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c1ee:	429e      	cmp	r6, r3
 800c1f0:	f77f af0c 	ble.w	800c00c <__ieee754_pow+0x7ac>
 800c1f4:	4b2e      	ldr	r3, [pc, #184]	; (800c2b0 <__ieee754_pow+0xa50>)
 800c1f6:	440b      	add	r3, r1
 800c1f8:	4303      	orrs	r3, r0
 800c1fa:	d009      	beq.n	800c210 <__ieee754_pow+0x9b0>
 800c1fc:	ec51 0b18 	vmov	r0, r1, d8
 800c200:	2200      	movs	r2, #0
 800c202:	2300      	movs	r3, #0
 800c204:	f7f4 fc7a 	bl	8000afc <__aeabi_dcmplt>
 800c208:	3800      	subs	r0, #0
 800c20a:	bf18      	it	ne
 800c20c:	2001      	movne	r0, #1
 800c20e:	e447      	b.n	800baa0 <__ieee754_pow+0x240>
 800c210:	4622      	mov	r2, r4
 800c212:	462b      	mov	r3, r5
 800c214:	f7f4 f848 	bl	80002a8 <__aeabi_dsub>
 800c218:	4642      	mov	r2, r8
 800c21a:	464b      	mov	r3, r9
 800c21c:	f7f4 fc82 	bl	8000b24 <__aeabi_dcmpge>
 800c220:	2800      	cmp	r0, #0
 800c222:	f43f aef3 	beq.w	800c00c <__ieee754_pow+0x7ac>
 800c226:	e7e9      	b.n	800c1fc <__ieee754_pow+0x99c>
 800c228:	f04f 0a00 	mov.w	sl, #0
 800c22c:	e71a      	b.n	800c064 <__ieee754_pow+0x804>
 800c22e:	ec51 0b10 	vmov	r0, r1, d0
 800c232:	4619      	mov	r1, r3
 800c234:	e7d4      	b.n	800c1e0 <__ieee754_pow+0x980>
 800c236:	491c      	ldr	r1, [pc, #112]	; (800c2a8 <__ieee754_pow+0xa48>)
 800c238:	2000      	movs	r0, #0
 800c23a:	f7ff bb30 	b.w	800b89e <__ieee754_pow+0x3e>
 800c23e:	2000      	movs	r0, #0
 800c240:	2100      	movs	r1, #0
 800c242:	f7ff bb2c 	b.w	800b89e <__ieee754_pow+0x3e>
 800c246:	4630      	mov	r0, r6
 800c248:	4639      	mov	r1, r7
 800c24a:	f7ff bb28 	b.w	800b89e <__ieee754_pow+0x3e>
 800c24e:	9204      	str	r2, [sp, #16]
 800c250:	f7ff bb7a 	b.w	800b948 <__ieee754_pow+0xe8>
 800c254:	2300      	movs	r3, #0
 800c256:	f7ff bb64 	b.w	800b922 <__ieee754_pow+0xc2>
 800c25a:	bf00      	nop
 800c25c:	f3af 8000 	nop.w
 800c260:	00000000 	.word	0x00000000
 800c264:	3fe62e43 	.word	0x3fe62e43
 800c268:	fefa39ef 	.word	0xfefa39ef
 800c26c:	3fe62e42 	.word	0x3fe62e42
 800c270:	0ca86c39 	.word	0x0ca86c39
 800c274:	be205c61 	.word	0xbe205c61
 800c278:	72bea4d0 	.word	0x72bea4d0
 800c27c:	3e663769 	.word	0x3e663769
 800c280:	c5d26bf1 	.word	0xc5d26bf1
 800c284:	3ebbbd41 	.word	0x3ebbbd41
 800c288:	af25de2c 	.word	0xaf25de2c
 800c28c:	3f11566a 	.word	0x3f11566a
 800c290:	16bebd93 	.word	0x16bebd93
 800c294:	3f66c16c 	.word	0x3f66c16c
 800c298:	5555553e 	.word	0x5555553e
 800c29c:	3fc55555 	.word	0x3fc55555
 800c2a0:	3fe00000 	.word	0x3fe00000
 800c2a4:	000fffff 	.word	0x000fffff
 800c2a8:	3ff00000 	.word	0x3ff00000
 800c2ac:	4090cbff 	.word	0x4090cbff
 800c2b0:	3f6f3400 	.word	0x3f6f3400
 800c2b4:	652b82fe 	.word	0x652b82fe
 800c2b8:	3c971547 	.word	0x3c971547

0800c2bc <__ieee754_sqrt>:
 800c2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c0:	ec55 4b10 	vmov	r4, r5, d0
 800c2c4:	4e55      	ldr	r6, [pc, #340]	; (800c41c <__ieee754_sqrt+0x160>)
 800c2c6:	43ae      	bics	r6, r5
 800c2c8:	ee10 0a10 	vmov	r0, s0
 800c2cc:	ee10 3a10 	vmov	r3, s0
 800c2d0:	462a      	mov	r2, r5
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	d110      	bne.n	800c2f8 <__ieee754_sqrt+0x3c>
 800c2d6:	ee10 2a10 	vmov	r2, s0
 800c2da:	462b      	mov	r3, r5
 800c2dc:	f7f4 f99c 	bl	8000618 <__aeabi_dmul>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	f7f3 ffe0 	bl	80002ac <__adddf3>
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	460d      	mov	r5, r1
 800c2f0:	ec45 4b10 	vmov	d0, r4, r5
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f8:	2d00      	cmp	r5, #0
 800c2fa:	dc10      	bgt.n	800c31e <__ieee754_sqrt+0x62>
 800c2fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c300:	4330      	orrs	r0, r6
 800c302:	d0f5      	beq.n	800c2f0 <__ieee754_sqrt+0x34>
 800c304:	b15d      	cbz	r5, 800c31e <__ieee754_sqrt+0x62>
 800c306:	ee10 2a10 	vmov	r2, s0
 800c30a:	462b      	mov	r3, r5
 800c30c:	ee10 0a10 	vmov	r0, s0
 800c310:	f7f3 ffca 	bl	80002a8 <__aeabi_dsub>
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	f7f4 faa8 	bl	800086c <__aeabi_ddiv>
 800c31c:	e7e6      	b.n	800c2ec <__ieee754_sqrt+0x30>
 800c31e:	1512      	asrs	r2, r2, #20
 800c320:	d074      	beq.n	800c40c <__ieee754_sqrt+0x150>
 800c322:	07d4      	lsls	r4, r2, #31
 800c324:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c328:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c32c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c330:	bf5e      	ittt	pl
 800c332:	0fda      	lsrpl	r2, r3, #31
 800c334:	005b      	lslpl	r3, r3, #1
 800c336:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c33a:	2400      	movs	r4, #0
 800c33c:	0fda      	lsrs	r2, r3, #31
 800c33e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c342:	107f      	asrs	r7, r7, #1
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	2516      	movs	r5, #22
 800c348:	4620      	mov	r0, r4
 800c34a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c34e:	1886      	adds	r6, r0, r2
 800c350:	428e      	cmp	r6, r1
 800c352:	bfde      	ittt	le
 800c354:	1b89      	suble	r1, r1, r6
 800c356:	18b0      	addle	r0, r6, r2
 800c358:	18a4      	addle	r4, r4, r2
 800c35a:	0049      	lsls	r1, r1, #1
 800c35c:	3d01      	subs	r5, #1
 800c35e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c362:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c366:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c36a:	d1f0      	bne.n	800c34e <__ieee754_sqrt+0x92>
 800c36c:	462a      	mov	r2, r5
 800c36e:	f04f 0e20 	mov.w	lr, #32
 800c372:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c376:	4281      	cmp	r1, r0
 800c378:	eb06 0c05 	add.w	ip, r6, r5
 800c37c:	dc02      	bgt.n	800c384 <__ieee754_sqrt+0xc8>
 800c37e:	d113      	bne.n	800c3a8 <__ieee754_sqrt+0xec>
 800c380:	459c      	cmp	ip, r3
 800c382:	d811      	bhi.n	800c3a8 <__ieee754_sqrt+0xec>
 800c384:	f1bc 0f00 	cmp.w	ip, #0
 800c388:	eb0c 0506 	add.w	r5, ip, r6
 800c38c:	da43      	bge.n	800c416 <__ieee754_sqrt+0x15a>
 800c38e:	2d00      	cmp	r5, #0
 800c390:	db41      	blt.n	800c416 <__ieee754_sqrt+0x15a>
 800c392:	f100 0801 	add.w	r8, r0, #1
 800c396:	1a09      	subs	r1, r1, r0
 800c398:	459c      	cmp	ip, r3
 800c39a:	bf88      	it	hi
 800c39c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c3a0:	eba3 030c 	sub.w	r3, r3, ip
 800c3a4:	4432      	add	r2, r6
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c3ac:	f1be 0e01 	subs.w	lr, lr, #1
 800c3b0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c3b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c3b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c3bc:	d1db      	bne.n	800c376 <__ieee754_sqrt+0xba>
 800c3be:	430b      	orrs	r3, r1
 800c3c0:	d006      	beq.n	800c3d0 <__ieee754_sqrt+0x114>
 800c3c2:	1c50      	adds	r0, r2, #1
 800c3c4:	bf13      	iteet	ne
 800c3c6:	3201      	addne	r2, #1
 800c3c8:	3401      	addeq	r4, #1
 800c3ca:	4672      	moveq	r2, lr
 800c3cc:	f022 0201 	bicne.w	r2, r2, #1
 800c3d0:	1063      	asrs	r3, r4, #1
 800c3d2:	0852      	lsrs	r2, r2, #1
 800c3d4:	07e1      	lsls	r1, r4, #31
 800c3d6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c3da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c3de:	bf48      	it	mi
 800c3e0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c3e4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c3e8:	4614      	mov	r4, r2
 800c3ea:	e781      	b.n	800c2f0 <__ieee754_sqrt+0x34>
 800c3ec:	0ad9      	lsrs	r1, r3, #11
 800c3ee:	3815      	subs	r0, #21
 800c3f0:	055b      	lsls	r3, r3, #21
 800c3f2:	2900      	cmp	r1, #0
 800c3f4:	d0fa      	beq.n	800c3ec <__ieee754_sqrt+0x130>
 800c3f6:	02cd      	lsls	r5, r1, #11
 800c3f8:	d50a      	bpl.n	800c410 <__ieee754_sqrt+0x154>
 800c3fa:	f1c2 0420 	rsb	r4, r2, #32
 800c3fe:	fa23 f404 	lsr.w	r4, r3, r4
 800c402:	1e55      	subs	r5, r2, #1
 800c404:	4093      	lsls	r3, r2
 800c406:	4321      	orrs	r1, r4
 800c408:	1b42      	subs	r2, r0, r5
 800c40a:	e78a      	b.n	800c322 <__ieee754_sqrt+0x66>
 800c40c:	4610      	mov	r0, r2
 800c40e:	e7f0      	b.n	800c3f2 <__ieee754_sqrt+0x136>
 800c410:	0049      	lsls	r1, r1, #1
 800c412:	3201      	adds	r2, #1
 800c414:	e7ef      	b.n	800c3f6 <__ieee754_sqrt+0x13a>
 800c416:	4680      	mov	r8, r0
 800c418:	e7bd      	b.n	800c396 <__ieee754_sqrt+0xda>
 800c41a:	bf00      	nop
 800c41c:	7ff00000 	.word	0x7ff00000

0800c420 <with_errno>:
 800c420:	b570      	push	{r4, r5, r6, lr}
 800c422:	4604      	mov	r4, r0
 800c424:	460d      	mov	r5, r1
 800c426:	4616      	mov	r6, r2
 800c428:	f7fe f8dc 	bl	800a5e4 <__errno>
 800c42c:	4629      	mov	r1, r5
 800c42e:	6006      	str	r6, [r0, #0]
 800c430:	4620      	mov	r0, r4
 800c432:	bd70      	pop	{r4, r5, r6, pc}

0800c434 <xflow>:
 800c434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c436:	4614      	mov	r4, r2
 800c438:	461d      	mov	r5, r3
 800c43a:	b108      	cbz	r0, 800c440 <xflow+0xc>
 800c43c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c440:	e9cd 2300 	strd	r2, r3, [sp]
 800c444:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c448:	4620      	mov	r0, r4
 800c44a:	4629      	mov	r1, r5
 800c44c:	f7f4 f8e4 	bl	8000618 <__aeabi_dmul>
 800c450:	2222      	movs	r2, #34	; 0x22
 800c452:	b003      	add	sp, #12
 800c454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c458:	f7ff bfe2 	b.w	800c420 <with_errno>

0800c45c <__math_uflow>:
 800c45c:	b508      	push	{r3, lr}
 800c45e:	2200      	movs	r2, #0
 800c460:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c464:	f7ff ffe6 	bl	800c434 <xflow>
 800c468:	ec41 0b10 	vmov	d0, r0, r1
 800c46c:	bd08      	pop	{r3, pc}

0800c46e <__math_oflow>:
 800c46e:	b508      	push	{r3, lr}
 800c470:	2200      	movs	r2, #0
 800c472:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c476:	f7ff ffdd 	bl	800c434 <xflow>
 800c47a:	ec41 0b10 	vmov	d0, r0, r1
 800c47e:	bd08      	pop	{r3, pc}

0800c480 <fabs>:
 800c480:	ec51 0b10 	vmov	r0, r1, d0
 800c484:	ee10 2a10 	vmov	r2, s0
 800c488:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c48c:	ec43 2b10 	vmov	d0, r2, r3
 800c490:	4770      	bx	lr

0800c492 <finite>:
 800c492:	b082      	sub	sp, #8
 800c494:	ed8d 0b00 	vstr	d0, [sp]
 800c498:	9801      	ldr	r0, [sp, #4]
 800c49a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c49e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c4a2:	0fc0      	lsrs	r0, r0, #31
 800c4a4:	b002      	add	sp, #8
 800c4a6:	4770      	bx	lr

0800c4a8 <scalbn>:
 800c4a8:	b570      	push	{r4, r5, r6, lr}
 800c4aa:	ec55 4b10 	vmov	r4, r5, d0
 800c4ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	b99a      	cbnz	r2, 800c4e0 <scalbn+0x38>
 800c4b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c4bc:	4323      	orrs	r3, r4
 800c4be:	d036      	beq.n	800c52e <scalbn+0x86>
 800c4c0:	4b39      	ldr	r3, [pc, #228]	; (800c5a8 <scalbn+0x100>)
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	ee10 0a10 	vmov	r0, s0
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f7f4 f8a5 	bl	8000618 <__aeabi_dmul>
 800c4ce:	4b37      	ldr	r3, [pc, #220]	; (800c5ac <scalbn+0x104>)
 800c4d0:	429e      	cmp	r6, r3
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	460d      	mov	r5, r1
 800c4d6:	da10      	bge.n	800c4fa <scalbn+0x52>
 800c4d8:	a32b      	add	r3, pc, #172	; (adr r3, 800c588 <scalbn+0xe0>)
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	e03a      	b.n	800c556 <scalbn+0xae>
 800c4e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c4e4:	428a      	cmp	r2, r1
 800c4e6:	d10c      	bne.n	800c502 <scalbn+0x5a>
 800c4e8:	ee10 2a10 	vmov	r2, s0
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	4629      	mov	r1, r5
 800c4f0:	f7f3 fedc 	bl	80002ac <__adddf3>
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	460d      	mov	r5, r1
 800c4f8:	e019      	b.n	800c52e <scalbn+0x86>
 800c4fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c4fe:	460b      	mov	r3, r1
 800c500:	3a36      	subs	r2, #54	; 0x36
 800c502:	4432      	add	r2, r6
 800c504:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c508:	428a      	cmp	r2, r1
 800c50a:	dd08      	ble.n	800c51e <scalbn+0x76>
 800c50c:	2d00      	cmp	r5, #0
 800c50e:	a120      	add	r1, pc, #128	; (adr r1, 800c590 <scalbn+0xe8>)
 800c510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c514:	da1c      	bge.n	800c550 <scalbn+0xa8>
 800c516:	a120      	add	r1, pc, #128	; (adr r1, 800c598 <scalbn+0xf0>)
 800c518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c51c:	e018      	b.n	800c550 <scalbn+0xa8>
 800c51e:	2a00      	cmp	r2, #0
 800c520:	dd08      	ble.n	800c534 <scalbn+0x8c>
 800c522:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c526:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c52a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c52e:	ec45 4b10 	vmov	d0, r4, r5
 800c532:	bd70      	pop	{r4, r5, r6, pc}
 800c534:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c538:	da19      	bge.n	800c56e <scalbn+0xc6>
 800c53a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c53e:	429e      	cmp	r6, r3
 800c540:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c544:	dd0a      	ble.n	800c55c <scalbn+0xb4>
 800c546:	a112      	add	r1, pc, #72	; (adr r1, 800c590 <scalbn+0xe8>)
 800c548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1e2      	bne.n	800c516 <scalbn+0x6e>
 800c550:	a30f      	add	r3, pc, #60	; (adr r3, 800c590 <scalbn+0xe8>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f7f4 f85f 	bl	8000618 <__aeabi_dmul>
 800c55a:	e7cb      	b.n	800c4f4 <scalbn+0x4c>
 800c55c:	a10a      	add	r1, pc, #40	; (adr r1, 800c588 <scalbn+0xe0>)
 800c55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d0b8      	beq.n	800c4d8 <scalbn+0x30>
 800c566:	a10e      	add	r1, pc, #56	; (adr r1, 800c5a0 <scalbn+0xf8>)
 800c568:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c56c:	e7b4      	b.n	800c4d8 <scalbn+0x30>
 800c56e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c572:	3236      	adds	r2, #54	; 0x36
 800c574:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c578:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c57c:	4620      	mov	r0, r4
 800c57e:	4b0c      	ldr	r3, [pc, #48]	; (800c5b0 <scalbn+0x108>)
 800c580:	2200      	movs	r2, #0
 800c582:	e7e8      	b.n	800c556 <scalbn+0xae>
 800c584:	f3af 8000 	nop.w
 800c588:	c2f8f359 	.word	0xc2f8f359
 800c58c:	01a56e1f 	.word	0x01a56e1f
 800c590:	8800759c 	.word	0x8800759c
 800c594:	7e37e43c 	.word	0x7e37e43c
 800c598:	8800759c 	.word	0x8800759c
 800c59c:	fe37e43c 	.word	0xfe37e43c
 800c5a0:	c2f8f359 	.word	0xc2f8f359
 800c5a4:	81a56e1f 	.word	0x81a56e1f
 800c5a8:	43500000 	.word	0x43500000
 800c5ac:	ffff3cb0 	.word	0xffff3cb0
 800c5b0:	3c900000 	.word	0x3c900000

0800c5b4 <_init>:
 800c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b6:	bf00      	nop
 800c5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ba:	bc08      	pop	{r3}
 800c5bc:	469e      	mov	lr, r3
 800c5be:	4770      	bx	lr

0800c5c0 <_fini>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	bf00      	nop
 800c5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c6:	bc08      	pop	{r3}
 800c5c8:	469e      	mov	lr, r3
 800c5ca:	4770      	bx	lr
