
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009b24  0800ac74  0800ac74  0001ac74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014798  08014798  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08014798  08014798  00024798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080147a0  080147a0  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080147a0  080147a0  000247a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080147a4  080147a4  000247a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080147a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013cdc  20000088  08014830  00030088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013d64  08014830  00033d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001804c  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000394e  00000000  00000000  00048104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0004ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0004ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bfc  00000000  00000000  0004e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d812  00000000  00000000  00074c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d15f0  00000000  00000000  0009246e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163a5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a50  00000000  00000000  00163ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac5c 	.word	0x0800ac5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800ac5c 	.word	0x0800ac5c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295
 80006cc:	f000 b974 	b.w	80009b8 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9d08      	ldr	r5, [sp, #32]
 80006ee:	4604      	mov	r4, r0
 80006f0:	468e      	mov	lr, r1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14d      	bne.n	8000792 <__udivmoddi4+0xaa>
 80006f6:	428a      	cmp	r2, r1
 80006f8:	4694      	mov	ip, r2
 80006fa:	d969      	bls.n	80007d0 <__udivmoddi4+0xe8>
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	b152      	cbz	r2, 8000718 <__udivmoddi4+0x30>
 8000702:	fa01 f302 	lsl.w	r3, r1, r2
 8000706:	f1c2 0120 	rsb	r1, r2, #32
 800070a:	fa20 f101 	lsr.w	r1, r0, r1
 800070e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000712:	ea41 0e03 	orr.w	lr, r1, r3
 8000716:	4094      	lsls	r4, r2
 8000718:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800071c:	0c21      	lsrs	r1, r4, #16
 800071e:	fbbe f6f8 	udiv	r6, lr, r8
 8000722:	fa1f f78c 	uxth.w	r7, ip
 8000726:	fb08 e316 	mls	r3, r8, r6, lr
 800072a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800072e:	fb06 f107 	mul.w	r1, r6, r7
 8000732:	4299      	cmp	r1, r3
 8000734:	d90a      	bls.n	800074c <__udivmoddi4+0x64>
 8000736:	eb1c 0303 	adds.w	r3, ip, r3
 800073a:	f106 30ff 	add.w	r0, r6, #4294967295
 800073e:	f080 811f 	bcs.w	8000980 <__udivmoddi4+0x298>
 8000742:	4299      	cmp	r1, r3
 8000744:	f240 811c 	bls.w	8000980 <__udivmoddi4+0x298>
 8000748:	3e02      	subs	r6, #2
 800074a:	4463      	add	r3, ip
 800074c:	1a5b      	subs	r3, r3, r1
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb3 f0f8 	udiv	r0, r3, r8
 8000754:	fb08 3310 	mls	r3, r8, r0, r3
 8000758:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800075c:	fb00 f707 	mul.w	r7, r0, r7
 8000760:	42a7      	cmp	r7, r4
 8000762:	d90a      	bls.n	800077a <__udivmoddi4+0x92>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 33ff 	add.w	r3, r0, #4294967295
 800076c:	f080 810a 	bcs.w	8000984 <__udivmoddi4+0x29c>
 8000770:	42a7      	cmp	r7, r4
 8000772:	f240 8107 	bls.w	8000984 <__udivmoddi4+0x29c>
 8000776:	4464      	add	r4, ip
 8000778:	3802      	subs	r0, #2
 800077a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800077e:	1be4      	subs	r4, r4, r7
 8000780:	2600      	movs	r6, #0
 8000782:	b11d      	cbz	r5, 800078c <__udivmoddi4+0xa4>
 8000784:	40d4      	lsrs	r4, r2
 8000786:	2300      	movs	r3, #0
 8000788:	e9c5 4300 	strd	r4, r3, [r5]
 800078c:	4631      	mov	r1, r6
 800078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000792:	428b      	cmp	r3, r1
 8000794:	d909      	bls.n	80007aa <__udivmoddi4+0xc2>
 8000796:	2d00      	cmp	r5, #0
 8000798:	f000 80ef 	beq.w	800097a <__udivmoddi4+0x292>
 800079c:	2600      	movs	r6, #0
 800079e:	e9c5 0100 	strd	r0, r1, [r5]
 80007a2:	4630      	mov	r0, r6
 80007a4:	4631      	mov	r1, r6
 80007a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007aa:	fab3 f683 	clz	r6, r3
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d14a      	bne.n	8000848 <__udivmoddi4+0x160>
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d302      	bcc.n	80007bc <__udivmoddi4+0xd4>
 80007b6:	4282      	cmp	r2, r0
 80007b8:	f200 80f9 	bhi.w	80009ae <__udivmoddi4+0x2c6>
 80007bc:	1a84      	subs	r4, r0, r2
 80007be:	eb61 0303 	sbc.w	r3, r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	469e      	mov	lr, r3
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d0e0      	beq.n	800078c <__udivmoddi4+0xa4>
 80007ca:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ce:	e7dd      	b.n	800078c <__udivmoddi4+0xa4>
 80007d0:	b902      	cbnz	r2, 80007d4 <__udivmoddi4+0xec>
 80007d2:	deff      	udf	#255	; 0xff
 80007d4:	fab2 f282 	clz	r2, r2
 80007d8:	2a00      	cmp	r2, #0
 80007da:	f040 8092 	bne.w	8000902 <__udivmoddi4+0x21a>
 80007de:	eba1 010c 	sub.w	r1, r1, ip
 80007e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007e6:	fa1f fe8c 	uxth.w	lr, ip
 80007ea:	2601      	movs	r6, #1
 80007ec:	0c20      	lsrs	r0, r4, #16
 80007ee:	fbb1 f3f7 	udiv	r3, r1, r7
 80007f2:	fb07 1113 	mls	r1, r7, r3, r1
 80007f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fa:	fb0e f003 	mul.w	r0, lr, r3
 80007fe:	4288      	cmp	r0, r1
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x12c>
 8000802:	eb1c 0101 	adds.w	r1, ip, r1
 8000806:	f103 38ff 	add.w	r8, r3, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x12a>
 800080c:	4288      	cmp	r0, r1
 800080e:	f200 80cb 	bhi.w	80009a8 <__udivmoddi4+0x2c0>
 8000812:	4643      	mov	r3, r8
 8000814:	1a09      	subs	r1, r1, r0
 8000816:	b2a4      	uxth	r4, r4
 8000818:	fbb1 f0f7 	udiv	r0, r1, r7
 800081c:	fb07 1110 	mls	r1, r7, r0, r1
 8000820:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000824:	fb0e fe00 	mul.w	lr, lr, r0
 8000828:	45a6      	cmp	lr, r4
 800082a:	d908      	bls.n	800083e <__udivmoddi4+0x156>
 800082c:	eb1c 0404 	adds.w	r4, ip, r4
 8000830:	f100 31ff 	add.w	r1, r0, #4294967295
 8000834:	d202      	bcs.n	800083c <__udivmoddi4+0x154>
 8000836:	45a6      	cmp	lr, r4
 8000838:	f200 80bb 	bhi.w	80009b2 <__udivmoddi4+0x2ca>
 800083c:	4608      	mov	r0, r1
 800083e:	eba4 040e 	sub.w	r4, r4, lr
 8000842:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000846:	e79c      	b.n	8000782 <__udivmoddi4+0x9a>
 8000848:	f1c6 0720 	rsb	r7, r6, #32
 800084c:	40b3      	lsls	r3, r6
 800084e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000852:	ea4c 0c03 	orr.w	ip, ip, r3
 8000856:	fa20 f407 	lsr.w	r4, r0, r7
 800085a:	fa01 f306 	lsl.w	r3, r1, r6
 800085e:	431c      	orrs	r4, r3
 8000860:	40f9      	lsrs	r1, r7
 8000862:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000866:	fa00 f306 	lsl.w	r3, r0, r6
 800086a:	fbb1 f8f9 	udiv	r8, r1, r9
 800086e:	0c20      	lsrs	r0, r4, #16
 8000870:	fa1f fe8c 	uxth.w	lr, ip
 8000874:	fb09 1118 	mls	r1, r9, r8, r1
 8000878:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800087c:	fb08 f00e 	mul.w	r0, r8, lr
 8000880:	4288      	cmp	r0, r1
 8000882:	fa02 f206 	lsl.w	r2, r2, r6
 8000886:	d90b      	bls.n	80008a0 <__udivmoddi4+0x1b8>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000890:	f080 8088 	bcs.w	80009a4 <__udivmoddi4+0x2bc>
 8000894:	4288      	cmp	r0, r1
 8000896:	f240 8085 	bls.w	80009a4 <__udivmoddi4+0x2bc>
 800089a:	f1a8 0802 	sub.w	r8, r8, #2
 800089e:	4461      	add	r1, ip
 80008a0:	1a09      	subs	r1, r1, r0
 80008a2:	b2a4      	uxth	r4, r4
 80008a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008a8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008b4:	458e      	cmp	lr, r1
 80008b6:	d908      	bls.n	80008ca <__udivmoddi4+0x1e2>
 80008b8:	eb1c 0101 	adds.w	r1, ip, r1
 80008bc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008c0:	d26c      	bcs.n	800099c <__udivmoddi4+0x2b4>
 80008c2:	458e      	cmp	lr, r1
 80008c4:	d96a      	bls.n	800099c <__udivmoddi4+0x2b4>
 80008c6:	3802      	subs	r0, #2
 80008c8:	4461      	add	r1, ip
 80008ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ce:	fba0 9402 	umull	r9, r4, r0, r2
 80008d2:	eba1 010e 	sub.w	r1, r1, lr
 80008d6:	42a1      	cmp	r1, r4
 80008d8:	46c8      	mov	r8, r9
 80008da:	46a6      	mov	lr, r4
 80008dc:	d356      	bcc.n	800098c <__udivmoddi4+0x2a4>
 80008de:	d053      	beq.n	8000988 <__udivmoddi4+0x2a0>
 80008e0:	b15d      	cbz	r5, 80008fa <__udivmoddi4+0x212>
 80008e2:	ebb3 0208 	subs.w	r2, r3, r8
 80008e6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ea:	fa01 f707 	lsl.w	r7, r1, r7
 80008ee:	fa22 f306 	lsr.w	r3, r2, r6
 80008f2:	40f1      	lsrs	r1, r6
 80008f4:	431f      	orrs	r7, r3
 80008f6:	e9c5 7100 	strd	r7, r1, [r5]
 80008fa:	2600      	movs	r6, #0
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	f1c2 0320 	rsb	r3, r2, #32
 8000906:	40d8      	lsrs	r0, r3
 8000908:	fa0c fc02 	lsl.w	ip, ip, r2
 800090c:	fa21 f303 	lsr.w	r3, r1, r3
 8000910:	4091      	lsls	r1, r2
 8000912:	4301      	orrs	r1, r0
 8000914:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000918:	fa1f fe8c 	uxth.w	lr, ip
 800091c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000920:	fb07 3610 	mls	r6, r7, r0, r3
 8000924:	0c0b      	lsrs	r3, r1, #16
 8000926:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800092a:	fb00 f60e 	mul.w	r6, r0, lr
 800092e:	429e      	cmp	r6, r3
 8000930:	fa04 f402 	lsl.w	r4, r4, r2
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x260>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f100 38ff 	add.w	r8, r0, #4294967295
 800093e:	d22f      	bcs.n	80009a0 <__udivmoddi4+0x2b8>
 8000940:	429e      	cmp	r6, r3
 8000942:	d92d      	bls.n	80009a0 <__udivmoddi4+0x2b8>
 8000944:	3802      	subs	r0, #2
 8000946:	4463      	add	r3, ip
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	b289      	uxth	r1, r1
 800094c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000950:	fb07 3316 	mls	r3, r7, r6, r3
 8000954:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000958:	fb06 f30e 	mul.w	r3, r6, lr
 800095c:	428b      	cmp	r3, r1
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x28a>
 8000960:	eb1c 0101 	adds.w	r1, ip, r1
 8000964:	f106 38ff 	add.w	r8, r6, #4294967295
 8000968:	d216      	bcs.n	8000998 <__udivmoddi4+0x2b0>
 800096a:	428b      	cmp	r3, r1
 800096c:	d914      	bls.n	8000998 <__udivmoddi4+0x2b0>
 800096e:	3e02      	subs	r6, #2
 8000970:	4461      	add	r1, ip
 8000972:	1ac9      	subs	r1, r1, r3
 8000974:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000978:	e738      	b.n	80007ec <__udivmoddi4+0x104>
 800097a:	462e      	mov	r6, r5
 800097c:	4628      	mov	r0, r5
 800097e:	e705      	b.n	800078c <__udivmoddi4+0xa4>
 8000980:	4606      	mov	r6, r0
 8000982:	e6e3      	b.n	800074c <__udivmoddi4+0x64>
 8000984:	4618      	mov	r0, r3
 8000986:	e6f8      	b.n	800077a <__udivmoddi4+0x92>
 8000988:	454b      	cmp	r3, r9
 800098a:	d2a9      	bcs.n	80008e0 <__udivmoddi4+0x1f8>
 800098c:	ebb9 0802 	subs.w	r8, r9, r2
 8000990:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000994:	3801      	subs	r0, #1
 8000996:	e7a3      	b.n	80008e0 <__udivmoddi4+0x1f8>
 8000998:	4646      	mov	r6, r8
 800099a:	e7ea      	b.n	8000972 <__udivmoddi4+0x28a>
 800099c:	4620      	mov	r0, r4
 800099e:	e794      	b.n	80008ca <__udivmoddi4+0x1e2>
 80009a0:	4640      	mov	r0, r8
 80009a2:	e7d1      	b.n	8000948 <__udivmoddi4+0x260>
 80009a4:	46d0      	mov	r8, sl
 80009a6:	e77b      	b.n	80008a0 <__udivmoddi4+0x1b8>
 80009a8:	3b02      	subs	r3, #2
 80009aa:	4461      	add	r1, ip
 80009ac:	e732      	b.n	8000814 <__udivmoddi4+0x12c>
 80009ae:	4630      	mov	r0, r6
 80009b0:	e709      	b.n	80007c6 <__udivmoddi4+0xde>
 80009b2:	4464      	add	r4, ip
 80009b4:	3802      	subs	r0, #2
 80009b6:	e742      	b.n	800083e <__udivmoddi4+0x156>

080009b8 <__aeabi_idiv0>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <API_draw_line>:
 * 	bitmap:
 *
 */

int API_draw_line(uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint8_t dikte, uint8_t color)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08d      	sub	sp, #52	; 0x34
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4604      	mov	r4, r0
 80009c4:	4608      	mov	r0, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	4623      	mov	r3, r4
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	4603      	mov	r3, r0
 80009d0:	80bb      	strh	r3, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	807b      	strh	r3, [r7, #2]
 80009d6:	4613      	mov	r3, r2
 80009d8:	803b      	strh	r3, [r7, #0]
	int error = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
	//error checks
//	if(checkcolor(color))
//		return error;

	int dx = x_2 - x_1;
 80009de:	887a      	ldrh	r2, [r7, #2]
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	617b      	str	r3, [r7, #20]
	int dy = y_2 - y_1;
 80009e6:	883a      	ldrh	r2, [r7, #0]
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	613b      	str	r3, [r7, #16]
	int steps;
	if(dx>dy)
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	dd05      	ble.n	8000a02 <API_draw_line+0x46>
	{
		steps = abs(dx);
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	bfb8      	it	lt
 80009fc:	425b      	neglt	r3, r3
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a00:	e023      	b.n	8000a4a <API_draw_line+0x8e>
	}
	else if(dy>dx)
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	dd05      	ble.n	8000a16 <API_draw_line+0x5a>
	{
		steps = abs(dy);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bfb8      	it	lt
 8000a10:	425b      	neglt	r3, r3
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a14:	e019      	b.n	8000a4a <API_draw_line+0x8e>
	}
	else if (dx == dy)
 8000a16:	697a      	ldr	r2, [r7, #20]
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d105      	bne.n	8000a2a <API_draw_line+0x6e>
	{
		steps = abs(dy);
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	bfb8      	it	lt
 8000a24:	425b      	neglt	r3, r3
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a28:	e00f      	b.n	8000a4a <API_draw_line+0x8e>
	}
	else if(abs(dx)==abs(dy))
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a30:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	bfb8      	it	lt
 8000a3a:	425b      	neglt	r3, r3
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d104      	bne.n	8000a4a <API_draw_line+0x8e>
		steps = abs(dy);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bfb8      	it	lt
 8000a46:	425b      	neglt	r3, r3
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
	float xIncrement = (float) dx / steps;
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	ee07 3a90 	vmov	s15, r3
 8000a50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a62:	edc7 7a03 	vstr	s15, [r7, #12]
	float yIncrement = (float) dy / steps;
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	ee07 3a90 	vmov	s15, r3
 8000a6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a7e:	edc7 7a02 	vstr	s15, [r7, #8]
	int i;

	// Set the pixels along the center line of the given thickness
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000a82:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000a86:	085b      	lsrs	r3, r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	425b      	negs	r3, r3
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a8e:	e053      	b.n	8000b38 <API_draw_line+0x17c>
		float x = x_1 + 0.5;
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fd56 	bl	8000544 <__aeabi_i2d>
 8000a98:	f04f 0200 	mov.w	r2, #0
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <API_draw_line+0x198>)
 8000a9e:	f7ff fc05 	bl	80002ac <__adddf3>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f7ff fdb5 	bl	8000618 <__aeabi_d2f>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
		float y = y_1 + i + 0.5;
 8000ab2:	88ba      	ldrh	r2, [r7, #4]
 8000ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fd43 	bl	8000544 <__aeabi_i2d>
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <API_draw_line+0x198>)
 8000ac4:	f7ff fbf2 	bl	80002ac <__adddf3>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	460b      	mov	r3, r1
 8000acc:	4610      	mov	r0, r2
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f7ff fda2 	bl	8000618 <__aeabi_d2f>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	623b      	str	r3, [r7, #32]
		int j;
		for (j = 0; j < steps; j++) {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
 8000adc:	e025      	b.n	8000b2a <API_draw_line+0x16e>
			UB_VGA_SetPixel(x, y, color);
 8000ade:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ae6:	ee17 3a90 	vmov	r3, s15
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	edd7 7a08 	vldr	s15, [r7, #32]
 8000af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000af4:	ee17 2a90 	vmov	r2, s15
 8000af8:	b291      	uxth	r1, r2
 8000afa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 f8b0 	bl	8002c64 <UB_VGA_SetPixel>
			x += xIncrement;
 8000b04:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			y += yIncrement;
 8000b14:	ed97 7a08 	vldr	s14, [r7, #32]
 8000b18:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b20:	edc7 7a08 	vstr	s15, [r7, #32]
		for (j = 0; j < steps; j++) {
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	3301      	adds	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbd5      	blt.n	8000ade <API_draw_line+0x122>
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b34:	3301      	adds	r3, #1
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b38:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b3c:	085b      	lsrs	r3, r3, #1
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b44:	4293      	cmp	r3, r2
 8000b46:	dda3      	ble.n	8000a90 <API_draw_line+0xd4>
		}
	}
	return error;
 8000b48:	69bb      	ldr	r3, [r7, #24]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3734      	adds	r7, #52	; 0x34
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	bf00      	nop
 8000b54:	3fe00000 	.word	0x3fe00000

08000b58 <API_draw_rectangle>:
{
	UB_VGA_FillScreen(color);
}

int API_draw_rectangle(uint16_t x_lup, uint16_t y_lup, uint16_t breedte, uint16_t hoogte, uint8_t color, uint8_t gevuld)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
	int xp = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
	int yp = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]

	//draw lines along screen every y-value
	if(gevuld == 1)
 8000b7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d121      	bne.n	8000bca <API_draw_rectangle+0x72>
	{
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	e017      	b.n	8000bbc <API_draw_rectangle+0x64>
		{
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	e00b      	b.n	8000baa <API_draw_rectangle+0x52>
			{
				UB_VGA_SetPixel(xp, yp, color);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	b291      	uxth	r1, r2
 8000b9a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 f860 	bl	8002c64 <UB_VGA_SetPixel>
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	88fa      	ldrh	r2, [r7, #6]
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	4413      	add	r3, r2
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbed      	blt.n	8000b92 <API_draw_rectangle+0x3a>
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	88ba      	ldrh	r2, [r7, #4]
 8000bbe:	883b      	ldrh	r3, [r7, #0]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbe1      	blt.n	8000b8c <API_draw_rectangle+0x34>
 8000bc8:	e042      	b.n	8000c50 <API_draw_rectangle+0xf8>
			}
		}
	}

	else if(gevuld == 0)
 8000bca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d13e      	bne.n	8000c50 <API_draw_rectangle+0xf8>
	{

			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 8000bd2:	88bb      	ldrh	r3, [r7, #4]
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	e035      	b.n	8000c44 <API_draw_rectangle+0xec>
			{
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e029      	b.n	8000c32 <API_draw_rectangle+0xda>
				{
					//draw lines along screen every y-value
					if ((yp == y_lup) || (yp == (y_lup + hoogte)))
 8000bde:	88bb      	ldrh	r3, [r7, #4]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d005      	beq.n	8000bf2 <API_draw_rectangle+0x9a>
 8000be6:	88ba      	ldrh	r2, [r7, #4]
 8000be8:	883b      	ldrh	r3, [r7, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	68ba      	ldr	r2, [r7, #8]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d109      	bne.n	8000c06 <API_draw_rectangle+0xae>
					{
						UB_VGA_SetPixel(xp, yp, color);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	b291      	uxth	r1, r2
 8000bfa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f002 f830 	bl	8002c64 <UB_VGA_SetPixel>
 8000c04:	e012      	b.n	8000c2c <API_draw_rectangle+0xd4>
					}

					//Draw pixels along screen only at edges
					else if((xp == x_lup) || (xp == (x_lup + breedte)))
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d005      	beq.n	8000c1a <API_draw_rectangle+0xc2>
 8000c0e:	88fa      	ldrh	r2, [r7, #6]
 8000c10:	887b      	ldrh	r3, [r7, #2]
 8000c12:	4413      	add	r3, r2
 8000c14:	68fa      	ldr	r2, [r7, #12]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d108      	bne.n	8000c2c <API_draw_rectangle+0xd4>
					{
						UB_VGA_SetPixel(xp, yp, color);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	b291      	uxth	r1, r2
 8000c22:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 f81c 	bl	8002c64 <UB_VGA_SetPixel>
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	88fa      	ldrh	r2, [r7, #6]
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	4413      	add	r3, r2
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	ddcf      	ble.n	8000bde <API_draw_rectangle+0x86>
			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3301      	adds	r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	88ba      	ldrh	r2, [r7, #4]
 8000c46:	883b      	ldrh	r3, [r7, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	ddc3      	ble.n	8000bd8 <API_draw_rectangle+0x80>
					}
				}
			}
	}
}
 8000c50:	bf00      	nop
 8000c52:	4618      	mov	r0, r3
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
	...

08000c5c <API_draw_text>:

}


int API_draw_text(uint16_t x, uint16_t y, uint8_t kleur, char* tekst, char* fontnaam,uint8_t fontgrootte,char* fontstijl)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b08d      	sub	sp, #52	; 0x34
 8000c60:	af04      	add	r7, sp, #16
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4603      	mov	r3, r0
 8000c66:	81fb      	strh	r3, [r7, #14]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	81bb      	strh	r3, [r7, #12]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint16_t xd = x;
 8000c70:	89fb      	ldrh	r3, [r7, #14]
 8000c72:	83bb      	strh	r3, [r7, #28]
	uint16_t yd = y;
 8000c74:	89bb      	ldrh	r3, [r7, #12]
 8000c76:	837b      	strh	r3, [r7, #26]
	uint16_t* cord_p;
	unsigned char letter_style;
	if(strcmp(fontnaam, "arial")  == 0)
 8000c78:	4940      	ldr	r1, [pc, #256]	; (8000d7c <API_draw_text+0x120>)
 8000c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c7c:	f7ff faa8 	bl	80001d0 <strcmp>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <API_draw_text+0x30>
	{
		letter_style = ARIAL;
 8000c86:	2301      	movs	r3, #1
 8000c88:	74fb      	strb	r3, [r7, #19]
 8000c8a:	e00c      	b.n	8000ca6 <API_draw_text+0x4a>
	}
	else if(strcmp(fontnaam, "consolas")  == 0)
 8000c8c:	493c      	ldr	r1, [pc, #240]	; (8000d80 <API_draw_text+0x124>)
 8000c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c90:	f7ff fa9e 	bl	80001d0 <strcmp>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d102      	bne.n	8000ca0 <API_draw_text+0x44>
	{
		letter_style = CONSOLAS;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	74fb      	strb	r3, [r7, #19]
 8000c9e:	e002      	b.n	8000ca6 <API_draw_text+0x4a>
	}
	else
	{
		API_err_handler(UNKNOWN_FONT);
 8000ca0:	2008      	movs	r0, #8
 8000ca2:	f000 fd65 	bl	8001770 <API_err_handler>
	}
	for(i = 0; tekst[i] != '\0'; i++)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	77fb      	strb	r3, [r7, #31]
 8000caa:	e05b      	b.n	8000d64 <API_draw_text+0x108>
	{
		switch(fontstijl[0])
 8000cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b76      	cmp	r3, #118	; 0x76
 8000cb2:	d01e      	beq.n	8000cf2 <API_draw_text+0x96>
 8000cb4:	2b76      	cmp	r3, #118	; 0x76
 8000cb6:	dc4e      	bgt.n	8000d56 <API_draw_text+0xfa>
 8000cb8:	2b63      	cmp	r3, #99	; 0x63
 8000cba:	d033      	beq.n	8000d24 <API_draw_text+0xc8>
 8000cbc:	2b6e      	cmp	r3, #110	; 0x6e
 8000cbe:	d14a      	bne.n	8000d56 <API_draw_text+0xfa>
		{
		case 'n':
			cord_p = draw_normal_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 8000cc0:	7ffb      	ldrb	r3, [r7, #31]
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	7818      	ldrb	r0, [r3, #0]
 8000cc8:	8b7c      	ldrh	r4, [r7, #26]
 8000cca:	8bba      	ldrh	r2, [r7, #28]
 8000ccc:	7cf9      	ldrb	r1, [r7, #19]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	9302      	str	r3, [sp, #8]
 8000cd2:	7afb      	ldrb	r3, [r7, #11]
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	4623      	mov	r3, r4
 8000cde:	f000 f851 	bl	8000d84 <draw_normal_letter>
 8000ce2:	6178      	str	r0, [r7, #20]
			xd = cord_p[0];
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	83bb      	strh	r3, [r7, #28]
			yd = cord_p[1];
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	885b      	ldrh	r3, [r3, #2]
 8000cee:	837b      	strh	r3, [r7, #26]
			break;
 8000cf0:	e035      	b.n	8000d5e <API_draw_text+0x102>
		case 'v':
			cord_p = draw_fat_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 8000cf2:	7ffb      	ldrb	r3, [r7, #31]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	7818      	ldrb	r0, [r3, #0]
 8000cfa:	8b7c      	ldrh	r4, [r7, #26]
 8000cfc:	8bba      	ldrh	r2, [r7, #28]
 8000cfe:	7cf9      	ldrb	r1, [r7, #19]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	9301      	str	r3, [sp, #4]
 8000d08:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	4623      	mov	r3, r4
 8000d10:	f000 fa2c 	bl	800116c <draw_fat_letter>
 8000d14:	6178      	str	r0, [r7, #20]
			xd = cord_p[0];
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	83bb      	strh	r3, [r7, #28]
			yd = cord_p[1];
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	885b      	ldrh	r3, [r3, #2]
 8000d20:	837b      	strh	r3, [r7, #26]
			break;
 8000d22:	e01c      	b.n	8000d5e <API_draw_text+0x102>
		case 'c':
			cord_p = draw_cursive_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 8000d24:	7ffb      	ldrb	r3, [r7, #31]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	7818      	ldrb	r0, [r3, #0]
 8000d2c:	8b7c      	ldrh	r4, [r7, #26]
 8000d2e:	8bba      	ldrh	r2, [r7, #28]
 8000d30:	7cf9      	ldrb	r1, [r7, #19]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	7afb      	ldrb	r3, [r7, #11]
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	4623      	mov	r3, r4
 8000d42:	f000 f90f 	bl	8000f64 <draw_cursive_letter>
 8000d46:	6178      	str	r0, [r7, #20]
			xd = cord_p[0];
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	83bb      	strh	r3, [r7, #28]
			yd = cord_p[1];
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	885b      	ldrh	r3, [r3, #2]
 8000d52:	837b      	strh	r3, [r7, #26]
			break;
 8000d54:	e003      	b.n	8000d5e <API_draw_text+0x102>
		default:
			API_err_handler(UNKNOWN_FONT_STYLE);
 8000d56:	200a      	movs	r0, #10
 8000d58:	f000 fd0a 	bl	8001770 <API_err_handler>
			break;
 8000d5c:	bf00      	nop
	for(i = 0; tekst[i] != '\0'; i++)
 8000d5e:	7ffb      	ldrb	r3, [r7, #31]
 8000d60:	3301      	adds	r3, #1
 8000d62:	77fb      	strb	r3, [r7, #31]
 8000d64:	7ffb      	ldrb	r3, [r7, #31]
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d19d      	bne.n	8000cac <API_draw_text+0x50>
		}
	}
	return 0;//returns error
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd90      	pop	{r4, r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	0800ac74 	.word	0x0800ac74
 8000d80:	0800ac7c 	.word	0x0800ac7c

08000d84 <draw_normal_letter>:

uint16_t * draw_normal_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b08d      	sub	sp, #52	; 0x34
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	4611      	mov	r1, r2
 8000d90:	461a      	mov	r2, r3
 8000d92:	4623      	mov	r3, r4
 8000d94:	71fb      	strb	r3, [r7, #7]
 8000d96:	4603      	mov	r3, r0
 8000d98:	71bb      	strb	r3, [r7, #6]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	80bb      	strh	r3, [r7, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	807b      	strh	r3, [r7, #2]
    uint16_t end_cords[2];
    uint16_t begin_x = xd;
 8000da2:	88bb      	ldrh	r3, [r7, #4]
 8000da4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    int y_counter;
    int width;
    const uint8_t* glyph;
    int start_letter;
	uint8_t bitmap_height;
	if(letter_type == ARIAL)
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d12f      	bne.n	8000e0c <draw_normal_letter+0x88>
	{
		if(fontgrootte == SIZE_1)
 8000dac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d113      	bne.n	8000ddc <draw_normal_letter+0x58>
		{
			start_letter= arial_24_glyph_dsc[letter-32][1];
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	3b20      	subs	r3, #32
 8000db8:	4a62      	ldr	r2, [pc, #392]	; (8000f44 <draw_normal_letter+0x1c0>)
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	613b      	str	r3, [r7, #16]
			glyph = &arial_24_glyph_bitmap[start_letter];
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4a60      	ldr	r2, [pc, #384]	; (8000f48 <draw_normal_letter+0x1c4>)
 8000dc6:	4413      	add	r3, r2
 8000dc8:	61fb      	str	r3, [r7, #28]
			width = arial_24_glyph_dsc[letter-32][0];
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	3b20      	subs	r3, #32
 8000dce:	4a5d      	ldr	r2, [pc, #372]	; (8000f44 <draw_normal_letter+0x1c0>)
 8000dd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000dd4:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 8000dd6:	2318      	movs	r3, #24
 8000dd8:	76fb      	strb	r3, [r7, #27]
 8000dda:	e049      	b.n	8000e70 <draw_normal_letter+0xec>
		}
		else if(fontgrootte == SIZE_2)
 8000ddc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d145      	bne.n	8000e70 <draw_normal_letter+0xec>
		{
			start_letter= arial_glyph_dsc[letter-32][1];
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3b20      	subs	r3, #32
 8000de8:	4a58      	ldr	r2, [pc, #352]	; (8000f4c <draw_normal_letter+0x1c8>)
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	4413      	add	r3, r2
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
			glyph = &arial_glyph_bitmap[start_letter];
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4a56      	ldr	r2, [pc, #344]	; (8000f50 <draw_normal_letter+0x1cc>)
 8000df6:	4413      	add	r3, r2
 8000df8:	61fb      	str	r3, [r7, #28]
			width = arial_glyph_dsc[letter-32][0];
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	3b20      	subs	r3, #32
 8000dfe:	4a53      	ldr	r2, [pc, #332]	; (8000f4c <draw_normal_letter+0x1c8>)
 8000e00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e04:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 8000e06:	2330      	movs	r3, #48	; 0x30
 8000e08:	76fb      	strb	r3, [r7, #27]
 8000e0a:	e031      	b.n	8000e70 <draw_normal_letter+0xec>
		}
	}
	else if(letter_type == CONSOLAS)
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d12e      	bne.n	8000e70 <draw_normal_letter+0xec>
	{
		if(fontgrootte == SIZE_1)
 8000e12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d113      	bne.n	8000e42 <draw_normal_letter+0xbe>
		{
			start_letter= consolas_24_glyph_dsc[letter-32][1];
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	3b20      	subs	r3, #32
 8000e1e:	4a4d      	ldr	r2, [pc, #308]	; (8000f54 <draw_normal_letter+0x1d0>)
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4413      	add	r3, r2
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	613b      	str	r3, [r7, #16]
			glyph = &consolas_24_glyph_bitmap[start_letter];
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4a4b      	ldr	r2, [pc, #300]	; (8000f58 <draw_normal_letter+0x1d4>)
 8000e2c:	4413      	add	r3, r2
 8000e2e:	61fb      	str	r3, [r7, #28]
			width = consolas_24_glyph_dsc[letter-32][0];
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	3b20      	subs	r3, #32
 8000e34:	4a47      	ldr	r2, [pc, #284]	; (8000f54 <draw_normal_letter+0x1d0>)
 8000e36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e3a:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 8000e3c:	2318      	movs	r3, #24
 8000e3e:	76fb      	strb	r3, [r7, #27]
 8000e40:	e016      	b.n	8000e70 <draw_normal_letter+0xec>
		}
		else if(fontgrootte == SIZE_2)
 8000e42:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d112      	bne.n	8000e70 <draw_normal_letter+0xec>
		{
			start_letter= consolas_glyph_dsc[letter-32][1];
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	3b20      	subs	r3, #32
 8000e4e:	4a43      	ldr	r2, [pc, #268]	; (8000f5c <draw_normal_letter+0x1d8>)
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	4413      	add	r3, r2
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	613b      	str	r3, [r7, #16]
			glyph = &consolas_glyph_bitmap[start_letter];
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4a41      	ldr	r2, [pc, #260]	; (8000f60 <draw_normal_letter+0x1dc>)
 8000e5c:	4413      	add	r3, r2
 8000e5e:	61fb      	str	r3, [r7, #28]
			width = consolas_glyph_dsc[letter-32][0];
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	3b20      	subs	r3, #32
 8000e64:	4a3d      	ldr	r2, [pc, #244]	; (8000f5c <draw_normal_letter+0x1d8>)
 8000e66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e6a:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 8000e6c:	2330      	movs	r3, #48	; 0x30
 8000e6e:	76fb      	strb	r3, [r7, #27]
		}
	}
    //next line test
        if(xd+width >= VGA_DISPLAY_X)
 8000e70:	88ba      	ldrh	r2, [r7, #4]
 8000e72:	6a3b      	ldr	r3, [r7, #32]
 8000e74:	4413      	add	r3, r2
 8000e76:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e7a:	db06      	blt.n	8000e8a <draw_normal_letter+0x106>
        {
        	yd+=bitmap_height;
 8000e7c:	7efb      	ldrb	r3, [r7, #27]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	4413      	add	r3, r2
 8000e84:	807b      	strh	r3, [r7, #2]
        	begin_x=5;//sets x value to the left +5 pixels
 8000e86:	2305      	movs	r3, #5
 8000e88:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
    //end test
    if(width%8)
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	f003 0307 	and.w	r3, r3, #7
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <draw_normal_letter+0x116>
    	width += 8;
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	3308      	adds	r3, #8
 8000e98:	623b      	str	r3, [r7, #32]
    width = (width/8);
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	da00      	bge.n	8000ea2 <draw_normal_letter+0x11e>
 8000ea0:	3307      	adds	r3, #7
 8000ea2:	10db      	asrs	r3, r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]


    for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eaa:	e037      	b.n	8000f1c <draw_normal_letter+0x198>
    {
        xd = begin_x;
 8000eac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000eae:	80bb      	strh	r3, [r7, #4]
        for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eb4:	e028      	b.n	8000f08 <draw_normal_letter+0x184>
        {
        	for (int i = 7; i >= 0; i--)
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	617b      	str	r3, [r7, #20]
 8000eba:	e01f      	b.n	8000efc <draw_normal_letter+0x178>
        	{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	6a3a      	ldr	r2, [r7, #32]
 8000ec2:	fb03 f202 	mul.w	r2, r3, r2
 8000ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec8:	4413      	add	r3, r2
 8000eca:	461a      	mov	r2, r3
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	4413      	add	r3, r2
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa42 f303 	asr.w	r3, r2, r3
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d006      	beq.n	8000ef0 <draw_normal_letter+0x16c>
					UB_VGA_SetPixel(xd, yd, kleur);
 8000ee2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000ee6:	8879      	ldrh	r1, [r7, #2]
 8000ee8:	88bb      	ldrh	r3, [r7, #4]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f001 feba 	bl	8002c64 <UB_VGA_SetPixel>
				xd++;
 8000ef0:	88bb      	ldrh	r3, [r7, #4]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	80bb      	strh	r3, [r7, #4]
        	for (int i = 7; i >= 0; i--)
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	dadc      	bge.n	8000ebc <draw_normal_letter+0x138>
        for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8000f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f04:	3301      	adds	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	dbd2      	blt.n	8000eb6 <draw_normal_letter+0x132>
        	}
        }
        yd++;
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	3301      	adds	r3, #1
 8000f14:	807b      	strh	r3, [r7, #2]
    for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	3301      	adds	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1c:	7efb      	ldrb	r3, [r7, #27]
 8000f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbc3      	blt.n	8000eac <draw_normal_letter+0x128>
    }
    end_cords[0] = xd;
 8000f24:	88bb      	ldrh	r3, [r7, #4]
 8000f26:	81bb      	strh	r3, [r7, #12]
    end_cords[1] = yd-bitmap_height;
 8000f28:	7efb      	ldrb	r3, [r7, #27]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	887a      	ldrh	r2, [r7, #2]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	81fb      	strh	r3, [r7, #14]
    cord_p = end_cords;
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	64bb      	str	r3, [r7, #72]	; 0x48
    return cord_p;
 8000f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3734      	adds	r7, #52	; 0x34
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	0800f72c 	.word	0x0800f72c
 8000f48:	0800e7b4 	.word	0x0800e7b4
 8000f4c:	0800e4bc 	.word	0x0800e4bc
 8000f50:	0800b15c 	.word	0x0800b15c
 8000f54:	0801416c 	.word	0x0801416c
 8000f58:	0801311c 	.word	0x0801311c
 8000f5c:	08012e1c 	.word	0x08012e1c
 8000f60:	0800fa2c 	.word	0x0800fa2c

08000f64 <draw_cursive_letter>:

uint16_t * draw_cursive_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b08d      	sub	sp, #52	; 0x34
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	4611      	mov	r1, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	4623      	mov	r3, r4
 8000f74:	71fb      	strb	r3, [r7, #7]
 8000f76:	4603      	mov	r3, r0
 8000f78:	71bb      	strb	r3, [r7, #6]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	80bb      	strh	r3, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	807b      	strh	r3, [r7, #2]
	uint16_t end_cords[2];
	uint16_t begin_x = xd;
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int width;
	const uint8_t* glyph;
	int start_letter;
	int angle;
	uint8_t bitmap_height;
	if(letter_type == ARIAL)
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d12f      	bne.n	8000fec <draw_cursive_letter+0x88>
	{
		if(fontgrootte == SIZE_1)
 8000f8c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d113      	bne.n	8000fbc <draw_cursive_letter+0x58>
		{
			start_letter= arial_24_glyph_dsc[letter-32][1];
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	3b20      	subs	r3, #32
 8000f98:	4a6c      	ldr	r2, [pc, #432]	; (800114c <draw_cursive_letter+0x1e8>)
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]
			glyph = &arial_24_glyph_bitmap[start_letter];
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4a6a      	ldr	r2, [pc, #424]	; (8001150 <draw_cursive_letter+0x1ec>)
 8000fa6:	4413      	add	r3, r2
 8000fa8:	61fb      	str	r3, [r7, #28]
			width = arial_24_glyph_dsc[letter-32][0];
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	3b20      	subs	r3, #32
 8000fae:	4a67      	ldr	r2, [pc, #412]	; (800114c <draw_cursive_letter+0x1e8>)
 8000fb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fb4:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 8000fb6:	2318      	movs	r3, #24
 8000fb8:	75fb      	strb	r3, [r7, #23]
 8000fba:	e049      	b.n	8001050 <draw_cursive_letter+0xec>
		}
		else if(fontgrootte == SIZE_2)
 8000fbc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d145      	bne.n	8001050 <draw_cursive_letter+0xec>
		{
			start_letter= arial_glyph_dsc[letter-32][1];
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	3b20      	subs	r3, #32
 8000fc8:	4a62      	ldr	r2, [pc, #392]	; (8001154 <draw_cursive_letter+0x1f0>)
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4413      	add	r3, r2
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]
			glyph = &arial_glyph_bitmap[start_letter];
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4a60      	ldr	r2, [pc, #384]	; (8001158 <draw_cursive_letter+0x1f4>)
 8000fd6:	4413      	add	r3, r2
 8000fd8:	61fb      	str	r3, [r7, #28]
			width = arial_glyph_dsc[letter-32][0];
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	3b20      	subs	r3, #32
 8000fde:	4a5d      	ldr	r2, [pc, #372]	; (8001154 <draw_cursive_letter+0x1f0>)
 8000fe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fe4:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 8000fe6:	2330      	movs	r3, #48	; 0x30
 8000fe8:	75fb      	strb	r3, [r7, #23]
 8000fea:	e031      	b.n	8001050 <draw_cursive_letter+0xec>
		}
	}
	else if(letter_type == CONSOLAS)
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d12e      	bne.n	8001050 <draw_cursive_letter+0xec>
	{
		if(fontgrootte == SIZE_1)
 8000ff2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d113      	bne.n	8001022 <draw_cursive_letter+0xbe>
		{
			start_letter= consolas_24_glyph_dsc[letter-32][1];
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	3b20      	subs	r3, #32
 8000ffe:	4a57      	ldr	r2, [pc, #348]	; (800115c <draw_cursive_letter+0x1f8>)
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4413      	add	r3, r2
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	60fb      	str	r3, [r7, #12]
			glyph = &consolas_24_glyph_bitmap[start_letter];
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4a55      	ldr	r2, [pc, #340]	; (8001160 <draw_cursive_letter+0x1fc>)
 800100c:	4413      	add	r3, r2
 800100e:	61fb      	str	r3, [r7, #28]
			width = consolas_24_glyph_dsc[letter-32][0];
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	3b20      	subs	r3, #32
 8001014:	4a51      	ldr	r2, [pc, #324]	; (800115c <draw_cursive_letter+0x1f8>)
 8001016:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800101a:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 800101c:	2318      	movs	r3, #24
 800101e:	75fb      	strb	r3, [r7, #23]
 8001020:	e016      	b.n	8001050 <draw_cursive_letter+0xec>
		}
		else if(fontgrootte == SIZE_2)
 8001022:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001026:	2b02      	cmp	r3, #2
 8001028:	d112      	bne.n	8001050 <draw_cursive_letter+0xec>
		{
			start_letter= consolas_glyph_dsc[letter-32][1];
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	3b20      	subs	r3, #32
 800102e:	4a4d      	ldr	r2, [pc, #308]	; (8001164 <draw_cursive_letter+0x200>)
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	4413      	add	r3, r2
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	60fb      	str	r3, [r7, #12]
			glyph = &consolas_glyph_bitmap[start_letter];
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4a4b      	ldr	r2, [pc, #300]	; (8001168 <draw_cursive_letter+0x204>)
 800103c:	4413      	add	r3, r2
 800103e:	61fb      	str	r3, [r7, #28]
			width = consolas_glyph_dsc[letter-32][0];
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	3b20      	subs	r3, #32
 8001044:	4a47      	ldr	r2, [pc, #284]	; (8001164 <draw_cursive_letter+0x200>)
 8001046:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800104a:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 800104c:	2330      	movs	r3, #48	; 0x30
 800104e:	75fb      	strb	r3, [r7, #23]
		}
	}
	//next line test
		if(xd+width*2 >= VGA_DISPLAY_X)
 8001050:	88ba      	ldrh	r2, [r7, #4]
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800105c:	db06      	blt.n	800106c <draw_cursive_letter+0x108>
		{
			yd+=bitmap_height;
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	b29a      	uxth	r2, r3
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	4413      	add	r3, r2
 8001066:	807b      	strh	r3, [r7, #2]
			begin_x=5;//sets x value to the left +5 pixels
 8001068:	2305      	movs	r3, #5
 800106a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		}
	//end test
	if(width%8)
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <draw_cursive_letter+0x118>
		width += 8;
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	3308      	adds	r3, #8
 800107a:	623b      	str	r3, [r7, #32]
	angle = width; //sets angle offset for cursive letter
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	61bb      	str	r3, [r7, #24]
	if(fontgrootte == SIZE_1)
 8001080:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001084:	2b01      	cmp	r3, #1
 8001086:	d104      	bne.n	8001092 <draw_cursive_letter+0x12e>
		angle = angle/2;
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	0fda      	lsrs	r2, r3, #31
 800108c:	4413      	add	r3, r2
 800108e:	105b      	asrs	r3, r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
	width = (width/8);
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	2b00      	cmp	r3, #0
 8001096:	da00      	bge.n	800109a <draw_cursive_letter+0x136>
 8001098:	3307      	adds	r3, #7
 800109a:	10db      	asrs	r3, r3, #3
 800109c:	623b      	str	r3, [r7, #32]
	for(y_counter = 0; y_counter < bitmap_height; y_counter++)
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
 80010a2:	e03e      	b.n	8001122 <draw_cursive_letter+0x1be>
	{
		xd = begin_x;
 80010a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010a6:	80bb      	strh	r3, [r7, #4]
		for(x_counter = 0; x_counter < width; x_counter++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ac:	e02c      	b.n	8001108 <draw_cursive_letter+0x1a4>
		{
			for (int i = 7; i >= 0; i--)
 80010ae:	2307      	movs	r3, #7
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	e023      	b.n	80010fc <draw_cursive_letter+0x198>
			{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	3301      	adds	r3, #1
 80010b8:	6a3a      	ldr	r2, [r7, #32]
 80010ba:	fb03 f202 	mul.w	r2, r3, r2
 80010be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c0:	4413      	add	r3, r2
 80010c2:	461a      	mov	r2, r3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	4413      	add	r3, r2
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	fa42 f303 	asr.w	r3, r2, r3
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00a      	beq.n	80010f0 <draw_cursive_letter+0x18c>
					UB_VGA_SetPixel(xd+angle, yd, kleur);
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	88bb      	ldrh	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80010e8:	8879      	ldrh	r1, [r7, #2]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fdba 	bl	8002c64 <UB_VGA_SetPixel>
				xd++;
 80010f0:	88bb      	ldrh	r3, [r7, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	80bb      	strh	r3, [r7, #4]
			for (int i = 7; i >= 0; i--)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	dad8      	bge.n	80010b4 <draw_cursive_letter+0x150>
		for(x_counter = 0; x_counter < width; x_counter++)
 8001102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001104:	3301      	adds	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
 8001108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbce      	blt.n	80010ae <draw_cursive_letter+0x14a>
			}
		}
		angle--; //decreases offset for each y layer to create an angle
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	3b01      	subs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
		yd++;
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	3301      	adds	r3, #1
 800111a:	807b      	strh	r3, [r7, #2]
	for(y_counter = 0; y_counter < bitmap_height; y_counter++)
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	3301      	adds	r3, #1
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001126:	429a      	cmp	r2, r3
 8001128:	dbbc      	blt.n	80010a4 <draw_cursive_letter+0x140>
	}
	end_cords[0] = xd;
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	813b      	strh	r3, [r7, #8]
    end_cords[1] = yd-bitmap_height;
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	b29b      	uxth	r3, r3
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	b29b      	uxth	r3, r3
 8001138:	817b      	strh	r3, [r7, #10]
    cord_p = end_cords;
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
    return cord_p;
 8001140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001142:	4618      	mov	r0, r3
 8001144:	3734      	adds	r7, #52	; 0x34
 8001146:	46bd      	mov	sp, r7
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	bf00      	nop
 800114c:	0800f72c 	.word	0x0800f72c
 8001150:	0800e7b4 	.word	0x0800e7b4
 8001154:	0800e4bc 	.word	0x0800e4bc
 8001158:	0800b15c 	.word	0x0800b15c
 800115c:	0801416c 	.word	0x0801416c
 8001160:	0801311c 	.word	0x0801311c
 8001164:	08012e1c 	.word	0x08012e1c
 8001168:	0800fa2c 	.word	0x0800fa2c

0800116c <draw_fat_letter>:


uint16_t * draw_fat_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b08d      	sub	sp, #52	; 0x34
 8001170:	af00      	add	r7, sp, #0
 8001172:	4604      	mov	r4, r0
 8001174:	4608      	mov	r0, r1
 8001176:	4611      	mov	r1, r2
 8001178:	461a      	mov	r2, r3
 800117a:	4623      	mov	r3, r4
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	4603      	mov	r3, r0
 8001180:	71bb      	strb	r3, [r7, #6]
 8001182:	460b      	mov	r3, r1
 8001184:	80bb      	strh	r3, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	807b      	strh	r3, [r7, #2]
	uint16_t end_cords[2];
	uint16_t begin_x = xd;
 800118a:	88bb      	ldrh	r3, [r7, #4]
 800118c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int width;
	const uint8_t* glyph;
	int start_letter;
	uint8_t bitmap_height;

	if(letter_type == ARIAL)
 800118e:	79bb      	ldrb	r3, [r7, #6]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d12f      	bne.n	80011f4 <draw_fat_letter+0x88>
	{
		if(fontgrootte == SIZE_1)
 8001194:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001198:	2b01      	cmp	r3, #1
 800119a:	d113      	bne.n	80011c4 <draw_fat_letter+0x58>
		{
			start_letter= arial_24_glyph_dsc[letter-32][1];
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	3b20      	subs	r3, #32
 80011a0:	4a71      	ldr	r2, [pc, #452]	; (8001368 <draw_fat_letter+0x1fc>)
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4413      	add	r3, r2
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	613b      	str	r3, [r7, #16]
			glyph = &arial_24_glyph_bitmap[start_letter];
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4a6f      	ldr	r2, [pc, #444]	; (800136c <draw_fat_letter+0x200>)
 80011ae:	4413      	add	r3, r2
 80011b0:	61fb      	str	r3, [r7, #28]
			width = arial_24_glyph_dsc[letter-32][0];
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	3b20      	subs	r3, #32
 80011b6:	4a6c      	ldr	r2, [pc, #432]	; (8001368 <draw_fat_letter+0x1fc>)
 80011b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011bc:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 80011be:	2318      	movs	r3, #24
 80011c0:	76fb      	strb	r3, [r7, #27]
 80011c2:	e049      	b.n	8001258 <draw_fat_letter+0xec>
		}
		else if(fontgrootte == SIZE_2)
 80011c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d145      	bne.n	8001258 <draw_fat_letter+0xec>
		{
			start_letter= arial_glyph_dsc[letter-32][1];
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	3b20      	subs	r3, #32
 80011d0:	4a67      	ldr	r2, [pc, #412]	; (8001370 <draw_fat_letter+0x204>)
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4413      	add	r3, r2
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
			glyph = &arial_glyph_bitmap[start_letter];
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4a65      	ldr	r2, [pc, #404]	; (8001374 <draw_fat_letter+0x208>)
 80011de:	4413      	add	r3, r2
 80011e0:	61fb      	str	r3, [r7, #28]
			width = arial_glyph_dsc[letter-32][0];
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	3b20      	subs	r3, #32
 80011e6:	4a62      	ldr	r2, [pc, #392]	; (8001370 <draw_fat_letter+0x204>)
 80011e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011ec:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 80011ee:	2330      	movs	r3, #48	; 0x30
 80011f0:	76fb      	strb	r3, [r7, #27]
 80011f2:	e031      	b.n	8001258 <draw_fat_letter+0xec>
		}
	}
	else if(letter_type == CONSOLAS)
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d12e      	bne.n	8001258 <draw_fat_letter+0xec>
	{
		if(fontgrootte == SIZE_1)
 80011fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d113      	bne.n	800122a <draw_fat_letter+0xbe>
		{
			start_letter= consolas_24_glyph_dsc[letter-32][1];
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	3b20      	subs	r3, #32
 8001206:	4a5c      	ldr	r2, [pc, #368]	; (8001378 <draw_fat_letter+0x20c>)
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	613b      	str	r3, [r7, #16]
			glyph = &consolas_24_glyph_bitmap[start_letter];
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4a5a      	ldr	r2, [pc, #360]	; (800137c <draw_fat_letter+0x210>)
 8001214:	4413      	add	r3, r2
 8001216:	61fb      	str	r3, [r7, #28]
			width = consolas_24_glyph_dsc[letter-32][0];
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	3b20      	subs	r3, #32
 800121c:	4a56      	ldr	r2, [pc, #344]	; (8001378 <draw_fat_letter+0x20c>)
 800121e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001222:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 8001224:	2318      	movs	r3, #24
 8001226:	76fb      	strb	r3, [r7, #27]
 8001228:	e016      	b.n	8001258 <draw_fat_letter+0xec>
		}
		else if(fontgrootte == SIZE_2)
 800122a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800122e:	2b02      	cmp	r3, #2
 8001230:	d112      	bne.n	8001258 <draw_fat_letter+0xec>
		{
			start_letter= consolas_glyph_dsc[letter-32][1];
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	3b20      	subs	r3, #32
 8001236:	4a52      	ldr	r2, [pc, #328]	; (8001380 <draw_fat_letter+0x214>)
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	613b      	str	r3, [r7, #16]
			glyph = &consolas_glyph_bitmap[start_letter];
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4a50      	ldr	r2, [pc, #320]	; (8001384 <draw_fat_letter+0x218>)
 8001244:	4413      	add	r3, r2
 8001246:	61fb      	str	r3, [r7, #28]
			width = consolas_glyph_dsc[letter-32][0];
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	3b20      	subs	r3, #32
 800124c:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <draw_fat_letter+0x214>)
 800124e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001252:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 8001254:	2330      	movs	r3, #48	; 0x30
 8001256:	76fb      	strb	r3, [r7, #27]
		}
	}
	//next line test
	if(xd+width+THICKNESS >= VGA_DISPLAY_X)
 8001258:	88ba      	ldrh	r2, [r7, #4]
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	4413      	add	r3, r2
 800125e:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 8001262:	dd06      	ble.n	8001272 <draw_fat_letter+0x106>
	{
		yd+=bitmap_height;
 8001264:	7efb      	ldrb	r3, [r7, #27]
 8001266:	b29a      	uxth	r2, r3
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	4413      	add	r3, r2
 800126c:	807b      	strh	r3, [r7, #2]
		begin_x=5;//sets x value to the left +5 pixels
 800126e:	2305      	movs	r3, #5
 8001270:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
//end test
	if(width%8)
 8001272:	6a3b      	ldr	r3, [r7, #32]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <draw_fat_letter+0x116>
		width += 8;
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	3308      	adds	r3, #8
 8001280:	623b      	str	r3, [r7, #32]
	width = (width/8);
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	2b00      	cmp	r3, #0
 8001286:	da00      	bge.n	800128a <draw_fat_letter+0x11e>
 8001288:	3307      	adds	r3, #7
 800128a:	10db      	asrs	r3, r3, #3
 800128c:	623b      	str	r3, [r7, #32]
	if(width == 0)
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <draw_fat_letter+0x12e>
		width++;
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	3301      	adds	r3, #1
 8001298:	623b      	str	r3, [r7, #32]

	for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e04e      	b.n	800133e <draw_fat_letter+0x1d2>
	{
		xd = begin_x;
 80012a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80012a2:	80bb      	strh	r3, [r7, #4]
		for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80012a8:	e03f      	b.n	800132a <draw_fat_letter+0x1be>
		{
			for (int i = 7; i >= 0; i--)
 80012aa:	2307      	movs	r3, #7
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e036      	b.n	800131e <draw_fat_letter+0x1b2>
			{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	3301      	adds	r3, #1
 80012b4:	6a3a      	ldr	r2, [r7, #32]
 80012b6:	fb03 f202 	mul.w	r2, r3, r2
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	4413      	add	r3, r2
 80012be:	461a      	mov	r2, r3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa42 f303 	asr.w	r3, r2, r3
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d01d      	beq.n	8001312 <draw_fat_letter+0x1a6>
				{
					UB_VGA_SetPixel(xd, yd, kleur);
 80012d6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80012da:	8879      	ldrh	r1, [r7, #2]
 80012dc:	88bb      	ldrh	r3, [r7, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fcc0 	bl	8002c64 <UB_VGA_SetPixel>
					xd++;
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	3301      	adds	r3, #1
 80012e8:	80bb      	strh	r3, [r7, #4]
					UB_VGA_SetPixel(xd, yd, kleur);
 80012ea:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80012ee:	8879      	ldrh	r1, [r7, #2]
 80012f0:	88bb      	ldrh	r3, [r7, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 fcb6 	bl	8002c64 <UB_VGA_SetPixel>
					xd++;
 80012f8:	88bb      	ldrh	r3, [r7, #4]
 80012fa:	3301      	adds	r3, #1
 80012fc:	80bb      	strh	r3, [r7, #4]
					UB_VGA_SetPixel(xd, yd, kleur);
 80012fe:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001302:	8879      	ldrh	r1, [r7, #2]
 8001304:	88bb      	ldrh	r3, [r7, #4]
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fcac 	bl	8002c64 <UB_VGA_SetPixel>
					xd-=2;
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	3b02      	subs	r3, #2
 8001310:	80bb      	strh	r3, [r7, #4]
				}
				xd++;
 8001312:	88bb      	ldrh	r3, [r7, #4]
 8001314:	3301      	adds	r3, #1
 8001316:	80bb      	strh	r3, [r7, #4]
			for (int i = 7; i >= 0; i--)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	3b01      	subs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b00      	cmp	r3, #0
 8001322:	dac5      	bge.n	80012b0 <draw_fat_letter+0x144>
		for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	3301      	adds	r3, #1
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
 800132a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	429a      	cmp	r2, r3
 8001330:	dbbb      	blt.n	80012aa <draw_fat_letter+0x13e>
			}
		}
		yd++;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	3301      	adds	r3, #1
 8001336:	807b      	strh	r3, [r7, #2]
	for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	3301      	adds	r3, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	7efb      	ldrb	r3, [r7, #27]
 8001340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001342:	429a      	cmp	r2, r3
 8001344:	dbac      	blt.n	80012a0 <draw_fat_letter+0x134>
	}
	end_cords[0] = xd;
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	81bb      	strh	r3, [r7, #12]
    end_cords[1] = yd-bitmap_height;
 800134a:	7efb      	ldrb	r3, [r7, #27]
 800134c:	b29b      	uxth	r3, r3
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	b29b      	uxth	r3, r3
 8001354:	81fb      	strh	r3, [r7, #14]
    cord_p = end_cords;
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	64bb      	str	r3, [r7, #72]	; 0x48
	return cord_p;
 800135c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800135e:	4618      	mov	r0, r3
 8001360:	3734      	adds	r7, #52	; 0x34
 8001362:	46bd      	mov	sp, r7
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	bf00      	nop
 8001368:	0800f72c 	.word	0x0800f72c
 800136c:	0800e7b4 	.word	0x0800e7b4
 8001370:	0800e4bc 	.word	0x0800e4bc
 8001374:	0800b15c 	.word	0x0800b15c
 8001378:	0801416c 	.word	0x0801416c
 800137c:	0801311c 	.word	0x0801311c
 8001380:	08012e1c 	.word	0x08012e1c
 8001384:	0800fa2c 	.word	0x0800fa2c

08001388 <API_read_bitmap_SD>:
 *
 * @return Returns an error if error or returns nothing
 *
 *****************************************************************************/
int API_read_bitmap_SD(char *nr, uint16_t x_lup, uint16_t y_lup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 800138e:	af00      	add	r7, sp, #0
 8001390:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001394:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001398:	6018      	str	r0, [r3, #0]
 800139a:	4608      	mov	r0, r1
 800139c:	4611      	mov	r1, r2
 800139e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80013a2:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 80013a6:	4602      	mov	r2, r0
 80013a8:	801a      	strh	r2, [r3, #0]
 80013aa:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80013ae:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80013b2:	460a      	mov	r2, r1
 80013b4:	801a      	strh	r2, [r3, #0]

	// Fatfs variables
	FATFS FatFs;
    FIL fil; 		//File handle
    FRESULT fres; 	//Result after operations
    UINT SizeofBuffer = 30;
 80013b6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80013ba:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80013be:	221e      	movs	r2, #30
 80013c0:	601a      	str	r2, [r3, #0]

    //Reading buffer
    uint k = 0; // kijken welk variable we zijn
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

    //Position vga
    uint16_t xp,yp,xp2,yp2;

    xp2 = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
    yp2 = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac

    //Information from file system
    unsigned int Height,Width;

    //Creating decimal shift register
	unsigned int ColourFile = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	unsigned int DecimalshiftBuff = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498

	unsigned char i;

	char readBuf[30];

	TCHAR File[] = "00.txt";
 80013e0:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80013e4:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80013e8:	4a92      	ldr	r2, [pc, #584]	; (8001634 <API_read_bitmap_SD+0x2ac>)
 80013ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ee:	6018      	str	r0, [r3, #0]
 80013f0:	3304      	adds	r3, #4
 80013f2:	8019      	strh	r1, [r3, #0]
 80013f4:	3302      	adds	r3, #2
 80013f6:	0c0a      	lsrs	r2, r1, #16
 80013f8:	701a      	strb	r2, [r3, #0]

	File[0] = nr[0];		// checked
 80013fa:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80013fe:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800140a:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 800140e:	701a      	strb	r2, [r3, #0]
	File[1] = nr[1];
 8001410:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001414:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	785a      	ldrb	r2, [r3, #1]
 800141c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001420:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001424:	705a      	strb	r2, [r3, #1]

	xp = x_lup;
 8001426:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800142a:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
	yp = y_lup;
 8001434:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001438:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0


    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001442:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001446:	2201      	movs	r2, #1
 8001448:	497b      	ldr	r1, [pc, #492]	; (8001638 <API_read_bitmap_SD+0x2b0>)
 800144a:	4618      	mov	r0, r3
 800144c:	f007 ff7a 	bl	8009344 <f_mount>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK)
 8001456:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <API_read_bitmap_SD+0xe6>
    {
    	printf("f_mount error (%i)\r\n", fres);
 800145e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001462:	4619      	mov	r1, r3
 8001464:	4875      	ldr	r0, [pc, #468]	; (800163c <API_read_bitmap_SD+0x2b4>)
 8001466:	f008 fbf5 	bl	8009c54 <iprintf>
    	return 0; //error
 800146a:	2300      	movs	r3, #0
 800146c:	e0dc      	b.n	8001628 <API_read_bitmap_SD+0x2a0>
    }

	fres = f_open(&fil, File, FA_READ);
 800146e:	f107 0108 	add.w	r1, r7, #8
 8001472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001476:	2201      	movs	r2, #1
 8001478:	4618      	mov	r0, r3
 800147a:	f007 ffa9 	bl	80093d0 <f_open>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	if (fres != FR_OK)
 8001484:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80ba 	beq.w	8001602 <API_read_bitmap_SD+0x27a>
	{
		printf("f_open error (%i)\r\n",fres);
 800148e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001492:	4619      	mov	r1, r3
 8001494:	486a      	ldr	r0, [pc, #424]	; (8001640 <API_read_bitmap_SD+0x2b8>)
 8001496:	f008 fbdd 	bl	8009c54 <iprintf>
		return 0; //error
 800149a:	2300      	movs	r3, #0
 800149c:	e0c4      	b.n	8001628 <API_read_bitmap_SD+0x2a0>
	}


	while (SizeofBuffer == 30)
	{
		f_read(&fil,(void*)readBuf, 30, &SizeofBuffer);
 800149e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a2:	f107 0110 	add.w	r1, r7, #16
 80014a6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80014aa:	221e      	movs	r2, #30
 80014ac:	f008 f94e 	bl	800974c <f_read>
		for (i=0; i<SizeofBuffer; i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 80014b6:	e09a      	b.n	80015ee <API_read_bitmap_SD+0x266>
		{

			if (readBuf[i] != 32)
 80014b8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80014bc:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80014c0:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	2b20      	cmp	r3, #32
 80014c8:	d019      	beq.n	80014fe <API_read_bitmap_SD+0x176>
			{
				DecimalshiftBuff = readBuf[i]-'0';
 80014ca:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80014ce:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80014d2:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 80014d6:	5cd3      	ldrb	r3, [r2, r3]
 80014d8:	3b30      	subs	r3, #48	; 0x30
 80014da:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
				ColourFile *= 10;
 80014de:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
				ColourFile += DecimalshiftBuff;
 80014ee:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80014f2:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80014f6:	4413      	add	r3, r2
 80014f8:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 80014fc:	e072      	b.n	80015e4 <API_read_bitmap_SD+0x25c>
			}

			else if(readBuf[i] == 32)
 80014fe:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001502:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8001506:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	2b20      	cmp	r3, #32
 800150e:	d169      	bne.n	80015e4 <API_read_bitmap_SD+0x25c>
			{
				if (k > 1)
 8001510:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001514:	2b01      	cmp	r3, #1
 8001516:	d94c      	bls.n	80015b2 <API_read_bitmap_SD+0x22a>
				{
					if (xp < VGA_DISPLAY_X && yp < VGA_DISPLAY_Y)
 8001518:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 800151c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001520:	d212      	bcs.n	8001548 <API_read_bitmap_SD+0x1c0>
 8001522:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8001526:	2bef      	cmp	r3, #239	; 0xef
 8001528:	d80e      	bhi.n	8001548 <API_read_bitmap_SD+0x1c0>
					{
						VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = ColourFile;
 800152a:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	; 0x4b0
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	019b      	lsls	r3, r3, #6
 8001536:	441a      	add	r2, r3
 8001538:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 800153c:	4413      	add	r3, r2
 800153e:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001542:	b2d1      	uxtb	r1, r2
 8001544:	4a3f      	ldr	r2, [pc, #252]	; (8001644 <API_read_bitmap_SD+0x2bc>)
 8001546:	54d1      	strb	r1, [r2, r3]
					}

					UB_VGA_SetPixel(xp, yp, ColourFile);
 8001548:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 800154c:	b2da      	uxtb	r2, r3
 800154e:	f8b7 14b0 	ldrh.w	r1, [r7, #1200]	; 0x4b0
 8001552:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001556:	4618      	mov	r0, r3
 8001558:	f001 fb84 	bl	8002c64 <UB_VGA_SetPixel>
					xp++;
 800155c:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001560:	3301      	adds	r3, #1
 8001562:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
					xp2++;
 8001566:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 800156a:	3301      	adds	r3, #1
 800156c:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					if (xp2 >= Width)
 8001570:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8001574:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8001578:	429a      	cmp	r2, r3
 800157a:	d813      	bhi.n	80015a4 <API_read_bitmap_SD+0x21c>
					{
						yp++;
 800157c:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8001580:	3301      	adds	r3, #1
 8001582:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0
						yp2++;
 8001586:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 800158a:	3301      	adds	r3, #1
 800158c:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac
						xp = x_lup;
 8001590:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001594:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
						xp2 = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					}
					if (yp2 == Height)
 80015a4:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 80015a8:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d111      	bne.n	80015d4 <API_read_bitmap_SD+0x24c>
					{
						break;
 80015b0:	e027      	b.n	8001602 <API_read_bitmap_SD+0x27a>
					}
				}
				else if (k == 0) // Hoogte van de bit map
 80015b2:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d104      	bne.n	80015c4 <API_read_bitmap_SD+0x23c>
				{
					Height = ColourFile;
 80015ba:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80015be:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 80015c2:	e007      	b.n	80015d4 <API_read_bitmap_SD+0x24c>
				}
				else if (k == 1)
 80015c4:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d103      	bne.n	80015d4 <API_read_bitmap_SD+0x24c>
				{
					Width = ColourFile;
 80015cc:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80015d0:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
				}

				k++;
 80015d4:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80015d8:	3301      	adds	r3, #1
 80015da:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
				ColourFile = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
		for (i=0; i<SizeofBuffer; i++)
 80015e4:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80015e8:	3301      	adds	r3, #1
 80015ea:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 80015ee:	f897 249f 	ldrb.w	r2, [r7, #1183]	; 0x49f
 80015f2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80015f6:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f4ff af5b 	bcc.w	80014b8 <API_read_bitmap_SD+0x130>
	while (SizeofBuffer == 30)
 8001602:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001606:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b1e      	cmp	r3, #30
 800160e:	f43f af46 	beq.w	800149e <API_read_bitmap_SD+0x116>
			}

		}
	}

	f_close(&fil);
 8001612:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001616:	4618      	mov	r0, r3
 8001618:	f008 fa55 	bl	8009ac6 <f_close>

    f_mount(NULL, "", 0);
 800161c:	2200      	movs	r2, #0
 800161e:	4906      	ldr	r1, [pc, #24]	; (8001638 <API_read_bitmap_SD+0x2b0>)
 8001620:	2000      	movs	r0, #0
 8001622:	f007 fe8f 	bl	8009344 <f_mount>

	return 0;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	f507 6797 	add.w	r7, r7, #1208	; 0x4b8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	0800acb8 	.word	0x0800acb8
 8001638:	0800ac88 	.word	0x0800ac88
 800163c:	0800ac8c 	.word	0x0800ac8c
 8001640:	0800aca4 	.word	0x0800aca4
 8001644:	2000100c 	.word	0x2000100c

08001648 <API_blur_screen>:
 *
 * @return Returns an error if error or returns nothing
 *
 *****************************************************************************/
int API_blur_screen()
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
	uint16_t xp, yp;
	uint16_t xp_2, yp_2;
	uint16_t sum = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 8001656:	2300      	movs	r3, #0
 8001658:	81bb      	strh	r3, [r7, #12]
 800165a:	e06d      	b.n	8001738 <API_blur_screen+0xf0>
	{
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 800165c:	2300      	movs	r3, #0
 800165e:	81fb      	strh	r3, [r7, #14]
 8001660:	e063      	b.n	800172a <API_blur_screen+0xe2>
	  {
	    sum = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	80fb      	strh	r3, [r7, #6]
	    i = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 800166a:	89bb      	ldrh	r3, [r7, #12]
 800166c:	813b      	strh	r3, [r7, #8]
 800166e:	e022      	b.n	80016b6 <API_blur_screen+0x6e>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	817b      	strh	r3, [r7, #10]
 8001674:	e013      	b.n	800169e <API_blur_screen+0x56>
	      {
	        sum += VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2];
 8001676:	893a      	ldrh	r2, [r7, #8]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	019b      	lsls	r3, r3, #6
 8001680:	441a      	add	r2, r3
 8001682:	897b      	ldrh	r3, [r7, #10]
 8001684:	4413      	add	r3, r2
 8001686:	4a31      	ldr	r2, [pc, #196]	; (800174c <API_blur_screen+0x104>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	b29a      	uxth	r2, r3
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	4413      	add	r3, r2
 8001690:	80fb      	strh	r3, [r7, #6]
	        i++;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	3301      	adds	r3, #1
 8001696:	603b      	str	r3, [r7, #0]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001698:	897b      	ldrh	r3, [r7, #10]
 800169a:	3301      	adds	r3, #1
 800169c:	817b      	strh	r3, [r7, #10]
 800169e:	89fb      	ldrh	r3, [r7, #14]
 80016a0:	1c9a      	adds	r2, r3, #2
 80016a2:	897b      	ldrh	r3, [r7, #10]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	db03      	blt.n	80016b0 <API_blur_screen+0x68>
 80016a8:	897b      	ldrh	r3, [r7, #10]
 80016aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80016ae:	d3e2      	bcc.n	8001676 <API_blur_screen+0x2e>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 80016b0:	893b      	ldrh	r3, [r7, #8]
 80016b2:	3301      	adds	r3, #1
 80016b4:	813b      	strh	r3, [r7, #8]
 80016b6:	89bb      	ldrh	r3, [r7, #12]
 80016b8:	1c9a      	adds	r2, r3, #2
 80016ba:	893b      	ldrh	r3, [r7, #8]
 80016bc:	429a      	cmp	r2, r3
 80016be:	db02      	blt.n	80016c6 <API_blur_screen+0x7e>
 80016c0:	893b      	ldrh	r3, [r7, #8]
 80016c2:	2bef      	cmp	r3, #239	; 0xef
 80016c4:	d9d4      	bls.n	8001670 <API_blur_screen+0x28>
	      }
	    }
	    sum /= 9;
 80016c6:	88fb      	ldrh	r3, [r7, #6]
 80016c8:	4a21      	ldr	r2, [pc, #132]	; (8001750 <API_blur_screen+0x108>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	80fb      	strh	r3, [r7, #6]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 80016d2:	89bb      	ldrh	r3, [r7, #12]
 80016d4:	813b      	strh	r3, [r7, #8]
 80016d6:	e01d      	b.n	8001714 <API_blur_screen+0xcc>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 80016d8:	89fb      	ldrh	r3, [r7, #14]
 80016da:	817b      	strh	r3, [r7, #10]
 80016dc:	e00e      	b.n	80016fc <API_blur_screen+0xb4>
	      {
	        VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2] = sum;
 80016de:	893a      	ldrh	r2, [r7, #8]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	019b      	lsls	r3, r3, #6
 80016e8:	441a      	add	r2, r3
 80016ea:	897b      	ldrh	r3, [r7, #10]
 80016ec:	4413      	add	r3, r2
 80016ee:	88fa      	ldrh	r2, [r7, #6]
 80016f0:	b2d1      	uxtb	r1, r2
 80016f2:	4a16      	ldr	r2, [pc, #88]	; (800174c <API_blur_screen+0x104>)
 80016f4:	54d1      	strb	r1, [r2, r3]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 80016f6:	897b      	ldrh	r3, [r7, #10]
 80016f8:	3301      	adds	r3, #1
 80016fa:	817b      	strh	r3, [r7, #10]
 80016fc:	89fb      	ldrh	r3, [r7, #14]
 80016fe:	1c9a      	adds	r2, r3, #2
 8001700:	897b      	ldrh	r3, [r7, #10]
 8001702:	429a      	cmp	r2, r3
 8001704:	db03      	blt.n	800170e <API_blur_screen+0xc6>
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800170c:	d3e7      	bcc.n	80016de <API_blur_screen+0x96>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 800170e:	893b      	ldrh	r3, [r7, #8]
 8001710:	3301      	adds	r3, #1
 8001712:	813b      	strh	r3, [r7, #8]
 8001714:	89bb      	ldrh	r3, [r7, #12]
 8001716:	1c9a      	adds	r2, r3, #2
 8001718:	893b      	ldrh	r3, [r7, #8]
 800171a:	429a      	cmp	r2, r3
 800171c:	db02      	blt.n	8001724 <API_blur_screen+0xdc>
 800171e:	893b      	ldrh	r3, [r7, #8]
 8001720:	2bef      	cmp	r3, #239	; 0xef
 8001722:	d9d9      	bls.n	80016d8 <API_blur_screen+0x90>
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	3301      	adds	r3, #1
 8001728:	81fb      	strh	r3, [r7, #14]
 800172a:	89fb      	ldrh	r3, [r7, #14]
 800172c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001730:	d397      	bcc.n	8001662 <API_blur_screen+0x1a>
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 8001732:	89bb      	ldrh	r3, [r7, #12]
 8001734:	3301      	adds	r3, #1
 8001736:	81bb      	strh	r3, [r7, #12]
 8001738:	89bb      	ldrh	r3, [r7, #12]
 800173a:	2bef      	cmp	r3, #239	; 0xef
 800173c:	d98e      	bls.n	800165c <API_blur_screen+0x14>
	      }
	    }
	  }
	}
	return 0;
 800173e:	2300      	movs	r3, #0
	}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	2000100c 	.word	0x2000100c
 8001750:	38e38e39 	.word	0x38e38e39

08001754 <wacht>:
 *
 * @return
 *
 *****************************************************************************/
unsigned int wacht(uint16_t msecs)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(msecs);
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fb19 	bl	8002d98 <HAL_Delay>
	return 1;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <API_err_handler>:

void API_err_handler(int API_err_in)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	switch(API_err_in)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d85f      	bhi.n	8001840 <API_err_handler+0xd0>
 8001780:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <API_err_handler+0x18>)
 8001782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001786:	bf00      	nop
 8001788:	080017c9 	.word	0x080017c9
 800178c:	080017d1 	.word	0x080017d1
 8001790:	080017d9 	.word	0x080017d9
 8001794:	080017e1 	.word	0x080017e1
 8001798:	080017e9 	.word	0x080017e9
 800179c:	080017f1 	.word	0x080017f1
 80017a0:	080017f9 	.word	0x080017f9
 80017a4:	08001801 	.word	0x08001801
 80017a8:	08001809 	.word	0x08001809
 80017ac:	08001811 	.word	0x08001811
 80017b0:	08001819 	.word	0x08001819
 80017b4:	08001821 	.word	0x08001821
 80017b8:	08001829 	.word	0x08001829
 80017bc:	08001831 	.word	0x08001831
 80017c0:	08001841 	.word	0x08001841
 80017c4:	08001839 	.word	0x08001839
	{
	case INVALID_MESSAGE:
		printf("dit bericht is niet volgens de richtlijnen, type help voor meer informatie");
 80017c8:	4824      	ldr	r0, [pc, #144]	; (800185c <API_err_handler+0xec>)
 80017ca:	f008 fa43 	bl	8009c54 <iprintf>
		break;
 80017ce:	e03b      	b.n	8001848 <API_err_handler+0xd8>
	case X_OUT_OF_BOUNDS:
		printf("Een van de ingevulde X coördinaten is niet geldig, X mag niet groter zijn dan 320");
 80017d0:	4823      	ldr	r0, [pc, #140]	; (8001860 <API_err_handler+0xf0>)
 80017d2:	f008 fa3f 	bl	8009c54 <iprintf>
		break;
 80017d6:	e037      	b.n	8001848 <API_err_handler+0xd8>
	case Y_OUT_OF_BOUNDS:
		printf("Een van de ingevulde Y coördinaten is niet geldig, X mag niet groter zijn dan 240");
 80017d8:	4822      	ldr	r0, [pc, #136]	; (8001864 <API_err_handler+0xf4>)
 80017da:	f008 fa3b 	bl	8009c54 <iprintf>
		break;
 80017de:	e033      	b.n	8001848 <API_err_handler+0xd8>
	case NOT_A_NUMBER:
		printf("Op de plek waar je een getal in moet vullen heb je iets anders ingevuld");
 80017e0:	4821      	ldr	r0, [pc, #132]	; (8001868 <API_err_handler+0xf8>)
 80017e2:	f008 fa37 	bl	8009c54 <iprintf>
		break;
 80017e6:	e02f      	b.n	8001848 <API_err_handler+0xd8>
	case NOT_A_CHARACTER:
		printf("Op de plek waar je een character in moet vullen heb je iets anders ingevuld");
 80017e8:	4820      	ldr	r0, [pc, #128]	; (800186c <API_err_handler+0xfc>)
 80017ea:	f008 fa33 	bl	8009c54 <iprintf>
		break;
 80017ee:	e02b      	b.n	8001848 <API_err_handler+0xd8>
	case UNKNOWN_COLOR:
		printf("de kleur die je hebt uitgekozen staat niet in de lijst van mogelijke kleuren");
 80017f0:	481f      	ldr	r0, [pc, #124]	; (8001870 <API_err_handler+0x100>)
 80017f2:	f008 fa2f 	bl	8009c54 <iprintf>
		break;
 80017f6:	e027      	b.n	8001848 <API_err_handler+0xd8>
	case UNKNOWN_BITMAP:
		printf("de bitmap die je zoekt staat niet het lijst van mogelijke bitmaps");
 80017f8:	481e      	ldr	r0, [pc, #120]	; (8001874 <API_err_handler+0x104>)
 80017fa:	f008 fa2b 	bl	8009c54 <iprintf>
		break;
 80017fe:	e023      	b.n	8001848 <API_err_handler+0xd8>
	case UNKNOWN_FONT:
		printf("de font die je invult is niet bekent. probeer arial of consolas");
 8001800:	481d      	ldr	r0, [pc, #116]	; (8001878 <API_err_handler+0x108>)
 8001802:	f008 fa27 	bl	8009c54 <iprintf>
		break;
 8001806:	e01f      	b.n	8001848 <API_err_handler+0xd8>
	case UNKNOWN_FONT_SIZE:
		printf("de size die je hier invult is niet geldig. probeer 1 of 2");
 8001808:	481c      	ldr	r0, [pc, #112]	; (800187c <API_err_handler+0x10c>)
 800180a:	f008 fa23 	bl	8009c54 <iprintf>
		break;
 800180e:	e01b      	b.n	8001848 <API_err_handler+0xd8>
	case UNKNOWN_FONT_STYLE:
		printf("de stijl die je invult is niet bekent. probeer normaal, vet of cursief");
 8001810:	481b      	ldr	r0, [pc, #108]	; (8001880 <API_err_handler+0x110>)
 8001812:	f008 fa1f 	bl	8009c54 <iprintf>
		break;
 8001816:	e017      	b.n	8001848 <API_err_handler+0xd8>
	case UNKNOWN_FUNCTION:
		printf("de functie die je invult bestaat niet");
 8001818:	481a      	ldr	r0, [pc, #104]	; (8001884 <API_err_handler+0x114>)
 800181a:	f008 fa1b 	bl	8009c54 <iprintf>
		break;
 800181e:	e013      	b.n	8001848 <API_err_handler+0xd8>
	case Y_TO_HIGH:
		printf("de functie gaat de maximale y waarde voorbij");
 8001820:	4819      	ldr	r0, [pc, #100]	; (8001888 <API_err_handler+0x118>)
 8001822:	f008 fa17 	bl	8009c54 <iprintf>
		break;
 8001826:	e00f      	b.n	8001848 <API_err_handler+0xd8>
	case X_TO_HIGH:
		printf("de functie gaat de maximale x waarde voorbij");
 8001828:	4818      	ldr	r0, [pc, #96]	; (800188c <API_err_handler+0x11c>)
 800182a:	f008 fa13 	bl	8009c54 <iprintf>
		break;
 800182e:	e00b      	b.n	8001848 <API_err_handler+0xd8>
	case NO_SD_CARD_DETECTED:
		printf("er is geen SD kaart aanwezig, check SD kaart slot");
 8001830:	4817      	ldr	r0, [pc, #92]	; (8001890 <API_err_handler+0x120>)
 8001832:	f008 fa0f 	bl	8009c54 <iprintf>
		break;
 8001836:	e007      	b.n	8001848 <API_err_handler+0xd8>
	case NO_COMMA_DETECTED:
		printf("er mist een , tussen de verschillende onderdelen van je message");
 8001838:	4816      	ldr	r0, [pc, #88]	; (8001894 <API_err_handler+0x124>)
 800183a:	f008 fa0b 	bl	8009c54 <iprintf>
		break;
 800183e:	e003      	b.n	8001848 <API_err_handler+0xd8>
	default:
		printf("onbekende error");
 8001840:	4815      	ldr	r0, [pc, #84]	; (8001898 <API_err_handler+0x128>)
 8001842:	f008 fa07 	bl	8009c54 <iprintf>
		break;
 8001846:	bf00      	nop
	}
	printf("\n type help voor meer informatie");
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <API_err_handler+0x12c>)
 800184a:	f008 fa03 	bl	8009c54 <iprintf>
	main();
 800184e:	f000 fbc7 	bl	8001fe0 <main>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	0800acc0 	.word	0x0800acc0
 8001860:	0800ad0c 	.word	0x0800ad0c
 8001864:	0800ad60 	.word	0x0800ad60
 8001868:	0800adb4 	.word	0x0800adb4
 800186c:	0800adfc 	.word	0x0800adfc
 8001870:	0800ae48 	.word	0x0800ae48
 8001874:	0800ae98 	.word	0x0800ae98
 8001878:	0800aedc 	.word	0x0800aedc
 800187c:	0800af1c 	.word	0x0800af1c
 8001880:	0800af58 	.word	0x0800af58
 8001884:	0800afa0 	.word	0x0800afa0
 8001888:	0800afc8 	.word	0x0800afc8
 800188c:	0800aff8 	.word	0x0800aff8
 8001890:	0800b028 	.word	0x0800b028
 8001894:	0800b05c 	.word	0x0800b05c
 8001898:	0800b09c 	.word	0x0800b09c
 800189c:	0800b0ac 	.word	0x0800b0ac

080018a0 <LogicLayer_Parser>:




Message_parser LogicLayer_Parser(char *Message, unsigned int Messagelength)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	f6ad 1de8 	subw	sp, sp, #2536	; 0x9e8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80018ac:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 80018b0:	6018      	str	r0, [r3, #0]
 80018b2:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80018b6:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 80018ba:	6019      	str	r1, [r3, #0]
 80018bc:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80018c0:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 80018c4:	601a      	str	r2, [r3, #0]
	unsigned int i,j,k,l = 0;			// Maak iterators aan voor het maken van een moving window langs de buffer message
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
	i = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4
	j = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0
	k = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc


	Message_parser localParser;

	  while (Message[i] != 0) 	// Kijk voor line end
 80018de:	e08b      	b.n	80019f8 <LogicLayer_Parser+0x158>
	  {

		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 80018e0:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 80018e4:	3301      	adds	r3, #1
 80018e6:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 80018ea:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80018ee:	f6a3 13e4 	subw	r3, r3, #2532	; 0x9e4
 80018f2:	f8d7 29e4 	ldr.w	r2, [r7, #2532]	; 0x9e4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d903      	bls.n	8001904 <LogicLayer_Parser+0x64>
			  {
				  printf("Error , not detected \n");
 80018fc:	4855      	ldr	r0, [pc, #340]	; (8001a54 <LogicLayer_Parser+0x1b4>)
 80018fe:	f008 fa2f 	bl	8009d60 <puts>
				  break;
 8001902:	e015      	b.n	8001930 <LogicLayer_Parser+0x90>
		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
 8001904:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8001908:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b2c      	cmp	r3, #44	; 0x2c
 8001918:	d00a      	beq.n	8001930 <LogicLayer_Parser+0x90>
 800191a:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 800191e:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1d7      	bne.n	80018e0 <LogicLayer_Parser+0x40>
			  }
		  }

	  	  for (l=0; j<i; j++)
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 8001936:	e022      	b.n	800197e <LogicLayer_Parser+0xde>
	  	  {
	  		localParser.Parser_Message[k][l] = Message[j];
 8001938:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 800193c:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	f8d7 39e0 	ldr.w	r3, [r7, #2528]	; 0x9e0
 8001946:	4413      	add	r3, r2
 8001948:	7818      	ldrb	r0, [r3, #0]
 800194a:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 800194e:	f6a3 12d8 	subw	r2, r3, #2520	; 0x9d8
 8001952:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8001956:	2132      	movs	r1, #50	; 0x32
 8001958:	fb01 f303 	mul.w	r3, r1, r3
 800195c:	441a      	add	r2, r3
 800195e:	f8d7 39d8 	ldr.w	r3, [r7, #2520]	; 0x9d8
 8001962:	4413      	add	r3, r2
 8001964:	3301      	adds	r3, #1
 8001966:	4602      	mov	r2, r0
 8001968:	701a      	strb	r2, [r3, #0]
	  		l++;
 800196a:	f8d7 39d8 	ldr.w	r3, [r7, #2520]	; 0x9d8
 800196e:	3301      	adds	r3, #1
 8001970:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
	  	  for (l=0; j<i; j++)
 8001974:	f8d7 39e0 	ldr.w	r3, [r7, #2528]	; 0x9e0
 8001978:	3301      	adds	r3, #1
 800197a:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0
 800197e:	f8d7 29e0 	ldr.w	r2, [r7, #2528]	; 0x9e0
 8001982:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 8001986:	429a      	cmp	r2, r3
 8001988:	d3d6      	bcc.n	8001938 <LogicLayer_Parser+0x98>
	  	  }

	  	  j = i+1;
 800198a:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 800198e:	3301      	adds	r3, #1
 8001990:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0

	  	  if (Message[j] == 0x20)	// checking for spaces between lines
 8001994:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8001998:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	f8d7 39e0 	ldr.w	r3, [r7, #2528]	; 0x9e0
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d104      	bne.n	80019b4 <LogicLayer_Parser+0x114>
	  	  {
	  		  j++;
 80019aa:	f8d7 39e0 	ldr.w	r3, [r7, #2528]	; 0x9e0
 80019ae:	3301      	adds	r3, #1
 80019b0:	f8c7 39e0 	str.w	r3, [r7, #2528]	; 0x9e0
	  	  }

	  	  localParser.Parser_Message[k][l] = '\0';
 80019b4:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80019b8:	f6a3 12d8 	subw	r2, r3, #2520	; 0x9d8
 80019bc:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 80019c0:	2132      	movs	r1, #50	; 0x32
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	441a      	add	r2, r3
 80019c8:	f8d7 39d8 	ldr.w	r3, [r7, #2520]	; 0x9d8
 80019cc:	4413      	add	r3, r2
 80019ce:	3301      	adds	r3, #1
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]

	  	  i++;		//verhoog de iterator om niet in een oneindige loop te komen ivm while loop en komma detectie
 80019d4:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 80019d8:	3301      	adds	r3, #1
 80019da:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4

	  	  k=(k+1);	//verhoog iterator voor meerdere berichten opslag
 80019de:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 80019e2:	3301      	adds	r3, #1
 80019e4:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 80019e8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 80019ec:	2b14      	cmp	r3, #20
 80019ee:	d903      	bls.n	80019f8 <LogicLayer_Parser+0x158>
	  	  	  {
	  		  	  printf("Error no message end detected \n");
 80019f0:	4819      	ldr	r0, [pc, #100]	; (8001a58 <LogicLayer_Parser+0x1b8>)
 80019f2:	f008 f9b5 	bl	8009d60 <puts>
	  		  	  break;
 80019f6:	e00b      	b.n	8001a10 <LogicLayer_Parser+0x170>
	  while (Message[i] != 0) 	// Kijk voor line end
 80019f8:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80019fc:	f5a3 631e 	sub.w	r3, r3, #2528	; 0x9e0
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f47f af7a 	bne.w	8001904 <LogicLayer_Parser+0x64>
	  	  	  }

	  }

	localParser.Variable_length = k;
 8001a10:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	; 0x9dc
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8001a1a:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 8001a1e:	701a      	strb	r2, [r3, #0]

	return localParser;
 8001a20:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8001a24:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8001a2e:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	f640 13c5 	movw	r3, #2501	; 0x9c5
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f008 f8f4 	bl	8009c28 <memcpy>
}
 8001a40:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 8001a44:	f6a3 13dc 	subw	r3, r3, #2524	; 0x9dc
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	f607 17e8 	addw	r7, r7, #2536	; 0x9e8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	0800b0d0 	.word	0x0800b0d0
 8001a58:	0800b0e8 	.word	0x0800b0e8

08001a5c <LogicLayer_CommandCheck>:

int LogicLayer_CommandCheck(Message_parser *localParser)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	int i;
	unsigned char stringLength = sizeof(commands_check) / sizeof(commands_check[0]);
 8001a64:	2309      	movs	r3, #9
 8001a66:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCheck = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	727b      	strb	r3, [r7, #9]
	unsigned char stringCorrect = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	72fb      	strb	r3, [r7, #11]

	for (i = 1; i <= stringLength; i++)
 8001a70:	2301      	movs	r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	e016      	b.n	8001aa4 <LogicLayer_CommandCheck+0x48>
	{
		stringCheck = strcmp(localParser->Parser_Message[0],commands_check[i-1]);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	1c58      	adds	r0, r3, #1
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1e5a      	subs	r2, r3, #1
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <LogicLayer_CommandCheck+0x6c>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7fe fba0 	bl	80001d0 <strcmp>
 8001a90:	4603      	mov	r3, r0
 8001a92:	727b      	strb	r3, [r7, #9]
		if (stringCheck == 0)
 8001a94:	7a7b      	ldrb	r3, [r7, #9]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <LogicLayer_CommandCheck+0x42>
		{
			stringCorrect = i;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	72fb      	strb	r3, [r7, #11]
	for (i = 1; i <= stringLength; i++)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	7abb      	ldrb	r3, [r7, #10]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dde4      	ble.n	8001a76 <LogicLayer_CommandCheck+0x1a>
		}
	}

	if (stringCorrect != 0)
 8001aac:	7afb      	ldrb	r3, [r7, #11]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <LogicLayer_CommandCheck+0x5a>
	{
		return stringCorrect;
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
 8001ab4:	e003      	b.n	8001abe <LogicLayer_CommandCheck+0x62>
	}
	else API_err_handler(UNKNOWN_FUNCTION);
 8001ab6:	200b      	movs	r0, #11
 8001ab8:	f7ff fe5a 	bl	8001770 <API_err_handler>
	return 0;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	0801446c 	.word	0x0801446c

08001acc <LogicLayer_CommandSwitch>:

int LogicLayer_CommandSwitch(Message_parser *localParser, unsigned char Command)
{
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b090      	sub	sp, #64	; 0x40
 8001ad0:	af04      	add	r7, sp, #16
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	70fb      	strb	r3, [r7, #3]


	switch (Command)
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	f200 814d 	bhi.w	8001d7c <LogicLayer_CommandSwitch+0x2b0>
 8001ae2:	a201      	add	r2, pc, #4	; (adr r2, 8001ae8 <LogicLayer_CommandSwitch+0x1c>)
 8001ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae8:	08001b0d 	.word	0x08001b0d
 8001aec:	08001bc1 	.word	0x08001bc1
 8001af0:	08001c69 	.word	0x08001c69
 8001af4:	08001cf5 	.word	0x08001cf5
 8001af8:	08001d39 	.word	0x08001d39
 8001afc:	08001d53 	.word	0x08001d53
 8001b00:	08001d7d 	.word	0x08001d7d
 8001b04:	08001d7d 	.word	0x08001d7d
 8001b08:	08001d77 	.word	0x08001d77
	{
		case 1:	//lijn
		{
			if (localParser->Variable_length-1 == 6)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b07      	cmp	r3, #7
 8001b12:	d153      	bne.n	8001bbc <LogicLayer_CommandSwitch+0xf0>
			{
			unsigned short x_1, y_1, x_2, y_2;
			unsigned char dikte, color;

			x_1 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3333      	adds	r3, #51	; 0x33
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fb63 	bl	80001e4 <strlen>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2201      	movs	r2, #1
 8001b22:	4619      	mov	r1, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f96f 	bl	8001e08 <LogicLayer_intToAscii>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	82bb      	strh	r3, [r7, #20]
			y_1 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3365      	adds	r3, #101	; 0x65
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fb56 	bl	80001e4 <strlen>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f962 	bl	8001e08 <LogicLayer_intToAscii>
 8001b44:	4603      	mov	r3, r0
 8001b46:	827b      	strh	r3, [r7, #18]
			x_2 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[3]), 3);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3397      	adds	r3, #151	; 0x97
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fb49 	bl	80001e4 <strlen>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2203      	movs	r2, #3
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f955 	bl	8001e08 <LogicLayer_intToAscii>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	823b      	strh	r3, [r7, #16]
			y_2 = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[4]), 4);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	33c9      	adds	r3, #201	; 0xc9
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fb3c 	bl	80001e4 <strlen>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f948 	bl	8001e08 <LogicLayer_intToAscii>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	81fb      	strh	r3, [r7, #14]
			color = LogicLayer_ColourCheck(localParser, 5);
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f904 	bl	8001d8c <LogicLayer_ColourCheck>
 8001b84:	4603      	mov	r3, r0
 8001b86:	737b      	strb	r3, [r7, #13]
			dikte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[6]), 6);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fb28 	bl	80001e4 <strlen>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2206      	movs	r2, #6
 8001b98:	4619      	mov	r1, r3
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f934 	bl	8001e08 <LogicLayer_intToAscii>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	733b      	strb	r3, [r7, #12]



			API_draw_line(x_1, y_1, x_2, y_2, dikte, color);
 8001ba4:	89fc      	ldrh	r4, [r7, #14]
 8001ba6:	8a3a      	ldrh	r2, [r7, #16]
 8001ba8:	8a79      	ldrh	r1, [r7, #18]
 8001baa:	8ab8      	ldrh	r0, [r7, #20]
 8001bac:	7b7b      	ldrb	r3, [r7, #13]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	7b3b      	ldrb	r3, [r7, #12]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	f7fe ff01 	bl	80009bc <API_draw_line>

			break;
 8001bba:	e0e1      	b.n	8001d80 <LogicLayer_CommandSwitch+0x2b4>
			}
			else return 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e0e0      	b.n	8001d82 <LogicLayer_CommandSwitch+0x2b6>
		{
			unsigned short x_lup,  y_lup,  breedte,  hoogte;
			unsigned char color, gevuld;


			x_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3333      	adds	r3, #51	; 0x33
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fb0d 	bl	80001e4 <strlen>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f919 	bl	8001e08 <LogicLayer_intToAscii>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	83fb      	strh	r3, [r7, #30]
			y_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3365      	adds	r3, #101	; 0x65
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fb00 	bl	80001e4 <strlen>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2202      	movs	r2, #2
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f90c 	bl	8001e08 <LogicLayer_intToAscii>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	83bb      	strh	r3, [r7, #28]
			breedte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[3]), 3);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3397      	adds	r3, #151	; 0x97
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe faf3 	bl	80001e4 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2203      	movs	r2, #3
 8001c02:	4619      	mov	r1, r3
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f8ff 	bl	8001e08 <LogicLayer_intToAscii>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	837b      	strh	r3, [r7, #26]
			hoogte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[4]), 4);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	33c9      	adds	r3, #201	; 0xc9
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fae6 	bl	80001e4 <strlen>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8f2 	bl	8001e08 <LogicLayer_intToAscii>
 8001c24:	4603      	mov	r3, r0
 8001c26:	833b      	strh	r3, [r7, #24]

			color = LogicLayer_ColourCheck(localParser, 5);
 8001c28:	2105      	movs	r1, #5
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8ae 	bl	8001d8c <LogicLayer_ColourCheck>
 8001c30:	4603      	mov	r3, r0
 8001c32:	75fb      	strb	r3, [r7, #23]
			gevuld = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[6]), 6);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fad2 	bl	80001e4 <strlen>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2206      	movs	r2, #6
 8001c44:	4619      	mov	r1, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8de 	bl	8001e08 <LogicLayer_intToAscii>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	75bb      	strb	r3, [r7, #22]

			API_draw_rectangle(x_lup, y_lup, breedte, hoogte, color, gevuld);
 8001c50:	8b3c      	ldrh	r4, [r7, #24]
 8001c52:	8b7a      	ldrh	r2, [r7, #26]
 8001c54:	8bb9      	ldrh	r1, [r7, #28]
 8001c56:	8bf8      	ldrh	r0, [r7, #30]
 8001c58:	7dbb      	ldrb	r3, [r7, #22]
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	4623      	mov	r3, r4
 8001c62:	f7fe ff79 	bl	8000b58 <API_draw_rectangle>

			break;
 8001c66:	e08b      	b.n	8001d80 <LogicLayer_CommandSwitch+0x2b4>
		}

		case 3: //tekst
		{
			uint16_t x = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3333      	adds	r3, #51	; 0x33
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fab9 	bl	80001e4 <strlen>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2201      	movs	r2, #1
 8001c76:	4619      	mov	r1, r3
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8c5 	bl	8001e08 <LogicLayer_intToAscii>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	84bb      	strh	r3, [r7, #36]	; 0x24
			uint16_t y = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3365      	adds	r3, #101	; 0x65
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe faac 	bl	80001e4 <strlen>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4619      	mov	r1, r3
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f8b8 	bl	8001e08 <LogicLayer_intToAscii>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	847b      	strh	r3, [r7, #34]	; 0x22
			uint8_t kleur = LogicLayer_ColourCheck(localParser, 3);
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f874 	bl	8001d8c <LogicLayer_ColourCheck>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			uint8_t fontgrootte = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[6]), 6);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f203 132d 	addw	r3, r3, #301	; 0x12d
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fa97 	bl	80001e4 <strlen>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2206      	movs	r2, #6
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8a3 	bl	8001e08 <LogicLayer_intToAscii>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f887 3020 	strb.w	r3, [r7, #32]
			API_draw_text(x, y, kleur, localParser->Parser_Message[4],localParser->Parser_Message[5], fontgrootte, localParser->Parser_Message[7]);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f103 05c9 	add.w	r5, r3, #201	; 0xc9
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	33fb      	adds	r3, #251	; 0xfb
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	f202 125f 	addw	r2, r2, #351	; 0x15f
 8001cd8:	f897 4021 	ldrb.w	r4, [r7, #33]	; 0x21
 8001cdc:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8001cde:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8001ce0:	9202      	str	r2, [sp, #8]
 8001ce2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ce6:	9201      	str	r2, [sp, #4]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	462b      	mov	r3, r5
 8001cec:	4622      	mov	r2, r4
 8001cee:	f7fe ffb5 	bl	8000c5c <API_draw_text>
			break;
 8001cf2:	e045      	b.n	8001d80 <LogicLayer_CommandSwitch+0x2b4>
		}

		case 4: //bitmap
		{
			unsigned short x_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[2]), 2);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3365      	adds	r3, #101	; 0x65
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fa73 	bl	80001e4 <strlen>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2202      	movs	r2, #2
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f87f 	bl	8001e08 <LogicLayer_intToAscii>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	853b      	strh	r3, [r7, #40]	; 0x28
			unsigned short y_lup = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[3]), 3);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3397      	adds	r3, #151	; 0x97
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fa66 	bl	80001e4 <strlen>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f872 	bl	8001e08 <LogicLayer_intToAscii>
 8001d24:	4603      	mov	r3, r0
 8001d26:	84fb      	strh	r3, [r7, #38]	; 0x26
			API_read_bitmap_SD(localParser->Parser_Message[1], x_lup, y_lup);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3333      	adds	r3, #51	; 0x33
 8001d2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d2e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fb29 	bl	8001388 <API_read_bitmap_SD>
			break;
 8001d36:	e023      	b.n	8001d80 <LogicLayer_CommandSwitch+0x2b4>
		}

		case 5: //clearscherm
		{
			unsigned char color;
			color = LogicLayer_ColourCheck(localParser, 1);
 8001d38:	2101      	movs	r1, #1
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f826 	bl	8001d8c <LogicLayer_ColourCheck>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			UB_VGA_FillScreen(color);
 8001d46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 ff66 	bl	8002c1c <UB_VGA_FillScreen>
			break;
 8001d50:	e016      	b.n	8001d80 <LogicLayer_CommandSwitch+0x2b4>
		}
		case 6:
		{
			unsigned int msecs = LogicLayer_intToAscii(localParser, strlen(localParser->Parser_Message[1]), 1);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3333      	adds	r3, #51	; 0x33
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fa44 	bl	80001e4 <strlen>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4619      	mov	r1, r3
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f850 	bl	8001e08 <LogicLayer_intToAscii>
 8001d68:	62f8      	str	r0, [r7, #44]	; 0x2c
			wacht(msecs);
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fcf0 	bl	8001754 <wacht>
			break;
 8001d74:	e004      	b.n	8001d80 <LogicLayer_CommandSwitch+0x2b4>
		}
		case 9:
		{
			API_blur_screen();
 8001d76:	f7ff fc67 	bl	8001648 <API_blur_screen>
			break;
 8001d7a:	e001      	b.n	8001d80 <LogicLayer_CommandSwitch+0x2b4>
		}
		default:
		{
			return UNKNOWN_FUNCTION;
 8001d7c:	230b      	movs	r3, #11
 8001d7e:	e000      	b.n	8001d82 <LogicLayer_CommandSwitch+0x2b6>
		}
	}
	return NO_ERROR;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3730      	adds	r7, #48	; 0x30
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8a:	bf00      	nop

08001d8c <LogicLayer_ColourCheck>:

int LogicLayer_ColourCheck(Message_parser* localParser, unsigned char StructLocation)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
	int i;
	unsigned char stringLength = sizeof(message_col_string) / sizeof(message_col_string[0])+1;
 8001d98:	2310      	movs	r3, #16
 8001d9a:	72fb      	strb	r3, [r7, #11]
	unsigned char stringCheck = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCorrect = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	727b      	strb	r3, [r7, #9]

	for (i = 1; i < stringLength; i++)
 8001da4:	2301      	movs	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	e020      	b.n	8001dec <LogicLayer_ColourCheck+0x60>
	{
		stringCheck = strcmp(localParser->Parser_Message[StructLocation],message_col_string[i-1]);
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	2232      	movs	r2, #50	; 0x32
 8001dae:	fb02 f303 	mul.w	r3, r2, r3
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	1c58      	adds	r0, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e5a      	subs	r2, r3, #1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <LogicLayer_ColourCheck+0x74>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe fa01 	bl	80001d0 <strcmp>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	72bb      	strb	r3, [r7, #10]
		if (stringCheck == 0)
 8001dd2:	7abb      	ldrb	r3, [r7, #10]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d106      	bne.n	8001de6 <LogicLayer_ColourCheck+0x5a>
		{
			return stringCorrect = message_col[i-1];
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <LogicLayer_ColourCheck+0x78>)
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	727b      	strb	r3, [r7, #9]
 8001de2:	7a7b      	ldrb	r3, [r7, #9]
 8001de4:	e007      	b.n	8001df6 <LogicLayer_ColourCheck+0x6a>
	for (i = 1; i < stringLength; i++)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3301      	adds	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbda      	blt.n	8001daa <LogicLayer_ColourCheck+0x1e>
		}
	}


	return 0;
 8001df4:	2300      	movs	r3, #0

}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	08014520 	.word	0x08014520
 8001e04:	0801464c 	.word	0x0801464c

08001e08 <LogicLayer_intToAscii>:

unsigned int LogicLayer_intToAscii(Message_parser* localParser, int numbersize, int StructLocation)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	unsigned char i = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	77fb      	strb	r3, [r7, #31]
	unsigned char DecimalshiftBuff = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	75fb      	strb	r3, [r7, #23]
	unsigned int decimalvalue = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	77fb      	strb	r3, [r7, #31]
 8001e24:	e024      	b.n	8001e70 <LogicLayer_intToAscii+0x68>
	{

			DecimalshiftBuff = localParser->Parser_Message[StructLocation][i];	// making sure array doesnt have a negative number
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	2032      	movs	r0, #50	; 0x32
 8001e2e:	fb00 f202 	mul.w	r2, r0, r2
 8001e32:	440a      	add	r2, r1
 8001e34:	4413      	add	r3, r2
 8001e36:	3301      	adds	r3, #1
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	75fb      	strb	r3, [r7, #23]
			if (DecimalshiftBuff < '0' ||  DecimalshiftBuff > '9')
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b2f      	cmp	r3, #47	; 0x2f
 8001e40:	d902      	bls.n	8001e48 <LogicLayer_intToAscii+0x40>
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b39      	cmp	r3, #57	; 0x39
 8001e46:	d903      	bls.n	8001e50 <LogicLayer_intToAscii+0x48>
		{
				printf("Error NaN");
 8001e48:	480e      	ldr	r0, [pc, #56]	; (8001e84 <LogicLayer_intToAscii+0x7c>)
 8001e4a:	f007 ff03 	bl	8009c54 <iprintf>
 8001e4e:	e00c      	b.n	8001e6a <LogicLayer_intToAscii+0x62>
		}
			else
		{
			DecimalshiftBuff -= '0';
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	3b30      	subs	r3, #48	; 0x30
 8001e54:	75fb      	strb	r3, [r7, #23]

			decimalvalue *= 10;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	61bb      	str	r3, [r7, #24]
			decimalvalue += DecimalshiftBuff;
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4413      	add	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	77fb      	strb	r3, [r7, #31]
 8001e70:	7ffb      	ldrb	r3, [r7, #31]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dcd6      	bgt.n	8001e26 <LogicLayer_intToAscii+0x1e>
		}
	}
	return decimalvalue;
 8001e78:	69bb      	ldr	r3, [r7, #24]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	0800b108 	.word	0x0800b108

08001e88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_DMA_Init+0x3c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <MX_DMA_Init+0x3c>)
 8001e98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_DMA_Init+0x3c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2044      	movs	r0, #68	; 0x44
 8001eb0:	f001 f871 	bl	8002f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001eb4:	2044      	movs	r0, #68	; 0x44
 8001eb6:	f001 f88a 	bl	8002fce <HAL_NVIC_EnableIRQ>

}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800

08001ec8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a33      	ldr	r2, [pc, #204]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a2c      	ldr	r2, [pc, #176]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001f20:	f043 0310 	orr.w	r3, r3, #16
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a25      	ldr	r2, [pc, #148]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <MX_GPIO_Init+0x108>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2102      	movs	r1, #2
 8001f52:	4820      	ldr	r0, [pc, #128]	; (8001fd4 <MX_GPIO_Init+0x10c>)
 8001f54:	f001 fdf4 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001f5e:	481e      	ldr	r0, [pc, #120]	; (8001fd8 <MX_GPIO_Init+0x110>)
 8001f60:	f001 fdee 	bl	8003b40 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6a:	481c      	ldr	r0, [pc, #112]	; (8001fdc <MX_GPIO_Init+0x114>)
 8001f6c:	f001 fde8 	bl	8003b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001f70:	2302      	movs	r3, #2
 8001f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4619      	mov	r1, r3
 8001f86:	4813      	ldr	r0, [pc, #76]	; (8001fd4 <MX_GPIO_Init+0x10c>)
 8001f88:	f001 fc3e 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001f8c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001f90:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9e:	f107 0314 	add.w	r3, r7, #20
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <MX_GPIO_Init+0x110>)
 8001fa6:	f001 fc2f 	bl	8003808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8001faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4806      	ldr	r0, [pc, #24]	; (8001fdc <MX_GPIO_Init+0x114>)
 8001fc4:	f001 fc20 	bl	8003808 <HAL_GPIO_Init>

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40020400 	.word	0x40020400

08001fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	f6ad 1ddc 	subw	sp, sp, #2524	; 0x9dc
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001fe8:	f000 fe64 	bl	8002cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fec:	f000 f8c6 	bl	800217c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ff0:	f7ff ff6a 	bl	8001ec8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ff4:	f7ff ff48 	bl	8001e88 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ff8:	f000 fbb2 	bl	8002760 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ffc:	f000 fc00 	bl	8002800 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002000:	f000 fd16 	bl	8002a30 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002004:	f004 ff10 	bl	8006e28 <MX_FATFS_Init>
  MX_SPI1_Init();
 8002008:	f000 f93c 	bl	8002284 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 800200c:	f000 fdb4 	bl	8002b78 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8002010:	2000      	movs	r0, #0
 8002012:	f000 fe03 	bl	8002c1c <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8002016:	220a      	movs	r2, #10
 8002018:	210a      	movs	r1, #10
 800201a:	200a      	movs	r0, #10
 800201c:	f000 fe22 	bl	8002c64 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	2000      	movs	r0, #0
 8002026:	f000 fe1d 	bl	8002c64 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	f240 103f 	movw	r0, #319	; 0x13f
 8002032:	f000 fe17 	bl	8002c64 <UB_VGA_SetPixel>




  unsigned int i = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4



  for(i = 0; i < LINE_BUFLEN; i++)
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
 8002042:	e00b      	b.n	800205c <main+0x7c>
	  input.line_rx_buffer[i] = 0;
 8002044:	4a48      	ldr	r2, [pc, #288]	; (8002168 <main+0x188>)
 8002046:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800204a:	4413      	add	r3, r2
 800204c:	3301      	adds	r3, #1
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8002052:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 8002056:	3301      	adds	r3, #1
 8002058:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
 800205c:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 8002060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002064:	d3ee      	bcc.n	8002044 <main+0x64>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8002066:	4b40      	ldr	r3, [pc, #256]	; (8002168 <main+0x188>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 800206c:	4b3e      	ldr	r3, [pc, #248]	; (8002168 <main+0x188>)
 800206e:	2200      	movs	r2, #0
 8002070:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 8002074:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <main+0x188>)
 8002076:	2200      	movs	r2, #0
 8002078:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, LINE_BUFLEN);
 800207c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002080:	4939      	ldr	r1, [pc, #228]	; (8002168 <main+0x188>)
 8002082:	483a      	ldr	r0, [pc, #232]	; (800216c <main+0x18c>)
 8002084:	f003 ff2d 	bl	8005ee2 <HAL_UART_Receive_IT>

  int Test = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 800208e:	4b36      	ldr	r3, [pc, #216]	; (8002168 <main+0x188>)
 8002090:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8002094:	2bff      	cmp	r3, #255	; 0xff
 8002096:	d1fa      	bne.n	800208e <main+0xae>
	  {
		  Debugging = LogicLayer_Parser(input.line_rx_buffer, LINE_BUFLEN);
 8002098:	4c35      	ldr	r4, [pc, #212]	; (8002170 <main+0x190>)
 800209a:	463b      	mov	r3, r7
 800209c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a0:	4934      	ldr	r1, [pc, #208]	; (8002174 <main+0x194>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fbfc 	bl	80018a0 <LogicLayer_Parser>
 80020a8:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80020ac:	f6a3 13d8 	subw	r3, r3, #2520	; 0x9d8
 80020b0:	4620      	mov	r0, r4
 80020b2:	4619      	mov	r1, r3
 80020b4:	f640 13c5 	movw	r3, #2501	; 0x9c5
 80020b8:	461a      	mov	r2, r3
 80020ba:	f007 fdb5 	bl	8009c28 <memcpy>
		  Test = LogicLayer_CommandCheck(&Debugging);
 80020be:	482c      	ldr	r0, [pc, #176]	; (8002170 <main+0x190>)
 80020c0:	f7ff fccc 	bl	8001a5c <LogicLayer_CommandCheck>
 80020c4:	f8c7 09cc 	str.w	r0, [r7, #2508]	; 0x9cc
		  if (Test == 0)
 80020c8:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <main+0xfe>
		  {
			  //error handler
		  }
		  else
		  {
			  LogicLayer_CommandSwitch(&Debugging, Test);
 80020d0:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	; 0x9cc
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4619      	mov	r1, r3
 80020d8:	4825      	ldr	r0, [pc, #148]	; (8002170 <main+0x190>)
 80020da:	f7ff fcf7 	bl	8001acc <LogicLayer_CommandSwitch>
		  }
		  for(i = 0; i < LINE_BUFLEN; i++)
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
 80020e4:	e00b      	b.n	80020fe <main+0x11e>
			  input.line_rx_buffer[i] = 0;
 80020e6:	4a20      	ldr	r2, [pc, #128]	; (8002168 <main+0x188>)
 80020e8:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 80020ec:	4413      	add	r3, r2
 80020ee:	3301      	adds	r3, #1
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
		  for(i = 0; i < LINE_BUFLEN; i++)
 80020f4:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 80020f8:	3301      	adds	r3, #1
 80020fa:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
 80020fe:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002106:	d3ee      	bcc.n	80020e6 <main+0x106>
		  for (i = 0; i < BUFFER_LEN; i++)
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
 800210e:	e01e      	b.n	800214e <main+0x16e>
			  for (int j = 0; j < BUFFER_LEN; j++)
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
 8002116:	e011      	b.n	800213c <main+0x15c>
				  Debugging.Parser_Message[i][j] = 0;
 8002118:	4a15      	ldr	r2, [pc, #84]	; (8002170 <main+0x190>)
 800211a:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 800211e:	2132      	movs	r1, #50	; 0x32
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	441a      	add	r2, r3
 8002126:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 800212a:	4413      	add	r3, r2
 800212c:	3301      	adds	r3, #1
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
			  for (int j = 0; j < BUFFER_LEN; j++)
 8002132:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8002136:	3301      	adds	r3, #1
 8002138:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
 800213c:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8002140:	2b13      	cmp	r3, #19
 8002142:	dde9      	ble.n	8002118 <main+0x138>
		  for (i = 0; i < BUFFER_LEN; i++)
 8002144:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 8002148:	3301      	adds	r3, #1
 800214a:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
 800214e:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	; 0x9d4
 8002152:	2b13      	cmp	r3, #19
 8002154:	d9dc      	bls.n	8002110 <main+0x130>
		  // Do some stuff
		  printf("yes\n");
 8002156:	4808      	ldr	r0, [pc, #32]	; (8002178 <main+0x198>)
 8002158:	f007 fe02 	bl	8009d60 <puts>
		  //UB_VGA_FillScreen(colorTest);

		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <main+0x188>)
 800215e:	2200      	movs	r2, #0
 8002160:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8002164:	e793      	b.n	800208e <main+0xae>
 8002166:	bf00      	nop
 8002168:	200000a4 	.word	0x200000a4
 800216c:	20000fc8 	.word	0x20000fc8
 8002170:	200004b4 	.word	0x200004b4
 8002174:	200000a5 	.word	0x200000a5
 8002178:	0800b114 	.word	0x0800b114

0800217c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b094      	sub	sp, #80	; 0x50
 8002180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002182:	f107 0320 	add.w	r3, r7, #32
 8002186:	2230      	movs	r2, #48	; 0x30
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f007 fd5a 	bl	8009c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <SystemClock_Config+0xcc>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4a27      	ldr	r2, [pc, #156]	; (8002248 <SystemClock_Config+0xcc>)
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ae:	6413      	str	r3, [r2, #64]	; 0x40
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <SystemClock_Config+0xcc>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021bc:	2300      	movs	r3, #0
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <SystemClock_Config+0xd0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a21      	ldr	r2, [pc, #132]	; (800224c <SystemClock_Config+0xd0>)
 80021c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <SystemClock_Config+0xd0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021d8:	2301      	movs	r3, #1
 80021da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e2:	2302      	movs	r3, #2
 80021e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021ec:	2304      	movs	r3, #4
 80021ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021f0:	23a8      	movs	r3, #168	; 0xa8
 80021f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021f4:	2302      	movs	r3, #2
 80021f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021f8:	2307      	movs	r3, #7
 80021fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fc:	f107 0320 	add.w	r3, r7, #32
 8002200:	4618      	mov	r0, r3
 8002202:	f001 fcb7 	bl	8003b74 <HAL_RCC_OscConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800220c:	f000 f832 	bl	8002274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002210:	230f      	movs	r3, #15
 8002212:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002214:	2302      	movs	r3, #2
 8002216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800221c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002226:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	2105      	movs	r1, #5
 800222e:	4618      	mov	r0, r3
 8002230:	f001 ff18 	bl	8004064 <HAL_RCC_ClockConfig>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800223a:	f000 f81b 	bl	8002274 <Error_Handler>
  }
}
 800223e:	bf00      	nop
 8002240:	3750      	adds	r7, #80	; 0x50
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800
 800224c:	40007000 	.word	0x40007000

08002250 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8002258:	1d39      	adds	r1, r7, #4
 800225a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225e:	2201      	movs	r2, #1
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <__io_putchar+0x20>)
 8002262:	f003 fdac 	bl	8005dbe <HAL_UART_Transmit>
	return ch;												//Return the character
 8002266:	687b      	ldr	r3, [r7, #4]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000fc8 	.word	0x20000fc8

08002274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <MX_SPI1_Init+0x64>)
 800228a:	4a18      	ldr	r2, [pc, #96]	; (80022ec <MX_SPI1_Init+0x68>)
 800228c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <MX_SPI1_Init+0x64>)
 8002290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002294:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <MX_SPI1_Init+0x64>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <MX_SPI1_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022b8:	2238      	movs	r2, #56	; 0x38
 80022ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022d0:	220a      	movs	r2, #10
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022d4:	4804      	ldr	r0, [pc, #16]	; (80022e8 <MX_SPI1_Init+0x64>)
 80022d6:	f002 f8e5 	bl	80044a4 <HAL_SPI_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80022e0:	f7ff ffc8 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000e7c 	.word	0x20000e7c
 80022ec:	40013000 	.word	0x40013000

080022f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a28      	ldr	r2, [pc, #160]	; (80023b0 <HAL_SPI_MspInit+0xc0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d149      	bne.n	80023a6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
 8002316:	4b27      	ldr	r3, [pc, #156]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a26      	ldr	r2, [pc, #152]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 800231c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002366:	23c0      	movs	r3, #192	; 0xc0
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236e:	2301      	movs	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002376:	2305      	movs	r3, #5
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	480d      	ldr	r0, [pc, #52]	; (80023b8 <HAL_SPI_MspInit+0xc8>)
 8002382:	f001 fa41 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002386:	2308      	movs	r3, #8
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800238e:	2301      	movs	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002396:	2305      	movs	r3, #5
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4806      	ldr	r0, [pc, #24]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 80023a2:	f001 fa31 	bl	8003808 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023a6:	bf00      	nop
 80023a8:	3728      	adds	r7, #40	; 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40013000 	.word	0x40013000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40020400 	.word	0x40020400

080023c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_MspInit+0x4c>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a0f      	ldr	r2, [pc, #60]	; (800240c <HAL_MspInit+0x4c>)
 80023d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_MspInit+0x4c>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_MspInit+0x4c>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a08      	ldr	r2, [pc, #32]	; (800240c <HAL_MspInit+0x4c>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_MspInit+0x4c>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <HardFault_Handler+0x4>

08002424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <MemManage_Handler+0x4>

0800242a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <BusFault_Handler+0x4>

08002430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <UsageFault_Handler+0x4>

08002436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002464:	f000 fc78 	bl	8002d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002470:	4828      	ldr	r0, [pc, #160]	; (8002514 <TIM2_IRQHandler+0xa8>)
 8002472:	f002 fdf3 	bl	800505c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <TIM2_IRQHandler+0xa8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f06f 0208 	mvn.w	r2, #8
 800247e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <TIM2_IRQHandler+0xac>)
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <TIM2_IRQHandler+0xac>)
 800248a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <TIM2_IRQHandler+0xac>)
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8002494:	d905      	bls.n	80024a2 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <TIM2_IRQHandler+0xac>)
 8002498:	2200      	movs	r2, #0
 800249a:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 800249c:	4a1f      	ldr	r2, [pc, #124]	; (800251c <TIM2_IRQHandler+0xb0>)
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <TIM2_IRQHandler+0xac>)
 80024a0:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <TIM2_IRQHandler+0xac>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d802      	bhi.n	80024b0 <TIM2_IRQHandler+0x44>
 80024aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80024ae:	e001      	b.n	80024b4 <TIM2_IRQHandler+0x48>
 80024b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b4:	4a1a      	ldr	r2, [pc, #104]	; (8002520 <TIM2_IRQHandler+0xb4>)
 80024b6:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <TIM2_IRQHandler+0xac>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	2b23      	cmp	r3, #35	; 0x23
 80024be:	d927      	bls.n	8002510 <TIM2_IRQHandler+0xa4>
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <TIM2_IRQHandler+0xac>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	f240 2202 	movw	r2, #514	; 0x202
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d821      	bhi.n	8002510 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <TIM2_IRQHandler+0xb8>)
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <TIM2_IRQHandler+0xac>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 80024d4:	4a13      	ldr	r2, [pc, #76]	; (8002524 <TIM2_IRQHandler+0xb8>)
 80024d6:	4b10      	ldr	r3, [pc, #64]	; (8002518 <TIM2_IRQHandler+0xac>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <TIM2_IRQHandler+0xbc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a11      	ldr	r2, [pc, #68]	; (8002528 <TIM2_IRQHandler+0xbc>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <TIM2_IRQHandler+0xc0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <TIM2_IRQHandler+0xc0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <TIM2_IRQHandler+0xac>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <TIM2_IRQHandler+0xac>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f203 1341 	addw	r3, r3, #321	; 0x141
 800250c:	4a02      	ldr	r2, [pc, #8]	; (8002518 <TIM2_IRQHandler+0xac>)
 800250e:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000f20 	.word	0x20000f20
 8002518:	20013cfc 	.word	0x20013cfc
 800251c:	2000100c 	.word	0x2000100c
 8002520:	40020400 	.word	0x40020400
 8002524:	40026488 	.word	0x40026488
 8002528:	40010000 	.word	0x40010000
 800252c:	20000f68 	.word	0x20000f68

08002530 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <USART2_IRQHandler+0x70>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	2b0a      	cmp	r3, #10
 8002540:	d026      	beq.n	8002590 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	2b0d      	cmp	r3, #13
 8002546:	d002      	beq.n	800254e <USART2_IRQHandler+0x1e>
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	2b2e      	cmp	r3, #46	; 0x2e
 800254c:	d10e      	bne.n	800256c <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <USART2_IRQHandler+0x74>)
 8002550:	22ff      	movs	r2, #255	; 0xff
 8002552:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <USART2_IRQHandler+0x74>)
 8002558:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800255c:	4a11      	ldr	r2, [pc, #68]	; (80025a4 <USART2_IRQHandler+0x74>)
 800255e:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <USART2_IRQHandler+0x74>)
 8002564:	2200      	movs	r2, #0
 8002566:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800256a:	e011      	b.n	8002590 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <USART2_IRQHandler+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <USART2_IRQHandler+0x74>)
 8002576:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800257a:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <USART2_IRQHandler+0x74>)
 800257c:	4413      	add	r3, r2
 800257e:	79fa      	ldrb	r2, [r7, #7]
 8002580:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <USART2_IRQHandler+0x74>)
 8002584:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002588:	3301      	adds	r3, #1
 800258a:	4a06      	ldr	r2, [pc, #24]	; (80025a4 <USART2_IRQHandler+0x74>)
 800258c:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002590:	4805      	ldr	r0, [pc, #20]	; (80025a8 <USART2_IRQHandler+0x78>)
 8002592:	f003 fcd7 	bl	8005f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40004400 	.word	0x40004400
 80025a4:	200000a4 	.word	0x200000a4
 80025a8:	20000fc8 	.word	0x20000fc8

080025ac <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <DMA2_Stream5_IRQHandler+0x48>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6a1a      	ldr	r2, [r3, #32]
 80025b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10f      	bne.n	80025e0 <DMA2_Stream5_IRQHandler+0x34>
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <DMA2_Stream5_IRQHandler+0x48>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6a1a      	ldr	r2, [r3, #32]
 80025c6:	f240 4344 	movw	r3, #1092	; 0x444
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <DMA2_Stream5_IRQHandler+0x34>
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <DMA2_Stream5_IRQHandler+0x48>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <DMA2_Stream5_IRQHandler+0x48>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <DMA2_Stream5_IRQHandler+0x4c>)
 80025e2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80025e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80025e8:	4804      	ldr	r0, [pc, #16]	; (80025fc <DMA2_Stream5_IRQHandler+0x50>)
 80025ea:	f000 fea3 	bl	8003334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000ed8 	.word	0x20000ed8
 80025f8:	40021000 	.word	0x40021000
 80025fc:	20000f68 	.word	0x20000f68

08002600 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260c:	2300      	movs	r3, #0
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	e00a      	b.n	8002628 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002612:	f3af 8000 	nop.w
 8002616:	4601      	mov	r1, r0
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	60ba      	str	r2, [r7, #8]
 800261e:	b2ca      	uxtb	r2, r1
 8002620:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3301      	adds	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	dbf0      	blt.n	8002612 <_read+0x12>
	}

return len;
 8002630:	687b      	ldr	r3, [r7, #4]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	e009      	b.n	8002660 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	60ba      	str	r2, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fdfb 	bl	8002250 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	3301      	adds	r3, #1
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	429a      	cmp	r2, r3
 8002666:	dbf1      	blt.n	800264c <_write+0x12>
	}
	return len;
 8002668:	687b      	ldr	r3, [r7, #4]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_close>:

int _close(int file)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	return -1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800269a:	605a      	str	r2, [r3, #4]
	return 0;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <_isatty>:

int _isatty(int file)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
	return 1;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
	return 0;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <_sbrk+0x50>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d102      	bne.n	80026f2 <_sbrk+0x16>
		heap_end = &end;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <_sbrk+0x50>)
 80026ee:	4a10      	ldr	r2, [pc, #64]	; (8002730 <_sbrk+0x54>)
 80026f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <_sbrk+0x50>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <_sbrk+0x50>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	466a      	mov	r2, sp
 8002702:	4293      	cmp	r3, r2
 8002704:	d907      	bls.n	8002716 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002706:	f007 fa65 	bl	8009bd4 <__errno>
 800270a:	4603      	mov	r3, r0
 800270c:	220c      	movs	r2, #12
 800270e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	e006      	b.n	8002724 <_sbrk+0x48>
	}

	heap_end += incr;
 8002716:	4b05      	ldr	r3, [pc, #20]	; (800272c <_sbrk+0x50>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	4a03      	ldr	r2, [pc, #12]	; (800272c <_sbrk+0x50>)
 8002720:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000ed4 	.word	0x20000ed4
 8002730:	20013d68 	.word	0x20013d68

08002734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <SystemInit+0x28>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	4a07      	ldr	r2, [pc, #28]	; (800275c <SystemInit+0x28>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002748:	4b04      	ldr	r3, [pc, #16]	; (800275c <SystemInit+0x28>)
 800274a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800274e:	609a      	str	r2, [r3, #8]
#endif
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002774:	463b      	mov	r3, r7
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800277c:	4b1e      	ldr	r3, [pc, #120]	; (80027f8 <MX_TIM1_Init+0x98>)
 800277e:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <MX_TIM1_Init+0x9c>)
 8002780:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <MX_TIM1_Init+0x98>)
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <MX_TIM1_Init+0x98>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 800278e:	4b1a      	ldr	r3, [pc, #104]	; (80027f8 <MX_TIM1_Init+0x98>)
 8002790:	220b      	movs	r2, #11
 8002792:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002794:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <MX_TIM1_Init+0x98>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800279a:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <MX_TIM1_Init+0x98>)
 800279c:	2200      	movs	r2, #0
 800279e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <MX_TIM1_Init+0x98>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027a6:	4814      	ldr	r0, [pc, #80]	; (80027f8 <MX_TIM1_Init+0x98>)
 80027a8:	f002 f972 	bl	8004a90 <HAL_TIM_Base_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80027b2:	f7ff fd5f 	bl	8002274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027bc:	f107 0308 	add.w	r3, r7, #8
 80027c0:	4619      	mov	r1, r3
 80027c2:	480d      	ldr	r0, [pc, #52]	; (80027f8 <MX_TIM1_Init+0x98>)
 80027c4:	f002 fe14 	bl	80053f0 <HAL_TIM_ConfigClockSource>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80027ce:	f7ff fd51 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027da:	463b      	mov	r3, r7
 80027dc:	4619      	mov	r1, r3
 80027de:	4806      	ldr	r0, [pc, #24]	; (80027f8 <MX_TIM1_Init+0x98>)
 80027e0:	f003 fa10 	bl	8005c04 <HAL_TIMEx_MasterConfigSynchronization>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80027ea:	f7ff fd43 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000ed8 	.word	0x20000ed8
 80027fc:	40010000 	.word	0x40010000

08002800 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002806:	f107 0320 	add.w	r3, r7, #32
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	611a      	str	r2, [r3, #16]
 800281e:	615a      	str	r2, [r3, #20]
 8002820:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002822:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <MX_TIM2_Init+0xcc>)
 8002824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 800282a:	4b28      	ldr	r3, [pc, #160]	; (80028cc <MX_TIM2_Init+0xcc>)
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	4b26      	ldr	r3, [pc, #152]	; (80028cc <MX_TIM2_Init+0xcc>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8002836:	4b25      	ldr	r3, [pc, #148]	; (80028cc <MX_TIM2_Init+0xcc>)
 8002838:	f640 226b 	movw	r2, #2667	; 0xa6b
 800283c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283e:	4b23      	ldr	r3, [pc, #140]	; (80028cc <MX_TIM2_Init+0xcc>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <MX_TIM2_Init+0xcc>)
 8002846:	2200      	movs	r2, #0
 8002848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800284a:	4820      	ldr	r0, [pc, #128]	; (80028cc <MX_TIM2_Init+0xcc>)
 800284c:	f002 f9d8 	bl	8004c00 <HAL_TIM_PWM_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002856:	f7ff fd0d 	bl	8002274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800285e:	2300      	movs	r3, #0
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002862:	f107 0320 	add.w	r3, r7, #32
 8002866:	4619      	mov	r1, r3
 8002868:	4818      	ldr	r0, [pc, #96]	; (80028cc <MX_TIM2_Init+0xcc>)
 800286a:	f003 f9cb 	bl	8005c04 <HAL_TIMEx_MasterConfigSynchronization>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002874:	f7ff fcfe 	bl	8002274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002878:	2360      	movs	r3, #96	; 0x60
 800287a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 800287c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8002880:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002882:	2302      	movs	r3, #2
 8002884:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	2208      	movs	r2, #8
 800288e:	4619      	mov	r1, r3
 8002890:	480e      	ldr	r0, [pc, #56]	; (80028cc <MX_TIM2_Init+0xcc>)
 8002892:	f002 fceb 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800289c:	f7ff fcea 	bl	8002274 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 80028a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80028a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	220c      	movs	r2, #12
 80028aa:	4619      	mov	r1, r3
 80028ac:	4807      	ldr	r0, [pc, #28]	; (80028cc <MX_TIM2_Init+0xcc>)
 80028ae:	f002 fcdd 	bl	800526c <HAL_TIM_PWM_ConfigChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80028b8:	f7ff fcdc 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028bc:	4803      	ldr	r0, [pc, #12]	; (80028cc <MX_TIM2_Init+0xcc>)
 80028be:	f000 f87f 	bl	80029c0 <HAL_TIM_MspPostInit>

}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000f20 	.word	0x20000f20

080028d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a21      	ldr	r2, [pc, #132]	; (8002964 <HAL_TIM_Base_MspInit+0x94>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d13c      	bne.n	800295c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_TIM_Base_MspInit+0x98>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <HAL_TIM_Base_MspInit+0x98>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6453      	str	r3, [r2, #68]	; 0x44
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_TIM_Base_MspInit+0x98>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002900:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_TIM_Base_MspInit+0xa0>)
 8002902:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002906:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800290a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800290c:	4b17      	ldr	r3, [pc, #92]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 800290e:	2240      	movs	r2, #64	; 0x40
 8002910:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002914:	2200      	movs	r2, #0
 8002916:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002918:	4b14      	ldr	r3, [pc, #80]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 800291a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800291e:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002922:	2200      	movs	r2, #0
 8002924:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002926:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002934:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002938:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 800293c:	2200      	movs	r2, #0
 800293e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002940:	480a      	ldr	r0, [pc, #40]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002942:	f000 fb5f 	bl	8003004 <HAL_DMA_Init>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 800294c:	f7ff fc92 	bl	8002274 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a06      	ldr	r2, [pc, #24]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002954:	621a      	str	r2, [r3, #32]
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <HAL_TIM_Base_MspInit+0x9c>)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800295c:	bf00      	nop
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40010000 	.word	0x40010000
 8002968:	40023800 	.word	0x40023800
 800296c:	20000f68 	.word	0x20000f68
 8002970:	40026488 	.word	0x40026488

08002974 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d115      	bne.n	80029b2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_TIM_PWM_MspInit+0x48>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <HAL_TIM_PWM_MspInit+0x48>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_TIM_PWM_MspInit+0x48>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	201c      	movs	r0, #28
 80029a8:	f000 faf5 	bl	8002f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029ac:	201c      	movs	r0, #28
 80029ae:	f000 fb0e 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800

080029c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d11e      	bne.n	8002a20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_TIM_MspPostInit+0x68>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a0f      	ldr	r2, [pc, #60]	; (8002a28 <HAL_TIM_MspPostInit+0x68>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_TIM_MspPostInit+0x68>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 80029fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a10:	2301      	movs	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4804      	ldr	r0, [pc, #16]	; (8002a2c <HAL_TIM_MspPostInit+0x6c>)
 8002a1c:	f000 fef4 	bl	8003808 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40020400 	.word	0x40020400

08002a30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <MX_USART2_UART_Init+0x50>)
 8002a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a56:	220c      	movs	r2, #12
 8002a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_USART2_UART_Init+0x4c>)
 8002a68:	f003 f95c 	bl	8005d24 <HAL_UART_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a72:	f7ff fbff 	bl	8002274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000fc8 	.word	0x20000fc8
 8002a80:	40004400 	.word	0x40004400

08002a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <HAL_UART_MspInit+0x94>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d133      	bne.n	8002b0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <HAL_UART_MspInit+0x98>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a1b      	ldr	r2, [pc, #108]	; (8002b1c <HAL_UART_MspInit+0x98>)
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_UART_MspInit+0x98>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <HAL_UART_MspInit+0x98>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <HAL_UART_MspInit+0x98>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <HAL_UART_MspInit+0x98>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ade:	230c      	movs	r3, #12
 8002ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aea:	2303      	movs	r3, #3
 8002aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aee:	2307      	movs	r3, #7
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4619      	mov	r1, r3
 8002af8:	4809      	ldr	r0, [pc, #36]	; (8002b20 <HAL_UART_MspInit+0x9c>)
 8002afa:	f000 fe85 	bl	8003808 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	2026      	movs	r0, #38	; 0x26
 8002b04:	f000 fa47 	bl	8002f96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b08:	2026      	movs	r0, #38	; 0x26
 8002b0a:	f000 fa60 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3728      	adds	r7, #40	; 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40004400 	.word	0x40004400
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40020000 	.word	0x40020000

08002b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b2a:	e003      	b.n	8002b34 <LoopCopyDataInit>

08002b2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b32:	3104      	adds	r1, #4

08002b34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b34:	480b      	ldr	r0, [pc, #44]	; (8002b64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b3c:	d3f6      	bcc.n	8002b2c <CopyDataInit>
  ldr  r2, =_sbss
 8002b3e:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b40:	e002      	b.n	8002b48 <LoopFillZerobss>

08002b42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b44:	f842 3b04 	str.w	r3, [r2], #4

08002b48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b4c:	d3f9      	bcc.n	8002b42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b4e:	f7ff fdf1 	bl	8002734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b52:	f007 f845 	bl	8009be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b56:	f7ff fa43 	bl	8001fe0 <main>
  bx  lr    
 8002b5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b60:	080147a8 	.word	0x080147a8
  ldr  r0, =_sdata
 8002b64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b68:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8002b6c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002b70:	20013d64 	.word	0x20013d64

08002b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b74:	e7fe      	b.n	8002b74 <ADC_IRQHandler>
	...

08002b78 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <UB_VGA_Screen_Init+0x84>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <UB_VGA_Screen_Init+0x84>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <UB_VGA_Screen_Init+0x84>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <UB_VGA_Screen_Init+0x88>)
 8002b90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b94:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8002b96:	481b      	ldr	r0, [pc, #108]	; (8002c04 <UB_VGA_Screen_Init+0x8c>)
 8002b98:	f001 ffca 	bl	8004b30 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002b9c:	210c      	movs	r1, #12
 8002b9e:	4819      	ldr	r0, [pc, #100]	; (8002c04 <UB_VGA_Screen_Init+0x8c>)
 8002ba0:	f002 f87e 	bl	8004ca0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8002ba4:	2108      	movs	r1, #8
 8002ba6:	4817      	ldr	r0, [pc, #92]	; (8002c04 <UB_VGA_Screen_Init+0x8c>)
 8002ba8:	f002 f942 	bl	8004e30 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <UB_VGA_Screen_Init+0x90>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <UB_VGA_Screen_Init+0x90>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bba:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <UB_VGA_Screen_Init+0x90>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <UB_VGA_Screen_Init+0x90>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8002bcc:	490f      	ldr	r1, [pc, #60]	; (8002c0c <UB_VGA_Screen_Init+0x94>)
 8002bce:	f240 1341 	movw	r3, #321	; 0x141
 8002bd2:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <UB_VGA_Screen_Init+0x98>)
 8002bd4:	480f      	ldr	r0, [pc, #60]	; (8002c14 <UB_VGA_Screen_Init+0x9c>)
 8002bd6:	f000 fac3 	bl	8003160 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8002bda:	480e      	ldr	r0, [pc, #56]	; (8002c14 <UB_VGA_Screen_Init+0x9c>)
 8002bdc:	f000 fa12 	bl	8003004 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <UB_VGA_Screen_Init+0x9c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <UB_VGA_Screen_Init+0x9c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0210 	orr.w	r2, r2, #16
 8002bee:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <UB_VGA_Screen_Init+0xa0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a01      	ldr	r2, [pc, #4]	; (8002bfc <UB_VGA_Screen_Init+0x84>)
 8002bf6:	6093      	str	r3, [r2, #8]
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20013cfc 	.word	0x20013cfc
 8002c00:	40020400 	.word	0x40020400
 8002c04:	20000f20 	.word	0x20000f20
 8002c08:	20000ed8 	.word	0x20000ed8
 8002c0c:	2000100c 	.word	0x2000100c
 8002c10:	40021015 	.word	0x40021015
 8002c14:	20000f68 	.word	0x20000f68
 8002c18:	40026488 	.word	0x40026488

08002c1c <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8002c26:	2300      	movs	r3, #0
 8002c28:	81bb      	strh	r3, [r7, #12]
 8002c2a:	e012      	b.n	8002c52 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	81fb      	strh	r3, [r7, #14]
 8002c30:	e008      	b.n	8002c44 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8002c32:	79fa      	ldrb	r2, [r7, #7]
 8002c34:	89b9      	ldrh	r1, [r7, #12]
 8002c36:	89fb      	ldrh	r3, [r7, #14]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f813 	bl	8002c64 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002c3e:	89fb      	ldrh	r3, [r7, #14]
 8002c40:	3301      	adds	r3, #1
 8002c42:	81fb      	strh	r3, [r7, #14]
 8002c44:	89fb      	ldrh	r3, [r7, #14]
 8002c46:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c4a:	d3f2      	bcc.n	8002c32 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8002c4c:	89bb      	ldrh	r3, [r7, #12]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	81bb      	strh	r3, [r7, #12]
 8002c52:	89bb      	ldrh	r3, [r7, #12]
 8002c54:	2bef      	cmp	r3, #239	; 0xef
 8002c56:	d9e9      	bls.n	8002c2c <UB_VGA_FillScreen+0x10>
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	80fb      	strh	r3, [r7, #6]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	80bb      	strh	r3, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c7c:	d301      	bcc.n	8002c82 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8002c82:	88bb      	ldrh	r3, [r7, #4]
 8002c84:	2bef      	cmp	r3, #239	; 0xef
 8002c86:	d901      	bls.n	8002c8c <UB_VGA_SetPixel+0x28>
    yp = 0;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8002c8c:	88ba      	ldrh	r2, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	019b      	lsls	r3, r3, #6
 8002c96:	441a      	add	r2, r3
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	4904      	ldr	r1, [pc, #16]	; (8002cb0 <UB_VGA_SetPixel+0x4c>)
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	54ca      	strb	r2, [r1, r3]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2000100c 	.word	0x2000100c

08002cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <HAL_Init+0x40>)
 8002cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_Init+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_Init+0x40>)
 8002cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_Init+0x40>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <HAL_Init+0x40>)
 8002cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cdc:	2003      	movs	r0, #3
 8002cde:	f000 f94f 	bl	8002f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f000 f808 	bl	8002cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce8:	f7ff fb6a 	bl	80023c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023c00 	.word	0x40023c00

08002cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_InitTick+0x54>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x58>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f967 	bl	8002fea <HAL_SYSTICK_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00e      	b.n	8002d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b0f      	cmp	r3, #15
 8002d2a:	d80a      	bhi.n	8002d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f000 f92f 	bl	8002f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d38:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <HAL_InitTick+0x5c>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e000      	b.n	8002d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	20000008 	.word	0x20000008
 8002d54:	20000004 	.word	0x20000004

08002d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_IncTick+0x20>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <HAL_IncTick+0x24>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_IncTick+0x24>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20000008 	.word	0x20000008
 8002d7c:	20013d08 	.word	0x20013d08

08002d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <HAL_GetTick+0x14>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	20013d08 	.word	0x20013d08

08002d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da0:	f7ff ffee 	bl	8002d80 <HAL_GetTick>
 8002da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d005      	beq.n	8002dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_Delay+0x44>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dbe:	bf00      	nop
 8002dc0:	f7ff ffde 	bl	8002d80 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d8f7      	bhi.n	8002dc0 <HAL_Delay+0x28>
  {
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000008 	.word	0x20000008

08002de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df0:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e12:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <__NVIC_SetPriorityGrouping+0x44>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	60d3      	str	r3, [r2, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00

08002e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e2c:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <__NVIC_GetPriorityGrouping+0x18>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	0a1b      	lsrs	r3, r3, #8
 8002e32:	f003 0307 	and.w	r3, r3, #7
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	db0b      	blt.n	8002e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	4907      	ldr	r1, [pc, #28]	; (8002e7c <__NVIC_EnableIRQ+0x38>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	2001      	movs	r0, #1
 8002e66:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100

08002e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db0a      	blt.n	8002eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	490c      	ldr	r1, [pc, #48]	; (8002ecc <__NVIC_SetPriority+0x4c>)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	0112      	lsls	r2, r2, #4
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea8:	e00a      	b.n	8002ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <__NVIC_SetPriority+0x50>)
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	3b04      	subs	r3, #4
 8002eb8:	0112      	lsls	r2, r2, #4
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	761a      	strb	r2, [r3, #24]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000e100 	.word	0xe000e100
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b089      	sub	sp, #36	; 0x24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f1c3 0307 	rsb	r3, r3, #7
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	bf28      	it	cs
 8002ef2:	2304      	movcs	r3, #4
 8002ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d902      	bls.n	8002f04 <NVIC_EncodePriority+0x30>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3b03      	subs	r3, #3
 8002f02:	e000      	b.n	8002f06 <NVIC_EncodePriority+0x32>
 8002f04:	2300      	movs	r3, #0
 8002f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	401a      	ands	r2, r3
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	fa01 f303 	lsl.w	r3, r1, r3
 8002f26:	43d9      	mvns	r1, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	4313      	orrs	r3, r2
         );
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f4c:	d301      	bcc.n	8002f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00f      	b.n	8002f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f52:	4a0a      	ldr	r2, [pc, #40]	; (8002f7c <SysTick_Config+0x40>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5a:	210f      	movs	r1, #15
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	f7ff ff8e 	bl	8002e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <SysTick_Config+0x40>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <SysTick_Config+0x40>)
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	e000e010 	.word	0xe000e010

08002f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff29 	bl	8002de0 <__NVIC_SetPriorityGrouping>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa8:	f7ff ff3e 	bl	8002e28 <__NVIC_GetPriorityGrouping>
 8002fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff8e 	bl	8002ed4 <NVIC_EncodePriority>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff5d 	bl	8002e80 <__NVIC_SetPriority>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff31 	bl	8002e44 <__NVIC_EnableIRQ>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ffa2 	bl	8002f3c <SysTick_Config>
 8002ff8:	4603      	mov	r3, r0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003010:	f7ff feb6 	bl	8002d80 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e099      	b.n	8003154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003040:	e00f      	b.n	8003062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003042:	f7ff fe9d 	bl	8002d80 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b05      	cmp	r3, #5
 800304e:	d908      	bls.n	8003062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2203      	movs	r2, #3
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e078      	b.n	8003154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e8      	bne.n	8003042 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_DMA_Init+0x158>)
 800307c:	4013      	ands	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d107      	bne.n	80030cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	4313      	orrs	r3, r2
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0307 	bic.w	r3, r3, #7
 80030e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d117      	bne.n	8003126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fb01 	bl	8003710 <DMA_CheckFifoParam>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2240      	movs	r2, #64	; 0x40
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003122:	2301      	movs	r3, #1
 8003124:	e016      	b.n	8003154 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fab8 	bl	80036a4 <DMA_CalcBaseAndBitshift>
 8003134:	4603      	mov	r3, r0
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313c:	223f      	movs	r2, #63	; 0x3f
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	f010803f 	.word	0xf010803f

08003160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_DMA_Start_IT+0x26>
 8003182:	2302      	movs	r3, #2
 8003184:	e040      	b.n	8003208 <HAL_DMA_Start_IT+0xa8>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d12f      	bne.n	80031fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa4a 	bl	8003648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b8:	223f      	movs	r2, #63	; 0x3f
 80031ba:	409a      	lsls	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0216 	orr.w	r2, r2, #22
 80031ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0208 	orr.w	r2, r2, #8
 80031e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e005      	b.n	8003206 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800321e:	f7ff fdaf 	bl	8002d80 <HAL_GetTick>
 8003222:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d008      	beq.n	8003242 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e052      	b.n	80032e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0216 	bic.w	r2, r2, #22
 8003250:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003260:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_DMA_Abort+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003292:	e013      	b.n	80032bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003294:	f7ff fd74 	bl	8002d80 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d90c      	bls.n	80032bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2203      	movs	r2, #3
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e015      	b.n	80032e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e4      	bne.n	8003294 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	223f      	movs	r2, #63	; 0x3f
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d004      	beq.n	800330e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	; 0x80
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00c      	b.n	8003328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2205      	movs	r2, #5
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003340:	4b8e      	ldr	r3, [pc, #568]	; (800357c <HAL_DMA_IRQHandler+0x248>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a8e      	ldr	r2, [pc, #568]	; (8003580 <HAL_DMA_IRQHandler+0x24c>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a9b      	lsrs	r3, r3, #10
 800334c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	2208      	movs	r2, #8
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0204 	bic.w	r2, r2, #4
 8003386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2208      	movs	r2, #8
 800338e:	409a      	lsls	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	2201      	movs	r2, #1
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	2204      	movs	r2, #4
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d012      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f8:	2204      	movs	r2, #4
 80033fa:	409a      	lsls	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003410:	2210      	movs	r2, #16
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d043      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d03c      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	2210      	movs	r2, #16
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d018      	beq.n	8003476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d024      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	e01f      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e016      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0208 	bic.w	r2, r2, #8
 8003492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2220      	movs	r2, #32
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 808f 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8087 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ca:	2220      	movs	r2, #32
 80034cc:	409a      	lsls	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d136      	bne.n	800354c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0216 	bic.w	r2, r2, #22
 80034ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_DMA_IRQHandler+0x1da>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0208 	bic.w	r2, r2, #8
 800351c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	223f      	movs	r2, #63	; 0x3f
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	2b00      	cmp	r3, #0
 8003540:	d07e      	beq.n	8003640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
        }
        return;
 800354a:	e079      	b.n	8003640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01d      	beq.n	8003596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	2b00      	cmp	r3, #0
 800356e:	d031      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
 8003578:	e02c      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
 800357a:	bf00      	nop
 800357c:	20000000 	.word	0x20000000
 8003580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
 8003594:	e01e      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0210 	bic.w	r2, r2, #16
 80035b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d032      	beq.n	8003642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2205      	movs	r2, #5
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3301      	adds	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	d307      	bcc.n	800361c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f2      	bne.n	8003600 <HAL_DMA_IRQHandler+0x2cc>
 800361a:	e000      	b.n	800361e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800361c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
 800363e:	e000      	b.n	8003642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003640:	bf00      	nop
    }
  }
}
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d108      	bne.n	8003688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003686:	e007      	b.n	8003698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3b10      	subs	r3, #16
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <DMA_CalcBaseAndBitshift+0x64>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036be:	4a13      	ldr	r2, [pc, #76]	; (800370c <DMA_CalcBaseAndBitshift+0x68>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d909      	bls.n	80036e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	659a      	str	r2, [r3, #88]	; 0x58
 80036e4:	e007      	b.n	80036f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	aaaaaaab 	.word	0xaaaaaaab
 800370c:	08014678 	.word	0x08014678

08003710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11f      	bne.n	800376a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d856      	bhi.n	80037de <DMA_CheckFifoParam+0xce>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <DMA_CheckFifoParam+0x28>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003749 	.word	0x08003749
 800373c:	0800375b 	.word	0x0800375b
 8003740:	08003749 	.word	0x08003749
 8003744:	080037df 	.word	0x080037df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d046      	beq.n	80037e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e043      	b.n	80037e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003762:	d140      	bne.n	80037e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003768:	e03d      	b.n	80037e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003772:	d121      	bne.n	80037b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d837      	bhi.n	80037ea <DMA_CheckFifoParam+0xda>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <DMA_CheckFifoParam+0x70>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	08003791 	.word	0x08003791
 8003784:	08003797 	.word	0x08003797
 8003788:	08003791 	.word	0x08003791
 800378c:	080037a9 	.word	0x080037a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e030      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d025      	beq.n	80037ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a6:	e022      	b.n	80037ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037b0:	d11f      	bne.n	80037f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b6:	e01c      	b.n	80037f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d903      	bls.n	80037c6 <DMA_CheckFifoParam+0xb6>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d003      	beq.n	80037cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c4:	e018      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ca:	e015      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      break;
 80037dc:	e00b      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;
 80037de:	bf00      	nop
 80037e0:	e00a      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e008      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e006      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e004      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
 80037f0:	e002      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037f6:	bf00      	nop
    }
  } 
  
  return status; 
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	; 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e16b      	b.n	8003afc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003824:	2201      	movs	r2, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	f040 815a 	bne.w	8003af6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d005      	beq.n	800385a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003856:	2b02      	cmp	r3, #2
 8003858:	d130      	bne.n	80038bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0201 	and.w	r2, r3, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d017      	beq.n	80038f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d123      	bne.n	800394c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	08da      	lsrs	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3208      	adds	r2, #8
 800390c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	220f      	movs	r2, #15
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	08da      	lsrs	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3208      	adds	r2, #8
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0203 	and.w	r2, r3, #3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80b4 	beq.w	8003af6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b60      	ldr	r3, [pc, #384]	; (8003b14 <HAL_GPIO_Init+0x30c>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	4a5f      	ldr	r2, [pc, #380]	; (8003b14 <HAL_GPIO_Init+0x30c>)
 8003998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800399c:	6453      	str	r3, [r2, #68]	; 0x44
 800399e:	4b5d      	ldr	r3, [pc, #372]	; (8003b14 <HAL_GPIO_Init+0x30c>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039aa:	4a5b      	ldr	r2, [pc, #364]	; (8003b18 <HAL_GPIO_Init+0x310>)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	3302      	adds	r3, #2
 80039b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	220f      	movs	r2, #15
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a52      	ldr	r2, [pc, #328]	; (8003b1c <HAL_GPIO_Init+0x314>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d02b      	beq.n	8003a2e <HAL_GPIO_Init+0x226>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a51      	ldr	r2, [pc, #324]	; (8003b20 <HAL_GPIO_Init+0x318>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d025      	beq.n	8003a2a <HAL_GPIO_Init+0x222>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a50      	ldr	r2, [pc, #320]	; (8003b24 <HAL_GPIO_Init+0x31c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d01f      	beq.n	8003a26 <HAL_GPIO_Init+0x21e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4f      	ldr	r2, [pc, #316]	; (8003b28 <HAL_GPIO_Init+0x320>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d019      	beq.n	8003a22 <HAL_GPIO_Init+0x21a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4e      	ldr	r2, [pc, #312]	; (8003b2c <HAL_GPIO_Init+0x324>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_GPIO_Init+0x216>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <HAL_GPIO_Init+0x328>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00d      	beq.n	8003a1a <HAL_GPIO_Init+0x212>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4c      	ldr	r2, [pc, #304]	; (8003b34 <HAL_GPIO_Init+0x32c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x20e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a4b      	ldr	r2, [pc, #300]	; (8003b38 <HAL_GPIO_Init+0x330>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_GPIO_Init+0x20a>
 8003a0e:	2307      	movs	r3, #7
 8003a10:	e00e      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a12:	2308      	movs	r3, #8
 8003a14:	e00c      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a16:	2306      	movs	r3, #6
 8003a18:	e00a      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a1a:	2305      	movs	r3, #5
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a1e:	2304      	movs	r3, #4
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x228>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	4935      	ldr	r1, [pc, #212]	; (8003b18 <HAL_GPIO_Init+0x310>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4e:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_GPIO_Init+0x334>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a72:	4a32      	ldr	r2, [pc, #200]	; (8003b3c <HAL_GPIO_Init+0x334>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a78:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <HAL_GPIO_Init+0x334>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a9c:	4a27      	ldr	r2, [pc, #156]	; (8003b3c <HAL_GPIO_Init+0x334>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <HAL_GPIO_Init+0x334>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac6:	4a1d      	ldr	r2, [pc, #116]	; (8003b3c <HAL_GPIO_Init+0x334>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_GPIO_Init+0x334>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af0:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <HAL_GPIO_Init+0x334>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f ae90 	bls.w	8003824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40021400 	.word	0x40021400
 8003b34:	40021800 	.word	0x40021800
 8003b38:	40021c00 	.word	0x40021c00
 8003b3c:	40013c00 	.word	0x40013c00

08003b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	807b      	strh	r3, [r7, #2]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b50:	787b      	ldrb	r3, [r7, #1]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b5c:	e003      	b.n	8003b66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b5e:	887b      	ldrh	r3, [r7, #2]
 8003b60:	041a      	lsls	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	619a      	str	r2, [r3, #24]
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e267      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d075      	beq.n	8003c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b92:	4b88      	ldr	r3, [pc, #544]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9e:	4b85      	ldr	r3, [pc, #532]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d112      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003baa:	4b82      	ldr	r3, [pc, #520]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4b7e      	ldr	r3, [pc, #504]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d05b      	beq.n	8003c7c <HAL_RCC_OscConfig+0x108>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d157      	bne.n	8003c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e242      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x74>
 8003bda:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a75      	ldr	r2, [pc, #468]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01d      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x98>
 8003bf2:	4b70      	ldr	r3, [pc, #448]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6f      	ldr	r2, [pc, #444]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a6c      	ldr	r2, [pc, #432]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	4b69      	ldr	r3, [pc, #420]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a68      	ldr	r2, [pc, #416]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a65      	ldr	r2, [pc, #404]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7ff f8a8 	bl	8002d80 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c34:	f7ff f8a4 	bl	8002d80 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e207      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b5b      	ldr	r3, [pc, #364]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0xc0>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7ff f894 	bl	8002d80 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7ff f890 	bl	8002d80 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e1f3      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	4b51      	ldr	r3, [pc, #324]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0xe8>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d063      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d11c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca2:	4b44      	ldr	r3, [pc, #272]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d116      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e1c7      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4937      	ldr	r1, [pc, #220]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	e03a      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce4:	4b34      	ldr	r3, [pc, #208]	; (8003db8 <HAL_RCC_OscConfig+0x244>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7ff f849 	bl	8002d80 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7ff f845 	bl	8002d80 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1a8      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b28      	ldr	r3, [pc, #160]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4925      	ldr	r1, [pc, #148]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d26:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_RCC_OscConfig+0x244>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7ff f828 	bl	8002d80 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d34:	f7ff f824 	bl	8002d80 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e187      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d036      	beq.n	8003dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d66:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_RCC_OscConfig+0x248>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7ff f808 	bl	8002d80 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d74:	f7ff f804 	bl	8002d80 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e167      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x200>
 8003d92:	e01b      	b.n	8003dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCC_OscConfig+0x248>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7fe fff1 	bl	8002d80 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	e00e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da2:	f7fe ffed 	bl	8002d80 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d907      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e150      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
 8003db4:	40023800 	.word	0x40023800
 8003db8:	42470000 	.word	0x42470000
 8003dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ea      	bne.n	8003da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8097 	beq.w	8003f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dde:	4b81      	ldr	r3, [pc, #516]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4a7c      	ldr	r2, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfa:	4b7a      	ldr	r3, [pc, #488]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b77      	ldr	r3, [pc, #476]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d118      	bne.n	8003e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e16:	4b74      	ldr	r3, [pc, #464]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a73      	ldr	r2, [pc, #460]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e22:	f7fe ffad 	bl	8002d80 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fe ffa9 	bl	8002d80 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e10c      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	4b6a      	ldr	r3, [pc, #424]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2ea>
 8003e50:	4b64      	ldr	r3, [pc, #400]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a63      	ldr	r2, [pc, #396]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCC_OscConfig+0x324>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x30c>
 8003e66:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a5e      	ldr	r2, [pc, #376]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	4b5c      	ldr	r3, [pc, #368]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a5b      	ldr	r2, [pc, #364]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0x324>
 8003e80:	4b58      	ldr	r3, [pc, #352]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a57      	ldr	r2, [pc, #348]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	4b55      	ldr	r3, [pc, #340]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a54      	ldr	r2, [pc, #336]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fe ff6e 	bl	8002d80 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fe ff6a 	bl	8002d80 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e0cb      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	4b49      	ldr	r3, [pc, #292]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ee      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x334>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ecc:	f7fe ff58 	bl	8002d80 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7fe ff54 	bl	8002d80 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e0b5      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1ee      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efc:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	4a38      	ldr	r2, [pc, #224]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80a1 	beq.w	8004054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f12:	4b34      	ldr	r3, [pc, #208]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d05c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d141      	bne.n	8003faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b31      	ldr	r3, [pc, #196]	; (8003fec <HAL_RCC_OscConfig+0x478>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fe ff28 	bl	8002d80 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fe ff24 	bl	8002d80 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e087      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	491b      	ldr	r1, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x478>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f82:	f7fe fefd 	bl	8002d80 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fe fef9 	bl	8002d80 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e05c      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x416>
 8003fa8:	e054      	b.n	8004054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_RCC_OscConfig+0x478>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fe fee6 	bl	8002d80 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fe fee2 	bl	8002d80 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e045      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x444>
 8003fd6:	e03d      	b.n	8004054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e038      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x4ec>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d121      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d11a      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004028:	4293      	cmp	r3, r2
 800402a:	d111      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	3b01      	subs	r3, #1
 800403a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d107      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0cc      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b68      	ldr	r3, [pc, #416]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d90c      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b65      	ldr	r3, [pc, #404]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d044      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d119      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d003      	beq.n	8004122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411e:	2b03      	cmp	r3, #3
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e067      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b37      	ldr	r3, [pc, #220]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4934      	ldr	r1, [pc, #208]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7fe fe14 	bl	8002d80 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fe fe10 	bl	8002d80 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e04f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d20c      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f821 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	490a      	ldr	r1, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fd74 	bl	8002cf8 <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023c00 	.word	0x40023c00
 8004220:	40023800 	.word	0x40023800
 8004224:	08014660 	.word	0x08014660
 8004228:	20000000 	.word	0x20000000
 800422c:	20000004 	.word	0x20000004

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004234:	b094      	sub	sp, #80	; 0x50
 8004236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
 800423c:	2300      	movs	r3, #0
 800423e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004240:	2300      	movs	r3, #0
 8004242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004248:	4b79      	ldr	r3, [pc, #484]	; (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d00d      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x40>
 8004254:	2b08      	cmp	r3, #8
 8004256:	f200 80e1 	bhi.w	800441c <HAL_RCC_GetSysClockFreq+0x1ec>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x34>
 800425e:	2b04      	cmp	r3, #4
 8004260:	d003      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x3a>
 8004262:	e0db      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b73      	ldr	r3, [pc, #460]	; (8004434 <HAL_RCC_GetSysClockFreq+0x204>)
 8004266:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004268:	e0db      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426a:	4b73      	ldr	r3, [pc, #460]	; (8004438 <HAL_RCC_GetSysClockFreq+0x208>)
 800426c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800426e:	e0d8      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004270:	4b6f      	ldr	r3, [pc, #444]	; (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004278:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800427a:	4b6d      	ldr	r3, [pc, #436]	; (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d063      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004286:	4b6a      	ldr	r3, [pc, #424]	; (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	2200      	movs	r2, #0
 800428e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004298:	633b      	str	r3, [r7, #48]	; 0x30
 800429a:	2300      	movs	r3, #0
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
 800429e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042a2:	4622      	mov	r2, r4
 80042a4:	462b      	mov	r3, r5
 80042a6:	f04f 0000 	mov.w	r0, #0
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	0159      	lsls	r1, r3, #5
 80042b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042b4:	0150      	lsls	r0, r2, #5
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4621      	mov	r1, r4
 80042bc:	1a51      	subs	r1, r2, r1
 80042be:	6139      	str	r1, [r7, #16]
 80042c0:	4629      	mov	r1, r5
 80042c2:	eb63 0301 	sbc.w	r3, r3, r1
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	f04f 0200 	mov.w	r2, #0
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042d4:	4659      	mov	r1, fp
 80042d6:	018b      	lsls	r3, r1, #6
 80042d8:	4651      	mov	r1, sl
 80042da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042de:	4651      	mov	r1, sl
 80042e0:	018a      	lsls	r2, r1, #6
 80042e2:	4651      	mov	r1, sl
 80042e4:	ebb2 0801 	subs.w	r8, r2, r1
 80042e8:	4659      	mov	r1, fp
 80042ea:	eb63 0901 	sbc.w	r9, r3, r1
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004302:	4690      	mov	r8, r2
 8004304:	4699      	mov	r9, r3
 8004306:	4623      	mov	r3, r4
 8004308:	eb18 0303 	adds.w	r3, r8, r3
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	462b      	mov	r3, r5
 8004310:	eb49 0303 	adc.w	r3, r9, r3
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	f04f 0300 	mov.w	r3, #0
 800431e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004322:	4629      	mov	r1, r5
 8004324:	024b      	lsls	r3, r1, #9
 8004326:	4621      	mov	r1, r4
 8004328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800432c:	4621      	mov	r1, r4
 800432e:	024a      	lsls	r2, r1, #9
 8004330:	4610      	mov	r0, r2
 8004332:	4619      	mov	r1, r3
 8004334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004336:	2200      	movs	r2, #0
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
 800433a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800433c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004340:	f7fc f9ba 	bl	80006b8 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4613      	mov	r3, r2
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800434c:	e058      	b.n	8004400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434e:	4b38      	ldr	r3, [pc, #224]	; (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	2200      	movs	r2, #0
 8004356:	4618      	mov	r0, r3
 8004358:	4611      	mov	r1, r2
 800435a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800435e:	623b      	str	r3, [r7, #32]
 8004360:	2300      	movs	r3, #0
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
 8004364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004368:	4642      	mov	r2, r8
 800436a:	464b      	mov	r3, r9
 800436c:	f04f 0000 	mov.w	r0, #0
 8004370:	f04f 0100 	mov.w	r1, #0
 8004374:	0159      	lsls	r1, r3, #5
 8004376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800437a:	0150      	lsls	r0, r2, #5
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4641      	mov	r1, r8
 8004382:	ebb2 0a01 	subs.w	sl, r2, r1
 8004386:	4649      	mov	r1, r9
 8004388:	eb63 0b01 	sbc.w	fp, r3, r1
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800439c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043a0:	ebb2 040a 	subs.w	r4, r2, sl
 80043a4:	eb63 050b 	sbc.w	r5, r3, fp
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	00eb      	lsls	r3, r5, #3
 80043b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043b6:	00e2      	lsls	r2, r4, #3
 80043b8:	4614      	mov	r4, r2
 80043ba:	461d      	mov	r5, r3
 80043bc:	4643      	mov	r3, r8
 80043be:	18e3      	adds	r3, r4, r3
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	464b      	mov	r3, r9
 80043c4:	eb45 0303 	adc.w	r3, r5, r3
 80043c8:	607b      	str	r3, [r7, #4]
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043d6:	4629      	mov	r1, r5
 80043d8:	028b      	lsls	r3, r1, #10
 80043da:	4621      	mov	r1, r4
 80043dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e0:	4621      	mov	r1, r4
 80043e2:	028a      	lsls	r2, r1, #10
 80043e4:	4610      	mov	r0, r2
 80043e6:	4619      	mov	r1, r3
 80043e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ea:	2200      	movs	r2, #0
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	61fa      	str	r2, [r7, #28]
 80043f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043f4:	f7fc f960 	bl	80006b8 <__aeabi_uldivmod>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4613      	mov	r3, r2
 80043fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCC_GetSysClockFreq+0x200>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	3301      	adds	r3, #1
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800441a:	e002      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_GetSysClockFreq+0x204>)
 800441e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004424:	4618      	mov	r0, r3
 8004426:	3750      	adds	r7, #80	; 0x50
 8004428:	46bd      	mov	sp, r7
 800442a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	00f42400 	.word	0x00f42400
 8004438:	007a1200 	.word	0x007a1200

0800443c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004440:	4b03      	ldr	r3, [pc, #12]	; (8004450 <HAL_RCC_GetHCLKFreq+0x14>)
 8004442:	681b      	ldr	r3, [r3, #0]
}
 8004444:	4618      	mov	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000000 	.word	0x20000000

08004454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004458:	f7ff fff0 	bl	800443c <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	0a9b      	lsrs	r3, r3, #10
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4903      	ldr	r1, [pc, #12]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40023800 	.word	0x40023800
 8004478:	08014670 	.word	0x08014670

0800447c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004480:	f7ff ffdc 	bl	800443c <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0b5b      	lsrs	r3, r3, #13
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	08014670 	.word	0x08014670

080044a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e07b      	b.n	80045ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c6:	d009      	beq.n	80044dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	61da      	str	r2, [r3, #28]
 80044ce:	e005      	b.n	80044dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd fefa 	bl	80022f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	431a      	orrs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004560:	ea42 0103 	orr.w	r1, r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	0c1b      	lsrs	r3, r3, #16
 800457a:	f003 0104 	and.w	r1, r3, #4
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	f003 0210 	and.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b08c      	sub	sp, #48	; 0x30
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045c4:	2301      	movs	r3, #1
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x26>
 80045d8:	2302      	movs	r3, #2
 80045da:	e18a      	b.n	80048f2 <HAL_SPI_TransmitReceive+0x33c>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045e4:	f7fe fbcc 	bl	8002d80 <HAL_GetTick>
 80045e8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004602:	2b01      	cmp	r3, #1
 8004604:	d00f      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x70>
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460c:	d107      	bne.n	800461e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d103      	bne.n	800461e <HAL_SPI_TransmitReceive+0x68>
 8004616:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800461a:	2b04      	cmp	r3, #4
 800461c:	d003      	beq.n	8004626 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800461e:	2302      	movs	r3, #2
 8004620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004624:	e15b      	b.n	80048de <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <HAL_SPI_TransmitReceive+0x82>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_SPI_TransmitReceive+0x82>
 8004632:	887b      	ldrh	r3, [r7, #2]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800463e:	e14e      	b.n	80048de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b04      	cmp	r3, #4
 800464a:	d003      	beq.n	8004654 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2205      	movs	r2, #5
 8004650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	887a      	ldrh	r2, [r7, #2]
 8004664:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	887a      	ldrh	r2, [r7, #2]
 800466a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	887a      	ldrh	r2, [r7, #2]
 8004676:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	887a      	ldrh	r2, [r7, #2]
 800467c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d007      	beq.n	80046a8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b0:	d178      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_SPI_TransmitReceive+0x10a>
 80046ba:	8b7b      	ldrh	r3, [r7, #26]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d166      	bne.n	800478e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	881a      	ldrh	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d0:	1c9a      	adds	r2, r3, #2
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046da:	b29b      	uxth	r3, r3
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046e4:	e053      	b.n	800478e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d11b      	bne.n	800472c <HAL_SPI_TransmitReceive+0x176>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d016      	beq.n	800472c <HAL_SPI_TransmitReceive+0x176>
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d113      	bne.n	800472c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	881a      	ldrh	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	1c9a      	adds	r2, r3, #2
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d119      	bne.n	800476e <HAL_SPI_TransmitReceive+0x1b8>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d014      	beq.n	800476e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	b292      	uxth	r2, r2
 8004750:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	1c9a      	adds	r2, r3, #2
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800476a:	2301      	movs	r3, #1
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800476e:	f7fe fb07 	bl	8002d80 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800477a:	429a      	cmp	r2, r3
 800477c:	d807      	bhi.n	800478e <HAL_SPI_TransmitReceive+0x1d8>
 800477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d003      	beq.n	800478e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800478c:	e0a7      	b.n	80048de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1a6      	bne.n	80046e6 <HAL_SPI_TransmitReceive+0x130>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1a1      	bne.n	80046e6 <HAL_SPI_TransmitReceive+0x130>
 80047a2:	e07c      	b.n	800489e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_SPI_TransmitReceive+0x1fc>
 80047ac:	8b7b      	ldrh	r3, [r7, #26]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d16b      	bne.n	800488a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	330c      	adds	r3, #12
 80047bc:	7812      	ldrb	r2, [r2, #0]
 80047be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047d8:	e057      	b.n	800488a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d11c      	bne.n	8004822 <HAL_SPI_TransmitReceive+0x26c>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d017      	beq.n	8004822 <HAL_SPI_TransmitReceive+0x26c>
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d114      	bne.n	8004822 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	7812      	ldrb	r2, [r2, #0]
 8004804:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b01      	cmp	r3, #1
 800482e:	d119      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x2ae>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d014      	beq.n	8004864 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004860:	2301      	movs	r3, #1
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004864:	f7fe fa8c 	bl	8002d80 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004870:	429a      	cmp	r2, r3
 8004872:	d803      	bhi.n	800487c <HAL_SPI_TransmitReceive+0x2c6>
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487a:	d102      	bne.n	8004882 <HAL_SPI_TransmitReceive+0x2cc>
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	2b00      	cmp	r3, #0
 8004880:	d103      	bne.n	800488a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004888:	e029      	b.n	80048de <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1a2      	bne.n	80047da <HAL_SPI_TransmitReceive+0x224>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d19d      	bne.n	80047da <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f8b2 	bl	8004a0c <SPI_EndRxTxTransaction>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d006      	beq.n	80048bc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048ba:	e010      	b.n	80048de <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10b      	bne.n	80048dc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	e000      	b.n	80048de <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3730      	adds	r7, #48	; 0x30
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	4613      	mov	r3, r2
 800490a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800490c:	f7fe fa38 	bl	8002d80 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	1a9b      	subs	r3, r3, r2
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	4413      	add	r3, r2
 800491a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800491c:	f7fe fa30 	bl	8002d80 <HAL_GetTick>
 8004920:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004922:	4b39      	ldr	r3, [pc, #228]	; (8004a08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	015b      	lsls	r3, r3, #5
 8004928:	0d1b      	lsrs	r3, r3, #20
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004932:	e054      	b.n	80049de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	d050      	beq.n	80049de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800493c:	f7fe fa20 	bl	8002d80 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	69fa      	ldr	r2, [r7, #28]
 8004948:	429a      	cmp	r2, r3
 800494a:	d902      	bls.n	8004952 <SPI_WaitFlagStateUntilTimeout+0x56>
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d13d      	bne.n	80049ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496a:	d111      	bne.n	8004990 <SPI_WaitFlagStateUntilTimeout+0x94>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	d004      	beq.n	8004980 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497e:	d107      	bne.n	8004990 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004998:	d10f      	bne.n	80049ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e017      	b.n	80049fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	3b01      	subs	r3, #1
 80049dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4013      	ands	r3, r2
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	bf0c      	ite	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	2300      	movne	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d19b      	bne.n	8004934 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000000 	.word	0x20000000

08004a0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af02      	add	r7, sp, #8
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a18:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <SPI_EndRxTxTransaction+0x7c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a1b      	ldr	r2, [pc, #108]	; (8004a8c <SPI_EndRxTxTransaction+0x80>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	0d5b      	lsrs	r3, r3, #21
 8004a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a28:	fb02 f303 	mul.w	r3, r2, r3
 8004a2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a36:	d112      	bne.n	8004a5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2180      	movs	r1, #128	; 0x80
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff ff5a 	bl	80048fc <SPI_WaitFlagStateUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d016      	beq.n	8004a7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e00f      	b.n	8004a7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d0f2      	beq.n	8004a5e <SPI_EndRxTxTransaction+0x52>
 8004a78:	e000      	b.n	8004a7c <SPI_EndRxTxTransaction+0x70>
        break;
 8004a7a:	bf00      	nop
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	165e9f81 	.word	0x165e9f81

08004a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e041      	b.n	8004b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fd ff0a 	bl	80028d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f000 fd88 	bl	80055e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d001      	beq.n	8004b48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e046      	b.n	8004bd6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a23      	ldr	r2, [pc, #140]	; (8004be4 <HAL_TIM_Base_Start+0xb4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d022      	beq.n	8004ba0 <HAL_TIM_Base_Start+0x70>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d01d      	beq.n	8004ba0 <HAL_TIM_Base_Start+0x70>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <HAL_TIM_Base_Start+0xb8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d018      	beq.n	8004ba0 <HAL_TIM_Base_Start+0x70>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <HAL_TIM_Base_Start+0xbc>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <HAL_TIM_Base_Start+0x70>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1c      	ldr	r2, [pc, #112]	; (8004bf0 <HAL_TIM_Base_Start+0xc0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00e      	beq.n	8004ba0 <HAL_TIM_Base_Start+0x70>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1b      	ldr	r2, [pc, #108]	; (8004bf4 <HAL_TIM_Base_Start+0xc4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <HAL_TIM_Base_Start+0x70>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a19      	ldr	r2, [pc, #100]	; (8004bf8 <HAL_TIM_Base_Start+0xc8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_TIM_Base_Start+0x70>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a18      	ldr	r2, [pc, #96]	; (8004bfc <HAL_TIM_Base_Start+0xcc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d111      	bne.n	8004bc4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b06      	cmp	r3, #6
 8004bb0:	d010      	beq.n	8004bd4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0201 	orr.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc2:	e007      	b.n	8004bd4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0201 	orr.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40010400 	.word	0x40010400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40001800 	.word	0x40001800

08004c00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e041      	b.n	8004c96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fd fea4 	bl	8002974 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f000 fcd0 	bl	80055e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <HAL_TIM_PWM_Start+0x24>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	bf14      	ite	ne
 8004cbc:	2301      	movne	r3, #1
 8004cbe:	2300      	moveq	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	e022      	b.n	8004d0a <HAL_TIM_PWM_Start+0x6a>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d109      	bne.n	8004cde <HAL_TIM_PWM_Start+0x3e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	bf14      	ite	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	2300      	moveq	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	e015      	b.n	8004d0a <HAL_TIM_PWM_Start+0x6a>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d109      	bne.n	8004cf8 <HAL_TIM_PWM_Start+0x58>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	e008      	b.n	8004d0a <HAL_TIM_PWM_Start+0x6a>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	bf14      	ite	ne
 8004d04:	2301      	movne	r3, #1
 8004d06:	2300      	moveq	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e07c      	b.n	8004e0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d104      	bne.n	8004d22 <HAL_TIM_PWM_Start+0x82>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d20:	e013      	b.n	8004d4a <HAL_TIM_PWM_Start+0xaa>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d104      	bne.n	8004d32 <HAL_TIM_PWM_Start+0x92>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d30:	e00b      	b.n	8004d4a <HAL_TIM_PWM_Start+0xaa>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d104      	bne.n	8004d42 <HAL_TIM_PWM_Start+0xa2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d40:	e003      	b.n	8004d4a <HAL_TIM_PWM_Start+0xaa>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 ff30 	bl	8005bb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a2d      	ldr	r2, [pc, #180]	; (8004e14 <HAL_TIM_PWM_Start+0x174>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d004      	beq.n	8004d6c <HAL_TIM_PWM_Start+0xcc>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a2c      	ldr	r2, [pc, #176]	; (8004e18 <HAL_TIM_PWM_Start+0x178>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIM_PWM_Start+0xd0>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e000      	b.n	8004d72 <HAL_TIM_PWM_Start+0xd2>
 8004d70:	2300      	movs	r3, #0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d007      	beq.n	8004d86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a22      	ldr	r2, [pc, #136]	; (8004e14 <HAL_TIM_PWM_Start+0x174>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d022      	beq.n	8004dd6 <HAL_TIM_PWM_Start+0x136>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d01d      	beq.n	8004dd6 <HAL_TIM_PWM_Start+0x136>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <HAL_TIM_PWM_Start+0x17c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d018      	beq.n	8004dd6 <HAL_TIM_PWM_Start+0x136>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <HAL_TIM_PWM_Start+0x180>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <HAL_TIM_PWM_Start+0x136>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <HAL_TIM_PWM_Start+0x184>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00e      	beq.n	8004dd6 <HAL_TIM_PWM_Start+0x136>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <HAL_TIM_PWM_Start+0x178>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <HAL_TIM_PWM_Start+0x136>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <HAL_TIM_PWM_Start+0x188>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d004      	beq.n	8004dd6 <HAL_TIM_PWM_Start+0x136>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <HAL_TIM_PWM_Start+0x18c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d111      	bne.n	8004dfa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b06      	cmp	r3, #6
 8004de6:	d010      	beq.n	8004e0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df8:	e007      	b.n	8004e0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40010400 	.word	0x40010400
 8004e1c:	40000400 	.word	0x40000400
 8004e20:	40000800 	.word	0x40000800
 8004e24:	40000c00 	.word	0x40000c00
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40001800 	.word	0x40001800

08004e30 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_TIM_PWM_Start_IT+0x28>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e022      	b.n	8004e9e <HAL_TIM_PWM_Start_IT+0x6e>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d109      	bne.n	8004e72 <HAL_TIM_PWM_Start_IT+0x42>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	e015      	b.n	8004e9e <HAL_TIM_PWM_Start_IT+0x6e>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d109      	bne.n	8004e8c <HAL_TIM_PWM_Start_IT+0x5c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e008      	b.n	8004e9e <HAL_TIM_PWM_Start_IT+0x6e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e0c7      	b.n	8005036 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Start_IT+0x86>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb4:	e013      	b.n	8004ede <HAL_TIM_PWM_Start_IT+0xae>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start_IT+0x96>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec4:	e00b      	b.n	8004ede <HAL_TIM_PWM_Start_IT+0xae>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_PWM_Start_IT+0xa6>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed4:	e003      	b.n	8004ede <HAL_TIM_PWM_Start_IT+0xae>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b0c      	cmp	r3, #12
 8004ee2:	d841      	bhi.n	8004f68 <HAL_TIM_PWM_Start_IT+0x138>
 8004ee4:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <HAL_TIM_PWM_Start_IT+0xbc>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f21 	.word	0x08004f21
 8004ef0:	08004f69 	.word	0x08004f69
 8004ef4:	08004f69 	.word	0x08004f69
 8004ef8:	08004f69 	.word	0x08004f69
 8004efc:	08004f33 	.word	0x08004f33
 8004f00:	08004f69 	.word	0x08004f69
 8004f04:	08004f69 	.word	0x08004f69
 8004f08:	08004f69 	.word	0x08004f69
 8004f0c:	08004f45 	.word	0x08004f45
 8004f10:	08004f69 	.word	0x08004f69
 8004f14:	08004f69 	.word	0x08004f69
 8004f18:	08004f69 	.word	0x08004f69
 8004f1c:	08004f57 	.word	0x08004f57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0202 	orr.w	r2, r2, #2
 8004f2e:	60da      	str	r2, [r3, #12]
      break;
 8004f30:	e01d      	b.n	8004f6e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0204 	orr.w	r2, r2, #4
 8004f40:	60da      	str	r2, [r3, #12]
      break;
 8004f42:	e014      	b.n	8004f6e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0208 	orr.w	r2, r2, #8
 8004f52:	60da      	str	r2, [r3, #12]
      break;
 8004f54:	e00b      	b.n	8004f6e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0210 	orr.w	r2, r2, #16
 8004f64:	60da      	str	r2, [r3, #12]
      break;
 8004f66:	e002      	b.n	8004f6e <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d15f      	bne.n	8005034 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fe1b 	bl	8005bb8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2e      	ldr	r2, [pc, #184]	; (8005040 <HAL_TIM_PWM_Start_IT+0x210>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_TIM_PWM_Start_IT+0x166>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a2c      	ldr	r2, [pc, #176]	; (8005044 <HAL_TIM_PWM_Start_IT+0x214>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <HAL_TIM_PWM_Start_IT+0x16a>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <HAL_TIM_PWM_Start_IT+0x16c>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a22      	ldr	r2, [pc, #136]	; (8005040 <HAL_TIM_PWM_Start_IT+0x210>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d022      	beq.n	8005000 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc2:	d01d      	beq.n	8005000 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <HAL_TIM_PWM_Start_IT+0x218>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_TIM_PWM_Start_IT+0x21c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <HAL_TIM_PWM_Start_IT+0x220>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a17      	ldr	r2, [pc, #92]	; (8005044 <HAL_TIM_PWM_Start_IT+0x214>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	; (8005054 <HAL_TIM_PWM_Start_IT+0x224>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <HAL_TIM_PWM_Start_IT+0x228>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d111      	bne.n	8005024 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d010      	beq.n	8005034 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005022:	e007      	b.n	8005034 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005034:	7bfb      	ldrb	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40010000 	.word	0x40010000
 8005044:	40010400 	.word	0x40010400
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40014000 	.word	0x40014000
 8005058:	40001800 	.word	0x40001800

0800505c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b02      	cmp	r3, #2
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0202 	mvn.w	r2, #2
 8005088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fa81 	bl	80055a6 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa73 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa84 	bl	80055ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d122      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d11b      	bne.n	800510c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0204 	mvn.w	r2, #4
 80050dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fa57 	bl	80055a6 <HAL_TIM_IC_CaptureCallback>
 80050f8:	e005      	b.n	8005106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 fa49 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fa5a 	bl	80055ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b08      	cmp	r3, #8
 8005118:	d122      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d11b      	bne.n	8005160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f06f 0208 	mvn.w	r2, #8
 8005130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2204      	movs	r2, #4
 8005136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 fa2d 	bl	80055a6 <HAL_TIM_IC_CaptureCallback>
 800514c:	e005      	b.n	800515a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fa1f 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fa30 	bl	80055ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d122      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b10      	cmp	r3, #16
 800517a:	d11b      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0210 	mvn.w	r2, #16
 8005184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2208      	movs	r2, #8
 800518a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fa03 	bl	80055a6 <HAL_TIM_IC_CaptureCallback>
 80051a0:	e005      	b.n	80051ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f9f5 	bl	8005592 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fa06 	bl	80055ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0201 	mvn.w	r2, #1
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f9cf 	bl	800557e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f8:	2b80      	cmp	r3, #128	; 0x80
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fd82 	bl	8005d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d10e      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005224:	2b40      	cmp	r3, #64	; 0x40
 8005226:	d107      	bne.n	8005238 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9cb 	bl	80055ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b20      	cmp	r3, #32
 8005244:	d10e      	bne.n	8005264 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b20      	cmp	r3, #32
 8005252:	d107      	bne.n	8005264 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0220 	mvn.w	r2, #32
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fd4c 	bl	8005cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005286:	2302      	movs	r3, #2
 8005288:	e0ae      	b.n	80053e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b0c      	cmp	r3, #12
 8005296:	f200 809f 	bhi.w	80053d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052d5 	.word	0x080052d5
 80052a4:	080053d9 	.word	0x080053d9
 80052a8:	080053d9 	.word	0x080053d9
 80052ac:	080053d9 	.word	0x080053d9
 80052b0:	08005315 	.word	0x08005315
 80052b4:	080053d9 	.word	0x080053d9
 80052b8:	080053d9 	.word	0x080053d9
 80052bc:	080053d9 	.word	0x080053d9
 80052c0:	08005357 	.word	0x08005357
 80052c4:	080053d9 	.word	0x080053d9
 80052c8:	080053d9 	.word	0x080053d9
 80052cc:	080053d9 	.word	0x080053d9
 80052d0:	08005397 	.word	0x08005397
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fa22 	bl	8005724 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0208 	orr.w	r2, r2, #8
 80052ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0204 	bic.w	r2, r2, #4
 80052fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6999      	ldr	r1, [r3, #24]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	691a      	ldr	r2, [r3, #16]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	619a      	str	r2, [r3, #24]
      break;
 8005312:	e064      	b.n	80053de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fa72 	bl	8005804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800532e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6999      	ldr	r1, [r3, #24]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	021a      	lsls	r2, r3, #8
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	619a      	str	r2, [r3, #24]
      break;
 8005354:	e043      	b.n	80053de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68b9      	ldr	r1, [r7, #8]
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fac7 	bl	80058f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	69da      	ldr	r2, [r3, #28]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0208 	orr.w	r2, r2, #8
 8005370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0204 	bic.w	r2, r2, #4
 8005380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69d9      	ldr	r1, [r3, #28]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	61da      	str	r2, [r3, #28]
      break;
 8005394:	e023      	b.n	80053de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fb1b 	bl	80059d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69da      	ldr	r2, [r3, #28]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69da      	ldr	r2, [r3, #28]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69d9      	ldr	r1, [r3, #28]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	021a      	lsls	r2, r3, #8
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	61da      	str	r2, [r3, #28]
      break;
 80053d6:	e002      	b.n	80053de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	75fb      	strb	r3, [r7, #23]
      break;
 80053dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_TIM_ConfigClockSource+0x1c>
 8005408:	2302      	movs	r3, #2
 800540a:	e0b4      	b.n	8005576 <HAL_TIM_ConfigClockSource+0x186>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800542a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005432:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005444:	d03e      	beq.n	80054c4 <HAL_TIM_ConfigClockSource+0xd4>
 8005446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544a:	f200 8087 	bhi.w	800555c <HAL_TIM_ConfigClockSource+0x16c>
 800544e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005452:	f000 8086 	beq.w	8005562 <HAL_TIM_ConfigClockSource+0x172>
 8005456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545a:	d87f      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 800545c:	2b70      	cmp	r3, #112	; 0x70
 800545e:	d01a      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0xa6>
 8005460:	2b70      	cmp	r3, #112	; 0x70
 8005462:	d87b      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 8005464:	2b60      	cmp	r3, #96	; 0x60
 8005466:	d050      	beq.n	800550a <HAL_TIM_ConfigClockSource+0x11a>
 8005468:	2b60      	cmp	r3, #96	; 0x60
 800546a:	d877      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 800546c:	2b50      	cmp	r3, #80	; 0x50
 800546e:	d03c      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0xfa>
 8005470:	2b50      	cmp	r3, #80	; 0x50
 8005472:	d873      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d058      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x13a>
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	d86f      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 800547c:	2b30      	cmp	r3, #48	; 0x30
 800547e:	d064      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x15a>
 8005480:	2b30      	cmp	r3, #48	; 0x30
 8005482:	d86b      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d060      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x15a>
 8005488:	2b20      	cmp	r3, #32
 800548a:	d867      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d05c      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x15a>
 8005490:	2b10      	cmp	r3, #16
 8005492:	d05a      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x15a>
 8005494:	e062      	b.n	800555c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f000 fb67 	bl	8005b78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	609a      	str	r2, [r3, #8]
      break;
 80054c2:	e04f      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6899      	ldr	r1, [r3, #8]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f000 fb50 	bl	8005b78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e6:	609a      	str	r2, [r3, #8]
      break;
 80054e8:	e03c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6859      	ldr	r1, [r3, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f000 fac4 	bl	8005a84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2150      	movs	r1, #80	; 0x50
 8005502:	4618      	mov	r0, r3
 8005504:	f000 fb1d 	bl	8005b42 <TIM_ITRx_SetConfig>
      break;
 8005508:	e02c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6859      	ldr	r1, [r3, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	461a      	mov	r2, r3
 8005518:	f000 fae3 	bl	8005ae2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2160      	movs	r1, #96	; 0x60
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fb0d 	bl	8005b42 <TIM_ITRx_SetConfig>
      break;
 8005528:	e01c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6859      	ldr	r1, [r3, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	461a      	mov	r2, r3
 8005538:	f000 faa4 	bl	8005a84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2140      	movs	r1, #64	; 0x40
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fafd 	bl	8005b42 <TIM_ITRx_SetConfig>
      break;
 8005548:	e00c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f000 faf4 	bl	8005b42 <TIM_ITRx_SetConfig>
      break;
 800555a:	e003      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
      break;
 8005560:	e000      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a40      	ldr	r2, [pc, #256]	; (80056f8 <TIM_Base_SetConfig+0x114>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d013      	beq.n	8005624 <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005602:	d00f      	beq.n	8005624 <TIM_Base_SetConfig+0x40>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a3d      	ldr	r2, [pc, #244]	; (80056fc <TIM_Base_SetConfig+0x118>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00b      	beq.n	8005624 <TIM_Base_SetConfig+0x40>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a3c      	ldr	r2, [pc, #240]	; (8005700 <TIM_Base_SetConfig+0x11c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d007      	beq.n	8005624 <TIM_Base_SetConfig+0x40>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a3b      	ldr	r2, [pc, #236]	; (8005704 <TIM_Base_SetConfig+0x120>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_Base_SetConfig+0x40>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a3a      	ldr	r2, [pc, #232]	; (8005708 <TIM_Base_SetConfig+0x124>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d108      	bne.n	8005636 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2f      	ldr	r2, [pc, #188]	; (80056f8 <TIM_Base_SetConfig+0x114>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d02b      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005644:	d027      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2c      	ldr	r2, [pc, #176]	; (80056fc <TIM_Base_SetConfig+0x118>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d023      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2b      	ldr	r2, [pc, #172]	; (8005700 <TIM_Base_SetConfig+0x11c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d01f      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <TIM_Base_SetConfig+0x120>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d01b      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a29      	ldr	r2, [pc, #164]	; (8005708 <TIM_Base_SetConfig+0x124>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d017      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a28      	ldr	r2, [pc, #160]	; (800570c <TIM_Base_SetConfig+0x128>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a27      	ldr	r2, [pc, #156]	; (8005710 <TIM_Base_SetConfig+0x12c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00f      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a26      	ldr	r2, [pc, #152]	; (8005714 <TIM_Base_SetConfig+0x130>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d00b      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a25      	ldr	r2, [pc, #148]	; (8005718 <TIM_Base_SetConfig+0x134>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d007      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a24      	ldr	r2, [pc, #144]	; (800571c <TIM_Base_SetConfig+0x138>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d003      	beq.n	8005696 <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a23      	ldr	r2, [pc, #140]	; (8005720 <TIM_Base_SetConfig+0x13c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d108      	bne.n	80056a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a0a      	ldr	r2, [pc, #40]	; (80056f8 <TIM_Base_SetConfig+0x114>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_Base_SetConfig+0xf8>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a0c      	ldr	r2, [pc, #48]	; (8005708 <TIM_Base_SetConfig+0x124>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d103      	bne.n	80056e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	615a      	str	r2, [r3, #20]
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40010400 	.word	0x40010400
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400
 8005714:	40014800 	.word	0x40014800
 8005718:	40001800 	.word	0x40001800
 800571c:	40001c00 	.word	0x40001c00
 8005720:	40002000 	.word	0x40002000

08005724 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0201 	bic.w	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0303 	bic.w	r3, r3, #3
 800575a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f023 0302 	bic.w	r3, r3, #2
 800576c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a20      	ldr	r2, [pc, #128]	; (80057fc <TIM_OC1_SetConfig+0xd8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d003      	beq.n	8005788 <TIM_OC1_SetConfig+0x64>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <TIM_OC1_SetConfig+0xdc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d10c      	bne.n	80057a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f023 0308 	bic.w	r3, r3, #8
 800578e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f023 0304 	bic.w	r3, r3, #4
 80057a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a15      	ldr	r2, [pc, #84]	; (80057fc <TIM_OC1_SetConfig+0xd8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d003      	beq.n	80057b2 <TIM_OC1_SetConfig+0x8e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a14      	ldr	r2, [pc, #80]	; (8005800 <TIM_OC1_SetConfig+0xdc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d111      	bne.n	80057d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	621a      	str	r2, [r3, #32]
}
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40010000 	.word	0x40010000
 8005800:	40010400 	.word	0x40010400

08005804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f023 0210 	bic.w	r2, r3, #16
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f023 0320 	bic.w	r3, r3, #32
 800584e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a22      	ldr	r2, [pc, #136]	; (80058e8 <TIM_OC2_SetConfig+0xe4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_OC2_SetConfig+0x68>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a21      	ldr	r2, [pc, #132]	; (80058ec <TIM_OC2_SetConfig+0xe8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d10d      	bne.n	8005888 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005886:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a17      	ldr	r2, [pc, #92]	; (80058e8 <TIM_OC2_SetConfig+0xe4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d003      	beq.n	8005898 <TIM_OC2_SetConfig+0x94>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a16      	ldr	r2, [pc, #88]	; (80058ec <TIM_OC2_SetConfig+0xe8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d113      	bne.n	80058c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800589e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40010000 	.word	0x40010000
 80058ec:	40010400 	.word	0x40010400

080058f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0303 	bic.w	r3, r3, #3
 8005926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	021b      	lsls	r3, r3, #8
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a21      	ldr	r2, [pc, #132]	; (80059d0 <TIM_OC3_SetConfig+0xe0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d003      	beq.n	8005956 <TIM_OC3_SetConfig+0x66>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a20      	ldr	r2, [pc, #128]	; (80059d4 <TIM_OC3_SetConfig+0xe4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d10d      	bne.n	8005972 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800595c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a16      	ldr	r2, [pc, #88]	; (80059d0 <TIM_OC3_SetConfig+0xe0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d003      	beq.n	8005982 <TIM_OC3_SetConfig+0x92>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a15      	ldr	r2, [pc, #84]	; (80059d4 <TIM_OC3_SetConfig+0xe4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d113      	bne.n	80059aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	011b      	lsls	r3, r3, #4
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	621a      	str	r2, [r3, #32]
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40010400 	.word	0x40010400

080059d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	031b      	lsls	r3, r3, #12
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a12      	ldr	r2, [pc, #72]	; (8005a7c <TIM_OC4_SetConfig+0xa4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d003      	beq.n	8005a40 <TIM_OC4_SetConfig+0x68>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a11      	ldr	r2, [pc, #68]	; (8005a80 <TIM_OC4_SetConfig+0xa8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d109      	bne.n	8005a54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	019b      	lsls	r3, r3, #6
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40010400 	.word	0x40010400

08005a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	f023 0201 	bic.w	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	011b      	lsls	r3, r3, #4
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f023 030a 	bic.w	r3, r3, #10
 8005ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	621a      	str	r2, [r3, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b087      	sub	sp, #28
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f023 0210 	bic.w	r2, r3, #16
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	031b      	lsls	r3, r3, #12
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f043 0307 	orr.w	r3, r3, #7
 8005b64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	609a      	str	r2, [r3, #8]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	021a      	lsls	r2, r3, #8
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	609a      	str	r2, [r3, #8]
}
 8005bac:	bf00      	nop
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2201      	movs	r2, #1
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a1a      	ldr	r2, [r3, #32]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	401a      	ands	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e05a      	b.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a21      	ldr	r2, [pc, #132]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d022      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c68:	d01d      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d018      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a1b      	ldr	r2, [pc, #108]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a1a      	ldr	r2, [pc, #104]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00e      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d009      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a17      	ldr	r2, [pc, #92]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d004      	beq.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a15      	ldr	r2, [pc, #84]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d10c      	bne.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40010000 	.word	0x40010000
 8005ce4:	40000400 	.word	0x40000400
 8005ce8:	40000800 	.word	0x40000800
 8005cec:	40000c00 	.word	0x40000c00
 8005cf0:	40010400 	.word	0x40010400
 8005cf4:	40014000 	.word	0x40014000
 8005cf8:	40001800 	.word	0x40001800

08005cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e03f      	b.n	8005db6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fc fe9a 	bl	8002a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2224      	movs	r2, #36	; 0x24
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fde9 	bl	8006940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695a      	ldr	r2, [r3, #20]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b08a      	sub	sp, #40	; 0x28
 8005dc2:	af02      	add	r7, sp, #8
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	603b      	str	r3, [r7, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d17c      	bne.n	8005ed8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <HAL_UART_Transmit+0x2c>
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e075      	b.n	8005eda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_UART_Transmit+0x3e>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e06e      	b.n	8005eda <HAL_UART_Transmit+0x11c>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2221      	movs	r2, #33	; 0x21
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e12:	f7fc ffb5 	bl	8002d80 <HAL_GetTick>
 8005e16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	88fa      	ldrh	r2, [r7, #6]
 8005e1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2c:	d108      	bne.n	8005e40 <HAL_UART_Transmit+0x82>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d104      	bne.n	8005e40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	61bb      	str	r3, [r7, #24]
 8005e3e:	e003      	b.n	8005e48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e44:	2300      	movs	r3, #0
 8005e46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e50:	e02a      	b.n	8005ea8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2180      	movs	r1, #128	; 0x80
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 fb29 	bl	80064b4 <UART_WaitOnFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e036      	b.n	8005eda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	3302      	adds	r3, #2
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	e007      	b.n	8005e9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	3301      	adds	r3, #1
 8005e98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1cf      	bne.n	8005e52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2140      	movs	r1, #64	; 0x40
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 faf9 	bl	80064b4 <UART_WaitOnFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e006      	b.n	8005eda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	e000      	b.n	8005eda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ed8:	2302      	movs	r3, #2
  }
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	4613      	mov	r3, r2
 8005eee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d11d      	bne.n	8005f38 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d002      	beq.n	8005f08 <HAL_UART_Receive_IT+0x26>
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e016      	b.n	8005f3a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Receive_IT+0x38>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e00f      	b.n	8005f3a <HAL_UART_Receive_IT+0x58>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 fb2e 	bl	8006590 <UART_Start_Receive_IT>
 8005f34:	4603      	mov	r3, r0
 8005f36:	e000      	b.n	8005f3a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005f38:	2302      	movs	r3, #2
  }
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b0ba      	sub	sp, #232	; 0xe8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10f      	bne.n	8005faa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d009      	beq.n	8005faa <HAL_UART_IRQHandler+0x66>
 8005f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fc11 	bl	80067ca <UART_Receive_IT>
      return;
 8005fa8:	e256      	b.n	8006458 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80de 	beq.w	8006170 <HAL_UART_IRQHandler+0x22c>
 8005fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80d1 	beq.w	8006170 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00b      	beq.n	8005ff2 <HAL_UART_IRQHandler+0xae>
 8005fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fea:	f043 0201 	orr.w	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00b      	beq.n	8006016 <HAL_UART_IRQHandler+0xd2>
 8005ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f043 0202 	orr.w	r2, r3, #2
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <HAL_UART_IRQHandler+0xf6>
 8006022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f043 0204 	orr.w	r2, r3, #4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d011      	beq.n	800606a <HAL_UART_IRQHandler+0x126>
 8006046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f043 0208 	orr.w	r2, r3, #8
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 81ed 	beq.w	800644e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_UART_IRQHandler+0x14e>
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fb9c 	bl	80067ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609c:	2b40      	cmp	r3, #64	; 0x40
 800609e:	bf0c      	ite	eq
 80060a0:	2301      	moveq	r3, #1
 80060a2:	2300      	movne	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d103      	bne.n	80060be <HAL_UART_IRQHandler+0x17a>
 80060b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d04f      	beq.n	800615e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 faa4 	bl	800660c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b40      	cmp	r3, #64	; 0x40
 80060d0:	d141      	bne.n	8006156 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3314      	adds	r3, #20
 80060fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006102:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800610a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1d9      	bne.n	80060d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	2b00      	cmp	r3, #0
 8006124:	d013      	beq.n	800614e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612a:	4a7d      	ldr	r2, [pc, #500]	; (8006320 <HAL_UART_IRQHandler+0x3dc>)
 800612c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	4618      	mov	r0, r3
 8006134:	f7fd f8dc 	bl	80032f0 <HAL_DMA_Abort_IT>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d016      	beq.n	800616c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006148:	4610      	mov	r0, r2
 800614a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614c:	e00e      	b.n	800616c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f99a 	bl	8006488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006154:	e00a      	b.n	800616c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f996 	bl	8006488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800615c:	e006      	b.n	800616c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f992 	bl	8006488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800616a:	e170      	b.n	800644e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	bf00      	nop
    return;
 800616e:	e16e      	b.n	800644e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	2b01      	cmp	r3, #1
 8006176:	f040 814a 	bne.w	800640e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617e:	f003 0310 	and.w	r3, r3, #16
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8143 	beq.w	800640e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618c:	f003 0310 	and.w	r3, r3, #16
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 813c 	beq.w	800640e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	f040 80b4 	bne.w	8006324 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8140 	beq.w	8006452 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061da:	429a      	cmp	r2, r3
 80061dc:	f080 8139 	bcs.w	8006452 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f2:	f000 8088 	beq.w	8006306 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800620c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006222:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800622e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800623a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1d9      	bne.n	80061f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3314      	adds	r3, #20
 8006248:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006254:	f023 0301 	bic.w	r3, r3, #1
 8006258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3314      	adds	r3, #20
 8006262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006266:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800626a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800626e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e1      	bne.n	8006242 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3314      	adds	r3, #20
 8006284:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800628e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3314      	adds	r3, #20
 800629e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062aa:	e841 2300 	strex	r3, r2, [r1]
 80062ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e3      	bne.n	800627e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d6:	f023 0310 	bic.w	r3, r3, #16
 80062da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	330c      	adds	r3, #12
 80062e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80062e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80062ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e3      	bne.n	80062c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	4618      	mov	r0, r3
 8006302:	f7fc ff85 	bl	8003210 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800630e:	b29b      	uxth	r3, r3
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	b29b      	uxth	r3, r3
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f8c0 	bl	800649c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800631c:	e099      	b.n	8006452 <HAL_UART_IRQHandler+0x50e>
 800631e:	bf00      	nop
 8006320:	080066d3 	.word	0x080066d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800632c:	b29b      	uxth	r3, r3
 800632e:	1ad3      	subs	r3, r2, r3
 8006330:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 808b 	beq.w	8006456 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006340:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8086 	beq.w	8006456 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	330c      	adds	r3, #12
 8006350:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006354:	e853 3f00 	ldrex	r3, [r3]
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800635a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800635c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006360:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	330c      	adds	r3, #12
 800636a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800636e:	647a      	str	r2, [r7, #68]	; 0x44
 8006370:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006374:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800637c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e3      	bne.n	800634a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3314      	adds	r3, #20
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	623b      	str	r3, [r7, #32]
   return(result);
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	f023 0301 	bic.w	r3, r3, #1
 8006398:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3314      	adds	r3, #20
 80063a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063a6:	633a      	str	r2, [r7, #48]	; 0x30
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1e3      	bne.n	8006382 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	330c      	adds	r3, #12
 80063ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0310 	bic.w	r3, r3, #16
 80063de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80063ec:	61fa      	str	r2, [r7, #28]
 80063ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	69b9      	ldr	r1, [r7, #24]
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	617b      	str	r3, [r7, #20]
   return(result);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e3      	bne.n	80063c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f848 	bl	800649c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800640c:	e023      	b.n	8006456 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800640e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <HAL_UART_IRQHandler+0x4ea>
 800641a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f967 	bl	80066fa <UART_Transmit_IT>
    return;
 800642c:	e014      	b.n	8006458 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00e      	beq.n	8006458 <HAL_UART_IRQHandler+0x514>
 800643a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d008      	beq.n	8006458 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f9a7 	bl	800679a <UART_EndTransmit_IT>
    return;
 800644c:	e004      	b.n	8006458 <HAL_UART_IRQHandler+0x514>
    return;
 800644e:	bf00      	nop
 8006450:	e002      	b.n	8006458 <HAL_UART_IRQHandler+0x514>
      return;
 8006452:	bf00      	nop
 8006454:	e000      	b.n	8006458 <HAL_UART_IRQHandler+0x514>
      return;
 8006456:	bf00      	nop
  }
}
 8006458:	37e8      	adds	r7, #232	; 0xe8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop

08006460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b090      	sub	sp, #64	; 0x40
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	603b      	str	r3, [r7, #0]
 80064c0:	4613      	mov	r3, r2
 80064c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c4:	e050      	b.n	8006568 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064cc:	d04c      	beq.n	8006568 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d007      	beq.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80064d4:	f7fc fc54 	bl	8002d80 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d241      	bcs.n	8006568 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	330c      	adds	r3, #12
 8006502:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006504:	637a      	str	r2, [r7, #52]	; 0x34
 8006506:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800650a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e5      	bne.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3314      	adds	r3, #20
 800651e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	613b      	str	r3, [r7, #16]
   return(result);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3314      	adds	r3, #20
 8006536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006538:	623a      	str	r2, [r7, #32]
 800653a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	69f9      	ldr	r1, [r7, #28]
 800653e:	6a3a      	ldr	r2, [r7, #32]
 8006540:	e841 2300 	strex	r3, r2, [r1]
 8006544:	61bb      	str	r3, [r7, #24]
   return(result);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e5      	bne.n	8006518 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e00f      	b.n	8006588 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4013      	ands	r3, r2
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	429a      	cmp	r2, r3
 8006576:	bf0c      	ite	eq
 8006578:	2301      	moveq	r3, #1
 800657a:	2300      	movne	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	461a      	mov	r2, r3
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	429a      	cmp	r2, r3
 8006584:	d09f      	beq.n	80064c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3740      	adds	r7, #64	; 0x40
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	88fa      	ldrh	r2, [r7, #6]
 80065ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2222      	movs	r2, #34	; 0x22
 80065ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d007      	beq.n	80065de <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695a      	ldr	r2, [r3, #20]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0201 	orr.w	r2, r2, #1
 80065ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0220 	orr.w	r2, r2, #32
 80065fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b095      	sub	sp, #84	; 0x54
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	330c      	adds	r3, #12
 800661a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800662a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006634:	643a      	str	r2, [r7, #64]	; 0x40
 8006636:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800663a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e5      	bne.n	8006614 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3314      	adds	r3, #20
 800664e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	61fb      	str	r3, [r7, #28]
   return(result);
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f023 0301 	bic.w	r3, r3, #1
 800665e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3314      	adds	r3, #20
 8006666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006668:	62fa      	str	r2, [r7, #44]	; 0x2c
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800666e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	2b01      	cmp	r3, #1
 8006682:	d119      	bne.n	80066b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	330c      	adds	r3, #12
 800668a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	60bb      	str	r3, [r7, #8]
   return(result);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f023 0310 	bic.w	r3, r3, #16
 800669a:	647b      	str	r3, [r7, #68]	; 0x44
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066a4:	61ba      	str	r2, [r7, #24]
 80066a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6979      	ldr	r1, [r7, #20]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	613b      	str	r3, [r7, #16]
   return(result);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e5      	bne.n	8006684 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066c6:	bf00      	nop
 80066c8:	3754      	adds	r7, #84	; 0x54
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff fecb 	bl	8006488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b085      	sub	sp, #20
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b21      	cmp	r3, #33	; 0x21
 800670c:	d13e      	bne.n	800678c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006716:	d114      	bne.n	8006742 <UART_Transmit_IT+0x48>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d110      	bne.n	8006742 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006734:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	1c9a      	adds	r2, r3, #2
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	621a      	str	r2, [r3, #32]
 8006740:	e008      	b.n	8006754 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6211      	str	r1, [r2, #32]
 800674c:	781a      	ldrb	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006758:	b29b      	uxth	r3, r3
 800675a:	3b01      	subs	r3, #1
 800675c:	b29b      	uxth	r3, r3
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4619      	mov	r1, r3
 8006762:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10f      	bne.n	8006788 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006776:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006786:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800678c:	2302      	movs	r3, #2
  }
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68da      	ldr	r2, [r3, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff fe50 	bl	8006460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b08c      	sub	sp, #48	; 0x30
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b22      	cmp	r3, #34	; 0x22
 80067dc:	f040 80ab 	bne.w	8006936 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e8:	d117      	bne.n	800681a <UART_Receive_IT+0x50>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d113      	bne.n	800681a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	b29b      	uxth	r3, r3
 8006804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006808:	b29a      	uxth	r2, r3
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	1c9a      	adds	r2, r3, #2
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	629a      	str	r2, [r3, #40]	; 0x28
 8006818:	e026      	b.n	8006868 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006820:	2300      	movs	r3, #0
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682c:	d007      	beq.n	800683e <UART_Receive_IT+0x74>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <UART_Receive_IT+0x82>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	b2da      	uxtb	r2, r3
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	e008      	b.n	800685e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006858:	b2da      	uxtb	r2, r3
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	b29b      	uxth	r3, r3
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	4619      	mov	r1, r3
 8006876:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006878:	2b00      	cmp	r3, #0
 800687a:	d15a      	bne.n	8006932 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0220 	bic.w	r2, r2, #32
 800688a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800689a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695a      	ldr	r2, [r3, #20]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d135      	bne.n	8006928 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	330c      	adds	r3, #12
 80068c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	613b      	str	r3, [r7, #16]
   return(result);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f023 0310 	bic.w	r3, r3, #16
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	330c      	adds	r3, #12
 80068e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e2:	623a      	str	r2, [r7, #32]
 80068e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	69f9      	ldr	r1, [r7, #28]
 80068e8:	6a3a      	ldr	r2, [r7, #32]
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e5      	bne.n	80068c2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b10      	cmp	r3, #16
 8006902:	d10a      	bne.n	800691a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006904:	2300      	movs	r3, #0
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff fdbb 	bl	800649c <HAL_UARTEx_RxEventCallback>
 8006926:	e002      	b.n	800692e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff fda3 	bl	8006474 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e002      	b.n	8006938 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e000      	b.n	8006938 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006936:	2302      	movs	r3, #2
  }
}
 8006938:	4618      	mov	r0, r3
 800693a:	3730      	adds	r7, #48	; 0x30
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006944:	b0c0      	sub	sp, #256	; 0x100
 8006946:	af00      	add	r7, sp, #0
 8006948:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695c:	68d9      	ldr	r1, [r3, #12]
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	ea40 0301 	orr.w	r3, r0, r1
 8006968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800696a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	431a      	orrs	r2, r3
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	431a      	orrs	r2, r3
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800698c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006998:	f021 010c 	bic.w	r1, r1, #12
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069a6:	430b      	orrs	r3, r1
 80069a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ba:	6999      	ldr	r1, [r3, #24]
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	ea40 0301 	orr.w	r3, r0, r1
 80069c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b8f      	ldr	r3, [pc, #572]	; (8006c0c <UART_SetConfig+0x2cc>)
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d005      	beq.n	80069e0 <UART_SetConfig+0xa0>
 80069d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b8d      	ldr	r3, [pc, #564]	; (8006c10 <UART_SetConfig+0x2d0>)
 80069dc:	429a      	cmp	r2, r3
 80069de:	d104      	bne.n	80069ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069e0:	f7fd fd4c 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 80069e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069e8:	e003      	b.n	80069f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069ea:	f7fd fd33 	bl	8004454 <HAL_RCC_GetPCLK1Freq>
 80069ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069fc:	f040 810c 	bne.w	8006c18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a04:	2200      	movs	r2, #0
 8006a06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a12:	4622      	mov	r2, r4
 8006a14:	462b      	mov	r3, r5
 8006a16:	1891      	adds	r1, r2, r2
 8006a18:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a1a:	415b      	adcs	r3, r3
 8006a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a22:	4621      	mov	r1, r4
 8006a24:	eb12 0801 	adds.w	r8, r2, r1
 8006a28:	4629      	mov	r1, r5
 8006a2a:	eb43 0901 	adc.w	r9, r3, r1
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a42:	4690      	mov	r8, r2
 8006a44:	4699      	mov	r9, r3
 8006a46:	4623      	mov	r3, r4
 8006a48:	eb18 0303 	adds.w	r3, r8, r3
 8006a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a50:	462b      	mov	r3, r5
 8006a52:	eb49 0303 	adc.w	r3, r9, r3
 8006a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a6e:	460b      	mov	r3, r1
 8006a70:	18db      	adds	r3, r3, r3
 8006a72:	653b      	str	r3, [r7, #80]	; 0x50
 8006a74:	4613      	mov	r3, r2
 8006a76:	eb42 0303 	adc.w	r3, r2, r3
 8006a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006a7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a84:	f7f9 fe18 	bl	80006b8 <__aeabi_uldivmod>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4b61      	ldr	r3, [pc, #388]	; (8006c14 <UART_SetConfig+0x2d4>)
 8006a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	011c      	lsls	r4, r3, #4
 8006a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006aa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006aa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	1891      	adds	r1, r2, r2
 8006aae:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ab0:	415b      	adcs	r3, r3
 8006ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ab8:	4641      	mov	r1, r8
 8006aba:	eb12 0a01 	adds.w	sl, r2, r1
 8006abe:	4649      	mov	r1, r9
 8006ac0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	f04f 0300 	mov.w	r3, #0
 8006acc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ad8:	4692      	mov	sl, r2
 8006ada:	469b      	mov	fp, r3
 8006adc:	4643      	mov	r3, r8
 8006ade:	eb1a 0303 	adds.w	r3, sl, r3
 8006ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8006aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006afc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b04:	460b      	mov	r3, r1
 8006b06:	18db      	adds	r3, r3, r3
 8006b08:	643b      	str	r3, [r7, #64]	; 0x40
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	eb42 0303 	adc.w	r3, r2, r3
 8006b10:	647b      	str	r3, [r7, #68]	; 0x44
 8006b12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b1a:	f7f9 fdcd 	bl	80006b8 <__aeabi_uldivmod>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4611      	mov	r1, r2
 8006b24:	4b3b      	ldr	r3, [pc, #236]	; (8006c14 <UART_SetConfig+0x2d4>)
 8006b26:	fba3 2301 	umull	r2, r3, r3, r1
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	2264      	movs	r2, #100	; 0x64
 8006b2e:	fb02 f303 	mul.w	r3, r2, r3
 8006b32:	1acb      	subs	r3, r1, r3
 8006b34:	00db      	lsls	r3, r3, #3
 8006b36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b3a:	4b36      	ldr	r3, [pc, #216]	; (8006c14 <UART_SetConfig+0x2d4>)
 8006b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8006b40:	095b      	lsrs	r3, r3, #5
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b48:	441c      	add	r4, r3
 8006b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	1891      	adds	r1, r2, r2
 8006b62:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b64:	415b      	adcs	r3, r3
 8006b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b6c:	4641      	mov	r1, r8
 8006b6e:	1851      	adds	r1, r2, r1
 8006b70:	6339      	str	r1, [r7, #48]	; 0x30
 8006b72:	4649      	mov	r1, r9
 8006b74:	414b      	adcs	r3, r1
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b84:	4659      	mov	r1, fp
 8006b86:	00cb      	lsls	r3, r1, #3
 8006b88:	4651      	mov	r1, sl
 8006b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b8e:	4651      	mov	r1, sl
 8006b90:	00ca      	lsls	r2, r1, #3
 8006b92:	4610      	mov	r0, r2
 8006b94:	4619      	mov	r1, r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	4642      	mov	r2, r8
 8006b9a:	189b      	adds	r3, r3, r2
 8006b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	460a      	mov	r2, r1
 8006ba4:	eb42 0303 	adc.w	r3, r2, r3
 8006ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	18db      	adds	r3, r3, r3
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	eb42 0303 	adc.w	r3, r2, r3
 8006bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006bd6:	f7f9 fd6f 	bl	80006b8 <__aeabi_uldivmod>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <UART_SetConfig+0x2d4>)
 8006be0:	fba3 1302 	umull	r1, r3, r3, r2
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	2164      	movs	r1, #100	; 0x64
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	3332      	adds	r3, #50	; 0x32
 8006bf2:	4a08      	ldr	r2, [pc, #32]	; (8006c14 <UART_SetConfig+0x2d4>)
 8006bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	f003 0207 	and.w	r2, r3, #7
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4422      	add	r2, r4
 8006c06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c08:	e105      	b.n	8006e16 <UART_SetConfig+0x4d6>
 8006c0a:	bf00      	nop
 8006c0c:	40011000 	.word	0x40011000
 8006c10:	40011400 	.word	0x40011400
 8006c14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c2a:	4642      	mov	r2, r8
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	1891      	adds	r1, r2, r2
 8006c30:	6239      	str	r1, [r7, #32]
 8006c32:	415b      	adcs	r3, r3
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
 8006c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	1854      	adds	r4, r2, r1
 8006c3e:	4649      	mov	r1, r9
 8006c40:	eb43 0501 	adc.w	r5, r3, r1
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	00eb      	lsls	r3, r5, #3
 8006c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c52:	00e2      	lsls	r2, r4, #3
 8006c54:	4614      	mov	r4, r2
 8006c56:	461d      	mov	r5, r3
 8006c58:	4643      	mov	r3, r8
 8006c5a:	18e3      	adds	r3, r4, r3
 8006c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c60:	464b      	mov	r3, r9
 8006c62:	eb45 0303 	adc.w	r3, r5, r3
 8006c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	f04f 0300 	mov.w	r3, #0
 8006c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c86:	4629      	mov	r1, r5
 8006c88:	008b      	lsls	r3, r1, #2
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c90:	4621      	mov	r1, r4
 8006c92:	008a      	lsls	r2, r1, #2
 8006c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c98:	f7f9 fd0e 	bl	80006b8 <__aeabi_uldivmod>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4b60      	ldr	r3, [pc, #384]	; (8006e24 <UART_SetConfig+0x4e4>)
 8006ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	011c      	lsls	r4, r3, #4
 8006caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006cbc:	4642      	mov	r2, r8
 8006cbe:	464b      	mov	r3, r9
 8006cc0:	1891      	adds	r1, r2, r2
 8006cc2:	61b9      	str	r1, [r7, #24]
 8006cc4:	415b      	adcs	r3, r3
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ccc:	4641      	mov	r1, r8
 8006cce:	1851      	adds	r1, r2, r1
 8006cd0:	6139      	str	r1, [r7, #16]
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	414b      	adcs	r3, r1
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	00cb      	lsls	r3, r1, #3
 8006ce8:	4651      	mov	r1, sl
 8006cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cee:	4651      	mov	r1, sl
 8006cf0:	00ca      	lsls	r2, r1, #3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	189b      	adds	r3, r3, r2
 8006cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d00:	464b      	mov	r3, r9
 8006d02:	460a      	mov	r2, r1
 8006d04:	eb42 0303 	adc.w	r3, r2, r3
 8006d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d24:	4649      	mov	r1, r9
 8006d26:	008b      	lsls	r3, r1, #2
 8006d28:	4641      	mov	r1, r8
 8006d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d2e:	4641      	mov	r1, r8
 8006d30:	008a      	lsls	r2, r1, #2
 8006d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d36:	f7f9 fcbf 	bl	80006b8 <__aeabi_uldivmod>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	4b39      	ldr	r3, [pc, #228]	; (8006e24 <UART_SetConfig+0x4e4>)
 8006d40:	fba3 1302 	umull	r1, r3, r3, r2
 8006d44:	095b      	lsrs	r3, r3, #5
 8006d46:	2164      	movs	r1, #100	; 0x64
 8006d48:	fb01 f303 	mul.w	r3, r1, r3
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	3332      	adds	r3, #50	; 0x32
 8006d52:	4a34      	ldr	r2, [pc, #208]	; (8006e24 <UART_SetConfig+0x4e4>)
 8006d54:	fba2 2303 	umull	r2, r3, r2, r3
 8006d58:	095b      	lsrs	r3, r3, #5
 8006d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d5e:	441c      	add	r4, r3
 8006d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d64:	2200      	movs	r2, #0
 8006d66:	673b      	str	r3, [r7, #112]	; 0x70
 8006d68:	677a      	str	r2, [r7, #116]	; 0x74
 8006d6a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006d6e:	4642      	mov	r2, r8
 8006d70:	464b      	mov	r3, r9
 8006d72:	1891      	adds	r1, r2, r2
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	415b      	adcs	r3, r3
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d7e:	4641      	mov	r1, r8
 8006d80:	1851      	adds	r1, r2, r1
 8006d82:	6039      	str	r1, [r7, #0]
 8006d84:	4649      	mov	r1, r9
 8006d86:	414b      	adcs	r3, r1
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d96:	4659      	mov	r1, fp
 8006d98:	00cb      	lsls	r3, r1, #3
 8006d9a:	4651      	mov	r1, sl
 8006d9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006da0:	4651      	mov	r1, sl
 8006da2:	00ca      	lsls	r2, r1, #3
 8006da4:	4610      	mov	r0, r2
 8006da6:	4619      	mov	r1, r3
 8006da8:	4603      	mov	r3, r0
 8006daa:	4642      	mov	r2, r8
 8006dac:	189b      	adds	r3, r3, r2
 8006dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8006db0:	464b      	mov	r3, r9
 8006db2:	460a      	mov	r2, r1
 8006db4:	eb42 0303 	adc.w	r3, r2, r3
 8006db8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8006dc4:	667a      	str	r2, [r7, #100]	; 0x64
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	008b      	lsls	r3, r1, #2
 8006dd6:	4641      	mov	r1, r8
 8006dd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ddc:	4641      	mov	r1, r8
 8006dde:	008a      	lsls	r2, r1, #2
 8006de0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006de4:	f7f9 fc68 	bl	80006b8 <__aeabi_uldivmod>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <UART_SetConfig+0x4e4>)
 8006dee:	fba3 1302 	umull	r1, r3, r3, r2
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	2164      	movs	r1, #100	; 0x64
 8006df6:	fb01 f303 	mul.w	r3, r1, r3
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	011b      	lsls	r3, r3, #4
 8006dfe:	3332      	adds	r3, #50	; 0x32
 8006e00:	4a08      	ldr	r2, [pc, #32]	; (8006e24 <UART_SetConfig+0x4e4>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	095b      	lsrs	r3, r3, #5
 8006e08:	f003 020f 	and.w	r2, r3, #15
 8006e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4422      	add	r2, r4
 8006e14:	609a      	str	r2, [r3, #8]
}
 8006e16:	bf00      	nop
 8006e18:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e22:	bf00      	nop
 8006e24:	51eb851f 	.word	0x51eb851f

08006e28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006e2c:	4904      	ldr	r1, [pc, #16]	; (8006e40 <MX_FATFS_Init+0x18>)
 8006e2e:	4805      	ldr	r0, [pc, #20]	; (8006e44 <MX_FATFS_Init+0x1c>)
 8006e30:	f002 fec0 	bl	8009bb4 <FATFS_LinkDriver>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	4b03      	ldr	r3, [pc, #12]	; (8006e48 <MX_FATFS_Init+0x20>)
 8006e3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e3c:	bf00      	nop
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20013d10 	.word	0x20013d10
 8006e44:	2000000c 	.word	0x2000000c
 8006e48:	20013d0c 	.word	0x20013d0c

08006e4c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006e50:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 f9d9 	bl	8007220 <USER_SPI_initialize>
 8006e6e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	4603      	mov	r3, r0
 8006e80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f000 fab7 	bl	80073f8 <USER_SPI_status>
 8006e8a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60b9      	str	r1, [r7, #8]
 8006e9c:	607a      	str	r2, [r7, #4]
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006ea4:	7bf8      	ldrb	r0, [r7, #15]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	68b9      	ldr	r1, [r7, #8]
 8006eac:	f000 faba 	bl	8007424 <USER_SPI_read>
 8006eb0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006eca:	7bf8      	ldrb	r0, [r7, #15]
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	f000 fb0d 	bl	80074f0 <USER_SPI_write>
 8006ed6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	603a      	str	r2, [r7, #0]
 8006eea:	71fb      	strb	r3, [r7, #7]
 8006eec:	460b      	mov	r3, r1
 8006eee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006ef0:	79b9      	ldrb	r1, [r7, #6]
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fb76 	bl	80075e8 <USER_SPI_ioctl>
 8006efc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006f10:	f7fb ff36 	bl	8002d80 <HAL_GetTick>
 8006f14:	4603      	mov	r3, r0
 8006f16:	4a04      	ldr	r2, [pc, #16]	; (8006f28 <SPI_Timer_On+0x20>)
 8006f18:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006f1a:	4a04      	ldr	r2, [pc, #16]	; (8006f2c <SPI_Timer_On+0x24>)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6013      	str	r3, [r2, #0]
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20013d18 	.word	0x20013d18
 8006f2c:	20013d1c 	.word	0x20013d1c

08006f30 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006f34:	f7fb ff24 	bl	8002d80 <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <SPI_Timer_Status+0x24>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <SPI_Timer_Status+0x28>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	bf34      	ite	cc
 8006f48:	2301      	movcc	r3, #1
 8006f4a:	2300      	movcs	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20013d18 	.word	0x20013d18
 8006f58:	20013d1c 	.word	0x20013d1c

08006f5c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	4603      	mov	r3, r0
 8006f64:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006f66:	f107 020f 	add.w	r2, r7, #15
 8006f6a:	1df9      	adds	r1, r7, #7
 8006f6c:	2332      	movs	r3, #50	; 0x32
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	2301      	movs	r3, #1
 8006f72:	4804      	ldr	r0, [pc, #16]	; (8006f84 <xchg_spi+0x28>)
 8006f74:	f7fd fb1f 	bl	80045b6 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000e7c 	.word	0x20000e7c

08006f88 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006f88:	b590      	push	{r4, r7, lr}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	e00a      	b.n	8006fae <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	18d4      	adds	r4, r2, r3
 8006f9e:	20ff      	movs	r0, #255	; 0xff
 8006fa0:	f7ff ffdc 	bl	8006f5c <xchg_spi>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	3301      	adds	r3, #1
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d3f0      	bcc.n	8006f98 <rcvr_spi_multi+0x10>
	}
}
 8006fb6:	bf00      	nop
 8006fb8:	bf00      	nop
 8006fba:	3714      	adds	r7, #20
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd90      	pop	{r4, r7, pc}

08006fc0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
 8006fce:	e009      	b.n	8006fe4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff ffbf 	bl	8006f5c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d3f1      	bcc.n	8006fd0 <xmit_spi_multi+0x10>
	}
}
 8006fec:	bf00      	nop
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b086      	sub	sp, #24
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006ffe:	f7fb febf 	bl	8002d80 <HAL_GetTick>
 8007002:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007008:	20ff      	movs	r0, #255	; 0xff
 800700a:	f7ff ffa7 	bl	8006f5c <xchg_spi>
 800700e:	4603      	mov	r3, r0
 8007010:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	2bff      	cmp	r3, #255	; 0xff
 8007016:	d007      	beq.n	8007028 <wait_ready+0x32>
 8007018:	f7fb feb2 	bl	8002d80 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	429a      	cmp	r2, r3
 8007026:	d8ef      	bhi.n	8007008 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	2bff      	cmp	r3, #255	; 0xff
 800702c:	bf0c      	ite	eq
 800702e:	2301      	moveq	r3, #1
 8007030:	2300      	movne	r3, #0
 8007032:	b2db      	uxtb	r3, r3
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007040:	2201      	movs	r2, #1
 8007042:	2102      	movs	r1, #2
 8007044:	4803      	ldr	r0, [pc, #12]	; (8007054 <despiselect+0x18>)
 8007046:	f7fc fd7b 	bl	8003b40 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800704a:	20ff      	movs	r0, #255	; 0xff
 800704c:	f7ff ff86 	bl	8006f5c <xchg_spi>

}
 8007050:	bf00      	nop
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40020000 	.word	0x40020000

08007058 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800705c:	2200      	movs	r2, #0
 800705e:	2102      	movs	r1, #2
 8007060:	4809      	ldr	r0, [pc, #36]	; (8007088 <spiselect+0x30>)
 8007062:	f7fc fd6d 	bl	8003b40 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007066:	20ff      	movs	r0, #255	; 0xff
 8007068:	f7ff ff78 	bl	8006f5c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800706c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007070:	f7ff ffc1 	bl	8006ff6 <wait_ready>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <spiselect+0x26>
 800707a:	2301      	movs	r3, #1
 800707c:	e002      	b.n	8007084 <spiselect+0x2c>

	despiselect();
 800707e:	f7ff ffdd 	bl	800703c <despiselect>
	return 0;	/* Timeout */
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40020000 	.word	0x40020000

0800708c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007096:	20c8      	movs	r0, #200	; 0xc8
 8007098:	f7ff ff36 	bl	8006f08 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800709c:	20ff      	movs	r0, #255	; 0xff
 800709e:	f7ff ff5d 	bl	8006f5c <xchg_spi>
 80070a2:	4603      	mov	r3, r0
 80070a4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	2bff      	cmp	r3, #255	; 0xff
 80070aa:	d104      	bne.n	80070b6 <rcvr_datablock+0x2a>
 80070ac:	f7ff ff40 	bl	8006f30 <SPI_Timer_Status>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f2      	bne.n	800709c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	2bfe      	cmp	r3, #254	; 0xfe
 80070ba:	d001      	beq.n	80070c0 <rcvr_datablock+0x34>
 80070bc:	2300      	movs	r3, #0
 80070be:	e00a      	b.n	80070d6 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff ff60 	bl	8006f88 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80070c8:	20ff      	movs	r0, #255	; 0xff
 80070ca:	f7ff ff47 	bl	8006f5c <xchg_spi>
 80070ce:	20ff      	movs	r0, #255	; 0xff
 80070d0:	f7ff ff44 	bl	8006f5c <xchg_spi>

	return 1;						/* Function succeeded */
 80070d4:	2301      	movs	r3, #1
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	460b      	mov	r3, r1
 80070e8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80070ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80070ee:	f7ff ff82 	bl	8006ff6 <wait_ready>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <xmit_datablock+0x1e>
 80070f8:	2300      	movs	r3, #0
 80070fa:	e01e      	b.n	800713a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff ff2c 	bl	8006f5c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	2bfd      	cmp	r3, #253	; 0xfd
 8007108:	d016      	beq.n	8007138 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800710a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff ff56 	bl	8006fc0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007114:	20ff      	movs	r0, #255	; 0xff
 8007116:	f7ff ff21 	bl	8006f5c <xchg_spi>
 800711a:	20ff      	movs	r0, #255	; 0xff
 800711c:	f7ff ff1e 	bl	8006f5c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007120:	20ff      	movs	r0, #255	; 0xff
 8007122:	f7ff ff1b 	bl	8006f5c <xchg_spi>
 8007126:	4603      	mov	r3, r0
 8007128:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	f003 031f 	and.w	r3, r3, #31
 8007130:	2b05      	cmp	r3, #5
 8007132:	d001      	beq.n	8007138 <xmit_datablock+0x5a>
 8007134:	2300      	movs	r3, #0
 8007136:	e000      	b.n	800713a <xmit_datablock+0x5c>
	}
	return 1;
 8007138:	2301      	movs	r3, #1
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	4603      	mov	r3, r0
 800714a:	6039      	str	r1, [r7, #0]
 800714c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800714e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007152:	2b00      	cmp	r3, #0
 8007154:	da0e      	bge.n	8007174 <send_cmd+0x32>
		cmd &= 0x7F;
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800715c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800715e:	2100      	movs	r1, #0
 8007160:	2037      	movs	r0, #55	; 0x37
 8007162:	f7ff ffee 	bl	8007142 <send_cmd>
 8007166:	4603      	mov	r3, r0
 8007168:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d901      	bls.n	8007174 <send_cmd+0x32>
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	e051      	b.n	8007218 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	2b0c      	cmp	r3, #12
 8007178:	d008      	beq.n	800718c <send_cmd+0x4a>
		despiselect();
 800717a:	f7ff ff5f 	bl	800703c <despiselect>
		if (!spiselect()) return 0xFF;
 800717e:	f7ff ff6b 	bl	8007058 <spiselect>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <send_cmd+0x4a>
 8007188:	23ff      	movs	r3, #255	; 0xff
 800718a:	e045      	b.n	8007218 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007192:	b2db      	uxtb	r3, r3
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fee1 	bl	8006f5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	0e1b      	lsrs	r3, r3, #24
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff fedb 	bl	8006f5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	0c1b      	lsrs	r3, r3, #16
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fed5 	bl	8006f5c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fecf 	bl	8006f5c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff feca 	bl	8006f5c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80071c8:	2301      	movs	r3, #1
 80071ca:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <send_cmd+0x94>
 80071d2:	2395      	movs	r3, #149	; 0x95
 80071d4:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d101      	bne.n	80071e0 <send_cmd+0x9e>
 80071dc:	2387      	movs	r3, #135	; 0x87
 80071de:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7ff feba 	bl	8006f5c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	2b0c      	cmp	r3, #12
 80071ec:	d102      	bne.n	80071f4 <send_cmd+0xb2>
 80071ee:	20ff      	movs	r0, #255	; 0xff
 80071f0:	f7ff feb4 	bl	8006f5c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80071f4:	230a      	movs	r3, #10
 80071f6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80071f8:	20ff      	movs	r0, #255	; 0xff
 80071fa:	f7ff feaf 	bl	8006f5c <xchg_spi>
 80071fe:	4603      	mov	r3, r0
 8007200:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007206:	2b00      	cmp	r3, #0
 8007208:	da05      	bge.n	8007216 <send_cmd+0xd4>
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	3b01      	subs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1f0      	bne.n	80071f8 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007216:	7bbb      	ldrb	r3, [r7, #14]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800722a:	79fb      	ldrb	r3, [r7, #7]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <USER_SPI_initialize+0x14>
 8007230:	2301      	movs	r3, #1
 8007232:	e0d6      	b.n	80073e2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007234:	4b6d      	ldr	r3, [pc, #436]	; (80073ec <USER_SPI_initialize+0x1cc>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <USER_SPI_initialize+0x2a>
 8007242:	4b6a      	ldr	r3, [pc, #424]	; (80073ec <USER_SPI_initialize+0x1cc>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	e0cb      	b.n	80073e2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800724a:	4b69      	ldr	r3, [pc, #420]	; (80073f0 <USER_SPI_initialize+0x1d0>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007254:	4b66      	ldr	r3, [pc, #408]	; (80073f0 <USER_SPI_initialize+0x1d0>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800725c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800725e:	230a      	movs	r3, #10
 8007260:	73fb      	strb	r3, [r7, #15]
 8007262:	e005      	b.n	8007270 <USER_SPI_initialize+0x50>
 8007264:	20ff      	movs	r0, #255	; 0xff
 8007266:	f7ff fe79 	bl	8006f5c <xchg_spi>
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	3b01      	subs	r3, #1
 800726e:	73fb      	strb	r3, [r7, #15]
 8007270:	7bfb      	ldrb	r3, [r7, #15]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f6      	bne.n	8007264 <USER_SPI_initialize+0x44>

	ty = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800727a:	2100      	movs	r1, #0
 800727c:	2000      	movs	r0, #0
 800727e:	f7ff ff60 	bl	8007142 <send_cmd>
 8007282:	4603      	mov	r3, r0
 8007284:	2b01      	cmp	r3, #1
 8007286:	f040 808b 	bne.w	80073a0 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800728a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800728e:	f7ff fe3b 	bl	8006f08 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007292:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007296:	2008      	movs	r0, #8
 8007298:	f7ff ff53 	bl	8007142 <send_cmd>
 800729c:	4603      	mov	r3, r0
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d151      	bne.n	8007346 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
 80072a6:	e00d      	b.n	80072c4 <USER_SPI_initialize+0xa4>
 80072a8:	7bfc      	ldrb	r4, [r7, #15]
 80072aa:	20ff      	movs	r0, #255	; 0xff
 80072ac:	f7ff fe56 	bl	8006f5c <xchg_spi>
 80072b0:	4603      	mov	r3, r0
 80072b2:	461a      	mov	r2, r3
 80072b4:	f104 0310 	add.w	r3, r4, #16
 80072b8:	443b      	add	r3, r7
 80072ba:	f803 2c08 	strb.w	r2, [r3, #-8]
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	3301      	adds	r3, #1
 80072c2:	73fb      	strb	r3, [r7, #15]
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d9ee      	bls.n	80072a8 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80072ca:	7abb      	ldrb	r3, [r7, #10]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d167      	bne.n	80073a0 <USER_SPI_initialize+0x180>
 80072d0:	7afb      	ldrb	r3, [r7, #11]
 80072d2:	2baa      	cmp	r3, #170	; 0xaa
 80072d4:	d164      	bne.n	80073a0 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80072d6:	bf00      	nop
 80072d8:	f7ff fe2a 	bl	8006f30 <SPI_Timer_Status>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d007      	beq.n	80072f2 <USER_SPI_initialize+0xd2>
 80072e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80072e6:	20a9      	movs	r0, #169	; 0xa9
 80072e8:	f7ff ff2b 	bl	8007142 <send_cmd>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1f2      	bne.n	80072d8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80072f2:	f7ff fe1d 	bl	8006f30 <SPI_Timer_Status>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d051      	beq.n	80073a0 <USER_SPI_initialize+0x180>
 80072fc:	2100      	movs	r1, #0
 80072fe:	203a      	movs	r0, #58	; 0x3a
 8007300:	f7ff ff1f 	bl	8007142 <send_cmd>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d14a      	bne.n	80073a0 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]
 800730e:	e00d      	b.n	800732c <USER_SPI_initialize+0x10c>
 8007310:	7bfc      	ldrb	r4, [r7, #15]
 8007312:	20ff      	movs	r0, #255	; 0xff
 8007314:	f7ff fe22 	bl	8006f5c <xchg_spi>
 8007318:	4603      	mov	r3, r0
 800731a:	461a      	mov	r2, r3
 800731c:	f104 0310 	add.w	r3, r4, #16
 8007320:	443b      	add	r3, r7
 8007322:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	3301      	adds	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	2b03      	cmp	r3, #3
 8007330:	d9ee      	bls.n	8007310 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007332:	7a3b      	ldrb	r3, [r7, #8]
 8007334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007338:	2b00      	cmp	r3, #0
 800733a:	d001      	beq.n	8007340 <USER_SPI_initialize+0x120>
 800733c:	230c      	movs	r3, #12
 800733e:	e000      	b.n	8007342 <USER_SPI_initialize+0x122>
 8007340:	2304      	movs	r3, #4
 8007342:	737b      	strb	r3, [r7, #13]
 8007344:	e02c      	b.n	80073a0 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007346:	2100      	movs	r1, #0
 8007348:	20a9      	movs	r0, #169	; 0xa9
 800734a:	f7ff fefa 	bl	8007142 <send_cmd>
 800734e:	4603      	mov	r3, r0
 8007350:	2b01      	cmp	r3, #1
 8007352:	d804      	bhi.n	800735e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007354:	2302      	movs	r3, #2
 8007356:	737b      	strb	r3, [r7, #13]
 8007358:	23a9      	movs	r3, #169	; 0xa9
 800735a:	73bb      	strb	r3, [r7, #14]
 800735c:	e003      	b.n	8007366 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800735e:	2301      	movs	r3, #1
 8007360:	737b      	strb	r3, [r7, #13]
 8007362:	2301      	movs	r3, #1
 8007364:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007366:	bf00      	nop
 8007368:	f7ff fde2 	bl	8006f30 <SPI_Timer_Status>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d007      	beq.n	8007382 <USER_SPI_initialize+0x162>
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2100      	movs	r1, #0
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff fee3 	bl	8007142 <send_cmd>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1f2      	bne.n	8007368 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007382:	f7ff fdd5 	bl	8006f30 <SPI_Timer_Status>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d007      	beq.n	800739c <USER_SPI_initialize+0x17c>
 800738c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007390:	2010      	movs	r0, #16
 8007392:	f7ff fed6 	bl	8007142 <send_cmd>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <USER_SPI_initialize+0x180>
				ty = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80073a0:	4a14      	ldr	r2, [pc, #80]	; (80073f4 <USER_SPI_initialize+0x1d4>)
 80073a2:	7b7b      	ldrb	r3, [r7, #13]
 80073a4:	7013      	strb	r3, [r2, #0]
	despiselect();
 80073a6:	f7ff fe49 	bl	800703c <despiselect>

	if (ty) {			/* OK */
 80073aa:	7b7b      	ldrb	r3, [r7, #13]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d012      	beq.n	80073d6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 80073b0:	4b0f      	ldr	r3, [pc, #60]	; (80073f0 <USER_SPI_initialize+0x1d0>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80073ba:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <USER_SPI_initialize+0x1d0>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0210 	orr.w	r2, r2, #16
 80073c2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80073c4:	4b09      	ldr	r3, [pc, #36]	; (80073ec <USER_SPI_initialize+0x1cc>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	4b06      	ldr	r3, [pc, #24]	; (80073ec <USER_SPI_initialize+0x1cc>)
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	e002      	b.n	80073dc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80073d6:	4b05      	ldr	r3, [pc, #20]	; (80073ec <USER_SPI_initialize+0x1cc>)
 80073d8:	2201      	movs	r2, #1
 80073da:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <USER_SPI_initialize+0x1cc>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	b2db      	uxtb	r3, r3
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd90      	pop	{r4, r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000020 	.word	0x20000020
 80073f0:	20000e7c 	.word	0x20000e7c
 80073f4:	20013d14 	.word	0x20013d14

080073f8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <USER_SPI_status+0x14>
 8007408:	2301      	movs	r3, #1
 800740a:	e002      	b.n	8007412 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800740c:	4b04      	ldr	r3, [pc, #16]	; (8007420 <USER_SPI_status+0x28>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	b2db      	uxtb	r3, r3
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20000020 	.word	0x20000020

08007424 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	607a      	str	r2, [r7, #4]
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <USER_SPI_read+0x1c>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d101      	bne.n	8007444 <USER_SPI_read+0x20>
 8007440:	2304      	movs	r3, #4
 8007442:	e04d      	b.n	80074e0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007444:	4b28      	ldr	r3, [pc, #160]	; (80074e8 <USER_SPI_read+0xc4>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <USER_SPI_read+0x32>
 8007452:	2303      	movs	r3, #3
 8007454:	e044      	b.n	80074e0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007456:	4b25      	ldr	r3, [pc, #148]	; (80074ec <USER_SPI_read+0xc8>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	f003 0308 	and.w	r3, r3, #8
 800745e:	2b00      	cmp	r3, #0
 8007460:	d102      	bne.n	8007468 <USER_SPI_read+0x44>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	025b      	lsls	r3, r3, #9
 8007466:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d111      	bne.n	8007492 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	2011      	movs	r0, #17
 8007472:	f7ff fe66 	bl	8007142 <send_cmd>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d129      	bne.n	80074d0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800747c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007480:	68b8      	ldr	r0, [r7, #8]
 8007482:	f7ff fe03 	bl	800708c <rcvr_datablock>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d021      	beq.n	80074d0 <USER_SPI_read+0xac>
			count = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	e01e      	b.n	80074d0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	2012      	movs	r0, #18
 8007496:	f7ff fe54 	bl	8007142 <send_cmd>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d117      	bne.n	80074d0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80074a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074a4:	68b8      	ldr	r0, [r7, #8]
 80074a6:	f7ff fdf1 	bl	800708c <rcvr_datablock>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <USER_SPI_read+0xa2>
				buff += 512;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80074b6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1ed      	bne.n	80074a0 <USER_SPI_read+0x7c>
 80074c4:	e000      	b.n	80074c8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80074c6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80074c8:	2100      	movs	r1, #0
 80074ca:	200c      	movs	r0, #12
 80074cc:	f7ff fe39 	bl	8007142 <send_cmd>
		}
	}
	despiselect();
 80074d0:	f7ff fdb4 	bl	800703c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bf14      	ite	ne
 80074da:	2301      	movne	r3, #1
 80074dc:	2300      	moveq	r3, #0
 80074de:	b2db      	uxtb	r3, r3
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000020 	.word	0x20000020
 80074ec:	20013d14 	.word	0x20013d14

080074f0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d102      	bne.n	800750c <USER_SPI_write+0x1c>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <USER_SPI_write+0x20>
 800750c:	2304      	movs	r3, #4
 800750e:	e063      	b.n	80075d8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007510:	4b33      	ldr	r3, [pc, #204]	; (80075e0 <USER_SPI_write+0xf0>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <USER_SPI_write+0x32>
 800751e:	2303      	movs	r3, #3
 8007520:	e05a      	b.n	80075d8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007522:	4b2f      	ldr	r3, [pc, #188]	; (80075e0 <USER_SPI_write+0xf0>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <USER_SPI_write+0x44>
 8007530:	2302      	movs	r3, #2
 8007532:	e051      	b.n	80075d8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007534:	4b2b      	ldr	r3, [pc, #172]	; (80075e4 <USER_SPI_write+0xf4>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d102      	bne.n	8007546 <USER_SPI_write+0x56>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	025b      	lsls	r3, r3, #9
 8007544:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d110      	bne.n	800756e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	2018      	movs	r0, #24
 8007550:	f7ff fdf7 	bl	8007142 <send_cmd>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d136      	bne.n	80075c8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800755a:	21fe      	movs	r1, #254	; 0xfe
 800755c:	68b8      	ldr	r0, [r7, #8]
 800755e:	f7ff fdbe 	bl	80070de <xmit_datablock>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d02f      	beq.n	80075c8 <USER_SPI_write+0xd8>
			count = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	e02c      	b.n	80075c8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800756e:	4b1d      	ldr	r3, [pc, #116]	; (80075e4 <USER_SPI_write+0xf4>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	f003 0306 	and.w	r3, r3, #6
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <USER_SPI_write+0x92>
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	2097      	movs	r0, #151	; 0x97
 800757e:	f7ff fde0 	bl	8007142 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	2019      	movs	r0, #25
 8007586:	f7ff fddc 	bl	8007142 <send_cmd>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d11b      	bne.n	80075c8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007590:	21fc      	movs	r1, #252	; 0xfc
 8007592:	68b8      	ldr	r0, [r7, #8]
 8007594:	f7ff fda3 	bl	80070de <xmit_datablock>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <USER_SPI_write+0xc4>
				buff += 512;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80075a4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	603b      	str	r3, [r7, #0]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1ee      	bne.n	8007590 <USER_SPI_write+0xa0>
 80075b2:	e000      	b.n	80075b6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80075b4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80075b6:	21fd      	movs	r1, #253	; 0xfd
 80075b8:	2000      	movs	r0, #0
 80075ba:	f7ff fd90 	bl	80070de <xmit_datablock>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <USER_SPI_write+0xd8>
 80075c4:	2301      	movs	r3, #1
 80075c6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80075c8:	f7ff fd38 	bl	800703c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bf14      	ite	ne
 80075d2:	2301      	movne	r3, #1
 80075d4:	2300      	moveq	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	20000020 	.word	0x20000020
 80075e4:	20013d14 	.word	0x20013d14

080075e8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08c      	sub	sp, #48	; 0x30
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	603a      	str	r2, [r7, #0]
 80075f2:	71fb      	strb	r3, [r7, #7]
 80075f4:	460b      	mov	r3, r1
 80075f6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <USER_SPI_ioctl+0x1a>
 80075fe:	2304      	movs	r3, #4
 8007600:	e15a      	b.n	80078b8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007602:	4baf      	ldr	r3, [pc, #700]	; (80078c0 <USER_SPI_ioctl+0x2d8>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <USER_SPI_ioctl+0x2c>
 8007610:	2303      	movs	r3, #3
 8007612:	e151      	b.n	80078b8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800761a:	79bb      	ldrb	r3, [r7, #6]
 800761c:	2b04      	cmp	r3, #4
 800761e:	f200 8136 	bhi.w	800788e <USER_SPI_ioctl+0x2a6>
 8007622:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <USER_SPI_ioctl+0x40>)
 8007624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007628:	0800763d 	.word	0x0800763d
 800762c:	08007651 	.word	0x08007651
 8007630:	0800788f 	.word	0x0800788f
 8007634:	080076fd 	.word	0x080076fd
 8007638:	080077f3 	.word	0x080077f3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800763c:	f7ff fd0c 	bl	8007058 <spiselect>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 8127 	beq.w	8007896 <USER_SPI_ioctl+0x2ae>
 8007648:	2300      	movs	r3, #0
 800764a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800764e:	e122      	b.n	8007896 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007650:	2100      	movs	r1, #0
 8007652:	2009      	movs	r0, #9
 8007654:	f7ff fd75 	bl	8007142 <send_cmd>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	f040 811d 	bne.w	800789a <USER_SPI_ioctl+0x2b2>
 8007660:	f107 030c 	add.w	r3, r7, #12
 8007664:	2110      	movs	r1, #16
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fd10 	bl	800708c <rcvr_datablock>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 8113 	beq.w	800789a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007674:	7b3b      	ldrb	r3, [r7, #12]
 8007676:	099b      	lsrs	r3, r3, #6
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b01      	cmp	r3, #1
 800767c:	d111      	bne.n	80076a2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800767e:	7d7b      	ldrb	r3, [r7, #21]
 8007680:	461a      	mov	r2, r3
 8007682:	7d3b      	ldrb	r3, [r7, #20]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	4413      	add	r3, r2
 8007688:	461a      	mov	r2, r3
 800768a:	7cfb      	ldrb	r3, [r7, #19]
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007692:	4413      	add	r3, r2
 8007694:	3301      	adds	r3, #1
 8007696:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	029a      	lsls	r2, r3, #10
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	e028      	b.n	80076f4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80076a2:	7c7b      	ldrb	r3, [r7, #17]
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	7dbb      	ldrb	r3, [r7, #22]
 80076ac:	09db      	lsrs	r3, r3, #7
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	4413      	add	r3, r2
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	7d7b      	ldrb	r3, [r7, #21]
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f003 0306 	and.w	r3, r3, #6
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	4413      	add	r3, r2
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	3302      	adds	r3, #2
 80076c6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80076ca:	7d3b      	ldrb	r3, [r7, #20]
 80076cc:	099b      	lsrs	r3, r3, #6
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	7cfb      	ldrb	r3, [r7, #19]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	441a      	add	r2, r3
 80076d8:	7cbb      	ldrb	r3, [r7, #18]
 80076da:	029b      	lsls	r3, r3, #10
 80076dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076e0:	4413      	add	r3, r2
 80076e2:	3301      	adds	r3, #1
 80076e4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80076e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80076ea:	3b09      	subs	r3, #9
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	409a      	lsls	r2, r3
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80076fa:	e0ce      	b.n	800789a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80076fc:	4b71      	ldr	r3, [pc, #452]	; (80078c4 <USER_SPI_ioctl+0x2dc>)
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d031      	beq.n	800776c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007708:	2100      	movs	r1, #0
 800770a:	208d      	movs	r0, #141	; 0x8d
 800770c:	f7ff fd19 	bl	8007142 <send_cmd>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	f040 80c3 	bne.w	800789e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007718:	20ff      	movs	r0, #255	; 0xff
 800771a:	f7ff fc1f 	bl	8006f5c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800771e:	f107 030c 	add.w	r3, r7, #12
 8007722:	2110      	movs	r1, #16
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff fcb1 	bl	800708c <rcvr_datablock>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80b6 	beq.w	800789e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007732:	2330      	movs	r3, #48	; 0x30
 8007734:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007738:	e007      	b.n	800774a <USER_SPI_ioctl+0x162>
 800773a:	20ff      	movs	r0, #255	; 0xff
 800773c:	f7ff fc0e 	bl	8006f5c <xchg_spi>
 8007740:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007744:	3b01      	subs	r3, #1
 8007746:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800774a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1f3      	bne.n	800773a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007752:	7dbb      	ldrb	r3, [r7, #22]
 8007754:	091b      	lsrs	r3, r3, #4
 8007756:	b2db      	uxtb	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	2310      	movs	r3, #16
 800775c:	fa03 f202 	lsl.w	r2, r3, r2
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800776a:	e098      	b.n	800789e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800776c:	2100      	movs	r1, #0
 800776e:	2009      	movs	r0, #9
 8007770:	f7ff fce7 	bl	8007142 <send_cmd>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	f040 8091 	bne.w	800789e <USER_SPI_ioctl+0x2b6>
 800777c:	f107 030c 	add.w	r3, r7, #12
 8007780:	2110      	movs	r1, #16
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff fc82 	bl	800708c <rcvr_datablock>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8087 	beq.w	800789e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007790:	4b4c      	ldr	r3, [pc, #304]	; (80078c4 <USER_SPI_ioctl+0x2dc>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d012      	beq.n	80077c2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800779c:	7dbb      	ldrb	r3, [r7, #22]
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80077a4:	7dfa      	ldrb	r2, [r7, #23]
 80077a6:	09d2      	lsrs	r2, r2, #7
 80077a8:	b2d2      	uxtb	r2, r2
 80077aa:	4413      	add	r3, r2
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	7e7b      	ldrb	r3, [r7, #25]
 80077b0:	099b      	lsrs	r3, r3, #6
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	3b01      	subs	r3, #1
 80077b6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	e013      	b.n	80077ea <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80077c2:	7dbb      	ldrb	r3, [r7, #22]
 80077c4:	109b      	asrs	r3, r3, #2
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f003 031f 	and.w	r3, r3, #31
 80077cc:	3301      	adds	r3, #1
 80077ce:	7dfa      	ldrb	r2, [r7, #23]
 80077d0:	00d2      	lsls	r2, r2, #3
 80077d2:	f002 0218 	and.w	r2, r2, #24
 80077d6:	7df9      	ldrb	r1, [r7, #23]
 80077d8:	0949      	lsrs	r1, r1, #5
 80077da:	b2c9      	uxtb	r1, r1
 80077dc:	440a      	add	r2, r1
 80077de:	3201      	adds	r2, #1
 80077e0:	fb02 f303 	mul.w	r3, r2, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80077f0:	e055      	b.n	800789e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80077f2:	4b34      	ldr	r3, [pc, #208]	; (80078c4 <USER_SPI_ioctl+0x2dc>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	f003 0306 	and.w	r3, r3, #6
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d051      	beq.n	80078a2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80077fe:	f107 020c 	add.w	r2, r7, #12
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	210b      	movs	r1, #11
 8007806:	4618      	mov	r0, r3
 8007808:	f7ff feee 	bl	80075e8 <USER_SPI_ioctl>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d149      	bne.n	80078a6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007812:	7b3b      	ldrb	r3, [r7, #12]
 8007814:	099b      	lsrs	r3, r3, #6
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d104      	bne.n	8007826 <USER_SPI_ioctl+0x23e>
 800781c:	7dbb      	ldrb	r3, [r7, #22]
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d041      	beq.n	80078aa <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	623b      	str	r3, [r7, #32]
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8007836:	4b23      	ldr	r3, [pc, #140]	; (80078c4 <USER_SPI_ioctl+0x2dc>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	f003 0308 	and.w	r3, r3, #8
 800783e:	2b00      	cmp	r3, #0
 8007840:	d105      	bne.n	800784e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	025b      	lsls	r3, r3, #9
 8007846:	62bb      	str	r3, [r7, #40]	; 0x28
 8007848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784a:	025b      	lsls	r3, r3, #9
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800784e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007850:	2020      	movs	r0, #32
 8007852:	f7ff fc76 	bl	8007142 <send_cmd>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d128      	bne.n	80078ae <USER_SPI_ioctl+0x2c6>
 800785c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800785e:	2021      	movs	r0, #33	; 0x21
 8007860:	f7ff fc6f 	bl	8007142 <send_cmd>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d121      	bne.n	80078ae <USER_SPI_ioctl+0x2c6>
 800786a:	2100      	movs	r1, #0
 800786c:	2026      	movs	r0, #38	; 0x26
 800786e:	f7ff fc68 	bl	8007142 <send_cmd>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d11a      	bne.n	80078ae <USER_SPI_ioctl+0x2c6>
 8007878:	f247 5030 	movw	r0, #30000	; 0x7530
 800787c:	f7ff fbbb 	bl	8006ff6 <wait_ready>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d013      	beq.n	80078ae <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007886:	2300      	movs	r3, #0
 8007888:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800788c:	e00f      	b.n	80078ae <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800788e:	2304      	movs	r3, #4
 8007890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007894:	e00c      	b.n	80078b0 <USER_SPI_ioctl+0x2c8>
		break;
 8007896:	bf00      	nop
 8007898:	e00a      	b.n	80078b0 <USER_SPI_ioctl+0x2c8>
		break;
 800789a:	bf00      	nop
 800789c:	e008      	b.n	80078b0 <USER_SPI_ioctl+0x2c8>
		break;
 800789e:	bf00      	nop
 80078a0:	e006      	b.n	80078b0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80078a2:	bf00      	nop
 80078a4:	e004      	b.n	80078b0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80078a6:	bf00      	nop
 80078a8:	e002      	b.n	80078b0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80078aa:	bf00      	nop
 80078ac:	e000      	b.n	80078b0 <USER_SPI_ioctl+0x2c8>
		break;
 80078ae:	bf00      	nop
	}

	despiselect();
 80078b0:	f7ff fbc4 	bl	800703c <despiselect>

	return res;
 80078b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3730      	adds	r7, #48	; 0x30
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000020 	.word	0x20000020
 80078c4:	20013d14 	.word	0x20013d14

080078c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	4603      	mov	r3, r0
 80078d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80078d2:	79fb      	ldrb	r3, [r7, #7]
 80078d4:	4a08      	ldr	r2, [pc, #32]	; (80078f8 <disk_status+0x30>)
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	79fa      	ldrb	r2, [r7, #7]
 80078e0:	4905      	ldr	r1, [pc, #20]	; (80078f8 <disk_status+0x30>)
 80078e2:	440a      	add	r2, r1
 80078e4:	7a12      	ldrb	r2, [r2, #8]
 80078e6:	4610      	mov	r0, r2
 80078e8:	4798      	blx	r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20013d48 	.word	0x20013d48

080078fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	4a0d      	ldr	r2, [pc, #52]	; (8007944 <disk_initialize+0x48>)
 800790e:	5cd3      	ldrb	r3, [r2, r3]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d111      	bne.n	8007938 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	4a0b      	ldr	r2, [pc, #44]	; (8007944 <disk_initialize+0x48>)
 8007918:	2101      	movs	r1, #1
 800791a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	4a09      	ldr	r2, [pc, #36]	; (8007944 <disk_initialize+0x48>)
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	79fa      	ldrb	r2, [r7, #7]
 800792a:	4906      	ldr	r1, [pc, #24]	; (8007944 <disk_initialize+0x48>)
 800792c:	440a      	add	r2, r1
 800792e:	7a12      	ldrb	r2, [r2, #8]
 8007930:	4610      	mov	r0, r2
 8007932:	4798      	blx	r3
 8007934:	4603      	mov	r3, r0
 8007936:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20013d48 	.word	0x20013d48

08007948 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	4603      	mov	r3, r0
 8007956:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007958:	7bfb      	ldrb	r3, [r7, #15]
 800795a:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <disk_read+0x3c>)
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	689c      	ldr	r4, [r3, #8]
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	4a07      	ldr	r2, [pc, #28]	; (8007984 <disk_read+0x3c>)
 8007968:	4413      	add	r3, r2
 800796a:	7a18      	ldrb	r0, [r3, #8]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	68b9      	ldr	r1, [r7, #8]
 8007972:	47a0      	blx	r4
 8007974:	4603      	mov	r3, r0
 8007976:	75fb      	strb	r3, [r7, #23]
  return res;
 8007978:	7dfb      	ldrb	r3, [r7, #23]
}
 800797a:	4618      	mov	r0, r3
 800797c:	371c      	adds	r7, #28
 800797e:	46bd      	mov	sp, r7
 8007980:	bd90      	pop	{r4, r7, pc}
 8007982:	bf00      	nop
 8007984:	20013d48 	.word	0x20013d48

08007988 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007988:	b590      	push	{r4, r7, lr}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	607a      	str	r2, [r7, #4]
 8007992:	603b      	str	r3, [r7, #0]
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	4a0a      	ldr	r2, [pc, #40]	; (80079c4 <disk_write+0x3c>)
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	68dc      	ldr	r4, [r3, #12]
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <disk_write+0x3c>)
 80079a8:	4413      	add	r3, r2
 80079aa:	7a18      	ldrb	r0, [r3, #8]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	47a0      	blx	r4
 80079b4:	4603      	mov	r3, r0
 80079b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd90      	pop	{r4, r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20013d48 	.word	0x20013d48

080079c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	603a      	str	r2, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
 80079d4:	460b      	mov	r3, r1
 80079d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	4a09      	ldr	r2, [pc, #36]	; (8007a00 <disk_ioctl+0x38>)
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	79fa      	ldrb	r2, [r7, #7]
 80079e6:	4906      	ldr	r1, [pc, #24]	; (8007a00 <disk_ioctl+0x38>)
 80079e8:	440a      	add	r2, r1
 80079ea:	7a10      	ldrb	r0, [r2, #8]
 80079ec:	79b9      	ldrb	r1, [r7, #6]
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4798      	blx	r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	73fb      	strb	r3, [r7, #15]
  return res;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20013d48 	.word	0x20013d48

08007a04 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007a14:	89fb      	ldrh	r3, [r7, #14]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	b21a      	sxth	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	b21b      	sxth	r3, r3
 8007a20:	4313      	orrs	r3, r2
 8007a22:	b21b      	sxth	r3, r3
 8007a24:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007a26:	89fb      	ldrh	r3, [r7, #14]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3303      	adds	r3, #3
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	3202      	adds	r2, #2
 8007a4c:	7812      	ldrb	r2, [r2, #0]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	021b      	lsls	r3, r3, #8
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	3201      	adds	r2, #1
 8007a5a:	7812      	ldrb	r2, [r2, #0]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	021b      	lsls	r3, r3, #8
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	7812      	ldrb	r2, [r2, #0]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
	return rv;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	460b      	mov	r3, r1
 8007a84:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	607a      	str	r2, [r7, #4]
 8007a8c:	887a      	ldrh	r2, [r7, #2]
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]
 8007a92:	887b      	ldrh	r3, [r7, #2]
 8007a94:	0a1b      	lsrs	r3, r3, #8
 8007a96:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	1c5a      	adds	r2, r3, #1
 8007a9c:	607a      	str	r2, [r7, #4]
 8007a9e:	887a      	ldrh	r2, [r7, #2]
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	701a      	strb	r2, [r3, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	1c5a      	adds	r2, r3, #1
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	0a1b      	lsrs	r3, r3, #8
 8007aca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	1c5a      	adds	r2, r3, #1
 8007ad0:	607a      	str	r2, [r7, #4]
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	701a      	strb	r2, [r3, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	0a1b      	lsrs	r3, r3, #8
 8007adc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	0a1b      	lsrs	r3, r3, #8
 8007aee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	607a      	str	r2, [r7, #4]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	b2d2      	uxtb	r2, r2
 8007afa:	701a      	strb	r2, [r3, #0]
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00d      	beq.n	8007b3e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	1c53      	adds	r3, r2, #1
 8007b26:	613b      	str	r3, [r7, #16]
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	1c59      	adds	r1, r3, #1
 8007b2c:	6179      	str	r1, [r7, #20]
 8007b2e:	7812      	ldrb	r2, [r2, #0]
 8007b30:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f1      	bne.n	8007b22 <mem_cpy+0x1a>
	}
}
 8007b3e:	bf00      	nop
 8007b40:	371c      	adds	r7, #28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007b4a:	b480      	push	{r7}
 8007b4c:	b087      	sub	sp, #28
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	617a      	str	r2, [r7, #20]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	b2d2      	uxtb	r2, r2
 8007b64:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	607b      	str	r3, [r7, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1f3      	bne.n	8007b5a <mem_set+0x10>
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	371c      	adds	r7, #28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007b80:	b480      	push	{r7}
 8007b82:	b089      	sub	sp, #36	; 0x24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007b94:	2300      	movs	r3, #0
 8007b96:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	61fa      	str	r2, [r7, #28]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	61ba      	str	r2, [r7, #24]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	1acb      	subs	r3, r1, r3
 8007bac:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <mem_cmp+0x40>
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0eb      	beq.n	8007b98 <mem_cmp+0x18>

	return r;
 8007bc0:	697b      	ldr	r3, [r7, #20]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3724      	adds	r7, #36	; 0x24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007bd8:	e002      	b.n	8007be0 <chk_chr+0x12>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	607b      	str	r3, [r7, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <chk_chr+0x26>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	461a      	mov	r2, r3
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d1f2      	bne.n	8007bda <chk_chr+0xc>
	return *str;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60bb      	str	r3, [r7, #8]
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	e029      	b.n	8007c6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007c18:	4a27      	ldr	r2, [pc, #156]	; (8007cb8 <chk_lock+0xb4>)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	011b      	lsls	r3, r3, #4
 8007c1e:	4413      	add	r3, r2
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d01d      	beq.n	8007c62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007c26:	4a24      	ldr	r2, [pc, #144]	; (8007cb8 <chk_lock+0xb4>)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	4413      	add	r3, r2
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d116      	bne.n	8007c66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007c38:	4a1f      	ldr	r2, [pc, #124]	; (8007cb8 <chk_lock+0xb4>)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	011b      	lsls	r3, r3, #4
 8007c3e:	4413      	add	r3, r2
 8007c40:	3304      	adds	r3, #4
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d10c      	bne.n	8007c66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007c4c:	4a1a      	ldr	r2, [pc, #104]	; (8007cb8 <chk_lock+0xb4>)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	4413      	add	r3, r2
 8007c54:	3308      	adds	r3, #8
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d102      	bne.n	8007c66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007c60:	e007      	b.n	8007c72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007c62:	2301      	movs	r3, #1
 8007c64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d9d2      	bls.n	8007c18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d109      	bne.n	8007c8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d102      	bne.n	8007c84 <chk_lock+0x80>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d101      	bne.n	8007c88 <chk_lock+0x84>
 8007c84:	2300      	movs	r3, #0
 8007c86:	e010      	b.n	8007caa <chk_lock+0xa6>
 8007c88:	2312      	movs	r3, #18
 8007c8a:	e00e      	b.n	8007caa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d108      	bne.n	8007ca4 <chk_lock+0xa0>
 8007c92:	4a09      	ldr	r2, [pc, #36]	; (8007cb8 <chk_lock+0xb4>)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	4413      	add	r3, r2
 8007c9a:	330c      	adds	r3, #12
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ca2:	d101      	bne.n	8007ca8 <chk_lock+0xa4>
 8007ca4:	2310      	movs	r3, #16
 8007ca6:	e000      	b.n	8007caa <chk_lock+0xa6>
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20013d28 	.word	0x20013d28

08007cbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	607b      	str	r3, [r7, #4]
 8007cc6:	e002      	b.n	8007cce <enq_lock+0x12>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	607b      	str	r3, [r7, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d806      	bhi.n	8007ce2 <enq_lock+0x26>
 8007cd4:	4a09      	ldr	r2, [pc, #36]	; (8007cfc <enq_lock+0x40>)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	011b      	lsls	r3, r3, #4
 8007cda:	4413      	add	r3, r2
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f2      	bne.n	8007cc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	bf14      	ite	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	2300      	moveq	r3, #0
 8007cec:	b2db      	uxtb	r3, r3
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	20013d28 	.word	0x20013d28

08007d00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e01f      	b.n	8007d50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007d10:	4a41      	ldr	r2, [pc, #260]	; (8007e18 <inc_lock+0x118>)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	011b      	lsls	r3, r3, #4
 8007d16:	4413      	add	r3, r2
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d113      	bne.n	8007d4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007d22:	4a3d      	ldr	r2, [pc, #244]	; (8007e18 <inc_lock+0x118>)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	4413      	add	r3, r2
 8007d2a:	3304      	adds	r3, #4
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d109      	bne.n	8007d4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007d36:	4a38      	ldr	r2, [pc, #224]	; (8007e18 <inc_lock+0x118>)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	4413      	add	r3, r2
 8007d3e:	3308      	adds	r3, #8
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d006      	beq.n	8007d58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d9dc      	bls.n	8007d10 <inc_lock+0x10>
 8007d56:	e000      	b.n	8007d5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007d58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d132      	bne.n	8007dc6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e002      	b.n	8007d6c <inc_lock+0x6c>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d806      	bhi.n	8007d80 <inc_lock+0x80>
 8007d72:	4a29      	ldr	r2, [pc, #164]	; (8007e18 <inc_lock+0x118>)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	4413      	add	r3, r2
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1f2      	bne.n	8007d66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d101      	bne.n	8007d8a <inc_lock+0x8a>
 8007d86:	2300      	movs	r3, #0
 8007d88:	e040      	b.n	8007e0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	4922      	ldr	r1, [pc, #136]	; (8007e18 <inc_lock+0x118>)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	440b      	add	r3, r1
 8007d96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	491e      	ldr	r1, [pc, #120]	; (8007e18 <inc_lock+0x118>)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	011b      	lsls	r3, r3, #4
 8007da2:	440b      	add	r3, r1
 8007da4:	3304      	adds	r3, #4
 8007da6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	695a      	ldr	r2, [r3, #20]
 8007dac:	491a      	ldr	r1, [pc, #104]	; (8007e18 <inc_lock+0x118>)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	440b      	add	r3, r1
 8007db4:	3308      	adds	r3, #8
 8007db6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007db8:	4a17      	ldr	r2, [pc, #92]	; (8007e18 <inc_lock+0x118>)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	011b      	lsls	r3, r3, #4
 8007dbe:	4413      	add	r3, r2
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d009      	beq.n	8007de0 <inc_lock+0xe0>
 8007dcc:	4a12      	ldr	r2, [pc, #72]	; (8007e18 <inc_lock+0x118>)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	4413      	add	r3, r2
 8007dd4:	330c      	adds	r3, #12
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <inc_lock+0xe0>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	e015      	b.n	8007e0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d108      	bne.n	8007df8 <inc_lock+0xf8>
 8007de6:	4a0c      	ldr	r2, [pc, #48]	; (8007e18 <inc_lock+0x118>)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	4413      	add	r3, r2
 8007dee:	330c      	adds	r3, #12
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	3301      	adds	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	e001      	b.n	8007dfc <inc_lock+0xfc>
 8007df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dfc:	4906      	ldr	r1, [pc, #24]	; (8007e18 <inc_lock+0x118>)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	440b      	add	r3, r1
 8007e04:	330c      	adds	r3, #12
 8007e06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3301      	adds	r3, #1
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3714      	adds	r7, #20
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	20013d28 	.word	0x20013d28

08007e1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	607b      	str	r3, [r7, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d825      	bhi.n	8007e7c <dec_lock+0x60>
		n = Files[i].ctr;
 8007e30:	4a17      	ldr	r2, [pc, #92]	; (8007e90 <dec_lock+0x74>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	011b      	lsls	r3, r3, #4
 8007e36:	4413      	add	r3, r2
 8007e38:	330c      	adds	r3, #12
 8007e3a:	881b      	ldrh	r3, [r3, #0]
 8007e3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007e3e:	89fb      	ldrh	r3, [r7, #14]
 8007e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e44:	d101      	bne.n	8007e4a <dec_lock+0x2e>
 8007e46:	2300      	movs	r3, #0
 8007e48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007e4a:	89fb      	ldrh	r3, [r7, #14]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d002      	beq.n	8007e56 <dec_lock+0x3a>
 8007e50:	89fb      	ldrh	r3, [r7, #14]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007e56:	4a0e      	ldr	r2, [pc, #56]	; (8007e90 <dec_lock+0x74>)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	4413      	add	r3, r2
 8007e5e:	330c      	adds	r3, #12
 8007e60:	89fa      	ldrh	r2, [r7, #14]
 8007e62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007e64:	89fb      	ldrh	r3, [r7, #14]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d105      	bne.n	8007e76 <dec_lock+0x5a>
 8007e6a:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <dec_lock+0x74>)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	011b      	lsls	r3, r3, #4
 8007e70:	4413      	add	r3, r2
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	737b      	strb	r3, [r7, #13]
 8007e7a:	e001      	b.n	8007e80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007e80:	7b7b      	ldrb	r3, [r7, #13]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20013d28 	.word	0x20013d28

08007e94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e010      	b.n	8007ec4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007ea2:	4a0d      	ldr	r2, [pc, #52]	; (8007ed8 <clear_lock+0x44>)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	4413      	add	r3, r2
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d105      	bne.n	8007ebe <clear_lock+0x2a>
 8007eb2:	4a09      	ldr	r2, [pc, #36]	; (8007ed8 <clear_lock+0x44>)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	011b      	lsls	r3, r3, #4
 8007eb8:	4413      	add	r3, r2
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d9eb      	bls.n	8007ea2 <clear_lock+0xe>
	}
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	20013d28 	.word	0x20013d28

08007edc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	78db      	ldrb	r3, [r3, #3]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d034      	beq.n	8007f5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	7858      	ldrb	r0, [r3, #1]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f00:	2301      	movs	r3, #1
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	f7ff fd40 	bl	8007988 <disk_write>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
 8007f12:	e022      	b.n	8007f5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	1ad2      	subs	r2, r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d217      	bcs.n	8007f5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	789b      	ldrb	r3, [r3, #2]
 8007f2e:	613b      	str	r3, [r7, #16]
 8007f30:	e010      	b.n	8007f54 <sync_window+0x78>
					wsect += fs->fsize;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	4413      	add	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	7858      	ldrb	r0, [r3, #1]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f46:	2301      	movs	r3, #1
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	f7ff fd1d 	bl	8007988 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	613b      	str	r3, [r7, #16]
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d8eb      	bhi.n	8007f32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d01b      	beq.n	8007fb4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff ffad 	bl	8007edc <sync_window>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d113      	bne.n	8007fb4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7858      	ldrb	r0, [r3, #1]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f96:	2301      	movs	r3, #1
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	f7ff fcd5 	bl	8007948 <disk_read>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d004      	beq.n	8007fae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7ff ff87 	bl	8007edc <sync_window>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d158      	bne.n	800808a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d148      	bne.n	8008072 <sync_fs+0xb2>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	791b      	ldrb	r3, [r3, #4]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d144      	bne.n	8008072 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	3330      	adds	r3, #48	; 0x30
 8007fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff fda9 	bl	8007b4a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3330      	adds	r3, #48	; 0x30
 8007ffc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008000:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff fd38 	bl	8007a7a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3330      	adds	r3, #48	; 0x30
 800800e:	4921      	ldr	r1, [pc, #132]	; (8008094 <sync_fs+0xd4>)
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff fd4d 	bl	8007ab0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3330      	adds	r3, #48	; 0x30
 800801a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800801e:	491e      	ldr	r1, [pc, #120]	; (8008098 <sync_fs+0xd8>)
 8008020:	4618      	mov	r0, r3
 8008022:	f7ff fd45 	bl	8007ab0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3330      	adds	r3, #48	; 0x30
 800802a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	4619      	mov	r1, r3
 8008034:	4610      	mov	r0, r2
 8008036:	f7ff fd3b 	bl	8007ab0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3330      	adds	r3, #48	; 0x30
 800803e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f7ff fd31 	bl	8007ab0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	7858      	ldrb	r0, [r3, #1]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008066:	2301      	movs	r3, #1
 8008068:	f7ff fc8e 	bl	8007988 <disk_write>
			fs->fsi_flag = 0;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2200      	movs	r2, #0
 8008078:	2100      	movs	r1, #0
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fca4 	bl	80079c8 <disk_ioctl>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <sync_fs+0xca>
 8008086:	2301      	movs	r3, #1
 8008088:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	41615252 	.word	0x41615252
 8008098:	61417272 	.word	0x61417272

0800809c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	3b02      	subs	r3, #2
 80080aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	3b02      	subs	r3, #2
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d301      	bcc.n	80080bc <clust2sect+0x20>
 80080b8:	2300      	movs	r3, #0
 80080ba:	e008      	b.n	80080ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	895b      	ldrh	r3, [r3, #10]
 80080c0:	461a      	mov	r2, r3
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	fb03 f202 	mul.w	r2, r3, r2
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080cc:	4413      	add	r3, r2
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b086      	sub	sp, #24
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d904      	bls.n	80080fa <get_fat+0x20>
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d302      	bcc.n	8008100 <get_fat+0x26>
		val = 1;	/* Internal error */
 80080fa:	2301      	movs	r3, #1
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	e08f      	b.n	8008220 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008100:	f04f 33ff 	mov.w	r3, #4294967295
 8008104:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b03      	cmp	r3, #3
 800810c:	d062      	beq.n	80081d4 <get_fat+0xfa>
 800810e:	2b03      	cmp	r3, #3
 8008110:	dc7c      	bgt.n	800820c <get_fat+0x132>
 8008112:	2b01      	cmp	r3, #1
 8008114:	d002      	beq.n	800811c <get_fat+0x42>
 8008116:	2b02      	cmp	r3, #2
 8008118:	d042      	beq.n	80081a0 <get_fat+0xc6>
 800811a:	e077      	b.n	800820c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	085b      	lsrs	r3, r3, #1
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	6a1a      	ldr	r2, [r3, #32]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	0a5b      	lsrs	r3, r3, #9
 8008132:	4413      	add	r3, r2
 8008134:	4619      	mov	r1, r3
 8008136:	6938      	ldr	r0, [r7, #16]
 8008138:	f7ff ff14 	bl	8007f64 <move_window>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d167      	bne.n	8008212 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	1c5a      	adds	r2, r3, #1
 8008146:	60fa      	str	r2, [r7, #12]
 8008148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	4413      	add	r3, r2
 8008150:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008154:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6a1a      	ldr	r2, [r3, #32]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	0a5b      	lsrs	r3, r3, #9
 800815e:	4413      	add	r3, r2
 8008160:	4619      	mov	r1, r3
 8008162:	6938      	ldr	r0, [r7, #16]
 8008164:	f7ff fefe 	bl	8007f64 <move_window>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d153      	bne.n	8008216 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	4413      	add	r3, r2
 8008178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	461a      	mov	r2, r3
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4313      	orrs	r3, r2
 8008184:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <get_fat+0xbc>
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	091b      	lsrs	r3, r3, #4
 8008194:	e002      	b.n	800819c <get_fat+0xc2>
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800819c:	617b      	str	r3, [r7, #20]
			break;
 800819e:	e03f      	b.n	8008220 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	6a1a      	ldr	r2, [r3, #32]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	0a1b      	lsrs	r3, r3, #8
 80081a8:	4413      	add	r3, r2
 80081aa:	4619      	mov	r1, r3
 80081ac:	6938      	ldr	r0, [r7, #16]
 80081ae:	f7ff fed9 	bl	8007f64 <move_window>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d130      	bne.n	800821a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80081c6:	4413      	add	r3, r2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff fc1b 	bl	8007a04 <ld_word>
 80081ce:	4603      	mov	r3, r0
 80081d0:	617b      	str	r3, [r7, #20]
			break;
 80081d2:	e025      	b.n	8008220 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6a1a      	ldr	r2, [r3, #32]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	09db      	lsrs	r3, r3, #7
 80081dc:	4413      	add	r3, r2
 80081de:	4619      	mov	r1, r3
 80081e0:	6938      	ldr	r0, [r7, #16]
 80081e2:	f7ff febf 	bl	8007f64 <move_window>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d118      	bne.n	800821e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80081fa:	4413      	add	r3, r2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff fc19 	bl	8007a34 <ld_dword>
 8008202:	4603      	mov	r3, r0
 8008204:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008208:	617b      	str	r3, [r7, #20]
			break;
 800820a:	e009      	b.n	8008220 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800820c:	2301      	movs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	e006      	b.n	8008220 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008212:	bf00      	nop
 8008214:	e004      	b.n	8008220 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008216:	bf00      	nop
 8008218:	e002      	b.n	8008220 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800821a:	bf00      	nop
 800821c:	e000      	b.n	8008220 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800821e:	bf00      	nop
		}
	}

	return val;
 8008220:	697b      	ldr	r3, [r7, #20]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800822a:	b590      	push	{r4, r7, lr}
 800822c:	b089      	sub	sp, #36	; 0x24
 800822e:	af00      	add	r7, sp, #0
 8008230:	60f8      	str	r0, [r7, #12]
 8008232:	60b9      	str	r1, [r7, #8]
 8008234:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008236:	2302      	movs	r3, #2
 8008238:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b01      	cmp	r3, #1
 800823e:	f240 80d2 	bls.w	80083e6 <put_fat+0x1bc>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	429a      	cmp	r2, r3
 800824a:	f080 80cc 	bcs.w	80083e6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b03      	cmp	r3, #3
 8008254:	f000 8096 	beq.w	8008384 <put_fat+0x15a>
 8008258:	2b03      	cmp	r3, #3
 800825a:	f300 80cd 	bgt.w	80083f8 <put_fat+0x1ce>
 800825e:	2b01      	cmp	r3, #1
 8008260:	d002      	beq.n	8008268 <put_fat+0x3e>
 8008262:	2b02      	cmp	r3, #2
 8008264:	d06e      	beq.n	8008344 <put_fat+0x11a>
 8008266:	e0c7      	b.n	80083f8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	61bb      	str	r3, [r7, #24]
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	085b      	lsrs	r3, r3, #1
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	4413      	add	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6a1a      	ldr	r2, [r3, #32]
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	0a5b      	lsrs	r3, r3, #9
 800827e:	4413      	add	r3, r2
 8008280:	4619      	mov	r1, r3
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f7ff fe6e 	bl	8007f64 <move_window>
 8008288:	4603      	mov	r3, r0
 800828a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800828c:	7ffb      	ldrb	r3, [r7, #31]
 800828e:	2b00      	cmp	r3, #0
 8008290:	f040 80ab 	bne.w	80083ea <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	1c59      	adds	r1, r3, #1
 800829e:	61b9      	str	r1, [r7, #24]
 80082a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a4:	4413      	add	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00d      	beq.n	80082ce <put_fat+0xa4>
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	b25b      	sxtb	r3, r3
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	b25a      	sxtb	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	b25b      	sxtb	r3, r3
 80082c6:	4313      	orrs	r3, r2
 80082c8:	b25b      	sxtb	r3, r3
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	e001      	b.n	80082d2 <put_fat+0xa8>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6a1a      	ldr	r2, [r3, #32]
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	0a5b      	lsrs	r3, r3, #9
 80082e4:	4413      	add	r3, r2
 80082e6:	4619      	mov	r1, r3
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f7ff fe3b 	bl	8007f64 <move_window>
 80082ee:	4603      	mov	r3, r0
 80082f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80082f2:	7ffb      	ldrb	r3, [r7, #31]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d17a      	bne.n	80083ee <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008304:	4413      	add	r3, r2
 8008306:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <put_fat+0xf0>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	091b      	lsrs	r3, r3, #4
 8008316:	b2db      	uxtb	r3, r3
 8008318:	e00e      	b.n	8008338 <put_fat+0x10e>
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	b25b      	sxtb	r3, r3
 8008320:	f023 030f 	bic.w	r3, r3, #15
 8008324:	b25a      	sxtb	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	0a1b      	lsrs	r3, r3, #8
 800832a:	b25b      	sxtb	r3, r3
 800832c:	f003 030f 	and.w	r3, r3, #15
 8008330:	b25b      	sxtb	r3, r3
 8008332:	4313      	orrs	r3, r2
 8008334:	b25b      	sxtb	r3, r3
 8008336:	b2db      	uxtb	r3, r3
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2201      	movs	r2, #1
 8008340:	70da      	strb	r2, [r3, #3]
			break;
 8008342:	e059      	b.n	80083f8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6a1a      	ldr	r2, [r3, #32]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	0a1b      	lsrs	r3, r3, #8
 800834c:	4413      	add	r3, r2
 800834e:	4619      	mov	r1, r3
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f7ff fe07 	bl	8007f64 <move_window>
 8008356:	4603      	mov	r3, r0
 8008358:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800835a:	7ffb      	ldrb	r3, [r7, #31]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d148      	bne.n	80083f2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800836e:	4413      	add	r3, r2
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	b292      	uxth	r2, r2
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f7ff fb7f 	bl	8007a7a <st_word>
			fs->wflag = 1;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2201      	movs	r2, #1
 8008380:	70da      	strb	r2, [r3, #3]
			break;
 8008382:	e039      	b.n	80083f8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a1a      	ldr	r2, [r3, #32]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	09db      	lsrs	r3, r3, #7
 800838c:	4413      	add	r3, r2
 800838e:	4619      	mov	r1, r3
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff fde7 	bl	8007f64 <move_window>
 8008396:	4603      	mov	r3, r0
 8008398:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800839a:	7ffb      	ldrb	r3, [r7, #31]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d12a      	bne.n	80083f6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80083b4:	4413      	add	r3, r2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff fb3c 	bl	8007a34 <ld_dword>
 80083bc:	4603      	mov	r3, r0
 80083be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80083c2:	4323      	orrs	r3, r4
 80083c4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80083d4:	4413      	add	r3, r2
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7ff fb69 	bl	8007ab0 <st_dword>
			fs->wflag = 1;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	70da      	strb	r2, [r3, #3]
			break;
 80083e4:	e008      	b.n	80083f8 <put_fat+0x1ce>
		}
	}
 80083e6:	bf00      	nop
 80083e8:	e006      	b.n	80083f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80083ea:	bf00      	nop
 80083ec:	e004      	b.n	80083f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80083ee:	bf00      	nop
 80083f0:	e002      	b.n	80083f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80083f2:	bf00      	nop
 80083f4:	e000      	b.n	80083f8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80083f6:	bf00      	nop
	return res;
 80083f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3724      	adds	r7, #36	; 0x24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd90      	pop	{r4, r7, pc}

08008402 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b088      	sub	sp, #32
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d904      	bls.n	8008428 <remove_chain+0x26>
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	429a      	cmp	r2, r3
 8008426:	d301      	bcc.n	800842c <remove_chain+0x2a>
 8008428:	2302      	movs	r3, #2
 800842a:	e04b      	b.n	80084c4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00c      	beq.n	800844c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008432:	f04f 32ff 	mov.w	r2, #4294967295
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	69b8      	ldr	r0, [r7, #24]
 800843a:	f7ff fef6 	bl	800822a <put_fat>
 800843e:	4603      	mov	r3, r0
 8008440:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008442:	7ffb      	ldrb	r3, [r7, #31]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <remove_chain+0x4a>
 8008448:	7ffb      	ldrb	r3, [r7, #31]
 800844a:	e03b      	b.n	80084c4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff fe43 	bl	80080da <get_fat>
 8008454:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d031      	beq.n	80084c0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <remove_chain+0x64>
 8008462:	2302      	movs	r3, #2
 8008464:	e02e      	b.n	80084c4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846c:	d101      	bne.n	8008472 <remove_chain+0x70>
 800846e:	2301      	movs	r3, #1
 8008470:	e028      	b.n	80084c4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008472:	2200      	movs	r2, #0
 8008474:	68b9      	ldr	r1, [r7, #8]
 8008476:	69b8      	ldr	r0, [r7, #24]
 8008478:	f7ff fed7 	bl	800822a <put_fat>
 800847c:	4603      	mov	r3, r0
 800847e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008480:	7ffb      	ldrb	r3, [r7, #31]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <remove_chain+0x88>
 8008486:	7ffb      	ldrb	r3, [r7, #31]
 8008488:	e01c      	b.n	80084c4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	691a      	ldr	r2, [r3, #16]
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	3b02      	subs	r3, #2
 8008494:	429a      	cmp	r2, r3
 8008496:	d20b      	bcs.n	80084b0 <remove_chain+0xae>
			fs->free_clst++;
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	791b      	ldrb	r3, [r3, #4]
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	b2da      	uxtb	r2, r3
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d3c6      	bcc.n	800844c <remove_chain+0x4a>
 80084be:	e000      	b.n	80084c2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80084c0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3720      	adds	r7, #32
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10d      	bne.n	80084fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d004      	beq.n	80084f8 <create_chain+0x2c>
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	69ba      	ldr	r2, [r7, #24]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d31b      	bcc.n	8008530 <create_chain+0x64>
 80084f8:	2301      	movs	r3, #1
 80084fa:	61bb      	str	r3, [r7, #24]
 80084fc:	e018      	b.n	8008530 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7ff fdea 	bl	80080da <get_fat>
 8008506:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d801      	bhi.n	8008512 <create_chain+0x46>
 800850e:	2301      	movs	r3, #1
 8008510:	e070      	b.n	80085f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008518:	d101      	bne.n	800851e <create_chain+0x52>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	e06a      	b.n	80085f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	429a      	cmp	r2, r3
 8008526:	d201      	bcs.n	800852c <create_chain+0x60>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	e063      	b.n	80085f4 <create_chain+0x128>
		scl = clst;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	3301      	adds	r3, #1
 8008538:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	69fa      	ldr	r2, [r7, #28]
 8008540:	429a      	cmp	r2, r3
 8008542:	d307      	bcc.n	8008554 <create_chain+0x88>
				ncl = 2;
 8008544:	2302      	movs	r3, #2
 8008546:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008548:	69fa      	ldr	r2, [r7, #28]
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	429a      	cmp	r2, r3
 800854e:	d901      	bls.n	8008554 <create_chain+0x88>
 8008550:	2300      	movs	r3, #0
 8008552:	e04f      	b.n	80085f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008554:	69f9      	ldr	r1, [r7, #28]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff fdbf 	bl	80080da <get_fat>
 800855c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00e      	beq.n	8008582 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d003      	beq.n	8008572 <create_chain+0xa6>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008570:	d101      	bne.n	8008576 <create_chain+0xaa>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	e03e      	b.n	80085f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	429a      	cmp	r2, r3
 800857c:	d1da      	bne.n	8008534 <create_chain+0x68>
 800857e:	2300      	movs	r3, #0
 8008580:	e038      	b.n	80085f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008582:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008584:	f04f 32ff 	mov.w	r2, #4294967295
 8008588:	69f9      	ldr	r1, [r7, #28]
 800858a:	6938      	ldr	r0, [r7, #16]
 800858c:	f7ff fe4d 	bl	800822a <put_fat>
 8008590:	4603      	mov	r3, r0
 8008592:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008594:	7dfb      	ldrb	r3, [r7, #23]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d109      	bne.n	80085ae <create_chain+0xe2>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d006      	beq.n	80085ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	6938      	ldr	r0, [r7, #16]
 80085a6:	f7ff fe40 	bl	800822a <put_fat>
 80085aa:	4603      	mov	r3, r0
 80085ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d116      	bne.n	80085e2 <create_chain+0x116>
		fs->last_clst = ncl;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	691a      	ldr	r2, [r3, #16]
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	695b      	ldr	r3, [r3, #20]
 80085c2:	3b02      	subs	r3, #2
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d804      	bhi.n	80085d2 <create_chain+0x106>
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	1e5a      	subs	r2, r3, #1
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	791b      	ldrb	r3, [r3, #4]
 80085d6:	f043 0301 	orr.w	r3, r3, #1
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	711a      	strb	r2, [r3, #4]
 80085e0:	e007      	b.n	80085f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80085e2:	7dfb      	ldrb	r3, [r7, #23]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d102      	bne.n	80085ee <create_chain+0x122>
 80085e8:	f04f 33ff 	mov.w	r3, #4294967295
 80085ec:	e000      	b.n	80085f0 <create_chain+0x124>
 80085ee:	2301      	movs	r3, #1
 80085f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80085f2:	69fb      	ldr	r3, [r7, #28]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3720      	adds	r7, #32
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008610:	3304      	adds	r3, #4
 8008612:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	0a5b      	lsrs	r3, r3, #9
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	8952      	ldrh	r2, [r2, #10]
 800861c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008620:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	1d1a      	adds	r2, r3, #4
 8008626:	613a      	str	r2, [r7, #16]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <clmt_clust+0x3a>
 8008632:	2300      	movs	r3, #0
 8008634:	e010      	b.n	8008658 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	429a      	cmp	r2, r3
 800863c:	d307      	bcc.n	800864e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	3304      	adds	r3, #4
 800864a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800864c:	e7e9      	b.n	8008622 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800864e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	4413      	add	r3, r2
}
 8008658:	4618      	mov	r0, r3
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800867a:	d204      	bcs.n	8008686 <dir_sdi+0x22>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008686:	2302      	movs	r3, #2
 8008688:	e063      	b.n	8008752 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d106      	bne.n	80086aa <dir_sdi+0x46>
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d902      	bls.n	80086aa <dir_sdi+0x46>
		clst = fs->dirbase;
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10c      	bne.n	80086ca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	693a      	ldr	r2, [r7, #16]
 80086b6:	8912      	ldrh	r2, [r2, #8]
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d301      	bcc.n	80086c0 <dir_sdi+0x5c>
 80086bc:	2302      	movs	r3, #2
 80086be:	e048      	b.n	8008752 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	61da      	str	r2, [r3, #28]
 80086c8:	e029      	b.n	800871e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	895b      	ldrh	r3, [r3, #10]
 80086ce:	025b      	lsls	r3, r3, #9
 80086d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80086d2:	e019      	b.n	8008708 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6979      	ldr	r1, [r7, #20]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff fcfe 	bl	80080da <get_fat>
 80086de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e6:	d101      	bne.n	80086ec <dir_sdi+0x88>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e032      	b.n	8008752 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d904      	bls.n	80086fc <dir_sdi+0x98>
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d301      	bcc.n	8008700 <dir_sdi+0x9c>
 80086fc:	2302      	movs	r3, #2
 80086fe:	e028      	b.n	8008752 <dir_sdi+0xee>
			ofs -= csz;
 8008700:	683a      	ldr	r2, [r7, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	429a      	cmp	r2, r3
 800870e:	d2e1      	bcs.n	80086d4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008710:	6979      	ldr	r1, [r7, #20]
 8008712:	6938      	ldr	r0, [r7, #16]
 8008714:	f7ff fcc2 	bl	800809c <clust2sect>
 8008718:	4602      	mov	r2, r0
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <dir_sdi+0xcc>
 800872c:	2302      	movs	r3, #2
 800872e:	e010      	b.n	8008752 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	69da      	ldr	r2, [r3, #28]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	0a5b      	lsrs	r3, r3, #9
 8008738:	441a      	add	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874a:	441a      	add	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3718      	adds	r7, #24
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b086      	sub	sp, #24
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	3320      	adds	r3, #32
 8008770:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <dir_next+0x28>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008780:	d301      	bcc.n	8008786 <dir_next+0x2c>
 8008782:	2304      	movs	r3, #4
 8008784:	e0aa      	b.n	80088dc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878c:	2b00      	cmp	r3, #0
 800878e:	f040 8098 	bne.w	80088c2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	1c5a      	adds	r2, r3, #1
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d10b      	bne.n	80087bc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	095b      	lsrs	r3, r3, #5
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	8912      	ldrh	r2, [r2, #8]
 80087ac:	4293      	cmp	r3, r2
 80087ae:	f0c0 8088 	bcc.w	80088c2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	61da      	str	r2, [r3, #28]
 80087b8:	2304      	movs	r3, #4
 80087ba:	e08f      	b.n	80088dc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	0a5b      	lsrs	r3, r3, #9
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	8952      	ldrh	r2, [r2, #10]
 80087c4:	3a01      	subs	r2, #1
 80087c6:	4013      	ands	r3, r2
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d17a      	bne.n	80088c2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	4619      	mov	r1, r3
 80087d4:	4610      	mov	r0, r2
 80087d6:	f7ff fc80 	bl	80080da <get_fat>
 80087da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d801      	bhi.n	80087e6 <dir_next+0x8c>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e07a      	b.n	80088dc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ec:	d101      	bne.n	80087f2 <dir_next+0x98>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e074      	b.n	80088dc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d358      	bcc.n	80088ae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d104      	bne.n	800880c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	61da      	str	r2, [r3, #28]
 8008808:	2304      	movs	r3, #4
 800880a:	e067      	b.n	80088dc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	4619      	mov	r1, r3
 8008814:	4610      	mov	r0, r2
 8008816:	f7ff fe59 	bl	80084cc <create_chain>
 800881a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <dir_next+0xcc>
 8008822:	2307      	movs	r3, #7
 8008824:	e05a      	b.n	80088dc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <dir_next+0xd6>
 800882c:	2302      	movs	r3, #2
 800882e:	e055      	b.n	80088dc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008836:	d101      	bne.n	800883c <dir_next+0xe2>
 8008838:	2301      	movs	r3, #1
 800883a:	e04f      	b.n	80088dc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff fb4d 	bl	8007edc <sync_window>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <dir_next+0xf2>
 8008848:	2301      	movs	r3, #1
 800884a:	e047      	b.n	80088dc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3330      	adds	r3, #48	; 0x30
 8008850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008854:	2100      	movs	r1, #0
 8008856:	4618      	mov	r0, r3
 8008858:	f7ff f977 	bl	8007b4a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800885c:	2300      	movs	r3, #0
 800885e:	613b      	str	r3, [r7, #16]
 8008860:	6979      	ldr	r1, [r7, #20]
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7ff fc1a 	bl	800809c <clust2sect>
 8008868:	4602      	mov	r2, r0
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	62da      	str	r2, [r3, #44]	; 0x2c
 800886e:	e012      	b.n	8008896 <dir_next+0x13c>
						fs->wflag = 1;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2201      	movs	r2, #1
 8008874:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff fb30 	bl	8007edc <sync_window>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <dir_next+0x12c>
 8008882:	2301      	movs	r3, #1
 8008884:	e02a      	b.n	80088dc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	3301      	adds	r3, #1
 800888a:	613b      	str	r3, [r7, #16]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	62da      	str	r2, [r3, #44]	; 0x2c
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	895b      	ldrh	r3, [r3, #10]
 800889a:	461a      	mov	r2, r3
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	4293      	cmp	r3, r2
 80088a0:	d3e6      	bcc.n	8008870 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad2      	subs	r2, r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80088b4:	6979      	ldr	r1, [r7, #20]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f7ff fbf0 	bl	800809c <clust2sect>
 80088bc:	4602      	mov	r2, r0
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d4:	441a      	add	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80088f4:	2100      	movs	r1, #0
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff feb4 	bl	8008664 <dir_sdi>
 80088fc:	4603      	mov	r3, r0
 80088fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d12b      	bne.n	800895e <dir_alloc+0x7a>
		n = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69db      	ldr	r3, [r3, #28]
 800890e:	4619      	mov	r1, r3
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f7ff fb27 	bl	8007f64 <move_window>
 8008916:	4603      	mov	r3, r0
 8008918:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d11d      	bne.n	800895c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	2be5      	cmp	r3, #229	; 0xe5
 8008928:	d004      	beq.n	8008934 <dir_alloc+0x50>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d107      	bne.n	8008944 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	3301      	adds	r3, #1
 8008938:	613b      	str	r3, [r7, #16]
 800893a:	693a      	ldr	r2, [r7, #16]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d102      	bne.n	8008948 <dir_alloc+0x64>
 8008942:	e00c      	b.n	800895e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008944:	2300      	movs	r3, #0
 8008946:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008948:	2101      	movs	r1, #1
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff ff05 	bl	800875a <dir_next>
 8008950:	4603      	mov	r3, r0
 8008952:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008954:	7dfb      	ldrb	r3, [r7, #23]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0d7      	beq.n	800890a <dir_alloc+0x26>
 800895a:	e000      	b.n	800895e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800895c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	2b04      	cmp	r3, #4
 8008962:	d101      	bne.n	8008968 <dir_alloc+0x84>
 8008964:	2307      	movs	r3, #7
 8008966:	75fb      	strb	r3, [r7, #23]
	return res;
 8008968:	7dfb      	ldrb	r3, [r7, #23]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	331a      	adds	r3, #26
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff f83f 	bl	8007a04 <ld_word>
 8008986:	4603      	mov	r3, r0
 8008988:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	2b03      	cmp	r3, #3
 8008990:	d109      	bne.n	80089a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	3314      	adds	r3, #20
 8008996:	4618      	mov	r0, r3
 8008998:	f7ff f834 	bl	8007a04 <ld_word>
 800899c:	4603      	mov	r3, r0
 800899e:	041b      	lsls	r3, r3, #16
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80089a6:	68fb      	ldr	r3, [r7, #12]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	331a      	adds	r3, #26
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	b292      	uxth	r2, r2
 80089c4:	4611      	mov	r1, r2
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff f857 	bl	8007a7a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	2b03      	cmp	r3, #3
 80089d2:	d109      	bne.n	80089e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f103 0214 	add.w	r2, r3, #20
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	0c1b      	lsrs	r3, r3, #16
 80089de:	b29b      	uxth	r3, r3
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f7ff f849 	bl	8007a7a <st_word>
	}
}
 80089e8:	bf00      	nop
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80089fe:	2100      	movs	r1, #0
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f7ff fe2f 	bl	8008664 <dir_sdi>
 8008a06:	4603      	mov	r3, r0
 8008a08:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008a0a:	7dfb      	ldrb	r3, [r7, #23]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <dir_find+0x24>
 8008a10:	7dfb      	ldrb	r3, [r7, #23]
 8008a12:	e03e      	b.n	8008a92 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6938      	ldr	r0, [r7, #16]
 8008a1c:	f7ff faa2 	bl	8007f64 <move_window>
 8008a20:	4603      	mov	r3, r0
 8008a22:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d12f      	bne.n	8008a8a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <dir_find+0x4e>
 8008a38:	2304      	movs	r3, #4
 8008a3a:	75fb      	strb	r3, [r7, #23]
 8008a3c:	e028      	b.n	8008a90 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	330b      	adds	r3, #11
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	330b      	adds	r3, #11
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <dir_find+0x86>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a18      	ldr	r0, [r3, #32]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3324      	adds	r3, #36	; 0x24
 8008a68:	220b      	movs	r2, #11
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	f7ff f888 	bl	8007b80 <mem_cmp>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00b      	beq.n	8008a8e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008a76:	2100      	movs	r1, #0
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7ff fe6e 	bl	800875a <dir_next>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d0c5      	beq.n	8008a14 <dir_find+0x24>
 8008a88:	e002      	b.n	8008a90 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008a8a:	bf00      	nop
 8008a8c:	e000      	b.n	8008a90 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008a8e:	bf00      	nop

	return res;
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff ff1a 	bl	80088e4 <dir_alloc>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d11c      	bne.n	8008af4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	68b8      	ldr	r0, [r7, #8]
 8008ac2:	f7ff fa4f 	bl	8007f64 <move_window>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d111      	bne.n	8008af4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7ff f836 	bl	8007b4a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a18      	ldr	r0, [r3, #32]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3324      	adds	r3, #36	; 0x24
 8008ae6:	220b      	movs	r2, #11
 8008ae8:	4619      	mov	r1, r3
 8008aea:	f7ff f80d 	bl	8007b08 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2201      	movs	r2, #1
 8008af2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
	...

08008b00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b088      	sub	sp, #32
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	3324      	adds	r3, #36	; 0x24
 8008b14:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008b16:	220b      	movs	r2, #11
 8008b18:	2120      	movs	r1, #32
 8008b1a:	68b8      	ldr	r0, [r7, #8]
 8008b1c:	f7ff f815 	bl	8007b4a <mem_set>
	si = i = 0; ni = 8;
 8008b20:	2300      	movs	r3, #0
 8008b22:	613b      	str	r3, [r7, #16]
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	61fb      	str	r3, [r7, #28]
 8008b28:	2308      	movs	r3, #8
 8008b2a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	61fa      	str	r2, [r7, #28]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008b3a:	7efb      	ldrb	r3, [r7, #27]
 8008b3c:	2b20      	cmp	r3, #32
 8008b3e:	d94e      	bls.n	8008bde <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008b40:	7efb      	ldrb	r3, [r7, #27]
 8008b42:	2b2f      	cmp	r3, #47	; 0x2f
 8008b44:	d006      	beq.n	8008b54 <create_name+0x54>
 8008b46:	7efb      	ldrb	r3, [r7, #27]
 8008b48:	2b5c      	cmp	r3, #92	; 0x5c
 8008b4a:	d110      	bne.n	8008b6e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008b4c:	e002      	b.n	8008b54 <create_name+0x54>
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	3301      	adds	r3, #1
 8008b52:	61fb      	str	r3, [r7, #28]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	4413      	add	r3, r2
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b2f      	cmp	r3, #47	; 0x2f
 8008b5e:	d0f6      	beq.n	8008b4e <create_name+0x4e>
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	4413      	add	r3, r2
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b5c      	cmp	r3, #92	; 0x5c
 8008b6a:	d0f0      	beq.n	8008b4e <create_name+0x4e>
			break;
 8008b6c:	e038      	b.n	8008be0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008b6e:	7efb      	ldrb	r3, [r7, #27]
 8008b70:	2b2e      	cmp	r3, #46	; 0x2e
 8008b72:	d003      	beq.n	8008b7c <create_name+0x7c>
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d30c      	bcc.n	8008b96 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2b0b      	cmp	r3, #11
 8008b80:	d002      	beq.n	8008b88 <create_name+0x88>
 8008b82:	7efb      	ldrb	r3, [r7, #27]
 8008b84:	2b2e      	cmp	r3, #46	; 0x2e
 8008b86:	d001      	beq.n	8008b8c <create_name+0x8c>
 8008b88:	2306      	movs	r3, #6
 8008b8a:	e044      	b.n	8008c16 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008b8c:	2308      	movs	r3, #8
 8008b8e:	613b      	str	r3, [r7, #16]
 8008b90:	230b      	movs	r3, #11
 8008b92:	617b      	str	r3, [r7, #20]
			continue;
 8008b94:	e022      	b.n	8008bdc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008b96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	da04      	bge.n	8008ba8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008b9e:	7efb      	ldrb	r3, [r7, #27]
 8008ba0:	3b80      	subs	r3, #128	; 0x80
 8008ba2:	4a1f      	ldr	r2, [pc, #124]	; (8008c20 <create_name+0x120>)
 8008ba4:	5cd3      	ldrb	r3, [r2, r3]
 8008ba6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008ba8:	7efb      	ldrb	r3, [r7, #27]
 8008baa:	4619      	mov	r1, r3
 8008bac:	481d      	ldr	r0, [pc, #116]	; (8008c24 <create_name+0x124>)
 8008bae:	f7ff f80e 	bl	8007bce <chk_chr>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <create_name+0xbc>
 8008bb8:	2306      	movs	r3, #6
 8008bba:	e02c      	b.n	8008c16 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008bbc:	7efb      	ldrb	r3, [r7, #27]
 8008bbe:	2b60      	cmp	r3, #96	; 0x60
 8008bc0:	d905      	bls.n	8008bce <create_name+0xce>
 8008bc2:	7efb      	ldrb	r3, [r7, #27]
 8008bc4:	2b7a      	cmp	r3, #122	; 0x7a
 8008bc6:	d802      	bhi.n	8008bce <create_name+0xce>
 8008bc8:	7efb      	ldrb	r3, [r7, #27]
 8008bca:	3b20      	subs	r3, #32
 8008bcc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	613a      	str	r2, [r7, #16]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	7efa      	ldrb	r2, [r7, #27]
 8008bda:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008bdc:	e7a6      	b.n	8008b2c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008bde:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	441a      	add	r2, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <create_name+0xf4>
 8008bf0:	2306      	movs	r3, #6
 8008bf2:	e010      	b.n	8008c16 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2be5      	cmp	r3, #229	; 0xe5
 8008bfa:	d102      	bne.n	8008c02 <create_name+0x102>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2205      	movs	r2, #5
 8008c00:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008c02:	7efb      	ldrb	r3, [r7, #27]
 8008c04:	2b20      	cmp	r3, #32
 8008c06:	d801      	bhi.n	8008c0c <create_name+0x10c>
 8008c08:	2204      	movs	r2, #4
 8008c0a:	e000      	b.n	8008c0e <create_name+0x10e>
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	330b      	adds	r3, #11
 8008c12:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008c14:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	08014680 	.word	0x08014680
 8008c24:	0800b118 	.word	0x0800b118

08008c28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008c3c:	e002      	b.n	8008c44 <follow_path+0x1c>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	3301      	adds	r3, #1
 8008c42:	603b      	str	r3, [r7, #0]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b2f      	cmp	r3, #47	; 0x2f
 8008c4a:	d0f8      	beq.n	8008c3e <follow_path+0x16>
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2b5c      	cmp	r3, #92	; 0x5c
 8008c52:	d0f4      	beq.n	8008c3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2200      	movs	r2, #0
 8008c58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	2b1f      	cmp	r3, #31
 8008c60:	d80a      	bhi.n	8008c78 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2280      	movs	r2, #128	; 0x80
 8008c66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff fcf9 	bl	8008664 <dir_sdi>
 8008c72:	4603      	mov	r3, r0
 8008c74:	75fb      	strb	r3, [r7, #23]
 8008c76:	e043      	b.n	8008d00 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008c78:	463b      	mov	r3, r7
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7ff ff3f 	bl	8008b00 <create_name>
 8008c82:	4603      	mov	r3, r0
 8008c84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008c86:	7dfb      	ldrb	r3, [r7, #23]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d134      	bne.n	8008cf6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff feaf 	bl	80089f0 <dir_find>
 8008c92:	4603      	mov	r3, r0
 8008c94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008c9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00a      	beq.n	8008cba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008ca4:	7dfb      	ldrb	r3, [r7, #23]
 8008ca6:	2b04      	cmp	r3, #4
 8008ca8:	d127      	bne.n	8008cfa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008caa:	7afb      	ldrb	r3, [r7, #11]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d122      	bne.n	8008cfa <follow_path+0xd2>
 8008cb4:	2305      	movs	r3, #5
 8008cb6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008cb8:	e01f      	b.n	8008cfa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008cba:	7afb      	ldrb	r3, [r7, #11]
 8008cbc:	f003 0304 	and.w	r3, r3, #4
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d11c      	bne.n	8008cfe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	799b      	ldrb	r3, [r3, #6]
 8008cc8:	f003 0310 	and.w	r3, r3, #16
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d102      	bne.n	8008cd6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008cd0:	2305      	movs	r3, #5
 8008cd2:	75fb      	strb	r3, [r7, #23]
 8008cd4:	e014      	b.n	8008d00 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ce4:	4413      	add	r3, r2
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff fe42 	bl	8008972 <ld_clust>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008cf4:	e7c0      	b.n	8008c78 <follow_path+0x50>
			if (res != FR_OK) break;
 8008cf6:	bf00      	nop
 8008cf8:	e002      	b.n	8008d00 <follow_path+0xd8>
				break;
 8008cfa:	bf00      	nop
 8008cfc:	e000      	b.n	8008d00 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008cfe:	bf00      	nop
			}
		}
	}

	return res;
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b087      	sub	sp, #28
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008d12:	f04f 33ff 	mov.w	r3, #4294967295
 8008d16:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d031      	beq.n	8008d84 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	617b      	str	r3, [r7, #20]
 8008d26:	e002      	b.n	8008d2e <get_ldnumber+0x24>
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	617b      	str	r3, [r7, #20]
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	d903      	bls.n	8008d3e <get_ldnumber+0x34>
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	2b3a      	cmp	r3, #58	; 0x3a
 8008d3c:	d1f4      	bne.n	8008d28 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	2b3a      	cmp	r3, #58	; 0x3a
 8008d44:	d11c      	bne.n	8008d80 <get_ldnumber+0x76>
			tp = *path;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	1c5a      	adds	r2, r3, #1
 8008d50:	60fa      	str	r2, [r7, #12]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	3b30      	subs	r3, #48	; 0x30
 8008d56:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2b09      	cmp	r3, #9
 8008d5c:	d80e      	bhi.n	8008d7c <get_ldnumber+0x72>
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d10a      	bne.n	8008d7c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d107      	bne.n	8008d7c <get_ldnumber+0x72>
					vol = (int)i;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	3301      	adds	r3, #1
 8008d74:	617b      	str	r3, [r7, #20]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	e002      	b.n	8008d86 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008d80:	2300      	movs	r3, #0
 8008d82:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008d84:	693b      	ldr	r3, [r7, #16]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	371c      	adds	r7, #28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
	...

08008d94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	70da      	strb	r2, [r3, #3]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f04f 32ff 	mov.w	r2, #4294967295
 8008daa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008dac:	6839      	ldr	r1, [r7, #0]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff f8d8 	bl	8007f64 <move_window>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <check_fs+0x2a>
 8008dba:	2304      	movs	r3, #4
 8008dbc:	e038      	b.n	8008e30 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3330      	adds	r3, #48	; 0x30
 8008dc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7fe fe1c 	bl	8007a04 <ld_word>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d001      	beq.n	8008ddc <check_fs+0x48>
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e029      	b.n	8008e30 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008de2:	2be9      	cmp	r3, #233	; 0xe9
 8008de4:	d009      	beq.n	8008dfa <check_fs+0x66>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008dec:	2beb      	cmp	r3, #235	; 0xeb
 8008dee:	d11e      	bne.n	8008e2e <check_fs+0x9a>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008df6:	2b90      	cmp	r3, #144	; 0x90
 8008df8:	d119      	bne.n	8008e2e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	3330      	adds	r3, #48	; 0x30
 8008dfe:	3336      	adds	r3, #54	; 0x36
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fe fe17 	bl	8007a34 <ld_dword>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e0c:	4a0a      	ldr	r2, [pc, #40]	; (8008e38 <check_fs+0xa4>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d101      	bne.n	8008e16 <check_fs+0x82>
 8008e12:	2300      	movs	r3, #0
 8008e14:	e00c      	b.n	8008e30 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3330      	adds	r3, #48	; 0x30
 8008e1a:	3352      	adds	r3, #82	; 0x52
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fe09 	bl	8007a34 <ld_dword>
 8008e22:	4603      	mov	r3, r0
 8008e24:	4a05      	ldr	r2, [pc, #20]	; (8008e3c <check_fs+0xa8>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d101      	bne.n	8008e2e <check_fs+0x9a>
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	e000      	b.n	8008e30 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008e2e:	2302      	movs	r3, #2
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	00544146 	.word	0x00544146
 8008e3c:	33544146 	.word	0x33544146

08008e40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b096      	sub	sp, #88	; 0x58
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f7ff ff58 	bl	8008d0a <get_ldnumber>
 8008e5a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	da01      	bge.n	8008e66 <find_volume+0x26>
 8008e62:	230b      	movs	r3, #11
 8008e64:	e22d      	b.n	80092c2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008e66:	4aa1      	ldr	r2, [pc, #644]	; (80090ec <find_volume+0x2ac>)
 8008e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e6e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d101      	bne.n	8008e7a <find_volume+0x3a>
 8008e76:	230c      	movs	r3, #12
 8008e78:	e223      	b.n	80092c2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e7e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	f023 0301 	bic.w	r3, r3, #1
 8008e86:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d01a      	beq.n	8008ec6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	785b      	ldrb	r3, [r3, #1]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fe fd17 	bl	80078c8 <disk_status>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d10c      	bne.n	8008ec6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008eac:	79fb      	ldrb	r3, [r7, #7]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d007      	beq.n	8008ec2 <find_volume+0x82>
 8008eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008eb6:	f003 0304 	and.w	r3, r3, #4
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008ebe:	230a      	movs	r3, #10
 8008ec0:	e1ff      	b.n	80092c2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e1fd      	b.n	80092c2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	2200      	movs	r2, #0
 8008eca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	785b      	ldrb	r3, [r3, #1]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fe fd0f 	bl	80078fc <disk_initialize>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	e1e6      	b.n	80092c2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d007      	beq.n	8008f0a <find_volume+0xca>
 8008efa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008efe:	f003 0304 	and.w	r3, r3, #4
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008f06:	230a      	movs	r3, #10
 8008f08:	e1db      	b.n	80092c2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008f0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f12:	f7ff ff3f 	bl	8008d94 <check_fs>
 8008f16:	4603      	mov	r3, r0
 8008f18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d149      	bne.n	8008fb8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f24:	2300      	movs	r3, #0
 8008f26:	643b      	str	r3, [r7, #64]	; 0x40
 8008f28:	e01e      	b.n	8008f68 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f32:	011b      	lsls	r3, r3, #4
 8008f34:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008f38:	4413      	add	r3, r2
 8008f3a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	3304      	adds	r3, #4
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d006      	beq.n	8008f54 <find_volume+0x114>
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	3308      	adds	r3, #8
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7fe fd72 	bl	8007a34 <ld_dword>
 8008f50:	4602      	mov	r2, r0
 8008f52:	e000      	b.n	8008f56 <find_volume+0x116>
 8008f54:	2200      	movs	r2, #0
 8008f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	3358      	adds	r3, #88	; 0x58
 8008f5c:	443b      	add	r3, r7
 8008f5e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f64:	3301      	adds	r3, #1
 8008f66:	643b      	str	r3, [r7, #64]	; 0x40
 8008f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d9dd      	bls.n	8008f2a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008f6e:	2300      	movs	r3, #0
 8008f70:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <find_volume+0x13e>
 8008f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	3358      	adds	r3, #88	; 0x58
 8008f84:	443b      	add	r3, r7
 8008f86:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008f8a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d005      	beq.n	8008f9e <find_volume+0x15e>
 8008f92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f96:	f7ff fefd 	bl	8008d94 <check_fs>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	e000      	b.n	8008fa0 <find_volume+0x160>
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008fa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d905      	bls.n	8008fb8 <find_volume+0x178>
 8008fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fae:	3301      	adds	r3, #1
 8008fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8008fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d9e2      	bls.n	8008f7e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	d101      	bne.n	8008fc4 <find_volume+0x184>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e17e      	b.n	80092c2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d901      	bls.n	8008fd0 <find_volume+0x190>
 8008fcc:	230d      	movs	r3, #13
 8008fce:	e178      	b.n	80092c2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd2:	3330      	adds	r3, #48	; 0x30
 8008fd4:	330b      	adds	r3, #11
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fd14 	bl	8007a04 <ld_word>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fe2:	d001      	beq.n	8008fe8 <find_volume+0x1a8>
 8008fe4:	230d      	movs	r3, #13
 8008fe6:	e16c      	b.n	80092c2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	3330      	adds	r3, #48	; 0x30
 8008fec:	3316      	adds	r3, #22
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fe fd08 	bl	8007a04 <ld_word>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d106      	bne.n	800900c <find_volume+0x1cc>
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	3330      	adds	r3, #48	; 0x30
 8009002:	3324      	adds	r3, #36	; 0x24
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe fd15 	bl	8007a34 <ld_dword>
 800900a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800900c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009010:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009014:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901e:	789b      	ldrb	r3, [r3, #2]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d005      	beq.n	8009030 <find_volume+0x1f0>
 8009024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009026:	789b      	ldrb	r3, [r3, #2]
 8009028:	2b02      	cmp	r3, #2
 800902a:	d001      	beq.n	8009030 <find_volume+0x1f0>
 800902c:	230d      	movs	r3, #13
 800902e:	e148      	b.n	80092c2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009032:	789b      	ldrb	r3, [r3, #2]
 8009034:	461a      	mov	r2, r3
 8009036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009038:	fb02 f303 	mul.w	r3, r2, r3
 800903c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800903e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009044:	b29a      	uxth	r2, r3
 8009046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009048:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	895b      	ldrh	r3, [r3, #10]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d008      	beq.n	8009064 <find_volume+0x224>
 8009052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009054:	895b      	ldrh	r3, [r3, #10]
 8009056:	461a      	mov	r2, r3
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	895b      	ldrh	r3, [r3, #10]
 800905c:	3b01      	subs	r3, #1
 800905e:	4013      	ands	r3, r2
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <find_volume+0x228>
 8009064:	230d      	movs	r3, #13
 8009066:	e12c      	b.n	80092c2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906a:	3330      	adds	r3, #48	; 0x30
 800906c:	3311      	adds	r3, #17
 800906e:	4618      	mov	r0, r3
 8009070:	f7fe fcc8 	bl	8007a04 <ld_word>
 8009074:	4603      	mov	r3, r0
 8009076:	461a      	mov	r2, r3
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	891b      	ldrh	r3, [r3, #8]
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	b29b      	uxth	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <find_volume+0x24e>
 800908a:	230d      	movs	r3, #13
 800908c:	e119      	b.n	80092c2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	3330      	adds	r3, #48	; 0x30
 8009092:	3313      	adds	r3, #19
 8009094:	4618      	mov	r0, r3
 8009096:	f7fe fcb5 	bl	8007a04 <ld_word>
 800909a:	4603      	mov	r3, r0
 800909c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800909e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d106      	bne.n	80090b2 <find_volume+0x272>
 80090a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a6:	3330      	adds	r3, #48	; 0x30
 80090a8:	3320      	adds	r3, #32
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe fcc2 	bl	8007a34 <ld_dword>
 80090b0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80090b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b4:	3330      	adds	r3, #48	; 0x30
 80090b6:	330e      	adds	r3, #14
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fca3 	bl	8007a04 <ld_word>
 80090be:	4603      	mov	r3, r0
 80090c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80090c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d101      	bne.n	80090cc <find_volume+0x28c>
 80090c8:	230d      	movs	r3, #13
 80090ca:	e0fa      	b.n	80092c2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80090cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090d0:	4413      	add	r3, r2
 80090d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090d4:	8912      	ldrh	r2, [r2, #8]
 80090d6:	0912      	lsrs	r2, r2, #4
 80090d8:	b292      	uxth	r2, r2
 80090da:	4413      	add	r3, r2
 80090dc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80090de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d204      	bcs.n	80090f0 <find_volume+0x2b0>
 80090e6:	230d      	movs	r3, #13
 80090e8:	e0eb      	b.n	80092c2 <find_volume+0x482>
 80090ea:	bf00      	nop
 80090ec:	20013d20 	.word	0x20013d20
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80090f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090f8:	8952      	ldrh	r2, [r2, #10]
 80090fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <find_volume+0x2ca>
 8009106:	230d      	movs	r3, #13
 8009108:	e0db      	b.n	80092c2 <find_volume+0x482>
		fmt = FS_FAT32;
 800910a:	2303      	movs	r3, #3
 800910c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009116:	4293      	cmp	r3, r2
 8009118:	d802      	bhi.n	8009120 <find_volume+0x2e0>
 800911a:	2302      	movs	r3, #2
 800911c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009126:	4293      	cmp	r3, r2
 8009128:	d802      	bhi.n	8009130 <find_volume+0x2f0>
 800912a:	2301      	movs	r3, #1
 800912c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	1c9a      	adds	r2, r3, #2
 8009134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009136:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800913c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800913e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009142:	441a      	add	r2, r3
 8009144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009146:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009148:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	441a      	add	r2, r3
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009152:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009156:	2b03      	cmp	r3, #3
 8009158:	d11e      	bne.n	8009198 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	3330      	adds	r3, #48	; 0x30
 800915e:	332a      	adds	r3, #42	; 0x2a
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fc4f 	bl	8007a04 <ld_word>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d001      	beq.n	8009170 <find_volume+0x330>
 800916c:	230d      	movs	r3, #13
 800916e:	e0a8      	b.n	80092c2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009172:	891b      	ldrh	r3, [r3, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <find_volume+0x33c>
 8009178:	230d      	movs	r3, #13
 800917a:	e0a2      	b.n	80092c2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	3330      	adds	r3, #48	; 0x30
 8009180:	332c      	adds	r3, #44	; 0x2c
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe fc56 	bl	8007a34 <ld_dword>
 8009188:	4602      	mov	r2, r0
 800918a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	647b      	str	r3, [r7, #68]	; 0x44
 8009196:	e01f      	b.n	80091d8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	891b      	ldrh	r3, [r3, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <find_volume+0x364>
 80091a0:	230d      	movs	r3, #13
 80091a2:	e08e      	b.n	80092c2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	6a1a      	ldr	r2, [r3, #32]
 80091a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091aa:	441a      	add	r2, r3
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80091b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d103      	bne.n	80091c0 <find_volume+0x380>
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	e00a      	b.n	80091d6 <find_volume+0x396>
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	695a      	ldr	r2, [r3, #20]
 80091c4:	4613      	mov	r3, r2
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	4413      	add	r3, r2
 80091ca:	085a      	lsrs	r2, r3, #1
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80091d6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	699a      	ldr	r2, [r3, #24]
 80091dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091de:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80091e2:	0a5b      	lsrs	r3, r3, #9
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d201      	bcs.n	80091ec <find_volume+0x3ac>
 80091e8:	230d      	movs	r3, #13
 80091ea:	e06a      	b.n	80092c2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80091ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ee:	f04f 32ff 	mov.w	r2, #4294967295
 80091f2:	611a      	str	r2, [r3, #16]
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	691a      	ldr	r2, [r3, #16]
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80091fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fe:	2280      	movs	r2, #128	; 0x80
 8009200:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009202:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009206:	2b03      	cmp	r3, #3
 8009208:	d149      	bne.n	800929e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	3330      	adds	r3, #48	; 0x30
 800920e:	3330      	adds	r3, #48	; 0x30
 8009210:	4618      	mov	r0, r3
 8009212:	f7fe fbf7 	bl	8007a04 <ld_word>
 8009216:	4603      	mov	r3, r0
 8009218:	2b01      	cmp	r3, #1
 800921a:	d140      	bne.n	800929e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800921c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800921e:	3301      	adds	r3, #1
 8009220:	4619      	mov	r1, r3
 8009222:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009224:	f7fe fe9e 	bl	8007f64 <move_window>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d137      	bne.n	800929e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800922e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009230:	2200      	movs	r2, #0
 8009232:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	3330      	adds	r3, #48	; 0x30
 8009238:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe fbe1 	bl	8007a04 <ld_word>
 8009242:	4603      	mov	r3, r0
 8009244:	461a      	mov	r2, r3
 8009246:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800924a:	429a      	cmp	r2, r3
 800924c:	d127      	bne.n	800929e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	3330      	adds	r3, #48	; 0x30
 8009252:	4618      	mov	r0, r3
 8009254:	f7fe fbee 	bl	8007a34 <ld_dword>
 8009258:	4603      	mov	r3, r0
 800925a:	4a1c      	ldr	r2, [pc, #112]	; (80092cc <find_volume+0x48c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d11e      	bne.n	800929e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009262:	3330      	adds	r3, #48	; 0x30
 8009264:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009268:	4618      	mov	r0, r3
 800926a:	f7fe fbe3 	bl	8007a34 <ld_dword>
 800926e:	4603      	mov	r3, r0
 8009270:	4a17      	ldr	r2, [pc, #92]	; (80092d0 <find_volume+0x490>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d113      	bne.n	800929e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	3330      	adds	r3, #48	; 0x30
 800927a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800927e:	4618      	mov	r0, r3
 8009280:	f7fe fbd8 	bl	8007a34 <ld_dword>
 8009284:	4602      	mov	r2, r0
 8009286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009288:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800928a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928c:	3330      	adds	r3, #48	; 0x30
 800928e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe fbce 	bl	8007a34 <ld_dword>
 8009298:	4602      	mov	r2, r0
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80092a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80092a6:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <find_volume+0x494>)
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	3301      	adds	r3, #1
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <find_volume+0x494>)
 80092b0:	801a      	strh	r2, [r3, #0]
 80092b2:	4b08      	ldr	r3, [pc, #32]	; (80092d4 <find_volume+0x494>)
 80092b4:	881a      	ldrh	r2, [r3, #0]
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80092ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092bc:	f7fe fdea 	bl	8007e94 <clear_lock>
#endif
	return FR_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3758      	adds	r7, #88	; 0x58
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	41615252 	.word	0x41615252
 80092d0:	61417272 	.word	0x61417272
 80092d4:	20013d24 	.word	0x20013d24

080092d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80092e2:	2309      	movs	r3, #9
 80092e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d01c      	beq.n	8009326 <validate+0x4e>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d018      	beq.n	8009326 <validate+0x4e>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d013      	beq.n	8009326 <validate+0x4e>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	889a      	ldrh	r2, [r3, #4]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	88db      	ldrh	r3, [r3, #6]
 8009308:	429a      	cmp	r2, r3
 800930a:	d10c      	bne.n	8009326 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	785b      	ldrb	r3, [r3, #1]
 8009312:	4618      	mov	r0, r3
 8009314:	f7fe fad8 	bl	80078c8 <disk_status>
 8009318:	4603      	mov	r3, r0
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	d101      	bne.n	8009326 <validate+0x4e>
			res = FR_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <validate+0x5a>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	e000      	b.n	8009334 <validate+0x5c>
 8009332:	2300      	movs	r3, #0
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	6013      	str	r3, [r2, #0]
	return res;
 8009338:	7bfb      	ldrb	r3, [r7, #15]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
	...

08009344 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009356:	f107 0310 	add.w	r3, r7, #16
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fcd5 	bl	8008d0a <get_ldnumber>
 8009360:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	2b00      	cmp	r3, #0
 8009366:	da01      	bge.n	800936c <f_mount+0x28>
 8009368:	230b      	movs	r3, #11
 800936a:	e02b      	b.n	80093c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800936c:	4a17      	ldr	r2, [pc, #92]	; (80093cc <f_mount+0x88>)
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009374:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d005      	beq.n	8009388 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800937c:	69b8      	ldr	r0, [r7, #24]
 800937e:	f7fe fd89 	bl	8007e94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2200      	movs	r2, #0
 8009386:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	490d      	ldr	r1, [pc, #52]	; (80093cc <f_mount+0x88>)
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <f_mount+0x66>
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d001      	beq.n	80093ae <f_mount+0x6a>
 80093aa:	2300      	movs	r3, #0
 80093ac:	e00a      	b.n	80093c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80093ae:	f107 010c 	add.w	r1, r7, #12
 80093b2:	f107 0308 	add.w	r3, r7, #8
 80093b6:	2200      	movs	r2, #0
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7ff fd41 	bl	8008e40 <find_volume>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	20013d20 	.word	0x20013d20

080093d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b098      	sub	sp, #96	; 0x60
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <f_open+0x18>
 80093e4:	2309      	movs	r3, #9
 80093e6:	e1ad      	b.n	8009744 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80093e8:	79fb      	ldrb	r3, [r7, #7]
 80093ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80093f0:	79fa      	ldrb	r2, [r7, #7]
 80093f2:	f107 0110 	add.w	r1, r7, #16
 80093f6:	f107 0308 	add.w	r3, r7, #8
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff fd20 	bl	8008e40 <find_volume>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009406:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800940a:	2b00      	cmp	r3, #0
 800940c:	f040 8191 	bne.w	8009732 <f_open+0x362>
		dj.obj.fs = fs;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f7ff fc03 	bl	8008c28 <follow_path>
 8009422:	4603      	mov	r3, r0
 8009424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800942c:	2b00      	cmp	r3, #0
 800942e:	d11a      	bne.n	8009466 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009430:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009434:	b25b      	sxtb	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	da03      	bge.n	8009442 <f_open+0x72>
				res = FR_INVALID_NAME;
 800943a:	2306      	movs	r3, #6
 800943c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009440:	e011      	b.n	8009466 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009442:	79fb      	ldrb	r3, [r7, #7]
 8009444:	f023 0301 	bic.w	r3, r3, #1
 8009448:	2b00      	cmp	r3, #0
 800944a:	bf14      	ite	ne
 800944c:	2301      	movne	r3, #1
 800944e:	2300      	moveq	r3, #0
 8009450:	b2db      	uxtb	r3, r3
 8009452:	461a      	mov	r2, r3
 8009454:	f107 0314 	add.w	r3, r7, #20
 8009458:	4611      	mov	r1, r2
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe fbd2 	bl	8007c04 <chk_lock>
 8009460:	4603      	mov	r3, r0
 8009462:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009466:	79fb      	ldrb	r3, [r7, #7]
 8009468:	f003 031c 	and.w	r3, r3, #28
 800946c:	2b00      	cmp	r3, #0
 800946e:	d07f      	beq.n	8009570 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009470:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009474:	2b00      	cmp	r3, #0
 8009476:	d017      	beq.n	80094a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800947c:	2b04      	cmp	r3, #4
 800947e:	d10e      	bne.n	800949e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009480:	f7fe fc1c 	bl	8007cbc <enq_lock>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d006      	beq.n	8009498 <f_open+0xc8>
 800948a:	f107 0314 	add.w	r3, r7, #20
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff fb03 	bl	8008a9a <dir_register>
 8009494:	4603      	mov	r3, r0
 8009496:	e000      	b.n	800949a <f_open+0xca>
 8009498:	2312      	movs	r3, #18
 800949a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	f043 0308 	orr.w	r3, r3, #8
 80094a4:	71fb      	strb	r3, [r7, #7]
 80094a6:	e010      	b.n	80094ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80094a8:	7ebb      	ldrb	r3, [r7, #26]
 80094aa:	f003 0311 	and.w	r3, r3, #17
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <f_open+0xea>
					res = FR_DENIED;
 80094b2:	2307      	movs	r3, #7
 80094b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80094b8:	e007      	b.n	80094ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	f003 0304 	and.w	r3, r3, #4
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <f_open+0xfa>
 80094c4:	2308      	movs	r3, #8
 80094c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80094ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d168      	bne.n	80095a4 <f_open+0x1d4>
 80094d2:	79fb      	ldrb	r3, [r7, #7]
 80094d4:	f003 0308 	and.w	r3, r3, #8
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d063      	beq.n	80095a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80094dc:	f7fd fcb6 	bl	8006e4c <get_fattime>
 80094e0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80094e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e4:	330e      	adds	r3, #14
 80094e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe fae1 	bl	8007ab0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80094ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f0:	3316      	adds	r3, #22
 80094f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe fadb 	bl	8007ab0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80094fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094fc:	330b      	adds	r3, #11
 80094fe:	2220      	movs	r2, #32
 8009500:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009506:	4611      	mov	r1, r2
 8009508:	4618      	mov	r0, r3
 800950a:	f7ff fa32 	bl	8008972 <ld_clust>
 800950e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009514:	2200      	movs	r2, #0
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff fa4a 	bl	80089b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800951c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800951e:	331c      	adds	r3, #28
 8009520:	2100      	movs	r1, #0
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe fac4 	bl	8007ab0 <st_dword>
					fs->wflag = 1;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	2201      	movs	r2, #1
 800952c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800952e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009530:	2b00      	cmp	r3, #0
 8009532:	d037      	beq.n	80095a4 <f_open+0x1d4>
						dw = fs->winsect;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009538:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800953a:	f107 0314 	add.w	r3, r7, #20
 800953e:	2200      	movs	r2, #0
 8009540:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009542:	4618      	mov	r0, r3
 8009544:	f7fe ff5d 	bl	8008402 <remove_chain>
 8009548:	4603      	mov	r3, r0
 800954a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800954e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009552:	2b00      	cmp	r3, #0
 8009554:	d126      	bne.n	80095a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fd02 	bl	8007f64 <move_window>
 8009560:	4603      	mov	r3, r0
 8009562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800956a:	3a01      	subs	r2, #1
 800956c:	60da      	str	r2, [r3, #12]
 800956e:	e019      	b.n	80095a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009570:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009574:	2b00      	cmp	r3, #0
 8009576:	d115      	bne.n	80095a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009578:	7ebb      	ldrb	r3, [r7, #26]
 800957a:	f003 0310 	and.w	r3, r3, #16
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009582:	2304      	movs	r3, #4
 8009584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009588:	e00c      	b.n	80095a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800958a:	79fb      	ldrb	r3, [r7, #7]
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d007      	beq.n	80095a4 <f_open+0x1d4>
 8009594:	7ebb      	ldrb	r3, [r7, #26]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d002      	beq.n	80095a4 <f_open+0x1d4>
						res = FR_DENIED;
 800959e:	2307      	movs	r3, #7
 80095a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80095a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d128      	bne.n	80095fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	f003 0308 	and.w	r3, r3, #8
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80095b6:	79fb      	ldrb	r3, [r7, #7]
 80095b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80095c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	bf14      	ite	ne
 80095d6:	2301      	movne	r3, #1
 80095d8:	2300      	moveq	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	f107 0314 	add.w	r3, r7, #20
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fe fb8b 	bl	8007d00 <inc_lock>
 80095ea:	4602      	mov	r2, r0
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d102      	bne.n	80095fe <f_open+0x22e>
 80095f8:	2302      	movs	r3, #2
 80095fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80095fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009602:	2b00      	cmp	r3, #0
 8009604:	f040 8095 	bne.w	8009732 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800960c:	4611      	mov	r1, r2
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff f9af 	bl	8008972 <ld_clust>
 8009614:	4602      	mov	r2, r0
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800961a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961c:	331c      	adds	r3, #28
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fa08 	bl	8007a34 <ld_dword>
 8009624:	4602      	mov	r2, r0
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009630:	693a      	ldr	r2, [r7, #16]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	88da      	ldrh	r2, [r3, #6]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	79fa      	ldrb	r2, [r7, #7]
 8009642:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3330      	adds	r3, #48	; 0x30
 800965a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800965e:	2100      	movs	r1, #0
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe fa72 	bl	8007b4a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	f003 0320 	and.w	r3, r3, #32
 800966c:	2b00      	cmp	r3, #0
 800966e:	d060      	beq.n	8009732 <f_open+0x362>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d05c      	beq.n	8009732 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	895b      	ldrh	r3, [r3, #10]
 8009684:	025b      	lsls	r3, r3, #9
 8009686:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	657b      	str	r3, [r7, #84]	; 0x54
 8009694:	e016      	b.n	80096c4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fd1d 	bl	80080da <get_fat>
 80096a0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80096a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d802      	bhi.n	80096ae <f_open+0x2de>
 80096a8:	2302      	movs	r3, #2
 80096aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80096ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b4:	d102      	bne.n	80096bc <f_open+0x2ec>
 80096b6:	2301      	movs	r3, #1
 80096b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80096bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	657b      	str	r3, [r7, #84]	; 0x54
 80096c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d103      	bne.n	80096d4 <f_open+0x304>
 80096cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d8e0      	bhi.n	8009696 <f_open+0x2c6>
				}
				fp->clust = clst;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80096da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d127      	bne.n	8009732 <f_open+0x362>
 80096e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d022      	beq.n	8009732 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fe fcd3 	bl	800809c <clust2sect>
 80096f6:	6478      	str	r0, [r7, #68]	; 0x44
 80096f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d103      	bne.n	8009706 <f_open+0x336>
						res = FR_INT_ERR;
 80096fe:	2302      	movs	r3, #2
 8009700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009704:	e015      	b.n	8009732 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009708:	0a5a      	lsrs	r2, r3, #9
 800970a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800970c:	441a      	add	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	7858      	ldrb	r0, [r3, #1]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6a1a      	ldr	r2, [r3, #32]
 8009720:	2301      	movs	r3, #1
 8009722:	f7fe f911 	bl	8007948 <disk_read>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <f_open+0x362>
 800972c:	2301      	movs	r3, #1
 800972e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009736:	2b00      	cmp	r3, #0
 8009738:	d002      	beq.n	8009740 <f_open+0x370>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009744:	4618      	mov	r0, r3
 8009746:	3760      	adds	r7, #96	; 0x60
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08e      	sub	sp, #56	; 0x38
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
 8009758:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f107 0214 	add.w	r2, r7, #20
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff fdb3 	bl	80092d8 <validate>
 8009772:	4603      	mov	r3, r0
 8009774:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009778:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800977c:	2b00      	cmp	r3, #0
 800977e:	d107      	bne.n	8009790 <f_read+0x44>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	7d5b      	ldrb	r3, [r3, #21]
 8009784:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009788:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <f_read+0x4a>
 8009790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009794:	e115      	b.n	80099c2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	7d1b      	ldrb	r3, [r3, #20]
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <f_read+0x5a>
 80097a2:	2307      	movs	r3, #7
 80097a4:	e10d      	b.n	80099c2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	f240 80fe 	bls.w	80099b8 <f_read+0x26c>
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80097c0:	e0fa      	b.n	80099b8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f040 80c6 	bne.w	800995c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	0a5b      	lsrs	r3, r3, #9
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	8952      	ldrh	r2, [r2, #10]
 80097da:	3a01      	subs	r2, #1
 80097dc:	4013      	ands	r3, r2
 80097de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d12f      	bne.n	8009846 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d103      	bne.n	80097f6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	633b      	str	r3, [r7, #48]	; 0x30
 80097f4:	e013      	b.n	800981e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d007      	beq.n	800980e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	4619      	mov	r1, r3
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f7fe fef9 	bl	80085fc <clmt_clust>
 800980a:	6338      	str	r0, [r7, #48]	; 0x30
 800980c:	e007      	b.n	800981e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	69db      	ldr	r3, [r3, #28]
 8009814:	4619      	mov	r1, r3
 8009816:	4610      	mov	r0, r2
 8009818:	f7fe fc5f 	bl	80080da <get_fat>
 800981c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009820:	2b01      	cmp	r3, #1
 8009822:	d804      	bhi.n	800982e <f_read+0xe2>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2202      	movs	r2, #2
 8009828:	755a      	strb	r2, [r3, #21]
 800982a:	2302      	movs	r3, #2
 800982c:	e0c9      	b.n	80099c2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009834:	d104      	bne.n	8009840 <f_read+0xf4>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2201      	movs	r2, #1
 800983a:	755a      	strb	r2, [r3, #21]
 800983c:	2301      	movs	r3, #1
 800983e:	e0c0      	b.n	80099c2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009844:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	4619      	mov	r1, r3
 800984e:	4610      	mov	r0, r2
 8009850:	f7fe fc24 	bl	800809c <clust2sect>
 8009854:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d104      	bne.n	8009866 <f_read+0x11a>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2202      	movs	r2, #2
 8009860:	755a      	strb	r2, [r3, #21]
 8009862:	2302      	movs	r3, #2
 8009864:	e0ad      	b.n	80099c2 <f_read+0x276>
			sect += csect;
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	4413      	add	r3, r2
 800986c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	0a5b      	lsrs	r3, r3, #9
 8009872:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009876:	2b00      	cmp	r3, #0
 8009878:	d039      	beq.n	80098ee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800987a:	69fa      	ldr	r2, [r7, #28]
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	4413      	add	r3, r2
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	8952      	ldrh	r2, [r2, #10]
 8009884:	4293      	cmp	r3, r2
 8009886:	d905      	bls.n	8009894 <f_read+0x148>
					cc = fs->csize - csect;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	895b      	ldrh	r3, [r3, #10]
 800988c:	461a      	mov	r2, r3
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	7858      	ldrb	r0, [r3, #1]
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	69ba      	ldr	r2, [r7, #24]
 800989c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800989e:	f7fe f853 	bl	8007948 <disk_read>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <f_read+0x166>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2201      	movs	r2, #1
 80098ac:	755a      	strb	r2, [r3, #21]
 80098ae:	2301      	movs	r3, #1
 80098b0:	e087      	b.n	80099c2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	7d1b      	ldrb	r3, [r3, #20]
 80098b6:	b25b      	sxtb	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	da14      	bge.n	80098e6 <f_read+0x19a>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6a1a      	ldr	r2, [r3, #32]
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d90d      	bls.n	80098e6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6a1a      	ldr	r2, [r3, #32]
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	025b      	lsls	r3, r3, #9
 80098d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d6:	18d0      	adds	r0, r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3330      	adds	r3, #48	; 0x30
 80098dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098e0:	4619      	mov	r1, r3
 80098e2:	f7fe f911 	bl	8007b08 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	025b      	lsls	r3, r3, #9
 80098ea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80098ec:	e050      	b.n	8009990 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	69ba      	ldr	r2, [r7, #24]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d02e      	beq.n	8009956 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	7d1b      	ldrb	r3, [r3, #20]
 80098fc:	b25b      	sxtb	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	da18      	bge.n	8009934 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	7858      	ldrb	r0, [r3, #1]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6a1a      	ldr	r2, [r3, #32]
 8009910:	2301      	movs	r3, #1
 8009912:	f7fe f839 	bl	8007988 <disk_write>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d004      	beq.n	8009926 <f_read+0x1da>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2201      	movs	r2, #1
 8009920:	755a      	strb	r2, [r3, #21]
 8009922:	2301      	movs	r3, #1
 8009924:	e04d      	b.n	80099c2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	7d1b      	ldrb	r3, [r3, #20]
 800992a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800992e:	b2da      	uxtb	r2, r3
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	7858      	ldrb	r0, [r3, #1]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800993e:	2301      	movs	r3, #1
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	f7fe f801 	bl	8007948 <disk_read>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d004      	beq.n	8009956 <f_read+0x20a>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	755a      	strb	r2, [r3, #21]
 8009952:	2301      	movs	r3, #1
 8009954:	e035      	b.n	80099c2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009964:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009968:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800996a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	429a      	cmp	r2, r3
 8009970:	d901      	bls.n	8009976 <f_read+0x22a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009984:	4413      	add	r3, r2
 8009986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009988:	4619      	mov	r1, r3
 800998a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800998c:	f7fe f8bc 	bl	8007b08 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009994:	4413      	add	r3, r2
 8009996:	627b      	str	r3, [r7, #36]	; 0x24
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	699a      	ldr	r2, [r3, #24]
 800999c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999e:	441a      	add	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	619a      	str	r2, [r3, #24]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	441a      	add	r2, r3
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f47f af01 	bne.w	80097c2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3738      	adds	r7, #56	; 0x38
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b086      	sub	sp, #24
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f107 0208 	add.w	r2, r7, #8
 80099d8:	4611      	mov	r1, r2
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff fc7c 	bl	80092d8 <validate>
 80099e0:	4603      	mov	r3, r0
 80099e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d168      	bne.n	8009abc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	7d1b      	ldrb	r3, [r3, #20]
 80099ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d062      	beq.n	8009abc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	7d1b      	ldrb	r3, [r3, #20]
 80099fa:	b25b      	sxtb	r3, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	da15      	bge.n	8009a2c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	7858      	ldrb	r0, [r3, #1]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a1a      	ldr	r2, [r3, #32]
 8009a0e:	2301      	movs	r3, #1
 8009a10:	f7fd ffba 	bl	8007988 <disk_write>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <f_sync+0x54>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e04f      	b.n	8009abe <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	7d1b      	ldrb	r3, [r3, #20]
 8009a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009a2c:	f7fd fa0e 	bl	8006e4c <get_fattime>
 8009a30:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009a32:	68ba      	ldr	r2, [r7, #8]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	f7fe fa92 	bl	8007f64 <move_window>
 8009a40:	4603      	mov	r3, r0
 8009a42:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009a44:	7dfb      	ldrb	r3, [r7, #23]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d138      	bne.n	8009abc <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	330b      	adds	r3, #11
 8009a54:	781a      	ldrb	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	330b      	adds	r3, #11
 8009a5a:	f042 0220 	orr.w	r2, r2, #32
 8009a5e:	b2d2      	uxtb	r2, r2
 8009a60:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	68f9      	ldr	r1, [r7, #12]
 8009a6e:	f7fe ff9f 	bl	80089b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f103 021c 	add.w	r2, r3, #28
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	f7fe f816 	bl	8007ab0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3316      	adds	r3, #22
 8009a88:	6939      	ldr	r1, [r7, #16]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7fe f810 	bl	8007ab0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3312      	adds	r3, #18
 8009a94:	2100      	movs	r1, #0
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fd ffef 	bl	8007a7a <st_word>
					fs->wflag = 1;
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fe fa8b 	bl	8007fc0 <sync_fs>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	7d1b      	ldrb	r3, [r3, #20]
 8009ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab6:	b2da      	uxtb	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff ff7b 	bl	80099ca <f_sync>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d118      	bne.n	8009b10 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f107 0208 	add.w	r2, r7, #8
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fbf6 	bl	80092d8 <validate>
 8009aec:	4603      	mov	r3, r0
 8009aee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10c      	bne.n	8009b10 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fe f98e 	bl	8007e1c <dec_lock>
 8009b00:	4603      	mov	r3, r0
 8009b02:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d102      	bne.n	8009b10 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3710      	adds	r7, #16
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	4613      	mov	r3, r2
 8009b28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009b32:	4b1f      	ldr	r3, [pc, #124]	; (8009bb0 <FATFS_LinkDriverEx+0x94>)
 8009b34:	7a5b      	ldrb	r3, [r3, #9]
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d131      	bne.n	8009ba0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009b3c:	4b1c      	ldr	r3, [pc, #112]	; (8009bb0 <FATFS_LinkDriverEx+0x94>)
 8009b3e:	7a5b      	ldrb	r3, [r3, #9]
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	461a      	mov	r2, r3
 8009b44:	4b1a      	ldr	r3, [pc, #104]	; (8009bb0 <FATFS_LinkDriverEx+0x94>)
 8009b46:	2100      	movs	r1, #0
 8009b48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009b4a:	4b19      	ldr	r3, [pc, #100]	; (8009bb0 <FATFS_LinkDriverEx+0x94>)
 8009b4c:	7a5b      	ldrb	r3, [r3, #9]
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	4a17      	ldr	r2, [pc, #92]	; (8009bb0 <FATFS_LinkDriverEx+0x94>)
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009b5a:	4b15      	ldr	r3, [pc, #84]	; (8009bb0 <FATFS_LinkDriverEx+0x94>)
 8009b5c:	7a5b      	ldrb	r3, [r3, #9]
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	461a      	mov	r2, r3
 8009b62:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <FATFS_LinkDriverEx+0x94>)
 8009b64:	4413      	add	r3, r2
 8009b66:	79fa      	ldrb	r2, [r7, #7]
 8009b68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009b6a:	4b11      	ldr	r3, [pc, #68]	; (8009bb0 <FATFS_LinkDriverEx+0x94>)
 8009b6c:	7a5b      	ldrb	r3, [r3, #9]
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	b2d1      	uxtb	r1, r2
 8009b74:	4a0e      	ldr	r2, [pc, #56]	; (8009bb0 <FATFS_LinkDriverEx+0x94>)
 8009b76:	7251      	strb	r1, [r2, #9]
 8009b78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009b7a:	7dbb      	ldrb	r3, [r7, #22]
 8009b7c:	3330      	adds	r3, #48	; 0x30
 8009b7e:	b2da      	uxtb	r2, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	3301      	adds	r3, #1
 8009b88:	223a      	movs	r2, #58	; 0x3a
 8009b8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	3302      	adds	r3, #2
 8009b90:	222f      	movs	r2, #47	; 0x2f
 8009b92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	3303      	adds	r3, #3
 8009b98:	2200      	movs	r2, #0
 8009b9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	20013d48 	.word	0x20013d48

08009bb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff ffaa 	bl	8009b1c <FATFS_LinkDriverEx>
 8009bc8:	4603      	mov	r3, r0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
	...

08009bd4 <__errno>:
 8009bd4:	4b01      	ldr	r3, [pc, #4]	; (8009bdc <__errno+0x8>)
 8009bd6:	6818      	ldr	r0, [r3, #0]
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	20000024 	.word	0x20000024

08009be0 <__libc_init_array>:
 8009be0:	b570      	push	{r4, r5, r6, lr}
 8009be2:	4d0d      	ldr	r5, [pc, #52]	; (8009c18 <__libc_init_array+0x38>)
 8009be4:	4c0d      	ldr	r4, [pc, #52]	; (8009c1c <__libc_init_array+0x3c>)
 8009be6:	1b64      	subs	r4, r4, r5
 8009be8:	10a4      	asrs	r4, r4, #2
 8009bea:	2600      	movs	r6, #0
 8009bec:	42a6      	cmp	r6, r4
 8009bee:	d109      	bne.n	8009c04 <__libc_init_array+0x24>
 8009bf0:	4d0b      	ldr	r5, [pc, #44]	; (8009c20 <__libc_init_array+0x40>)
 8009bf2:	4c0c      	ldr	r4, [pc, #48]	; (8009c24 <__libc_init_array+0x44>)
 8009bf4:	f001 f832 	bl	800ac5c <_init>
 8009bf8:	1b64      	subs	r4, r4, r5
 8009bfa:	10a4      	asrs	r4, r4, #2
 8009bfc:	2600      	movs	r6, #0
 8009bfe:	42a6      	cmp	r6, r4
 8009c00:	d105      	bne.n	8009c0e <__libc_init_array+0x2e>
 8009c02:	bd70      	pop	{r4, r5, r6, pc}
 8009c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c08:	4798      	blx	r3
 8009c0a:	3601      	adds	r6, #1
 8009c0c:	e7ee      	b.n	8009bec <__libc_init_array+0xc>
 8009c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c12:	4798      	blx	r3
 8009c14:	3601      	adds	r6, #1
 8009c16:	e7f2      	b.n	8009bfe <__libc_init_array+0x1e>
 8009c18:	080147a0 	.word	0x080147a0
 8009c1c:	080147a0 	.word	0x080147a0
 8009c20:	080147a0 	.word	0x080147a0
 8009c24:	080147a4 	.word	0x080147a4

08009c28 <memcpy>:
 8009c28:	440a      	add	r2, r1
 8009c2a:	4291      	cmp	r1, r2
 8009c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c30:	d100      	bne.n	8009c34 <memcpy+0xc>
 8009c32:	4770      	bx	lr
 8009c34:	b510      	push	{r4, lr}
 8009c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c3e:	4291      	cmp	r1, r2
 8009c40:	d1f9      	bne.n	8009c36 <memcpy+0xe>
 8009c42:	bd10      	pop	{r4, pc}

08009c44 <memset>:
 8009c44:	4402      	add	r2, r0
 8009c46:	4603      	mov	r3, r0
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d100      	bne.n	8009c4e <memset+0xa>
 8009c4c:	4770      	bx	lr
 8009c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c52:	e7f9      	b.n	8009c48 <memset+0x4>

08009c54 <iprintf>:
 8009c54:	b40f      	push	{r0, r1, r2, r3}
 8009c56:	4b0a      	ldr	r3, [pc, #40]	; (8009c80 <iprintf+0x2c>)
 8009c58:	b513      	push	{r0, r1, r4, lr}
 8009c5a:	681c      	ldr	r4, [r3, #0]
 8009c5c:	b124      	cbz	r4, 8009c68 <iprintf+0x14>
 8009c5e:	69a3      	ldr	r3, [r4, #24]
 8009c60:	b913      	cbnz	r3, 8009c68 <iprintf+0x14>
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fa5e 	bl	800a124 <__sinit>
 8009c68:	ab05      	add	r3, sp, #20
 8009c6a:	9a04      	ldr	r2, [sp, #16]
 8009c6c:	68a1      	ldr	r1, [r4, #8]
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 fc67 	bl	800a544 <_vfiprintf_r>
 8009c76:	b002      	add	sp, #8
 8009c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c7c:	b004      	add	sp, #16
 8009c7e:	4770      	bx	lr
 8009c80:	20000024 	.word	0x20000024

08009c84 <_puts_r>:
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	460e      	mov	r6, r1
 8009c88:	4605      	mov	r5, r0
 8009c8a:	b118      	cbz	r0, 8009c94 <_puts_r+0x10>
 8009c8c:	6983      	ldr	r3, [r0, #24]
 8009c8e:	b90b      	cbnz	r3, 8009c94 <_puts_r+0x10>
 8009c90:	f000 fa48 	bl	800a124 <__sinit>
 8009c94:	69ab      	ldr	r3, [r5, #24]
 8009c96:	68ac      	ldr	r4, [r5, #8]
 8009c98:	b913      	cbnz	r3, 8009ca0 <_puts_r+0x1c>
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f000 fa42 	bl	800a124 <__sinit>
 8009ca0:	4b2c      	ldr	r3, [pc, #176]	; (8009d54 <_puts_r+0xd0>)
 8009ca2:	429c      	cmp	r4, r3
 8009ca4:	d120      	bne.n	8009ce8 <_puts_r+0x64>
 8009ca6:	686c      	ldr	r4, [r5, #4]
 8009ca8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009caa:	07db      	lsls	r3, r3, #31
 8009cac:	d405      	bmi.n	8009cba <_puts_r+0x36>
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	0598      	lsls	r0, r3, #22
 8009cb2:	d402      	bmi.n	8009cba <_puts_r+0x36>
 8009cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cb6:	f000 fad3 	bl	800a260 <__retarget_lock_acquire_recursive>
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	0719      	lsls	r1, r3, #28
 8009cbe:	d51d      	bpl.n	8009cfc <_puts_r+0x78>
 8009cc0:	6923      	ldr	r3, [r4, #16]
 8009cc2:	b1db      	cbz	r3, 8009cfc <_puts_r+0x78>
 8009cc4:	3e01      	subs	r6, #1
 8009cc6:	68a3      	ldr	r3, [r4, #8]
 8009cc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	60a3      	str	r3, [r4, #8]
 8009cd0:	bb39      	cbnz	r1, 8009d22 <_puts_r+0x9e>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	da38      	bge.n	8009d48 <_puts_r+0xc4>
 8009cd6:	4622      	mov	r2, r4
 8009cd8:	210a      	movs	r1, #10
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f000 f848 	bl	8009d70 <__swbuf_r>
 8009ce0:	3001      	adds	r0, #1
 8009ce2:	d011      	beq.n	8009d08 <_puts_r+0x84>
 8009ce4:	250a      	movs	r5, #10
 8009ce6:	e011      	b.n	8009d0c <_puts_r+0x88>
 8009ce8:	4b1b      	ldr	r3, [pc, #108]	; (8009d58 <_puts_r+0xd4>)
 8009cea:	429c      	cmp	r4, r3
 8009cec:	d101      	bne.n	8009cf2 <_puts_r+0x6e>
 8009cee:	68ac      	ldr	r4, [r5, #8]
 8009cf0:	e7da      	b.n	8009ca8 <_puts_r+0x24>
 8009cf2:	4b1a      	ldr	r3, [pc, #104]	; (8009d5c <_puts_r+0xd8>)
 8009cf4:	429c      	cmp	r4, r3
 8009cf6:	bf08      	it	eq
 8009cf8:	68ec      	ldreq	r4, [r5, #12]
 8009cfa:	e7d5      	b.n	8009ca8 <_puts_r+0x24>
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f000 f888 	bl	8009e14 <__swsetup_r>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d0dd      	beq.n	8009cc4 <_puts_r+0x40>
 8009d08:	f04f 35ff 	mov.w	r5, #4294967295
 8009d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d0e:	07da      	lsls	r2, r3, #31
 8009d10:	d405      	bmi.n	8009d1e <_puts_r+0x9a>
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	059b      	lsls	r3, r3, #22
 8009d16:	d402      	bmi.n	8009d1e <_puts_r+0x9a>
 8009d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d1a:	f000 faa2 	bl	800a262 <__retarget_lock_release_recursive>
 8009d1e:	4628      	mov	r0, r5
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	da04      	bge.n	8009d30 <_puts_r+0xac>
 8009d26:	69a2      	ldr	r2, [r4, #24]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	dc06      	bgt.n	8009d3a <_puts_r+0xb6>
 8009d2c:	290a      	cmp	r1, #10
 8009d2e:	d004      	beq.n	8009d3a <_puts_r+0xb6>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	1c5a      	adds	r2, r3, #1
 8009d34:	6022      	str	r2, [r4, #0]
 8009d36:	7019      	strb	r1, [r3, #0]
 8009d38:	e7c5      	b.n	8009cc6 <_puts_r+0x42>
 8009d3a:	4622      	mov	r2, r4
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	f000 f817 	bl	8009d70 <__swbuf_r>
 8009d42:	3001      	adds	r0, #1
 8009d44:	d1bf      	bne.n	8009cc6 <_puts_r+0x42>
 8009d46:	e7df      	b.n	8009d08 <_puts_r+0x84>
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	250a      	movs	r5, #10
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	6022      	str	r2, [r4, #0]
 8009d50:	701d      	strb	r5, [r3, #0]
 8009d52:	e7db      	b.n	8009d0c <_puts_r+0x88>
 8009d54:	08014724 	.word	0x08014724
 8009d58:	08014744 	.word	0x08014744
 8009d5c:	08014704 	.word	0x08014704

08009d60 <puts>:
 8009d60:	4b02      	ldr	r3, [pc, #8]	; (8009d6c <puts+0xc>)
 8009d62:	4601      	mov	r1, r0
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	f7ff bf8d 	b.w	8009c84 <_puts_r>
 8009d6a:	bf00      	nop
 8009d6c:	20000024 	.word	0x20000024

08009d70 <__swbuf_r>:
 8009d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d72:	460e      	mov	r6, r1
 8009d74:	4614      	mov	r4, r2
 8009d76:	4605      	mov	r5, r0
 8009d78:	b118      	cbz	r0, 8009d82 <__swbuf_r+0x12>
 8009d7a:	6983      	ldr	r3, [r0, #24]
 8009d7c:	b90b      	cbnz	r3, 8009d82 <__swbuf_r+0x12>
 8009d7e:	f000 f9d1 	bl	800a124 <__sinit>
 8009d82:	4b21      	ldr	r3, [pc, #132]	; (8009e08 <__swbuf_r+0x98>)
 8009d84:	429c      	cmp	r4, r3
 8009d86:	d12b      	bne.n	8009de0 <__swbuf_r+0x70>
 8009d88:	686c      	ldr	r4, [r5, #4]
 8009d8a:	69a3      	ldr	r3, [r4, #24]
 8009d8c:	60a3      	str	r3, [r4, #8]
 8009d8e:	89a3      	ldrh	r3, [r4, #12]
 8009d90:	071a      	lsls	r2, r3, #28
 8009d92:	d52f      	bpl.n	8009df4 <__swbuf_r+0x84>
 8009d94:	6923      	ldr	r3, [r4, #16]
 8009d96:	b36b      	cbz	r3, 8009df4 <__swbuf_r+0x84>
 8009d98:	6923      	ldr	r3, [r4, #16]
 8009d9a:	6820      	ldr	r0, [r4, #0]
 8009d9c:	1ac0      	subs	r0, r0, r3
 8009d9e:	6963      	ldr	r3, [r4, #20]
 8009da0:	b2f6      	uxtb	r6, r6
 8009da2:	4283      	cmp	r3, r0
 8009da4:	4637      	mov	r7, r6
 8009da6:	dc04      	bgt.n	8009db2 <__swbuf_r+0x42>
 8009da8:	4621      	mov	r1, r4
 8009daa:	4628      	mov	r0, r5
 8009dac:	f000 f926 	bl	8009ffc <_fflush_r>
 8009db0:	bb30      	cbnz	r0, 8009e00 <__swbuf_r+0x90>
 8009db2:	68a3      	ldr	r3, [r4, #8]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	60a3      	str	r3, [r4, #8]
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	6022      	str	r2, [r4, #0]
 8009dbe:	701e      	strb	r6, [r3, #0]
 8009dc0:	6963      	ldr	r3, [r4, #20]
 8009dc2:	3001      	adds	r0, #1
 8009dc4:	4283      	cmp	r3, r0
 8009dc6:	d004      	beq.n	8009dd2 <__swbuf_r+0x62>
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	07db      	lsls	r3, r3, #31
 8009dcc:	d506      	bpl.n	8009ddc <__swbuf_r+0x6c>
 8009dce:	2e0a      	cmp	r6, #10
 8009dd0:	d104      	bne.n	8009ddc <__swbuf_r+0x6c>
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	f000 f911 	bl	8009ffc <_fflush_r>
 8009dda:	b988      	cbnz	r0, 8009e00 <__swbuf_r+0x90>
 8009ddc:	4638      	mov	r0, r7
 8009dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009de0:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <__swbuf_r+0x9c>)
 8009de2:	429c      	cmp	r4, r3
 8009de4:	d101      	bne.n	8009dea <__swbuf_r+0x7a>
 8009de6:	68ac      	ldr	r4, [r5, #8]
 8009de8:	e7cf      	b.n	8009d8a <__swbuf_r+0x1a>
 8009dea:	4b09      	ldr	r3, [pc, #36]	; (8009e10 <__swbuf_r+0xa0>)
 8009dec:	429c      	cmp	r4, r3
 8009dee:	bf08      	it	eq
 8009df0:	68ec      	ldreq	r4, [r5, #12]
 8009df2:	e7ca      	b.n	8009d8a <__swbuf_r+0x1a>
 8009df4:	4621      	mov	r1, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 f80c 	bl	8009e14 <__swsetup_r>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d0cb      	beq.n	8009d98 <__swbuf_r+0x28>
 8009e00:	f04f 37ff 	mov.w	r7, #4294967295
 8009e04:	e7ea      	b.n	8009ddc <__swbuf_r+0x6c>
 8009e06:	bf00      	nop
 8009e08:	08014724 	.word	0x08014724
 8009e0c:	08014744 	.word	0x08014744
 8009e10:	08014704 	.word	0x08014704

08009e14 <__swsetup_r>:
 8009e14:	4b32      	ldr	r3, [pc, #200]	; (8009ee0 <__swsetup_r+0xcc>)
 8009e16:	b570      	push	{r4, r5, r6, lr}
 8009e18:	681d      	ldr	r5, [r3, #0]
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460c      	mov	r4, r1
 8009e1e:	b125      	cbz	r5, 8009e2a <__swsetup_r+0x16>
 8009e20:	69ab      	ldr	r3, [r5, #24]
 8009e22:	b913      	cbnz	r3, 8009e2a <__swsetup_r+0x16>
 8009e24:	4628      	mov	r0, r5
 8009e26:	f000 f97d 	bl	800a124 <__sinit>
 8009e2a:	4b2e      	ldr	r3, [pc, #184]	; (8009ee4 <__swsetup_r+0xd0>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	d10f      	bne.n	8009e50 <__swsetup_r+0x3c>
 8009e30:	686c      	ldr	r4, [r5, #4]
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e38:	0719      	lsls	r1, r3, #28
 8009e3a:	d42c      	bmi.n	8009e96 <__swsetup_r+0x82>
 8009e3c:	06dd      	lsls	r5, r3, #27
 8009e3e:	d411      	bmi.n	8009e64 <__swsetup_r+0x50>
 8009e40:	2309      	movs	r3, #9
 8009e42:	6033      	str	r3, [r6, #0]
 8009e44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e48:	81a3      	strh	r3, [r4, #12]
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4e:	e03e      	b.n	8009ece <__swsetup_r+0xba>
 8009e50:	4b25      	ldr	r3, [pc, #148]	; (8009ee8 <__swsetup_r+0xd4>)
 8009e52:	429c      	cmp	r4, r3
 8009e54:	d101      	bne.n	8009e5a <__swsetup_r+0x46>
 8009e56:	68ac      	ldr	r4, [r5, #8]
 8009e58:	e7eb      	b.n	8009e32 <__swsetup_r+0x1e>
 8009e5a:	4b24      	ldr	r3, [pc, #144]	; (8009eec <__swsetup_r+0xd8>)
 8009e5c:	429c      	cmp	r4, r3
 8009e5e:	bf08      	it	eq
 8009e60:	68ec      	ldreq	r4, [r5, #12]
 8009e62:	e7e6      	b.n	8009e32 <__swsetup_r+0x1e>
 8009e64:	0758      	lsls	r0, r3, #29
 8009e66:	d512      	bpl.n	8009e8e <__swsetup_r+0x7a>
 8009e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e6a:	b141      	cbz	r1, 8009e7e <__swsetup_r+0x6a>
 8009e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e70:	4299      	cmp	r1, r3
 8009e72:	d002      	beq.n	8009e7a <__swsetup_r+0x66>
 8009e74:	4630      	mov	r0, r6
 8009e76:	f000 fa5b 	bl	800a330 <_free_r>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e84:	81a3      	strh	r3, [r4, #12]
 8009e86:	2300      	movs	r3, #0
 8009e88:	6063      	str	r3, [r4, #4]
 8009e8a:	6923      	ldr	r3, [r4, #16]
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	f043 0308 	orr.w	r3, r3, #8
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	b94b      	cbnz	r3, 8009eae <__swsetup_r+0x9a>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea4:	d003      	beq.n	8009eae <__swsetup_r+0x9a>
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f000 fa01 	bl	800a2b0 <__smakebuf_r>
 8009eae:	89a0      	ldrh	r0, [r4, #12]
 8009eb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eb4:	f010 0301 	ands.w	r3, r0, #1
 8009eb8:	d00a      	beq.n	8009ed0 <__swsetup_r+0xbc>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60a3      	str	r3, [r4, #8]
 8009ebe:	6963      	ldr	r3, [r4, #20]
 8009ec0:	425b      	negs	r3, r3
 8009ec2:	61a3      	str	r3, [r4, #24]
 8009ec4:	6923      	ldr	r3, [r4, #16]
 8009ec6:	b943      	cbnz	r3, 8009eda <__swsetup_r+0xc6>
 8009ec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ecc:	d1ba      	bne.n	8009e44 <__swsetup_r+0x30>
 8009ece:	bd70      	pop	{r4, r5, r6, pc}
 8009ed0:	0781      	lsls	r1, r0, #30
 8009ed2:	bf58      	it	pl
 8009ed4:	6963      	ldrpl	r3, [r4, #20]
 8009ed6:	60a3      	str	r3, [r4, #8]
 8009ed8:	e7f4      	b.n	8009ec4 <__swsetup_r+0xb0>
 8009eda:	2000      	movs	r0, #0
 8009edc:	e7f7      	b.n	8009ece <__swsetup_r+0xba>
 8009ede:	bf00      	nop
 8009ee0:	20000024 	.word	0x20000024
 8009ee4:	08014724 	.word	0x08014724
 8009ee8:	08014744 	.word	0x08014744
 8009eec:	08014704 	.word	0x08014704

08009ef0 <__sflush_r>:
 8009ef0:	898a      	ldrh	r2, [r1, #12]
 8009ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	0710      	lsls	r0, r2, #28
 8009efa:	460c      	mov	r4, r1
 8009efc:	d458      	bmi.n	8009fb0 <__sflush_r+0xc0>
 8009efe:	684b      	ldr	r3, [r1, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dc05      	bgt.n	8009f10 <__sflush_r+0x20>
 8009f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	dc02      	bgt.n	8009f10 <__sflush_r+0x20>
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f12:	2e00      	cmp	r6, #0
 8009f14:	d0f9      	beq.n	8009f0a <__sflush_r+0x1a>
 8009f16:	2300      	movs	r3, #0
 8009f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f1c:	682f      	ldr	r7, [r5, #0]
 8009f1e:	602b      	str	r3, [r5, #0]
 8009f20:	d032      	beq.n	8009f88 <__sflush_r+0x98>
 8009f22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	075a      	lsls	r2, r3, #29
 8009f28:	d505      	bpl.n	8009f36 <__sflush_r+0x46>
 8009f2a:	6863      	ldr	r3, [r4, #4]
 8009f2c:	1ac0      	subs	r0, r0, r3
 8009f2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f30:	b10b      	cbz	r3, 8009f36 <__sflush_r+0x46>
 8009f32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f34:	1ac0      	subs	r0, r0, r3
 8009f36:	2300      	movs	r3, #0
 8009f38:	4602      	mov	r2, r0
 8009f3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f3c:	6a21      	ldr	r1, [r4, #32]
 8009f3e:	4628      	mov	r0, r5
 8009f40:	47b0      	blx	r6
 8009f42:	1c43      	adds	r3, r0, #1
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	d106      	bne.n	8009f56 <__sflush_r+0x66>
 8009f48:	6829      	ldr	r1, [r5, #0]
 8009f4a:	291d      	cmp	r1, #29
 8009f4c:	d82c      	bhi.n	8009fa8 <__sflush_r+0xb8>
 8009f4e:	4a2a      	ldr	r2, [pc, #168]	; (8009ff8 <__sflush_r+0x108>)
 8009f50:	40ca      	lsrs	r2, r1
 8009f52:	07d6      	lsls	r6, r2, #31
 8009f54:	d528      	bpl.n	8009fa8 <__sflush_r+0xb8>
 8009f56:	2200      	movs	r2, #0
 8009f58:	6062      	str	r2, [r4, #4]
 8009f5a:	04d9      	lsls	r1, r3, #19
 8009f5c:	6922      	ldr	r2, [r4, #16]
 8009f5e:	6022      	str	r2, [r4, #0]
 8009f60:	d504      	bpl.n	8009f6c <__sflush_r+0x7c>
 8009f62:	1c42      	adds	r2, r0, #1
 8009f64:	d101      	bne.n	8009f6a <__sflush_r+0x7a>
 8009f66:	682b      	ldr	r3, [r5, #0]
 8009f68:	b903      	cbnz	r3, 8009f6c <__sflush_r+0x7c>
 8009f6a:	6560      	str	r0, [r4, #84]	; 0x54
 8009f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f6e:	602f      	str	r7, [r5, #0]
 8009f70:	2900      	cmp	r1, #0
 8009f72:	d0ca      	beq.n	8009f0a <__sflush_r+0x1a>
 8009f74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f78:	4299      	cmp	r1, r3
 8009f7a:	d002      	beq.n	8009f82 <__sflush_r+0x92>
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	f000 f9d7 	bl	800a330 <_free_r>
 8009f82:	2000      	movs	r0, #0
 8009f84:	6360      	str	r0, [r4, #52]	; 0x34
 8009f86:	e7c1      	b.n	8009f0c <__sflush_r+0x1c>
 8009f88:	6a21      	ldr	r1, [r4, #32]
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	4628      	mov	r0, r5
 8009f8e:	47b0      	blx	r6
 8009f90:	1c41      	adds	r1, r0, #1
 8009f92:	d1c7      	bne.n	8009f24 <__sflush_r+0x34>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0c4      	beq.n	8009f24 <__sflush_r+0x34>
 8009f9a:	2b1d      	cmp	r3, #29
 8009f9c:	d001      	beq.n	8009fa2 <__sflush_r+0xb2>
 8009f9e:	2b16      	cmp	r3, #22
 8009fa0:	d101      	bne.n	8009fa6 <__sflush_r+0xb6>
 8009fa2:	602f      	str	r7, [r5, #0]
 8009fa4:	e7b1      	b.n	8009f0a <__sflush_r+0x1a>
 8009fa6:	89a3      	ldrh	r3, [r4, #12]
 8009fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fac:	81a3      	strh	r3, [r4, #12]
 8009fae:	e7ad      	b.n	8009f0c <__sflush_r+0x1c>
 8009fb0:	690f      	ldr	r7, [r1, #16]
 8009fb2:	2f00      	cmp	r7, #0
 8009fb4:	d0a9      	beq.n	8009f0a <__sflush_r+0x1a>
 8009fb6:	0793      	lsls	r3, r2, #30
 8009fb8:	680e      	ldr	r6, [r1, #0]
 8009fba:	bf08      	it	eq
 8009fbc:	694b      	ldreq	r3, [r1, #20]
 8009fbe:	600f      	str	r7, [r1, #0]
 8009fc0:	bf18      	it	ne
 8009fc2:	2300      	movne	r3, #0
 8009fc4:	eba6 0807 	sub.w	r8, r6, r7
 8009fc8:	608b      	str	r3, [r1, #8]
 8009fca:	f1b8 0f00 	cmp.w	r8, #0
 8009fce:	dd9c      	ble.n	8009f0a <__sflush_r+0x1a>
 8009fd0:	6a21      	ldr	r1, [r4, #32]
 8009fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fd4:	4643      	mov	r3, r8
 8009fd6:	463a      	mov	r2, r7
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b0      	blx	r6
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	dc06      	bgt.n	8009fee <__sflush_r+0xfe>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fe6:	81a3      	strh	r3, [r4, #12]
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	e78e      	b.n	8009f0c <__sflush_r+0x1c>
 8009fee:	4407      	add	r7, r0
 8009ff0:	eba8 0800 	sub.w	r8, r8, r0
 8009ff4:	e7e9      	b.n	8009fca <__sflush_r+0xda>
 8009ff6:	bf00      	nop
 8009ff8:	20400001 	.word	0x20400001

08009ffc <_fflush_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	690b      	ldr	r3, [r1, #16]
 800a000:	4605      	mov	r5, r0
 800a002:	460c      	mov	r4, r1
 800a004:	b913      	cbnz	r3, 800a00c <_fflush_r+0x10>
 800a006:	2500      	movs	r5, #0
 800a008:	4628      	mov	r0, r5
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	b118      	cbz	r0, 800a016 <_fflush_r+0x1a>
 800a00e:	6983      	ldr	r3, [r0, #24]
 800a010:	b90b      	cbnz	r3, 800a016 <_fflush_r+0x1a>
 800a012:	f000 f887 	bl	800a124 <__sinit>
 800a016:	4b14      	ldr	r3, [pc, #80]	; (800a068 <_fflush_r+0x6c>)
 800a018:	429c      	cmp	r4, r3
 800a01a:	d11b      	bne.n	800a054 <_fflush_r+0x58>
 800a01c:	686c      	ldr	r4, [r5, #4]
 800a01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0ef      	beq.n	800a006 <_fflush_r+0xa>
 800a026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a028:	07d0      	lsls	r0, r2, #31
 800a02a:	d404      	bmi.n	800a036 <_fflush_r+0x3a>
 800a02c:	0599      	lsls	r1, r3, #22
 800a02e:	d402      	bmi.n	800a036 <_fflush_r+0x3a>
 800a030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a032:	f000 f915 	bl	800a260 <__retarget_lock_acquire_recursive>
 800a036:	4628      	mov	r0, r5
 800a038:	4621      	mov	r1, r4
 800a03a:	f7ff ff59 	bl	8009ef0 <__sflush_r>
 800a03e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a040:	07da      	lsls	r2, r3, #31
 800a042:	4605      	mov	r5, r0
 800a044:	d4e0      	bmi.n	800a008 <_fflush_r+0xc>
 800a046:	89a3      	ldrh	r3, [r4, #12]
 800a048:	059b      	lsls	r3, r3, #22
 800a04a:	d4dd      	bmi.n	800a008 <_fflush_r+0xc>
 800a04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a04e:	f000 f908 	bl	800a262 <__retarget_lock_release_recursive>
 800a052:	e7d9      	b.n	800a008 <_fflush_r+0xc>
 800a054:	4b05      	ldr	r3, [pc, #20]	; (800a06c <_fflush_r+0x70>)
 800a056:	429c      	cmp	r4, r3
 800a058:	d101      	bne.n	800a05e <_fflush_r+0x62>
 800a05a:	68ac      	ldr	r4, [r5, #8]
 800a05c:	e7df      	b.n	800a01e <_fflush_r+0x22>
 800a05e:	4b04      	ldr	r3, [pc, #16]	; (800a070 <_fflush_r+0x74>)
 800a060:	429c      	cmp	r4, r3
 800a062:	bf08      	it	eq
 800a064:	68ec      	ldreq	r4, [r5, #12]
 800a066:	e7da      	b.n	800a01e <_fflush_r+0x22>
 800a068:	08014724 	.word	0x08014724
 800a06c:	08014744 	.word	0x08014744
 800a070:	08014704 	.word	0x08014704

0800a074 <std>:
 800a074:	2300      	movs	r3, #0
 800a076:	b510      	push	{r4, lr}
 800a078:	4604      	mov	r4, r0
 800a07a:	e9c0 3300 	strd	r3, r3, [r0]
 800a07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a082:	6083      	str	r3, [r0, #8]
 800a084:	8181      	strh	r1, [r0, #12]
 800a086:	6643      	str	r3, [r0, #100]	; 0x64
 800a088:	81c2      	strh	r2, [r0, #14]
 800a08a:	6183      	str	r3, [r0, #24]
 800a08c:	4619      	mov	r1, r3
 800a08e:	2208      	movs	r2, #8
 800a090:	305c      	adds	r0, #92	; 0x5c
 800a092:	f7ff fdd7 	bl	8009c44 <memset>
 800a096:	4b05      	ldr	r3, [pc, #20]	; (800a0ac <std+0x38>)
 800a098:	6263      	str	r3, [r4, #36]	; 0x24
 800a09a:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <std+0x3c>)
 800a09c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a09e:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <std+0x40>)
 800a0a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0a2:	4b05      	ldr	r3, [pc, #20]	; (800a0b8 <std+0x44>)
 800a0a4:	6224      	str	r4, [r4, #32]
 800a0a6:	6323      	str	r3, [r4, #48]	; 0x30
 800a0a8:	bd10      	pop	{r4, pc}
 800a0aa:	bf00      	nop
 800a0ac:	0800aaed 	.word	0x0800aaed
 800a0b0:	0800ab0f 	.word	0x0800ab0f
 800a0b4:	0800ab47 	.word	0x0800ab47
 800a0b8:	0800ab6b 	.word	0x0800ab6b

0800a0bc <_cleanup_r>:
 800a0bc:	4901      	ldr	r1, [pc, #4]	; (800a0c4 <_cleanup_r+0x8>)
 800a0be:	f000 b8af 	b.w	800a220 <_fwalk_reent>
 800a0c2:	bf00      	nop
 800a0c4:	08009ffd 	.word	0x08009ffd

0800a0c8 <__sfmoreglue>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	2268      	movs	r2, #104	; 0x68
 800a0cc:	1e4d      	subs	r5, r1, #1
 800a0ce:	4355      	muls	r5, r2
 800a0d0:	460e      	mov	r6, r1
 800a0d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0d6:	f000 f997 	bl	800a408 <_malloc_r>
 800a0da:	4604      	mov	r4, r0
 800a0dc:	b140      	cbz	r0, 800a0f0 <__sfmoreglue+0x28>
 800a0de:	2100      	movs	r1, #0
 800a0e0:	e9c0 1600 	strd	r1, r6, [r0]
 800a0e4:	300c      	adds	r0, #12
 800a0e6:	60a0      	str	r0, [r4, #8]
 800a0e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0ec:	f7ff fdaa 	bl	8009c44 <memset>
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	bd70      	pop	{r4, r5, r6, pc}

0800a0f4 <__sfp_lock_acquire>:
 800a0f4:	4801      	ldr	r0, [pc, #4]	; (800a0fc <__sfp_lock_acquire+0x8>)
 800a0f6:	f000 b8b3 	b.w	800a260 <__retarget_lock_acquire_recursive>
 800a0fa:	bf00      	nop
 800a0fc:	20013d55 	.word	0x20013d55

0800a100 <__sfp_lock_release>:
 800a100:	4801      	ldr	r0, [pc, #4]	; (800a108 <__sfp_lock_release+0x8>)
 800a102:	f000 b8ae 	b.w	800a262 <__retarget_lock_release_recursive>
 800a106:	bf00      	nop
 800a108:	20013d55 	.word	0x20013d55

0800a10c <__sinit_lock_acquire>:
 800a10c:	4801      	ldr	r0, [pc, #4]	; (800a114 <__sinit_lock_acquire+0x8>)
 800a10e:	f000 b8a7 	b.w	800a260 <__retarget_lock_acquire_recursive>
 800a112:	bf00      	nop
 800a114:	20013d56 	.word	0x20013d56

0800a118 <__sinit_lock_release>:
 800a118:	4801      	ldr	r0, [pc, #4]	; (800a120 <__sinit_lock_release+0x8>)
 800a11a:	f000 b8a2 	b.w	800a262 <__retarget_lock_release_recursive>
 800a11e:	bf00      	nop
 800a120:	20013d56 	.word	0x20013d56

0800a124 <__sinit>:
 800a124:	b510      	push	{r4, lr}
 800a126:	4604      	mov	r4, r0
 800a128:	f7ff fff0 	bl	800a10c <__sinit_lock_acquire>
 800a12c:	69a3      	ldr	r3, [r4, #24]
 800a12e:	b11b      	cbz	r3, 800a138 <__sinit+0x14>
 800a130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a134:	f7ff bff0 	b.w	800a118 <__sinit_lock_release>
 800a138:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a13c:	6523      	str	r3, [r4, #80]	; 0x50
 800a13e:	4b13      	ldr	r3, [pc, #76]	; (800a18c <__sinit+0x68>)
 800a140:	4a13      	ldr	r2, [pc, #76]	; (800a190 <__sinit+0x6c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	62a2      	str	r2, [r4, #40]	; 0x28
 800a146:	42a3      	cmp	r3, r4
 800a148:	bf04      	itt	eq
 800a14a:	2301      	moveq	r3, #1
 800a14c:	61a3      	streq	r3, [r4, #24]
 800a14e:	4620      	mov	r0, r4
 800a150:	f000 f820 	bl	800a194 <__sfp>
 800a154:	6060      	str	r0, [r4, #4]
 800a156:	4620      	mov	r0, r4
 800a158:	f000 f81c 	bl	800a194 <__sfp>
 800a15c:	60a0      	str	r0, [r4, #8]
 800a15e:	4620      	mov	r0, r4
 800a160:	f000 f818 	bl	800a194 <__sfp>
 800a164:	2200      	movs	r2, #0
 800a166:	60e0      	str	r0, [r4, #12]
 800a168:	2104      	movs	r1, #4
 800a16a:	6860      	ldr	r0, [r4, #4]
 800a16c:	f7ff ff82 	bl	800a074 <std>
 800a170:	68a0      	ldr	r0, [r4, #8]
 800a172:	2201      	movs	r2, #1
 800a174:	2109      	movs	r1, #9
 800a176:	f7ff ff7d 	bl	800a074 <std>
 800a17a:	68e0      	ldr	r0, [r4, #12]
 800a17c:	2202      	movs	r2, #2
 800a17e:	2112      	movs	r1, #18
 800a180:	f7ff ff78 	bl	800a074 <std>
 800a184:	2301      	movs	r3, #1
 800a186:	61a3      	str	r3, [r4, #24]
 800a188:	e7d2      	b.n	800a130 <__sinit+0xc>
 800a18a:	bf00      	nop
 800a18c:	08014700 	.word	0x08014700
 800a190:	0800a0bd 	.word	0x0800a0bd

0800a194 <__sfp>:
 800a194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a196:	4607      	mov	r7, r0
 800a198:	f7ff ffac 	bl	800a0f4 <__sfp_lock_acquire>
 800a19c:	4b1e      	ldr	r3, [pc, #120]	; (800a218 <__sfp+0x84>)
 800a19e:	681e      	ldr	r6, [r3, #0]
 800a1a0:	69b3      	ldr	r3, [r6, #24]
 800a1a2:	b913      	cbnz	r3, 800a1aa <__sfp+0x16>
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7ff ffbd 	bl	800a124 <__sinit>
 800a1aa:	3648      	adds	r6, #72	; 0x48
 800a1ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	d503      	bpl.n	800a1bc <__sfp+0x28>
 800a1b4:	6833      	ldr	r3, [r6, #0]
 800a1b6:	b30b      	cbz	r3, 800a1fc <__sfp+0x68>
 800a1b8:	6836      	ldr	r6, [r6, #0]
 800a1ba:	e7f7      	b.n	800a1ac <__sfp+0x18>
 800a1bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a1c0:	b9d5      	cbnz	r5, 800a1f8 <__sfp+0x64>
 800a1c2:	4b16      	ldr	r3, [pc, #88]	; (800a21c <__sfp+0x88>)
 800a1c4:	60e3      	str	r3, [r4, #12]
 800a1c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1ca:	6665      	str	r5, [r4, #100]	; 0x64
 800a1cc:	f000 f847 	bl	800a25e <__retarget_lock_init_recursive>
 800a1d0:	f7ff ff96 	bl	800a100 <__sfp_lock_release>
 800a1d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a1d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a1dc:	6025      	str	r5, [r4, #0]
 800a1de:	61a5      	str	r5, [r4, #24]
 800a1e0:	2208      	movs	r2, #8
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1e8:	f7ff fd2c 	bl	8009c44 <memset>
 800a1ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1f8:	3468      	adds	r4, #104	; 0x68
 800a1fa:	e7d9      	b.n	800a1b0 <__sfp+0x1c>
 800a1fc:	2104      	movs	r1, #4
 800a1fe:	4638      	mov	r0, r7
 800a200:	f7ff ff62 	bl	800a0c8 <__sfmoreglue>
 800a204:	4604      	mov	r4, r0
 800a206:	6030      	str	r0, [r6, #0]
 800a208:	2800      	cmp	r0, #0
 800a20a:	d1d5      	bne.n	800a1b8 <__sfp+0x24>
 800a20c:	f7ff ff78 	bl	800a100 <__sfp_lock_release>
 800a210:	230c      	movs	r3, #12
 800a212:	603b      	str	r3, [r7, #0]
 800a214:	e7ee      	b.n	800a1f4 <__sfp+0x60>
 800a216:	bf00      	nop
 800a218:	08014700 	.word	0x08014700
 800a21c:	ffff0001 	.word	0xffff0001

0800a220 <_fwalk_reent>:
 800a220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a224:	4606      	mov	r6, r0
 800a226:	4688      	mov	r8, r1
 800a228:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a22c:	2700      	movs	r7, #0
 800a22e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a232:	f1b9 0901 	subs.w	r9, r9, #1
 800a236:	d505      	bpl.n	800a244 <_fwalk_reent+0x24>
 800a238:	6824      	ldr	r4, [r4, #0]
 800a23a:	2c00      	cmp	r4, #0
 800a23c:	d1f7      	bne.n	800a22e <_fwalk_reent+0xe>
 800a23e:	4638      	mov	r0, r7
 800a240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a244:	89ab      	ldrh	r3, [r5, #12]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d907      	bls.n	800a25a <_fwalk_reent+0x3a>
 800a24a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a24e:	3301      	adds	r3, #1
 800a250:	d003      	beq.n	800a25a <_fwalk_reent+0x3a>
 800a252:	4629      	mov	r1, r5
 800a254:	4630      	mov	r0, r6
 800a256:	47c0      	blx	r8
 800a258:	4307      	orrs	r7, r0
 800a25a:	3568      	adds	r5, #104	; 0x68
 800a25c:	e7e9      	b.n	800a232 <_fwalk_reent+0x12>

0800a25e <__retarget_lock_init_recursive>:
 800a25e:	4770      	bx	lr

0800a260 <__retarget_lock_acquire_recursive>:
 800a260:	4770      	bx	lr

0800a262 <__retarget_lock_release_recursive>:
 800a262:	4770      	bx	lr

0800a264 <__swhatbuf_r>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	460e      	mov	r6, r1
 800a268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a26c:	2900      	cmp	r1, #0
 800a26e:	b096      	sub	sp, #88	; 0x58
 800a270:	4614      	mov	r4, r2
 800a272:	461d      	mov	r5, r3
 800a274:	da08      	bge.n	800a288 <__swhatbuf_r+0x24>
 800a276:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	602a      	str	r2, [r5, #0]
 800a27e:	061a      	lsls	r2, r3, #24
 800a280:	d410      	bmi.n	800a2a4 <__swhatbuf_r+0x40>
 800a282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a286:	e00e      	b.n	800a2a6 <__swhatbuf_r+0x42>
 800a288:	466a      	mov	r2, sp
 800a28a:	f000 fc95 	bl	800abb8 <_fstat_r>
 800a28e:	2800      	cmp	r0, #0
 800a290:	dbf1      	blt.n	800a276 <__swhatbuf_r+0x12>
 800a292:	9a01      	ldr	r2, [sp, #4]
 800a294:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a298:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a29c:	425a      	negs	r2, r3
 800a29e:	415a      	adcs	r2, r3
 800a2a0:	602a      	str	r2, [r5, #0]
 800a2a2:	e7ee      	b.n	800a282 <__swhatbuf_r+0x1e>
 800a2a4:	2340      	movs	r3, #64	; 0x40
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	b016      	add	sp, #88	; 0x58
 800a2ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2b0 <__smakebuf_r>:
 800a2b0:	898b      	ldrh	r3, [r1, #12]
 800a2b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2b4:	079d      	lsls	r5, r3, #30
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	d507      	bpl.n	800a2cc <__smakebuf_r+0x1c>
 800a2bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	6123      	str	r3, [r4, #16]
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	6163      	str	r3, [r4, #20]
 800a2c8:	b002      	add	sp, #8
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
 800a2cc:	ab01      	add	r3, sp, #4
 800a2ce:	466a      	mov	r2, sp
 800a2d0:	f7ff ffc8 	bl	800a264 <__swhatbuf_r>
 800a2d4:	9900      	ldr	r1, [sp, #0]
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f000 f895 	bl	800a408 <_malloc_r>
 800a2de:	b948      	cbnz	r0, 800a2f4 <__smakebuf_r+0x44>
 800a2e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e4:	059a      	lsls	r2, r3, #22
 800a2e6:	d4ef      	bmi.n	800a2c8 <__smakebuf_r+0x18>
 800a2e8:	f023 0303 	bic.w	r3, r3, #3
 800a2ec:	f043 0302 	orr.w	r3, r3, #2
 800a2f0:	81a3      	strh	r3, [r4, #12]
 800a2f2:	e7e3      	b.n	800a2bc <__smakebuf_r+0xc>
 800a2f4:	4b0d      	ldr	r3, [pc, #52]	; (800a32c <__smakebuf_r+0x7c>)
 800a2f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2f8:	89a3      	ldrh	r3, [r4, #12]
 800a2fa:	6020      	str	r0, [r4, #0]
 800a2fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a300:	81a3      	strh	r3, [r4, #12]
 800a302:	9b00      	ldr	r3, [sp, #0]
 800a304:	6163      	str	r3, [r4, #20]
 800a306:	9b01      	ldr	r3, [sp, #4]
 800a308:	6120      	str	r0, [r4, #16]
 800a30a:	b15b      	cbz	r3, 800a324 <__smakebuf_r+0x74>
 800a30c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a310:	4630      	mov	r0, r6
 800a312:	f000 fc63 	bl	800abdc <_isatty_r>
 800a316:	b128      	cbz	r0, 800a324 <__smakebuf_r+0x74>
 800a318:	89a3      	ldrh	r3, [r4, #12]
 800a31a:	f023 0303 	bic.w	r3, r3, #3
 800a31e:	f043 0301 	orr.w	r3, r3, #1
 800a322:	81a3      	strh	r3, [r4, #12]
 800a324:	89a0      	ldrh	r0, [r4, #12]
 800a326:	4305      	orrs	r5, r0
 800a328:	81a5      	strh	r5, [r4, #12]
 800a32a:	e7cd      	b.n	800a2c8 <__smakebuf_r+0x18>
 800a32c:	0800a0bd 	.word	0x0800a0bd

0800a330 <_free_r>:
 800a330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a332:	2900      	cmp	r1, #0
 800a334:	d044      	beq.n	800a3c0 <_free_r+0x90>
 800a336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a33a:	9001      	str	r0, [sp, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f1a1 0404 	sub.w	r4, r1, #4
 800a342:	bfb8      	it	lt
 800a344:	18e4      	addlt	r4, r4, r3
 800a346:	f000 fc6b 	bl	800ac20 <__malloc_lock>
 800a34a:	4a1e      	ldr	r2, [pc, #120]	; (800a3c4 <_free_r+0x94>)
 800a34c:	9801      	ldr	r0, [sp, #4]
 800a34e:	6813      	ldr	r3, [r2, #0]
 800a350:	b933      	cbnz	r3, 800a360 <_free_r+0x30>
 800a352:	6063      	str	r3, [r4, #4]
 800a354:	6014      	str	r4, [r2, #0]
 800a356:	b003      	add	sp, #12
 800a358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a35c:	f000 bc66 	b.w	800ac2c <__malloc_unlock>
 800a360:	42a3      	cmp	r3, r4
 800a362:	d908      	bls.n	800a376 <_free_r+0x46>
 800a364:	6825      	ldr	r5, [r4, #0]
 800a366:	1961      	adds	r1, r4, r5
 800a368:	428b      	cmp	r3, r1
 800a36a:	bf01      	itttt	eq
 800a36c:	6819      	ldreq	r1, [r3, #0]
 800a36e:	685b      	ldreq	r3, [r3, #4]
 800a370:	1949      	addeq	r1, r1, r5
 800a372:	6021      	streq	r1, [r4, #0]
 800a374:	e7ed      	b.n	800a352 <_free_r+0x22>
 800a376:	461a      	mov	r2, r3
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	b10b      	cbz	r3, 800a380 <_free_r+0x50>
 800a37c:	42a3      	cmp	r3, r4
 800a37e:	d9fa      	bls.n	800a376 <_free_r+0x46>
 800a380:	6811      	ldr	r1, [r2, #0]
 800a382:	1855      	adds	r5, r2, r1
 800a384:	42a5      	cmp	r5, r4
 800a386:	d10b      	bne.n	800a3a0 <_free_r+0x70>
 800a388:	6824      	ldr	r4, [r4, #0]
 800a38a:	4421      	add	r1, r4
 800a38c:	1854      	adds	r4, r2, r1
 800a38e:	42a3      	cmp	r3, r4
 800a390:	6011      	str	r1, [r2, #0]
 800a392:	d1e0      	bne.n	800a356 <_free_r+0x26>
 800a394:	681c      	ldr	r4, [r3, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	6053      	str	r3, [r2, #4]
 800a39a:	4421      	add	r1, r4
 800a39c:	6011      	str	r1, [r2, #0]
 800a39e:	e7da      	b.n	800a356 <_free_r+0x26>
 800a3a0:	d902      	bls.n	800a3a8 <_free_r+0x78>
 800a3a2:	230c      	movs	r3, #12
 800a3a4:	6003      	str	r3, [r0, #0]
 800a3a6:	e7d6      	b.n	800a356 <_free_r+0x26>
 800a3a8:	6825      	ldr	r5, [r4, #0]
 800a3aa:	1961      	adds	r1, r4, r5
 800a3ac:	428b      	cmp	r3, r1
 800a3ae:	bf04      	itt	eq
 800a3b0:	6819      	ldreq	r1, [r3, #0]
 800a3b2:	685b      	ldreq	r3, [r3, #4]
 800a3b4:	6063      	str	r3, [r4, #4]
 800a3b6:	bf04      	itt	eq
 800a3b8:	1949      	addeq	r1, r1, r5
 800a3ba:	6021      	streq	r1, [r4, #0]
 800a3bc:	6054      	str	r4, [r2, #4]
 800a3be:	e7ca      	b.n	800a356 <_free_r+0x26>
 800a3c0:	b003      	add	sp, #12
 800a3c2:	bd30      	pop	{r4, r5, pc}
 800a3c4:	20013d58 	.word	0x20013d58

0800a3c8 <sbrk_aligned>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	4e0e      	ldr	r6, [pc, #56]	; (800a404 <sbrk_aligned+0x3c>)
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	6831      	ldr	r1, [r6, #0]
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	b911      	cbnz	r1, 800a3da <sbrk_aligned+0x12>
 800a3d4:	f000 fb7a 	bl	800aacc <_sbrk_r>
 800a3d8:	6030      	str	r0, [r6, #0]
 800a3da:	4621      	mov	r1, r4
 800a3dc:	4628      	mov	r0, r5
 800a3de:	f000 fb75 	bl	800aacc <_sbrk_r>
 800a3e2:	1c43      	adds	r3, r0, #1
 800a3e4:	d00a      	beq.n	800a3fc <sbrk_aligned+0x34>
 800a3e6:	1cc4      	adds	r4, r0, #3
 800a3e8:	f024 0403 	bic.w	r4, r4, #3
 800a3ec:	42a0      	cmp	r0, r4
 800a3ee:	d007      	beq.n	800a400 <sbrk_aligned+0x38>
 800a3f0:	1a21      	subs	r1, r4, r0
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f000 fb6a 	bl	800aacc <_sbrk_r>
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	d101      	bne.n	800a400 <sbrk_aligned+0x38>
 800a3fc:	f04f 34ff 	mov.w	r4, #4294967295
 800a400:	4620      	mov	r0, r4
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	20013d5c 	.word	0x20013d5c

0800a408 <_malloc_r>:
 800a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40c:	1ccd      	adds	r5, r1, #3
 800a40e:	f025 0503 	bic.w	r5, r5, #3
 800a412:	3508      	adds	r5, #8
 800a414:	2d0c      	cmp	r5, #12
 800a416:	bf38      	it	cc
 800a418:	250c      	movcc	r5, #12
 800a41a:	2d00      	cmp	r5, #0
 800a41c:	4607      	mov	r7, r0
 800a41e:	db01      	blt.n	800a424 <_malloc_r+0x1c>
 800a420:	42a9      	cmp	r1, r5
 800a422:	d905      	bls.n	800a430 <_malloc_r+0x28>
 800a424:	230c      	movs	r3, #12
 800a426:	603b      	str	r3, [r7, #0]
 800a428:	2600      	movs	r6, #0
 800a42a:	4630      	mov	r0, r6
 800a42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a430:	4e2e      	ldr	r6, [pc, #184]	; (800a4ec <_malloc_r+0xe4>)
 800a432:	f000 fbf5 	bl	800ac20 <__malloc_lock>
 800a436:	6833      	ldr	r3, [r6, #0]
 800a438:	461c      	mov	r4, r3
 800a43a:	bb34      	cbnz	r4, 800a48a <_malloc_r+0x82>
 800a43c:	4629      	mov	r1, r5
 800a43e:	4638      	mov	r0, r7
 800a440:	f7ff ffc2 	bl	800a3c8 <sbrk_aligned>
 800a444:	1c43      	adds	r3, r0, #1
 800a446:	4604      	mov	r4, r0
 800a448:	d14d      	bne.n	800a4e6 <_malloc_r+0xde>
 800a44a:	6834      	ldr	r4, [r6, #0]
 800a44c:	4626      	mov	r6, r4
 800a44e:	2e00      	cmp	r6, #0
 800a450:	d140      	bne.n	800a4d4 <_malloc_r+0xcc>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	4631      	mov	r1, r6
 800a456:	4638      	mov	r0, r7
 800a458:	eb04 0803 	add.w	r8, r4, r3
 800a45c:	f000 fb36 	bl	800aacc <_sbrk_r>
 800a460:	4580      	cmp	r8, r0
 800a462:	d13a      	bne.n	800a4da <_malloc_r+0xd2>
 800a464:	6821      	ldr	r1, [r4, #0]
 800a466:	3503      	adds	r5, #3
 800a468:	1a6d      	subs	r5, r5, r1
 800a46a:	f025 0503 	bic.w	r5, r5, #3
 800a46e:	3508      	adds	r5, #8
 800a470:	2d0c      	cmp	r5, #12
 800a472:	bf38      	it	cc
 800a474:	250c      	movcc	r5, #12
 800a476:	4629      	mov	r1, r5
 800a478:	4638      	mov	r0, r7
 800a47a:	f7ff ffa5 	bl	800a3c8 <sbrk_aligned>
 800a47e:	3001      	adds	r0, #1
 800a480:	d02b      	beq.n	800a4da <_malloc_r+0xd2>
 800a482:	6823      	ldr	r3, [r4, #0]
 800a484:	442b      	add	r3, r5
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	e00e      	b.n	800a4a8 <_malloc_r+0xa0>
 800a48a:	6822      	ldr	r2, [r4, #0]
 800a48c:	1b52      	subs	r2, r2, r5
 800a48e:	d41e      	bmi.n	800a4ce <_malloc_r+0xc6>
 800a490:	2a0b      	cmp	r2, #11
 800a492:	d916      	bls.n	800a4c2 <_malloc_r+0xba>
 800a494:	1961      	adds	r1, r4, r5
 800a496:	42a3      	cmp	r3, r4
 800a498:	6025      	str	r5, [r4, #0]
 800a49a:	bf18      	it	ne
 800a49c:	6059      	strne	r1, [r3, #4]
 800a49e:	6863      	ldr	r3, [r4, #4]
 800a4a0:	bf08      	it	eq
 800a4a2:	6031      	streq	r1, [r6, #0]
 800a4a4:	5162      	str	r2, [r4, r5]
 800a4a6:	604b      	str	r3, [r1, #4]
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f104 060b 	add.w	r6, r4, #11
 800a4ae:	f000 fbbd 	bl	800ac2c <__malloc_unlock>
 800a4b2:	f026 0607 	bic.w	r6, r6, #7
 800a4b6:	1d23      	adds	r3, r4, #4
 800a4b8:	1af2      	subs	r2, r6, r3
 800a4ba:	d0b6      	beq.n	800a42a <_malloc_r+0x22>
 800a4bc:	1b9b      	subs	r3, r3, r6
 800a4be:	50a3      	str	r3, [r4, r2]
 800a4c0:	e7b3      	b.n	800a42a <_malloc_r+0x22>
 800a4c2:	6862      	ldr	r2, [r4, #4]
 800a4c4:	42a3      	cmp	r3, r4
 800a4c6:	bf0c      	ite	eq
 800a4c8:	6032      	streq	r2, [r6, #0]
 800a4ca:	605a      	strne	r2, [r3, #4]
 800a4cc:	e7ec      	b.n	800a4a8 <_malloc_r+0xa0>
 800a4ce:	4623      	mov	r3, r4
 800a4d0:	6864      	ldr	r4, [r4, #4]
 800a4d2:	e7b2      	b.n	800a43a <_malloc_r+0x32>
 800a4d4:	4634      	mov	r4, r6
 800a4d6:	6876      	ldr	r6, [r6, #4]
 800a4d8:	e7b9      	b.n	800a44e <_malloc_r+0x46>
 800a4da:	230c      	movs	r3, #12
 800a4dc:	603b      	str	r3, [r7, #0]
 800a4de:	4638      	mov	r0, r7
 800a4e0:	f000 fba4 	bl	800ac2c <__malloc_unlock>
 800a4e4:	e7a1      	b.n	800a42a <_malloc_r+0x22>
 800a4e6:	6025      	str	r5, [r4, #0]
 800a4e8:	e7de      	b.n	800a4a8 <_malloc_r+0xa0>
 800a4ea:	bf00      	nop
 800a4ec:	20013d58 	.word	0x20013d58

0800a4f0 <__sfputc_r>:
 800a4f0:	6893      	ldr	r3, [r2, #8]
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	b410      	push	{r4}
 800a4f8:	6093      	str	r3, [r2, #8]
 800a4fa:	da08      	bge.n	800a50e <__sfputc_r+0x1e>
 800a4fc:	6994      	ldr	r4, [r2, #24]
 800a4fe:	42a3      	cmp	r3, r4
 800a500:	db01      	blt.n	800a506 <__sfputc_r+0x16>
 800a502:	290a      	cmp	r1, #10
 800a504:	d103      	bne.n	800a50e <__sfputc_r+0x1e>
 800a506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a50a:	f7ff bc31 	b.w	8009d70 <__swbuf_r>
 800a50e:	6813      	ldr	r3, [r2, #0]
 800a510:	1c58      	adds	r0, r3, #1
 800a512:	6010      	str	r0, [r2, #0]
 800a514:	7019      	strb	r1, [r3, #0]
 800a516:	4608      	mov	r0, r1
 800a518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <__sfputs_r>:
 800a51e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a520:	4606      	mov	r6, r0
 800a522:	460f      	mov	r7, r1
 800a524:	4614      	mov	r4, r2
 800a526:	18d5      	adds	r5, r2, r3
 800a528:	42ac      	cmp	r4, r5
 800a52a:	d101      	bne.n	800a530 <__sfputs_r+0x12>
 800a52c:	2000      	movs	r0, #0
 800a52e:	e007      	b.n	800a540 <__sfputs_r+0x22>
 800a530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a534:	463a      	mov	r2, r7
 800a536:	4630      	mov	r0, r6
 800a538:	f7ff ffda 	bl	800a4f0 <__sfputc_r>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d1f3      	bne.n	800a528 <__sfputs_r+0xa>
 800a540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a544 <_vfiprintf_r>:
 800a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	460d      	mov	r5, r1
 800a54a:	b09d      	sub	sp, #116	; 0x74
 800a54c:	4614      	mov	r4, r2
 800a54e:	4698      	mov	r8, r3
 800a550:	4606      	mov	r6, r0
 800a552:	b118      	cbz	r0, 800a55c <_vfiprintf_r+0x18>
 800a554:	6983      	ldr	r3, [r0, #24]
 800a556:	b90b      	cbnz	r3, 800a55c <_vfiprintf_r+0x18>
 800a558:	f7ff fde4 	bl	800a124 <__sinit>
 800a55c:	4b89      	ldr	r3, [pc, #548]	; (800a784 <_vfiprintf_r+0x240>)
 800a55e:	429d      	cmp	r5, r3
 800a560:	d11b      	bne.n	800a59a <_vfiprintf_r+0x56>
 800a562:	6875      	ldr	r5, [r6, #4]
 800a564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a566:	07d9      	lsls	r1, r3, #31
 800a568:	d405      	bmi.n	800a576 <_vfiprintf_r+0x32>
 800a56a:	89ab      	ldrh	r3, [r5, #12]
 800a56c:	059a      	lsls	r2, r3, #22
 800a56e:	d402      	bmi.n	800a576 <_vfiprintf_r+0x32>
 800a570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a572:	f7ff fe75 	bl	800a260 <__retarget_lock_acquire_recursive>
 800a576:	89ab      	ldrh	r3, [r5, #12]
 800a578:	071b      	lsls	r3, r3, #28
 800a57a:	d501      	bpl.n	800a580 <_vfiprintf_r+0x3c>
 800a57c:	692b      	ldr	r3, [r5, #16]
 800a57e:	b9eb      	cbnz	r3, 800a5bc <_vfiprintf_r+0x78>
 800a580:	4629      	mov	r1, r5
 800a582:	4630      	mov	r0, r6
 800a584:	f7ff fc46 	bl	8009e14 <__swsetup_r>
 800a588:	b1c0      	cbz	r0, 800a5bc <_vfiprintf_r+0x78>
 800a58a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a58c:	07dc      	lsls	r4, r3, #31
 800a58e:	d50e      	bpl.n	800a5ae <_vfiprintf_r+0x6a>
 800a590:	f04f 30ff 	mov.w	r0, #4294967295
 800a594:	b01d      	add	sp, #116	; 0x74
 800a596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59a:	4b7b      	ldr	r3, [pc, #492]	; (800a788 <_vfiprintf_r+0x244>)
 800a59c:	429d      	cmp	r5, r3
 800a59e:	d101      	bne.n	800a5a4 <_vfiprintf_r+0x60>
 800a5a0:	68b5      	ldr	r5, [r6, #8]
 800a5a2:	e7df      	b.n	800a564 <_vfiprintf_r+0x20>
 800a5a4:	4b79      	ldr	r3, [pc, #484]	; (800a78c <_vfiprintf_r+0x248>)
 800a5a6:	429d      	cmp	r5, r3
 800a5a8:	bf08      	it	eq
 800a5aa:	68f5      	ldreq	r5, [r6, #12]
 800a5ac:	e7da      	b.n	800a564 <_vfiprintf_r+0x20>
 800a5ae:	89ab      	ldrh	r3, [r5, #12]
 800a5b0:	0598      	lsls	r0, r3, #22
 800a5b2:	d4ed      	bmi.n	800a590 <_vfiprintf_r+0x4c>
 800a5b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5b6:	f7ff fe54 	bl	800a262 <__retarget_lock_release_recursive>
 800a5ba:	e7e9      	b.n	800a590 <_vfiprintf_r+0x4c>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c0:	2320      	movs	r3, #32
 800a5c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5ca:	2330      	movs	r3, #48	; 0x30
 800a5cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a790 <_vfiprintf_r+0x24c>
 800a5d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5d4:	f04f 0901 	mov.w	r9, #1
 800a5d8:	4623      	mov	r3, r4
 800a5da:	469a      	mov	sl, r3
 800a5dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e0:	b10a      	cbz	r2, 800a5e6 <_vfiprintf_r+0xa2>
 800a5e2:	2a25      	cmp	r2, #37	; 0x25
 800a5e4:	d1f9      	bne.n	800a5da <_vfiprintf_r+0x96>
 800a5e6:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ea:	d00b      	beq.n	800a604 <_vfiprintf_r+0xc0>
 800a5ec:	465b      	mov	r3, fp
 800a5ee:	4622      	mov	r2, r4
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7ff ff93 	bl	800a51e <__sfputs_r>
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	f000 80aa 	beq.w	800a752 <_vfiprintf_r+0x20e>
 800a5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a600:	445a      	add	r2, fp
 800a602:	9209      	str	r2, [sp, #36]	; 0x24
 800a604:	f89a 3000 	ldrb.w	r3, [sl]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80a2 	beq.w	800a752 <_vfiprintf_r+0x20e>
 800a60e:	2300      	movs	r3, #0
 800a610:	f04f 32ff 	mov.w	r2, #4294967295
 800a614:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a618:	f10a 0a01 	add.w	sl, sl, #1
 800a61c:	9304      	str	r3, [sp, #16]
 800a61e:	9307      	str	r3, [sp, #28]
 800a620:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a624:	931a      	str	r3, [sp, #104]	; 0x68
 800a626:	4654      	mov	r4, sl
 800a628:	2205      	movs	r2, #5
 800a62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a62e:	4858      	ldr	r0, [pc, #352]	; (800a790 <_vfiprintf_r+0x24c>)
 800a630:	f7f5 fde6 	bl	8000200 <memchr>
 800a634:	9a04      	ldr	r2, [sp, #16]
 800a636:	b9d8      	cbnz	r0, 800a670 <_vfiprintf_r+0x12c>
 800a638:	06d1      	lsls	r1, r2, #27
 800a63a:	bf44      	itt	mi
 800a63c:	2320      	movmi	r3, #32
 800a63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a642:	0713      	lsls	r3, r2, #28
 800a644:	bf44      	itt	mi
 800a646:	232b      	movmi	r3, #43	; 0x2b
 800a648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a64c:	f89a 3000 	ldrb.w	r3, [sl]
 800a650:	2b2a      	cmp	r3, #42	; 0x2a
 800a652:	d015      	beq.n	800a680 <_vfiprintf_r+0x13c>
 800a654:	9a07      	ldr	r2, [sp, #28]
 800a656:	4654      	mov	r4, sl
 800a658:	2000      	movs	r0, #0
 800a65a:	f04f 0c0a 	mov.w	ip, #10
 800a65e:	4621      	mov	r1, r4
 800a660:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a664:	3b30      	subs	r3, #48	; 0x30
 800a666:	2b09      	cmp	r3, #9
 800a668:	d94e      	bls.n	800a708 <_vfiprintf_r+0x1c4>
 800a66a:	b1b0      	cbz	r0, 800a69a <_vfiprintf_r+0x156>
 800a66c:	9207      	str	r2, [sp, #28]
 800a66e:	e014      	b.n	800a69a <_vfiprintf_r+0x156>
 800a670:	eba0 0308 	sub.w	r3, r0, r8
 800a674:	fa09 f303 	lsl.w	r3, r9, r3
 800a678:	4313      	orrs	r3, r2
 800a67a:	9304      	str	r3, [sp, #16]
 800a67c:	46a2      	mov	sl, r4
 800a67e:	e7d2      	b.n	800a626 <_vfiprintf_r+0xe2>
 800a680:	9b03      	ldr	r3, [sp, #12]
 800a682:	1d19      	adds	r1, r3, #4
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	9103      	str	r1, [sp, #12]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	bfbb      	ittet	lt
 800a68c:	425b      	neglt	r3, r3
 800a68e:	f042 0202 	orrlt.w	r2, r2, #2
 800a692:	9307      	strge	r3, [sp, #28]
 800a694:	9307      	strlt	r3, [sp, #28]
 800a696:	bfb8      	it	lt
 800a698:	9204      	strlt	r2, [sp, #16]
 800a69a:	7823      	ldrb	r3, [r4, #0]
 800a69c:	2b2e      	cmp	r3, #46	; 0x2e
 800a69e:	d10c      	bne.n	800a6ba <_vfiprintf_r+0x176>
 800a6a0:	7863      	ldrb	r3, [r4, #1]
 800a6a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a4:	d135      	bne.n	800a712 <_vfiprintf_r+0x1ce>
 800a6a6:	9b03      	ldr	r3, [sp, #12]
 800a6a8:	1d1a      	adds	r2, r3, #4
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	9203      	str	r2, [sp, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	bfb8      	it	lt
 800a6b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6b6:	3402      	adds	r4, #2
 800a6b8:	9305      	str	r3, [sp, #20]
 800a6ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a7a0 <_vfiprintf_r+0x25c>
 800a6be:	7821      	ldrb	r1, [r4, #0]
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	f7f5 fd9c 	bl	8000200 <memchr>
 800a6c8:	b140      	cbz	r0, 800a6dc <_vfiprintf_r+0x198>
 800a6ca:	2340      	movs	r3, #64	; 0x40
 800a6cc:	eba0 000a 	sub.w	r0, r0, sl
 800a6d0:	fa03 f000 	lsl.w	r0, r3, r0
 800a6d4:	9b04      	ldr	r3, [sp, #16]
 800a6d6:	4303      	orrs	r3, r0
 800a6d8:	3401      	adds	r4, #1
 800a6da:	9304      	str	r3, [sp, #16]
 800a6dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e0:	482c      	ldr	r0, [pc, #176]	; (800a794 <_vfiprintf_r+0x250>)
 800a6e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6e6:	2206      	movs	r2, #6
 800a6e8:	f7f5 fd8a 	bl	8000200 <memchr>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d03f      	beq.n	800a770 <_vfiprintf_r+0x22c>
 800a6f0:	4b29      	ldr	r3, [pc, #164]	; (800a798 <_vfiprintf_r+0x254>)
 800a6f2:	bb1b      	cbnz	r3, 800a73c <_vfiprintf_r+0x1f8>
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	3307      	adds	r3, #7
 800a6f8:	f023 0307 	bic.w	r3, r3, #7
 800a6fc:	3308      	adds	r3, #8
 800a6fe:	9303      	str	r3, [sp, #12]
 800a700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a702:	443b      	add	r3, r7
 800a704:	9309      	str	r3, [sp, #36]	; 0x24
 800a706:	e767      	b.n	800a5d8 <_vfiprintf_r+0x94>
 800a708:	fb0c 3202 	mla	r2, ip, r2, r3
 800a70c:	460c      	mov	r4, r1
 800a70e:	2001      	movs	r0, #1
 800a710:	e7a5      	b.n	800a65e <_vfiprintf_r+0x11a>
 800a712:	2300      	movs	r3, #0
 800a714:	3401      	adds	r4, #1
 800a716:	9305      	str	r3, [sp, #20]
 800a718:	4619      	mov	r1, r3
 800a71a:	f04f 0c0a 	mov.w	ip, #10
 800a71e:	4620      	mov	r0, r4
 800a720:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a724:	3a30      	subs	r2, #48	; 0x30
 800a726:	2a09      	cmp	r2, #9
 800a728:	d903      	bls.n	800a732 <_vfiprintf_r+0x1ee>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0c5      	beq.n	800a6ba <_vfiprintf_r+0x176>
 800a72e:	9105      	str	r1, [sp, #20]
 800a730:	e7c3      	b.n	800a6ba <_vfiprintf_r+0x176>
 800a732:	fb0c 2101 	mla	r1, ip, r1, r2
 800a736:	4604      	mov	r4, r0
 800a738:	2301      	movs	r3, #1
 800a73a:	e7f0      	b.n	800a71e <_vfiprintf_r+0x1da>
 800a73c:	ab03      	add	r3, sp, #12
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	462a      	mov	r2, r5
 800a742:	4b16      	ldr	r3, [pc, #88]	; (800a79c <_vfiprintf_r+0x258>)
 800a744:	a904      	add	r1, sp, #16
 800a746:	4630      	mov	r0, r6
 800a748:	f3af 8000 	nop.w
 800a74c:	4607      	mov	r7, r0
 800a74e:	1c78      	adds	r0, r7, #1
 800a750:	d1d6      	bne.n	800a700 <_vfiprintf_r+0x1bc>
 800a752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a754:	07d9      	lsls	r1, r3, #31
 800a756:	d405      	bmi.n	800a764 <_vfiprintf_r+0x220>
 800a758:	89ab      	ldrh	r3, [r5, #12]
 800a75a:	059a      	lsls	r2, r3, #22
 800a75c:	d402      	bmi.n	800a764 <_vfiprintf_r+0x220>
 800a75e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a760:	f7ff fd7f 	bl	800a262 <__retarget_lock_release_recursive>
 800a764:	89ab      	ldrh	r3, [r5, #12]
 800a766:	065b      	lsls	r3, r3, #25
 800a768:	f53f af12 	bmi.w	800a590 <_vfiprintf_r+0x4c>
 800a76c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a76e:	e711      	b.n	800a594 <_vfiprintf_r+0x50>
 800a770:	ab03      	add	r3, sp, #12
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	462a      	mov	r2, r5
 800a776:	4b09      	ldr	r3, [pc, #36]	; (800a79c <_vfiprintf_r+0x258>)
 800a778:	a904      	add	r1, sp, #16
 800a77a:	4630      	mov	r0, r6
 800a77c:	f000 f880 	bl	800a880 <_printf_i>
 800a780:	e7e4      	b.n	800a74c <_vfiprintf_r+0x208>
 800a782:	bf00      	nop
 800a784:	08014724 	.word	0x08014724
 800a788:	08014744 	.word	0x08014744
 800a78c:	08014704 	.word	0x08014704
 800a790:	08014764 	.word	0x08014764
 800a794:	0801476e 	.word	0x0801476e
 800a798:	00000000 	.word	0x00000000
 800a79c:	0800a51f 	.word	0x0800a51f
 800a7a0:	0801476a 	.word	0x0801476a

0800a7a4 <_printf_common>:
 800a7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a8:	4616      	mov	r6, r2
 800a7aa:	4699      	mov	r9, r3
 800a7ac:	688a      	ldr	r2, [r1, #8]
 800a7ae:	690b      	ldr	r3, [r1, #16]
 800a7b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	bfb8      	it	lt
 800a7b8:	4613      	movlt	r3, r2
 800a7ba:	6033      	str	r3, [r6, #0]
 800a7bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7c0:	4607      	mov	r7, r0
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	b10a      	cbz	r2, 800a7ca <_printf_common+0x26>
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	6033      	str	r3, [r6, #0]
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	0699      	lsls	r1, r3, #26
 800a7ce:	bf42      	ittt	mi
 800a7d0:	6833      	ldrmi	r3, [r6, #0]
 800a7d2:	3302      	addmi	r3, #2
 800a7d4:	6033      	strmi	r3, [r6, #0]
 800a7d6:	6825      	ldr	r5, [r4, #0]
 800a7d8:	f015 0506 	ands.w	r5, r5, #6
 800a7dc:	d106      	bne.n	800a7ec <_printf_common+0x48>
 800a7de:	f104 0a19 	add.w	sl, r4, #25
 800a7e2:	68e3      	ldr	r3, [r4, #12]
 800a7e4:	6832      	ldr	r2, [r6, #0]
 800a7e6:	1a9b      	subs	r3, r3, r2
 800a7e8:	42ab      	cmp	r3, r5
 800a7ea:	dc26      	bgt.n	800a83a <_printf_common+0x96>
 800a7ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7f0:	1e13      	subs	r3, r2, #0
 800a7f2:	6822      	ldr	r2, [r4, #0]
 800a7f4:	bf18      	it	ne
 800a7f6:	2301      	movne	r3, #1
 800a7f8:	0692      	lsls	r2, r2, #26
 800a7fa:	d42b      	bmi.n	800a854 <_printf_common+0xb0>
 800a7fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a800:	4649      	mov	r1, r9
 800a802:	4638      	mov	r0, r7
 800a804:	47c0      	blx	r8
 800a806:	3001      	adds	r0, #1
 800a808:	d01e      	beq.n	800a848 <_printf_common+0xa4>
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	68e5      	ldr	r5, [r4, #12]
 800a80e:	6832      	ldr	r2, [r6, #0]
 800a810:	f003 0306 	and.w	r3, r3, #6
 800a814:	2b04      	cmp	r3, #4
 800a816:	bf08      	it	eq
 800a818:	1aad      	subeq	r5, r5, r2
 800a81a:	68a3      	ldr	r3, [r4, #8]
 800a81c:	6922      	ldr	r2, [r4, #16]
 800a81e:	bf0c      	ite	eq
 800a820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a824:	2500      	movne	r5, #0
 800a826:	4293      	cmp	r3, r2
 800a828:	bfc4      	itt	gt
 800a82a:	1a9b      	subgt	r3, r3, r2
 800a82c:	18ed      	addgt	r5, r5, r3
 800a82e:	2600      	movs	r6, #0
 800a830:	341a      	adds	r4, #26
 800a832:	42b5      	cmp	r5, r6
 800a834:	d11a      	bne.n	800a86c <_printf_common+0xc8>
 800a836:	2000      	movs	r0, #0
 800a838:	e008      	b.n	800a84c <_printf_common+0xa8>
 800a83a:	2301      	movs	r3, #1
 800a83c:	4652      	mov	r2, sl
 800a83e:	4649      	mov	r1, r9
 800a840:	4638      	mov	r0, r7
 800a842:	47c0      	blx	r8
 800a844:	3001      	adds	r0, #1
 800a846:	d103      	bne.n	800a850 <_printf_common+0xac>
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
 800a84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a850:	3501      	adds	r5, #1
 800a852:	e7c6      	b.n	800a7e2 <_printf_common+0x3e>
 800a854:	18e1      	adds	r1, r4, r3
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	2030      	movs	r0, #48	; 0x30
 800a85a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a85e:	4422      	add	r2, r4
 800a860:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a864:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a868:	3302      	adds	r3, #2
 800a86a:	e7c7      	b.n	800a7fc <_printf_common+0x58>
 800a86c:	2301      	movs	r3, #1
 800a86e:	4622      	mov	r2, r4
 800a870:	4649      	mov	r1, r9
 800a872:	4638      	mov	r0, r7
 800a874:	47c0      	blx	r8
 800a876:	3001      	adds	r0, #1
 800a878:	d0e6      	beq.n	800a848 <_printf_common+0xa4>
 800a87a:	3601      	adds	r6, #1
 800a87c:	e7d9      	b.n	800a832 <_printf_common+0x8e>
	...

0800a880 <_printf_i>:
 800a880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a884:	7e0f      	ldrb	r7, [r1, #24]
 800a886:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a888:	2f78      	cmp	r7, #120	; 0x78
 800a88a:	4691      	mov	r9, r2
 800a88c:	4680      	mov	r8, r0
 800a88e:	460c      	mov	r4, r1
 800a890:	469a      	mov	sl, r3
 800a892:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a896:	d807      	bhi.n	800a8a8 <_printf_i+0x28>
 800a898:	2f62      	cmp	r7, #98	; 0x62
 800a89a:	d80a      	bhi.n	800a8b2 <_printf_i+0x32>
 800a89c:	2f00      	cmp	r7, #0
 800a89e:	f000 80d8 	beq.w	800aa52 <_printf_i+0x1d2>
 800a8a2:	2f58      	cmp	r7, #88	; 0x58
 800a8a4:	f000 80a3 	beq.w	800a9ee <_printf_i+0x16e>
 800a8a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8b0:	e03a      	b.n	800a928 <_printf_i+0xa8>
 800a8b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8b6:	2b15      	cmp	r3, #21
 800a8b8:	d8f6      	bhi.n	800a8a8 <_printf_i+0x28>
 800a8ba:	a101      	add	r1, pc, #4	; (adr r1, 800a8c0 <_printf_i+0x40>)
 800a8bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8c0:	0800a919 	.word	0x0800a919
 800a8c4:	0800a92d 	.word	0x0800a92d
 800a8c8:	0800a8a9 	.word	0x0800a8a9
 800a8cc:	0800a8a9 	.word	0x0800a8a9
 800a8d0:	0800a8a9 	.word	0x0800a8a9
 800a8d4:	0800a8a9 	.word	0x0800a8a9
 800a8d8:	0800a92d 	.word	0x0800a92d
 800a8dc:	0800a8a9 	.word	0x0800a8a9
 800a8e0:	0800a8a9 	.word	0x0800a8a9
 800a8e4:	0800a8a9 	.word	0x0800a8a9
 800a8e8:	0800a8a9 	.word	0x0800a8a9
 800a8ec:	0800aa39 	.word	0x0800aa39
 800a8f0:	0800a95d 	.word	0x0800a95d
 800a8f4:	0800aa1b 	.word	0x0800aa1b
 800a8f8:	0800a8a9 	.word	0x0800a8a9
 800a8fc:	0800a8a9 	.word	0x0800a8a9
 800a900:	0800aa5b 	.word	0x0800aa5b
 800a904:	0800a8a9 	.word	0x0800a8a9
 800a908:	0800a95d 	.word	0x0800a95d
 800a90c:	0800a8a9 	.word	0x0800a8a9
 800a910:	0800a8a9 	.word	0x0800a8a9
 800a914:	0800aa23 	.word	0x0800aa23
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	1d1a      	adds	r2, r3, #4
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	602a      	str	r2, [r5, #0]
 800a920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a928:	2301      	movs	r3, #1
 800a92a:	e0a3      	b.n	800aa74 <_printf_i+0x1f4>
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	6829      	ldr	r1, [r5, #0]
 800a930:	0606      	lsls	r6, r0, #24
 800a932:	f101 0304 	add.w	r3, r1, #4
 800a936:	d50a      	bpl.n	800a94e <_printf_i+0xce>
 800a938:	680e      	ldr	r6, [r1, #0]
 800a93a:	602b      	str	r3, [r5, #0]
 800a93c:	2e00      	cmp	r6, #0
 800a93e:	da03      	bge.n	800a948 <_printf_i+0xc8>
 800a940:	232d      	movs	r3, #45	; 0x2d
 800a942:	4276      	negs	r6, r6
 800a944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a948:	485e      	ldr	r0, [pc, #376]	; (800aac4 <_printf_i+0x244>)
 800a94a:	230a      	movs	r3, #10
 800a94c:	e019      	b.n	800a982 <_printf_i+0x102>
 800a94e:	680e      	ldr	r6, [r1, #0]
 800a950:	602b      	str	r3, [r5, #0]
 800a952:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a956:	bf18      	it	ne
 800a958:	b236      	sxthne	r6, r6
 800a95a:	e7ef      	b.n	800a93c <_printf_i+0xbc>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	6820      	ldr	r0, [r4, #0]
 800a960:	1d19      	adds	r1, r3, #4
 800a962:	6029      	str	r1, [r5, #0]
 800a964:	0601      	lsls	r1, r0, #24
 800a966:	d501      	bpl.n	800a96c <_printf_i+0xec>
 800a968:	681e      	ldr	r6, [r3, #0]
 800a96a:	e002      	b.n	800a972 <_printf_i+0xf2>
 800a96c:	0646      	lsls	r6, r0, #25
 800a96e:	d5fb      	bpl.n	800a968 <_printf_i+0xe8>
 800a970:	881e      	ldrh	r6, [r3, #0]
 800a972:	4854      	ldr	r0, [pc, #336]	; (800aac4 <_printf_i+0x244>)
 800a974:	2f6f      	cmp	r7, #111	; 0x6f
 800a976:	bf0c      	ite	eq
 800a978:	2308      	moveq	r3, #8
 800a97a:	230a      	movne	r3, #10
 800a97c:	2100      	movs	r1, #0
 800a97e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a982:	6865      	ldr	r5, [r4, #4]
 800a984:	60a5      	str	r5, [r4, #8]
 800a986:	2d00      	cmp	r5, #0
 800a988:	bfa2      	ittt	ge
 800a98a:	6821      	ldrge	r1, [r4, #0]
 800a98c:	f021 0104 	bicge.w	r1, r1, #4
 800a990:	6021      	strge	r1, [r4, #0]
 800a992:	b90e      	cbnz	r6, 800a998 <_printf_i+0x118>
 800a994:	2d00      	cmp	r5, #0
 800a996:	d04d      	beq.n	800aa34 <_printf_i+0x1b4>
 800a998:	4615      	mov	r5, r2
 800a99a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a99e:	fb03 6711 	mls	r7, r3, r1, r6
 800a9a2:	5dc7      	ldrb	r7, [r0, r7]
 800a9a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9a8:	4637      	mov	r7, r6
 800a9aa:	42bb      	cmp	r3, r7
 800a9ac:	460e      	mov	r6, r1
 800a9ae:	d9f4      	bls.n	800a99a <_printf_i+0x11a>
 800a9b0:	2b08      	cmp	r3, #8
 800a9b2:	d10b      	bne.n	800a9cc <_printf_i+0x14c>
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	07de      	lsls	r6, r3, #31
 800a9b8:	d508      	bpl.n	800a9cc <_printf_i+0x14c>
 800a9ba:	6923      	ldr	r3, [r4, #16]
 800a9bc:	6861      	ldr	r1, [r4, #4]
 800a9be:	4299      	cmp	r1, r3
 800a9c0:	bfde      	ittt	le
 800a9c2:	2330      	movle	r3, #48	; 0x30
 800a9c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9cc:	1b52      	subs	r2, r2, r5
 800a9ce:	6122      	str	r2, [r4, #16]
 800a9d0:	f8cd a000 	str.w	sl, [sp]
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	aa03      	add	r2, sp, #12
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4640      	mov	r0, r8
 800a9dc:	f7ff fee2 	bl	800a7a4 <_printf_common>
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d14c      	bne.n	800aa7e <_printf_i+0x1fe>
 800a9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e8:	b004      	add	sp, #16
 800a9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ee:	4835      	ldr	r0, [pc, #212]	; (800aac4 <_printf_i+0x244>)
 800a9f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9f4:	6829      	ldr	r1, [r5, #0]
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9fc:	6029      	str	r1, [r5, #0]
 800a9fe:	061d      	lsls	r5, r3, #24
 800aa00:	d514      	bpl.n	800aa2c <_printf_i+0x1ac>
 800aa02:	07df      	lsls	r7, r3, #31
 800aa04:	bf44      	itt	mi
 800aa06:	f043 0320 	orrmi.w	r3, r3, #32
 800aa0a:	6023      	strmi	r3, [r4, #0]
 800aa0c:	b91e      	cbnz	r6, 800aa16 <_printf_i+0x196>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	f023 0320 	bic.w	r3, r3, #32
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	2310      	movs	r3, #16
 800aa18:	e7b0      	b.n	800a97c <_printf_i+0xfc>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	f043 0320 	orr.w	r3, r3, #32
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	2378      	movs	r3, #120	; 0x78
 800aa24:	4828      	ldr	r0, [pc, #160]	; (800aac8 <_printf_i+0x248>)
 800aa26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa2a:	e7e3      	b.n	800a9f4 <_printf_i+0x174>
 800aa2c:	0659      	lsls	r1, r3, #25
 800aa2e:	bf48      	it	mi
 800aa30:	b2b6      	uxthmi	r6, r6
 800aa32:	e7e6      	b.n	800aa02 <_printf_i+0x182>
 800aa34:	4615      	mov	r5, r2
 800aa36:	e7bb      	b.n	800a9b0 <_printf_i+0x130>
 800aa38:	682b      	ldr	r3, [r5, #0]
 800aa3a:	6826      	ldr	r6, [r4, #0]
 800aa3c:	6961      	ldr	r1, [r4, #20]
 800aa3e:	1d18      	adds	r0, r3, #4
 800aa40:	6028      	str	r0, [r5, #0]
 800aa42:	0635      	lsls	r5, r6, #24
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	d501      	bpl.n	800aa4c <_printf_i+0x1cc>
 800aa48:	6019      	str	r1, [r3, #0]
 800aa4a:	e002      	b.n	800aa52 <_printf_i+0x1d2>
 800aa4c:	0670      	lsls	r0, r6, #25
 800aa4e:	d5fb      	bpl.n	800aa48 <_printf_i+0x1c8>
 800aa50:	8019      	strh	r1, [r3, #0]
 800aa52:	2300      	movs	r3, #0
 800aa54:	6123      	str	r3, [r4, #16]
 800aa56:	4615      	mov	r5, r2
 800aa58:	e7ba      	b.n	800a9d0 <_printf_i+0x150>
 800aa5a:	682b      	ldr	r3, [r5, #0]
 800aa5c:	1d1a      	adds	r2, r3, #4
 800aa5e:	602a      	str	r2, [r5, #0]
 800aa60:	681d      	ldr	r5, [r3, #0]
 800aa62:	6862      	ldr	r2, [r4, #4]
 800aa64:	2100      	movs	r1, #0
 800aa66:	4628      	mov	r0, r5
 800aa68:	f7f5 fbca 	bl	8000200 <memchr>
 800aa6c:	b108      	cbz	r0, 800aa72 <_printf_i+0x1f2>
 800aa6e:	1b40      	subs	r0, r0, r5
 800aa70:	6060      	str	r0, [r4, #4]
 800aa72:	6863      	ldr	r3, [r4, #4]
 800aa74:	6123      	str	r3, [r4, #16]
 800aa76:	2300      	movs	r3, #0
 800aa78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa7c:	e7a8      	b.n	800a9d0 <_printf_i+0x150>
 800aa7e:	6923      	ldr	r3, [r4, #16]
 800aa80:	462a      	mov	r2, r5
 800aa82:	4649      	mov	r1, r9
 800aa84:	4640      	mov	r0, r8
 800aa86:	47d0      	blx	sl
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d0ab      	beq.n	800a9e4 <_printf_i+0x164>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	079b      	lsls	r3, r3, #30
 800aa90:	d413      	bmi.n	800aaba <_printf_i+0x23a>
 800aa92:	68e0      	ldr	r0, [r4, #12]
 800aa94:	9b03      	ldr	r3, [sp, #12]
 800aa96:	4298      	cmp	r0, r3
 800aa98:	bfb8      	it	lt
 800aa9a:	4618      	movlt	r0, r3
 800aa9c:	e7a4      	b.n	800a9e8 <_printf_i+0x168>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	4632      	mov	r2, r6
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	47d0      	blx	sl
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	d09b      	beq.n	800a9e4 <_printf_i+0x164>
 800aaac:	3501      	adds	r5, #1
 800aaae:	68e3      	ldr	r3, [r4, #12]
 800aab0:	9903      	ldr	r1, [sp, #12]
 800aab2:	1a5b      	subs	r3, r3, r1
 800aab4:	42ab      	cmp	r3, r5
 800aab6:	dcf2      	bgt.n	800aa9e <_printf_i+0x21e>
 800aab8:	e7eb      	b.n	800aa92 <_printf_i+0x212>
 800aaba:	2500      	movs	r5, #0
 800aabc:	f104 0619 	add.w	r6, r4, #25
 800aac0:	e7f5      	b.n	800aaae <_printf_i+0x22e>
 800aac2:	bf00      	nop
 800aac4:	08014775 	.word	0x08014775
 800aac8:	08014786 	.word	0x08014786

0800aacc <_sbrk_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4d06      	ldr	r5, [pc, #24]	; (800aae8 <_sbrk_r+0x1c>)
 800aad0:	2300      	movs	r3, #0
 800aad2:	4604      	mov	r4, r0
 800aad4:	4608      	mov	r0, r1
 800aad6:	602b      	str	r3, [r5, #0]
 800aad8:	f7f7 fe00 	bl	80026dc <_sbrk>
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	d102      	bne.n	800aae6 <_sbrk_r+0x1a>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	b103      	cbz	r3, 800aae6 <_sbrk_r+0x1a>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
 800aae8:	20013d60 	.word	0x20013d60

0800aaec <__sread>:
 800aaec:	b510      	push	{r4, lr}
 800aaee:	460c      	mov	r4, r1
 800aaf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf4:	f000 f8a0 	bl	800ac38 <_read_r>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	bfab      	itete	ge
 800aafc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aafe:	89a3      	ldrhlt	r3, [r4, #12]
 800ab00:	181b      	addge	r3, r3, r0
 800ab02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab06:	bfac      	ite	ge
 800ab08:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab0a:	81a3      	strhlt	r3, [r4, #12]
 800ab0c:	bd10      	pop	{r4, pc}

0800ab0e <__swrite>:
 800ab0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab12:	461f      	mov	r7, r3
 800ab14:	898b      	ldrh	r3, [r1, #12]
 800ab16:	05db      	lsls	r3, r3, #23
 800ab18:	4605      	mov	r5, r0
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	4616      	mov	r6, r2
 800ab1e:	d505      	bpl.n	800ab2c <__swrite+0x1e>
 800ab20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab24:	2302      	movs	r3, #2
 800ab26:	2200      	movs	r2, #0
 800ab28:	f000 f868 	bl	800abfc <_lseek_r>
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab36:	81a3      	strh	r3, [r4, #12]
 800ab38:	4632      	mov	r2, r6
 800ab3a:	463b      	mov	r3, r7
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab42:	f000 b817 	b.w	800ab74 <_write_r>

0800ab46 <__sseek>:
 800ab46:	b510      	push	{r4, lr}
 800ab48:	460c      	mov	r4, r1
 800ab4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4e:	f000 f855 	bl	800abfc <_lseek_r>
 800ab52:	1c43      	adds	r3, r0, #1
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	bf15      	itete	ne
 800ab58:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab62:	81a3      	strheq	r3, [r4, #12]
 800ab64:	bf18      	it	ne
 800ab66:	81a3      	strhne	r3, [r4, #12]
 800ab68:	bd10      	pop	{r4, pc}

0800ab6a <__sclose>:
 800ab6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6e:	f000 b813 	b.w	800ab98 <_close_r>
	...

0800ab74 <_write_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4d07      	ldr	r5, [pc, #28]	; (800ab94 <_write_r+0x20>)
 800ab78:	4604      	mov	r4, r0
 800ab7a:	4608      	mov	r0, r1
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	2200      	movs	r2, #0
 800ab80:	602a      	str	r2, [r5, #0]
 800ab82:	461a      	mov	r2, r3
 800ab84:	f7f7 fd59 	bl	800263a <_write>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	d102      	bne.n	800ab92 <_write_r+0x1e>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	b103      	cbz	r3, 800ab92 <_write_r+0x1e>
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	bd38      	pop	{r3, r4, r5, pc}
 800ab94:	20013d60 	.word	0x20013d60

0800ab98 <_close_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4d06      	ldr	r5, [pc, #24]	; (800abb4 <_close_r+0x1c>)
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4604      	mov	r4, r0
 800aba0:	4608      	mov	r0, r1
 800aba2:	602b      	str	r3, [r5, #0]
 800aba4:	f7f7 fd65 	bl	8002672 <_close>
 800aba8:	1c43      	adds	r3, r0, #1
 800abaa:	d102      	bne.n	800abb2 <_close_r+0x1a>
 800abac:	682b      	ldr	r3, [r5, #0]
 800abae:	b103      	cbz	r3, 800abb2 <_close_r+0x1a>
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	bd38      	pop	{r3, r4, r5, pc}
 800abb4:	20013d60 	.word	0x20013d60

0800abb8 <_fstat_r>:
 800abb8:	b538      	push	{r3, r4, r5, lr}
 800abba:	4d07      	ldr	r5, [pc, #28]	; (800abd8 <_fstat_r+0x20>)
 800abbc:	2300      	movs	r3, #0
 800abbe:	4604      	mov	r4, r0
 800abc0:	4608      	mov	r0, r1
 800abc2:	4611      	mov	r1, r2
 800abc4:	602b      	str	r3, [r5, #0]
 800abc6:	f7f7 fd60 	bl	800268a <_fstat>
 800abca:	1c43      	adds	r3, r0, #1
 800abcc:	d102      	bne.n	800abd4 <_fstat_r+0x1c>
 800abce:	682b      	ldr	r3, [r5, #0]
 800abd0:	b103      	cbz	r3, 800abd4 <_fstat_r+0x1c>
 800abd2:	6023      	str	r3, [r4, #0]
 800abd4:	bd38      	pop	{r3, r4, r5, pc}
 800abd6:	bf00      	nop
 800abd8:	20013d60 	.word	0x20013d60

0800abdc <_isatty_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	4d06      	ldr	r5, [pc, #24]	; (800abf8 <_isatty_r+0x1c>)
 800abe0:	2300      	movs	r3, #0
 800abe2:	4604      	mov	r4, r0
 800abe4:	4608      	mov	r0, r1
 800abe6:	602b      	str	r3, [r5, #0]
 800abe8:	f7f7 fd5f 	bl	80026aa <_isatty>
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	d102      	bne.n	800abf6 <_isatty_r+0x1a>
 800abf0:	682b      	ldr	r3, [r5, #0]
 800abf2:	b103      	cbz	r3, 800abf6 <_isatty_r+0x1a>
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	bd38      	pop	{r3, r4, r5, pc}
 800abf8:	20013d60 	.word	0x20013d60

0800abfc <_lseek_r>:
 800abfc:	b538      	push	{r3, r4, r5, lr}
 800abfe:	4d07      	ldr	r5, [pc, #28]	; (800ac1c <_lseek_r+0x20>)
 800ac00:	4604      	mov	r4, r0
 800ac02:	4608      	mov	r0, r1
 800ac04:	4611      	mov	r1, r2
 800ac06:	2200      	movs	r2, #0
 800ac08:	602a      	str	r2, [r5, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f7f7 fd58 	bl	80026c0 <_lseek>
 800ac10:	1c43      	adds	r3, r0, #1
 800ac12:	d102      	bne.n	800ac1a <_lseek_r+0x1e>
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	b103      	cbz	r3, 800ac1a <_lseek_r+0x1e>
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	20013d60 	.word	0x20013d60

0800ac20 <__malloc_lock>:
 800ac20:	4801      	ldr	r0, [pc, #4]	; (800ac28 <__malloc_lock+0x8>)
 800ac22:	f7ff bb1d 	b.w	800a260 <__retarget_lock_acquire_recursive>
 800ac26:	bf00      	nop
 800ac28:	20013d54 	.word	0x20013d54

0800ac2c <__malloc_unlock>:
 800ac2c:	4801      	ldr	r0, [pc, #4]	; (800ac34 <__malloc_unlock+0x8>)
 800ac2e:	f7ff bb18 	b.w	800a262 <__retarget_lock_release_recursive>
 800ac32:	bf00      	nop
 800ac34:	20013d54 	.word	0x20013d54

0800ac38 <_read_r>:
 800ac38:	b538      	push	{r3, r4, r5, lr}
 800ac3a:	4d07      	ldr	r5, [pc, #28]	; (800ac58 <_read_r+0x20>)
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	4608      	mov	r0, r1
 800ac40:	4611      	mov	r1, r2
 800ac42:	2200      	movs	r2, #0
 800ac44:	602a      	str	r2, [r5, #0]
 800ac46:	461a      	mov	r2, r3
 800ac48:	f7f7 fcda 	bl	8002600 <_read>
 800ac4c:	1c43      	adds	r3, r0, #1
 800ac4e:	d102      	bne.n	800ac56 <_read_r+0x1e>
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	b103      	cbz	r3, 800ac56 <_read_r+0x1e>
 800ac54:	6023      	str	r3, [r4, #0]
 800ac56:	bd38      	pop	{r3, r4, r5, pc}
 800ac58:	20013d60 	.word	0x20013d60

0800ac5c <_init>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	bf00      	nop
 800ac60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac62:	bc08      	pop	{r3}
 800ac64:	469e      	mov	lr, r3
 800ac66:	4770      	bx	lr

0800ac68 <_fini>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr
