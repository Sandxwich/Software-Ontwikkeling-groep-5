
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fc4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800520c  0800520c  00022780  2**0
                  CONTENTS
  4 .ARM          00000008  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005214  08005214  00022780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002780  20000000  0800521c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013404  20002780  0800799c  00022780  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015b84  0800799c  00025b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022780  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015471  00000000  00000000  000227b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003057  00000000  00000000  00037c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  0003ac78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  0003b9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e6f  00000000  00000000  0003c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f22  00000000  00000000  0006044f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb96a  00000000  00000000  00071371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013ccdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c40  00000000  00000000  0013cd30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20002780 	.word	0x20002780
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005134 	.word	0x08005134

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20002784 	.word	0x20002784
 80001c4:	08005134 	.word	0x08005134

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <API_draw_bitmap>:
	}
	return error;
}

int API_draw_bitmap(uint16_t nr, uint16_t x_lup, uint16_t y_lup)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	80fb      	strh	r3, [r7, #6]
 80004ca:	460b      	mov	r3, r1
 80004cc:	80bb      	strh	r3, [r7, #4]
 80004ce:	4613      	mov	r3, r2
 80004d0:	807b      	strh	r3, [r7, #2]
	int error = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	60fb      	str	r3, [r7, #12]



	  uint16_t xp,yp,xp2,yp2;
	  yp2=0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	827b      	strh	r3, [r7, #18]
	  for(yp = 20; yp < 120; yp++) {
 80004da:	2314      	movs	r3, #20
 80004dc:	82bb      	strh	r3, [r7, #20]
 80004de:	e01c      	b.n	800051a <API_draw_bitmap+0x5a>
	    for(xp = 0; xp < 100; xp++) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	82fb      	strh	r3, [r7, #22]
 80004e4:	e010      	b.n	8000508 <API_draw_bitmap+0x48>


	      UB_VGA_SetPixel(xp, yp, bitmap[yp2][xp]);
 80004e6:	8a7a      	ldrh	r2, [r7, #18]
 80004e8:	8afb      	ldrh	r3, [r7, #22]
 80004ea:	4910      	ldr	r1, [pc, #64]	; (800052c <API_draw_bitmap+0x6c>)
 80004ec:	2064      	movs	r0, #100	; 0x64
 80004ee:	fb00 f202 	mul.w	r2, r0, r2
 80004f2:	440a      	add	r2, r1
 80004f4:	4413      	add	r3, r2
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	8ab9      	ldrh	r1, [r7, #20]
 80004fa:	8afb      	ldrh	r3, [r7, #22]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 feb1 	bl	8001264 <UB_VGA_SetPixel>
	    for(xp = 0; xp < 100; xp++) {
 8000502:	8afb      	ldrh	r3, [r7, #22]
 8000504:	3301      	adds	r3, #1
 8000506:	82fb      	strh	r3, [r7, #22]
 8000508:	8afb      	ldrh	r3, [r7, #22]
 800050a:	2b63      	cmp	r3, #99	; 0x63
 800050c:	d9eb      	bls.n	80004e6 <API_draw_bitmap+0x26>
	    }
	    yp2++;
 800050e:	8a7b      	ldrh	r3, [r7, #18]
 8000510:	3301      	adds	r3, #1
 8000512:	827b      	strh	r3, [r7, #18]
	  for(yp = 20; yp < 120; yp++) {
 8000514:	8abb      	ldrh	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	82bb      	strh	r3, [r7, #20]
 800051a:	8abb      	ldrh	r3, [r7, #20]
 800051c:	2b77      	cmp	r3, #119	; 0x77
 800051e:	d9df      	bls.n	80004e0 <API_draw_bitmap+0x20>
//
//		break;
//	}
//
//	}
	return error;
 8000520:	68fb      	ldr	r3, [r7, #12]
}
 8000522:	4618      	mov	r0, r3
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000

08000530 <LogicLayer_Parser>:


Message_parser LogicLayer_Parser(char*, unsigned int);

Message_parser LogicLayer_Parser(char *Message, unsigned int Messagelength)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0ee      	sub	sp, #440	; 0x1b8
 8000534:	af00      	add	r7, sp, #0
 8000536:	f107 030c 	add.w	r3, r7, #12
 800053a:	6018      	str	r0, [r3, #0]
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	6019      	str	r1, [r3, #0]
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	601a      	str	r2, [r3, #0]
	unsigned int i,j,k,l = 0;			// Maak iterators aan voor het maken van een moving window langs de buffer message
 8000546:	2300      	movs	r3, #0
 8000548:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	Message_parser localParser;

	  while (Message[i] != 0) 	// Kijk voor line end
 800054c:	e07e      	b.n	800064c <LogicLayer_Parser+0x11c>
	  {

		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 800054e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000552:	3301      	adds	r3, #1
 8000554:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	d903      	bls.n	800056c <LogicLayer_Parser+0x3c>
			  {
				  printf("Error , not detected \n");
 8000564:	484a      	ldr	r0, [pc, #296]	; (8000690 <LogicLayer_Parser+0x160>)
 8000566:	f004 f98d 	bl	8004884 <puts>
				  break;
 800056a:	e011      	b.n	8000590 <LogicLayer_Parser+0x60>
		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000576:	4413      	add	r3, r2
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b2c      	cmp	r3, #44	; 0x2c
 800057c:	d008      	beq.n	8000590 <LogicLayer_Parser+0x60>
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000588:	4413      	add	r3, r2
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1de      	bne.n	800054e <LogicLayer_Parser+0x1e>
			  }
		  }

	  	  for (l=0; j<i; j++)
 8000590:	2300      	movs	r3, #0
 8000592:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000596:	e01f      	b.n	80005d8 <LogicLayer_Parser+0xa8>
	  	  {
	  		localParser.Parser_Message[k][l] = Message[j];
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80005a2:	4413      	add	r3, r2
 80005a4:	7818      	ldrb	r0, [r3, #0]
 80005a6:	f107 0114 	add.w	r1, r7, #20
 80005aa:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80005ae:	4613      	mov	r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4413      	add	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	18ca      	adds	r2, r1, r3
 80005b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80005bc:	4413      	add	r3, r2
 80005be:	3301      	adds	r3, #1
 80005c0:	4602      	mov	r2, r0
 80005c2:	701a      	strb	r2, [r3, #0]
	  		l++;
 80005c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80005c8:	3301      	adds	r3, #1
 80005ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  	  for (l=0; j<i; j++)
 80005ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80005d2:	3301      	adds	r3, #1
 80005d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80005d8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80005dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d3d9      	bcc.n	8000598 <LogicLayer_Parser+0x68>
	  	  }

	  	  j = i+1;
 80005e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80005e8:	3301      	adds	r3, #1
 80005ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	  	  if (Message[j] == 0x20)	// checking for spaces between lines
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80005f8:	4413      	add	r3, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b20      	cmp	r3, #32
 80005fe:	d104      	bne.n	800060a <LogicLayer_Parser+0xda>
	  	  {
	  		  j++;
 8000600:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000604:	3301      	adds	r3, #1
 8000606:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  	  }

	  	  localParser.Parser_Message[k][l] = '\0';
 800060a:	f107 0114 	add.w	r1, r7, #20
 800060e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8000612:	4613      	mov	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	18ca      	adds	r2, r1, r3
 800061c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000620:	4413      	add	r3, r2
 8000622:	3301      	adds	r3, #1
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]

	  	  i++;		//verhoog de iterator om niet in een oneindige loop te komen ivm while loop en komma detectie
 8000628:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800062c:	3301      	adds	r3, #1
 800062e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

	  	  k=(k+1);	//verhoog iterator voor meerdere berichten opslag
 8000632:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000636:	3301      	adds	r3, #1
 8000638:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 800063c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000640:	2b14      	cmp	r3, #20
 8000642:	d903      	bls.n	800064c <LogicLayer_Parser+0x11c>
	  	  	  {
	  		  	  printf("Error no message end detected \n");
 8000644:	4813      	ldr	r0, [pc, #76]	; (8000694 <LogicLayer_Parser+0x164>)
 8000646:	f004 f91d 	bl	8004884 <puts>
	  		  	  break;
 800064a:	e008      	b.n	800065e <LogicLayer_Parser+0x12e>
	  while (Message[i] != 0) 	// Kijk voor line end
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d186      	bne.n	800056c <LogicLayer_Parser+0x3c>
	  	  	  }

	  }

	localParser.Variable_length = k;
 800065e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000662:	b2da      	uxtb	r2, r3
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	701a      	strb	r2, [r3, #0]

	return localParser;
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4610      	mov	r0, r2
 8000676:	4619      	mov	r1, r3
 8000678:	f240 1391 	movw	r3, #401	; 0x191
 800067c:	461a      	mov	r2, r3
 800067e:	f004 f87d 	bl	800477c <memcpy>
}
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	0800514c 	.word	0x0800514c
 8000694:	08005164 	.word	0x08005164

08000698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_DMA_Init+0x3c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <MX_DMA_Init+0x3c>)
 80006a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_DMA_Init+0x3c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2044      	movs	r0, #68	; 0x44
 80006c0:	f000 ff45 	bl	800154e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80006c4:	2044      	movs	r0, #68	; 0x44
 80006c6:	f000 ff5e 	bl	8001586 <HAL_NVIC_EnableIRQ>

}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800

080006d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b32      	ldr	r3, [pc, #200]	; (80007bc <MX_GPIO_Init+0xe4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a31      	ldr	r2, [pc, #196]	; (80007bc <MX_GPIO_Init+0xe4>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <MX_GPIO_Init+0xe4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_GPIO_Init+0xe4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <MX_GPIO_Init+0xe4>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_GPIO_Init+0xe4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_GPIO_Init+0xe4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a23      	ldr	r2, [pc, #140]	; (80007bc <MX_GPIO_Init+0xe4>)
 8000730:	f043 0310 	orr.w	r3, r3, #16
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_GPIO_Init+0xe4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0310 	and.w	r3, r3, #16
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_GPIO_Init+0xe4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_GPIO_Init+0xe4>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_GPIO_Init+0xe4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000764:	4816      	ldr	r0, [pc, #88]	; (80007c0 <MX_GPIO_Init+0xe8>)
 8000766:	f001 fc57 	bl	8002018 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000770:	4814      	ldr	r0, [pc, #80]	; (80007c4 <MX_GPIO_Init+0xec>)
 8000772:	f001 fc51 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000776:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800077a:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_GPIO_Init+0xe8>)
 8000790:	f001 faa6 	bl	8001ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_GPIO_Init+0xec>)
 80007ae:	f001 fa97 	bl	8001ce0 <HAL_GPIO_Init>

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	; 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40020400 	.word	0x40020400

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b0e9      	sub	sp, #420	; 0x1a4
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ce:	f000 fd71 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d2:	f000 f879 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d6:	f7ff ff7f 	bl	80006d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007da:	f7ff ff5d 	bl	8000698 <MX_DMA_Init>
  MX_TIM1_Init();
 80007de:	f000 fabf 	bl	8000d60 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007e2:	f000 fb0d 	bl	8000e00 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007e6:	f000 fc23 	bl	8001030 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 80007ea:	f000 fcc5 	bl	8001178 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_RED);
 80007ee:	20e0      	movs	r0, #224	; 0xe0
 80007f0:	f000 fd14 	bl	800121c <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 80007f4:	220a      	movs	r2, #10
 80007f6:	210a      	movs	r1, #10
 80007f8:	200a      	movs	r0, #10
 80007fa:	f000 fd33 	bl	8001264 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2000      	movs	r0, #0
 8000804:	f000 fd2e 	bl	8001264 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	f240 103f 	movw	r0, #319	; 0x13f
 8000810:	f000 fd28 	bl	8001264 <UB_VGA_SetPixel>

  API_draw_bitmap(0,0,0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2000      	movs	r0, #0
 800081a:	f7ff fe51 	bl	80004c0 <API_draw_bitmap>

  unsigned int i = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c


  for(i = 0; i < LINE_BUFLEN; i++)
 8000824:	2300      	movs	r3, #0
 8000826:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800082a:	e00b      	b.n	8000844 <main+0x7c>
	  input.line_rx_buffer[i] = 0;
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <main+0xec>)
 800082e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000832:	4413      	add	r3, r2
 8000834:	3301      	adds	r3, #1
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 800083a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800083e:	3301      	adds	r3, #1
 8000840:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000844:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0ef      	beq.n	800082c <main+0x64>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <main+0xec>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <main+0xec>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  input.command_execute_flag = FALSE;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <main+0xec>)
 800085a:	2200      	movs	r2, #0
 800085c:	731a      	strb	r2, [r3, #12]

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, &input.byte_buffer_rx, LINE_BUFLEN);
 800085e:	2201      	movs	r2, #1
 8000860:	4914      	ldr	r1, [pc, #80]	; (80008b4 <main+0xec>)
 8000862:	4815      	ldr	r0, [pc, #84]	; (80008b8 <main+0xf0>)
 8000864:	f003 f8e4 	bl	8003a30 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 8000868:	23ff      	movs	r3, #255	; 0xff
 800086a:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <main+0xec>)
 8000870:	7b1b      	ldrb	r3, [r3, #12]
 8000872:	2bff      	cmp	r3, #255	; 0xff
 8000874:	d1fb      	bne.n	800086e <main+0xa6>
	  {
		  i = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

		  Debugging = LogicLayer_Parser(&input.line_rx_buffer, LINE_BUFLEN);
 800087c:	4c0f      	ldr	r4, [pc, #60]	; (80008bc <main+0xf4>)
 800087e:	463b      	mov	r3, r7
 8000880:	2201      	movs	r2, #1
 8000882:	490f      	ldr	r1, [pc, #60]	; (80008c0 <main+0xf8>)
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe53 	bl	8000530 <LogicLayer_Parser>
 800088a:	463b      	mov	r3, r7
 800088c:	4620      	mov	r0, r4
 800088e:	4619      	mov	r1, r3
 8000890:	f240 1391 	movw	r3, #401	; 0x191
 8000894:	461a      	mov	r2, r3
 8000896:	f003 ff71 	bl	800477c <memcpy>


		  // Do some stuff
		  printf("yes\n");
 800089a:	480a      	ldr	r0, [pc, #40]	; (80008c4 <main+0xfc>)
 800089c:	f003 fff2 	bl	8004884 <puts>
		  UB_VGA_FillScreen(colorTest);
 80008a0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fcb9 	bl	800121c <UB_VGA_FillScreen>


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 80008aa:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <main+0xec>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	731a      	strb	r2, [r3, #12]
	  if(input.command_execute_flag == TRUE)
 80008b0:	e7dd      	b.n	800086e <main+0xa6>
 80008b2:	bf00      	nop
 80008b4:	200027a8 	.word	0x200027a8
 80008b8:	20002e34 	.word	0x20002e34
 80008bc:	20002bc0 	.word	0x20002bc0
 80008c0:	200027a9 	.word	0x200027a9
 80008c4:	08005184 	.word	0x08005184

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 ff5e 	bl	8004798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <SystemClock_Config+0xcc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a27      	ldr	r2, [pc, #156]	; (8000994 <SystemClock_Config+0xcc>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <SystemClock_Config+0xcc>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <SystemClock_Config+0xd0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <SystemClock_Config+0xd0>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <SystemClock_Config+0xd0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800093c:	23a8      	movs	r3, #168	; 0xa8
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000944:	2304      	movs	r3, #4
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fb7d 	bl	800204c <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000958:	f000 f832 	bl	80009c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000968:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800096c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2105      	movs	r1, #5
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fdd6 	bl	800252c <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000986:	f000 f81b 	bl	80009c0 <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3750      	adds	r7, #80	; 0x50
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 80009a4:	1d39      	adds	r1, r7, #4
 80009a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009aa:	2201      	movs	r2, #1
 80009ac:	4803      	ldr	r0, [pc, #12]	; (80009bc <__io_putchar+0x20>)
 80009ae:	f002 ffa6 	bl	80038fe <HAL_UART_Transmit>
	return ch;												//Return the character
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20002e34 	.word	0x20002e34

080009c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a74:	f000 fc70 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a80:	4828      	ldr	r0, [pc, #160]	; (8000b24 <TIM2_IRQHandler+0xa8>)
 8000a82:	f002 f88b 	bl	8002b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <TIM2_IRQHandler+0xa8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f06f 0208 	mvn.w	r2, #8
 8000a8e:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000a90:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000a9a:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000aa4:	d905      	bls.n	8000ab2 <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000aac:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <TIM2_IRQHandler+0xb0>)
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000ab0:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d802      	bhi.n	8000ac0 <TIM2_IRQHandler+0x44>
 8000aba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000abe:	e001      	b.n	8000ac4 <TIM2_IRQHandler+0x48>
 8000ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <TIM2_IRQHandler+0xb4>)
 8000ac6:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	2b23      	cmp	r3, #35	; 0x23
 8000ace:	d927      	bls.n	8000b20 <TIM2_IRQHandler+0xa4>
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	f240 2202 	movw	r2, #514	; 0x202
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d821      	bhi.n	8000b20 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000adc:	4a15      	ldr	r2, [pc, #84]	; (8000b34 <TIM2_IRQHandler+0xb8>)
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000ae4:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <TIM2_IRQHandler+0xb8>)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <TIM2_IRQHandler+0xbc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a11      	ldr	r2, [pc, #68]	; (8000b38 <TIM2_IRQHandler+0xbc>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <TIM2_IRQHandler+0xc0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <TIM2_IRQHandler+0xc0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f042 0201 	orr.w	r2, r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d005      	beq.n	8000b20 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000b1c:	4a02      	ldr	r2, [pc, #8]	; (8000b28 <TIM2_IRQHandler+0xac>)
 8000b1e:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20002df4 	.word	0x20002df4
 8000b28:	20002e74 	.word	0x20002e74
 8000b2c:	20002e80 	.word	0x20002e80
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40026488 	.word	0x40026488
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	20002d94 	.word	0x20002d94

08000b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <USART2_IRQHandler+0x60>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b0a      	cmp	r3, #10
 8000b50:	d01e      	beq.n	8000b90 <USART2_IRQHandler+0x50>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b0d      	cmp	r3, #13
 8000b56:	d002      	beq.n	8000b5e <USART2_IRQHandler+0x1e>
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8000b5c:	d10a      	bne.n	8000b74 <USART2_IRQHandler+0x34>
		{
			input.command_execute_flag = TRUE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <USART2_IRQHandler+0x64>)
 8000b60:	22ff      	movs	r2, #255	; 0xff
 8000b62:	731a      	strb	r2, [r3, #12]
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <USART2_IRQHandler+0x64>)
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <USART2_IRQHandler+0x64>)
 8000b6a:	6053      	str	r3, [r2, #4]
			// Reset the counter for the next line
			input.char_counter = 0;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <USART2_IRQHandler+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	e00d      	b.n	8000b90 <USART2_IRQHandler+0x50>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <USART2_IRQHandler+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	731a      	strb	r2, [r3, #12]
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <USART2_IRQHandler+0x64>)
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <USART2_IRQHandler+0x64>)
 8000b80:	4413      	add	r3, r2
 8000b82:	79fa      	ldrb	r2, [r7, #7]
 8000b84:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <USART2_IRQHandler+0x64>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <USART2_IRQHandler+0x64>)
 8000b8e:	6093      	str	r3, [r2, #8]
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <USART2_IRQHandler+0x68>)
 8000b92:	f002 ffa3 	bl	8003adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	200027a8 	.word	0x200027a8
 8000ba8:	20002e34 	.word	0x20002e34

08000bac <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <DMA2_Stream5_IRQHandler+0x48>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6a1a      	ldr	r2, [r3, #32]
 8000bb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8000bba:	4013      	ands	r3, r2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10f      	bne.n	8000be0 <DMA2_Stream5_IRQHandler+0x34>
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <DMA2_Stream5_IRQHandler+0x48>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6a1a      	ldr	r2, [r3, #32]
 8000bc6:	f240 4344 	movw	r3, #1092	; 0x444
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d107      	bne.n	8000be0 <DMA2_Stream5_IRQHandler+0x34>
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <DMA2_Stream5_IRQHandler+0x48>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <DMA2_Stream5_IRQHandler+0x48>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f022 0201 	bic.w	r2, r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <DMA2_Stream5_IRQHandler+0x4c>)
 8000be2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000be6:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000be8:	4804      	ldr	r0, [pc, #16]	; (8000bfc <DMA2_Stream5_IRQHandler+0x50>)
 8000bea:	f000 fe0f 	bl	800180c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20002d54 	.word	0x20002d54
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	20002d94 	.word	0x20002d94

08000c00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e00a      	b.n	8000c28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c12:	f3af 8000 	nop.w
 8000c16:	4601      	mov	r1, r0
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	b2ca      	uxtb	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf0      	blt.n	8000c12 <_read+0x12>
	}

return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e009      	b.n	8000c60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fea1 	bl	800099c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf1      	blt.n	8000c4c <_write+0x12>
	}
	return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_close>:

int _close(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
	return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_isatty>:

int _isatty(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
	return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_sbrk+0x50>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x16>
		heap_end = &end;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <_sbrk+0x50>)
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <_sbrk+0x54>)
 8000cf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <_sbrk+0x50>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <_sbrk+0x50>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	466a      	mov	r2, sp
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d907      	bls.n	8000d16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d06:	f003 fd0f 	bl	8004728 <__errno>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	220c      	movs	r2, #12
 8000d0e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d14:	e006      	b.n	8000d24 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <_sbrk+0x50>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a03      	ldr	r2, [pc, #12]	; (8000d2c <_sbrk+0x50>)
 8000d20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2000279c 	.word	0x2000279c
 8000d30:	20015b88 	.word	0x20015b88

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <SystemInit+0x28>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <SystemInit+0x28>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SystemInit+0x28>)
 8000d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d7e:	4a1f      	ldr	r2, [pc, #124]	; (8000dfc <MX_TIM1_Init+0x9c>)
 8000d80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d90:	220b      	movs	r2, #11
 8000d92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000da6:	4814      	ldr	r0, [pc, #80]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000da8:	f001 fdbc 	bl	8002924 <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000db2:	f7ff fe05 	bl	80009c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000dc4:	f002 f8b8 	bl	8002f38 <HAL_TIM_ConfigClockSource>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000dce:	f7ff fdf7 	bl	80009c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_TIM1_Init+0x98>)
 8000de0:	f002 fcb0 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000dea:	f7ff fde9 	bl	80009c0 <Error_Handler>
  }

}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20002d54 	.word	0x20002d54
 8000dfc:	40010000 	.word	0x40010000

08000e00 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e06:	f107 0320 	add.w	r3, r7, #32
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000e24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000e2a:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000e38:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000e3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e4a:	4820      	ldr	r0, [pc, #128]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000e4c:	f001 fdb9 	bl	80029c2 <HAL_TIM_PWM_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e56:	f7ff fdb3 	bl	80009c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	4619      	mov	r1, r3
 8000e68:	4818      	ldr	r0, [pc, #96]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000e6a:	f002 fc6b 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e74:	f7ff fda4 	bl	80009c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e78:	2360      	movs	r3, #96	; 0x60
 8000e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000e7c:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000e80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e82:	2302      	movs	r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2208      	movs	r2, #8
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480e      	ldr	r0, [pc, #56]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000e92:	f001 ff8b 	bl	8002dac <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e9c:	f7ff fd90 	bl	80009c0 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000ea0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	220c      	movs	r2, #12
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4807      	ldr	r0, [pc, #28]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000eae:	f001 ff7d 	bl	8002dac <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000eb8:	f7ff fd82 	bl	80009c0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000ebc:	4803      	ldr	r0, [pc, #12]	; (8000ecc <MX_TIM2_Init+0xcc>)
 8000ebe:	f000 f87f 	bl	8000fc0 <HAL_TIM_MspPostInit>

}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20002df4 	.word	0x20002df4

08000ed0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <HAL_TIM_Base_MspInit+0x94>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d13c      	bne.n	8000f5c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <HAL_TIM_Base_MspInit+0x98>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_TIM_Base_MspInit+0x98>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <HAL_TIM_Base_MspInit+0x98>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f00:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <HAL_TIM_Base_MspInit+0xa0>)
 8000f02:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f06:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f0a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f0e:	2240      	movs	r2, #64	; 0x40
 8000f10:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1e:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f38:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000f40:	480a      	ldr	r0, [pc, #40]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f42:	f000 fb3b 	bl	80015bc <HAL_DMA_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000f4c:	f7ff fd38 	bl	80009c0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f54:	621a      	str	r2, [r3, #32]
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <HAL_TIM_Base_MspInit+0x9c>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40010000 	.word	0x40010000
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	20002d94 	.word	0x20002d94
 8000f70:	40026488 	.word	0x40026488

08000f74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f84:	d115      	bne.n	8000fb2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_TIM_PWM_MspInit+0x48>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_TIM_PWM_MspInit+0x48>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_TIM_PWM_MspInit+0x48>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	201c      	movs	r0, #28
 8000fa8:	f000 fad1 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fac:	201c      	movs	r0, #28
 8000fae:	f000 faea 	bl	8001586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe0:	d11e      	bne.n	8001020 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_TIM_MspPostInit+0x68>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_TIM_MspPostInit+0x68>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_TIM_MspPostInit+0x68>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000ffe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001002:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001010:	2301      	movs	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	4804      	ldr	r0, [pc, #16]	; (800102c <HAL_TIM_MspPostInit+0x6c>)
 800101c:	f000 fe60 	bl	8001ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40020400 	.word	0x40020400

08001030 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	; (8001080 <MX_USART2_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_USART2_UART_Init+0x4c>)
 8001068:	f002 fbfc 	bl	8003864 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f7ff fca5 	bl	80009c0 <Error_Handler>
  }

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20002e34 	.word	0x20002e34
 8001080:	40004400 	.word	0x40004400

08001084 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <HAL_UART_MspInit+0x94>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d133      	bne.n	800110e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <HAL_UART_MspInit+0x98>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a1b      	ldr	r2, [pc, #108]	; (800111c <HAL_UART_MspInit+0x98>)
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_UART_MspInit+0x98>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <HAL_UART_MspInit+0x98>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a14      	ldr	r2, [pc, #80]	; (800111c <HAL_UART_MspInit+0x98>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_UART_MspInit+0x98>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010de:	230c      	movs	r3, #12
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ee:	2307      	movs	r3, #7
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <HAL_UART_MspInit+0x9c>)
 80010fa:	f000 fdf1 	bl	8001ce0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	2026      	movs	r0, #38	; 0x26
 8001104:	f000 fa23 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001108:	2026      	movs	r0, #38	; 0x26
 800110a:	f000 fa3c 	bl	8001586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40004400 	.word	0x40004400
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800115c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001128:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800112a:	e003      	b.n	8001134 <LoopCopyDataInit>

0800112c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800112e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001130:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001132:	3104      	adds	r1, #4

08001134 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001134:	480b      	ldr	r0, [pc, #44]	; (8001164 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001138:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800113a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800113c:	d3f6      	bcc.n	800112c <CopyDataInit>
  ldr  r2, =_sbss
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001140:	e002      	b.n	8001148 <LoopFillZerobss>

08001142 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001142:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001144:	f842 3b04 	str.w	r3, [r2], #4

08001148 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800114a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800114c:	d3f9      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800114e:	f7ff fdf1 	bl	8000d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f003 faef 	bl	8004734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fb37 	bl	80007c8 <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800115c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001160:	0800521c 	.word	0x0800521c
  ldr  r0, =_sdata
 8001164:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001168:	20002780 	.word	0x20002780
  ldr  r2, =_sbss
 800116c:	20002780 	.word	0x20002780
  ldr  r3, = _ebss
 8001170:	20015b84 	.word	0x20015b84

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>
	...

08001178 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 800117c:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <UB_VGA_Screen_Init+0x84>)
 800117e:	2200      	movs	r2, #0
 8001180:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <UB_VGA_Screen_Init+0x84>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001188:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <UB_VGA_Screen_Init+0x84>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <UB_VGA_Screen_Init+0x88>)
 8001190:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001194:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 8001196:	481b      	ldr	r0, [pc, #108]	; (8001204 <UB_VGA_Screen_Init+0x8c>)
 8001198:	f001 fbef 	bl	800297a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800119c:	210c      	movs	r1, #12
 800119e:	4819      	ldr	r0, [pc, #100]	; (8001204 <UB_VGA_Screen_Init+0x8c>)
 80011a0:	f001 fc3a 	bl	8002a18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80011a4:	2108      	movs	r1, #8
 80011a6:	4817      	ldr	r0, [pc, #92]	; (8001204 <UB_VGA_Screen_Init+0x8c>)
 80011a8:	f001 fc74 	bl	8002a94 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <UB_VGA_Screen_Init+0x90>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <UB_VGA_Screen_Init+0x90>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011ba:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <UB_VGA_Screen_Init+0x90>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <UB_VGA_Screen_Init+0x90>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80011cc:	490f      	ldr	r1, [pc, #60]	; (800120c <UB_VGA_Screen_Init+0x94>)
 80011ce:	f240 1341 	movw	r3, #321	; 0x141
 80011d2:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <UB_VGA_Screen_Init+0x98>)
 80011d4:	480f      	ldr	r0, [pc, #60]	; (8001214 <UB_VGA_Screen_Init+0x9c>)
 80011d6:	f000 fa9f 	bl	8001718 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80011da:	480e      	ldr	r0, [pc, #56]	; (8001214 <UB_VGA_Screen_Init+0x9c>)
 80011dc:	f000 f9ee 	bl	80015bc <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <UB_VGA_Screen_Init+0x9c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <UB_VGA_Screen_Init+0x9c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0210 	orr.w	r2, r2, #16
 80011ee:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <UB_VGA_Screen_Init+0xa0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a01      	ldr	r2, [pc, #4]	; (80011fc <UB_VGA_Screen_Init+0x84>)
 80011f6:	6093      	str	r3, [r2, #8]
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20002e74 	.word	0x20002e74
 8001200:	40020400 	.word	0x40020400
 8001204:	20002df4 	.word	0x20002df4
 8001208:	20002d54 	.word	0x20002d54
 800120c:	20002e80 	.word	0x20002e80
 8001210:	40021015 	.word	0x40021015
 8001214:	20002d94 	.word	0x20002d94
 8001218:	40026488 	.word	0x40026488

0800121c <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8001226:	2300      	movs	r3, #0
 8001228:	81bb      	strh	r3, [r7, #12]
 800122a:	e012      	b.n	8001252 <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800122c:	2300      	movs	r3, #0
 800122e:	81fb      	strh	r3, [r7, #14]
 8001230:	e008      	b.n	8001244 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	89b9      	ldrh	r1, [r7, #12]
 8001236:	89fb      	ldrh	r3, [r7, #14]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f813 	bl	8001264 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	3301      	adds	r3, #1
 8001242:	81fb      	strh	r3, [r7, #14]
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800124a:	d3f2      	bcc.n	8001232 <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	3301      	adds	r3, #1
 8001250:	81bb      	strh	r3, [r7, #12]
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	2bef      	cmp	r3, #239	; 0xef
 8001256:	d9e9      	bls.n	800122c <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	80fb      	strh	r3, [r7, #6]
 800126e:	460b      	mov	r3, r1
 8001270:	80bb      	strh	r3, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800127c:	d301      	bcc.n	8001282 <UB_VGA_SetPixel+0x1e>
    xp = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 8001282:	88bb      	ldrh	r3, [r7, #4]
 8001284:	2bef      	cmp	r3, #239	; 0xef
 8001286:	d901      	bls.n	800128c <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 800128c:	88ba      	ldrh	r2, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	441a      	add	r2, r3
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	4413      	add	r3, r2
 800129c:	4904      	ldr	r1, [pc, #16]	; (80012b0 <UB_VGA_SetPixel+0x4c>)
 800129e:	78fa      	ldrb	r2, [r7, #3]
 80012a0:	54ca      	strb	r2, [r1, r3]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20002e80 	.word	0x20002e80

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <HAL_Init+0x40>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_Init+0x40>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_Init+0x40>)
 80012d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f92b 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f808 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fb72 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f943 	bl	80015a2 <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001334:	f000 f90b 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20002710 	.word	0x20002710
 8001350:	20002718 	.word	0x20002718
 8001354:	20002714 	.word	0x20002714

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20002718 	.word	0x20002718
 800137c:	20015b70 	.word	0x20015b70

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20015b70 	.word	0x20015b70

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4907      	ldr	r1, [pc, #28]	; (8001434 <__NVIC_EnableIRQ+0x38>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff29 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff3e 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff8e 	bl	800148c <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5d 	bl	8001438 <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff31 	bl	80013fc <__NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffa2 	bl	80014f4 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff feda 	bl	8001380 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e099      	b.n	800170c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f8:	e00f      	b.n	800161a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015fa:	f7ff fec1 	bl	8001380 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b05      	cmp	r3, #5
 8001606:	d908      	bls.n	800161a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2220      	movs	r2, #32
 800160c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e078      	b.n	800170c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1e8      	bne.n	80015fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_DMA_Init+0x158>)
 8001634:	4013      	ands	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001646:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4313      	orrs	r3, r2
 800166a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	2b04      	cmp	r3, #4
 8001672:	d107      	bne.n	8001684 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4313      	orrs	r3, r2
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f023 0307 	bic.w	r3, r3, #7
 800169a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d117      	bne.n	80016de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00e      	beq.n	80016de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fa91 	bl	8001be8 <DMA_CheckFifoParam>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2240      	movs	r2, #64	; 0x40
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80016da:	2301      	movs	r3, #1
 80016dc:	e016      	b.n	800170c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fa48 	bl	8001b7c <DMA_CalcBaseAndBitshift>
 80016ec:	4603      	mov	r3, r0
 80016ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f4:	223f      	movs	r2, #63	; 0x3f
 80016f6:	409a      	lsls	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	f010803f 	.word	0xf010803f

08001718 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_DMA_Start_IT+0x26>
 800173a:	2302      	movs	r3, #2
 800173c:	e040      	b.n	80017c0 <HAL_DMA_Start_IT+0xa8>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d12f      	bne.n	80017b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2202      	movs	r2, #2
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 f9da 	bl	8001b20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001770:	223f      	movs	r2, #63	; 0x3f
 8001772:	409a      	lsls	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0216 	orr.w	r2, r2, #22
 8001786:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0208 	orr.w	r2, r2, #8
 800179e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e005      	b.n	80017be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ba:	2302      	movs	r3, #2
 80017bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017be:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d004      	beq.n	80017e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00c      	b.n	8001800 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2205      	movs	r2, #5
 80017ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001818:	4b92      	ldr	r3, [pc, #584]	; (8001a64 <HAL_DMA_IRQHandler+0x258>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a92      	ldr	r2, [pc, #584]	; (8001a68 <HAL_DMA_IRQHandler+0x25c>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0a9b      	lsrs	r3, r3, #10
 8001824:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001836:	2208      	movs	r2, #8
 8001838:	409a      	lsls	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01a      	beq.n	8001878 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0204 	bic.w	r2, r2, #4
 800185e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001864:	2208      	movs	r2, #8
 8001866:	409a      	lsls	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	f043 0201 	orr.w	r2, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	2201      	movs	r2, #1
 800187e:	409a      	lsls	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d012      	beq.n	80018ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	2201      	movs	r2, #1
 800189c:	409a      	lsls	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a6:	f043 0202 	orr.w	r2, r3, #2
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b2:	2204      	movs	r2, #4
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d012      	beq.n	80018e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00b      	beq.n	80018e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d0:	2204      	movs	r2, #4
 80018d2:	409a      	lsls	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f043 0204 	orr.w	r2, r3, #4
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e8:	2210      	movs	r2, #16
 80018ea:	409a      	lsls	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d043      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d03c      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001906:	2210      	movs	r2, #16
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d018      	beq.n	800194e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d108      	bne.n	800193c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b00      	cmp	r3, #0
 8001930:	d024      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
 800193a:	e01f      	b.n	800197c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01b      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4798      	blx	r3
 800194c:	e016      	b.n	800197c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d107      	bne.n	800196c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0208 	bic.w	r2, r2, #8
 800196a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001980:	2220      	movs	r2, #32
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 808e 	beq.w	8001aaa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8086 	beq.w	8001aaa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2220      	movs	r2, #32
 80019a4:	409a      	lsls	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d136      	bne.n	8001a24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0216 	bic.w	r2, r2, #22
 80019c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d103      	bne.n	80019e6 <HAL_DMA_IRQHandler+0x1da>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0208 	bic.w	r2, r2, #8
 80019f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	223f      	movs	r2, #63	; 0x3f
 80019fc:	409a      	lsls	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d07d      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
        }
        return;
 8001a22:	e078      	b.n	8001b16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01c      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d108      	bne.n	8001a52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d030      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
 8001a50:	e02b      	b.n	8001aaa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d027      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	4798      	blx	r3
 8001a62:	e022      	b.n	8001aaa <HAL_DMA_IRQHandler+0x29e>
 8001a64:	20002710 	.word	0x20002710
 8001a68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0210 	bic.w	r2, r2, #16
 8001a88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d032      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d022      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 0201 	bic.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d307      	bcc.n	8001af2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f2      	bne.n	8001ad6 <HAL_DMA_IRQHandler+0x2ca>
 8001af0:	e000      	b.n	8001af4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001af2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
 8001b14:	e000      	b.n	8001b18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b16:	bf00      	nop
    }
  }
}
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop

08001b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b40      	cmp	r3, #64	; 0x40
 8001b4c:	d108      	bne.n	8001b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b5e:	e007      	b.n	8001b70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	60da      	str	r2, [r3, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3b10      	subs	r3, #16
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <DMA_CalcBaseAndBitshift+0x64>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <DMA_CalcBaseAndBitshift+0x68>)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d909      	bls.n	8001bbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bb2:	f023 0303 	bic.w	r3, r3, #3
 8001bb6:	1d1a      	adds	r2, r3, #4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	659a      	str	r2, [r3, #88]	; 0x58
 8001bbc:	e007      	b.n	8001bce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bc6:	f023 0303 	bic.w	r3, r3, #3
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	aaaaaaab 	.word	0xaaaaaaab
 8001be4:	080051a0 	.word	0x080051a0

08001be8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d11f      	bne.n	8001c42 <DMA_CheckFifoParam+0x5a>
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d856      	bhi.n	8001cb6 <DMA_CheckFifoParam+0xce>
 8001c08:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <DMA_CheckFifoParam+0x28>)
 8001c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0e:	bf00      	nop
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001c33 	.word	0x08001c33
 8001c18:	08001c21 	.word	0x08001c21
 8001c1c:	08001cb7 	.word	0x08001cb7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d046      	beq.n	8001cba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c30:	e043      	b.n	8001cba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c3a:	d140      	bne.n	8001cbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c40:	e03d      	b.n	8001cbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c4a:	d121      	bne.n	8001c90 <DMA_CheckFifoParam+0xa8>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d837      	bhi.n	8001cc2 <DMA_CheckFifoParam+0xda>
 8001c52:	a201      	add	r2, pc, #4	; (adr r2, 8001c58 <DMA_CheckFifoParam+0x70>)
 8001c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c58:	08001c69 	.word	0x08001c69
 8001c5c:	08001c6f 	.word	0x08001c6f
 8001c60:	08001c69 	.word	0x08001c69
 8001c64:	08001c81 	.word	0x08001c81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c6c:	e030      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d025      	beq.n	8001cc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c7e:	e022      	b.n	8001cc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c88:	d11f      	bne.n	8001cca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c8e:	e01c      	b.n	8001cca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d903      	bls.n	8001c9e <DMA_CheckFifoParam+0xb6>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d003      	beq.n	8001ca4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c9c:	e018      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ca2:	e015      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00e      	beq.n	8001cce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb4:	e00b      	b.n	8001cce <DMA_CheckFifoParam+0xe6>
      break;
 8001cb6:	bf00      	nop
 8001cb8:	e00a      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cba:	bf00      	nop
 8001cbc:	e008      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cbe:	bf00      	nop
 8001cc0:	e006      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc2:	bf00      	nop
 8001cc4:	e004      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc6:	bf00      	nop
 8001cc8:	e002      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cca:	bf00      	nop
 8001ccc:	e000      	b.n	8001cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8001cce:	bf00      	nop
    }
  } 
  
  return status; 
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop

08001ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e16b      	b.n	8001fd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 815a 	bne.w	8001fce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d00b      	beq.n	8001d3a <HAL_GPIO_Init+0x5a>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d2e:	2b11      	cmp	r3, #17
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b12      	cmp	r3, #18
 8001d38:	d130      	bne.n	8001d9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 0201 	and.w	r2, r3, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0xfc>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b12      	cmp	r3, #18
 8001dda:	d123      	bne.n	8001e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	220f      	movs	r2, #15
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	69b9      	ldr	r1, [r7, #24]
 8001e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	2203      	movs	r2, #3
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0203 	and.w	r2, r3, #3
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80b4 	beq.w	8001fce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b60      	ldr	r3, [pc, #384]	; (8001fec <HAL_GPIO_Init+0x30c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a5f      	ldr	r2, [pc, #380]	; (8001fec <HAL_GPIO_Init+0x30c>)
 8001e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b5d      	ldr	r3, [pc, #372]	; (8001fec <HAL_GPIO_Init+0x30c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e82:	4a5b      	ldr	r2, [pc, #364]	; (8001ff0 <HAL_GPIO_Init+0x310>)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a52      	ldr	r2, [pc, #328]	; (8001ff4 <HAL_GPIO_Init+0x314>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d02b      	beq.n	8001f06 <HAL_GPIO_Init+0x226>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a51      	ldr	r2, [pc, #324]	; (8001ff8 <HAL_GPIO_Init+0x318>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d025      	beq.n	8001f02 <HAL_GPIO_Init+0x222>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a50      	ldr	r2, [pc, #320]	; (8001ffc <HAL_GPIO_Init+0x31c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01f      	beq.n	8001efe <HAL_GPIO_Init+0x21e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4f      	ldr	r2, [pc, #316]	; (8002000 <HAL_GPIO_Init+0x320>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d019      	beq.n	8001efa <HAL_GPIO_Init+0x21a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4e      	ldr	r2, [pc, #312]	; (8002004 <HAL_GPIO_Init+0x324>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <HAL_GPIO_Init+0x216>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4d      	ldr	r2, [pc, #308]	; (8002008 <HAL_GPIO_Init+0x328>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00d      	beq.n	8001ef2 <HAL_GPIO_Init+0x212>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4c      	ldr	r2, [pc, #304]	; (800200c <HAL_GPIO_Init+0x32c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <HAL_GPIO_Init+0x20e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_GPIO_Init+0x330>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_GPIO_Init+0x20a>
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	e00e      	b.n	8001f08 <HAL_GPIO_Init+0x228>
 8001eea:	2308      	movs	r3, #8
 8001eec:	e00c      	b.n	8001f08 <HAL_GPIO_Init+0x228>
 8001eee:	2306      	movs	r3, #6
 8001ef0:	e00a      	b.n	8001f08 <HAL_GPIO_Init+0x228>
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	e008      	b.n	8001f08 <HAL_GPIO_Init+0x228>
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	e006      	b.n	8001f08 <HAL_GPIO_Init+0x228>
 8001efa:	2303      	movs	r3, #3
 8001efc:	e004      	b.n	8001f08 <HAL_GPIO_Init+0x228>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e002      	b.n	8001f08 <HAL_GPIO_Init+0x228>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_GPIO_Init+0x228>
 8001f06:	2300      	movs	r3, #0
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	f002 0203 	and.w	r2, r2, #3
 8001f0e:	0092      	lsls	r2, r2, #2
 8001f10:	4093      	lsls	r3, r2
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f18:	4935      	ldr	r1, [pc, #212]	; (8001ff0 <HAL_GPIO_Init+0x310>)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f26:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f4a:	4a32      	ldr	r2, [pc, #200]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f50:	4b30      	ldr	r3, [pc, #192]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f74:	4a27      	ldr	r2, [pc, #156]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <HAL_GPIO_Init+0x334>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b0f      	cmp	r3, #15
 8001fd8:	f67f ae90 	bls.w	8001cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3724      	adds	r7, #36	; 0x24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40013800 	.word	0x40013800
 8001ff4:	40020000 	.word	0x40020000
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40021400 	.word	0x40021400
 800200c:	40021800 	.word	0x40021800
 8002010:	40021c00 	.word	0x40021c00
 8002014:	40013c00 	.word	0x40013c00

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	619a      	str	r2, [r3, #24]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e25b      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d075      	beq.n	8002156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206a:	4ba3      	ldr	r3, [pc, #652]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d00c      	beq.n	8002090 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002076:	4ba0      	ldr	r3, [pc, #640]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800207e:	2b08      	cmp	r3, #8
 8002080:	d112      	bne.n	80020a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002082:	4b9d      	ldr	r3, [pc, #628]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800208e:	d10b      	bne.n	80020a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	4b99      	ldr	r3, [pc, #612]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d05b      	beq.n	8002154 <HAL_RCC_OscConfig+0x108>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d157      	bne.n	8002154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e236      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d106      	bne.n	80020c0 <HAL_RCC_OscConfig+0x74>
 80020b2:	4b91      	ldr	r3, [pc, #580]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a90      	ldr	r2, [pc, #576]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xb0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x98>
 80020ca:	4b8b      	ldr	r3, [pc, #556]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a8a      	ldr	r2, [pc, #552]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b88      	ldr	r3, [pc, #544]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a87      	ldr	r2, [pc, #540]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xb0>
 80020e4:	4b84      	ldr	r3, [pc, #528]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a83      	ldr	r2, [pc, #524]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a80      	ldr	r2, [pc, #512]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff f93c 	bl	8001380 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff f938 	bl	8001380 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e1fb      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b76      	ldr	r3, [pc, #472]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xc0>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff f928 	bl	8001380 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff f924 	bl	8001380 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1e7      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0xe8>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d063      	beq.n	800222a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002162:	4b65      	ldr	r3, [pc, #404]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216e:	4b62      	ldr	r3, [pc, #392]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217a:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b5c      	ldr	r3, [pc, #368]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x152>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1bb      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b56      	ldr	r3, [pc, #344]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4952      	ldr	r1, [pc, #328]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e03a      	b.n	800222a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b4f      	ldr	r3, [pc, #316]	; (80022fc <HAL_RCC_OscConfig+0x2b0>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7ff f8dd 	bl	8001380 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff f8d9 	bl	8001380 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e19c      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4940      	ldr	r1, [pc, #256]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <HAL_RCC_OscConfig+0x2b0>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff f8bc 	bl	8001380 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220c:	f7ff f8b8 	bl	8001380 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e17b      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d030      	beq.n	8002298 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_RCC_OscConfig+0x2b4>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7ff f89c 	bl	8001380 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff f898 	bl	8001380 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e15b      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b26      	ldr	r3, [pc, #152]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x200>
 800226a:	e015      	b.n	8002298 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226c:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_OscConfig+0x2b4>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7ff f885 	bl	8001380 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227a:	f7ff f881 	bl	8001380 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e144      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 800228e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f0      	bne.n	800227a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80a0 	beq.w	80023e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10f      	bne.n	80022d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d2:	2301      	movs	r3, #1
 80022d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_OscConfig+0x2b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d121      	bne.n	8002326 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_RCC_OscConfig+0x2b8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_RCC_OscConfig+0x2b8>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ee:	f7ff f847 	bl	8001380 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f4:	e011      	b.n	800231a <HAL_RCC_OscConfig+0x2ce>
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	42470000 	.word	0x42470000
 8002300:	42470e80 	.word	0x42470e80
 8002304:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002308:	f7ff f83a 	bl	8001380 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0fd      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b81      	ldr	r3, [pc, #516]	; (8002520 <HAL_RCC_OscConfig+0x4d4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d106      	bne.n	800233c <HAL_RCC_OscConfig+0x2f0>
 800232e:	4b7d      	ldr	r3, [pc, #500]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a7c      	ldr	r2, [pc, #496]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
 800233a:	e01c      	b.n	8002376 <HAL_RCC_OscConfig+0x32a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x312>
 8002344:	4b77      	ldr	r3, [pc, #476]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	4a76      	ldr	r2, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6713      	str	r3, [r2, #112]	; 0x70
 8002350:	4b74      	ldr	r3, [pc, #464]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4a73      	ldr	r2, [pc, #460]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6713      	str	r3, [r2, #112]	; 0x70
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x32a>
 800235e:	4b71      	ldr	r3, [pc, #452]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	4a70      	ldr	r2, [pc, #448]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6713      	str	r3, [r2, #112]	; 0x70
 800236a:	4b6e      	ldr	r3, [pc, #440]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a6d      	ldr	r2, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237e:	f7fe ffff 	bl	8001380 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe fffb 	bl	8001380 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0bc      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b61      	ldr	r3, [pc, #388]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RCC_OscConfig+0x33a>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7fe ffe9 	bl	8001380 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe ffe5 	bl	8001380 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0a6      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4b56      	ldr	r3, [pc, #344]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b52      	ldr	r3, [pc, #328]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a51      	ldr	r2, [pc, #324]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8092 	beq.w	8002514 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023f0:	4b4c      	ldr	r3, [pc, #304]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d05c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d141      	bne.n	8002488 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b48      	ldr	r3, [pc, #288]	; (8002528 <HAL_RCC_OscConfig+0x4dc>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe ffb9 	bl	8001380 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe ffb5 	bl	8001380 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e078      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002424:	4b3f      	ldr	r3, [pc, #252]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69da      	ldr	r2, [r3, #28]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	019b      	lsls	r3, r3, #6
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	3b01      	subs	r3, #1
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	061b      	lsls	r3, r3, #24
 8002454:	4933      	ldr	r1, [pc, #204]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800245a:	4b33      	ldr	r3, [pc, #204]	; (8002528 <HAL_RCC_OscConfig+0x4dc>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe ff8e 	bl	8001380 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe ff8a 	bl	8001380 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e04d      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x41c>
 8002486:	e045      	b.n	8002514 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_RCC_OscConfig+0x4dc>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7fe ff77 	bl	8001380 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002496:	f7fe ff73 	bl	8001380 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e036      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a8:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x44a>
 80024b4:	e02e      	b.n	8002514 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e029      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_RCC_OscConfig+0x4d8>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d11c      	bne.n	8002510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d115      	bne.n	8002510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024ea:	4013      	ands	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d10d      	bne.n	8002510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024fe:	429a      	cmp	r2, r3
 8002500:	d106      	bne.n	8002510 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40007000 	.word	0x40007000
 8002524:	40023800 	.word	0x40023800
 8002528:	42470060 	.word	0x42470060

0800252c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0cc      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b68      	ldr	r3, [pc, #416]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d90c      	bls.n	8002568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b65      	ldr	r3, [pc, #404]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e0b8      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002580:	4b59      	ldr	r3, [pc, #356]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a58      	ldr	r2, [pc, #352]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800258a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002598:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a52      	ldr	r2, [pc, #328]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a4:	4b50      	ldr	r3, [pc, #320]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	494d      	ldr	r1, [pc, #308]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d044      	beq.n	800264c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d119      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e07f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d003      	beq.n	80025ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e067      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260a:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f023 0203 	bic.w	r2, r3, #3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	4934      	ldr	r1, [pc, #208]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	4313      	orrs	r3, r2
 800261a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800261c:	f7fe feb0 	bl	8001380 <HAL_GetTick>
 8002620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	e00a      	b.n	800263a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002624:	f7fe feac 	bl	8001380 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d901      	bls.n	800263a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e04f      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 020c 	and.w	r2, r3, #12
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	429a      	cmp	r2, r3
 800264a:	d1eb      	bne.n	8002624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d20c      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e032      	b.n	80026da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4916      	ldr	r1, [pc, #88]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	490e      	ldr	r1, [pc, #56]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026b2:	f000 f821 	bl	80026f8 <HAL_RCC_GetSysClockFreq>
 80026b6:	4602      	mov	r2, r0
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	490a      	ldr	r1, [pc, #40]	; (80026ec <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	5ccb      	ldrb	r3, [r1, r3]
 80026c6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ca:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fe10 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00
 80026e8:	40023800 	.word	0x40023800
 80026ec:	08005188 	.word	0x08005188
 80026f0:	20002710 	.word	0x20002710
 80026f4:	20002714 	.word	0x20002714

080026f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026fc:	b084      	sub	sp, #16
 80026fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002700:	2300      	movs	r3, #0
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	2300      	movs	r3, #0
 800270a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002710:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d00d      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x40>
 800271c:	2b08      	cmp	r3, #8
 800271e:	f200 80bd 	bhi.w	800289c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x34>
 8002726:	2b04      	cmp	r3, #4
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x3a>
 800272a:	e0b7      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800272c:	4b61      	ldr	r3, [pc, #388]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800272e:	60bb      	str	r3, [r7, #8]
       break;
 8002730:	e0b7      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002732:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002734:	60bb      	str	r3, [r7, #8]
      break;
 8002736:	e0b4      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002738:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002740:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002742:	4b5b      	ldr	r3, [pc, #364]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d04d      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b58      	ldr	r3, [pc, #352]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	461a      	mov	r2, r3
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	ea02 0800 	and.w	r8, r2, r0
 8002766:	ea03 0901 	and.w	r9, r3, r1
 800276a:	4640      	mov	r0, r8
 800276c:	4649      	mov	r1, r9
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	014b      	lsls	r3, r1, #5
 8002778:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800277c:	0142      	lsls	r2, r0, #5
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	ebb0 0008 	subs.w	r0, r0, r8
 8002786:	eb61 0109 	sbc.w	r1, r1, r9
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	018b      	lsls	r3, r1, #6
 8002794:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002798:	0182      	lsls	r2, r0, #6
 800279a:	1a12      	subs	r2, r2, r0
 800279c:	eb63 0301 	sbc.w	r3, r3, r1
 80027a0:	f04f 0000 	mov.w	r0, #0
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	00d9      	lsls	r1, r3, #3
 80027aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027ae:	00d0      	lsls	r0, r2, #3
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	eb12 0208 	adds.w	r2, r2, r8
 80027b8:	eb43 0309 	adc.w	r3, r3, r9
 80027bc:	f04f 0000 	mov.w	r0, #0
 80027c0:	f04f 0100 	mov.w	r1, #0
 80027c4:	0259      	lsls	r1, r3, #9
 80027c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80027ca:	0250      	lsls	r0, r2, #9
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	f7fd fcf4 	bl	80001c8 <__aeabi_uldivmod>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4613      	mov	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e04a      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	099b      	lsrs	r3, r3, #6
 80027f0:	461a      	mov	r2, r3
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	ea02 0400 	and.w	r4, r2, r0
 8002802:	ea03 0501 	and.w	r5, r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	014b      	lsls	r3, r1, #5
 8002814:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002818:	0142      	lsls	r2, r0, #5
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	1b00      	subs	r0, r0, r4
 8002820:	eb61 0105 	sbc.w	r1, r1, r5
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	018b      	lsls	r3, r1, #6
 800282e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002832:	0182      	lsls	r2, r0, #6
 8002834:	1a12      	subs	r2, r2, r0
 8002836:	eb63 0301 	sbc.w	r3, r3, r1
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	00d9      	lsls	r1, r3, #3
 8002844:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002848:	00d0      	lsls	r0, r2, #3
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	1912      	adds	r2, r2, r4
 8002850:	eb45 0303 	adc.w	r3, r5, r3
 8002854:	f04f 0000 	mov.w	r0, #0
 8002858:	f04f 0100 	mov.w	r1, #0
 800285c:	0299      	lsls	r1, r3, #10
 800285e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002862:	0290      	lsls	r0, r2, #10
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4610      	mov	r0, r2
 800286a:	4619      	mov	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	461a      	mov	r2, r3
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	f7fd fca8 	bl	80001c8 <__aeabi_uldivmod>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4613      	mov	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0c1b      	lsrs	r3, r3, #16
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	60bb      	str	r3, [r7, #8]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800289e:	60bb      	str	r3, [r7, #8]
      break;
 80028a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a2:	68bb      	ldr	r3, [r7, #8]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	00f42400 	.word	0x00f42400
 80028b8:	007a1200 	.word	0x007a1200

080028bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20002710 	.word	0x20002710

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff0 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0a9b      	lsrs	r3, r3, #10
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08005198 	.word	0x08005198

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffdc 	bl	80028bc <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	0b5b      	lsrs	r3, r3, #13
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	08005198 	.word	0x08005198

08002924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e01d      	b.n	8002972 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe fac0 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f000 fbde 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b06      	cmp	r3, #6
 800299a:	d007      	beq.n	80029ac <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e01d      	b.n	8002a10 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fe fac3 	bl	8000f74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3304      	adds	r3, #4
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f000 fb8f 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2201      	movs	r2, #1
 8002a28:	6839      	ldr	r1, [r7, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fe64 	bl	80036f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_TIM_PWM_Start+0x74>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_TIM_PWM_Start+0x2c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <HAL_TIM_PWM_Start+0x78>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_TIM_PWM_Start+0x30>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_TIM_PWM_Start+0x32>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d007      	beq.n	8002a5e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d007      	beq.n	8002a80 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40010400 	.word	0x40010400

08002a94 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b0c      	cmp	r3, #12
 8002aa2:	d841      	bhi.n	8002b28 <HAL_TIM_PWM_Start_IT+0x94>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <HAL_TIM_PWM_Start_IT+0x18>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002ae1 	.word	0x08002ae1
 8002ab0:	08002b29 	.word	0x08002b29
 8002ab4:	08002b29 	.word	0x08002b29
 8002ab8:	08002b29 	.word	0x08002b29
 8002abc:	08002af3 	.word	0x08002af3
 8002ac0:	08002b29 	.word	0x08002b29
 8002ac4:	08002b29 	.word	0x08002b29
 8002ac8:	08002b29 	.word	0x08002b29
 8002acc:	08002b05 	.word	0x08002b05
 8002ad0:	08002b29 	.word	0x08002b29
 8002ad4:	08002b29 	.word	0x08002b29
 8002ad8:	08002b29 	.word	0x08002b29
 8002adc:	08002b17 	.word	0x08002b17
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0202 	orr.w	r2, r2, #2
 8002aee:	60da      	str	r2, [r3, #12]
      break;
 8002af0:	e01b      	b.n	8002b2a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0204 	orr.w	r2, r2, #4
 8002b00:	60da      	str	r2, [r3, #12]
      break;
 8002b02:	e012      	b.n	8002b2a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0208 	orr.w	r2, r2, #8
 8002b12:	60da      	str	r2, [r3, #12]
      break;
 8002b14:	e009      	b.n	8002b2a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0210 	orr.w	r2, r2, #16
 8002b24:	60da      	str	r2, [r3, #12]
      break;
 8002b26:	e000      	b.n	8002b2a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002b28:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	6839      	ldr	r1, [r7, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fde0 	bl	80036f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <HAL_TIM_PWM_Start_IT+0x100>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d004      	beq.n	8002b4c <HAL_TIM_PWM_Start_IT+0xb8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <HAL_TIM_PWM_Start_IT+0x104>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIM_PWM_Start_IT+0xbc>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_TIM_PWM_Start_IT+0xbe>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b06      	cmp	r3, #6
 8002b76:	d007      	beq.n	8002b88 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40010400 	.word	0x40010400

08002b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d122      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d11b      	bne.n	8002bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0202 	mvn.w	r2, #2
 8002bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa82 	bl	80030e8 <HAL_TIM_IC_CaptureCallback>
 8002be4:	e005      	b.n	8002bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fa74 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fa85 	bl	80030fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d122      	bne.n	8002c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d11b      	bne.n	8002c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0204 	mvn.w	r2, #4
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2202      	movs	r2, #2
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa58 	bl	80030e8 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fa4a 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fa5b 	bl	80030fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0208 	mvn.w	r2, #8
 8002c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2204      	movs	r2, #4
 8002c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fa2e 	bl	80030e8 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa20 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fa31 	bl	80030fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0210 	mvn.w	r2, #16
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa04 	bl	80030e8 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9f6 	bl	80030d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fa07 	bl	80030fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0201 	mvn.w	r2, #1
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f9d0 	bl	80030c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2a:	2b80      	cmp	r3, #128	; 0x80
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fd82 	bl	8003850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f9cc 	bl	8003110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d10e      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0220 	mvn.w	r2, #32
 8002d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fd4c 	bl	800383c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d101      	bne.n	8002dc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e0b4      	b.n	8002f30 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	f200 809f 	bhi.w	8002f1c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002e19 	.word	0x08002e19
 8002de8:	08002f1d 	.word	0x08002f1d
 8002dec:	08002f1d 	.word	0x08002f1d
 8002df0:	08002f1d 	.word	0x08002f1d
 8002df4:	08002e59 	.word	0x08002e59
 8002df8:	08002f1d 	.word	0x08002f1d
 8002dfc:	08002f1d 	.word	0x08002f1d
 8002e00:	08002f1d 	.word	0x08002f1d
 8002e04:	08002e9b 	.word	0x08002e9b
 8002e08:	08002f1d 	.word	0x08002f1d
 8002e0c:	08002f1d 	.word	0x08002f1d
 8002e10:	08002f1d 	.word	0x08002f1d
 8002e14:	08002edb 	.word	0x08002edb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fa20 	bl	8003264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0208 	orr.w	r2, r2, #8
 8002e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0204 	bic.w	r2, r2, #4
 8002e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6999      	ldr	r1, [r3, #24]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	619a      	str	r2, [r3, #24]
      break;
 8002e56:	e062      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fa70 	bl	8003344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6999      	ldr	r1, [r3, #24]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	021a      	lsls	r2, r3, #8
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	619a      	str	r2, [r3, #24]
      break;
 8002e98:	e041      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fac5 	bl	8003430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0208 	orr.w	r2, r2, #8
 8002eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0204 	bic.w	r2, r2, #4
 8002ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69d9      	ldr	r1, [r3, #28]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	61da      	str	r2, [r3, #28]
      break;
 8002ed8:	e021      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fb19 	bl	8003518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69d9      	ldr	r1, [r3, #28]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	61da      	str	r2, [r3, #28]
      break;
 8002f1a:	e000      	b.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002f1c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_TIM_ConfigClockSource+0x18>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e0b3      	b.n	80030b8 <HAL_TIM_ConfigClockSource+0x180>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f88:	d03e      	beq.n	8003008 <HAL_TIM_ConfigClockSource+0xd0>
 8002f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f8e:	f200 8087 	bhi.w	80030a0 <HAL_TIM_ConfigClockSource+0x168>
 8002f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f96:	f000 8085 	beq.w	80030a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f9e:	d87f      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x168>
 8002fa0:	2b70      	cmp	r3, #112	; 0x70
 8002fa2:	d01a      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0xa2>
 8002fa4:	2b70      	cmp	r3, #112	; 0x70
 8002fa6:	d87b      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x168>
 8002fa8:	2b60      	cmp	r3, #96	; 0x60
 8002faa:	d050      	beq.n	800304e <HAL_TIM_ConfigClockSource+0x116>
 8002fac:	2b60      	cmp	r3, #96	; 0x60
 8002fae:	d877      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x168>
 8002fb0:	2b50      	cmp	r3, #80	; 0x50
 8002fb2:	d03c      	beq.n	800302e <HAL_TIM_ConfigClockSource+0xf6>
 8002fb4:	2b50      	cmp	r3, #80	; 0x50
 8002fb6:	d873      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x168>
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d058      	beq.n	800306e <HAL_TIM_ConfigClockSource+0x136>
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d86f      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x168>
 8002fc0:	2b30      	cmp	r3, #48	; 0x30
 8002fc2:	d064      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x156>
 8002fc4:	2b30      	cmp	r3, #48	; 0x30
 8002fc6:	d86b      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x168>
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d060      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x156>
 8002fcc:	2b20      	cmp	r3, #32
 8002fce:	d867      	bhi.n	80030a0 <HAL_TIM_ConfigClockSource+0x168>
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x156>
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d05a      	beq.n	800308e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002fd8:	e062      	b.n	80030a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	6899      	ldr	r1, [r3, #8]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f000 fb65 	bl	80036b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ffc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	609a      	str	r2, [r3, #8]
      break;
 8003006:	e04e      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6899      	ldr	r1, [r3, #8]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f000 fb4e 	bl	80036b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800302a:	609a      	str	r2, [r3, #8]
      break;
 800302c:	e03b      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	461a      	mov	r2, r3
 800303c:	f000 fac2 	bl	80035c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2150      	movs	r1, #80	; 0x50
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fb1b 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 800304c:	e02b      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6859      	ldr	r1, [r3, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	461a      	mov	r2, r3
 800305c:	f000 fae1 	bl	8003622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2160      	movs	r1, #96	; 0x60
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fb0b 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 800306c:	e01b      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6859      	ldr	r1, [r3, #4]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	461a      	mov	r2, r3
 800307c:	f000 faa2 	bl	80035c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2140      	movs	r1, #64	; 0x40
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fafb 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 800308c:	e00b      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f000 faf2 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 800309e:	e002      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030a0:	bf00      	nop
 80030a2:	e000      	b.n	80030a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80030a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a40      	ldr	r2, [pc, #256]	; (8003238 <TIM_Base_SetConfig+0x114>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003142:	d00f      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3d      	ldr	r2, [pc, #244]	; (800323c <TIM_Base_SetConfig+0x118>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00b      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3c      	ldr	r2, [pc, #240]	; (8003240 <TIM_Base_SetConfig+0x11c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3b      	ldr	r2, [pc, #236]	; (8003244 <TIM_Base_SetConfig+0x120>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3a      	ldr	r2, [pc, #232]	; (8003248 <TIM_Base_SetConfig+0x124>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d108      	bne.n	8003176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <TIM_Base_SetConfig+0x114>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d02b      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d027      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2c      	ldr	r2, [pc, #176]	; (800323c <TIM_Base_SetConfig+0x118>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d023      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <TIM_Base_SetConfig+0x11c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01f      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <TIM_Base_SetConfig+0x120>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01b      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a29      	ldr	r2, [pc, #164]	; (8003248 <TIM_Base_SetConfig+0x124>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d017      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a28      	ldr	r2, [pc, #160]	; (800324c <TIM_Base_SetConfig+0x128>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a27      	ldr	r2, [pc, #156]	; (8003250 <TIM_Base_SetConfig+0x12c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00f      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a26      	ldr	r2, [pc, #152]	; (8003254 <TIM_Base_SetConfig+0x130>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00b      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a25      	ldr	r2, [pc, #148]	; (8003258 <TIM_Base_SetConfig+0x134>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a24      	ldr	r2, [pc, #144]	; (800325c <TIM_Base_SetConfig+0x138>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d003      	beq.n	80031d6 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a23      	ldr	r2, [pc, #140]	; (8003260 <TIM_Base_SetConfig+0x13c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <TIM_Base_SetConfig+0x114>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0xf8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0c      	ldr	r2, [pc, #48]	; (8003248 <TIM_Base_SetConfig+0x124>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	615a      	str	r2, [r3, #20]
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40010000 	.word	0x40010000
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800
 8003244:	40000c00 	.word	0x40000c00
 8003248:	40010400 	.word	0x40010400
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800
 8003258:	40001800 	.word	0x40001800
 800325c:	40001c00 	.word	0x40001c00
 8003260:	40002000 	.word	0x40002000

08003264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f023 0201 	bic.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f023 0302 	bic.w	r3, r3, #2
 80032ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a20      	ldr	r2, [pc, #128]	; (800333c <TIM_OC1_SetConfig+0xd8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <TIM_OC1_SetConfig+0x64>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <TIM_OC1_SetConfig+0xdc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d10c      	bne.n	80032e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	f023 0308 	bic.w	r3, r3, #8
 80032ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f023 0304 	bic.w	r3, r3, #4
 80032e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a15      	ldr	r2, [pc, #84]	; (800333c <TIM_OC1_SetConfig+0xd8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d003      	beq.n	80032f2 <TIM_OC1_SetConfig+0x8e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a14      	ldr	r2, [pc, #80]	; (8003340 <TIM_OC1_SetConfig+0xdc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d111      	bne.n	8003316 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	621a      	str	r2, [r3, #32]
}
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40010000 	.word	0x40010000
 8003340:	40010400 	.word	0x40010400

08003344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f023 0210 	bic.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800337a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0320 	bic.w	r3, r3, #32
 800338e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a22      	ldr	r2, [pc, #136]	; (8003428 <TIM_OC2_SetConfig+0xe4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <TIM_OC2_SetConfig+0x68>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a21      	ldr	r2, [pc, #132]	; (800342c <TIM_OC2_SetConfig+0xe8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10d      	bne.n	80033c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a17      	ldr	r2, [pc, #92]	; (8003428 <TIM_OC2_SetConfig+0xe4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_OC2_SetConfig+0x94>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a16      	ldr	r2, [pc, #88]	; (800342c <TIM_OC2_SetConfig+0xe8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d113      	bne.n	8003400 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40010000 	.word	0x40010000
 800342c:	40010400 	.word	0x40010400

08003430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	4313      	orrs	r3, r2
 8003484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <TIM_OC3_SetConfig+0xe0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_OC3_SetConfig+0x66>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a20      	ldr	r2, [pc, #128]	; (8003514 <TIM_OC3_SetConfig+0xe4>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10d      	bne.n	80034b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800349c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a16      	ldr	r2, [pc, #88]	; (8003510 <TIM_OC3_SetConfig+0xe0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d003      	beq.n	80034c2 <TIM_OC3_SetConfig+0x92>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a15      	ldr	r2, [pc, #84]	; (8003514 <TIM_OC3_SetConfig+0xe4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d113      	bne.n	80034ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	621a      	str	r2, [r3, #32]
}
 8003504:	bf00      	nop
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40010000 	.word	0x40010000
 8003514:	40010400 	.word	0x40010400

08003518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003518:	b480      	push	{r7}
 800351a:	b087      	sub	sp, #28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	021b      	lsls	r3, r3, #8
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	031b      	lsls	r3, r3, #12
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a12      	ldr	r2, [pc, #72]	; (80035bc <TIM_OC4_SetConfig+0xa4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_OC4_SetConfig+0x68>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a11      	ldr	r2, [pc, #68]	; (80035c0 <TIM_OC4_SetConfig+0xa8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d109      	bne.n	8003594 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	019b      	lsls	r3, r3, #6
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40010000 	.word	0x40010000
 80035c0:	40010400 	.word	0x40010400

080035c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f023 0201 	bic.w	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 030a 	bic.w	r3, r3, #10
 8003600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003622:	b480      	push	{r7}
 8003624:	b087      	sub	sp, #28
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f023 0210 	bic.w	r2, r3, #16
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800364c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	031b      	lsls	r3, r3, #12
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800365e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	f043 0307 	orr.w	r3, r3, #7
 80036a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	021a      	lsls	r2, r3, #8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	431a      	orrs	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2201      	movs	r2, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1a      	ldr	r2, [r3, #32]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003758:	2302      	movs	r3, #2
 800375a:	e05a      	b.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a21      	ldr	r2, [pc, #132]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d022      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a8:	d01d      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d018      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a15      	ldr	r2, [pc, #84]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10c      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800
 800382c:	40000c00 	.word	0x40000c00
 8003830:	40010400 	.word	0x40010400
 8003834:	40014000 	.word	0x40014000
 8003838:	40001800 	.word	0x40001800

0800383c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e03f      	b.n	80038f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fbfa 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fba1 	bl	8003ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b088      	sub	sp, #32
 8003902:	af02      	add	r7, sp, #8
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b20      	cmp	r3, #32
 800391c:	f040 8083 	bne.w	8003a26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_UART_Transmit+0x2e>
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e07b      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_UART_Transmit+0x40>
 800393a:	2302      	movs	r3, #2
 800393c:	e074      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2221      	movs	r2, #33	; 0x21
 8003950:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003954:	f7fd fd14 	bl	8001380 <HAL_GetTick>
 8003958:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800396e:	e042      	b.n	80039f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003986:	d122      	bne.n	80039ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2200      	movs	r2, #0
 8003990:	2180      	movs	r1, #128	; 0x80
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f9c0 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e042      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d103      	bne.n	80039c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3302      	adds	r3, #2
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	e017      	b.n	80039f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3301      	adds	r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	e013      	b.n	80039f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f99d 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e01f      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	60ba      	str	r2, [r7, #8]
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1b7      	bne.n	8003970 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2200      	movs	r2, #0
 8003a08:	2140      	movs	r1, #64	; 0x40
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f984 	bl	8003d18 <UART_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e006      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2302      	movs	r3, #2
  }
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d140      	bne.n	8003acc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_UART_Receive_IT+0x26>
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e039      	b.n	8003ace <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_UART_Receive_IT+0x38>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e032      	b.n	8003ace <HAL_UART_Receive_IT+0x9e>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2222      	movs	r2, #34	; 0x22
 8003a8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aa6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0220 	orr.w	r2, r2, #32
 8003ac6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10d      	bne.n	8003b2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <HAL_UART_IRQHandler+0x52>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f9e0 	bl	8003eec <UART_Receive_IT>
      return;
 8003b2c:	e0d0      	b.n	8003cd0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80b0 	beq.w	8003c96 <HAL_UART_IRQHandler+0x1ba>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <HAL_UART_IRQHandler+0x70>
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80a5 	beq.w	8003c96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_UART_IRQHandler+0x90>
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	f043 0201 	orr.w	r2, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_UART_IRQHandler+0xb0>
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	f043 0202 	orr.w	r2, r3, #2
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_UART_IRQHandler+0xd0>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	f043 0204 	orr.w	r2, r3, #4
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00f      	beq.n	8003bd6 <HAL_UART_IRQHandler+0xfa>
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d104      	bne.n	8003bca <HAL_UART_IRQHandler+0xee>
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	f043 0208 	orr.w	r2, r3, #8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d077      	beq.n	8003cce <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d007      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x11c>
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	f003 0320 	and.w	r3, r3, #32
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f97a 	bl	8003eec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	bf0c      	ite	eq
 8003c06:	2301      	moveq	r3, #1
 8003c08:	2300      	movne	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <HAL_UART_IRQHandler+0x144>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d031      	beq.n	8003c84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f8c3 	bl	8003dac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b40      	cmp	r3, #64	; 0x40
 8003c32:	d123      	bne.n	8003c7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	695a      	ldr	r2, [r3, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <HAL_UART_IRQHandler+0x1fc>)
 8003c52:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fd fdb5 	bl	80017c8 <HAL_DMA_Abort_IT>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d016      	beq.n	8003c92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c72:	e00e      	b.n	8003c92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f845 	bl	8003d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7a:	e00a      	b.n	8003c92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f841 	bl	8003d04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c82:	e006      	b.n	8003c92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f83d 	bl	8003d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c90:	e01d      	b.n	8003cce <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c92:	bf00      	nop
    return;
 8003c94:	e01b      	b.n	8003cce <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1d6>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f8b0 	bl	8003e10 <UART_Transmit_IT>
    return;
 8003cb0:	e00e      	b.n	8003cd0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d009      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x1f4>
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d004      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f8f8 	bl	8003ebc <UART_EndTransmit_IT>
    return;
 8003ccc:	e000      	b.n	8003cd0 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003cce:	bf00      	nop
  }
}
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	08003de9 	.word	0x08003de9

08003cdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d28:	e02c      	b.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d30:	d028      	beq.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d38:	f7fd fb22 	bl	8001380 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d21d      	bcs.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d56:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e00f      	b.n	8003da4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	bf0c      	ite	eq
 8003d94:	2301      	moveq	r3, #1
 8003d96:	2300      	movne	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d0c3      	beq.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003dc2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff ff7e 	bl	8003d04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e08:	bf00      	nop
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b21      	cmp	r3, #33	; 0x21
 8003e22:	d144      	bne.n	8003eae <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2c:	d11a      	bne.n	8003e64 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e42:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	621a      	str	r2, [r3, #32]
 8003e56:	e00e      	b.n	8003e76 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]
 8003e62:	e008      	b.n	8003e76 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	1c59      	adds	r1, r3, #1
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6211      	str	r1, [r2, #32]
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4619      	mov	r1, r3
 8003e84:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10f      	bne.n	8003eaa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	e000      	b.n	8003eb0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003eae:	2302      	movs	r3, #2
  }
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fefd 	bl	8003cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b22      	cmp	r3, #34	; 0x22
 8003efe:	d171      	bne.n	8003fe4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f08:	d123      	bne.n	8003f52 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10e      	bne.n	8003f36 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	1c9a      	adds	r2, r3, #2
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	629a      	str	r2, [r3, #40]	; 0x28
 8003f34:	e029      	b.n	8003f8a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f50:	e01b      	b.n	8003f8a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6858      	ldr	r0, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	1c59      	adds	r1, r3, #1
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6291      	str	r1, [r2, #40]	; 0x28
 8003f6a:	b2c2      	uxtb	r2, r0
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e00c      	b.n	8003f8a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	1c58      	adds	r0, r3, #1
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	6288      	str	r0, [r1, #40]	; 0x28
 8003f82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4619      	mov	r1, r3
 8003f98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d120      	bne.n	8003fe0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0220 	bic.w	r2, r2, #32
 8003fac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fe8a 	bl	8003cf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e002      	b.n	8003fe6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e000      	b.n	8003fe6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff4:	b0bd      	sub	sp, #244	; 0xf4
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400c:	68d9      	ldr	r1, [r3, #12]
 800400e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	ea40 0301 	orr.w	r3, r0, r1
 8004018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	431a      	orrs	r2, r3
 8004028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	431a      	orrs	r2, r3
 8004030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800403c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004048:	f021 010c 	bic.w	r1, r1, #12
 800404c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004056:	430b      	orrs	r3, r1
 8004058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800405a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406a:	6999      	ldr	r1, [r3, #24]
 800406c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	ea40 0301 	orr.w	r3, r0, r1
 8004076:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004082:	f040 81a5 	bne.w	80043d0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4bcd      	ldr	r3, [pc, #820]	; (80043c4 <UART_SetConfig+0x3d4>)
 800408e:	429a      	cmp	r2, r3
 8004090:	d006      	beq.n	80040a0 <UART_SetConfig+0xb0>
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4bcb      	ldr	r3, [pc, #812]	; (80043c8 <UART_SetConfig+0x3d8>)
 800409a:	429a      	cmp	r2, r3
 800409c:	f040 80cb 	bne.w	8004236 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7fe fc2c 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 80040a4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040ac:	461c      	mov	r4, r3
 80040ae:	f04f 0500 	mov.w	r5, #0
 80040b2:	4622      	mov	r2, r4
 80040b4:	462b      	mov	r3, r5
 80040b6:	1891      	adds	r1, r2, r2
 80040b8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80040bc:	415b      	adcs	r3, r3
 80040be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80040c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80040c6:	1912      	adds	r2, r2, r4
 80040c8:	eb45 0303 	adc.w	r3, r5, r3
 80040cc:	f04f 0000 	mov.w	r0, #0
 80040d0:	f04f 0100 	mov.w	r1, #0
 80040d4:	00d9      	lsls	r1, r3, #3
 80040d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040da:	00d0      	lsls	r0, r2, #3
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	1911      	adds	r1, r2, r4
 80040e2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80040e6:	416b      	adcs	r3, r5
 80040e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	1891      	adds	r1, r2, r2
 80040fa:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80040fe:	415b      	adcs	r3, r3
 8004100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004104:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004108:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800410c:	f7fc f85c 	bl	80001c8 <__aeabi_uldivmod>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4bad      	ldr	r3, [pc, #692]	; (80043cc <UART_SetConfig+0x3dc>)
 8004116:	fba3 2302 	umull	r2, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	011e      	lsls	r6, r3, #4
 800411e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004122:	461c      	mov	r4, r3
 8004124:	f04f 0500 	mov.w	r5, #0
 8004128:	4622      	mov	r2, r4
 800412a:	462b      	mov	r3, r5
 800412c:	1891      	adds	r1, r2, r2
 800412e:	67b9      	str	r1, [r7, #120]	; 0x78
 8004130:	415b      	adcs	r3, r3
 8004132:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004134:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004138:	1912      	adds	r2, r2, r4
 800413a:	eb45 0303 	adc.w	r3, r5, r3
 800413e:	f04f 0000 	mov.w	r0, #0
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	00d9      	lsls	r1, r3, #3
 8004148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800414c:	00d0      	lsls	r0, r2, #3
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	1911      	adds	r1, r2, r4
 8004154:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004158:	416b      	adcs	r3, r5
 800415a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800415e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	461a      	mov	r2, r3
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	1891      	adds	r1, r2, r2
 800416c:	6739      	str	r1, [r7, #112]	; 0x70
 800416e:	415b      	adcs	r3, r3
 8004170:	677b      	str	r3, [r7, #116]	; 0x74
 8004172:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004176:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800417a:	f7fc f825 	bl	80001c8 <__aeabi_uldivmod>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4b92      	ldr	r3, [pc, #584]	; (80043cc <UART_SetConfig+0x3dc>)
 8004184:	fba3 1302 	umull	r1, r3, r3, r2
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	2164      	movs	r1, #100	; 0x64
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	3332      	adds	r3, #50	; 0x32
 8004196:	4a8d      	ldr	r2, [pc, #564]	; (80043cc <UART_SetConfig+0x3dc>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041a4:	441e      	add	r6, r3
 80041a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041aa:	4618      	mov	r0, r3
 80041ac:	f04f 0100 	mov.w	r1, #0
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	1894      	adds	r4, r2, r2
 80041b6:	66bc      	str	r4, [r7, #104]	; 0x68
 80041b8:	415b      	adcs	r3, r3
 80041ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80041c0:	1812      	adds	r2, r2, r0
 80041c2:	eb41 0303 	adc.w	r3, r1, r3
 80041c6:	f04f 0400 	mov.w	r4, #0
 80041ca:	f04f 0500 	mov.w	r5, #0
 80041ce:	00dd      	lsls	r5, r3, #3
 80041d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041d4:	00d4      	lsls	r4, r2, #3
 80041d6:	4622      	mov	r2, r4
 80041d8:	462b      	mov	r3, r5
 80041da:	1814      	adds	r4, r2, r0
 80041dc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80041e0:	414b      	adcs	r3, r1
 80041e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	1891      	adds	r1, r2, r2
 80041f4:	6639      	str	r1, [r7, #96]	; 0x60
 80041f6:	415b      	adcs	r3, r3
 80041f8:	667b      	str	r3, [r7, #100]	; 0x64
 80041fa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80041fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004202:	f7fb ffe1 	bl	80001c8 <__aeabi_uldivmod>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4b70      	ldr	r3, [pc, #448]	; (80043cc <UART_SetConfig+0x3dc>)
 800420c:	fba3 1302 	umull	r1, r3, r3, r2
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	2164      	movs	r1, #100	; 0x64
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	3332      	adds	r3, #50	; 0x32
 800421e:	4a6b      	ldr	r2, [pc, #428]	; (80043cc <UART_SetConfig+0x3dc>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f003 0207 	and.w	r2, r3, #7
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4432      	add	r2, r6
 8004232:	609a      	str	r2, [r3, #8]
 8004234:	e26d      	b.n	8004712 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004236:	f7fe fb4d 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 800423a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800423e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004242:	461c      	mov	r4, r3
 8004244:	f04f 0500 	mov.w	r5, #0
 8004248:	4622      	mov	r2, r4
 800424a:	462b      	mov	r3, r5
 800424c:	1891      	adds	r1, r2, r2
 800424e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004250:	415b      	adcs	r3, r3
 8004252:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004254:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004258:	1912      	adds	r2, r2, r4
 800425a:	eb45 0303 	adc.w	r3, r5, r3
 800425e:	f04f 0000 	mov.w	r0, #0
 8004262:	f04f 0100 	mov.w	r1, #0
 8004266:	00d9      	lsls	r1, r3, #3
 8004268:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800426c:	00d0      	lsls	r0, r2, #3
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	1911      	adds	r1, r2, r4
 8004274:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004278:	416b      	adcs	r3, r5
 800427a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800427e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	461a      	mov	r2, r3
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	1891      	adds	r1, r2, r2
 800428c:	6539      	str	r1, [r7, #80]	; 0x50
 800428e:	415b      	adcs	r3, r3
 8004290:	657b      	str	r3, [r7, #84]	; 0x54
 8004292:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004296:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800429a:	f7fb ff95 	bl	80001c8 <__aeabi_uldivmod>
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4b4a      	ldr	r3, [pc, #296]	; (80043cc <UART_SetConfig+0x3dc>)
 80042a4:	fba3 2302 	umull	r2, r3, r3, r2
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	011e      	lsls	r6, r3, #4
 80042ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042b0:	461c      	mov	r4, r3
 80042b2:	f04f 0500 	mov.w	r5, #0
 80042b6:	4622      	mov	r2, r4
 80042b8:	462b      	mov	r3, r5
 80042ba:	1891      	adds	r1, r2, r2
 80042bc:	64b9      	str	r1, [r7, #72]	; 0x48
 80042be:	415b      	adcs	r3, r3
 80042c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042c6:	1912      	adds	r2, r2, r4
 80042c8:	eb45 0303 	adc.w	r3, r5, r3
 80042cc:	f04f 0000 	mov.w	r0, #0
 80042d0:	f04f 0100 	mov.w	r1, #0
 80042d4:	00d9      	lsls	r1, r3, #3
 80042d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042da:	00d0      	lsls	r0, r2, #3
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	1911      	adds	r1, r2, r4
 80042e2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80042e6:	416b      	adcs	r3, r5
 80042e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80042ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	1891      	adds	r1, r2, r2
 80042fa:	6439      	str	r1, [r7, #64]	; 0x40
 80042fc:	415b      	adcs	r3, r3
 80042fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004300:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004304:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004308:	f7fb ff5e 	bl	80001c8 <__aeabi_uldivmod>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4b2e      	ldr	r3, [pc, #184]	; (80043cc <UART_SetConfig+0x3dc>)
 8004312:	fba3 1302 	umull	r1, r3, r3, r2
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	2164      	movs	r1, #100	; 0x64
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	3332      	adds	r3, #50	; 0x32
 8004324:	4a29      	ldr	r2, [pc, #164]	; (80043cc <UART_SetConfig+0x3dc>)
 8004326:	fba2 2303 	umull	r2, r3, r2, r3
 800432a:	095b      	lsrs	r3, r3, #5
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004332:	441e      	add	r6, r3
 8004334:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004338:	4618      	mov	r0, r3
 800433a:	f04f 0100 	mov.w	r1, #0
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	1894      	adds	r4, r2, r2
 8004344:	63bc      	str	r4, [r7, #56]	; 0x38
 8004346:	415b      	adcs	r3, r3
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800434a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800434e:	1812      	adds	r2, r2, r0
 8004350:	eb41 0303 	adc.w	r3, r1, r3
 8004354:	f04f 0400 	mov.w	r4, #0
 8004358:	f04f 0500 	mov.w	r5, #0
 800435c:	00dd      	lsls	r5, r3, #3
 800435e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004362:	00d4      	lsls	r4, r2, #3
 8004364:	4622      	mov	r2, r4
 8004366:	462b      	mov	r3, r5
 8004368:	1814      	adds	r4, r2, r0
 800436a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800436e:	414b      	adcs	r3, r1
 8004370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	461a      	mov	r2, r3
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	1891      	adds	r1, r2, r2
 8004382:	6339      	str	r1, [r7, #48]	; 0x30
 8004384:	415b      	adcs	r3, r3
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
 8004388:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800438c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004390:	f7fb ff1a 	bl	80001c8 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <UART_SetConfig+0x3dc>)
 800439a:	fba3 1302 	umull	r1, r3, r3, r2
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2164      	movs	r1, #100	; 0x64
 80043a2:	fb01 f303 	mul.w	r3, r1, r3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	3332      	adds	r3, #50	; 0x32
 80043ac:	4a07      	ldr	r2, [pc, #28]	; (80043cc <UART_SetConfig+0x3dc>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	f003 0207 	and.w	r2, r3, #7
 80043b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4432      	add	r2, r6
 80043c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80043c2:	e1a6      	b.n	8004712 <UART_SetConfig+0x722>
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40011400 	.word	0x40011400
 80043cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4bd1      	ldr	r3, [pc, #836]	; (800471c <UART_SetConfig+0x72c>)
 80043d8:	429a      	cmp	r2, r3
 80043da:	d006      	beq.n	80043ea <UART_SetConfig+0x3fa>
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4bcf      	ldr	r3, [pc, #828]	; (8004720 <UART_SetConfig+0x730>)
 80043e4:	429a      	cmp	r2, r3
 80043e6:	f040 80ca 	bne.w	800457e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ea:	f7fe fa87 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 80043ee:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043f6:	461c      	mov	r4, r3
 80043f8:	f04f 0500 	mov.w	r5, #0
 80043fc:	4622      	mov	r2, r4
 80043fe:	462b      	mov	r3, r5
 8004400:	1891      	adds	r1, r2, r2
 8004402:	62b9      	str	r1, [r7, #40]	; 0x28
 8004404:	415b      	adcs	r3, r3
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800440c:	1912      	adds	r2, r2, r4
 800440e:	eb45 0303 	adc.w	r3, r5, r3
 8004412:	f04f 0000 	mov.w	r0, #0
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	00d9      	lsls	r1, r3, #3
 800441c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004420:	00d0      	lsls	r0, r2, #3
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	eb12 0a04 	adds.w	sl, r2, r4
 800442a:	eb43 0b05 	adc.w	fp, r3, r5
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4618      	mov	r0, r3
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	008b      	lsls	r3, r1, #2
 8004444:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004448:	0082      	lsls	r2, r0, #2
 800444a:	4650      	mov	r0, sl
 800444c:	4659      	mov	r1, fp
 800444e:	f7fb febb 	bl	80001c8 <__aeabi_uldivmod>
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	4bb3      	ldr	r3, [pc, #716]	; (8004724 <UART_SetConfig+0x734>)
 8004458:	fba3 2302 	umull	r2, r3, r3, r2
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	011e      	lsls	r6, r3, #4
 8004460:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004464:	4618      	mov	r0, r3
 8004466:	f04f 0100 	mov.w	r1, #0
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	1894      	adds	r4, r2, r2
 8004470:	623c      	str	r4, [r7, #32]
 8004472:	415b      	adcs	r3, r3
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800447a:	1812      	adds	r2, r2, r0
 800447c:	eb41 0303 	adc.w	r3, r1, r3
 8004480:	f04f 0400 	mov.w	r4, #0
 8004484:	f04f 0500 	mov.w	r5, #0
 8004488:	00dd      	lsls	r5, r3, #3
 800448a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800448e:	00d4      	lsls	r4, r2, #3
 8004490:	4622      	mov	r2, r4
 8004492:	462b      	mov	r3, r5
 8004494:	1814      	adds	r4, r2, r0
 8004496:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800449a:	414b      	adcs	r3, r1
 800449c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	008b      	lsls	r3, r1, #2
 80044b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044ba:	0082      	lsls	r2, r0, #2
 80044bc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80044c0:	f7fb fe82 	bl	80001c8 <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4b96      	ldr	r3, [pc, #600]	; (8004724 <UART_SetConfig+0x734>)
 80044ca:	fba3 1302 	umull	r1, r3, r3, r2
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2164      	movs	r1, #100	; 0x64
 80044d2:	fb01 f303 	mul.w	r3, r1, r3
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	3332      	adds	r3, #50	; 0x32
 80044dc:	4a91      	ldr	r2, [pc, #580]	; (8004724 <UART_SetConfig+0x734>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e8:	441e      	add	r6, r3
 80044ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044ee:	4618      	mov	r0, r3
 80044f0:	f04f 0100 	mov.w	r1, #0
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	1894      	adds	r4, r2, r2
 80044fa:	61bc      	str	r4, [r7, #24]
 80044fc:	415b      	adcs	r3, r3
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004504:	1812      	adds	r2, r2, r0
 8004506:	eb41 0303 	adc.w	r3, r1, r3
 800450a:	f04f 0400 	mov.w	r4, #0
 800450e:	f04f 0500 	mov.w	r5, #0
 8004512:	00dd      	lsls	r5, r3, #3
 8004514:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004518:	00d4      	lsls	r4, r2, #3
 800451a:	4622      	mov	r2, r4
 800451c:	462b      	mov	r3, r5
 800451e:	1814      	adds	r4, r2, r0
 8004520:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004524:	414b      	adcs	r3, r1
 8004526:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800452a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4618      	mov	r0, r3
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	008b      	lsls	r3, r1, #2
 8004540:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004544:	0082      	lsls	r2, r0, #2
 8004546:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800454a:	f7fb fe3d 	bl	80001c8 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b74      	ldr	r3, [pc, #464]	; (8004724 <UART_SetConfig+0x734>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	; 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	3332      	adds	r3, #50	; 0x32
 8004566:	4a6f      	ldr	r2, [pc, #444]	; (8004724 <UART_SetConfig+0x734>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 020f 	and.w	r2, r3, #15
 8004572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4432      	add	r2, r6
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	e0c9      	b.n	8004712 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800457e:	f7fe f9a9 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8004582:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004586:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800458a:	461c      	mov	r4, r3
 800458c:	f04f 0500 	mov.w	r5, #0
 8004590:	4622      	mov	r2, r4
 8004592:	462b      	mov	r3, r5
 8004594:	1891      	adds	r1, r2, r2
 8004596:	6139      	str	r1, [r7, #16]
 8004598:	415b      	adcs	r3, r3
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045a0:	1912      	adds	r2, r2, r4
 80045a2:	eb45 0303 	adc.w	r3, r5, r3
 80045a6:	f04f 0000 	mov.w	r0, #0
 80045aa:	f04f 0100 	mov.w	r1, #0
 80045ae:	00d9      	lsls	r1, r3, #3
 80045b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045b4:	00d0      	lsls	r0, r2, #3
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	eb12 0804 	adds.w	r8, r2, r4
 80045be:	eb43 0905 	adc.w	r9, r3, r5
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	008b      	lsls	r3, r1, #2
 80045d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045dc:	0082      	lsls	r2, r0, #2
 80045de:	4640      	mov	r0, r8
 80045e0:	4649      	mov	r1, r9
 80045e2:	f7fb fdf1 	bl	80001c8 <__aeabi_uldivmod>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4b4e      	ldr	r3, [pc, #312]	; (8004724 <UART_SetConfig+0x734>)
 80045ec:	fba3 2302 	umull	r2, r3, r3, r2
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	011e      	lsls	r6, r3, #4
 80045f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80045f8:	4618      	mov	r0, r3
 80045fa:	f04f 0100 	mov.w	r1, #0
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	1894      	adds	r4, r2, r2
 8004604:	60bc      	str	r4, [r7, #8]
 8004606:	415b      	adcs	r3, r3
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800460e:	1812      	adds	r2, r2, r0
 8004610:	eb41 0303 	adc.w	r3, r1, r3
 8004614:	f04f 0400 	mov.w	r4, #0
 8004618:	f04f 0500 	mov.w	r5, #0
 800461c:	00dd      	lsls	r5, r3, #3
 800461e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004622:	00d4      	lsls	r4, r2, #3
 8004624:	4622      	mov	r2, r4
 8004626:	462b      	mov	r3, r5
 8004628:	1814      	adds	r4, r2, r0
 800462a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800462e:	414b      	adcs	r3, r1
 8004630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	4618      	mov	r0, r3
 800463c:	f04f 0100 	mov.w	r1, #0
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	008b      	lsls	r3, r1, #2
 800464a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800464e:	0082      	lsls	r2, r0, #2
 8004650:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004654:	f7fb fdb8 	bl	80001c8 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4b31      	ldr	r3, [pc, #196]	; (8004724 <UART_SetConfig+0x734>)
 800465e:	fba3 1302 	umull	r1, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	2164      	movs	r1, #100	; 0x64
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	011b      	lsls	r3, r3, #4
 800466e:	3332      	adds	r3, #50	; 0x32
 8004670:	4a2c      	ldr	r2, [pc, #176]	; (8004724 <UART_SetConfig+0x734>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800467c:	441e      	add	r6, r3
 800467e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004682:	4618      	mov	r0, r3
 8004684:	f04f 0100 	mov.w	r1, #0
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	1894      	adds	r4, r2, r2
 800468e:	603c      	str	r4, [r7, #0]
 8004690:	415b      	adcs	r3, r3
 8004692:	607b      	str	r3, [r7, #4]
 8004694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004698:	1812      	adds	r2, r2, r0
 800469a:	eb41 0303 	adc.w	r3, r1, r3
 800469e:	f04f 0400 	mov.w	r4, #0
 80046a2:	f04f 0500 	mov.w	r5, #0
 80046a6:	00dd      	lsls	r5, r3, #3
 80046a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046ac:	00d4      	lsls	r4, r2, #3
 80046ae:	4622      	mov	r2, r4
 80046b0:	462b      	mov	r3, r5
 80046b2:	1814      	adds	r4, r2, r0
 80046b4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80046b8:	414b      	adcs	r3, r1
 80046ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f04f 0100 	mov.w	r1, #0
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	008b      	lsls	r3, r1, #2
 80046d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046d8:	0082      	lsls	r2, r0, #2
 80046da:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80046de:	f7fb fd73 	bl	80001c8 <__aeabi_uldivmod>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <UART_SetConfig+0x734>)
 80046e8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	2164      	movs	r1, #100	; 0x64
 80046f0:	fb01 f303 	mul.w	r3, r1, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	3332      	adds	r3, #50	; 0x32
 80046fa:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <UART_SetConfig+0x734>)
 80046fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004700:	095b      	lsrs	r3, r3, #5
 8004702:	f003 020f 	and.w	r2, r3, #15
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4432      	add	r2, r6
 800470e:	609a      	str	r2, [r3, #8]
}
 8004710:	e7ff      	b.n	8004712 <UART_SetConfig+0x722>
 8004712:	bf00      	nop
 8004714:	37f4      	adds	r7, #244	; 0xf4
 8004716:	46bd      	mov	sp, r7
 8004718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800471c:	40011000 	.word	0x40011000
 8004720:	40011400 	.word	0x40011400
 8004724:	51eb851f 	.word	0x51eb851f

08004728 <__errno>:
 8004728:	4b01      	ldr	r3, [pc, #4]	; (8004730 <__errno+0x8>)
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	2000271c 	.word	0x2000271c

08004734 <__libc_init_array>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	4d0d      	ldr	r5, [pc, #52]	; (800476c <__libc_init_array+0x38>)
 8004738:	4c0d      	ldr	r4, [pc, #52]	; (8004770 <__libc_init_array+0x3c>)
 800473a:	1b64      	subs	r4, r4, r5
 800473c:	10a4      	asrs	r4, r4, #2
 800473e:	2600      	movs	r6, #0
 8004740:	42a6      	cmp	r6, r4
 8004742:	d109      	bne.n	8004758 <__libc_init_array+0x24>
 8004744:	4d0b      	ldr	r5, [pc, #44]	; (8004774 <__libc_init_array+0x40>)
 8004746:	4c0c      	ldr	r4, [pc, #48]	; (8004778 <__libc_init_array+0x44>)
 8004748:	f000 fcf4 	bl	8005134 <_init>
 800474c:	1b64      	subs	r4, r4, r5
 800474e:	10a4      	asrs	r4, r4, #2
 8004750:	2600      	movs	r6, #0
 8004752:	42a6      	cmp	r6, r4
 8004754:	d105      	bne.n	8004762 <__libc_init_array+0x2e>
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	f855 3b04 	ldr.w	r3, [r5], #4
 800475c:	4798      	blx	r3
 800475e:	3601      	adds	r6, #1
 8004760:	e7ee      	b.n	8004740 <__libc_init_array+0xc>
 8004762:	f855 3b04 	ldr.w	r3, [r5], #4
 8004766:	4798      	blx	r3
 8004768:	3601      	adds	r6, #1
 800476a:	e7f2      	b.n	8004752 <__libc_init_array+0x1e>
 800476c:	08005214 	.word	0x08005214
 8004770:	08005214 	.word	0x08005214
 8004774:	08005214 	.word	0x08005214
 8004778:	08005218 	.word	0x08005218

0800477c <memcpy>:
 800477c:	440a      	add	r2, r1
 800477e:	4291      	cmp	r1, r2
 8004780:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004784:	d100      	bne.n	8004788 <memcpy+0xc>
 8004786:	4770      	bx	lr
 8004788:	b510      	push	{r4, lr}
 800478a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800478e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004792:	4291      	cmp	r1, r2
 8004794:	d1f9      	bne.n	800478a <memcpy+0xe>
 8004796:	bd10      	pop	{r4, pc}

08004798 <memset>:
 8004798:	4402      	add	r2, r0
 800479a:	4603      	mov	r3, r0
 800479c:	4293      	cmp	r3, r2
 800479e:	d100      	bne.n	80047a2 <memset+0xa>
 80047a0:	4770      	bx	lr
 80047a2:	f803 1b01 	strb.w	r1, [r3], #1
 80047a6:	e7f9      	b.n	800479c <memset+0x4>

080047a8 <_puts_r>:
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	460e      	mov	r6, r1
 80047ac:	4605      	mov	r5, r0
 80047ae:	b118      	cbz	r0, 80047b8 <_puts_r+0x10>
 80047b0:	6983      	ldr	r3, [r0, #24]
 80047b2:	b90b      	cbnz	r3, 80047b8 <_puts_r+0x10>
 80047b4:	f000 fa48 	bl	8004c48 <__sinit>
 80047b8:	69ab      	ldr	r3, [r5, #24]
 80047ba:	68ac      	ldr	r4, [r5, #8]
 80047bc:	b913      	cbnz	r3, 80047c4 <_puts_r+0x1c>
 80047be:	4628      	mov	r0, r5
 80047c0:	f000 fa42 	bl	8004c48 <__sinit>
 80047c4:	4b2c      	ldr	r3, [pc, #176]	; (8004878 <_puts_r+0xd0>)
 80047c6:	429c      	cmp	r4, r3
 80047c8:	d120      	bne.n	800480c <_puts_r+0x64>
 80047ca:	686c      	ldr	r4, [r5, #4]
 80047cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047ce:	07db      	lsls	r3, r3, #31
 80047d0:	d405      	bmi.n	80047de <_puts_r+0x36>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	0598      	lsls	r0, r3, #22
 80047d6:	d402      	bmi.n	80047de <_puts_r+0x36>
 80047d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047da:	f000 fad3 	bl	8004d84 <__retarget_lock_acquire_recursive>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	0719      	lsls	r1, r3, #28
 80047e2:	d51d      	bpl.n	8004820 <_puts_r+0x78>
 80047e4:	6923      	ldr	r3, [r4, #16]
 80047e6:	b1db      	cbz	r3, 8004820 <_puts_r+0x78>
 80047e8:	3e01      	subs	r6, #1
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047f0:	3b01      	subs	r3, #1
 80047f2:	60a3      	str	r3, [r4, #8]
 80047f4:	bb39      	cbnz	r1, 8004846 <_puts_r+0x9e>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	da38      	bge.n	800486c <_puts_r+0xc4>
 80047fa:	4622      	mov	r2, r4
 80047fc:	210a      	movs	r1, #10
 80047fe:	4628      	mov	r0, r5
 8004800:	f000 f848 	bl	8004894 <__swbuf_r>
 8004804:	3001      	adds	r0, #1
 8004806:	d011      	beq.n	800482c <_puts_r+0x84>
 8004808:	250a      	movs	r5, #10
 800480a:	e011      	b.n	8004830 <_puts_r+0x88>
 800480c:	4b1b      	ldr	r3, [pc, #108]	; (800487c <_puts_r+0xd4>)
 800480e:	429c      	cmp	r4, r3
 8004810:	d101      	bne.n	8004816 <_puts_r+0x6e>
 8004812:	68ac      	ldr	r4, [r5, #8]
 8004814:	e7da      	b.n	80047cc <_puts_r+0x24>
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <_puts_r+0xd8>)
 8004818:	429c      	cmp	r4, r3
 800481a:	bf08      	it	eq
 800481c:	68ec      	ldreq	r4, [r5, #12]
 800481e:	e7d5      	b.n	80047cc <_puts_r+0x24>
 8004820:	4621      	mov	r1, r4
 8004822:	4628      	mov	r0, r5
 8004824:	f000 f888 	bl	8004938 <__swsetup_r>
 8004828:	2800      	cmp	r0, #0
 800482a:	d0dd      	beq.n	80047e8 <_puts_r+0x40>
 800482c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004830:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004832:	07da      	lsls	r2, r3, #31
 8004834:	d405      	bmi.n	8004842 <_puts_r+0x9a>
 8004836:	89a3      	ldrh	r3, [r4, #12]
 8004838:	059b      	lsls	r3, r3, #22
 800483a:	d402      	bmi.n	8004842 <_puts_r+0x9a>
 800483c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800483e:	f000 faa2 	bl	8004d86 <__retarget_lock_release_recursive>
 8004842:	4628      	mov	r0, r5
 8004844:	bd70      	pop	{r4, r5, r6, pc}
 8004846:	2b00      	cmp	r3, #0
 8004848:	da04      	bge.n	8004854 <_puts_r+0xac>
 800484a:	69a2      	ldr	r2, [r4, #24]
 800484c:	429a      	cmp	r2, r3
 800484e:	dc06      	bgt.n	800485e <_puts_r+0xb6>
 8004850:	290a      	cmp	r1, #10
 8004852:	d004      	beq.n	800485e <_puts_r+0xb6>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	6022      	str	r2, [r4, #0]
 800485a:	7019      	strb	r1, [r3, #0]
 800485c:	e7c5      	b.n	80047ea <_puts_r+0x42>
 800485e:	4622      	mov	r2, r4
 8004860:	4628      	mov	r0, r5
 8004862:	f000 f817 	bl	8004894 <__swbuf_r>
 8004866:	3001      	adds	r0, #1
 8004868:	d1bf      	bne.n	80047ea <_puts_r+0x42>
 800486a:	e7df      	b.n	800482c <_puts_r+0x84>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	250a      	movs	r5, #10
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	6022      	str	r2, [r4, #0]
 8004874:	701d      	strb	r5, [r3, #0]
 8004876:	e7db      	b.n	8004830 <_puts_r+0x88>
 8004878:	080051cc 	.word	0x080051cc
 800487c:	080051ec 	.word	0x080051ec
 8004880:	080051ac 	.word	0x080051ac

08004884 <puts>:
 8004884:	4b02      	ldr	r3, [pc, #8]	; (8004890 <puts+0xc>)
 8004886:	4601      	mov	r1, r0
 8004888:	6818      	ldr	r0, [r3, #0]
 800488a:	f7ff bf8d 	b.w	80047a8 <_puts_r>
 800488e:	bf00      	nop
 8004890:	2000271c 	.word	0x2000271c

08004894 <__swbuf_r>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	460e      	mov	r6, r1
 8004898:	4614      	mov	r4, r2
 800489a:	4605      	mov	r5, r0
 800489c:	b118      	cbz	r0, 80048a6 <__swbuf_r+0x12>
 800489e:	6983      	ldr	r3, [r0, #24]
 80048a0:	b90b      	cbnz	r3, 80048a6 <__swbuf_r+0x12>
 80048a2:	f000 f9d1 	bl	8004c48 <__sinit>
 80048a6:	4b21      	ldr	r3, [pc, #132]	; (800492c <__swbuf_r+0x98>)
 80048a8:	429c      	cmp	r4, r3
 80048aa:	d12b      	bne.n	8004904 <__swbuf_r+0x70>
 80048ac:	686c      	ldr	r4, [r5, #4]
 80048ae:	69a3      	ldr	r3, [r4, #24]
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	89a3      	ldrh	r3, [r4, #12]
 80048b4:	071a      	lsls	r2, r3, #28
 80048b6:	d52f      	bpl.n	8004918 <__swbuf_r+0x84>
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	b36b      	cbz	r3, 8004918 <__swbuf_r+0x84>
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	1ac0      	subs	r0, r0, r3
 80048c2:	6963      	ldr	r3, [r4, #20]
 80048c4:	b2f6      	uxtb	r6, r6
 80048c6:	4283      	cmp	r3, r0
 80048c8:	4637      	mov	r7, r6
 80048ca:	dc04      	bgt.n	80048d6 <__swbuf_r+0x42>
 80048cc:	4621      	mov	r1, r4
 80048ce:	4628      	mov	r0, r5
 80048d0:	f000 f926 	bl	8004b20 <_fflush_r>
 80048d4:	bb30      	cbnz	r0, 8004924 <__swbuf_r+0x90>
 80048d6:	68a3      	ldr	r3, [r4, #8]
 80048d8:	3b01      	subs	r3, #1
 80048da:	60a3      	str	r3, [r4, #8]
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	6022      	str	r2, [r4, #0]
 80048e2:	701e      	strb	r6, [r3, #0]
 80048e4:	6963      	ldr	r3, [r4, #20]
 80048e6:	3001      	adds	r0, #1
 80048e8:	4283      	cmp	r3, r0
 80048ea:	d004      	beq.n	80048f6 <__swbuf_r+0x62>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	07db      	lsls	r3, r3, #31
 80048f0:	d506      	bpl.n	8004900 <__swbuf_r+0x6c>
 80048f2:	2e0a      	cmp	r6, #10
 80048f4:	d104      	bne.n	8004900 <__swbuf_r+0x6c>
 80048f6:	4621      	mov	r1, r4
 80048f8:	4628      	mov	r0, r5
 80048fa:	f000 f911 	bl	8004b20 <_fflush_r>
 80048fe:	b988      	cbnz	r0, 8004924 <__swbuf_r+0x90>
 8004900:	4638      	mov	r0, r7
 8004902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <__swbuf_r+0x9c>)
 8004906:	429c      	cmp	r4, r3
 8004908:	d101      	bne.n	800490e <__swbuf_r+0x7a>
 800490a:	68ac      	ldr	r4, [r5, #8]
 800490c:	e7cf      	b.n	80048ae <__swbuf_r+0x1a>
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <__swbuf_r+0xa0>)
 8004910:	429c      	cmp	r4, r3
 8004912:	bf08      	it	eq
 8004914:	68ec      	ldreq	r4, [r5, #12]
 8004916:	e7ca      	b.n	80048ae <__swbuf_r+0x1a>
 8004918:	4621      	mov	r1, r4
 800491a:	4628      	mov	r0, r5
 800491c:	f000 f80c 	bl	8004938 <__swsetup_r>
 8004920:	2800      	cmp	r0, #0
 8004922:	d0cb      	beq.n	80048bc <__swbuf_r+0x28>
 8004924:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004928:	e7ea      	b.n	8004900 <__swbuf_r+0x6c>
 800492a:	bf00      	nop
 800492c:	080051cc 	.word	0x080051cc
 8004930:	080051ec 	.word	0x080051ec
 8004934:	080051ac 	.word	0x080051ac

08004938 <__swsetup_r>:
 8004938:	4b32      	ldr	r3, [pc, #200]	; (8004a04 <__swsetup_r+0xcc>)
 800493a:	b570      	push	{r4, r5, r6, lr}
 800493c:	681d      	ldr	r5, [r3, #0]
 800493e:	4606      	mov	r6, r0
 8004940:	460c      	mov	r4, r1
 8004942:	b125      	cbz	r5, 800494e <__swsetup_r+0x16>
 8004944:	69ab      	ldr	r3, [r5, #24]
 8004946:	b913      	cbnz	r3, 800494e <__swsetup_r+0x16>
 8004948:	4628      	mov	r0, r5
 800494a:	f000 f97d 	bl	8004c48 <__sinit>
 800494e:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <__swsetup_r+0xd0>)
 8004950:	429c      	cmp	r4, r3
 8004952:	d10f      	bne.n	8004974 <__swsetup_r+0x3c>
 8004954:	686c      	ldr	r4, [r5, #4]
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800495c:	0719      	lsls	r1, r3, #28
 800495e:	d42c      	bmi.n	80049ba <__swsetup_r+0x82>
 8004960:	06dd      	lsls	r5, r3, #27
 8004962:	d411      	bmi.n	8004988 <__swsetup_r+0x50>
 8004964:	2309      	movs	r3, #9
 8004966:	6033      	str	r3, [r6, #0]
 8004968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004972:	e03e      	b.n	80049f2 <__swsetup_r+0xba>
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <__swsetup_r+0xd4>)
 8004976:	429c      	cmp	r4, r3
 8004978:	d101      	bne.n	800497e <__swsetup_r+0x46>
 800497a:	68ac      	ldr	r4, [r5, #8]
 800497c:	e7eb      	b.n	8004956 <__swsetup_r+0x1e>
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <__swsetup_r+0xd8>)
 8004980:	429c      	cmp	r4, r3
 8004982:	bf08      	it	eq
 8004984:	68ec      	ldreq	r4, [r5, #12]
 8004986:	e7e6      	b.n	8004956 <__swsetup_r+0x1e>
 8004988:	0758      	lsls	r0, r3, #29
 800498a:	d512      	bpl.n	80049b2 <__swsetup_r+0x7a>
 800498c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800498e:	b141      	cbz	r1, 80049a2 <__swsetup_r+0x6a>
 8004990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004994:	4299      	cmp	r1, r3
 8004996:	d002      	beq.n	800499e <__swsetup_r+0x66>
 8004998:	4630      	mov	r0, r6
 800499a:	f000 fa59 	bl	8004e50 <_free_r>
 800499e:	2300      	movs	r3, #0
 80049a0:	6363      	str	r3, [r4, #52]	; 0x34
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049a8:	81a3      	strh	r3, [r4, #12]
 80049aa:	2300      	movs	r3, #0
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	f043 0308 	orr.w	r3, r3, #8
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	b94b      	cbnz	r3, 80049d2 <__swsetup_r+0x9a>
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c8:	d003      	beq.n	80049d2 <__swsetup_r+0x9a>
 80049ca:	4621      	mov	r1, r4
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 f9ff 	bl	8004dd0 <__smakebuf_r>
 80049d2:	89a0      	ldrh	r0, [r4, #12]
 80049d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049d8:	f010 0301 	ands.w	r3, r0, #1
 80049dc:	d00a      	beq.n	80049f4 <__swsetup_r+0xbc>
 80049de:	2300      	movs	r3, #0
 80049e0:	60a3      	str	r3, [r4, #8]
 80049e2:	6963      	ldr	r3, [r4, #20]
 80049e4:	425b      	negs	r3, r3
 80049e6:	61a3      	str	r3, [r4, #24]
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	b943      	cbnz	r3, 80049fe <__swsetup_r+0xc6>
 80049ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049f0:	d1ba      	bne.n	8004968 <__swsetup_r+0x30>
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
 80049f4:	0781      	lsls	r1, r0, #30
 80049f6:	bf58      	it	pl
 80049f8:	6963      	ldrpl	r3, [r4, #20]
 80049fa:	60a3      	str	r3, [r4, #8]
 80049fc:	e7f4      	b.n	80049e8 <__swsetup_r+0xb0>
 80049fe:	2000      	movs	r0, #0
 8004a00:	e7f7      	b.n	80049f2 <__swsetup_r+0xba>
 8004a02:	bf00      	nop
 8004a04:	2000271c 	.word	0x2000271c
 8004a08:	080051cc 	.word	0x080051cc
 8004a0c:	080051ec 	.word	0x080051ec
 8004a10:	080051ac 	.word	0x080051ac

08004a14 <__sflush_r>:
 8004a14:	898a      	ldrh	r2, [r1, #12]
 8004a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	0710      	lsls	r0, r2, #28
 8004a1e:	460c      	mov	r4, r1
 8004a20:	d458      	bmi.n	8004ad4 <__sflush_r+0xc0>
 8004a22:	684b      	ldr	r3, [r1, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dc05      	bgt.n	8004a34 <__sflush_r+0x20>
 8004a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	dc02      	bgt.n	8004a34 <__sflush_r+0x20>
 8004a2e:	2000      	movs	r0, #0
 8004a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a36:	2e00      	cmp	r6, #0
 8004a38:	d0f9      	beq.n	8004a2e <__sflush_r+0x1a>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a40:	682f      	ldr	r7, [r5, #0]
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	d032      	beq.n	8004aac <__sflush_r+0x98>
 8004a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	075a      	lsls	r2, r3, #29
 8004a4c:	d505      	bpl.n	8004a5a <__sflush_r+0x46>
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	1ac0      	subs	r0, r0, r3
 8004a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a54:	b10b      	cbz	r3, 8004a5a <__sflush_r+0x46>
 8004a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a58:	1ac0      	subs	r0, r0, r3
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a60:	6a21      	ldr	r1, [r4, #32]
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b0      	blx	r6
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	d106      	bne.n	8004a7a <__sflush_r+0x66>
 8004a6c:	6829      	ldr	r1, [r5, #0]
 8004a6e:	291d      	cmp	r1, #29
 8004a70:	d82c      	bhi.n	8004acc <__sflush_r+0xb8>
 8004a72:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <__sflush_r+0x108>)
 8004a74:	40ca      	lsrs	r2, r1
 8004a76:	07d6      	lsls	r6, r2, #31
 8004a78:	d528      	bpl.n	8004acc <__sflush_r+0xb8>
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	6062      	str	r2, [r4, #4]
 8004a7e:	04d9      	lsls	r1, r3, #19
 8004a80:	6922      	ldr	r2, [r4, #16]
 8004a82:	6022      	str	r2, [r4, #0]
 8004a84:	d504      	bpl.n	8004a90 <__sflush_r+0x7c>
 8004a86:	1c42      	adds	r2, r0, #1
 8004a88:	d101      	bne.n	8004a8e <__sflush_r+0x7a>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	b903      	cbnz	r3, 8004a90 <__sflush_r+0x7c>
 8004a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a92:	602f      	str	r7, [r5, #0]
 8004a94:	2900      	cmp	r1, #0
 8004a96:	d0ca      	beq.n	8004a2e <__sflush_r+0x1a>
 8004a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a9c:	4299      	cmp	r1, r3
 8004a9e:	d002      	beq.n	8004aa6 <__sflush_r+0x92>
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 f9d5 	bl	8004e50 <_free_r>
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8004aaa:	e7c1      	b.n	8004a30 <__sflush_r+0x1c>
 8004aac:	6a21      	ldr	r1, [r4, #32]
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b0      	blx	r6
 8004ab4:	1c41      	adds	r1, r0, #1
 8004ab6:	d1c7      	bne.n	8004a48 <__sflush_r+0x34>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0c4      	beq.n	8004a48 <__sflush_r+0x34>
 8004abe:	2b1d      	cmp	r3, #29
 8004ac0:	d001      	beq.n	8004ac6 <__sflush_r+0xb2>
 8004ac2:	2b16      	cmp	r3, #22
 8004ac4:	d101      	bne.n	8004aca <__sflush_r+0xb6>
 8004ac6:	602f      	str	r7, [r5, #0]
 8004ac8:	e7b1      	b.n	8004a2e <__sflush_r+0x1a>
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	e7ad      	b.n	8004a30 <__sflush_r+0x1c>
 8004ad4:	690f      	ldr	r7, [r1, #16]
 8004ad6:	2f00      	cmp	r7, #0
 8004ad8:	d0a9      	beq.n	8004a2e <__sflush_r+0x1a>
 8004ada:	0793      	lsls	r3, r2, #30
 8004adc:	680e      	ldr	r6, [r1, #0]
 8004ade:	bf08      	it	eq
 8004ae0:	694b      	ldreq	r3, [r1, #20]
 8004ae2:	600f      	str	r7, [r1, #0]
 8004ae4:	bf18      	it	ne
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	eba6 0807 	sub.w	r8, r6, r7
 8004aec:	608b      	str	r3, [r1, #8]
 8004aee:	f1b8 0f00 	cmp.w	r8, #0
 8004af2:	dd9c      	ble.n	8004a2e <__sflush_r+0x1a>
 8004af4:	6a21      	ldr	r1, [r4, #32]
 8004af6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004af8:	4643      	mov	r3, r8
 8004afa:	463a      	mov	r2, r7
 8004afc:	4628      	mov	r0, r5
 8004afe:	47b0      	blx	r6
 8004b00:	2800      	cmp	r0, #0
 8004b02:	dc06      	bgt.n	8004b12 <__sflush_r+0xfe>
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b10:	e78e      	b.n	8004a30 <__sflush_r+0x1c>
 8004b12:	4407      	add	r7, r0
 8004b14:	eba8 0800 	sub.w	r8, r8, r0
 8004b18:	e7e9      	b.n	8004aee <__sflush_r+0xda>
 8004b1a:	bf00      	nop
 8004b1c:	20400001 	.word	0x20400001

08004b20 <_fflush_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	690b      	ldr	r3, [r1, #16]
 8004b24:	4605      	mov	r5, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	b913      	cbnz	r3, 8004b30 <_fflush_r+0x10>
 8004b2a:	2500      	movs	r5, #0
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	b118      	cbz	r0, 8004b3a <_fflush_r+0x1a>
 8004b32:	6983      	ldr	r3, [r0, #24]
 8004b34:	b90b      	cbnz	r3, 8004b3a <_fflush_r+0x1a>
 8004b36:	f000 f887 	bl	8004c48 <__sinit>
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <_fflush_r+0x6c>)
 8004b3c:	429c      	cmp	r4, r3
 8004b3e:	d11b      	bne.n	8004b78 <_fflush_r+0x58>
 8004b40:	686c      	ldr	r4, [r5, #4]
 8004b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ef      	beq.n	8004b2a <_fflush_r+0xa>
 8004b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b4c:	07d0      	lsls	r0, r2, #31
 8004b4e:	d404      	bmi.n	8004b5a <_fflush_r+0x3a>
 8004b50:	0599      	lsls	r1, r3, #22
 8004b52:	d402      	bmi.n	8004b5a <_fflush_r+0x3a>
 8004b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b56:	f000 f915 	bl	8004d84 <__retarget_lock_acquire_recursive>
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	f7ff ff59 	bl	8004a14 <__sflush_r>
 8004b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b64:	07da      	lsls	r2, r3, #31
 8004b66:	4605      	mov	r5, r0
 8004b68:	d4e0      	bmi.n	8004b2c <_fflush_r+0xc>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	059b      	lsls	r3, r3, #22
 8004b6e:	d4dd      	bmi.n	8004b2c <_fflush_r+0xc>
 8004b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b72:	f000 f908 	bl	8004d86 <__retarget_lock_release_recursive>
 8004b76:	e7d9      	b.n	8004b2c <_fflush_r+0xc>
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <_fflush_r+0x70>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d101      	bne.n	8004b82 <_fflush_r+0x62>
 8004b7e:	68ac      	ldr	r4, [r5, #8]
 8004b80:	e7df      	b.n	8004b42 <_fflush_r+0x22>
 8004b82:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <_fflush_r+0x74>)
 8004b84:	429c      	cmp	r4, r3
 8004b86:	bf08      	it	eq
 8004b88:	68ec      	ldreq	r4, [r5, #12]
 8004b8a:	e7da      	b.n	8004b42 <_fflush_r+0x22>
 8004b8c:	080051cc 	.word	0x080051cc
 8004b90:	080051ec 	.word	0x080051ec
 8004b94:	080051ac 	.word	0x080051ac

08004b98 <std>:
 8004b98:	2300      	movs	r3, #0
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ba6:	6083      	str	r3, [r0, #8]
 8004ba8:	8181      	strh	r1, [r0, #12]
 8004baa:	6643      	str	r3, [r0, #100]	; 0x64
 8004bac:	81c2      	strh	r2, [r0, #14]
 8004bae:	6183      	str	r3, [r0, #24]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	305c      	adds	r0, #92	; 0x5c
 8004bb6:	f7ff fdef 	bl	8004798 <memset>
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <std+0x38>)
 8004bbc:	6263      	str	r3, [r4, #36]	; 0x24
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <std+0x3c>)
 8004bc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <std+0x40>)
 8004bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <std+0x44>)
 8004bc8:	6224      	str	r4, [r4, #32]
 8004bca:	6323      	str	r3, [r4, #48]	; 0x30
 8004bcc:	bd10      	pop	{r4, pc}
 8004bce:	bf00      	nop
 8004bd0:	08004fc5 	.word	0x08004fc5
 8004bd4:	08004fe7 	.word	0x08004fe7
 8004bd8:	0800501f 	.word	0x0800501f
 8004bdc:	08005043 	.word	0x08005043

08004be0 <_cleanup_r>:
 8004be0:	4901      	ldr	r1, [pc, #4]	; (8004be8 <_cleanup_r+0x8>)
 8004be2:	f000 b8af 	b.w	8004d44 <_fwalk_reent>
 8004be6:	bf00      	nop
 8004be8:	08004b21 	.word	0x08004b21

08004bec <__sfmoreglue>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	1e4a      	subs	r2, r1, #1
 8004bf0:	2568      	movs	r5, #104	; 0x68
 8004bf2:	4355      	muls	r5, r2
 8004bf4:	460e      	mov	r6, r1
 8004bf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bfa:	f000 f979 	bl	8004ef0 <_malloc_r>
 8004bfe:	4604      	mov	r4, r0
 8004c00:	b140      	cbz	r0, 8004c14 <__sfmoreglue+0x28>
 8004c02:	2100      	movs	r1, #0
 8004c04:	e9c0 1600 	strd	r1, r6, [r0]
 8004c08:	300c      	adds	r0, #12
 8004c0a:	60a0      	str	r0, [r4, #8]
 8004c0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c10:	f7ff fdc2 	bl	8004798 <memset>
 8004c14:	4620      	mov	r0, r4
 8004c16:	bd70      	pop	{r4, r5, r6, pc}

08004c18 <__sfp_lock_acquire>:
 8004c18:	4801      	ldr	r0, [pc, #4]	; (8004c20 <__sfp_lock_acquire+0x8>)
 8004c1a:	f000 b8b3 	b.w	8004d84 <__retarget_lock_acquire_recursive>
 8004c1e:	bf00      	nop
 8004c20:	20015b7c 	.word	0x20015b7c

08004c24 <__sfp_lock_release>:
 8004c24:	4801      	ldr	r0, [pc, #4]	; (8004c2c <__sfp_lock_release+0x8>)
 8004c26:	f000 b8ae 	b.w	8004d86 <__retarget_lock_release_recursive>
 8004c2a:	bf00      	nop
 8004c2c:	20015b7c 	.word	0x20015b7c

08004c30 <__sinit_lock_acquire>:
 8004c30:	4801      	ldr	r0, [pc, #4]	; (8004c38 <__sinit_lock_acquire+0x8>)
 8004c32:	f000 b8a7 	b.w	8004d84 <__retarget_lock_acquire_recursive>
 8004c36:	bf00      	nop
 8004c38:	20015b77 	.word	0x20015b77

08004c3c <__sinit_lock_release>:
 8004c3c:	4801      	ldr	r0, [pc, #4]	; (8004c44 <__sinit_lock_release+0x8>)
 8004c3e:	f000 b8a2 	b.w	8004d86 <__retarget_lock_release_recursive>
 8004c42:	bf00      	nop
 8004c44:	20015b77 	.word	0x20015b77

08004c48 <__sinit>:
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	f7ff fff0 	bl	8004c30 <__sinit_lock_acquire>
 8004c50:	69a3      	ldr	r3, [r4, #24]
 8004c52:	b11b      	cbz	r3, 8004c5c <__sinit+0x14>
 8004c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c58:	f7ff bff0 	b.w	8004c3c <__sinit_lock_release>
 8004c5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c60:	6523      	str	r3, [r4, #80]	; 0x50
 8004c62:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <__sinit+0x68>)
 8004c64:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <__sinit+0x6c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c6a:	42a3      	cmp	r3, r4
 8004c6c:	bf04      	itt	eq
 8004c6e:	2301      	moveq	r3, #1
 8004c70:	61a3      	streq	r3, [r4, #24]
 8004c72:	4620      	mov	r0, r4
 8004c74:	f000 f820 	bl	8004cb8 <__sfp>
 8004c78:	6060      	str	r0, [r4, #4]
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 f81c 	bl	8004cb8 <__sfp>
 8004c80:	60a0      	str	r0, [r4, #8]
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 f818 	bl	8004cb8 <__sfp>
 8004c88:	2200      	movs	r2, #0
 8004c8a:	60e0      	str	r0, [r4, #12]
 8004c8c:	2104      	movs	r1, #4
 8004c8e:	6860      	ldr	r0, [r4, #4]
 8004c90:	f7ff ff82 	bl	8004b98 <std>
 8004c94:	68a0      	ldr	r0, [r4, #8]
 8004c96:	2201      	movs	r2, #1
 8004c98:	2109      	movs	r1, #9
 8004c9a:	f7ff ff7d 	bl	8004b98 <std>
 8004c9e:	68e0      	ldr	r0, [r4, #12]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	2112      	movs	r1, #18
 8004ca4:	f7ff ff78 	bl	8004b98 <std>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	61a3      	str	r3, [r4, #24]
 8004cac:	e7d2      	b.n	8004c54 <__sinit+0xc>
 8004cae:	bf00      	nop
 8004cb0:	080051a8 	.word	0x080051a8
 8004cb4:	08004be1 	.word	0x08004be1

08004cb8 <__sfp>:
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	4607      	mov	r7, r0
 8004cbc:	f7ff ffac 	bl	8004c18 <__sfp_lock_acquire>
 8004cc0:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <__sfp+0x84>)
 8004cc2:	681e      	ldr	r6, [r3, #0]
 8004cc4:	69b3      	ldr	r3, [r6, #24]
 8004cc6:	b913      	cbnz	r3, 8004cce <__sfp+0x16>
 8004cc8:	4630      	mov	r0, r6
 8004cca:	f7ff ffbd 	bl	8004c48 <__sinit>
 8004cce:	3648      	adds	r6, #72	; 0x48
 8004cd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	d503      	bpl.n	8004ce0 <__sfp+0x28>
 8004cd8:	6833      	ldr	r3, [r6, #0]
 8004cda:	b30b      	cbz	r3, 8004d20 <__sfp+0x68>
 8004cdc:	6836      	ldr	r6, [r6, #0]
 8004cde:	e7f7      	b.n	8004cd0 <__sfp+0x18>
 8004ce0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ce4:	b9d5      	cbnz	r5, 8004d1c <__sfp+0x64>
 8004ce6:	4b16      	ldr	r3, [pc, #88]	; (8004d40 <__sfp+0x88>)
 8004ce8:	60e3      	str	r3, [r4, #12]
 8004cea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cee:	6665      	str	r5, [r4, #100]	; 0x64
 8004cf0:	f000 f847 	bl	8004d82 <__retarget_lock_init_recursive>
 8004cf4:	f7ff ff96 	bl	8004c24 <__sfp_lock_release>
 8004cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d00:	6025      	str	r5, [r4, #0]
 8004d02:	61a5      	str	r5, [r4, #24]
 8004d04:	2208      	movs	r2, #8
 8004d06:	4629      	mov	r1, r5
 8004d08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d0c:	f7ff fd44 	bl	8004798 <memset>
 8004d10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d18:	4620      	mov	r0, r4
 8004d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d1c:	3468      	adds	r4, #104	; 0x68
 8004d1e:	e7d9      	b.n	8004cd4 <__sfp+0x1c>
 8004d20:	2104      	movs	r1, #4
 8004d22:	4638      	mov	r0, r7
 8004d24:	f7ff ff62 	bl	8004bec <__sfmoreglue>
 8004d28:	4604      	mov	r4, r0
 8004d2a:	6030      	str	r0, [r6, #0]
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d1d5      	bne.n	8004cdc <__sfp+0x24>
 8004d30:	f7ff ff78 	bl	8004c24 <__sfp_lock_release>
 8004d34:	230c      	movs	r3, #12
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	e7ee      	b.n	8004d18 <__sfp+0x60>
 8004d3a:	bf00      	nop
 8004d3c:	080051a8 	.word	0x080051a8
 8004d40:	ffff0001 	.word	0xffff0001

08004d44 <_fwalk_reent>:
 8004d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d48:	4606      	mov	r6, r0
 8004d4a:	4688      	mov	r8, r1
 8004d4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d50:	2700      	movs	r7, #0
 8004d52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d56:	f1b9 0901 	subs.w	r9, r9, #1
 8004d5a:	d505      	bpl.n	8004d68 <_fwalk_reent+0x24>
 8004d5c:	6824      	ldr	r4, [r4, #0]
 8004d5e:	2c00      	cmp	r4, #0
 8004d60:	d1f7      	bne.n	8004d52 <_fwalk_reent+0xe>
 8004d62:	4638      	mov	r0, r7
 8004d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d68:	89ab      	ldrh	r3, [r5, #12]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d907      	bls.n	8004d7e <_fwalk_reent+0x3a>
 8004d6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d72:	3301      	adds	r3, #1
 8004d74:	d003      	beq.n	8004d7e <_fwalk_reent+0x3a>
 8004d76:	4629      	mov	r1, r5
 8004d78:	4630      	mov	r0, r6
 8004d7a:	47c0      	blx	r8
 8004d7c:	4307      	orrs	r7, r0
 8004d7e:	3568      	adds	r5, #104	; 0x68
 8004d80:	e7e9      	b.n	8004d56 <_fwalk_reent+0x12>

08004d82 <__retarget_lock_init_recursive>:
 8004d82:	4770      	bx	lr

08004d84 <__retarget_lock_acquire_recursive>:
 8004d84:	4770      	bx	lr

08004d86 <__retarget_lock_release_recursive>:
 8004d86:	4770      	bx	lr

08004d88 <__swhatbuf_r>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	460e      	mov	r6, r1
 8004d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d90:	2900      	cmp	r1, #0
 8004d92:	b096      	sub	sp, #88	; 0x58
 8004d94:	4614      	mov	r4, r2
 8004d96:	461d      	mov	r5, r3
 8004d98:	da07      	bge.n	8004daa <__swhatbuf_r+0x22>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	89b3      	ldrh	r3, [r6, #12]
 8004da0:	061a      	lsls	r2, r3, #24
 8004da2:	d410      	bmi.n	8004dc6 <__swhatbuf_r+0x3e>
 8004da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da8:	e00e      	b.n	8004dc8 <__swhatbuf_r+0x40>
 8004daa:	466a      	mov	r2, sp
 8004dac:	f000 f970 	bl	8005090 <_fstat_r>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	dbf2      	blt.n	8004d9a <__swhatbuf_r+0x12>
 8004db4:	9a01      	ldr	r2, [sp, #4]
 8004db6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dbe:	425a      	negs	r2, r3
 8004dc0:	415a      	adcs	r2, r3
 8004dc2:	602a      	str	r2, [r5, #0]
 8004dc4:	e7ee      	b.n	8004da4 <__swhatbuf_r+0x1c>
 8004dc6:	2340      	movs	r3, #64	; 0x40
 8004dc8:	2000      	movs	r0, #0
 8004dca:	6023      	str	r3, [r4, #0]
 8004dcc:	b016      	add	sp, #88	; 0x58
 8004dce:	bd70      	pop	{r4, r5, r6, pc}

08004dd0 <__smakebuf_r>:
 8004dd0:	898b      	ldrh	r3, [r1, #12]
 8004dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dd4:	079d      	lsls	r5, r3, #30
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	460c      	mov	r4, r1
 8004dda:	d507      	bpl.n	8004dec <__smakebuf_r+0x1c>
 8004ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	6123      	str	r3, [r4, #16]
 8004de4:	2301      	movs	r3, #1
 8004de6:	6163      	str	r3, [r4, #20]
 8004de8:	b002      	add	sp, #8
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	ab01      	add	r3, sp, #4
 8004dee:	466a      	mov	r2, sp
 8004df0:	f7ff ffca 	bl	8004d88 <__swhatbuf_r>
 8004df4:	9900      	ldr	r1, [sp, #0]
 8004df6:	4605      	mov	r5, r0
 8004df8:	4630      	mov	r0, r6
 8004dfa:	f000 f879 	bl	8004ef0 <_malloc_r>
 8004dfe:	b948      	cbnz	r0, 8004e14 <__smakebuf_r+0x44>
 8004e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e04:	059a      	lsls	r2, r3, #22
 8004e06:	d4ef      	bmi.n	8004de8 <__smakebuf_r+0x18>
 8004e08:	f023 0303 	bic.w	r3, r3, #3
 8004e0c:	f043 0302 	orr.w	r3, r3, #2
 8004e10:	81a3      	strh	r3, [r4, #12]
 8004e12:	e7e3      	b.n	8004ddc <__smakebuf_r+0xc>
 8004e14:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <__smakebuf_r+0x7c>)
 8004e16:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	6020      	str	r0, [r4, #0]
 8004e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e20:	81a3      	strh	r3, [r4, #12]
 8004e22:	9b00      	ldr	r3, [sp, #0]
 8004e24:	6163      	str	r3, [r4, #20]
 8004e26:	9b01      	ldr	r3, [sp, #4]
 8004e28:	6120      	str	r0, [r4, #16]
 8004e2a:	b15b      	cbz	r3, 8004e44 <__smakebuf_r+0x74>
 8004e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e30:	4630      	mov	r0, r6
 8004e32:	f000 f93f 	bl	80050b4 <_isatty_r>
 8004e36:	b128      	cbz	r0, 8004e44 <__smakebuf_r+0x74>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	f023 0303 	bic.w	r3, r3, #3
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	81a3      	strh	r3, [r4, #12]
 8004e44:	89a0      	ldrh	r0, [r4, #12]
 8004e46:	4305      	orrs	r5, r0
 8004e48:	81a5      	strh	r5, [r4, #12]
 8004e4a:	e7cd      	b.n	8004de8 <__smakebuf_r+0x18>
 8004e4c:	08004be1 	.word	0x08004be1

08004e50 <_free_r>:
 8004e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e52:	2900      	cmp	r1, #0
 8004e54:	d048      	beq.n	8004ee8 <_free_r+0x98>
 8004e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e5a:	9001      	str	r0, [sp, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e62:	bfb8      	it	lt
 8004e64:	18e4      	addlt	r4, r4, r3
 8004e66:	f000 f947 	bl	80050f8 <__malloc_lock>
 8004e6a:	4a20      	ldr	r2, [pc, #128]	; (8004eec <_free_r+0x9c>)
 8004e6c:	9801      	ldr	r0, [sp, #4]
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	4615      	mov	r5, r2
 8004e72:	b933      	cbnz	r3, 8004e82 <_free_r+0x32>
 8004e74:	6063      	str	r3, [r4, #4]
 8004e76:	6014      	str	r4, [r2, #0]
 8004e78:	b003      	add	sp, #12
 8004e7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e7e:	f000 b941 	b.w	8005104 <__malloc_unlock>
 8004e82:	42a3      	cmp	r3, r4
 8004e84:	d90b      	bls.n	8004e9e <_free_r+0x4e>
 8004e86:	6821      	ldr	r1, [r4, #0]
 8004e88:	1862      	adds	r2, r4, r1
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	bf04      	itt	eq
 8004e8e:	681a      	ldreq	r2, [r3, #0]
 8004e90:	685b      	ldreq	r3, [r3, #4]
 8004e92:	6063      	str	r3, [r4, #4]
 8004e94:	bf04      	itt	eq
 8004e96:	1852      	addeq	r2, r2, r1
 8004e98:	6022      	streq	r2, [r4, #0]
 8004e9a:	602c      	str	r4, [r5, #0]
 8004e9c:	e7ec      	b.n	8004e78 <_free_r+0x28>
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	b10b      	cbz	r3, 8004ea8 <_free_r+0x58>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d9fa      	bls.n	8004e9e <_free_r+0x4e>
 8004ea8:	6811      	ldr	r1, [r2, #0]
 8004eaa:	1855      	adds	r5, r2, r1
 8004eac:	42a5      	cmp	r5, r4
 8004eae:	d10b      	bne.n	8004ec8 <_free_r+0x78>
 8004eb0:	6824      	ldr	r4, [r4, #0]
 8004eb2:	4421      	add	r1, r4
 8004eb4:	1854      	adds	r4, r2, r1
 8004eb6:	42a3      	cmp	r3, r4
 8004eb8:	6011      	str	r1, [r2, #0]
 8004eba:	d1dd      	bne.n	8004e78 <_free_r+0x28>
 8004ebc:	681c      	ldr	r4, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	6053      	str	r3, [r2, #4]
 8004ec2:	4421      	add	r1, r4
 8004ec4:	6011      	str	r1, [r2, #0]
 8004ec6:	e7d7      	b.n	8004e78 <_free_r+0x28>
 8004ec8:	d902      	bls.n	8004ed0 <_free_r+0x80>
 8004eca:	230c      	movs	r3, #12
 8004ecc:	6003      	str	r3, [r0, #0]
 8004ece:	e7d3      	b.n	8004e78 <_free_r+0x28>
 8004ed0:	6825      	ldr	r5, [r4, #0]
 8004ed2:	1961      	adds	r1, r4, r5
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	bf04      	itt	eq
 8004ed8:	6819      	ldreq	r1, [r3, #0]
 8004eda:	685b      	ldreq	r3, [r3, #4]
 8004edc:	6063      	str	r3, [r4, #4]
 8004ede:	bf04      	itt	eq
 8004ee0:	1949      	addeq	r1, r1, r5
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	6054      	str	r4, [r2, #4]
 8004ee6:	e7c7      	b.n	8004e78 <_free_r+0x28>
 8004ee8:	b003      	add	sp, #12
 8004eea:	bd30      	pop	{r4, r5, pc}
 8004eec:	200027a0 	.word	0x200027a0

08004ef0 <_malloc_r>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	1ccd      	adds	r5, r1, #3
 8004ef4:	f025 0503 	bic.w	r5, r5, #3
 8004ef8:	3508      	adds	r5, #8
 8004efa:	2d0c      	cmp	r5, #12
 8004efc:	bf38      	it	cc
 8004efe:	250c      	movcc	r5, #12
 8004f00:	2d00      	cmp	r5, #0
 8004f02:	4606      	mov	r6, r0
 8004f04:	db01      	blt.n	8004f0a <_malloc_r+0x1a>
 8004f06:	42a9      	cmp	r1, r5
 8004f08:	d903      	bls.n	8004f12 <_malloc_r+0x22>
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	6033      	str	r3, [r6, #0]
 8004f0e:	2000      	movs	r0, #0
 8004f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f12:	f000 f8f1 	bl	80050f8 <__malloc_lock>
 8004f16:	4921      	ldr	r1, [pc, #132]	; (8004f9c <_malloc_r+0xac>)
 8004f18:	680a      	ldr	r2, [r1, #0]
 8004f1a:	4614      	mov	r4, r2
 8004f1c:	b99c      	cbnz	r4, 8004f46 <_malloc_r+0x56>
 8004f1e:	4f20      	ldr	r7, [pc, #128]	; (8004fa0 <_malloc_r+0xb0>)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	b923      	cbnz	r3, 8004f2e <_malloc_r+0x3e>
 8004f24:	4621      	mov	r1, r4
 8004f26:	4630      	mov	r0, r6
 8004f28:	f000 f83c 	bl	8004fa4 <_sbrk_r>
 8004f2c:	6038      	str	r0, [r7, #0]
 8004f2e:	4629      	mov	r1, r5
 8004f30:	4630      	mov	r0, r6
 8004f32:	f000 f837 	bl	8004fa4 <_sbrk_r>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	d123      	bne.n	8004f82 <_malloc_r+0x92>
 8004f3a:	230c      	movs	r3, #12
 8004f3c:	6033      	str	r3, [r6, #0]
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f000 f8e0 	bl	8005104 <__malloc_unlock>
 8004f44:	e7e3      	b.n	8004f0e <_malloc_r+0x1e>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	1b5b      	subs	r3, r3, r5
 8004f4a:	d417      	bmi.n	8004f7c <_malloc_r+0x8c>
 8004f4c:	2b0b      	cmp	r3, #11
 8004f4e:	d903      	bls.n	8004f58 <_malloc_r+0x68>
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	441c      	add	r4, r3
 8004f54:	6025      	str	r5, [r4, #0]
 8004f56:	e004      	b.n	8004f62 <_malloc_r+0x72>
 8004f58:	6863      	ldr	r3, [r4, #4]
 8004f5a:	42a2      	cmp	r2, r4
 8004f5c:	bf0c      	ite	eq
 8004f5e:	600b      	streq	r3, [r1, #0]
 8004f60:	6053      	strne	r3, [r2, #4]
 8004f62:	4630      	mov	r0, r6
 8004f64:	f000 f8ce 	bl	8005104 <__malloc_unlock>
 8004f68:	f104 000b 	add.w	r0, r4, #11
 8004f6c:	1d23      	adds	r3, r4, #4
 8004f6e:	f020 0007 	bic.w	r0, r0, #7
 8004f72:	1ac2      	subs	r2, r0, r3
 8004f74:	d0cc      	beq.n	8004f10 <_malloc_r+0x20>
 8004f76:	1a1b      	subs	r3, r3, r0
 8004f78:	50a3      	str	r3, [r4, r2]
 8004f7a:	e7c9      	b.n	8004f10 <_malloc_r+0x20>
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	6864      	ldr	r4, [r4, #4]
 8004f80:	e7cc      	b.n	8004f1c <_malloc_r+0x2c>
 8004f82:	1cc4      	adds	r4, r0, #3
 8004f84:	f024 0403 	bic.w	r4, r4, #3
 8004f88:	42a0      	cmp	r0, r4
 8004f8a:	d0e3      	beq.n	8004f54 <_malloc_r+0x64>
 8004f8c:	1a21      	subs	r1, r4, r0
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f000 f808 	bl	8004fa4 <_sbrk_r>
 8004f94:	3001      	adds	r0, #1
 8004f96:	d1dd      	bne.n	8004f54 <_malloc_r+0x64>
 8004f98:	e7cf      	b.n	8004f3a <_malloc_r+0x4a>
 8004f9a:	bf00      	nop
 8004f9c:	200027a0 	.word	0x200027a0
 8004fa0:	200027a4 	.word	0x200027a4

08004fa4 <_sbrk_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4d06      	ldr	r5, [pc, #24]	; (8004fc0 <_sbrk_r+0x1c>)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4604      	mov	r4, r0
 8004fac:	4608      	mov	r0, r1
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	f7fb fe94 	bl	8000cdc <_sbrk>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	d102      	bne.n	8004fbe <_sbrk_r+0x1a>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b103      	cbz	r3, 8004fbe <_sbrk_r+0x1a>
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	bd38      	pop	{r3, r4, r5, pc}
 8004fc0:	20015b80 	.word	0x20015b80

08004fc4 <__sread>:
 8004fc4:	b510      	push	{r4, lr}
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fcc:	f000 f8a0 	bl	8005110 <_read_r>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	bfab      	itete	ge
 8004fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fd8:	181b      	addge	r3, r3, r0
 8004fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fde:	bfac      	ite	ge
 8004fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fe2:	81a3      	strhlt	r3, [r4, #12]
 8004fe4:	bd10      	pop	{r4, pc}

08004fe6 <__swrite>:
 8004fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fea:	461f      	mov	r7, r3
 8004fec:	898b      	ldrh	r3, [r1, #12]
 8004fee:	05db      	lsls	r3, r3, #23
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	d505      	bpl.n	8005004 <__swrite+0x1e>
 8004ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	2200      	movs	r2, #0
 8005000:	f000 f868 	bl	80050d4 <_lseek_r>
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800500a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	4632      	mov	r2, r6
 8005012:	463b      	mov	r3, r7
 8005014:	4628      	mov	r0, r5
 8005016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800501a:	f000 b817 	b.w	800504c <_write_r>

0800501e <__sseek>:
 800501e:	b510      	push	{r4, lr}
 8005020:	460c      	mov	r4, r1
 8005022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005026:	f000 f855 	bl	80050d4 <_lseek_r>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	89a3      	ldrh	r3, [r4, #12]
 800502e:	bf15      	itete	ne
 8005030:	6560      	strne	r0, [r4, #84]	; 0x54
 8005032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800503a:	81a3      	strheq	r3, [r4, #12]
 800503c:	bf18      	it	ne
 800503e:	81a3      	strhne	r3, [r4, #12]
 8005040:	bd10      	pop	{r4, pc}

08005042 <__sclose>:
 8005042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005046:	f000 b813 	b.w	8005070 <_close_r>
	...

0800504c <_write_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d07      	ldr	r5, [pc, #28]	; (800506c <_write_r+0x20>)
 8005050:	4604      	mov	r4, r0
 8005052:	4608      	mov	r0, r1
 8005054:	4611      	mov	r1, r2
 8005056:	2200      	movs	r2, #0
 8005058:	602a      	str	r2, [r5, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	f7fb fded 	bl	8000c3a <_write>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_write_r+0x1e>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	b103      	cbz	r3, 800506a <_write_r+0x1e>
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	20015b80 	.word	0x20015b80

08005070 <_close_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4d06      	ldr	r5, [pc, #24]	; (800508c <_close_r+0x1c>)
 8005074:	2300      	movs	r3, #0
 8005076:	4604      	mov	r4, r0
 8005078:	4608      	mov	r0, r1
 800507a:	602b      	str	r3, [r5, #0]
 800507c:	f7fb fdf9 	bl	8000c72 <_close>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d102      	bne.n	800508a <_close_r+0x1a>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	b103      	cbz	r3, 800508a <_close_r+0x1a>
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	bd38      	pop	{r3, r4, r5, pc}
 800508c:	20015b80 	.word	0x20015b80

08005090 <_fstat_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d07      	ldr	r5, [pc, #28]	; (80050b0 <_fstat_r+0x20>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	602b      	str	r3, [r5, #0]
 800509e:	f7fb fdf4 	bl	8000c8a <_fstat>
 80050a2:	1c43      	adds	r3, r0, #1
 80050a4:	d102      	bne.n	80050ac <_fstat_r+0x1c>
 80050a6:	682b      	ldr	r3, [r5, #0]
 80050a8:	b103      	cbz	r3, 80050ac <_fstat_r+0x1c>
 80050aa:	6023      	str	r3, [r4, #0]
 80050ac:	bd38      	pop	{r3, r4, r5, pc}
 80050ae:	bf00      	nop
 80050b0:	20015b80 	.word	0x20015b80

080050b4 <_isatty_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4d06      	ldr	r5, [pc, #24]	; (80050d0 <_isatty_r+0x1c>)
 80050b8:	2300      	movs	r3, #0
 80050ba:	4604      	mov	r4, r0
 80050bc:	4608      	mov	r0, r1
 80050be:	602b      	str	r3, [r5, #0]
 80050c0:	f7fb fdf3 	bl	8000caa <_isatty>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	d102      	bne.n	80050ce <_isatty_r+0x1a>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	b103      	cbz	r3, 80050ce <_isatty_r+0x1a>
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
 80050d0:	20015b80 	.word	0x20015b80

080050d4 <_lseek_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4d07      	ldr	r5, [pc, #28]	; (80050f4 <_lseek_r+0x20>)
 80050d8:	4604      	mov	r4, r0
 80050da:	4608      	mov	r0, r1
 80050dc:	4611      	mov	r1, r2
 80050de:	2200      	movs	r2, #0
 80050e0:	602a      	str	r2, [r5, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f7fb fdec 	bl	8000cc0 <_lseek>
 80050e8:	1c43      	adds	r3, r0, #1
 80050ea:	d102      	bne.n	80050f2 <_lseek_r+0x1e>
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	b103      	cbz	r3, 80050f2 <_lseek_r+0x1e>
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	bd38      	pop	{r3, r4, r5, pc}
 80050f4:	20015b80 	.word	0x20015b80

080050f8 <__malloc_lock>:
 80050f8:	4801      	ldr	r0, [pc, #4]	; (8005100 <__malloc_lock+0x8>)
 80050fa:	f7ff be43 	b.w	8004d84 <__retarget_lock_acquire_recursive>
 80050fe:	bf00      	nop
 8005100:	20015b78 	.word	0x20015b78

08005104 <__malloc_unlock>:
 8005104:	4801      	ldr	r0, [pc, #4]	; (800510c <__malloc_unlock+0x8>)
 8005106:	f7ff be3e 	b.w	8004d86 <__retarget_lock_release_recursive>
 800510a:	bf00      	nop
 800510c:	20015b78 	.word	0x20015b78

08005110 <_read_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4d07      	ldr	r5, [pc, #28]	; (8005130 <_read_r+0x20>)
 8005114:	4604      	mov	r4, r0
 8005116:	4608      	mov	r0, r1
 8005118:	4611      	mov	r1, r2
 800511a:	2200      	movs	r2, #0
 800511c:	602a      	str	r2, [r5, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	f7fb fd6e 	bl	8000c00 <_read>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_read_r+0x1e>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_read_r+0x1e>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	20015b80 	.word	0x20015b80

08005134 <_init>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	bf00      	nop
 8005138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513a:	bc08      	pop	{r3}
 800513c:	469e      	mov	lr, r3
 800513e:	4770      	bx	lr

08005140 <_fini>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	bf00      	nop
 8005144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005146:	bc08      	pop	{r3}
 8005148:	469e      	mov	lr, r3
 800514a:	4770      	bx	lr
