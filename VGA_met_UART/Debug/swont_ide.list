
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f5c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051a4  080051a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051a4  080051a4  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051ac  080051ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013804  20000070  08005224  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013874  08005224  00023874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b35  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd0  00000000  00000000  00033bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  000367a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  000374c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004046  00000000  00000000  000380b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000faf3  00000000  00000000  0003c0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb8b4  00000000  00000000  0004bbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011749d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd4  00000000  00000000  001174f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050cc 	.word	0x080050cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080050cc 	.word	0x080050cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_DMA_Init+0x3c>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <MX_DMA_Init+0x3c>)
 80004d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_DMA_Init+0x3c>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2100      	movs	r1, #0
 80004e6:	2044      	movs	r0, #68	; 0x44
 80004e8:	f000 fffd 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80004ec:	2044      	movs	r0, #68	; 0x44
 80004ee:	f001 f816 	bl	800151e <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40023800 	.word	0x40023800

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b32      	ldr	r3, [pc, #200]	; (80005e4 <MX_GPIO_Init+0xe4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a31      	ldr	r2, [pc, #196]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a2a      	ldr	r2, [pc, #168]	; (80005e4 <MX_GPIO_Init+0xe4>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000558:	f043 0310 	orr.w	r3, r3, #16
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0310 	and.w	r3, r3, #16
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a1c      	ldr	r2, [pc, #112]	; (80005e4 <MX_GPIO_Init+0xe4>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b1a      	ldr	r3, [pc, #104]	; (80005e4 <MX_GPIO_Init+0xe4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0302 	and.w	r3, r3, #2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800058c:	4816      	ldr	r0, [pc, #88]	; (80005e8 <MX_GPIO_Init+0xe8>)
 800058e:	f001 fd0f 	bl	8001fb0 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <MX_GPIO_Init+0xec>)
 800059a:	f001 fd09 	bl	8001fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800059e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80005a2:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ac:	2303      	movs	r3, #3
 80005ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <MX_GPIO_Init+0xe8>)
 80005b8:	f001 fb5e 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ca:	2303      	movs	r3, #3
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_GPIO_Init+0xec>)
 80005d6:	f001 fb4f 	bl	8001c78 <HAL_GPIO_Init>

}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40020400 	.word	0x40020400

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b0e9      	sub	sp, #420	; 0x1a4
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fe29 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f87b 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f7ff ff7f 	bl	8000500 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f7ff ff5d 	bl	80004c0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000606:	f000 fb77 	bl	8000cf8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800060a:	f000 fbc5 	bl	8000d98 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800060e:	f000 fcdb 	bl	8000fc8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8000612:	f000 fd7d 	bl	8001110 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_WHITE);
 8000616:	20ff      	movs	r0, #255	; 0xff
 8000618:	f000 fdcc 	bl	80011b4 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 800061c:	220a      	movs	r2, #10
 800061e:	210a      	movs	r1, #10
 8000620:	200a      	movs	r0, #10
 8000622:	f000 fdeb 	bl	80011fc <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	2000      	movs	r0, #0
 800062c:	f000 fde6 	bl	80011fc <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	f240 103f 	movw	r0, #319	; 0x13f
 8000638:	f000 fde0 	bl	80011fc <UB_VGA_SetPixel>
  unsigned int i = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c


  for(i = 0; i < LINE_BUFLEN; i++)
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000648:	e00b      	b.n	8000662 <main+0x72>
	  input.line_rx_buffer[i] = 0;
 800064a:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <main+0xf0>)
 800064c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000650:	4413      	add	r3, r2
 8000652:	3301      	adds	r3, #1
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8000658:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800065c:	3301      	adds	r3, #1
 800065e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000662:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800066a:	d3ee      	bcc.n	800064a <main+0x5a>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <main+0xf0>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <main+0xf0>)
 8000674:	2200      	movs	r2, #0
 8000676:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 800067a:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <main+0xf0>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, &input.byte_buffer_rx, LINE_BUFLEN);
 8000682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000686:	4916      	ldr	r1, [pc, #88]	; (80006e0 <main+0xf0>)
 8000688:	4816      	ldr	r0, [pc, #88]	; (80006e4 <main+0xf4>)
 800068a:	f003 f99d 	bl	80039c8 <HAL_UART_Receive_IT>

  // Test to see if the screen reacts to UART
  unsigned char colorTest = TRUE;
 800068e:	23ff      	movs	r3, #255	; 0xff
 8000690:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <main+0xf0>)
 8000696:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 800069a:	2bff      	cmp	r3, #255	; 0xff
 800069c:	d1fa      	bne.n	8000694 <main+0xa4>
	  {
		  i = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

		  Debugging = LogicLayer_Parser2(&input.line_rx_buffer, LINE_BUFLEN);
 80006a4:	4c10      	ldr	r4, [pc, #64]	; (80006e8 <main+0xf8>)
 80006a6:	463b      	mov	r3, r7
 80006a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ac:	490f      	ldr	r1, [pc, #60]	; (80006ec <main+0xfc>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f89c 	bl	80007ec <LogicLayer_Parser2>
 80006b4:	463b      	mov	r3, r7
 80006b6:	4620      	mov	r0, r4
 80006b8:	4619      	mov	r1, r3
 80006ba:	f240 1391 	movw	r3, #401	; 0x191
 80006be:	461a      	mov	r2, r3
 80006c0:	f004 f828 	bl	8004714 <memcpy>


		  // Do some stuff
		  printf("yes\n");
 80006c4:	480a      	ldr	r0, [pc, #40]	; (80006f0 <main+0x100>)
 80006c6:	f004 f8a9 	bl	800481c <puts>
		  UB_VGA_FillScreen(colorTest);
 80006ca:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fd70 	bl	80011b4 <UB_VGA_FillScreen>


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 80006d4:	4b02      	ldr	r3, [pc, #8]	; (80006e0 <main+0xf0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 80006dc:	e7da      	b.n	8000694 <main+0xa4>
 80006de:	bf00      	nop
 80006e0:	20000098 	.word	0x20000098
 80006e4:	20000b24 	.word	0x20000b24
 80006e8:	200008b0 	.word	0x200008b0
 80006ec:	20000099 	.word	0x20000099
 80006f0:	080050e4 	.word	0x080050e4

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	; 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 f814 	bl	8004730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <SystemClock_Config+0xcc>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <SystemClock_Config+0xd0>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <SystemClock_Config+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000750:	2301      	movs	r3, #1
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2302      	movs	r3, #2
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000768:	23a8      	movs	r3, #168	; 0xa8
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fc33 	bl	8001fe4 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000784:	f000 f8e0 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078c:	2302      	movs	r3, #2
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000794:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000798:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2105      	movs	r1, #5
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 fe8c 	bl	80024c4 <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007b2:	f000 f8c9 	bl	8000948 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3750      	adds	r7, #80	; 0x50
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 80007d0:	1d39      	adds	r1, r7, #4
 80007d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007d6:	2201      	movs	r2, #1
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <__io_putchar+0x20>)
 80007da:	f003 f85c 	bl	8003896 <HAL_UART_Transmit>
	return ch;												//Return the character
 80007de:	687b      	ldr	r3, [r7, #4]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000b24 	.word	0x20000b24

080007ec <LogicLayer_Parser2>:


Message_parser LogicLayer_Parser2(char *Message, unsigned int Messagelength)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0ee      	sub	sp, #440	; 0x1b8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	6018      	str	r0, [r3, #0]
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	6019      	str	r1, [r3, #0]
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	601a      	str	r2, [r3, #0]
	unsigned int j = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	unsigned int k = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	unsigned int i = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	unsigned int l = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	Message_parser localParser;

	  while (Message[i] != 0) 	// Kijk voor line end
 800081a:	e06f      	b.n	80008fc <LogicLayer_Parser2+0x110>
	  {

		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 800081c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000820:	3301      	adds	r3, #1
 8000822:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d903      	bls.n	800083a <LogicLayer_Parser2+0x4e>
			  {
				  printf("Error , not detected \n");
 8000832:	4843      	ldr	r0, [pc, #268]	; (8000940 <LogicLayer_Parser2+0x154>)
 8000834:	f003 fff2 	bl	800481c <puts>
				  break;
 8000838:	e011      	b.n	800085e <LogicLayer_Parser2+0x72>
		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000844:	4413      	add	r3, r2
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b2c      	cmp	r3, #44	; 0x2c
 800084a:	d008      	beq.n	800085e <LogicLayer_Parser2+0x72>
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1de      	bne.n	800081c <LogicLayer_Parser2+0x30>
			  }
		  }
		  l = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  	  for (; j<i; j++)
 8000864:	e01f      	b.n	80008a6 <LogicLayer_Parser2+0xba>
	  	  {
	  		localParser.Parser_Message[k][l] = Message[j];
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000870:	4413      	add	r3, r2
 8000872:	7818      	ldrb	r0, [r3, #0]
 8000874:	f107 0114 	add.w	r1, r7, #20
 8000878:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	18ca      	adds	r2, r1, r3
 8000886:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800088a:	4413      	add	r3, r2
 800088c:	3301      	adds	r3, #1
 800088e:	4602      	mov	r2, r0
 8000890:	701a      	strb	r2, [r3, #0]
	  		l++;
 8000892:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000896:	3301      	adds	r3, #1
 8000898:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  	  for (; j<i; j++)
 800089c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80008a0:	3301      	adds	r3, #1
 80008a2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80008a6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80008aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d3d9      	bcc.n	8000866 <LogicLayer_Parser2+0x7a>
	  	  }
	  	  j = i;
 80008b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80008b6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	  	localParser.Parser_Message[k][l] = '\0';
 80008ba:	f107 0114 	add.w	r1, r7, #20
 80008be:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	18ca      	adds	r2, r1, r3
 80008cc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80008d0:	4413      	add	r3, r2
 80008d2:	3301      	adds	r3, #1
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]

	  	  i++;
 80008d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80008dc:	3301      	adds	r3, #1
 80008de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	  	  k=(k+1); //verhoog iterator voor meerder berichten opslag
 80008e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80008e6:	3301      	adds	r3, #1
 80008e8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 80008ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80008f0:	2b14      	cmp	r3, #20
 80008f2:	d903      	bls.n	80008fc <LogicLayer_Parser2+0x110>
	  	  	  {
	  		  	  printf("Error no message end detected \n");
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <LogicLayer_Parser2+0x158>)
 80008f6:	f003 ff91 	bl	800481c <puts>
	  		  	  break;
 80008fa:	e008      	b.n	800090e <LogicLayer_Parser2+0x122>
	  while (Message[i] != 0) 	// Kijk voor line end
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000906:	4413      	add	r3, r2
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d195      	bne.n	800083a <LogicLayer_Parser2+0x4e>
	  	  	  }

	  }

	localParser.Variable_length = k;
 800090e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000912:	b2da      	uxtb	r2, r3
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	701a      	strb	r2, [r3, #0]

	return localParser;
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4610      	mov	r0, r2
 8000926:	4619      	mov	r1, r3
 8000928:	f240 1391 	movw	r3, #401	; 0x191
 800092c:	461a      	mov	r2, r3
 800092e:	f003 fef1 	bl	8004714 <memcpy>
}
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	080050e8 	.word	0x080050e8
 8000944:	08005100 	.word	0x08005100

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 fc78 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a08:	4828      	ldr	r0, [pc, #160]	; (8000aac <TIM2_IRQHandler+0xa8>)
 8000a0a:	f002 f893 	bl	8002b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <TIM2_IRQHandler+0xa8>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f06f 0208 	mvn.w	r2, #8
 8000a16:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a22:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8000a2c:	d905      	bls.n	8000a3a <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8000a34:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <TIM2_IRQHandler+0xb0>)
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a38:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d802      	bhi.n	8000a48 <TIM2_IRQHandler+0x44>
 8000a42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a46:	e001      	b.n	8000a4c <TIM2_IRQHandler+0x48>
 8000a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4c:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <TIM2_IRQHandler+0xb4>)
 8000a4e:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	2b23      	cmp	r3, #35	; 0x23
 8000a56:	d927      	bls.n	8000aa8 <TIM2_IRQHandler+0xa4>
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	f240 2202 	movw	r2, #514	; 0x202
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d821      	bhi.n	8000aa8 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8000a64:	4a15      	ldr	r2, [pc, #84]	; (8000abc <TIM2_IRQHandler+0xb8>)
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <TIM2_IRQHandler+0xb8>)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <TIM2_IRQHandler+0xbc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <TIM2_IRQHandler+0xbc>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <TIM2_IRQHandler+0xc0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <TIM2_IRQHandler+0xc0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0201 	orr.w	r2, r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d005      	beq.n	8000aa8 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f203 1341 	addw	r3, r3, #321	; 0x141
 8000aa4:	4a02      	ldr	r2, [pc, #8]	; (8000ab0 <TIM2_IRQHandler+0xac>)
 8000aa6:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000ae4 	.word	0x20000ae4
 8000ab0:	20000b64 	.word	0x20000b64
 8000ab4:	20000b70 	.word	0x20000b70
 8000ab8:	40020400 	.word	0x40020400
 8000abc:	40026488 	.word	0x40026488
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	20000a84 	.word	0x20000a84

08000ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <USART2_IRQHandler+0x70>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b0a      	cmp	r3, #10
 8000ad8:	d026      	beq.n	8000b28 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b0d      	cmp	r3, #13
 8000ade:	d002      	beq.n	8000ae6 <USART2_IRQHandler+0x1e>
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8000ae4:	d10e      	bne.n	8000b04 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <USART2_IRQHandler+0x74>)
 8000ae8:	22ff      	movs	r2, #255	; 0xff
 8000aea:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <USART2_IRQHandler+0x74>)
 8000af0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000af4:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <USART2_IRQHandler+0x74>)
 8000af6:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <USART2_IRQHandler+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000b02:	e011      	b.n	8000b28 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8000b04:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <USART2_IRQHandler+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <USART2_IRQHandler+0x74>)
 8000b0e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <USART2_IRQHandler+0x74>)
 8000b14:	4413      	add	r3, r2
 8000b16:	79fa      	ldrb	r2, [r7, #7]
 8000b18:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <USART2_IRQHandler+0x74>)
 8000b1c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8000b20:	3301      	adds	r3, #1
 8000b22:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <USART2_IRQHandler+0x74>)
 8000b24:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b28:	4805      	ldr	r0, [pc, #20]	; (8000b40 <USART2_IRQHandler+0x78>)
 8000b2a:	f002 ffa3 	bl	8003a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	20000098 	.word	0x20000098
 8000b40:	20000b24 	.word	0x20000b24

08000b44 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <DMA2_Stream5_IRQHandler+0x48>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	6a1a      	ldr	r2, [r3, #32]
 8000b4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d10f      	bne.n	8000b78 <DMA2_Stream5_IRQHandler+0x34>
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <DMA2_Stream5_IRQHandler+0x48>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6a1a      	ldr	r2, [r3, #32]
 8000b5e:	f240 4344 	movw	r3, #1092	; 0x444
 8000b62:	4013      	ands	r3, r2
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d107      	bne.n	8000b78 <DMA2_Stream5_IRQHandler+0x34>
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <DMA2_Stream5_IRQHandler+0x48>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <DMA2_Stream5_IRQHandler+0x48>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 0201 	bic.w	r2, r2, #1
 8000b76:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <DMA2_Stream5_IRQHandler+0x4c>)
 8000b7a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000b7e:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <DMA2_Stream5_IRQHandler+0x50>)
 8000b82:	f000 fe0f 	bl	80017a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000a44 	.word	0x20000a44
 8000b90:	40021000 	.word	0x40021000
 8000b94:	20000a84 	.word	0x20000a84

08000b98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e00a      	b.n	8000bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000baa:	f3af 8000 	nop.w
 8000bae:	4601      	mov	r1, r0
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf0      	blt.n	8000baa <_read+0x12>
	}

return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e009      	b.n	8000bf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fdeb 	bl	80007c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbf1      	blt.n	8000be4 <_write+0x12>
	}
	return len;
 8000c00:	687b      	ldr	r3, [r7, #4]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_close>:

int _close(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	return -1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c32:	605a      	str	r2, [r3, #4]
	return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_isatty>:

int _isatty(int file)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	return 1;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x50>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x16>
		heap_end = &end;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <_sbrk+0x50>)
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <_sbrk+0x54>)
 8000c88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <_sbrk+0x50>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <_sbrk+0x50>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4413      	add	r3, r2
 8000c98:	466a      	mov	r2, sp
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d907      	bls.n	8000cae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c9e:	f003 fd0f 	bl	80046c0 <__errno>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	220c      	movs	r2, #12
 8000ca6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cac:	e006      	b.n	8000cbc <_sbrk+0x48>
	}

	heap_end += incr;
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <_sbrk+0x50>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a03      	ldr	r2, [pc, #12]	; (8000cc4 <_sbrk+0x50>)
 8000cb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000008c 	.word	0x2000008c
 8000cc8:	20013878 	.word	0x20013878

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <SystemInit+0x28>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <SystemInit+0x28>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SystemInit+0x28>)
 8000ce2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ce6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d16:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <MX_TIM1_Init+0x9c>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d28:	220b      	movs	r2, #11
 8000d2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d3e:	4814      	ldr	r0, [pc, #80]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d40:	f001 fdbc 	bl	80028bc <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000d4a:	f7ff fdfd 	bl	8000948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d5c:	f002 f8b8 	bl	8002ed0 <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000d66:	f7ff fdef 	bl	8000948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d72:	463b      	mov	r3, r7
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d78:	f002 fcb0 	bl	80036dc <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000d82:	f7ff fde1 	bl	8000948 <Error_Handler>
  }

}
 8000d86:	bf00      	nop
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000a44 	.word	0x20000a44
 8000d94:	40010000 	.word	0x40010000

08000d98 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9e:	f107 0320 	add.w	r3, r7, #32
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
 8000db6:	615a      	str	r2, [r3, #20]
 8000db8:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000dba:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000dd0:	f640 226b 	movw	r2, #2667	; 0xa6b
 8000dd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000de2:	4820      	ldr	r0, [pc, #128]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000de4:	f001 fdb9 	bl	800295a <HAL_TIM_PWM_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000dee:	f7ff fdab 	bl	8000948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4818      	ldr	r0, [pc, #96]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000e02:	f002 fc6b 	bl	80036dc <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e0c:	f7ff fd9c 	bl	8000948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8000e14:	f240 13bb 	movw	r3, #443	; 0x1bb
 8000e18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2208      	movs	r2, #8
 8000e26:	4619      	mov	r1, r3
 8000e28:	480e      	ldr	r0, [pc, #56]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000e2a:	f001 ff8b 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e34:	f7ff fd88 	bl	8000948 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 8000e38:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	220c      	movs	r2, #12
 8000e42:	4619      	mov	r1, r3
 8000e44:	4807      	ldr	r0, [pc, #28]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000e46:	f001 ff7d 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000e50:	f7ff fd7a 	bl	8000948 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <MX_TIM2_Init+0xcc>)
 8000e56:	f000 f87f 	bl	8000f58 <HAL_TIM_MspPostInit>

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000ae4 	.word	0x20000ae4

08000e68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <HAL_TIM_Base_MspInit+0x94>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d13c      	bne.n	8000ef4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_TIM_Base_MspInit+0x98>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_TIM_Base_MspInit+0x98>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_TIM_Base_MspInit+0x98>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <HAL_TIM_Base_MspInit+0xa0>)
 8000e9a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000e9e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000ea2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000ea6:	2240      	movs	r2, #64	; 0x40
 8000ea8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb6:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000ecc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ed0:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8000ed8:	480a      	ldr	r0, [pc, #40]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000eda:	f000 fb3b 	bl	8001554 <HAL_DMA_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8000ee4:	f7ff fd30 	bl	8000948 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000eec:	621a      	str	r2, [r3, #32]
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <HAL_TIM_Base_MspInit+0x9c>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40010000 	.word	0x40010000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	20000a84 	.word	0x20000a84
 8000f08:	40026488 	.word	0x40026488

08000f0c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f1c:	d115      	bne.n	8000f4a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_TIM_PWM_MspInit+0x48>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <HAL_TIM_PWM_MspInit+0x48>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_TIM_PWM_MspInit+0x48>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	201c      	movs	r0, #28
 8000f40:	f000 fad1 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f44:	201c      	movs	r0, #28
 8000f46:	f000 faea 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f78:	d11e      	bne.n	8000fb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <HAL_TIM_MspPostInit+0x68>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <HAL_TIM_MspPostInit+0x68>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_TIM_MspPostInit+0x68>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8000f96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <HAL_TIM_MspPostInit+0x6c>)
 8000fb4:	f000 fe60 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020400 	.word	0x40020400

08000fc8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <MX_USART2_UART_Init+0x50>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_USART2_UART_Init+0x4c>)
 8001000:	f002 fbfc 	bl	80037fc <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800100a:	f7ff fc9d 	bl	8000948 <Error_Handler>
  }

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000b24 	.word	0x20000b24
 8001018:	40004400 	.word	0x40004400

0800101c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <HAL_UART_MspInit+0x94>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d133      	bne.n	80010a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_UART_MspInit+0x98>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <HAL_UART_MspInit+0x98>)
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_UART_MspInit+0x98>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_UART_MspInit+0x98>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <HAL_UART_MspInit+0x98>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_UART_MspInit+0x98>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001076:	230c      	movs	r3, #12
 8001078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001086:	2307      	movs	r3, #7
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	4809      	ldr	r0, [pc, #36]	; (80010b8 <HAL_UART_MspInit+0x9c>)
 8001092:	f000 fdf1 	bl	8001c78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	2026      	movs	r0, #38	; 0x26
 800109c:	f000 fa23 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010a0:	2026      	movs	r0, #38	; 0x26
 80010a2:	f000 fa3c 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010a6:	bf00      	nop
 80010a8:	3728      	adds	r7, #40	; 0x28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40004400 	.word	0x40004400
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000

080010bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010c2:	e003      	b.n	80010cc <LoopCopyDataInit>

080010c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ca:	3104      	adds	r1, #4

080010cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010d4:	d3f6      	bcc.n	80010c4 <CopyDataInit>
  ldr  r2, =_sbss
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010d8:	e002      	b.n	80010e0 <LoopFillZerobss>

080010da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010dc:	f842 3b04 	str.w	r3, [r2], #4

080010e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010e4:	d3f9      	bcc.n	80010da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010e6:	f7ff fdf1 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ea:	f003 faef 	bl	80046cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff fa7f 	bl	80005f0 <main>
  bx  lr    
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010f8:	080051b4 	.word	0x080051b4
  ldr  r0, =_sdata
 80010fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001100:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001104:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001108:	20013874 	.word	0x20013874

0800110c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC_IRQHandler>
	...

08001110 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <UB_VGA_Screen_Init+0x84>)
 8001116:	2200      	movs	r2, #0
 8001118:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <UB_VGA_Screen_Init+0x84>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <UB_VGA_Screen_Init+0x84>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <UB_VGA_Screen_Init+0x88>)
 8001128:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112c:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <UB_VGA_Screen_Init+0x8c>)
 8001130:	f001 fbef 	bl	8002912 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001134:	210c      	movs	r1, #12
 8001136:	4819      	ldr	r0, [pc, #100]	; (800119c <UB_VGA_Screen_Init+0x8c>)
 8001138:	f001 fc3a 	bl	80029b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 800113c:	2108      	movs	r1, #8
 800113e:	4817      	ldr	r0, [pc, #92]	; (800119c <UB_VGA_Screen_Init+0x8c>)
 8001140:	f001 fc74 	bl	8002a2c <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <UB_VGA_Screen_Init+0x90>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <UB_VGA_Screen_Init+0x90>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001152:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <UB_VGA_Screen_Init+0x90>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <UB_VGA_Screen_Init+0x90>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0201 	orr.w	r2, r2, #1
 8001162:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 8001164:	490f      	ldr	r1, [pc, #60]	; (80011a4 <UB_VGA_Screen_Init+0x94>)
 8001166:	f240 1341 	movw	r3, #321	; 0x141
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <UB_VGA_Screen_Init+0x98>)
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <UB_VGA_Screen_Init+0x9c>)
 800116e:	f000 fa9f 	bl	80016b0 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 8001172:	480e      	ldr	r0, [pc, #56]	; (80011ac <UB_VGA_Screen_Init+0x9c>)
 8001174:	f000 f9ee 	bl	8001554 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <UB_VGA_Screen_Init+0x9c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <UB_VGA_Screen_Init+0x9c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0210 	orr.w	r2, r2, #16
 8001186:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <UB_VGA_Screen_Init+0xa0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a01      	ldr	r2, [pc, #4]	; (8001194 <UB_VGA_Screen_Init+0x84>)
 800118e:	6093      	str	r3, [r2, #8]
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000b64 	.word	0x20000b64
 8001198:	40020400 	.word	0x40020400
 800119c:	20000ae4 	.word	0x20000ae4
 80011a0:	20000a44 	.word	0x20000a44
 80011a4:	20000b70 	.word	0x20000b70
 80011a8:	40021015 	.word	0x40021015
 80011ac:	20000a84 	.word	0x20000a84
 80011b0:	40026488 	.word	0x40026488

080011b4 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	81bb      	strh	r3, [r7, #12]
 80011c2:	e012      	b.n	80011ea <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80011c4:	2300      	movs	r3, #0
 80011c6:	81fb      	strh	r3, [r7, #14]
 80011c8:	e008      	b.n	80011dc <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	89b9      	ldrh	r1, [r7, #12]
 80011ce:	89fb      	ldrh	r3, [r7, #14]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f813 	bl	80011fc <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	3301      	adds	r3, #1
 80011da:	81fb      	strh	r3, [r7, #14]
 80011dc:	89fb      	ldrh	r3, [r7, #14]
 80011de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011e2:	d3f2      	bcc.n	80011ca <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80011e4:	89bb      	ldrh	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	81bb      	strh	r3, [r7, #12]
 80011ea:	89bb      	ldrh	r3, [r7, #12]
 80011ec:	2bef      	cmp	r3, #239	; 0xef
 80011ee:	d9e9      	bls.n	80011c4 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
 8001206:	460b      	mov	r3, r1
 8001208:	80bb      	strh	r3, [r7, #4]
 800120a:	4613      	mov	r3, r2
 800120c:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001214:	d301      	bcc.n	800121a <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	2bef      	cmp	r3, #239	; 0xef
 800121e:	d901      	bls.n	8001224 <UB_VGA_SetPixel+0x28>
    yp = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 8001224:	88ba      	ldrh	r2, [r7, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	441a      	add	r2, r3
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	4413      	add	r3, r2
 8001234:	4904      	ldr	r1, [pc, #16]	; (8001248 <UB_VGA_SetPixel+0x4c>)
 8001236:	78fa      	ldrb	r2, [r7, #3]
 8001238:	54ca      	strb	r2, [r1, r3]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000b70 	.word	0x20000b70

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <HAL_Init+0x40>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_Init+0x40>)
 8001262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_Init+0x40>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 f92b 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fb6a 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f943 	bl	800153a <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012cc:	f000 f90b 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000004 	.word	0x20000004

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	20013860 	.word	0x20013860

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20013860 	.word	0x20013860

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b0:	f7ff ff8e 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff29 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff3e 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff8e 	bl	8001424 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5d 	bl	80013d0 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff31 	bl	8001394 <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa2 	bl	800148c <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001560:	f7ff feda 	bl	8001318 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e099      	b.n	80016a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001590:	e00f      	b.n	80015b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001592:	f7ff fec1 	bl	8001318 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b05      	cmp	r3, #5
 800159e:	d908      	bls.n	80015b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2220      	movs	r2, #32
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2203      	movs	r2, #3
 80015aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e078      	b.n	80016a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e8      	bne.n	8001592 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <HAL_DMA_Init+0x158>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	2b04      	cmp	r3, #4
 800160a:	d107      	bne.n	800161c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	4313      	orrs	r3, r2
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4313      	orrs	r3, r2
 800161a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	f023 0307 	bic.w	r3, r3, #7
 8001632:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	4313      	orrs	r3, r2
 800163c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	2b04      	cmp	r3, #4
 8001644:	d117      	bne.n	8001676 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	4313      	orrs	r3, r2
 800164e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00e      	beq.n	8001676 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fa91 	bl	8001b80 <DMA_CheckFifoParam>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2240      	movs	r2, #64	; 0x40
 8001668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001672:	2301      	movs	r3, #1
 8001674:	e016      	b.n	80016a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fa48 	bl	8001b14 <DMA_CalcBaseAndBitshift>
 8001684:	4603      	mov	r3, r0
 8001686:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800168c:	223f      	movs	r2, #63	; 0x3f
 800168e:	409a      	lsls	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	f010803f 	.word	0xf010803f

080016b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d101      	bne.n	80016d6 <HAL_DMA_Start_IT+0x26>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e040      	b.n	8001758 <HAL_DMA_Start_IT+0xa8>
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d12f      	bne.n	800174a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2202      	movs	r2, #2
 80016ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f9da 	bl	8001ab8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001708:	223f      	movs	r2, #63	; 0x3f
 800170a:	409a      	lsls	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0216 	orr.w	r2, r2, #22
 800171e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0208 	orr.w	r2, r2, #8
 8001736:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e005      	b.n	8001756 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001752:	2302      	movs	r3, #2
 8001754:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001756:	7dfb      	ldrb	r3, [r7, #23]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d004      	beq.n	800177e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2280      	movs	r2, #128	; 0x80
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00c      	b.n	8001798 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2205      	movs	r2, #5
 8001782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017b0:	4b92      	ldr	r3, [pc, #584]	; (80019fc <HAL_DMA_IRQHandler+0x258>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a92      	ldr	r2, [pc, #584]	; (8001a00 <HAL_DMA_IRQHandler+0x25c>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0a9b      	lsrs	r3, r3, #10
 80017bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ce:	2208      	movs	r2, #8
 80017d0:	409a      	lsls	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01a      	beq.n	8001810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d013      	beq.n	8001810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0204 	bic.w	r2, r2, #4
 80017f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fc:	2208      	movs	r2, #8
 80017fe:	409a      	lsls	r2, r3
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	2201      	movs	r2, #1
 8001816:	409a      	lsls	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4013      	ands	r3, r2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d012      	beq.n	8001846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001832:	2201      	movs	r2, #1
 8001834:	409a      	lsls	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183e:	f043 0202 	orr.w	r2, r3, #2
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184a:	2204      	movs	r2, #4
 800184c:	409a      	lsls	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d012      	beq.n	800187c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d00b      	beq.n	800187c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001868:	2204      	movs	r2, #4
 800186a:	409a      	lsls	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001874:	f043 0204 	orr.w	r2, r3, #4
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001880:	2210      	movs	r2, #16
 8001882:	409a      	lsls	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4013      	ands	r3, r2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d043      	beq.n	8001914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d03c      	beq.n	8001914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189e:	2210      	movs	r2, #16
 80018a0:	409a      	lsls	r2, r3
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d018      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d108      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d024      	beq.n	8001914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3
 80018d2:	e01f      	b.n	8001914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01b      	beq.n	8001914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	4798      	blx	r3
 80018e4:	e016      	b.n	8001914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d107      	bne.n	8001904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0208 	bic.w	r2, r2, #8
 8001902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	2220      	movs	r2, #32
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 808e 	beq.w	8001a42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 8086 	beq.w	8001a42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	2220      	movs	r2, #32
 800193c:	409a      	lsls	r2, r3
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b05      	cmp	r3, #5
 800194c:	d136      	bne.n	80019bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0216 	bic.w	r2, r2, #22
 800195c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800196c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	2b00      	cmp	r3, #0
 8001974:	d103      	bne.n	800197e <HAL_DMA_IRQHandler+0x1da>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0208 	bic.w	r2, r2, #8
 800198c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001992:	223f      	movs	r2, #63	; 0x3f
 8001994:	409a      	lsls	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d07d      	beq.n	8001aae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	4798      	blx	r3
        }
        return;
 80019ba:	e078      	b.n	8001aae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d01c      	beq.n	8001a04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d108      	bne.n	80019ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d030      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
 80019e8:	e02b      	b.n	8001a42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d027      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	4798      	blx	r3
 80019fa:	e022      	b.n	8001a42 <HAL_DMA_IRQHandler+0x29e>
 80019fc:	20000000 	.word	0x20000000
 8001a00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10f      	bne.n	8001a32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0210 	bic.w	r2, r2, #16
 8001a20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d032      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d022      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2205      	movs	r2, #5
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0201 	bic.w	r2, r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3301      	adds	r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d307      	bcc.n	8001a8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f2      	bne.n	8001a6e <HAL_DMA_IRQHandler+0x2ca>
 8001a88:	e000      	b.n	8001a8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	4798      	blx	r3
 8001aac:	e000      	b.n	8001ab0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001aae:	bf00      	nop
    }
  }
}
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop

08001ab8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ad4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b40      	cmp	r3, #64	; 0x40
 8001ae4:	d108      	bne.n	8001af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001af6:	e007      	b.n	8001b08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	60da      	str	r2, [r3, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3b10      	subs	r3, #16
 8001b24:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <DMA_CalcBaseAndBitshift+0x64>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b2e:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <DMA_CalcBaseAndBitshift+0x68>)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d909      	bls.n	8001b56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	1d1a      	adds	r2, r3, #4
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	659a      	str	r2, [r3, #88]	; 0x58
 8001b54:	e007      	b.n	8001b66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b5e:	f023 0303 	bic.w	r3, r3, #3
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	aaaaaaab 	.word	0xaaaaaaab
 8001b7c:	08005138 	.word	0x08005138

08001b80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d11f      	bne.n	8001bda <DMA_CheckFifoParam+0x5a>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d856      	bhi.n	8001c4e <DMA_CheckFifoParam+0xce>
 8001ba0:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <DMA_CheckFifoParam+0x28>)
 8001ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba6:	bf00      	nop
 8001ba8:	08001bb9 	.word	0x08001bb9
 8001bac:	08001bcb 	.word	0x08001bcb
 8001bb0:	08001bb9 	.word	0x08001bb9
 8001bb4:	08001c4f 	.word	0x08001c4f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d046      	beq.n	8001c52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bc8:	e043      	b.n	8001c52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bd2:	d140      	bne.n	8001c56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd8:	e03d      	b.n	8001c56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be2:	d121      	bne.n	8001c28 <DMA_CheckFifoParam+0xa8>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d837      	bhi.n	8001c5a <DMA_CheckFifoParam+0xda>
 8001bea:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <DMA_CheckFifoParam+0x70>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c01 	.word	0x08001c01
 8001bf4:	08001c07 	.word	0x08001c07
 8001bf8:	08001c01 	.word	0x08001c01
 8001bfc:	08001c19 	.word	0x08001c19
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
      break;
 8001c04:	e030      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d025      	beq.n	8001c5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c16:	e022      	b.n	8001c5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c20:	d11f      	bne.n	8001c62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c26:	e01c      	b.n	8001c62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d903      	bls.n	8001c36 <DMA_CheckFifoParam+0xb6>
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d003      	beq.n	8001c3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c34:	e018      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	73fb      	strb	r3, [r7, #15]
      break;
 8001c3a:	e015      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00e      	beq.n	8001c66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c4c:	e00b      	b.n	8001c66 <DMA_CheckFifoParam+0xe6>
      break;
 8001c4e:	bf00      	nop
 8001c50:	e00a      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;
 8001c52:	bf00      	nop
 8001c54:	e008      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;
 8001c56:	bf00      	nop
 8001c58:	e006      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;
 8001c5a:	bf00      	nop
 8001c5c:	e004      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;
 8001c5e:	bf00      	nop
 8001c60:	e002      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c62:	bf00      	nop
 8001c64:	e000      	b.n	8001c68 <DMA_CheckFifoParam+0xe8>
      break;
 8001c66:	bf00      	nop
    }
  } 
  
  return status; 
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e16b      	b.n	8001f6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 815a 	bne.w	8001f66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_GPIO_Init+0x5a>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc6:	2b11      	cmp	r3, #17
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b12      	cmp	r3, #18
 8001cd0:	d130      	bne.n	8001d34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0201 	and.w	r2, r3, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0xfc>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b12      	cmp	r3, #18
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80b4 	beq.w	8001f66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b60      	ldr	r3, [pc, #384]	; (8001f84 <HAL_GPIO_Init+0x30c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a5f      	ldr	r2, [pc, #380]	; (8001f84 <HAL_GPIO_Init+0x30c>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_GPIO_Init+0x30c>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1a:	4a5b      	ldr	r2, [pc, #364]	; (8001f88 <HAL_GPIO_Init+0x310>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_GPIO_Init+0x314>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d02b      	beq.n	8001e9e <HAL_GPIO_Init+0x226>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a51      	ldr	r2, [pc, #324]	; (8001f90 <HAL_GPIO_Init+0x318>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d025      	beq.n	8001e9a <HAL_GPIO_Init+0x222>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a50      	ldr	r2, [pc, #320]	; (8001f94 <HAL_GPIO_Init+0x31c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d01f      	beq.n	8001e96 <HAL_GPIO_Init+0x21e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4f      	ldr	r2, [pc, #316]	; (8001f98 <HAL_GPIO_Init+0x320>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <HAL_GPIO_Init+0x21a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4e      	ldr	r2, [pc, #312]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0x216>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4d      	ldr	r2, [pc, #308]	; (8001fa0 <HAL_GPIO_Init+0x328>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00d      	beq.n	8001e8a <HAL_GPIO_Init+0x212>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4c      	ldr	r2, [pc, #304]	; (8001fa4 <HAL_GPIO_Init+0x32c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <HAL_GPIO_Init+0x20e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4b      	ldr	r2, [pc, #300]	; (8001fa8 <HAL_GPIO_Init+0x330>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_GPIO_Init+0x20a>
 8001e7e:	2307      	movs	r3, #7
 8001e80:	e00e      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e82:	2308      	movs	r3, #8
 8001e84:	e00c      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e86:	2306      	movs	r3, #6
 8001e88:	e00a      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	e008      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e8e:	2304      	movs	r3, #4
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e92:	2303      	movs	r3, #3
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x228>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb0:	4935      	ldr	r1, [pc, #212]	; (8001f88 <HAL_GPIO_Init+0x310>)
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee2:	4a32      	ldr	r2, [pc, #200]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ee8:	4b30      	ldr	r3, [pc, #192]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0c:	4a27      	ldr	r2, [pc, #156]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f36:	4a1d      	ldr	r2, [pc, #116]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <HAL_GPIO_Init+0x334>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	f67f ae90 	bls.w	8001c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40021800 	.word	0x40021800
 8001fa8:	40021c00 	.word	0x40021c00
 8001fac:	40013c00 	.word	0x40013c00

08001fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	807b      	strh	r3, [r7, #2]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fc0:	787b      	ldrb	r3, [r7, #1]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fcc:	e003      	b.n	8001fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fce:	887b      	ldrh	r3, [r7, #2]
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	619a      	str	r2, [r3, #24]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e25b      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d075      	beq.n	80020ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002002:	4ba3      	ldr	r3, [pc, #652]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d00c      	beq.n	8002028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200e:	4ba0      	ldr	r3, [pc, #640]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002016:	2b08      	cmp	r3, #8
 8002018:	d112      	bne.n	8002040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	4b9d      	ldr	r3, [pc, #628]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002026:	d10b      	bne.n	8002040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	4b99      	ldr	r3, [pc, #612]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d05b      	beq.n	80020ec <HAL_RCC_OscConfig+0x108>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d157      	bne.n	80020ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e236      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002048:	d106      	bne.n	8002058 <HAL_RCC_OscConfig+0x74>
 800204a:	4b91      	ldr	r3, [pc, #580]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a90      	ldr	r2, [pc, #576]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x98>
 8002062:	4b8b      	ldr	r3, [pc, #556]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a8a      	ldr	r2, [pc, #552]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a87      	ldr	r2, [pc, #540]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
 800207c:	4b84      	ldr	r3, [pc, #528]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a83      	ldr	r2, [pc, #524]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b81      	ldr	r3, [pc, #516]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a80      	ldr	r2, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff f93c 	bl	8001318 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff f938 	bl	8001318 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1fb      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b76      	ldr	r3, [pc, #472]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xc0>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7ff f928 	bl	8001318 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff f924 	bl	8001318 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e1e7      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	4b6c      	ldr	r3, [pc, #432]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0xe8>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d063      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020fa:	4b65      	ldr	r3, [pc, #404]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002106:	4b62      	ldr	r3, [pc, #392]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800210e:	2b08      	cmp	r3, #8
 8002110:	d11c      	bne.n	800214c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x152>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e1bb      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b56      	ldr	r3, [pc, #344]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4952      	ldr	r1, [pc, #328]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	e03a      	b.n	80021c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002154:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <HAL_RCC_OscConfig+0x2b0>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7ff f8dd 	bl	8001318 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002162:	f7ff f8d9 	bl	8001318 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e19c      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	4b46      	ldr	r3, [pc, #280]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002180:	4b43      	ldr	r3, [pc, #268]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4940      	ldr	r1, [pc, #256]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
 8002194:	e015      	b.n	80021c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002196:	4b3f      	ldr	r3, [pc, #252]	; (8002294 <HAL_RCC_OscConfig+0x2b0>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff f8bc 	bl	8001318 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a4:	f7ff f8b8 	bl	8001318 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e17b      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	4b36      	ldr	r3, [pc, #216]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d030      	beq.n	8002230 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d6:	4b30      	ldr	r3, [pc, #192]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7ff f89c 	bl	8001318 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e4:	f7ff f898 	bl	8001318 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e15b      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x200>
 8002202:	e015      	b.n	8002230 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_OscConfig+0x2b4>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff f885 	bl	8001318 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002212:	f7ff f881 	bl	8001318 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e144      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a0 	beq.w	800237e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10f      	bne.n	800226e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	6413      	str	r3, [r2, #64]	; 0x40
 800225e:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_OscConfig+0x2b8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d121      	bne.n	80022be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_RCC_OscConfig+0x2b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_RCC_OscConfig+0x2b8>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7ff f847 	bl	8001318 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	e011      	b.n	80022b2 <HAL_RCC_OscConfig+0x2ce>
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	42470000 	.word	0x42470000
 8002298:	42470e80 	.word	0x42470e80
 800229c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7ff f83a 	bl	8001318 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0fd      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <HAL_RCC_OscConfig+0x4d4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d106      	bne.n	80022d4 <HAL_RCC_OscConfig+0x2f0>
 80022c6:	4b7d      	ldr	r3, [pc, #500]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	4a7c      	ldr	r2, [pc, #496]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6713      	str	r3, [r2, #112]	; 0x70
 80022d2:	e01c      	b.n	800230e <HAL_RCC_OscConfig+0x32a>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d10c      	bne.n	80022f6 <HAL_RCC_OscConfig+0x312>
 80022dc:	4b77      	ldr	r3, [pc, #476]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a76      	ldr	r2, [pc, #472]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	4b74      	ldr	r3, [pc, #464]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a73      	ldr	r2, [pc, #460]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	e00b      	b.n	800230e <HAL_RCC_OscConfig+0x32a>
 80022f6:	4b71      	ldr	r3, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	4a70      	ldr	r2, [pc, #448]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6713      	str	r3, [r2, #112]	; 0x70
 8002302:	4b6e      	ldr	r3, [pc, #440]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a6d      	ldr	r2, [pc, #436]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d015      	beq.n	8002342 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe ffff 	bl	8001318 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fffb 	bl	8001318 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0bc      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ee      	beq.n	800231e <HAL_RCC_OscConfig+0x33a>
 8002340:	e014      	b.n	800236c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7fe ffe9 	bl	8001318 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe ffe5 	bl	8001318 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0a6      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002360:	4b56      	ldr	r3, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ee      	bne.n	800234a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d105      	bne.n	800237e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002372:	4b52      	ldr	r3, [pc, #328]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a51      	ldr	r2, [pc, #324]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 8002378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8092 	beq.w	80024ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002388:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d05c      	beq.n	800244e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d141      	bne.n	8002420 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239c:	4b48      	ldr	r3, [pc, #288]	; (80024c0 <HAL_RCC_OscConfig+0x4dc>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe ffb9 	bl	8001318 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023aa:	f7fe ffb5 	bl	8001318 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e078      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023bc:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f0      	bne.n	80023aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69da      	ldr	r2, [r3, #28]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	019b      	lsls	r3, r3, #6
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	3b01      	subs	r3, #1
 80023e2:	041b      	lsls	r3, r3, #16
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	061b      	lsls	r3, r3, #24
 80023ec:	4933      	ldr	r1, [pc, #204]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f2:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <HAL_RCC_OscConfig+0x4dc>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe ff8e 	bl	8001318 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe ff8a 	bl	8001318 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e04d      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002412:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x41c>
 800241e:	e045      	b.n	80024ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_OscConfig+0x4dc>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe ff77 	bl	8001318 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242e:	f7fe ff73 	bl	8001318 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e036      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0x44a>
 800244c:	e02e      	b.n	80024ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e029      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_RCC_OscConfig+0x4d8>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	429a      	cmp	r2, r3
 800246c:	d11c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d115      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002482:	4013      	ands	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002488:	4293      	cmp	r3, r2
 800248a:	d10d      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d106      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40007000 	.word	0x40007000
 80024bc:	40023800 	.word	0x40023800
 80024c0:	42470060 	.word	0x42470060

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0cc      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d90c      	bls.n	8002500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0b8      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d020      	beq.n	800254e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002518:	4b59      	ldr	r3, [pc, #356]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a58      	ldr	r2, [pc, #352]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002522:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002530:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a52      	ldr	r2, [pc, #328]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800253a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	494d      	ldr	r1, [pc, #308]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d044      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d119      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e07f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d003      	beq.n	8002582 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e067      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a2:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f023 0203 	bic.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4934      	ldr	r1, [pc, #208]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b4:	f7fe feb0 	bl	8001318 <HAL_GetTick>
 80025b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025bc:	f7fe feac 	bl	8001318 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e04f      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 020c 	and.w	r2, r3, #12
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1eb      	bne.n	80025bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d20c      	bcs.n	800260c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b22      	ldr	r3, [pc, #136]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b20      	ldr	r3, [pc, #128]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e032      	b.n	8002672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	490e      	ldr	r1, [pc, #56]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800264a:	f000 f821 	bl	8002690 <HAL_RCC_GetSysClockFreq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	5ccb      	ldrb	r3, [r1, r3]
 800265e:	fa22 f303 	lsr.w	r3, r2, r3
 8002662:	4a09      	ldr	r2, [pc, #36]	; (8002688 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fe10 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00
 8002680:	40023800 	.word	0x40023800
 8002684:	08005120 	.word	0x08005120
 8002688:	20000000 	.word	0x20000000
 800268c:	20000004 	.word	0x20000004

08002690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	2300      	movs	r3, #0
 80026a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a8:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d00d      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x40>
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	f200 80bd 	bhi.w	8002834 <HAL_RCC_GetSysClockFreq+0x1a4>
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x34>
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x3a>
 80026c2:	e0b7      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b61      	ldr	r3, [pc, #388]	; (800284c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026c6:	60bb      	str	r3, [r7, #8]
       break;
 80026c8:	e0b7      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ca:	4b61      	ldr	r3, [pc, #388]	; (8002850 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026cc:	60bb      	str	r3, [r7, #8]
      break;
 80026ce:	e0b4      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026d0:	4b5d      	ldr	r3, [pc, #372]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026da:	4b5b      	ldr	r3, [pc, #364]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04d      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e6:	4b58      	ldr	r3, [pc, #352]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	099b      	lsrs	r3, r3, #6
 80026ec:	461a      	mov	r2, r3
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	ea02 0800 	and.w	r8, r2, r0
 80026fe:	ea03 0901 	and.w	r9, r3, r1
 8002702:	4640      	mov	r0, r8
 8002704:	4649      	mov	r1, r9
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	014b      	lsls	r3, r1, #5
 8002710:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002714:	0142      	lsls	r2, r0, #5
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	ebb0 0008 	subs.w	r0, r0, r8
 800271e:	eb61 0109 	sbc.w	r1, r1, r9
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	018b      	lsls	r3, r1, #6
 800272c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002730:	0182      	lsls	r2, r0, #6
 8002732:	1a12      	subs	r2, r2, r0
 8002734:	eb63 0301 	sbc.w	r3, r3, r1
 8002738:	f04f 0000 	mov.w	r0, #0
 800273c:	f04f 0100 	mov.w	r1, #0
 8002740:	00d9      	lsls	r1, r3, #3
 8002742:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002746:	00d0      	lsls	r0, r2, #3
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	eb12 0208 	adds.w	r2, r2, r8
 8002750:	eb43 0309 	adc.w	r3, r3, r9
 8002754:	f04f 0000 	mov.w	r0, #0
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	0259      	lsls	r1, r3, #9
 800275e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002762:	0250      	lsls	r0, r2, #9
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	461a      	mov	r2, r3
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	f7fd fd28 	bl	80001c8 <__aeabi_uldivmod>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4613      	mov	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e04a      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	099b      	lsrs	r3, r3, #6
 8002788:	461a      	mov	r2, r3
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	ea02 0400 	and.w	r4, r2, r0
 800279a:	ea03 0501 	and.w	r5, r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	014b      	lsls	r3, r1, #5
 80027ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027b0:	0142      	lsls	r2, r0, #5
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	1b00      	subs	r0, r0, r4
 80027b8:	eb61 0105 	sbc.w	r1, r1, r5
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	018b      	lsls	r3, r1, #6
 80027c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027ca:	0182      	lsls	r2, r0, #6
 80027cc:	1a12      	subs	r2, r2, r0
 80027ce:	eb63 0301 	sbc.w	r3, r3, r1
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f04f 0100 	mov.w	r1, #0
 80027da:	00d9      	lsls	r1, r3, #3
 80027dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027e0:	00d0      	lsls	r0, r2, #3
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	1912      	adds	r2, r2, r4
 80027e8:	eb45 0303 	adc.w	r3, r5, r3
 80027ec:	f04f 0000 	mov.w	r0, #0
 80027f0:	f04f 0100 	mov.w	r1, #0
 80027f4:	0299      	lsls	r1, r3, #10
 80027f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027fa:	0290      	lsls	r0, r2, #10
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	f7fd fcdc 	bl	80001c8 <__aeabi_uldivmod>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4613      	mov	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	3301      	adds	r3, #1
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	60bb      	str	r3, [r7, #8]
      break;
 8002832:	e002      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002836:	60bb      	str	r3, [r7, #8]
      break;
 8002838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283a:	68bb      	ldr	r3, [r7, #8]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800
 800284c:	00f42400 	.word	0x00f42400
 8002850:	007a1200 	.word	0x007a1200

08002854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_RCC_GetHCLKFreq+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000000 	.word	0x20000000

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002870:	f7ff fff0 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0a9b      	lsrs	r3, r3, #10
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	08005130 	.word	0x08005130

08002894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002898:	f7ff ffdc 	bl	8002854 <HAL_RCC_GetHCLKFreq>
 800289c:	4602      	mov	r2, r0
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	0b5b      	lsrs	r3, r3, #13
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4903      	ldr	r1, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028aa:	5ccb      	ldrb	r3, [r1, r3]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	08005130 	.word	0x08005130

080028bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e01d      	b.n	800290a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fac0 	bl	8000e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 fbde 	bl	80030bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d007      	beq.n	8002944 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e01d      	b.n	80029a8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d106      	bne.n	8002986 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7fe fac3 	bl	8000f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3304      	adds	r3, #4
 8002996:	4619      	mov	r1, r3
 8002998:	4610      	mov	r0, r2
 800299a:	f000 fb8f 	bl	80030bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2201      	movs	r2, #1
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fe64 	bl	8003690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <HAL_TIM_PWM_Start+0x74>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_TIM_PWM_Start+0x2c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <HAL_TIM_PWM_Start+0x78>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_TIM_PWM_Start+0x30>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <HAL_TIM_PWM_Start+0x32>
 80029e0:	2300      	movs	r3, #0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b06      	cmp	r3, #6
 8002a06:	d007      	beq.n	8002a18 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40010400 	.word	0x40010400

08002a2c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	d841      	bhi.n	8002ac0 <HAL_TIM_PWM_Start_IT+0x94>
 8002a3c:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <HAL_TIM_PWM_Start_IT+0x18>)
 8002a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a42:	bf00      	nop
 8002a44:	08002a79 	.word	0x08002a79
 8002a48:	08002ac1 	.word	0x08002ac1
 8002a4c:	08002ac1 	.word	0x08002ac1
 8002a50:	08002ac1 	.word	0x08002ac1
 8002a54:	08002a8b 	.word	0x08002a8b
 8002a58:	08002ac1 	.word	0x08002ac1
 8002a5c:	08002ac1 	.word	0x08002ac1
 8002a60:	08002ac1 	.word	0x08002ac1
 8002a64:	08002a9d 	.word	0x08002a9d
 8002a68:	08002ac1 	.word	0x08002ac1
 8002a6c:	08002ac1 	.word	0x08002ac1
 8002a70:	08002ac1 	.word	0x08002ac1
 8002a74:	08002aaf 	.word	0x08002aaf
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0202 	orr.w	r2, r2, #2
 8002a86:	60da      	str	r2, [r3, #12]
      break;
 8002a88:	e01b      	b.n	8002ac2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0204 	orr.w	r2, r2, #4
 8002a98:	60da      	str	r2, [r3, #12]
      break;
 8002a9a:	e012      	b.n	8002ac2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0208 	orr.w	r2, r2, #8
 8002aaa:	60da      	str	r2, [r3, #12]
      break;
 8002aac:	e009      	b.n	8002ac2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0210 	orr.w	r2, r2, #16
 8002abc:	60da      	str	r2, [r3, #12]
      break;
 8002abe:	e000      	b.n	8002ac2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8002ac0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fde0 	bl	8003690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <HAL_TIM_PWM_Start_IT+0x100>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_PWM_Start_IT+0xb8>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_TIM_PWM_Start_IT+0x104>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIM_PWM_Start_IT+0xbc>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <HAL_TIM_PWM_Start_IT+0xbe>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b06      	cmp	r3, #6
 8002b0e:	d007      	beq.n	8002b20 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	40010400 	.word	0x40010400

08002b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0202 	mvn.w	r2, #2
 8002b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa82 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa74 	bl	800306c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fa85 	bl	8003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	d122      	bne.n	8002be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d11b      	bne.n	8002be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0204 	mvn.w	r2, #4
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2202      	movs	r2, #2
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa58 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa4a 	bl	800306c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fa5b 	bl	8003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d122      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d11b      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0208 	mvn.w	r2, #8
 8002c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fa2e 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002c24:	e005      	b.n	8002c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fa20 	bl	800306c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fa31 	bl	8003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d122      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b10      	cmp	r3, #16
 8002c52:	d11b      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0210 	mvn.w	r2, #16
 8002c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2208      	movs	r2, #8
 8002c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fa04 	bl	8003080 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f9f6 	bl	800306c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fa07 	bl	8003094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d10e      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f06f 0201 	mvn.w	r2, #1
 8002cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9d0 	bl	8003058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b80      	cmp	r3, #128	; 0x80
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd0:	2b80      	cmp	r3, #128	; 0x80
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fd82 	bl	80037e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cee:	2b40      	cmp	r3, #64	; 0x40
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfc:	2b40      	cmp	r3, #64	; 0x40
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f9cc 	bl	80030a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d10e      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d107      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0220 	mvn.w	r2, #32
 8002d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fd4c 	bl	80037d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e0b4      	b.n	8002ec8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b0c      	cmp	r3, #12
 8002d72:	f200 809f 	bhi.w	8002eb4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002db1 	.word	0x08002db1
 8002d80:	08002eb5 	.word	0x08002eb5
 8002d84:	08002eb5 	.word	0x08002eb5
 8002d88:	08002eb5 	.word	0x08002eb5
 8002d8c:	08002df1 	.word	0x08002df1
 8002d90:	08002eb5 	.word	0x08002eb5
 8002d94:	08002eb5 	.word	0x08002eb5
 8002d98:	08002eb5 	.word	0x08002eb5
 8002d9c:	08002e33 	.word	0x08002e33
 8002da0:	08002eb5 	.word	0x08002eb5
 8002da4:	08002eb5 	.word	0x08002eb5
 8002da8:	08002eb5 	.word	0x08002eb5
 8002dac:	08002e73 	.word	0x08002e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fa20 	bl	80031fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0208 	orr.w	r2, r2, #8
 8002dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6999      	ldr	r1, [r3, #24]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	619a      	str	r2, [r3, #24]
      break;
 8002dee:	e062      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fa70 	bl	80032dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	699a      	ldr	r2, [r3, #24]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6999      	ldr	r1, [r3, #24]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	021a      	lsls	r2, r3, #8
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	619a      	str	r2, [r3, #24]
      break;
 8002e30:	e041      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fac5 	bl	80033c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f042 0208 	orr.w	r2, r2, #8
 8002e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0204 	bic.w	r2, r2, #4
 8002e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69d9      	ldr	r1, [r3, #28]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	61da      	str	r2, [r3, #28]
      break;
 8002e70:	e021      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fb19 	bl	80034b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	021a      	lsls	r2, r3, #8
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	61da      	str	r2, [r3, #28]
      break;
 8002eb2:	e000      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002eb4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIM_ConfigClockSource+0x18>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e0b3      	b.n	8003050 <HAL_TIM_ConfigClockSource+0x180>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f20:	d03e      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0xd0>
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f26:	f200 8087 	bhi.w	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2e:	f000 8085 	beq.w	800303c <HAL_TIM_ConfigClockSource+0x16c>
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	d87f      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f38:	2b70      	cmp	r3, #112	; 0x70
 8002f3a:	d01a      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0xa2>
 8002f3c:	2b70      	cmp	r3, #112	; 0x70
 8002f3e:	d87b      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f40:	2b60      	cmp	r3, #96	; 0x60
 8002f42:	d050      	beq.n	8002fe6 <HAL_TIM_ConfigClockSource+0x116>
 8002f44:	2b60      	cmp	r3, #96	; 0x60
 8002f46:	d877      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f48:	2b50      	cmp	r3, #80	; 0x50
 8002f4a:	d03c      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0xf6>
 8002f4c:	2b50      	cmp	r3, #80	; 0x50
 8002f4e:	d873      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d058      	beq.n	8003006 <HAL_TIM_ConfigClockSource+0x136>
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d86f      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f58:	2b30      	cmp	r3, #48	; 0x30
 8002f5a:	d064      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x156>
 8002f5c:	2b30      	cmp	r3, #48	; 0x30
 8002f5e:	d86b      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f60:	2b20      	cmp	r3, #32
 8002f62:	d060      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x156>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d867      	bhi.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d05c      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x156>
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d05a      	beq.n	8003026 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f70:	e062      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f000 fb65 	bl	8003650 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	609a      	str	r2, [r3, #8]
      break;
 8002f9e:	e04e      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f000 fb4e 	bl	8003650 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fc2:	609a      	str	r2, [r3, #8]
      break;
 8002fc4:	e03b      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f000 fac2 	bl	800355c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2150      	movs	r1, #80	; 0x50
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fb1b 	bl	800361a <TIM_ITRx_SetConfig>
      break;
 8002fe4:	e02b      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f000 fae1 	bl	80035ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2160      	movs	r1, #96	; 0x60
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fb0b 	bl	800361a <TIM_ITRx_SetConfig>
      break;
 8003004:	e01b      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6859      	ldr	r1, [r3, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	461a      	mov	r2, r3
 8003014:	f000 faa2 	bl	800355c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2140      	movs	r1, #64	; 0x40
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fafb 	bl	800361a <TIM_ITRx_SetConfig>
      break;
 8003024:	e00b      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4619      	mov	r1, r3
 8003030:	4610      	mov	r0, r2
 8003032:	f000 faf2 	bl	800361a <TIM_ITRx_SetConfig>
      break;
 8003036:	e002      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003038:	bf00      	nop
 800303a:	e000      	b.n	800303e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800303c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a40      	ldr	r2, [pc, #256]	; (80031d0 <TIM_Base_SetConfig+0x114>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030da:	d00f      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a3d      	ldr	r2, [pc, #244]	; (80031d4 <TIM_Base_SetConfig+0x118>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00b      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <TIM_Base_SetConfig+0x11c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d007      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <TIM_Base_SetConfig+0x120>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <TIM_Base_SetConfig+0x40>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <TIM_Base_SetConfig+0x124>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d108      	bne.n	800310e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <TIM_Base_SetConfig+0x114>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d02b      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d027      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <TIM_Base_SetConfig+0x118>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d023      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a2b      	ldr	r2, [pc, #172]	; (80031d8 <TIM_Base_SetConfig+0x11c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01f      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2a      	ldr	r2, [pc, #168]	; (80031dc <TIM_Base_SetConfig+0x120>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d01b      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <TIM_Base_SetConfig+0x124>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d017      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a28      	ldr	r2, [pc, #160]	; (80031e4 <TIM_Base_SetConfig+0x128>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <TIM_Base_SetConfig+0x12c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00f      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <TIM_Base_SetConfig+0x130>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00b      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <TIM_Base_SetConfig+0x134>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <TIM_Base_SetConfig+0x138>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d003      	beq.n	800316e <TIM_Base_SetConfig+0xb2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <TIM_Base_SetConfig+0x13c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d108      	bne.n	8003180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <TIM_Base_SetConfig+0x114>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_Base_SetConfig+0xf8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <TIM_Base_SetConfig+0x124>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d103      	bne.n	80031bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	615a      	str	r2, [r3, #20]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40000c00 	.word	0x40000c00
 80031e0:	40010400 	.word	0x40010400
 80031e4:	40014000 	.word	0x40014000
 80031e8:	40014400 	.word	0x40014400
 80031ec:	40014800 	.word	0x40014800
 80031f0:	40001800 	.word	0x40001800
 80031f4:	40001c00 	.word	0x40001c00
 80031f8:	40002000 	.word	0x40002000

080031fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f023 0201 	bic.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f023 0302 	bic.w	r3, r3, #2
 8003244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a20      	ldr	r2, [pc, #128]	; (80032d4 <TIM_OC1_SetConfig+0xd8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <TIM_OC1_SetConfig+0x64>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a1f      	ldr	r2, [pc, #124]	; (80032d8 <TIM_OC1_SetConfig+0xdc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d10c      	bne.n	800327a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f023 0308 	bic.w	r3, r3, #8
 8003266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <TIM_OC1_SetConfig+0xd8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d003      	beq.n	800328a <TIM_OC1_SetConfig+0x8e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a14      	ldr	r2, [pc, #80]	; (80032d8 <TIM_OC1_SetConfig+0xdc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d111      	bne.n	80032ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	621a      	str	r2, [r3, #32]
}
 80032c8:	bf00      	nop
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40010400 	.word	0x40010400

080032dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0210 	bic.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 0320 	bic.w	r3, r3, #32
 8003326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <TIM_OC2_SetConfig+0xe4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_OC2_SetConfig+0x68>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a21      	ldr	r2, [pc, #132]	; (80033c4 <TIM_OC2_SetConfig+0xe8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d10d      	bne.n	8003360 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800334a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <TIM_OC2_SetConfig+0xe4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_OC2_SetConfig+0x94>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <TIM_OC2_SetConfig+0xe8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d113      	bne.n	8003398 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40010400 	.word	0x40010400

080033c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a21      	ldr	r2, [pc, #132]	; (80034a8 <TIM_OC3_SetConfig+0xe0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d003      	beq.n	800342e <TIM_OC3_SetConfig+0x66>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a20      	ldr	r2, [pc, #128]	; (80034ac <TIM_OC3_SetConfig+0xe4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10d      	bne.n	800344a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <TIM_OC3_SetConfig+0xe0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d003      	beq.n	800345a <TIM_OC3_SetConfig+0x92>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a15      	ldr	r2, [pc, #84]	; (80034ac <TIM_OC3_SetConfig+0xe4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d113      	bne.n	8003482 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	621a      	str	r2, [r3, #32]
}
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40010400 	.word	0x40010400

080034b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	031b      	lsls	r3, r3, #12
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <TIM_OC4_SetConfig+0xa4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_OC4_SetConfig+0x68>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a11      	ldr	r2, [pc, #68]	; (8003558 <TIM_OC4_SetConfig+0xa8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d109      	bne.n	800352c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800351e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	621a      	str	r2, [r3, #32]
}
 8003546:	bf00      	nop
 8003548:	371c      	adds	r7, #28
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40010000 	.word	0x40010000
 8003558:	40010400 	.word	0x40010400

0800355c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f023 0201 	bic.w	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f023 030a 	bic.w	r3, r3, #10
 8003598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b087      	sub	sp, #28
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0210 	bic.w	r2, r3, #16
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	031b      	lsls	r3, r3, #12
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	621a      	str	r2, [r3, #32]
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800361a:	b480      	push	{r7}
 800361c:	b085      	sub	sp, #20
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	f043 0307 	orr.w	r3, r3, #7
 800363c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	609a      	str	r2, [r3, #8]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800366a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	431a      	orrs	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4313      	orrs	r3, r2
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	609a      	str	r2, [r3, #8]
}
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	2201      	movs	r2, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a1a      	ldr	r2, [r3, #32]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	401a      	ands	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1a      	ldr	r2, [r3, #32]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e05a      	b.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003740:	d01d      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d018      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d009      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a17      	ldr	r2, [pc, #92]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d10c      	bne.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	4313      	orrs	r3, r2
 800378e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40010400 	.word	0x40010400
 80037cc:	40014000 	.word	0x40014000
 80037d0:	40001800 	.word	0x40001800

080037d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e03f      	b.n	800388e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fbfa 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800383e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fba1 	bl	8003f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695a      	ldr	r2, [r3, #20]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b088      	sub	sp, #32
 800389a:	af02      	add	r7, sp, #8
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	f040 8083 	bne.w	80039be <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_UART_Transmit+0x2e>
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e07b      	b.n	80039c0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Transmit+0x40>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e074      	b.n	80039c0 <HAL_UART_Transmit+0x12a>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2221      	movs	r2, #33	; 0x21
 80038e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038ec:	f7fd fd14 	bl	8001318 <HAL_GetTick>
 80038f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	88fa      	ldrh	r2, [r7, #6]
 80038f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	88fa      	ldrh	r2, [r7, #6]
 80038fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003906:	e042      	b.n	800398e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391e:	d122      	bne.n	8003966 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2200      	movs	r2, #0
 8003928:	2180      	movs	r1, #128	; 0x80
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f9c0 	bl	8003cb0 <UART_WaitOnFlagUntilTimeout>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e042      	b.n	80039c0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	3302      	adds	r3, #2
 800395a:	60bb      	str	r3, [r7, #8]
 800395c:	e017      	b.n	800398e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	3301      	adds	r3, #1
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	e013      	b.n	800398e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f99d 	bl	8003cb0 <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e01f      	b.n	80039c0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	60ba      	str	r2, [r7, #8]
 8003986:	781a      	ldrb	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003992:	b29b      	uxth	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1b7      	bne.n	8003908 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2200      	movs	r2, #0
 80039a0:	2140      	movs	r1, #64	; 0x40
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f984 	bl	8003cb0 <UART_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e006      	b.n	80039c0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d140      	bne.n	8003a64 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_UART_Receive_IT+0x26>
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e039      	b.n	8003a66 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_UART_Receive_IT+0x38>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e032      	b.n	8003a66 <HAL_UART_Receive_IT+0x9e>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	88fa      	ldrh	r2, [r7, #6]
 8003a12:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2222      	movs	r2, #34	; 0x22
 8003a24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a3e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0220 	orr.w	r2, r2, #32
 8003a5e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10d      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x52>
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f9e0 	bl	8003e84 <UART_Receive_IT>
      return;
 8003ac4:	e0d0      	b.n	8003c68 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80b0 	beq.w	8003c2e <HAL_UART_IRQHandler+0x1ba>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d105      	bne.n	8003ae4 <HAL_UART_IRQHandler+0x70>
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80a5 	beq.w	8003c2e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_UART_IRQHandler+0x90>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	f043 0201 	orr.w	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_UART_IRQHandler+0xb0>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	f043 0202 	orr.w	r2, r3, #2
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_UART_IRQHandler+0xd0>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00f      	beq.n	8003b6e <HAL_UART_IRQHandler+0xfa>
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d104      	bne.n	8003b62 <HAL_UART_IRQHandler+0xee>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b66:	f043 0208 	orr.w	r2, r3, #8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d077      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <HAL_UART_IRQHandler+0x11c>
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f97a 	bl	8003e84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	bf0c      	ite	eq
 8003b9e:	2301      	moveq	r3, #1
 8003ba0:	2300      	movne	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <HAL_UART_IRQHandler+0x144>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d031      	beq.n	8003c1c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f8c3 	bl	8003d44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d123      	bne.n	8003c14 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bda:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d013      	beq.n	8003c0c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be8:	4a21      	ldr	r2, [pc, #132]	; (8003c70 <HAL_UART_IRQHandler+0x1fc>)
 8003bea:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fd fdb5 	bl	8001760 <HAL_DMA_Abort_IT>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d016      	beq.n	8003c2a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c06:	4610      	mov	r0, r2
 8003c08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c0a:	e00e      	b.n	8003c2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f845 	bl	8003c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c12:	e00a      	b.n	8003c2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 f841 	bl	8003c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c1a:	e006      	b.n	8003c2a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f83d 	bl	8003c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003c28:	e01d      	b.n	8003c66 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2a:	bf00      	nop
    return;
 8003c2c:	e01b      	b.n	8003c66 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_UART_IRQHandler+0x1d6>
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8b0 	bl	8003da8 <UART_Transmit_IT>
    return;
 8003c48:	e00e      	b.n	8003c68 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_UART_IRQHandler+0x1f4>
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8f8 	bl	8003e54 <UART_EndTransmit_IT>
    return;
 8003c64:	e000      	b.n	8003c68 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003c66:	bf00      	nop
  }
}
 8003c68:	3720      	adds	r7, #32
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	08003d81 	.word	0x08003d81

08003c74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc0:	e02c      	b.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc8:	d028      	beq.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cd0:	f7fd fb22 	bl	8001318 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d21d      	bcs.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e00f      	b.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4013      	ands	r3, r2
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d0c3      	beq.n	8003cc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff ff7e 	bl	8003c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b21      	cmp	r3, #33	; 0x21
 8003dba:	d144      	bne.n	8003e46 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc4:	d11a      	bne.n	8003dfc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dda:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	1c9a      	adds	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	621a      	str	r2, [r3, #32]
 8003dee:	e00e      	b.n	8003e0e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	621a      	str	r2, [r3, #32]
 8003dfa:	e008      	b.n	8003e0e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	1c59      	adds	r1, r3, #1
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6211      	str	r1, [r2, #32]
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10f      	bne.n	8003e42 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e000      	b.n	8003e48 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
  }
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff fefd 	bl	8003c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b22      	cmp	r3, #34	; 0x22
 8003e96:	d171      	bne.n	8003f7c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	d123      	bne.n	8003eea <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10e      	bne.n	8003ece <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	1c9a      	adds	r2, r3, #2
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
 8003ecc:	e029      	b.n	8003f22 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee8:	e01b      	b.n	8003f22 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6858      	ldr	r0, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	1c59      	adds	r1, r3, #1
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6291      	str	r1, [r2, #40]	; 0x28
 8003f02:	b2c2      	uxtb	r2, r0
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	e00c      	b.n	8003f22 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	1c58      	adds	r0, r3, #1
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	6288      	str	r0, [r1, #40]	; 0x28
 8003f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d120      	bne.n	8003f78 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0220 	bic.w	r2, r2, #32
 8003f44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0201 	bic.w	r2, r2, #1
 8003f64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fe8a 	bl	8003c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e002      	b.n	8003f7e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	b0bd      	sub	sp, #244	; 0xf4
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa4:	68d9      	ldr	r1, [r3, #12]
 8003fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	ea40 0301 	orr.w	r3, r0, r1
 8003fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8003fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fe0:	f021 010c 	bic.w	r1, r1, #12
 8003fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	6999      	ldr	r1, [r3, #24]
 8004004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	ea40 0301 	orr.w	r3, r0, r1
 800400e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401a:	f040 81a5 	bne.w	8004368 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4bcd      	ldr	r3, [pc, #820]	; (800435c <UART_SetConfig+0x3d4>)
 8004026:	429a      	cmp	r2, r3
 8004028:	d006      	beq.n	8004038 <UART_SetConfig+0xb0>
 800402a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4bcb      	ldr	r3, [pc, #812]	; (8004360 <UART_SetConfig+0x3d8>)
 8004032:	429a      	cmp	r2, r3
 8004034:	f040 80cb 	bne.w	80041ce <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004038:	f7fe fc2c 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 800403c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004040:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004044:	461c      	mov	r4, r3
 8004046:	f04f 0500 	mov.w	r5, #0
 800404a:	4622      	mov	r2, r4
 800404c:	462b      	mov	r3, r5
 800404e:	1891      	adds	r1, r2, r2
 8004050:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004054:	415b      	adcs	r3, r3
 8004056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800405a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800405e:	1912      	adds	r2, r2, r4
 8004060:	eb45 0303 	adc.w	r3, r5, r3
 8004064:	f04f 0000 	mov.w	r0, #0
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	00d9      	lsls	r1, r3, #3
 800406e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004072:	00d0      	lsls	r0, r2, #3
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	1911      	adds	r1, r2, r4
 800407a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800407e:	416b      	adcs	r3, r5
 8004080:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	461a      	mov	r2, r3
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	1891      	adds	r1, r2, r2
 8004092:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004096:	415b      	adcs	r3, r3
 8004098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800409c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80040a0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80040a4:	f7fc f890 	bl	80001c8 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4bad      	ldr	r3, [pc, #692]	; (8004364 <UART_SetConfig+0x3dc>)
 80040ae:	fba3 2302 	umull	r2, r3, r3, r2
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	011e      	lsls	r6, r3, #4
 80040b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80040ba:	461c      	mov	r4, r3
 80040bc:	f04f 0500 	mov.w	r5, #0
 80040c0:	4622      	mov	r2, r4
 80040c2:	462b      	mov	r3, r5
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	67b9      	str	r1, [r7, #120]	; 0x78
 80040c8:	415b      	adcs	r3, r3
 80040ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040cc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80040d0:	1912      	adds	r2, r2, r4
 80040d2:	eb45 0303 	adc.w	r3, r5, r3
 80040d6:	f04f 0000 	mov.w	r0, #0
 80040da:	f04f 0100 	mov.w	r1, #0
 80040de:	00d9      	lsls	r1, r3, #3
 80040e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040e4:	00d0      	lsls	r0, r2, #3
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	1911      	adds	r1, r2, r4
 80040ec:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80040f0:	416b      	adcs	r3, r5
 80040f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80040f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	461a      	mov	r2, r3
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	1891      	adds	r1, r2, r2
 8004104:	6739      	str	r1, [r7, #112]	; 0x70
 8004106:	415b      	adcs	r3, r3
 8004108:	677b      	str	r3, [r7, #116]	; 0x74
 800410a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800410e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004112:	f7fc f859 	bl	80001c8 <__aeabi_uldivmod>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4b92      	ldr	r3, [pc, #584]	; (8004364 <UART_SetConfig+0x3dc>)
 800411c:	fba3 1302 	umull	r1, r3, r3, r2
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	2164      	movs	r1, #100	; 0x64
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	3332      	adds	r3, #50	; 0x32
 800412e:	4a8d      	ldr	r2, [pc, #564]	; (8004364 <UART_SetConfig+0x3dc>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	095b      	lsrs	r3, r3, #5
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800413c:	441e      	add	r6, r3
 800413e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004142:	4618      	mov	r0, r3
 8004144:	f04f 0100 	mov.w	r1, #0
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	1894      	adds	r4, r2, r2
 800414e:	66bc      	str	r4, [r7, #104]	; 0x68
 8004150:	415b      	adcs	r3, r3
 8004152:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004154:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004158:	1812      	adds	r2, r2, r0
 800415a:	eb41 0303 	adc.w	r3, r1, r3
 800415e:	f04f 0400 	mov.w	r4, #0
 8004162:	f04f 0500 	mov.w	r5, #0
 8004166:	00dd      	lsls	r5, r3, #3
 8004168:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800416c:	00d4      	lsls	r4, r2, #3
 800416e:	4622      	mov	r2, r4
 8004170:	462b      	mov	r3, r5
 8004172:	1814      	adds	r4, r2, r0
 8004174:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004178:	414b      	adcs	r3, r1
 800417a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	461a      	mov	r2, r3
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	1891      	adds	r1, r2, r2
 800418c:	6639      	str	r1, [r7, #96]	; 0x60
 800418e:	415b      	adcs	r3, r3
 8004190:	667b      	str	r3, [r7, #100]	; 0x64
 8004192:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004196:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800419a:	f7fc f815 	bl	80001c8 <__aeabi_uldivmod>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4b70      	ldr	r3, [pc, #448]	; (8004364 <UART_SetConfig+0x3dc>)
 80041a4:	fba3 1302 	umull	r1, r3, r3, r2
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	2164      	movs	r1, #100	; 0x64
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	3332      	adds	r3, #50	; 0x32
 80041b6:	4a6b      	ldr	r2, [pc, #428]	; (8004364 <UART_SetConfig+0x3dc>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	f003 0207 	and.w	r2, r3, #7
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4432      	add	r2, r6
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	e26d      	b.n	80046aa <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ce:	f7fe fb4d 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 80041d2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80041da:	461c      	mov	r4, r3
 80041dc:	f04f 0500 	mov.w	r5, #0
 80041e0:	4622      	mov	r2, r4
 80041e2:	462b      	mov	r3, r5
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80041e8:	415b      	adcs	r3, r3
 80041ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041f0:	1912      	adds	r2, r2, r4
 80041f2:	eb45 0303 	adc.w	r3, r5, r3
 80041f6:	f04f 0000 	mov.w	r0, #0
 80041fa:	f04f 0100 	mov.w	r1, #0
 80041fe:	00d9      	lsls	r1, r3, #3
 8004200:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004204:	00d0      	lsls	r0, r2, #3
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	1911      	adds	r1, r2, r4
 800420c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004210:	416b      	adcs	r3, r5
 8004212:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	461a      	mov	r2, r3
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	1891      	adds	r1, r2, r2
 8004224:	6539      	str	r1, [r7, #80]	; 0x50
 8004226:	415b      	adcs	r3, r3
 8004228:	657b      	str	r3, [r7, #84]	; 0x54
 800422a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800422e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004232:	f7fb ffc9 	bl	80001c8 <__aeabi_uldivmod>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4b4a      	ldr	r3, [pc, #296]	; (8004364 <UART_SetConfig+0x3dc>)
 800423c:	fba3 2302 	umull	r2, r3, r3, r2
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	011e      	lsls	r6, r3, #4
 8004244:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004248:	461c      	mov	r4, r3
 800424a:	f04f 0500 	mov.w	r5, #0
 800424e:	4622      	mov	r2, r4
 8004250:	462b      	mov	r3, r5
 8004252:	1891      	adds	r1, r2, r2
 8004254:	64b9      	str	r1, [r7, #72]	; 0x48
 8004256:	415b      	adcs	r3, r3
 8004258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800425e:	1912      	adds	r2, r2, r4
 8004260:	eb45 0303 	adc.w	r3, r5, r3
 8004264:	f04f 0000 	mov.w	r0, #0
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	00d9      	lsls	r1, r3, #3
 800426e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004272:	00d0      	lsls	r0, r2, #3
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	1911      	adds	r1, r2, r4
 800427a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800427e:	416b      	adcs	r3, r5
 8004280:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	461a      	mov	r2, r3
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	1891      	adds	r1, r2, r2
 8004292:	6439      	str	r1, [r7, #64]	; 0x40
 8004294:	415b      	adcs	r3, r3
 8004296:	647b      	str	r3, [r7, #68]	; 0x44
 8004298:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800429c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80042a0:	f7fb ff92 	bl	80001c8 <__aeabi_uldivmod>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <UART_SetConfig+0x3dc>)
 80042aa:	fba3 1302 	umull	r1, r3, r3, r2
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	2164      	movs	r1, #100	; 0x64
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	3332      	adds	r3, #50	; 0x32
 80042bc:	4a29      	ldr	r2, [pc, #164]	; (8004364 <UART_SetConfig+0x3dc>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042ca:	441e      	add	r6, r3
 80042cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042d0:	4618      	mov	r0, r3
 80042d2:	f04f 0100 	mov.w	r1, #0
 80042d6:	4602      	mov	r2, r0
 80042d8:	460b      	mov	r3, r1
 80042da:	1894      	adds	r4, r2, r2
 80042dc:	63bc      	str	r4, [r7, #56]	; 0x38
 80042de:	415b      	adcs	r3, r3
 80042e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042e6:	1812      	adds	r2, r2, r0
 80042e8:	eb41 0303 	adc.w	r3, r1, r3
 80042ec:	f04f 0400 	mov.w	r4, #0
 80042f0:	f04f 0500 	mov.w	r5, #0
 80042f4:	00dd      	lsls	r5, r3, #3
 80042f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042fa:	00d4      	lsls	r4, r2, #3
 80042fc:	4622      	mov	r2, r4
 80042fe:	462b      	mov	r3, r5
 8004300:	1814      	adds	r4, r2, r0
 8004302:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004306:	414b      	adcs	r3, r1
 8004308:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800430c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	461a      	mov	r2, r3
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	1891      	adds	r1, r2, r2
 800431a:	6339      	str	r1, [r7, #48]	; 0x30
 800431c:	415b      	adcs	r3, r3
 800431e:	637b      	str	r3, [r7, #52]	; 0x34
 8004320:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004324:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004328:	f7fb ff4e 	bl	80001c8 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <UART_SetConfig+0x3dc>)
 8004332:	fba3 1302 	umull	r1, r3, r3, r2
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2164      	movs	r1, #100	; 0x64
 800433a:	fb01 f303 	mul.w	r3, r1, r3
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	3332      	adds	r3, #50	; 0x32
 8004344:	4a07      	ldr	r2, [pc, #28]	; (8004364 <UART_SetConfig+0x3dc>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	f003 0207 	and.w	r2, r3, #7
 8004350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4432      	add	r2, r6
 8004358:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800435a:	e1a6      	b.n	80046aa <UART_SetConfig+0x722>
 800435c:	40011000 	.word	0x40011000
 8004360:	40011400 	.word	0x40011400
 8004364:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4bd1      	ldr	r3, [pc, #836]	; (80046b4 <UART_SetConfig+0x72c>)
 8004370:	429a      	cmp	r2, r3
 8004372:	d006      	beq.n	8004382 <UART_SetConfig+0x3fa>
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	4bcf      	ldr	r3, [pc, #828]	; (80046b8 <UART_SetConfig+0x730>)
 800437c:	429a      	cmp	r2, r3
 800437e:	f040 80ca 	bne.w	8004516 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004382:	f7fe fa87 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 8004386:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800438a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800438e:	461c      	mov	r4, r3
 8004390:	f04f 0500 	mov.w	r5, #0
 8004394:	4622      	mov	r2, r4
 8004396:	462b      	mov	r3, r5
 8004398:	1891      	adds	r1, r2, r2
 800439a:	62b9      	str	r1, [r7, #40]	; 0x28
 800439c:	415b      	adcs	r3, r3
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043a4:	1912      	adds	r2, r2, r4
 80043a6:	eb45 0303 	adc.w	r3, r5, r3
 80043aa:	f04f 0000 	mov.w	r0, #0
 80043ae:	f04f 0100 	mov.w	r1, #0
 80043b2:	00d9      	lsls	r1, r3, #3
 80043b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b8:	00d0      	lsls	r0, r2, #3
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	eb12 0a04 	adds.w	sl, r2, r4
 80043c2:	eb43 0b05 	adc.w	fp, r3, r5
 80043c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f04f 0100 	mov.w	r1, #0
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	008b      	lsls	r3, r1, #2
 80043dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80043e0:	0082      	lsls	r2, r0, #2
 80043e2:	4650      	mov	r0, sl
 80043e4:	4659      	mov	r1, fp
 80043e6:	f7fb feef 	bl	80001c8 <__aeabi_uldivmod>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4bb3      	ldr	r3, [pc, #716]	; (80046bc <UART_SetConfig+0x734>)
 80043f0:	fba3 2302 	umull	r2, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	011e      	lsls	r6, r3, #4
 80043f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043fc:	4618      	mov	r0, r3
 80043fe:	f04f 0100 	mov.w	r1, #0
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	1894      	adds	r4, r2, r2
 8004408:	623c      	str	r4, [r7, #32]
 800440a:	415b      	adcs	r3, r3
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
 800440e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004412:	1812      	adds	r2, r2, r0
 8004414:	eb41 0303 	adc.w	r3, r1, r3
 8004418:	f04f 0400 	mov.w	r4, #0
 800441c:	f04f 0500 	mov.w	r5, #0
 8004420:	00dd      	lsls	r5, r3, #3
 8004422:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004426:	00d4      	lsls	r4, r2, #3
 8004428:	4622      	mov	r2, r4
 800442a:	462b      	mov	r3, r5
 800442c:	1814      	adds	r4, r2, r0
 800442e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004432:	414b      	adcs	r3, r1
 8004434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	f04f 0100 	mov.w	r1, #0
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	008b      	lsls	r3, r1, #2
 800444e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004452:	0082      	lsls	r2, r0, #2
 8004454:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004458:	f7fb feb6 	bl	80001c8 <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4b96      	ldr	r3, [pc, #600]	; (80046bc <UART_SetConfig+0x734>)
 8004462:	fba3 1302 	umull	r1, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2164      	movs	r1, #100	; 0x64
 800446a:	fb01 f303 	mul.w	r3, r1, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	; 0x32
 8004474:	4a91      	ldr	r2, [pc, #580]	; (80046bc <UART_SetConfig+0x734>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004480:	441e      	add	r6, r3
 8004482:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004486:	4618      	mov	r0, r3
 8004488:	f04f 0100 	mov.w	r1, #0
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	1894      	adds	r4, r2, r2
 8004492:	61bc      	str	r4, [r7, #24]
 8004494:	415b      	adcs	r3, r3
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449c:	1812      	adds	r2, r2, r0
 800449e:	eb41 0303 	adc.w	r3, r1, r3
 80044a2:	f04f 0400 	mov.w	r4, #0
 80044a6:	f04f 0500 	mov.w	r5, #0
 80044aa:	00dd      	lsls	r5, r3, #3
 80044ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044b0:	00d4      	lsls	r4, r2, #3
 80044b2:	4622      	mov	r2, r4
 80044b4:	462b      	mov	r3, r5
 80044b6:	1814      	adds	r4, r2, r0
 80044b8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80044bc:	414b      	adcs	r3, r1
 80044be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	008b      	lsls	r3, r1, #2
 80044d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80044dc:	0082      	lsls	r2, r0, #2
 80044de:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80044e2:	f7fb fe71 	bl	80001c8 <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4b74      	ldr	r3, [pc, #464]	; (80046bc <UART_SetConfig+0x734>)
 80044ec:	fba3 1302 	umull	r1, r3, r3, r2
 80044f0:	095b      	lsrs	r3, r3, #5
 80044f2:	2164      	movs	r1, #100	; 0x64
 80044f4:	fb01 f303 	mul.w	r3, r1, r3
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	3332      	adds	r3, #50	; 0x32
 80044fe:	4a6f      	ldr	r2, [pc, #444]	; (80046bc <UART_SetConfig+0x734>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	f003 020f 	and.w	r2, r3, #15
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4432      	add	r2, r6
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	e0c9      	b.n	80046aa <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004516:	f7fe f9a9 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 800451a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800451e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004522:	461c      	mov	r4, r3
 8004524:	f04f 0500 	mov.w	r5, #0
 8004528:	4622      	mov	r2, r4
 800452a:	462b      	mov	r3, r5
 800452c:	1891      	adds	r1, r2, r2
 800452e:	6139      	str	r1, [r7, #16]
 8004530:	415b      	adcs	r3, r3
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004538:	1912      	adds	r2, r2, r4
 800453a:	eb45 0303 	adc.w	r3, r5, r3
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	00d9      	lsls	r1, r3, #3
 8004548:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800454c:	00d0      	lsls	r0, r2, #3
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	eb12 0804 	adds.w	r8, r2, r4
 8004556:	eb43 0905 	adc.w	r9, r3, r5
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	f04f 0100 	mov.w	r1, #0
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	008b      	lsls	r3, r1, #2
 8004570:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004574:	0082      	lsls	r2, r0, #2
 8004576:	4640      	mov	r0, r8
 8004578:	4649      	mov	r1, r9
 800457a:	f7fb fe25 	bl	80001c8 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4b4e      	ldr	r3, [pc, #312]	; (80046bc <UART_SetConfig+0x734>)
 8004584:	fba3 2302 	umull	r2, r3, r3, r2
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	011e      	lsls	r6, r3, #4
 800458c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004590:	4618      	mov	r0, r3
 8004592:	f04f 0100 	mov.w	r1, #0
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	1894      	adds	r4, r2, r2
 800459c:	60bc      	str	r4, [r7, #8]
 800459e:	415b      	adcs	r3, r3
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a6:	1812      	adds	r2, r2, r0
 80045a8:	eb41 0303 	adc.w	r3, r1, r3
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	f04f 0500 	mov.w	r5, #0
 80045b4:	00dd      	lsls	r5, r3, #3
 80045b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045ba:	00d4      	lsls	r4, r2, #3
 80045bc:	4622      	mov	r2, r4
 80045be:	462b      	mov	r3, r5
 80045c0:	1814      	adds	r4, r2, r0
 80045c2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80045c6:	414b      	adcs	r3, r1
 80045c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f04f 0100 	mov.w	r1, #0
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	008b      	lsls	r3, r1, #2
 80045e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045e6:	0082      	lsls	r2, r0, #2
 80045e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045ec:	f7fb fdec 	bl	80001c8 <__aeabi_uldivmod>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4b31      	ldr	r3, [pc, #196]	; (80046bc <UART_SetConfig+0x734>)
 80045f6:	fba3 1302 	umull	r1, r3, r3, r2
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2164      	movs	r1, #100	; 0x64
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	3332      	adds	r3, #50	; 0x32
 8004608:	4a2c      	ldr	r2, [pc, #176]	; (80046bc <UART_SetConfig+0x734>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004614:	441e      	add	r6, r3
 8004616:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800461a:	4618      	mov	r0, r3
 800461c:	f04f 0100 	mov.w	r1, #0
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	1894      	adds	r4, r2, r2
 8004626:	603c      	str	r4, [r7, #0]
 8004628:	415b      	adcs	r3, r3
 800462a:	607b      	str	r3, [r7, #4]
 800462c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004630:	1812      	adds	r2, r2, r0
 8004632:	eb41 0303 	adc.w	r3, r1, r3
 8004636:	f04f 0400 	mov.w	r4, #0
 800463a:	f04f 0500 	mov.w	r5, #0
 800463e:	00dd      	lsls	r5, r3, #3
 8004640:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004644:	00d4      	lsls	r4, r2, #3
 8004646:	4622      	mov	r2, r4
 8004648:	462b      	mov	r3, r5
 800464a:	1814      	adds	r4, r2, r0
 800464c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004650:	414b      	adcs	r3, r1
 8004652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	4618      	mov	r0, r3
 800465e:	f04f 0100 	mov.w	r1, #0
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	008b      	lsls	r3, r1, #2
 800466c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004670:	0082      	lsls	r2, r0, #2
 8004672:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8004676:	f7fb fda7 	bl	80001c8 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <UART_SetConfig+0x734>)
 8004680:	fba3 1302 	umull	r1, r3, r3, r2
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	2164      	movs	r1, #100	; 0x64
 8004688:	fb01 f303 	mul.w	r3, r1, r3
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	3332      	adds	r3, #50	; 0x32
 8004692:	4a0a      	ldr	r2, [pc, #40]	; (80046bc <UART_SetConfig+0x734>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	f003 020f 	and.w	r2, r3, #15
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4432      	add	r2, r6
 80046a6:	609a      	str	r2, [r3, #8]
}
 80046a8:	e7ff      	b.n	80046aa <UART_SetConfig+0x722>
 80046aa:	bf00      	nop
 80046ac:	37f4      	adds	r7, #244	; 0xf4
 80046ae:	46bd      	mov	sp, r7
 80046b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40011400 	.word	0x40011400
 80046bc:	51eb851f 	.word	0x51eb851f

080046c0 <__errno>:
 80046c0:	4b01      	ldr	r3, [pc, #4]	; (80046c8 <__errno+0x8>)
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	2000000c 	.word	0x2000000c

080046cc <__libc_init_array>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4d0d      	ldr	r5, [pc, #52]	; (8004704 <__libc_init_array+0x38>)
 80046d0:	4c0d      	ldr	r4, [pc, #52]	; (8004708 <__libc_init_array+0x3c>)
 80046d2:	1b64      	subs	r4, r4, r5
 80046d4:	10a4      	asrs	r4, r4, #2
 80046d6:	2600      	movs	r6, #0
 80046d8:	42a6      	cmp	r6, r4
 80046da:	d109      	bne.n	80046f0 <__libc_init_array+0x24>
 80046dc:	4d0b      	ldr	r5, [pc, #44]	; (800470c <__libc_init_array+0x40>)
 80046de:	4c0c      	ldr	r4, [pc, #48]	; (8004710 <__libc_init_array+0x44>)
 80046e0:	f000 fcf4 	bl	80050cc <_init>
 80046e4:	1b64      	subs	r4, r4, r5
 80046e6:	10a4      	asrs	r4, r4, #2
 80046e8:	2600      	movs	r6, #0
 80046ea:	42a6      	cmp	r6, r4
 80046ec:	d105      	bne.n	80046fa <__libc_init_array+0x2e>
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f4:	4798      	blx	r3
 80046f6:	3601      	adds	r6, #1
 80046f8:	e7ee      	b.n	80046d8 <__libc_init_array+0xc>
 80046fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fe:	4798      	blx	r3
 8004700:	3601      	adds	r6, #1
 8004702:	e7f2      	b.n	80046ea <__libc_init_array+0x1e>
 8004704:	080051ac 	.word	0x080051ac
 8004708:	080051ac 	.word	0x080051ac
 800470c:	080051ac 	.word	0x080051ac
 8004710:	080051b0 	.word	0x080051b0

08004714 <memcpy>:
 8004714:	440a      	add	r2, r1
 8004716:	4291      	cmp	r1, r2
 8004718:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800471c:	d100      	bne.n	8004720 <memcpy+0xc>
 800471e:	4770      	bx	lr
 8004720:	b510      	push	{r4, lr}
 8004722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800472a:	4291      	cmp	r1, r2
 800472c:	d1f9      	bne.n	8004722 <memcpy+0xe>
 800472e:	bd10      	pop	{r4, pc}

08004730 <memset>:
 8004730:	4402      	add	r2, r0
 8004732:	4603      	mov	r3, r0
 8004734:	4293      	cmp	r3, r2
 8004736:	d100      	bne.n	800473a <memset+0xa>
 8004738:	4770      	bx	lr
 800473a:	f803 1b01 	strb.w	r1, [r3], #1
 800473e:	e7f9      	b.n	8004734 <memset+0x4>

08004740 <_puts_r>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	460e      	mov	r6, r1
 8004744:	4605      	mov	r5, r0
 8004746:	b118      	cbz	r0, 8004750 <_puts_r+0x10>
 8004748:	6983      	ldr	r3, [r0, #24]
 800474a:	b90b      	cbnz	r3, 8004750 <_puts_r+0x10>
 800474c:	f000 fa48 	bl	8004be0 <__sinit>
 8004750:	69ab      	ldr	r3, [r5, #24]
 8004752:	68ac      	ldr	r4, [r5, #8]
 8004754:	b913      	cbnz	r3, 800475c <_puts_r+0x1c>
 8004756:	4628      	mov	r0, r5
 8004758:	f000 fa42 	bl	8004be0 <__sinit>
 800475c:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <_puts_r+0xd0>)
 800475e:	429c      	cmp	r4, r3
 8004760:	d120      	bne.n	80047a4 <_puts_r+0x64>
 8004762:	686c      	ldr	r4, [r5, #4]
 8004764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004766:	07db      	lsls	r3, r3, #31
 8004768:	d405      	bmi.n	8004776 <_puts_r+0x36>
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	0598      	lsls	r0, r3, #22
 800476e:	d402      	bmi.n	8004776 <_puts_r+0x36>
 8004770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004772:	f000 fad3 	bl	8004d1c <__retarget_lock_acquire_recursive>
 8004776:	89a3      	ldrh	r3, [r4, #12]
 8004778:	0719      	lsls	r1, r3, #28
 800477a:	d51d      	bpl.n	80047b8 <_puts_r+0x78>
 800477c:	6923      	ldr	r3, [r4, #16]
 800477e:	b1db      	cbz	r3, 80047b8 <_puts_r+0x78>
 8004780:	3e01      	subs	r6, #1
 8004782:	68a3      	ldr	r3, [r4, #8]
 8004784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004788:	3b01      	subs	r3, #1
 800478a:	60a3      	str	r3, [r4, #8]
 800478c:	bb39      	cbnz	r1, 80047de <_puts_r+0x9e>
 800478e:	2b00      	cmp	r3, #0
 8004790:	da38      	bge.n	8004804 <_puts_r+0xc4>
 8004792:	4622      	mov	r2, r4
 8004794:	210a      	movs	r1, #10
 8004796:	4628      	mov	r0, r5
 8004798:	f000 f848 	bl	800482c <__swbuf_r>
 800479c:	3001      	adds	r0, #1
 800479e:	d011      	beq.n	80047c4 <_puts_r+0x84>
 80047a0:	250a      	movs	r5, #10
 80047a2:	e011      	b.n	80047c8 <_puts_r+0x88>
 80047a4:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <_puts_r+0xd4>)
 80047a6:	429c      	cmp	r4, r3
 80047a8:	d101      	bne.n	80047ae <_puts_r+0x6e>
 80047aa:	68ac      	ldr	r4, [r5, #8]
 80047ac:	e7da      	b.n	8004764 <_puts_r+0x24>
 80047ae:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <_puts_r+0xd8>)
 80047b0:	429c      	cmp	r4, r3
 80047b2:	bf08      	it	eq
 80047b4:	68ec      	ldreq	r4, [r5, #12]
 80047b6:	e7d5      	b.n	8004764 <_puts_r+0x24>
 80047b8:	4621      	mov	r1, r4
 80047ba:	4628      	mov	r0, r5
 80047bc:	f000 f888 	bl	80048d0 <__swsetup_r>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d0dd      	beq.n	8004780 <_puts_r+0x40>
 80047c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80047c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047ca:	07da      	lsls	r2, r3, #31
 80047cc:	d405      	bmi.n	80047da <_puts_r+0x9a>
 80047ce:	89a3      	ldrh	r3, [r4, #12]
 80047d0:	059b      	lsls	r3, r3, #22
 80047d2:	d402      	bmi.n	80047da <_puts_r+0x9a>
 80047d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047d6:	f000 faa2 	bl	8004d1e <__retarget_lock_release_recursive>
 80047da:	4628      	mov	r0, r5
 80047dc:	bd70      	pop	{r4, r5, r6, pc}
 80047de:	2b00      	cmp	r3, #0
 80047e0:	da04      	bge.n	80047ec <_puts_r+0xac>
 80047e2:	69a2      	ldr	r2, [r4, #24]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	dc06      	bgt.n	80047f6 <_puts_r+0xb6>
 80047e8:	290a      	cmp	r1, #10
 80047ea:	d004      	beq.n	80047f6 <_puts_r+0xb6>
 80047ec:	6823      	ldr	r3, [r4, #0]
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	6022      	str	r2, [r4, #0]
 80047f2:	7019      	strb	r1, [r3, #0]
 80047f4:	e7c5      	b.n	8004782 <_puts_r+0x42>
 80047f6:	4622      	mov	r2, r4
 80047f8:	4628      	mov	r0, r5
 80047fa:	f000 f817 	bl	800482c <__swbuf_r>
 80047fe:	3001      	adds	r0, #1
 8004800:	d1bf      	bne.n	8004782 <_puts_r+0x42>
 8004802:	e7df      	b.n	80047c4 <_puts_r+0x84>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	250a      	movs	r5, #10
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	6022      	str	r2, [r4, #0]
 800480c:	701d      	strb	r5, [r3, #0]
 800480e:	e7db      	b.n	80047c8 <_puts_r+0x88>
 8004810:	08005164 	.word	0x08005164
 8004814:	08005184 	.word	0x08005184
 8004818:	08005144 	.word	0x08005144

0800481c <puts>:
 800481c:	4b02      	ldr	r3, [pc, #8]	; (8004828 <puts+0xc>)
 800481e:	4601      	mov	r1, r0
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	f7ff bf8d 	b.w	8004740 <_puts_r>
 8004826:	bf00      	nop
 8004828:	2000000c 	.word	0x2000000c

0800482c <__swbuf_r>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	460e      	mov	r6, r1
 8004830:	4614      	mov	r4, r2
 8004832:	4605      	mov	r5, r0
 8004834:	b118      	cbz	r0, 800483e <__swbuf_r+0x12>
 8004836:	6983      	ldr	r3, [r0, #24]
 8004838:	b90b      	cbnz	r3, 800483e <__swbuf_r+0x12>
 800483a:	f000 f9d1 	bl	8004be0 <__sinit>
 800483e:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <__swbuf_r+0x98>)
 8004840:	429c      	cmp	r4, r3
 8004842:	d12b      	bne.n	800489c <__swbuf_r+0x70>
 8004844:	686c      	ldr	r4, [r5, #4]
 8004846:	69a3      	ldr	r3, [r4, #24]
 8004848:	60a3      	str	r3, [r4, #8]
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	071a      	lsls	r2, r3, #28
 800484e:	d52f      	bpl.n	80048b0 <__swbuf_r+0x84>
 8004850:	6923      	ldr	r3, [r4, #16]
 8004852:	b36b      	cbz	r3, 80048b0 <__swbuf_r+0x84>
 8004854:	6923      	ldr	r3, [r4, #16]
 8004856:	6820      	ldr	r0, [r4, #0]
 8004858:	1ac0      	subs	r0, r0, r3
 800485a:	6963      	ldr	r3, [r4, #20]
 800485c:	b2f6      	uxtb	r6, r6
 800485e:	4283      	cmp	r3, r0
 8004860:	4637      	mov	r7, r6
 8004862:	dc04      	bgt.n	800486e <__swbuf_r+0x42>
 8004864:	4621      	mov	r1, r4
 8004866:	4628      	mov	r0, r5
 8004868:	f000 f926 	bl	8004ab8 <_fflush_r>
 800486c:	bb30      	cbnz	r0, 80048bc <__swbuf_r+0x90>
 800486e:	68a3      	ldr	r3, [r4, #8]
 8004870:	3b01      	subs	r3, #1
 8004872:	60a3      	str	r3, [r4, #8]
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	6022      	str	r2, [r4, #0]
 800487a:	701e      	strb	r6, [r3, #0]
 800487c:	6963      	ldr	r3, [r4, #20]
 800487e:	3001      	adds	r0, #1
 8004880:	4283      	cmp	r3, r0
 8004882:	d004      	beq.n	800488e <__swbuf_r+0x62>
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	07db      	lsls	r3, r3, #31
 8004888:	d506      	bpl.n	8004898 <__swbuf_r+0x6c>
 800488a:	2e0a      	cmp	r6, #10
 800488c:	d104      	bne.n	8004898 <__swbuf_r+0x6c>
 800488e:	4621      	mov	r1, r4
 8004890:	4628      	mov	r0, r5
 8004892:	f000 f911 	bl	8004ab8 <_fflush_r>
 8004896:	b988      	cbnz	r0, 80048bc <__swbuf_r+0x90>
 8004898:	4638      	mov	r0, r7
 800489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <__swbuf_r+0x9c>)
 800489e:	429c      	cmp	r4, r3
 80048a0:	d101      	bne.n	80048a6 <__swbuf_r+0x7a>
 80048a2:	68ac      	ldr	r4, [r5, #8]
 80048a4:	e7cf      	b.n	8004846 <__swbuf_r+0x1a>
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <__swbuf_r+0xa0>)
 80048a8:	429c      	cmp	r4, r3
 80048aa:	bf08      	it	eq
 80048ac:	68ec      	ldreq	r4, [r5, #12]
 80048ae:	e7ca      	b.n	8004846 <__swbuf_r+0x1a>
 80048b0:	4621      	mov	r1, r4
 80048b2:	4628      	mov	r0, r5
 80048b4:	f000 f80c 	bl	80048d0 <__swsetup_r>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d0cb      	beq.n	8004854 <__swbuf_r+0x28>
 80048bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80048c0:	e7ea      	b.n	8004898 <__swbuf_r+0x6c>
 80048c2:	bf00      	nop
 80048c4:	08005164 	.word	0x08005164
 80048c8:	08005184 	.word	0x08005184
 80048cc:	08005144 	.word	0x08005144

080048d0 <__swsetup_r>:
 80048d0:	4b32      	ldr	r3, [pc, #200]	; (800499c <__swsetup_r+0xcc>)
 80048d2:	b570      	push	{r4, r5, r6, lr}
 80048d4:	681d      	ldr	r5, [r3, #0]
 80048d6:	4606      	mov	r6, r0
 80048d8:	460c      	mov	r4, r1
 80048da:	b125      	cbz	r5, 80048e6 <__swsetup_r+0x16>
 80048dc:	69ab      	ldr	r3, [r5, #24]
 80048de:	b913      	cbnz	r3, 80048e6 <__swsetup_r+0x16>
 80048e0:	4628      	mov	r0, r5
 80048e2:	f000 f97d 	bl	8004be0 <__sinit>
 80048e6:	4b2e      	ldr	r3, [pc, #184]	; (80049a0 <__swsetup_r+0xd0>)
 80048e8:	429c      	cmp	r4, r3
 80048ea:	d10f      	bne.n	800490c <__swsetup_r+0x3c>
 80048ec:	686c      	ldr	r4, [r5, #4]
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048f4:	0719      	lsls	r1, r3, #28
 80048f6:	d42c      	bmi.n	8004952 <__swsetup_r+0x82>
 80048f8:	06dd      	lsls	r5, r3, #27
 80048fa:	d411      	bmi.n	8004920 <__swsetup_r+0x50>
 80048fc:	2309      	movs	r3, #9
 80048fe:	6033      	str	r3, [r6, #0]
 8004900:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800490a:	e03e      	b.n	800498a <__swsetup_r+0xba>
 800490c:	4b25      	ldr	r3, [pc, #148]	; (80049a4 <__swsetup_r+0xd4>)
 800490e:	429c      	cmp	r4, r3
 8004910:	d101      	bne.n	8004916 <__swsetup_r+0x46>
 8004912:	68ac      	ldr	r4, [r5, #8]
 8004914:	e7eb      	b.n	80048ee <__swsetup_r+0x1e>
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <__swsetup_r+0xd8>)
 8004918:	429c      	cmp	r4, r3
 800491a:	bf08      	it	eq
 800491c:	68ec      	ldreq	r4, [r5, #12]
 800491e:	e7e6      	b.n	80048ee <__swsetup_r+0x1e>
 8004920:	0758      	lsls	r0, r3, #29
 8004922:	d512      	bpl.n	800494a <__swsetup_r+0x7a>
 8004924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004926:	b141      	cbz	r1, 800493a <__swsetup_r+0x6a>
 8004928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800492c:	4299      	cmp	r1, r3
 800492e:	d002      	beq.n	8004936 <__swsetup_r+0x66>
 8004930:	4630      	mov	r0, r6
 8004932:	f000 fa59 	bl	8004de8 <_free_r>
 8004936:	2300      	movs	r3, #0
 8004938:	6363      	str	r3, [r4, #52]	; 0x34
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	2300      	movs	r3, #0
 8004944:	6063      	str	r3, [r4, #4]
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	f043 0308 	orr.w	r3, r3, #8
 8004950:	81a3      	strh	r3, [r4, #12]
 8004952:	6923      	ldr	r3, [r4, #16]
 8004954:	b94b      	cbnz	r3, 800496a <__swsetup_r+0x9a>
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800495c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004960:	d003      	beq.n	800496a <__swsetup_r+0x9a>
 8004962:	4621      	mov	r1, r4
 8004964:	4630      	mov	r0, r6
 8004966:	f000 f9ff 	bl	8004d68 <__smakebuf_r>
 800496a:	89a0      	ldrh	r0, [r4, #12]
 800496c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004970:	f010 0301 	ands.w	r3, r0, #1
 8004974:	d00a      	beq.n	800498c <__swsetup_r+0xbc>
 8004976:	2300      	movs	r3, #0
 8004978:	60a3      	str	r3, [r4, #8]
 800497a:	6963      	ldr	r3, [r4, #20]
 800497c:	425b      	negs	r3, r3
 800497e:	61a3      	str	r3, [r4, #24]
 8004980:	6923      	ldr	r3, [r4, #16]
 8004982:	b943      	cbnz	r3, 8004996 <__swsetup_r+0xc6>
 8004984:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004988:	d1ba      	bne.n	8004900 <__swsetup_r+0x30>
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	0781      	lsls	r1, r0, #30
 800498e:	bf58      	it	pl
 8004990:	6963      	ldrpl	r3, [r4, #20]
 8004992:	60a3      	str	r3, [r4, #8]
 8004994:	e7f4      	b.n	8004980 <__swsetup_r+0xb0>
 8004996:	2000      	movs	r0, #0
 8004998:	e7f7      	b.n	800498a <__swsetup_r+0xba>
 800499a:	bf00      	nop
 800499c:	2000000c 	.word	0x2000000c
 80049a0:	08005164 	.word	0x08005164
 80049a4:	08005184 	.word	0x08005184
 80049a8:	08005144 	.word	0x08005144

080049ac <__sflush_r>:
 80049ac:	898a      	ldrh	r2, [r1, #12]
 80049ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b2:	4605      	mov	r5, r0
 80049b4:	0710      	lsls	r0, r2, #28
 80049b6:	460c      	mov	r4, r1
 80049b8:	d458      	bmi.n	8004a6c <__sflush_r+0xc0>
 80049ba:	684b      	ldr	r3, [r1, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dc05      	bgt.n	80049cc <__sflush_r+0x20>
 80049c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	dc02      	bgt.n	80049cc <__sflush_r+0x20>
 80049c6:	2000      	movs	r0, #0
 80049c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049ce:	2e00      	cmp	r6, #0
 80049d0:	d0f9      	beq.n	80049c6 <__sflush_r+0x1a>
 80049d2:	2300      	movs	r3, #0
 80049d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049d8:	682f      	ldr	r7, [r5, #0]
 80049da:	602b      	str	r3, [r5, #0]
 80049dc:	d032      	beq.n	8004a44 <__sflush_r+0x98>
 80049de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	075a      	lsls	r2, r3, #29
 80049e4:	d505      	bpl.n	80049f2 <__sflush_r+0x46>
 80049e6:	6863      	ldr	r3, [r4, #4]
 80049e8:	1ac0      	subs	r0, r0, r3
 80049ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049ec:	b10b      	cbz	r3, 80049f2 <__sflush_r+0x46>
 80049ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049f0:	1ac0      	subs	r0, r0, r3
 80049f2:	2300      	movs	r3, #0
 80049f4:	4602      	mov	r2, r0
 80049f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049f8:	6a21      	ldr	r1, [r4, #32]
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b0      	blx	r6
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	d106      	bne.n	8004a12 <__sflush_r+0x66>
 8004a04:	6829      	ldr	r1, [r5, #0]
 8004a06:	291d      	cmp	r1, #29
 8004a08:	d82c      	bhi.n	8004a64 <__sflush_r+0xb8>
 8004a0a:	4a2a      	ldr	r2, [pc, #168]	; (8004ab4 <__sflush_r+0x108>)
 8004a0c:	40ca      	lsrs	r2, r1
 8004a0e:	07d6      	lsls	r6, r2, #31
 8004a10:	d528      	bpl.n	8004a64 <__sflush_r+0xb8>
 8004a12:	2200      	movs	r2, #0
 8004a14:	6062      	str	r2, [r4, #4]
 8004a16:	04d9      	lsls	r1, r3, #19
 8004a18:	6922      	ldr	r2, [r4, #16]
 8004a1a:	6022      	str	r2, [r4, #0]
 8004a1c:	d504      	bpl.n	8004a28 <__sflush_r+0x7c>
 8004a1e:	1c42      	adds	r2, r0, #1
 8004a20:	d101      	bne.n	8004a26 <__sflush_r+0x7a>
 8004a22:	682b      	ldr	r3, [r5, #0]
 8004a24:	b903      	cbnz	r3, 8004a28 <__sflush_r+0x7c>
 8004a26:	6560      	str	r0, [r4, #84]	; 0x54
 8004a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a2a:	602f      	str	r7, [r5, #0]
 8004a2c:	2900      	cmp	r1, #0
 8004a2e:	d0ca      	beq.n	80049c6 <__sflush_r+0x1a>
 8004a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a34:	4299      	cmp	r1, r3
 8004a36:	d002      	beq.n	8004a3e <__sflush_r+0x92>
 8004a38:	4628      	mov	r0, r5
 8004a3a:	f000 f9d5 	bl	8004de8 <_free_r>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	6360      	str	r0, [r4, #52]	; 0x34
 8004a42:	e7c1      	b.n	80049c8 <__sflush_r+0x1c>
 8004a44:	6a21      	ldr	r1, [r4, #32]
 8004a46:	2301      	movs	r3, #1
 8004a48:	4628      	mov	r0, r5
 8004a4a:	47b0      	blx	r6
 8004a4c:	1c41      	adds	r1, r0, #1
 8004a4e:	d1c7      	bne.n	80049e0 <__sflush_r+0x34>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0c4      	beq.n	80049e0 <__sflush_r+0x34>
 8004a56:	2b1d      	cmp	r3, #29
 8004a58:	d001      	beq.n	8004a5e <__sflush_r+0xb2>
 8004a5a:	2b16      	cmp	r3, #22
 8004a5c:	d101      	bne.n	8004a62 <__sflush_r+0xb6>
 8004a5e:	602f      	str	r7, [r5, #0]
 8004a60:	e7b1      	b.n	80049c6 <__sflush_r+0x1a>
 8004a62:	89a3      	ldrh	r3, [r4, #12]
 8004a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a68:	81a3      	strh	r3, [r4, #12]
 8004a6a:	e7ad      	b.n	80049c8 <__sflush_r+0x1c>
 8004a6c:	690f      	ldr	r7, [r1, #16]
 8004a6e:	2f00      	cmp	r7, #0
 8004a70:	d0a9      	beq.n	80049c6 <__sflush_r+0x1a>
 8004a72:	0793      	lsls	r3, r2, #30
 8004a74:	680e      	ldr	r6, [r1, #0]
 8004a76:	bf08      	it	eq
 8004a78:	694b      	ldreq	r3, [r1, #20]
 8004a7a:	600f      	str	r7, [r1, #0]
 8004a7c:	bf18      	it	ne
 8004a7e:	2300      	movne	r3, #0
 8004a80:	eba6 0807 	sub.w	r8, r6, r7
 8004a84:	608b      	str	r3, [r1, #8]
 8004a86:	f1b8 0f00 	cmp.w	r8, #0
 8004a8a:	dd9c      	ble.n	80049c6 <__sflush_r+0x1a>
 8004a8c:	6a21      	ldr	r1, [r4, #32]
 8004a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a90:	4643      	mov	r3, r8
 8004a92:	463a      	mov	r2, r7
 8004a94:	4628      	mov	r0, r5
 8004a96:	47b0      	blx	r6
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	dc06      	bgt.n	8004aaa <__sflush_r+0xfe>
 8004a9c:	89a3      	ldrh	r3, [r4, #12]
 8004a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa2:	81a3      	strh	r3, [r4, #12]
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004aa8:	e78e      	b.n	80049c8 <__sflush_r+0x1c>
 8004aaa:	4407      	add	r7, r0
 8004aac:	eba8 0800 	sub.w	r8, r8, r0
 8004ab0:	e7e9      	b.n	8004a86 <__sflush_r+0xda>
 8004ab2:	bf00      	nop
 8004ab4:	20400001 	.word	0x20400001

08004ab8 <_fflush_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	690b      	ldr	r3, [r1, #16]
 8004abc:	4605      	mov	r5, r0
 8004abe:	460c      	mov	r4, r1
 8004ac0:	b913      	cbnz	r3, 8004ac8 <_fflush_r+0x10>
 8004ac2:	2500      	movs	r5, #0
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	b118      	cbz	r0, 8004ad2 <_fflush_r+0x1a>
 8004aca:	6983      	ldr	r3, [r0, #24]
 8004acc:	b90b      	cbnz	r3, 8004ad2 <_fflush_r+0x1a>
 8004ace:	f000 f887 	bl	8004be0 <__sinit>
 8004ad2:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <_fflush_r+0x6c>)
 8004ad4:	429c      	cmp	r4, r3
 8004ad6:	d11b      	bne.n	8004b10 <_fflush_r+0x58>
 8004ad8:	686c      	ldr	r4, [r5, #4]
 8004ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0ef      	beq.n	8004ac2 <_fflush_r+0xa>
 8004ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ae4:	07d0      	lsls	r0, r2, #31
 8004ae6:	d404      	bmi.n	8004af2 <_fflush_r+0x3a>
 8004ae8:	0599      	lsls	r1, r3, #22
 8004aea:	d402      	bmi.n	8004af2 <_fflush_r+0x3a>
 8004aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aee:	f000 f915 	bl	8004d1c <__retarget_lock_acquire_recursive>
 8004af2:	4628      	mov	r0, r5
 8004af4:	4621      	mov	r1, r4
 8004af6:	f7ff ff59 	bl	80049ac <__sflush_r>
 8004afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004afc:	07da      	lsls	r2, r3, #31
 8004afe:	4605      	mov	r5, r0
 8004b00:	d4e0      	bmi.n	8004ac4 <_fflush_r+0xc>
 8004b02:	89a3      	ldrh	r3, [r4, #12]
 8004b04:	059b      	lsls	r3, r3, #22
 8004b06:	d4dd      	bmi.n	8004ac4 <_fflush_r+0xc>
 8004b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b0a:	f000 f908 	bl	8004d1e <__retarget_lock_release_recursive>
 8004b0e:	e7d9      	b.n	8004ac4 <_fflush_r+0xc>
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <_fflush_r+0x70>)
 8004b12:	429c      	cmp	r4, r3
 8004b14:	d101      	bne.n	8004b1a <_fflush_r+0x62>
 8004b16:	68ac      	ldr	r4, [r5, #8]
 8004b18:	e7df      	b.n	8004ada <_fflush_r+0x22>
 8004b1a:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <_fflush_r+0x74>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	bf08      	it	eq
 8004b20:	68ec      	ldreq	r4, [r5, #12]
 8004b22:	e7da      	b.n	8004ada <_fflush_r+0x22>
 8004b24:	08005164 	.word	0x08005164
 8004b28:	08005184 	.word	0x08005184
 8004b2c:	08005144 	.word	0x08005144

08004b30 <std>:
 8004b30:	2300      	movs	r3, #0
 8004b32:	b510      	push	{r4, lr}
 8004b34:	4604      	mov	r4, r0
 8004b36:	e9c0 3300 	strd	r3, r3, [r0]
 8004b3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b3e:	6083      	str	r3, [r0, #8]
 8004b40:	8181      	strh	r1, [r0, #12]
 8004b42:	6643      	str	r3, [r0, #100]	; 0x64
 8004b44:	81c2      	strh	r2, [r0, #14]
 8004b46:	6183      	str	r3, [r0, #24]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	305c      	adds	r0, #92	; 0x5c
 8004b4e:	f7ff fdef 	bl	8004730 <memset>
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <std+0x38>)
 8004b54:	6263      	str	r3, [r4, #36]	; 0x24
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <std+0x3c>)
 8004b58:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <std+0x40>)
 8004b5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <std+0x44>)
 8004b60:	6224      	str	r4, [r4, #32]
 8004b62:	6323      	str	r3, [r4, #48]	; 0x30
 8004b64:	bd10      	pop	{r4, pc}
 8004b66:	bf00      	nop
 8004b68:	08004f5d 	.word	0x08004f5d
 8004b6c:	08004f7f 	.word	0x08004f7f
 8004b70:	08004fb7 	.word	0x08004fb7
 8004b74:	08004fdb 	.word	0x08004fdb

08004b78 <_cleanup_r>:
 8004b78:	4901      	ldr	r1, [pc, #4]	; (8004b80 <_cleanup_r+0x8>)
 8004b7a:	f000 b8af 	b.w	8004cdc <_fwalk_reent>
 8004b7e:	bf00      	nop
 8004b80:	08004ab9 	.word	0x08004ab9

08004b84 <__sfmoreglue>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	1e4a      	subs	r2, r1, #1
 8004b88:	2568      	movs	r5, #104	; 0x68
 8004b8a:	4355      	muls	r5, r2
 8004b8c:	460e      	mov	r6, r1
 8004b8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b92:	f000 f979 	bl	8004e88 <_malloc_r>
 8004b96:	4604      	mov	r4, r0
 8004b98:	b140      	cbz	r0, 8004bac <__sfmoreglue+0x28>
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	e9c0 1600 	strd	r1, r6, [r0]
 8004ba0:	300c      	adds	r0, #12
 8004ba2:	60a0      	str	r0, [r4, #8]
 8004ba4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ba8:	f7ff fdc2 	bl	8004730 <memset>
 8004bac:	4620      	mov	r0, r4
 8004bae:	bd70      	pop	{r4, r5, r6, pc}

08004bb0 <__sfp_lock_acquire>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__sfp_lock_acquire+0x8>)
 8004bb2:	f000 b8b3 	b.w	8004d1c <__retarget_lock_acquire_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	2001386c 	.word	0x2001386c

08004bbc <__sfp_lock_release>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	; (8004bc4 <__sfp_lock_release+0x8>)
 8004bbe:	f000 b8ae 	b.w	8004d1e <__retarget_lock_release_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	2001386c 	.word	0x2001386c

08004bc8 <__sinit_lock_acquire>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	; (8004bd0 <__sinit_lock_acquire+0x8>)
 8004bca:	f000 b8a7 	b.w	8004d1c <__retarget_lock_acquire_recursive>
 8004bce:	bf00      	nop
 8004bd0:	20013867 	.word	0x20013867

08004bd4 <__sinit_lock_release>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	; (8004bdc <__sinit_lock_release+0x8>)
 8004bd6:	f000 b8a2 	b.w	8004d1e <__retarget_lock_release_recursive>
 8004bda:	bf00      	nop
 8004bdc:	20013867 	.word	0x20013867

08004be0 <__sinit>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4604      	mov	r4, r0
 8004be4:	f7ff fff0 	bl	8004bc8 <__sinit_lock_acquire>
 8004be8:	69a3      	ldr	r3, [r4, #24]
 8004bea:	b11b      	cbz	r3, 8004bf4 <__sinit+0x14>
 8004bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf0:	f7ff bff0 	b.w	8004bd4 <__sinit_lock_release>
 8004bf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004bf8:	6523      	str	r3, [r4, #80]	; 0x50
 8004bfa:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <__sinit+0x68>)
 8004bfc:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <__sinit+0x6c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c02:	42a3      	cmp	r3, r4
 8004c04:	bf04      	itt	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	61a3      	streq	r3, [r4, #24]
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f000 f820 	bl	8004c50 <__sfp>
 8004c10:	6060      	str	r0, [r4, #4]
 8004c12:	4620      	mov	r0, r4
 8004c14:	f000 f81c 	bl	8004c50 <__sfp>
 8004c18:	60a0      	str	r0, [r4, #8]
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f000 f818 	bl	8004c50 <__sfp>
 8004c20:	2200      	movs	r2, #0
 8004c22:	60e0      	str	r0, [r4, #12]
 8004c24:	2104      	movs	r1, #4
 8004c26:	6860      	ldr	r0, [r4, #4]
 8004c28:	f7ff ff82 	bl	8004b30 <std>
 8004c2c:	68a0      	ldr	r0, [r4, #8]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	2109      	movs	r1, #9
 8004c32:	f7ff ff7d 	bl	8004b30 <std>
 8004c36:	68e0      	ldr	r0, [r4, #12]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	2112      	movs	r1, #18
 8004c3c:	f7ff ff78 	bl	8004b30 <std>
 8004c40:	2301      	movs	r3, #1
 8004c42:	61a3      	str	r3, [r4, #24]
 8004c44:	e7d2      	b.n	8004bec <__sinit+0xc>
 8004c46:	bf00      	nop
 8004c48:	08005140 	.word	0x08005140
 8004c4c:	08004b79 	.word	0x08004b79

08004c50 <__sfp>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	4607      	mov	r7, r0
 8004c54:	f7ff ffac 	bl	8004bb0 <__sfp_lock_acquire>
 8004c58:	4b1e      	ldr	r3, [pc, #120]	; (8004cd4 <__sfp+0x84>)
 8004c5a:	681e      	ldr	r6, [r3, #0]
 8004c5c:	69b3      	ldr	r3, [r6, #24]
 8004c5e:	b913      	cbnz	r3, 8004c66 <__sfp+0x16>
 8004c60:	4630      	mov	r0, r6
 8004c62:	f7ff ffbd 	bl	8004be0 <__sinit>
 8004c66:	3648      	adds	r6, #72	; 0x48
 8004c68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	d503      	bpl.n	8004c78 <__sfp+0x28>
 8004c70:	6833      	ldr	r3, [r6, #0]
 8004c72:	b30b      	cbz	r3, 8004cb8 <__sfp+0x68>
 8004c74:	6836      	ldr	r6, [r6, #0]
 8004c76:	e7f7      	b.n	8004c68 <__sfp+0x18>
 8004c78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c7c:	b9d5      	cbnz	r5, 8004cb4 <__sfp+0x64>
 8004c7e:	4b16      	ldr	r3, [pc, #88]	; (8004cd8 <__sfp+0x88>)
 8004c80:	60e3      	str	r3, [r4, #12]
 8004c82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c86:	6665      	str	r5, [r4, #100]	; 0x64
 8004c88:	f000 f847 	bl	8004d1a <__retarget_lock_init_recursive>
 8004c8c:	f7ff ff96 	bl	8004bbc <__sfp_lock_release>
 8004c90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c98:	6025      	str	r5, [r4, #0]
 8004c9a:	61a5      	str	r5, [r4, #24]
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ca4:	f7ff fd44 	bl	8004730 <memset>
 8004ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb4:	3468      	adds	r4, #104	; 0x68
 8004cb6:	e7d9      	b.n	8004c6c <__sfp+0x1c>
 8004cb8:	2104      	movs	r1, #4
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f7ff ff62 	bl	8004b84 <__sfmoreglue>
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	6030      	str	r0, [r6, #0]
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d1d5      	bne.n	8004c74 <__sfp+0x24>
 8004cc8:	f7ff ff78 	bl	8004bbc <__sfp_lock_release>
 8004ccc:	230c      	movs	r3, #12
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	e7ee      	b.n	8004cb0 <__sfp+0x60>
 8004cd2:	bf00      	nop
 8004cd4:	08005140 	.word	0x08005140
 8004cd8:	ffff0001 	.word	0xffff0001

08004cdc <_fwalk_reent>:
 8004cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	4688      	mov	r8, r1
 8004ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ce8:	2700      	movs	r7, #0
 8004cea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cee:	f1b9 0901 	subs.w	r9, r9, #1
 8004cf2:	d505      	bpl.n	8004d00 <_fwalk_reent+0x24>
 8004cf4:	6824      	ldr	r4, [r4, #0]
 8004cf6:	2c00      	cmp	r4, #0
 8004cf8:	d1f7      	bne.n	8004cea <_fwalk_reent+0xe>
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d00:	89ab      	ldrh	r3, [r5, #12]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d907      	bls.n	8004d16 <_fwalk_reent+0x3a>
 8004d06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	d003      	beq.n	8004d16 <_fwalk_reent+0x3a>
 8004d0e:	4629      	mov	r1, r5
 8004d10:	4630      	mov	r0, r6
 8004d12:	47c0      	blx	r8
 8004d14:	4307      	orrs	r7, r0
 8004d16:	3568      	adds	r5, #104	; 0x68
 8004d18:	e7e9      	b.n	8004cee <_fwalk_reent+0x12>

08004d1a <__retarget_lock_init_recursive>:
 8004d1a:	4770      	bx	lr

08004d1c <__retarget_lock_acquire_recursive>:
 8004d1c:	4770      	bx	lr

08004d1e <__retarget_lock_release_recursive>:
 8004d1e:	4770      	bx	lr

08004d20 <__swhatbuf_r>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	460e      	mov	r6, r1
 8004d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d28:	2900      	cmp	r1, #0
 8004d2a:	b096      	sub	sp, #88	; 0x58
 8004d2c:	4614      	mov	r4, r2
 8004d2e:	461d      	mov	r5, r3
 8004d30:	da07      	bge.n	8004d42 <__swhatbuf_r+0x22>
 8004d32:	2300      	movs	r3, #0
 8004d34:	602b      	str	r3, [r5, #0]
 8004d36:	89b3      	ldrh	r3, [r6, #12]
 8004d38:	061a      	lsls	r2, r3, #24
 8004d3a:	d410      	bmi.n	8004d5e <__swhatbuf_r+0x3e>
 8004d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d40:	e00e      	b.n	8004d60 <__swhatbuf_r+0x40>
 8004d42:	466a      	mov	r2, sp
 8004d44:	f000 f970 	bl	8005028 <_fstat_r>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	dbf2      	blt.n	8004d32 <__swhatbuf_r+0x12>
 8004d4c:	9a01      	ldr	r2, [sp, #4]
 8004d4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d56:	425a      	negs	r2, r3
 8004d58:	415a      	adcs	r2, r3
 8004d5a:	602a      	str	r2, [r5, #0]
 8004d5c:	e7ee      	b.n	8004d3c <__swhatbuf_r+0x1c>
 8004d5e:	2340      	movs	r3, #64	; 0x40
 8004d60:	2000      	movs	r0, #0
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	b016      	add	sp, #88	; 0x58
 8004d66:	bd70      	pop	{r4, r5, r6, pc}

08004d68 <__smakebuf_r>:
 8004d68:	898b      	ldrh	r3, [r1, #12]
 8004d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d6c:	079d      	lsls	r5, r3, #30
 8004d6e:	4606      	mov	r6, r0
 8004d70:	460c      	mov	r4, r1
 8004d72:	d507      	bpl.n	8004d84 <__smakebuf_r+0x1c>
 8004d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d78:	6023      	str	r3, [r4, #0]
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	6163      	str	r3, [r4, #20]
 8004d80:	b002      	add	sp, #8
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	ab01      	add	r3, sp, #4
 8004d86:	466a      	mov	r2, sp
 8004d88:	f7ff ffca 	bl	8004d20 <__swhatbuf_r>
 8004d8c:	9900      	ldr	r1, [sp, #0]
 8004d8e:	4605      	mov	r5, r0
 8004d90:	4630      	mov	r0, r6
 8004d92:	f000 f879 	bl	8004e88 <_malloc_r>
 8004d96:	b948      	cbnz	r0, 8004dac <__smakebuf_r+0x44>
 8004d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d9c:	059a      	lsls	r2, r3, #22
 8004d9e:	d4ef      	bmi.n	8004d80 <__smakebuf_r+0x18>
 8004da0:	f023 0303 	bic.w	r3, r3, #3
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	e7e3      	b.n	8004d74 <__smakebuf_r+0xc>
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <__smakebuf_r+0x7c>)
 8004dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	6020      	str	r0, [r4, #0]
 8004db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db8:	81a3      	strh	r3, [r4, #12]
 8004dba:	9b00      	ldr	r3, [sp, #0]
 8004dbc:	6163      	str	r3, [r4, #20]
 8004dbe:	9b01      	ldr	r3, [sp, #4]
 8004dc0:	6120      	str	r0, [r4, #16]
 8004dc2:	b15b      	cbz	r3, 8004ddc <__smakebuf_r+0x74>
 8004dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f000 f93f 	bl	800504c <_isatty_r>
 8004dce:	b128      	cbz	r0, 8004ddc <__smakebuf_r+0x74>
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	81a3      	strh	r3, [r4, #12]
 8004ddc:	89a0      	ldrh	r0, [r4, #12]
 8004dde:	4305      	orrs	r5, r0
 8004de0:	81a5      	strh	r5, [r4, #12]
 8004de2:	e7cd      	b.n	8004d80 <__smakebuf_r+0x18>
 8004de4:	08004b79 	.word	0x08004b79

08004de8 <_free_r>:
 8004de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dea:	2900      	cmp	r1, #0
 8004dec:	d048      	beq.n	8004e80 <_free_r+0x98>
 8004dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004df2:	9001      	str	r0, [sp, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dfa:	bfb8      	it	lt
 8004dfc:	18e4      	addlt	r4, r4, r3
 8004dfe:	f000 f947 	bl	8005090 <__malloc_lock>
 8004e02:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <_free_r+0x9c>)
 8004e04:	9801      	ldr	r0, [sp, #4]
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	4615      	mov	r5, r2
 8004e0a:	b933      	cbnz	r3, 8004e1a <_free_r+0x32>
 8004e0c:	6063      	str	r3, [r4, #4]
 8004e0e:	6014      	str	r4, [r2, #0]
 8004e10:	b003      	add	sp, #12
 8004e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e16:	f000 b941 	b.w	800509c <__malloc_unlock>
 8004e1a:	42a3      	cmp	r3, r4
 8004e1c:	d90b      	bls.n	8004e36 <_free_r+0x4e>
 8004e1e:	6821      	ldr	r1, [r4, #0]
 8004e20:	1862      	adds	r2, r4, r1
 8004e22:	4293      	cmp	r3, r2
 8004e24:	bf04      	itt	eq
 8004e26:	681a      	ldreq	r2, [r3, #0]
 8004e28:	685b      	ldreq	r3, [r3, #4]
 8004e2a:	6063      	str	r3, [r4, #4]
 8004e2c:	bf04      	itt	eq
 8004e2e:	1852      	addeq	r2, r2, r1
 8004e30:	6022      	streq	r2, [r4, #0]
 8004e32:	602c      	str	r4, [r5, #0]
 8004e34:	e7ec      	b.n	8004e10 <_free_r+0x28>
 8004e36:	461a      	mov	r2, r3
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	b10b      	cbz	r3, 8004e40 <_free_r+0x58>
 8004e3c:	42a3      	cmp	r3, r4
 8004e3e:	d9fa      	bls.n	8004e36 <_free_r+0x4e>
 8004e40:	6811      	ldr	r1, [r2, #0]
 8004e42:	1855      	adds	r5, r2, r1
 8004e44:	42a5      	cmp	r5, r4
 8004e46:	d10b      	bne.n	8004e60 <_free_r+0x78>
 8004e48:	6824      	ldr	r4, [r4, #0]
 8004e4a:	4421      	add	r1, r4
 8004e4c:	1854      	adds	r4, r2, r1
 8004e4e:	42a3      	cmp	r3, r4
 8004e50:	6011      	str	r1, [r2, #0]
 8004e52:	d1dd      	bne.n	8004e10 <_free_r+0x28>
 8004e54:	681c      	ldr	r4, [r3, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	6053      	str	r3, [r2, #4]
 8004e5a:	4421      	add	r1, r4
 8004e5c:	6011      	str	r1, [r2, #0]
 8004e5e:	e7d7      	b.n	8004e10 <_free_r+0x28>
 8004e60:	d902      	bls.n	8004e68 <_free_r+0x80>
 8004e62:	230c      	movs	r3, #12
 8004e64:	6003      	str	r3, [r0, #0]
 8004e66:	e7d3      	b.n	8004e10 <_free_r+0x28>
 8004e68:	6825      	ldr	r5, [r4, #0]
 8004e6a:	1961      	adds	r1, r4, r5
 8004e6c:	428b      	cmp	r3, r1
 8004e6e:	bf04      	itt	eq
 8004e70:	6819      	ldreq	r1, [r3, #0]
 8004e72:	685b      	ldreq	r3, [r3, #4]
 8004e74:	6063      	str	r3, [r4, #4]
 8004e76:	bf04      	itt	eq
 8004e78:	1949      	addeq	r1, r1, r5
 8004e7a:	6021      	streq	r1, [r4, #0]
 8004e7c:	6054      	str	r4, [r2, #4]
 8004e7e:	e7c7      	b.n	8004e10 <_free_r+0x28>
 8004e80:	b003      	add	sp, #12
 8004e82:	bd30      	pop	{r4, r5, pc}
 8004e84:	20000090 	.word	0x20000090

08004e88 <_malloc_r>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	1ccd      	adds	r5, r1, #3
 8004e8c:	f025 0503 	bic.w	r5, r5, #3
 8004e90:	3508      	adds	r5, #8
 8004e92:	2d0c      	cmp	r5, #12
 8004e94:	bf38      	it	cc
 8004e96:	250c      	movcc	r5, #12
 8004e98:	2d00      	cmp	r5, #0
 8004e9a:	4606      	mov	r6, r0
 8004e9c:	db01      	blt.n	8004ea2 <_malloc_r+0x1a>
 8004e9e:	42a9      	cmp	r1, r5
 8004ea0:	d903      	bls.n	8004eaa <_malloc_r+0x22>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eaa:	f000 f8f1 	bl	8005090 <__malloc_lock>
 8004eae:	4921      	ldr	r1, [pc, #132]	; (8004f34 <_malloc_r+0xac>)
 8004eb0:	680a      	ldr	r2, [r1, #0]
 8004eb2:	4614      	mov	r4, r2
 8004eb4:	b99c      	cbnz	r4, 8004ede <_malloc_r+0x56>
 8004eb6:	4f20      	ldr	r7, [pc, #128]	; (8004f38 <_malloc_r+0xb0>)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	b923      	cbnz	r3, 8004ec6 <_malloc_r+0x3e>
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	4630      	mov	r0, r6
 8004ec0:	f000 f83c 	bl	8004f3c <_sbrk_r>
 8004ec4:	6038      	str	r0, [r7, #0]
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f000 f837 	bl	8004f3c <_sbrk_r>
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	d123      	bne.n	8004f1a <_malloc_r+0x92>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	6033      	str	r3, [r6, #0]
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f000 f8e0 	bl	800509c <__malloc_unlock>
 8004edc:	e7e3      	b.n	8004ea6 <_malloc_r+0x1e>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	1b5b      	subs	r3, r3, r5
 8004ee2:	d417      	bmi.n	8004f14 <_malloc_r+0x8c>
 8004ee4:	2b0b      	cmp	r3, #11
 8004ee6:	d903      	bls.n	8004ef0 <_malloc_r+0x68>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	441c      	add	r4, r3
 8004eec:	6025      	str	r5, [r4, #0]
 8004eee:	e004      	b.n	8004efa <_malloc_r+0x72>
 8004ef0:	6863      	ldr	r3, [r4, #4]
 8004ef2:	42a2      	cmp	r2, r4
 8004ef4:	bf0c      	ite	eq
 8004ef6:	600b      	streq	r3, [r1, #0]
 8004ef8:	6053      	strne	r3, [r2, #4]
 8004efa:	4630      	mov	r0, r6
 8004efc:	f000 f8ce 	bl	800509c <__malloc_unlock>
 8004f00:	f104 000b 	add.w	r0, r4, #11
 8004f04:	1d23      	adds	r3, r4, #4
 8004f06:	f020 0007 	bic.w	r0, r0, #7
 8004f0a:	1ac2      	subs	r2, r0, r3
 8004f0c:	d0cc      	beq.n	8004ea8 <_malloc_r+0x20>
 8004f0e:	1a1b      	subs	r3, r3, r0
 8004f10:	50a3      	str	r3, [r4, r2]
 8004f12:	e7c9      	b.n	8004ea8 <_malloc_r+0x20>
 8004f14:	4622      	mov	r2, r4
 8004f16:	6864      	ldr	r4, [r4, #4]
 8004f18:	e7cc      	b.n	8004eb4 <_malloc_r+0x2c>
 8004f1a:	1cc4      	adds	r4, r0, #3
 8004f1c:	f024 0403 	bic.w	r4, r4, #3
 8004f20:	42a0      	cmp	r0, r4
 8004f22:	d0e3      	beq.n	8004eec <_malloc_r+0x64>
 8004f24:	1a21      	subs	r1, r4, r0
 8004f26:	4630      	mov	r0, r6
 8004f28:	f000 f808 	bl	8004f3c <_sbrk_r>
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d1dd      	bne.n	8004eec <_malloc_r+0x64>
 8004f30:	e7cf      	b.n	8004ed2 <_malloc_r+0x4a>
 8004f32:	bf00      	nop
 8004f34:	20000090 	.word	0x20000090
 8004f38:	20000094 	.word	0x20000094

08004f3c <_sbrk_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d06      	ldr	r5, [pc, #24]	; (8004f58 <_sbrk_r+0x1c>)
 8004f40:	2300      	movs	r3, #0
 8004f42:	4604      	mov	r4, r0
 8004f44:	4608      	mov	r0, r1
 8004f46:	602b      	str	r3, [r5, #0]
 8004f48:	f7fb fe94 	bl	8000c74 <_sbrk>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_sbrk_r+0x1a>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_sbrk_r+0x1a>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	20013870 	.word	0x20013870

08004f5c <__sread>:
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	460c      	mov	r4, r1
 8004f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f64:	f000 f8a0 	bl	80050a8 <_read_r>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	bfab      	itete	ge
 8004f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f70:	181b      	addge	r3, r3, r0
 8004f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f76:	bfac      	ite	ge
 8004f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f7a:	81a3      	strhlt	r3, [r4, #12]
 8004f7c:	bd10      	pop	{r4, pc}

08004f7e <__swrite>:
 8004f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f82:	461f      	mov	r7, r3
 8004f84:	898b      	ldrh	r3, [r1, #12]
 8004f86:	05db      	lsls	r3, r3, #23
 8004f88:	4605      	mov	r5, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	d505      	bpl.n	8004f9c <__swrite+0x1e>
 8004f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f94:	2302      	movs	r3, #2
 8004f96:	2200      	movs	r2, #0
 8004f98:	f000 f868 	bl	800506c <_lseek_r>
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa6:	81a3      	strh	r3, [r4, #12]
 8004fa8:	4632      	mov	r2, r6
 8004faa:	463b      	mov	r3, r7
 8004fac:	4628      	mov	r0, r5
 8004fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb2:	f000 b817 	b.w	8004fe4 <_write_r>

08004fb6 <__sseek>:
 8004fb6:	b510      	push	{r4, lr}
 8004fb8:	460c      	mov	r4, r1
 8004fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbe:	f000 f855 	bl	800506c <_lseek_r>
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	bf15      	itete	ne
 8004fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fd2:	81a3      	strheq	r3, [r4, #12]
 8004fd4:	bf18      	it	ne
 8004fd6:	81a3      	strhne	r3, [r4, #12]
 8004fd8:	bd10      	pop	{r4, pc}

08004fda <__sclose>:
 8004fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fde:	f000 b813 	b.w	8005008 <_close_r>
	...

08004fe4 <_write_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d07      	ldr	r5, [pc, #28]	; (8005004 <_write_r+0x20>)
 8004fe8:	4604      	mov	r4, r0
 8004fea:	4608      	mov	r0, r1
 8004fec:	4611      	mov	r1, r2
 8004fee:	2200      	movs	r2, #0
 8004ff0:	602a      	str	r2, [r5, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f7fb fded 	bl	8000bd2 <_write>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d102      	bne.n	8005002 <_write_r+0x1e>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	b103      	cbz	r3, 8005002 <_write_r+0x1e>
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	20013870 	.word	0x20013870

08005008 <_close_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4d06      	ldr	r5, [pc, #24]	; (8005024 <_close_r+0x1c>)
 800500c:	2300      	movs	r3, #0
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	f7fb fdf9 	bl	8000c0a <_close>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_close_r+0x1a>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_close_r+0x1a>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	20013870 	.word	0x20013870

08005028 <_fstat_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4d07      	ldr	r5, [pc, #28]	; (8005048 <_fstat_r+0x20>)
 800502c:	2300      	movs	r3, #0
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	f7fb fdf4 	bl	8000c22 <_fstat>
 800503a:	1c43      	adds	r3, r0, #1
 800503c:	d102      	bne.n	8005044 <_fstat_r+0x1c>
 800503e:	682b      	ldr	r3, [r5, #0]
 8005040:	b103      	cbz	r3, 8005044 <_fstat_r+0x1c>
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	bd38      	pop	{r3, r4, r5, pc}
 8005046:	bf00      	nop
 8005048:	20013870 	.word	0x20013870

0800504c <_isatty_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d06      	ldr	r5, [pc, #24]	; (8005068 <_isatty_r+0x1c>)
 8005050:	2300      	movs	r3, #0
 8005052:	4604      	mov	r4, r0
 8005054:	4608      	mov	r0, r1
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	f7fb fdf3 	bl	8000c42 <_isatty>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_isatty_r+0x1a>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_isatty_r+0x1a>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20013870 	.word	0x20013870

0800506c <_lseek_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4d07      	ldr	r5, [pc, #28]	; (800508c <_lseek_r+0x20>)
 8005070:	4604      	mov	r4, r0
 8005072:	4608      	mov	r0, r1
 8005074:	4611      	mov	r1, r2
 8005076:	2200      	movs	r2, #0
 8005078:	602a      	str	r2, [r5, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	f7fb fdec 	bl	8000c58 <_lseek>
 8005080:	1c43      	adds	r3, r0, #1
 8005082:	d102      	bne.n	800508a <_lseek_r+0x1e>
 8005084:	682b      	ldr	r3, [r5, #0]
 8005086:	b103      	cbz	r3, 800508a <_lseek_r+0x1e>
 8005088:	6023      	str	r3, [r4, #0]
 800508a:	bd38      	pop	{r3, r4, r5, pc}
 800508c:	20013870 	.word	0x20013870

08005090 <__malloc_lock>:
 8005090:	4801      	ldr	r0, [pc, #4]	; (8005098 <__malloc_lock+0x8>)
 8005092:	f7ff be43 	b.w	8004d1c <__retarget_lock_acquire_recursive>
 8005096:	bf00      	nop
 8005098:	20013868 	.word	0x20013868

0800509c <__malloc_unlock>:
 800509c:	4801      	ldr	r0, [pc, #4]	; (80050a4 <__malloc_unlock+0x8>)
 800509e:	f7ff be3e 	b.w	8004d1e <__retarget_lock_release_recursive>
 80050a2:	bf00      	nop
 80050a4:	20013868 	.word	0x20013868

080050a8 <_read_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d07      	ldr	r5, [pc, #28]	; (80050c8 <_read_r+0x20>)
 80050ac:	4604      	mov	r4, r0
 80050ae:	4608      	mov	r0, r1
 80050b0:	4611      	mov	r1, r2
 80050b2:	2200      	movs	r2, #0
 80050b4:	602a      	str	r2, [r5, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	f7fb fd6e 	bl	8000b98 <_read>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d102      	bne.n	80050c6 <_read_r+0x1e>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	b103      	cbz	r3, 80050c6 <_read_r+0x1e>
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	20013870 	.word	0x20013870

080050cc <_init>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr

080050d8 <_fini>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr
