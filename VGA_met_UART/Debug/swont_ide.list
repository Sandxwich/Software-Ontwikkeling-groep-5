
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c444  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009d90  0800c5d8  0800c5d8  0001c5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016368  08016368  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08016368  08016368  00026368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016370  08016370  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016370  08016370  00026370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016374  08016374  00026374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08016378  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013700  20000088  08016400  00030088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013788  08016400  00033788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001808c  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003984  00000000  00000000  00048144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0004bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0004cea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c14  00000000  00000000  0004e0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9cc  00000000  00000000  00074ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1647  00000000  00000000  000926b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00163cf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f30  00000000  00000000  00163d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5bc 	.word	0x0800c5bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c5bc 	.word	0x0800c5bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <API_draw_line>:
 * @param color: kleur van de tekst
 *
 *****************************************************************************/

int API_draw_line(uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint8_t dikte, uint8_t color)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b08d      	sub	sp, #52	; 0x34
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4623      	mov	r3, r4
 8000f7c:	80fb      	strh	r3, [r7, #6]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80bb      	strh	r3, [r7, #4]
 8000f82:	460b      	mov	r3, r1
 8000f84:	807b      	strh	r3, [r7, #2]
 8000f86:	4613      	mov	r3, r2
 8000f88:	803b      	strh	r3, [r7, #0]
	int error = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
	int dx = x_2 - x_1;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	617b      	str	r3, [r7, #20]
	int dy = y_2 - y_1;
 8000f96:	883a      	ldrh	r2, [r7, #0]
 8000f98:	88bb      	ldrh	r3, [r7, #4]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	613b      	str	r3, [r7, #16]
	int steps;
	if(dx>dy)
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dd05      	ble.n	8000fb2 <API_draw_line+0x46>
	{
		steps = abs(dx);
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bfb8      	it	lt
 8000fac:	425b      	neglt	r3, r3
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb0:	e023      	b.n	8000ffa <API_draw_line+0x8e>
	}
	else if(dy>dx)
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dd05      	ble.n	8000fc6 <API_draw_line+0x5a>
	{
		steps = abs(dy);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	bfb8      	it	lt
 8000fc0:	425b      	neglt	r3, r3
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fc4:	e019      	b.n	8000ffa <API_draw_line+0x8e>
	}
	else if (dx == dy)
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d105      	bne.n	8000fda <API_draw_line+0x6e>
	{
		steps = abs(dy);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bfb8      	it	lt
 8000fd4:	425b      	neglt	r3, r3
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fd8:	e00f      	b.n	8000ffa <API_draw_line+0x8e>
	}
	else if(abs(dx)==abs(dy))
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000fe0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bfb8      	it	lt
 8000fea:	425b      	neglt	r3, r3
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d104      	bne.n	8000ffa <API_draw_line+0x8e>
		steps = abs(dy);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bfb8      	it	lt
 8000ff6:	425b      	neglt	r3, r3
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
	float xIncrement = (float) dx / steps;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	ee07 3a90 	vmov	s15, r3
 8001000:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800100e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001012:	edc7 7a03 	vstr	s15, [r7, #12]
	float yIncrement = (float) dy / steps;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102e:	edc7 7a02 	vstr	s15, [r7, #8]
	int i;

	// Set the pixels along the center line of the given thickness
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8001032:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001036:	085b      	lsrs	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	425b      	negs	r3, r3
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
 800103e:	e053      	b.n	80010e8 <API_draw_line+0x17c>
		float x = x_1 + 0.5;
 8001040:	88fb      	ldrh	r3, [r7, #6]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa7e 	bl	8000544 <__aeabi_i2d>
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <API_draw_line+0x198>)
 800104e:	f7ff f92d 	bl	80002ac <__adddf3>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fdb5 	bl	8000bc8 <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
		float y = y_1 + i + 0.5;
 8001062:	88ba      	ldrh	r2, [r7, #4]
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001066:	4413      	add	r3, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa6b 	bl	8000544 <__aeabi_i2d>
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	4b24      	ldr	r3, [pc, #144]	; (8001104 <API_draw_line+0x198>)
 8001074:	f7ff f91a 	bl	80002ac <__adddf3>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4610      	mov	r0, r2
 800107e:	4619      	mov	r1, r3
 8001080:	f7ff fda2 	bl	8000bc8 <__aeabi_d2f>
 8001084:	4603      	mov	r3, r0
 8001086:	623b      	str	r3, [r7, #32]
		int j;
		for (j = 0; j < steps; j++) {
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	e025      	b.n	80010da <API_draw_line+0x16e>
			UB_VGA_SetPixel(x, y, color);
 800108e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001096:	ee17 3a90 	vmov	r3, s15
 800109a:	b29b      	uxth	r3, r3
 800109c:	edd7 7a08 	vldr	s15, [r7, #32]
 80010a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a4:	ee17 2a90 	vmov	r2, s15
 80010a8:	b291      	uxth	r1, r2
 80010aa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80010ae:	4618      	mov	r0, r3
 80010b0:	f002 fae4 	bl	800367c <UB_VGA_SetPixel>
			x += xIncrement;
 80010b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			y += yIncrement;
 80010c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80010c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d0:	edc7 7a08 	vstr	s15, [r7, #32]
		for (j = 0; j < steps; j++) {
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	3301      	adds	r3, #1
 80010d8:	61fb      	str	r3, [r7, #28]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010de:	429a      	cmp	r2, r3
 80010e0:	dbd5      	blt.n	800108e <API_draw_line+0x122>
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 80010e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e4:	3301      	adds	r3, #1
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80010ec:	085b      	lsrs	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dda3      	ble.n	8001040 <API_draw_line+0xd4>
		}
	}
	return error;
 80010f8:	69bb      	ldr	r3, [r7, #24]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3734      	adds	r7, #52	; 0x34
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd90      	pop	{r4, r7, pc}
 8001102:	bf00      	nop
 8001104:	3fe00000 	.word	0x3fe00000

08001108 <API_draw_rectangle>:


 *************************************************************************/

int API_draw_rectangle(uint16_t x_lup, uint16_t y_lup, uint16_t breedte, uint16_t hoogte, uint8_t color, uint8_t gevuld)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	4604      	mov	r4, r0
 8001110:	4608      	mov	r0, r1
 8001112:	4611      	mov	r1, r2
 8001114:	461a      	mov	r2, r3
 8001116:	4623      	mov	r3, r4
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	4603      	mov	r3, r0
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	807b      	strh	r3, [r7, #2]
 8001122:	4613      	mov	r3, r2
 8001124:	803b      	strh	r3, [r7, #0]
	int xp = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
	int yp = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]

	//draw lines along screen every y-value
	if(gevuld == 1)
 800112e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001132:	2b01      	cmp	r3, #1
 8001134:	d121      	bne.n	800117a <API_draw_rectangle+0x72>
	{
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	e017      	b.n	800116c <API_draw_rectangle+0x64>
		{
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e00b      	b.n	800115a <API_draw_rectangle+0x52>
			{
				UB_VGA_SetPixel(xp, yp, color);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	b29b      	uxth	r3, r3
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	b291      	uxth	r1, r2
 800114a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800114e:	4618      	mov	r0, r3
 8001150:	f002 fa94 	bl	800367c <UB_VGA_SetPixel>
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3301      	adds	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	887b      	ldrh	r3, [r7, #2]
 800115e:	4413      	add	r3, r2
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	429a      	cmp	r2, r3
 8001164:	dbed      	blt.n	8001142 <API_draw_rectangle+0x3a>
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	3301      	adds	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	88ba      	ldrh	r2, [r7, #4]
 800116e:	883b      	ldrh	r3, [r7, #0]
 8001170:	4413      	add	r3, r2
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	429a      	cmp	r2, r3
 8001176:	dbe1      	blt.n	800113c <API_draw_rectangle+0x34>
 8001178:	e042      	b.n	8001200 <API_draw_rectangle+0xf8>
			}
		}
	}

	else if(gevuld == 0)
 800117a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800117e:	2b00      	cmp	r3, #0
 8001180:	d13e      	bne.n	8001200 <API_draw_rectangle+0xf8>
	{

			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 8001182:	88bb      	ldrh	r3, [r7, #4]
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	e035      	b.n	80011f4 <API_draw_rectangle+0xec>
			{
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e029      	b.n	80011e2 <API_draw_rectangle+0xda>
				{
					//draw lines along screen every y-value
					if ((yp == y_lup) || (yp == (y_lup + hoogte)))
 800118e:	88bb      	ldrh	r3, [r7, #4]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	429a      	cmp	r2, r3
 8001194:	d005      	beq.n	80011a2 <API_draw_rectangle+0x9a>
 8001196:	88ba      	ldrh	r2, [r7, #4]
 8001198:	883b      	ldrh	r3, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d109      	bne.n	80011b6 <API_draw_rectangle+0xae>
					{
						UB_VGA_SetPixel(xp, yp, color);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	b291      	uxth	r1, r2
 80011aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fa64 	bl	800367c <UB_VGA_SetPixel>
 80011b4:	e012      	b.n	80011dc <API_draw_rectangle+0xd4>
					}

					//Draw pixels along screen only at edges
					else if((xp == x_lup) || (xp == (x_lup + breedte)))
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d005      	beq.n	80011ca <API_draw_rectangle+0xc2>
 80011be:	88fa      	ldrh	r2, [r7, #6]
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	4413      	add	r3, r2
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d108      	bne.n	80011dc <API_draw_rectangle+0xd4>
					{
						UB_VGA_SetPixel(xp, yp, color);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	b291      	uxth	r1, r2
 80011d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fa50 	bl	800367c <UB_VGA_SetPixel>
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	88fa      	ldrh	r2, [r7, #6]
 80011e4:	887b      	ldrh	r3, [r7, #2]
 80011e6:	4413      	add	r3, r2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	ddcf      	ble.n	800118e <API_draw_rectangle+0x86>
			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3301      	adds	r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	88ba      	ldrh	r2, [r7, #4]
 80011f6:	883b      	ldrh	r3, [r7, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	ddc3      	ble.n	8001188 <API_draw_rectangle+0x80>
					}
				}
			}
	}
	return 0;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	0000      	movs	r0, r0
 800120c:	0000      	movs	r0, r0
	...

08001210 <API_draw_circle>:


 *************************************************************************/

int API_draw_circle(uint16_t x_c, uint16_t y_c, uint16_t radius, uint8_t color)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	4604      	mov	r4, r0
 8001218:	4608      	mov	r0, r1
 800121a:	4611      	mov	r1, r2
 800121c:	461a      	mov	r2, r3
 800121e:	4623      	mov	r3, r4
 8001220:	80fb      	strh	r3, [r7, #6]
 8001222:	4603      	mov	r3, r0
 8001224:	80bb      	strh	r3, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	807b      	strh	r3, [r7, #2]
 800122a:	4613      	mov	r3, r2
 800122c:	707b      	strb	r3, [r7, #1]
    int i;
    int j;
    int rads;
    int rad = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]


    for (j = -radius; j <= radius; j++)
 8001232:	887b      	ldrh	r3, [r7, #2]
 8001234:	425b      	negs	r3, r3
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	e056      	b.n	80012e8 <API_draw_circle+0xd8>
    {
        for (i = -radius; i <= radius; i++)
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	425b      	negs	r3, r3
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e04b      	b.n	80012da <API_draw_circle+0xca>
        {
            rads = (pow(i, 2) + pow(j, 2));
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff f97e 	bl	8000544 <__aeabi_i2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8001300 <API_draw_circle+0xf0>
 8001250:	ec43 2b10 	vmov	d0, r2, r3
 8001254:	f00a fa6c 	bl	800b730 <pow>
 8001258:	ec55 4b10 	vmov	r4, r5, d0
 800125c:	6938      	ldr	r0, [r7, #16]
 800125e:	f7ff f971 	bl	8000544 <__aeabi_i2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8001300 <API_draw_circle+0xf0>
 800126a:	ec43 2b10 	vmov	d0, r2, r3
 800126e:	f00a fa5f 	bl	800b730 <pow>
 8001272:	ec53 2b10 	vmov	r2, r3, d0
 8001276:	4620      	mov	r0, r4
 8001278:	4629      	mov	r1, r5
 800127a:	f7ff f817 	bl	80002ac <__adddf3>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fc77 	bl	8000b78 <__aeabi_d2iz>
 800128a:	4603      	mov	r3, r0
 800128c:	60bb      	str	r3, [r7, #8]
            rad = sqrt(rads);
 800128e:	68b8      	ldr	r0, [r7, #8]
 8001290:	f7ff f958 	bl	8000544 <__aeabi_i2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	ec43 2b10 	vmov	d0, r2, r3
 800129c:	f00a fab8 	bl	800b810 <sqrt>
 80012a0:	ec53 2b10 	vmov	r2, r3, d0
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fc66 	bl	8000b78 <__aeabi_d2iz>
 80012ac:	4603      	mov	r3, r0
 80012ae:	60fb      	str	r3, [r7, #12]

            if (rad == radius)
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d10d      	bne.n	80012d4 <API_draw_circle+0xc4>
            {
                UB_VGA_SetPixel((x_c + i), (y_c + j), color);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	4413      	add	r3, r2
 80012c0:	b298      	uxth	r0, r3
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	787a      	ldrb	r2, [r7, #1]
 80012ce:	4619      	mov	r1, r3
 80012d0:	f002 f9d4 	bl	800367c <UB_VGA_SetPixel>
        for (i = -radius; i <= radius; i++)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	429a      	cmp	r2, r3
 80012e0:	ddaf      	ble.n	8001242 <API_draw_circle+0x32>
    for (j = -radius; j <= radius; j++)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	3301      	adds	r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	887b      	ldrh	r3, [r7, #2]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dda4      	ble.n	800123a <API_draw_circle+0x2a>
            }
        }
    }

}
 80012f0:	bf00      	nop
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	00000000 	.word	0x00000000
 8001304:	40000000 	.word	0x40000000

08001308 <API_draw_text>:
 * @param fontgroote: de size van de tekst [1,2]
 * @param fontstijl: de stijl waarin de tekst geprint word [normaal, cursief, vet]
 *
 *****************************************************************************/
int API_draw_text(uint16_t x, uint16_t y, uint8_t kleur, char* tekst, char* fontnaam,uint8_t fontgrootte,char* fontstijl)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b08d      	sub	sp, #52	; 0x34
 800130c:	af04      	add	r7, sp, #16
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	4603      	mov	r3, r0
 8001312:	81fb      	strh	r3, [r7, #14]
 8001314:	460b      	mov	r3, r1
 8001316:	81bb      	strh	r3, [r7, #12]
 8001318:	4613      	mov	r3, r2
 800131a:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint16_t xd = x;
 800131c:	89fb      	ldrh	r3, [r7, #14]
 800131e:	83bb      	strh	r3, [r7, #28]
	uint16_t yd = y;
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	837b      	strh	r3, [r7, #26]
	uint16_t* cord_p;
	unsigned char letter_style;
	if(strcmp(fontnaam, "arial")  == 0)
 8001324:	4952      	ldr	r1, [pc, #328]	; (8001470 <API_draw_text+0x168>)
 8001326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001328:	f7fe ff52 	bl	80001d0 <strcmp>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <API_draw_text+0x30>
	{
		letter_style = ARIAL;
 8001332:	2301      	movs	r3, #1
 8001334:	74fb      	strb	r3, [r7, #19]
 8001336:	e00e      	b.n	8001356 <API_draw_text+0x4e>
	}
	else if(strcmp(fontnaam, "consolas")  == 0)
 8001338:	494e      	ldr	r1, [pc, #312]	; (8001474 <API_draw_text+0x16c>)
 800133a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800133c:	f7fe ff48 	bl	80001d0 <strcmp>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <API_draw_text+0x44>
	{
		letter_style = CONSOLAS;
 8001346:	2302      	movs	r3, #2
 8001348:	74fb      	strb	r3, [r7, #19]
 800134a:	e004      	b.n	8001356 <API_draw_text+0x4e>
	}
	else
	{
		API_err_handler(UNKNOWN_FONT);
 800134c:	2008      	movs	r0, #8
 800134e:	f000 fdad 	bl	8001eac <API_err_handler>
		return 0;
 8001352:	2300      	movs	r3, #0
 8001354:	e088      	b.n	8001468 <API_draw_text+0x160>
	}
	for(i = 0; tekst[i] != '\0'; i++)
 8001356:	2300      	movs	r3, #0
 8001358:	77fb      	strb	r3, [r7, #31]
 800135a:	e07d      	b.n	8001458 <API_draw_text+0x150>
	{
		if(tekst[i] < ASCII_START ||tekst[i] > 127)
 800135c:	7ffb      	ldrb	r3, [r7, #31]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b1f      	cmp	r3, #31
 8001366:	d906      	bls.n	8001376 <API_draw_text+0x6e>
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	da04      	bge.n	8001380 <API_draw_text+0x78>
		{
			API_err_handler(NOT_VALID_CHAR);
 8001376:	2010      	movs	r0, #16
 8001378:	f000 fd98 	bl	8001eac <API_err_handler>
			return 0;
 800137c:	2300      	movs	r3, #0
 800137e:	e073      	b.n	8001468 <API_draw_text+0x160>
		}
		switch(fontstijl[0])
 8001380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b76      	cmp	r3, #118	; 0x76
 8001386:	d023      	beq.n	80013d0 <API_draw_text+0xc8>
 8001388:	2b76      	cmp	r3, #118	; 0x76
 800138a:	dc5d      	bgt.n	8001448 <API_draw_text+0x140>
 800138c:	2b63      	cmp	r3, #99	; 0x63
 800138e:	d03d      	beq.n	800140c <API_draw_text+0x104>
 8001390:	2b6e      	cmp	r3, #110	; 0x6e
 8001392:	d159      	bne.n	8001448 <API_draw_text+0x140>
		{
		case 'n':
			cord_p = draw_normal_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	7818      	ldrb	r0, [r3, #0]
 800139c:	8b7c      	ldrh	r4, [r7, #26]
 800139e:	8bba      	ldrh	r2, [r7, #28]
 80013a0:	7cf9      	ldrb	r1, [r7, #19]
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	7afb      	ldrb	r3, [r7, #11]
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	4623      	mov	r3, r4
 80013b2:	f000 f861 	bl	8001478 <draw_normal_letter>
 80013b6:	6178      	str	r0, [r7, #20]
			if(cord_p == 0)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <API_draw_text+0xba>
				return 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	e052      	b.n	8001468 <API_draw_text+0x160>
			xd = cord_p[0];
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	83bb      	strh	r3, [r7, #28]
			yd = cord_p[1];
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	885b      	ldrh	r3, [r3, #2]
 80013cc:	837b      	strh	r3, [r7, #26]
			break;
 80013ce:	e040      	b.n	8001452 <API_draw_text+0x14a>
		case 'v':
			cord_p = draw_fat_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	7818      	ldrb	r0, [r3, #0]
 80013d8:	8b7c      	ldrh	r4, [r7, #26]
 80013da:	8bba      	ldrh	r2, [r7, #28]
 80013dc:	7cf9      	ldrb	r1, [r7, #19]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	7afb      	ldrb	r3, [r7, #11]
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4623      	mov	r3, r4
 80013ee:	f000 fa5d 	bl	80018ac <draw_fat_letter>
 80013f2:	6178      	str	r0, [r7, #20]
			if(cord_p == 0)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <API_draw_text+0xf6>
				return 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e034      	b.n	8001468 <API_draw_text+0x160>
			xd = cord_p[0];
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	83bb      	strh	r3, [r7, #28]
			yd = cord_p[1];
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	885b      	ldrh	r3, [r3, #2]
 8001408:	837b      	strh	r3, [r7, #26]
			break;
 800140a:	e022      	b.n	8001452 <API_draw_text+0x14a>
		case 'c':
			cord_p = draw_cursive_letter(tekst[i], letter_style, xd, yd, fontgrootte, kleur, cord_p);
 800140c:	7ffb      	ldrb	r3, [r7, #31]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	7818      	ldrb	r0, [r3, #0]
 8001414:	8b7c      	ldrh	r4, [r7, #26]
 8001416:	8bba      	ldrh	r2, [r7, #28]
 8001418:	7cf9      	ldrb	r1, [r7, #19]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	7afb      	ldrb	r3, [r7, #11]
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	4623      	mov	r3, r4
 800142a:	f000 f929 	bl	8001680 <draw_cursive_letter>
 800142e:	6178      	str	r0, [r7, #20]
			if(cord_p == 0)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <API_draw_text+0x132>
				return 0;
 8001436:	2300      	movs	r3, #0
 8001438:	e016      	b.n	8001468 <API_draw_text+0x160>
			xd = cord_p[0];
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	83bb      	strh	r3, [r7, #28]
			yd = cord_p[1];
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	885b      	ldrh	r3, [r3, #2]
 8001444:	837b      	strh	r3, [r7, #26]
			break;
 8001446:	e004      	b.n	8001452 <API_draw_text+0x14a>
		default:
			API_err_handler(UNKNOWN_FONT_STYLE);
 8001448:	200a      	movs	r0, #10
 800144a:	f000 fd2f 	bl	8001eac <API_err_handler>
			return 0;
 800144e:	2300      	movs	r3, #0
 8001450:	e00a      	b.n	8001468 <API_draw_text+0x160>
	for(i = 0; tekst[i] != '\0'; i++)
 8001452:	7ffb      	ldrb	r3, [r7, #31]
 8001454:	3301      	adds	r3, #1
 8001456:	77fb      	strb	r3, [r7, #31]
 8001458:	7ffb      	ldrb	r3, [r7, #31]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	f47f af7b 	bne.w	800135c <API_draw_text+0x54>
			break;
		}
	}
	return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3724      	adds	r7, #36	; 0x24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	0800c5d8 	.word	0x0800c5d8
 8001474:	0800c5e0 	.word	0x0800c5e0

08001478 <draw_normal_letter>:
 *
 * @return Returns the last coordinates that the letter was printed
 *
 *****************************************************************************/
uint16_t * draw_normal_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b08d      	sub	sp, #52	; 0x34
 800147c:	af00      	add	r7, sp, #0
 800147e:	4604      	mov	r4, r0
 8001480:	4608      	mov	r0, r1
 8001482:	4611      	mov	r1, r2
 8001484:	461a      	mov	r2, r3
 8001486:	4623      	mov	r3, r4
 8001488:	71fb      	strb	r3, [r7, #7]
 800148a:	4603      	mov	r3, r0
 800148c:	71bb      	strb	r3, [r7, #6]
 800148e:	460b      	mov	r3, r1
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	807b      	strh	r3, [r7, #2]
    uint16_t end_cords[2];
    uint16_t begin_x = xd;
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	85fb      	strh	r3, [r7, #46]	; 0x2e
    int y_counter;
    int width;
    const uint8_t* glyph;
    int start_letter;
	uint8_t bitmap_height;
	if(letter_type == ARIAL)
 800149a:	79bb      	ldrb	r3, [r7, #6]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d134      	bne.n	800150a <draw_normal_letter+0x92>
	{
		if(fontgrootte == SIZE_1)
 80014a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d113      	bne.n	80014d0 <draw_normal_letter+0x58>
		{
			start_letter= arial_24_glyph_dsc[letter-ASCII_START][1];
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	3b20      	subs	r3, #32
 80014ac:	4a6c      	ldr	r2, [pc, #432]	; (8001660 <draw_normal_letter+0x1e8>)
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	4413      	add	r3, r2
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	613b      	str	r3, [r7, #16]
			glyph = &arial_24_glyph_bitmap[start_letter];
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4a6a      	ldr	r2, [pc, #424]	; (8001664 <draw_normal_letter+0x1ec>)
 80014ba:	4413      	add	r3, r2
 80014bc:	61fb      	str	r3, [r7, #28]
			width = arial_24_glyph_dsc[letter-ASCII_START][0];
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	3b20      	subs	r3, #32
 80014c2:	4a67      	ldr	r2, [pc, #412]	; (8001660 <draw_normal_letter+0x1e8>)
 80014c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014c8:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 80014ca:	2318      	movs	r3, #24
 80014cc:	76fb      	strb	r3, [r7, #27]
 80014ce:	e054      	b.n	800157a <draw_normal_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 80014d0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d113      	bne.n	8001500 <draw_normal_letter+0x88>
		{
			start_letter= arial_glyph_dsc[letter-32][1];
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	3b20      	subs	r3, #32
 80014dc:	4a62      	ldr	r2, [pc, #392]	; (8001668 <draw_normal_letter+0x1f0>)
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
			glyph = &arial_glyph_bitmap[start_letter];
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4a60      	ldr	r2, [pc, #384]	; (800166c <draw_normal_letter+0x1f4>)
 80014ea:	4413      	add	r3, r2
 80014ec:	61fb      	str	r3, [r7, #28]
			width = arial_glyph_dsc[letter-32][0];
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	3b20      	subs	r3, #32
 80014f2:	4a5d      	ldr	r2, [pc, #372]	; (8001668 <draw_normal_letter+0x1f0>)
 80014f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80014f8:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 80014fa:	2330      	movs	r3, #48	; 0x30
 80014fc:	76fb      	strb	r3, [r7, #27]
 80014fe:	e03c      	b.n	800157a <draw_normal_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 8001500:	2009      	movs	r0, #9
 8001502:	f000 fcd3 	bl	8001eac <API_err_handler>
			return 0;
 8001506:	2300      	movs	r3, #0
 8001508:	e0a5      	b.n	8001656 <draw_normal_letter+0x1de>
		}
	}
	else if(letter_type == CONSOLAS)
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d134      	bne.n	800157a <draw_normal_letter+0x102>
	{
		if(fontgrootte == SIZE_1)
 8001510:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001514:	2b01      	cmp	r3, #1
 8001516:	d113      	bne.n	8001540 <draw_normal_letter+0xc8>
		{
			start_letter= consolas_24_glyph_dsc[letter-32][1];
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	3b20      	subs	r3, #32
 800151c:	4a54      	ldr	r2, [pc, #336]	; (8001670 <draw_normal_letter+0x1f8>)
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	613b      	str	r3, [r7, #16]
			glyph = &consolas_24_glyph_bitmap[start_letter];
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4a52      	ldr	r2, [pc, #328]	; (8001674 <draw_normal_letter+0x1fc>)
 800152a:	4413      	add	r3, r2
 800152c:	61fb      	str	r3, [r7, #28]
			width = consolas_24_glyph_dsc[letter-32][0];
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3b20      	subs	r3, #32
 8001532:	4a4f      	ldr	r2, [pc, #316]	; (8001670 <draw_normal_letter+0x1f8>)
 8001534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001538:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 800153a:	2318      	movs	r3, #24
 800153c:	76fb      	strb	r3, [r7, #27]
 800153e:	e01c      	b.n	800157a <draw_normal_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 8001540:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001544:	2b02      	cmp	r3, #2
 8001546:	d113      	bne.n	8001570 <draw_normal_letter+0xf8>
		{
			start_letter= consolas_glyph_dsc[letter-32][1];
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	3b20      	subs	r3, #32
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <draw_normal_letter+0x200>)
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	4413      	add	r3, r2
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	613b      	str	r3, [r7, #16]
			glyph = &consolas_glyph_bitmap[start_letter];
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4a48      	ldr	r2, [pc, #288]	; (800167c <draw_normal_letter+0x204>)
 800155a:	4413      	add	r3, r2
 800155c:	61fb      	str	r3, [r7, #28]
			width = consolas_glyph_dsc[letter-32][0];
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	3b20      	subs	r3, #32
 8001562:	4a45      	ldr	r2, [pc, #276]	; (8001678 <draw_normal_letter+0x200>)
 8001564:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001568:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 800156a:	2330      	movs	r3, #48	; 0x30
 800156c:	76fb      	strb	r3, [r7, #27]
 800156e:	e004      	b.n	800157a <draw_normal_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 8001570:	2009      	movs	r0, #9
 8001572:	f000 fc9b 	bl	8001eac <API_err_handler>
			return 0;
 8001576:	2300      	movs	r3, #0
 8001578:	e06d      	b.n	8001656 <draw_normal_letter+0x1de>
		}
	}
	if(xd+width >= VGA_DISPLAY_X)
 800157a:	88ba      	ldrh	r2, [r7, #4]
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	4413      	add	r3, r2
 8001580:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001584:	db06      	blt.n	8001594 <draw_normal_letter+0x11c>
	{
		yd+=bitmap_height;
 8001586:	7efb      	ldrb	r3, [r7, #27]
 8001588:	b29a      	uxth	r2, r3
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	4413      	add	r3, r2
 800158e:	807b      	strh	r3, [r7, #2]
		begin_x=5;//sets x value to the left +5 pixels
 8001590:	2305      	movs	r3, #5
 8001592:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
	if(yd >= VGA_DISPLAY_Y)
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	2bef      	cmp	r3, #239	; 0xef
 8001598:	d904      	bls.n	80015a4 <draw_normal_letter+0x12c>
	{
		API_err_handler(Y_TO_HIGH);
 800159a:	200c      	movs	r0, #12
 800159c:	f000 fc86 	bl	8001eac <API_err_handler>
		return 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e058      	b.n	8001656 <draw_normal_letter+0x1de>
	}
    if(width%8)
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <draw_normal_letter+0x13c>
    	width += 8;
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	3308      	adds	r3, #8
 80015b2:	623b      	str	r3, [r7, #32]
    width = (width/8);
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	da00      	bge.n	80015bc <draw_normal_letter+0x144>
 80015ba:	3307      	adds	r3, #7
 80015bc:	10db      	asrs	r3, r3, #3
 80015be:	623b      	str	r3, [r7, #32]


    for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
 80015c4:	e037      	b.n	8001636 <draw_normal_letter+0x1be>
    {
        xd = begin_x;
 80015c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015c8:	80bb      	strh	r3, [r7, #4]
        for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ce:	e028      	b.n	8001622 <draw_normal_letter+0x1aa>
        {
        	for (int i = 7; i >= 0; i--)
 80015d0:	2307      	movs	r3, #7
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	e01f      	b.n	8001616 <draw_normal_letter+0x19e>
        	{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	3301      	adds	r3, #1
 80015da:	6a3a      	ldr	r2, [r7, #32]
 80015dc:	fb03 f202 	mul.w	r2, r3, r2
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	4413      	add	r3, r2
 80015e4:	461a      	mov	r2, r3
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa42 f303 	asr.w	r3, r2, r3
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <draw_normal_letter+0x192>
					UB_VGA_SetPixel(xd, yd, kleur);
 80015fc:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001600:	8879      	ldrh	r1, [r7, #2]
 8001602:	88bb      	ldrh	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 f839 	bl	800367c <UB_VGA_SetPixel>
				xd++;
 800160a:	88bb      	ldrh	r3, [r7, #4]
 800160c:	3301      	adds	r3, #1
 800160e:	80bb      	strh	r3, [r7, #4]
        	for (int i = 7; i >= 0; i--)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3b01      	subs	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	dadc      	bge.n	80015d6 <draw_normal_letter+0x15e>
        for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 800161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161e:	3301      	adds	r3, #1
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
 8001622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	429a      	cmp	r2, r3
 8001628:	dbd2      	blt.n	80015d0 <draw_normal_letter+0x158>
        	}
        }
        yd++;
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	3301      	adds	r3, #1
 800162e:	807b      	strh	r3, [r7, #2]
    for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	3301      	adds	r3, #1
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
 8001636:	7efb      	ldrb	r3, [r7, #27]
 8001638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163a:	429a      	cmp	r2, r3
 800163c:	dbc3      	blt.n	80015c6 <draw_normal_letter+0x14e>
    }
    end_cords[0] = xd;
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	81bb      	strh	r3, [r7, #12]
    end_cords[1] = yd-bitmap_height;
 8001642:	7efb      	ldrb	r3, [r7, #27]
 8001644:	b29b      	uxth	r3, r3
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	b29b      	uxth	r3, r3
 800164c:	81fb      	strh	r3, [r7, #14]
    cord_p = end_cords;
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
    return cord_p;
 8001654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001656:	4618      	mov	r0, r3
 8001658:	3734      	adds	r7, #52	; 0x34
 800165a:	46bd      	mov	sp, r7
 800165c:	bd90      	pop	{r4, r7, pc}
 800165e:	bf00      	nop
 8001660:	080112b4 	.word	0x080112b4
 8001664:	0801033c 	.word	0x0801033c
 8001668:	08010044 	.word	0x08010044
 800166c:	0800cce4 	.word	0x0800cce4
 8001670:	08015cf4 	.word	0x08015cf4
 8001674:	08014ca4 	.word	0x08014ca4
 8001678:	080149a4 	.word	0x080149a4
 800167c:	080115b4 	.word	0x080115b4

08001680 <draw_cursive_letter>:
 *
 * @return Returns the last coordinates that the letter was printed
 *
 *****************************************************************************/
uint16_t * draw_cursive_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b08d      	sub	sp, #52	; 0x34
 8001684:	af00      	add	r7, sp, #0
 8001686:	4604      	mov	r4, r0
 8001688:	4608      	mov	r0, r1
 800168a:	4611      	mov	r1, r2
 800168c:	461a      	mov	r2, r3
 800168e:	4623      	mov	r3, r4
 8001690:	71fb      	strb	r3, [r7, #7]
 8001692:	4603      	mov	r3, r0
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	460b      	mov	r3, r1
 8001698:	80bb      	strh	r3, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	807b      	strh	r3, [r7, #2]
	uint16_t end_cords[2];
	uint16_t begin_x = xd;
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int width;
	const uint8_t* glyph;
	int start_letter;
	int angle;
	uint8_t bitmap_height;
	if(letter_type == ARIAL)
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d134      	bne.n	8001712 <draw_cursive_letter+0x92>
	{
		if(fontgrootte == SIZE_1)
 80016a8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d113      	bne.n	80016d8 <draw_cursive_letter+0x58>
		{
			start_letter= arial_24_glyph_dsc[letter-32][1];
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	3b20      	subs	r3, #32
 80016b4:	4a75      	ldr	r2, [pc, #468]	; (800188c <draw_cursive_letter+0x20c>)
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4413      	add	r3, r2
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60fb      	str	r3, [r7, #12]
			glyph = &arial_24_glyph_bitmap[start_letter];
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a73      	ldr	r2, [pc, #460]	; (8001890 <draw_cursive_letter+0x210>)
 80016c2:	4413      	add	r3, r2
 80016c4:	61fb      	str	r3, [r7, #28]
			width = arial_24_glyph_dsc[letter-32][0];
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	3b20      	subs	r3, #32
 80016ca:	4a70      	ldr	r2, [pc, #448]	; (800188c <draw_cursive_letter+0x20c>)
 80016cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016d0:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 80016d2:	2318      	movs	r3, #24
 80016d4:	75fb      	strb	r3, [r7, #23]
 80016d6:	e054      	b.n	8001782 <draw_cursive_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 80016d8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d113      	bne.n	8001708 <draw_cursive_letter+0x88>
		{
			start_letter= arial_glyph_dsc[letter-32][1];
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3b20      	subs	r3, #32
 80016e4:	4a6b      	ldr	r2, [pc, #428]	; (8001894 <draw_cursive_letter+0x214>)
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4413      	add	r3, r2
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	60fb      	str	r3, [r7, #12]
			glyph = &arial_glyph_bitmap[start_letter];
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4a69      	ldr	r2, [pc, #420]	; (8001898 <draw_cursive_letter+0x218>)
 80016f2:	4413      	add	r3, r2
 80016f4:	61fb      	str	r3, [r7, #28]
			width = arial_glyph_dsc[letter-32][0];
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	3b20      	subs	r3, #32
 80016fa:	4a66      	ldr	r2, [pc, #408]	; (8001894 <draw_cursive_letter+0x214>)
 80016fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001700:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 8001702:	2330      	movs	r3, #48	; 0x30
 8001704:	75fb      	strb	r3, [r7, #23]
 8001706:	e03c      	b.n	8001782 <draw_cursive_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 8001708:	2009      	movs	r0, #9
 800170a:	f000 fbcf 	bl	8001eac <API_err_handler>
			return 0;
 800170e:	2300      	movs	r3, #0
 8001710:	e0b8      	b.n	8001884 <draw_cursive_letter+0x204>
		}
	}
	else if(letter_type == CONSOLAS)
 8001712:	79bb      	ldrb	r3, [r7, #6]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d134      	bne.n	8001782 <draw_cursive_letter+0x102>
	{
		if(fontgrootte == SIZE_1)
 8001718:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800171c:	2b01      	cmp	r3, #1
 800171e:	d113      	bne.n	8001748 <draw_cursive_letter+0xc8>
		{
			start_letter= consolas_24_glyph_dsc[letter-32][1];
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	3b20      	subs	r3, #32
 8001724:	4a5d      	ldr	r2, [pc, #372]	; (800189c <draw_cursive_letter+0x21c>)
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4413      	add	r3, r2
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	60fb      	str	r3, [r7, #12]
			glyph = &consolas_24_glyph_bitmap[start_letter];
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4a5b      	ldr	r2, [pc, #364]	; (80018a0 <draw_cursive_letter+0x220>)
 8001732:	4413      	add	r3, r2
 8001734:	61fb      	str	r3, [r7, #28]
			width = consolas_24_glyph_dsc[letter-32][0];
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	3b20      	subs	r3, #32
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <draw_cursive_letter+0x21c>)
 800173c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001740:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 8001742:	2318      	movs	r3, #24
 8001744:	75fb      	strb	r3, [r7, #23]
 8001746:	e01c      	b.n	8001782 <draw_cursive_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 8001748:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800174c:	2b02      	cmp	r3, #2
 800174e:	d113      	bne.n	8001778 <draw_cursive_letter+0xf8>
		{
			start_letter= consolas_glyph_dsc[letter-32][1];
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	3b20      	subs	r3, #32
 8001754:	4a53      	ldr	r2, [pc, #332]	; (80018a4 <draw_cursive_letter+0x224>)
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	60fb      	str	r3, [r7, #12]
			glyph = &consolas_glyph_bitmap[start_letter];
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4a51      	ldr	r2, [pc, #324]	; (80018a8 <draw_cursive_letter+0x228>)
 8001762:	4413      	add	r3, r2
 8001764:	61fb      	str	r3, [r7, #28]
			width = consolas_glyph_dsc[letter-32][0];
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	3b20      	subs	r3, #32
 800176a:	4a4e      	ldr	r2, [pc, #312]	; (80018a4 <draw_cursive_letter+0x224>)
 800176c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001770:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 8001772:	2330      	movs	r3, #48	; 0x30
 8001774:	75fb      	strb	r3, [r7, #23]
 8001776:	e004      	b.n	8001782 <draw_cursive_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 8001778:	2009      	movs	r0, #9
 800177a:	f000 fb97 	bl	8001eac <API_err_handler>
			return 0;
 800177e:	2300      	movs	r3, #0
 8001780:	e080      	b.n	8001884 <draw_cursive_letter+0x204>
		}
	}
	if(xd+width*2 >= VGA_DISPLAY_X)
 8001782:	88ba      	ldrh	r2, [r7, #4]
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800178e:	db06      	blt.n	800179e <draw_cursive_letter+0x11e>
	{
		yd+=bitmap_height;
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	b29a      	uxth	r2, r3
 8001794:	887b      	ldrh	r3, [r7, #2]
 8001796:	4413      	add	r3, r2
 8001798:	807b      	strh	r3, [r7, #2]
		begin_x=5;//sets x value to the left +5 pixels
 800179a:	2305      	movs	r3, #5
 800179c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
	if(yd >= VGA_DISPLAY_Y)
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	2bef      	cmp	r3, #239	; 0xef
 80017a2:	d904      	bls.n	80017ae <draw_cursive_letter+0x12e>
	{
		API_err_handler(Y_TO_HIGH);
 80017a4:	200c      	movs	r0, #12
 80017a6:	f000 fb81 	bl	8001eac <API_err_handler>
		return 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e06a      	b.n	8001884 <draw_cursive_letter+0x204>
	}
	if(width%8)
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <draw_cursive_letter+0x13e>
		width += 8;
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	3308      	adds	r3, #8
 80017bc:	623b      	str	r3, [r7, #32]
	angle = width; //sets angle offset for cursive letter
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	61bb      	str	r3, [r7, #24]
	if(fontgrootte == SIZE_1)
 80017c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d104      	bne.n	80017d4 <draw_cursive_letter+0x154>
		angle = angle/2;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	0fda      	lsrs	r2, r3, #31
 80017ce:	4413      	add	r3, r2
 80017d0:	105b      	asrs	r3, r3, #1
 80017d2:	61bb      	str	r3, [r7, #24]
	width = (width/8);
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da00      	bge.n	80017dc <draw_cursive_letter+0x15c>
 80017da:	3307      	adds	r3, #7
 80017dc:	10db      	asrs	r3, r3, #3
 80017de:	623b      	str	r3, [r7, #32]
	for(y_counter = 0; y_counter < bitmap_height; y_counter++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
 80017e4:	e03e      	b.n	8001864 <draw_cursive_letter+0x1e4>
	{
		xd = begin_x;
 80017e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017e8:	80bb      	strh	r3, [r7, #4]
		for(x_counter = 0; x_counter < width; x_counter++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80017ee:	e02c      	b.n	800184a <draw_cursive_letter+0x1ca>
		{
			for (int i = 7; i >= 0; i--)
 80017f0:	2307      	movs	r3, #7
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	e023      	b.n	800183e <draw_cursive_letter+0x1be>
			{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	3301      	adds	r3, #1
 80017fa:	6a3a      	ldr	r2, [r7, #32]
 80017fc:	fb03 f202 	mul.w	r2, r3, r2
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	4413      	add	r3, r2
 8001804:	461a      	mov	r2, r3
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4413      	add	r3, r2
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	fa42 f303 	asr.w	r3, r2, r3
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00a      	beq.n	8001832 <draw_cursive_letter+0x1b2>
					UB_VGA_SetPixel(xd+angle, yd, kleur);
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	b29a      	uxth	r2, r3
 8001820:	88bb      	ldrh	r3, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	b29b      	uxth	r3, r3
 8001826:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800182a:	8879      	ldrh	r1, [r7, #2]
 800182c:	4618      	mov	r0, r3
 800182e:	f001 ff25 	bl	800367c <UB_VGA_SetPixel>
				xd++;
 8001832:	88bb      	ldrh	r3, [r7, #4]
 8001834:	3301      	adds	r3, #1
 8001836:	80bb      	strh	r3, [r7, #4]
			for (int i = 7; i >= 0; i--)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	3b01      	subs	r3, #1
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	dad8      	bge.n	80017f6 <draw_cursive_letter+0x176>
		for(x_counter = 0; x_counter < width; x_counter++)
 8001844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001846:	3301      	adds	r3, #1
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
 800184a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	429a      	cmp	r2, r3
 8001850:	dbce      	blt.n	80017f0 <draw_cursive_letter+0x170>
			}
		}
		angle--; //decreases offset for each y layer to create an angle
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	3b01      	subs	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
		yd++;
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	3301      	adds	r3, #1
 800185c:	807b      	strh	r3, [r7, #2]
	for(y_counter = 0; y_counter < bitmap_height; y_counter++)
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	3301      	adds	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	429a      	cmp	r2, r3
 800186a:	dbbc      	blt.n	80017e6 <draw_cursive_letter+0x166>
	}
	end_cords[0] = xd;
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	813b      	strh	r3, [r7, #8]
    end_cords[1] = yd-bitmap_height;
 8001870:	7dfb      	ldrb	r3, [r7, #23]
 8001872:	b29b      	uxth	r3, r3
 8001874:	887a      	ldrh	r2, [r7, #2]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	b29b      	uxth	r3, r3
 800187a:	817b      	strh	r3, [r7, #10]
    cord_p = end_cords;
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	64bb      	str	r3, [r7, #72]	; 0x48
    return cord_p;
 8001882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001884:	4618      	mov	r0, r3
 8001886:	3734      	adds	r7, #52	; 0x34
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	080112b4 	.word	0x080112b4
 8001890:	0801033c 	.word	0x0801033c
 8001894:	08010044 	.word	0x08010044
 8001898:	0800cce4 	.word	0x0800cce4
 800189c:	08015cf4 	.word	0x08015cf4
 80018a0:	08014ca4 	.word	0x08014ca4
 80018a4:	080149a4 	.word	0x080149a4
 80018a8:	080115b4 	.word	0x080115b4

080018ac <draw_fat_letter>:
 *
 * @return Returns the last coordinates that the letter was printed
 *
 *****************************************************************************/
uint16_t * draw_fat_letter(unsigned char letter, unsigned char letter_type, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b08d      	sub	sp, #52	; 0x34
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4604      	mov	r4, r0
 80018b4:	4608      	mov	r0, r1
 80018b6:	4611      	mov	r1, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	4623      	mov	r3, r4
 80018bc:	71fb      	strb	r3, [r7, #7]
 80018be:	4603      	mov	r3, r0
 80018c0:	71bb      	strb	r3, [r7, #6]
 80018c2:	460b      	mov	r3, r1
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	807b      	strh	r3, [r7, #2]
	uint16_t end_cords[2];
	uint16_t begin_x = xd;
 80018ca:	88bb      	ldrh	r3, [r7, #4]
 80018cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int width;
	const uint8_t* glyph;
	int start_letter;
	uint8_t bitmap_height;

	if(letter_type == ARIAL)
 80018ce:	79bb      	ldrb	r3, [r7, #6]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d134      	bne.n	800193e <draw_fat_letter+0x92>
	{
		if(fontgrootte == SIZE_1)
 80018d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d113      	bne.n	8001904 <draw_fat_letter+0x58>
		{
			start_letter= arial_24_glyph_dsc[letter-32][1];
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	3b20      	subs	r3, #32
 80018e0:	4a7a      	ldr	r2, [pc, #488]	; (8001acc <draw_fat_letter+0x220>)
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	613b      	str	r3, [r7, #16]
			glyph = &arial_24_glyph_bitmap[start_letter];
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4a78      	ldr	r2, [pc, #480]	; (8001ad0 <draw_fat_letter+0x224>)
 80018ee:	4413      	add	r3, r2
 80018f0:	61fb      	str	r3, [r7, #28]
			width = arial_24_glyph_dsc[letter-32][0];
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	3b20      	subs	r3, #32
 80018f6:	4a75      	ldr	r2, [pc, #468]	; (8001acc <draw_fat_letter+0x220>)
 80018f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018fc:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 80018fe:	2318      	movs	r3, #24
 8001900:	76fb      	strb	r3, [r7, #27]
 8001902:	e054      	b.n	80019ae <draw_fat_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 8001904:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001908:	2b02      	cmp	r3, #2
 800190a:	d113      	bne.n	8001934 <draw_fat_letter+0x88>
		{
			start_letter= arial_glyph_dsc[letter-32][1];
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	3b20      	subs	r3, #32
 8001910:	4a70      	ldr	r2, [pc, #448]	; (8001ad4 <draw_fat_letter+0x228>)
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4413      	add	r3, r2
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]
			glyph = &arial_glyph_bitmap[start_letter];
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4a6e      	ldr	r2, [pc, #440]	; (8001ad8 <draw_fat_letter+0x22c>)
 800191e:	4413      	add	r3, r2
 8001920:	61fb      	str	r3, [r7, #28]
			width = arial_glyph_dsc[letter-32][0];
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	3b20      	subs	r3, #32
 8001926:	4a6b      	ldr	r2, [pc, #428]	; (8001ad4 <draw_fat_letter+0x228>)
 8001928:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800192c:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 800192e:	2330      	movs	r3, #48	; 0x30
 8001930:	76fb      	strb	r3, [r7, #27]
 8001932:	e03c      	b.n	80019ae <draw_fat_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 8001934:	2009      	movs	r0, #9
 8001936:	f000 fab9 	bl	8001eac <API_err_handler>
			return 0;
 800193a:	2300      	movs	r3, #0
 800193c:	e0c2      	b.n	8001ac4 <draw_fat_letter+0x218>
		}
	}
	else if(letter_type == CONSOLAS)
 800193e:	79bb      	ldrb	r3, [r7, #6]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d134      	bne.n	80019ae <draw_fat_letter+0x102>
	{
		if(fontgrootte == SIZE_1)
 8001944:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001948:	2b01      	cmp	r3, #1
 800194a:	d113      	bne.n	8001974 <draw_fat_letter+0xc8>
		{
			start_letter= consolas_24_glyph_dsc[letter-32][1];
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	3b20      	subs	r3, #32
 8001950:	4a62      	ldr	r2, [pc, #392]	; (8001adc <draw_fat_letter+0x230>)
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4413      	add	r3, r2
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
			glyph = &consolas_24_glyph_bitmap[start_letter];
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4a60      	ldr	r2, [pc, #384]	; (8001ae0 <draw_fat_letter+0x234>)
 800195e:	4413      	add	r3, r2
 8001960:	61fb      	str	r3, [r7, #28]
			width = consolas_24_glyph_dsc[letter-32][0];
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	3b20      	subs	r3, #32
 8001966:	4a5d      	ldr	r2, [pc, #372]	; (8001adc <draw_fat_letter+0x230>)
 8001968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800196c:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_1_HEIGHT;
 800196e:	2318      	movs	r3, #24
 8001970:	76fb      	strb	r3, [r7, #27]
 8001972:	e01c      	b.n	80019ae <draw_fat_letter+0x102>
		}
		else if(fontgrootte == SIZE_2)
 8001974:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001978:	2b02      	cmp	r3, #2
 800197a:	d113      	bne.n	80019a4 <draw_fat_letter+0xf8>
		{
			start_letter= consolas_glyph_dsc[letter-32][1];
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	3b20      	subs	r3, #32
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <draw_fat_letter+0x238>)
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
			glyph = &consolas_glyph_bitmap[start_letter];
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4a56      	ldr	r2, [pc, #344]	; (8001ae8 <draw_fat_letter+0x23c>)
 800198e:	4413      	add	r3, r2
 8001990:	61fb      	str	r3, [r7, #28]
			width = consolas_glyph_dsc[letter-32][0];
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	3b20      	subs	r3, #32
 8001996:	4a53      	ldr	r2, [pc, #332]	; (8001ae4 <draw_fat_letter+0x238>)
 8001998:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800199c:	623b      	str	r3, [r7, #32]
			bitmap_height = LETTER_SIZE_2_HEIGHT;
 800199e:	2330      	movs	r3, #48	; 0x30
 80019a0:	76fb      	strb	r3, [r7, #27]
 80019a2:	e004      	b.n	80019ae <draw_fat_letter+0x102>
		}
		else
		{
			API_err_handler(UNKNOWN_FONT_SIZE);
 80019a4:	2009      	movs	r0, #9
 80019a6:	f000 fa81 	bl	8001eac <API_err_handler>
			return 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e08a      	b.n	8001ac4 <draw_fat_letter+0x218>
		}
	}
	if(xd+width+THICKNESS >= VGA_DISPLAY_X)
 80019ae:	88ba      	ldrh	r2, [r7, #4]
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	4413      	add	r3, r2
 80019b4:	f5b3 7f9e 	cmp.w	r3, #316	; 0x13c
 80019b8:	dd06      	ble.n	80019c8 <draw_fat_letter+0x11c>
	{
		yd+=bitmap_height;
 80019ba:	7efb      	ldrb	r3, [r7, #27]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	4413      	add	r3, r2
 80019c2:	807b      	strh	r3, [r7, #2]
		begin_x=5;//sets x value to the left +5 pixels
 80019c4:	2305      	movs	r3, #5
 80019c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}
	if(yd >= VGA_DISPLAY_Y)
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	2bef      	cmp	r3, #239	; 0xef
 80019cc:	d904      	bls.n	80019d8 <draw_fat_letter+0x12c>
	{
		API_err_handler(Y_TO_HIGH);
 80019ce:	200c      	movs	r0, #12
 80019d0:	f000 fa6c 	bl	8001eac <API_err_handler>
		return 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e075      	b.n	8001ac4 <draw_fat_letter+0x218>
	}
	if(width%8)
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <draw_fat_letter+0x13c>
		width += 8;
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	3308      	adds	r3, #8
 80019e6:	623b      	str	r3, [r7, #32]
	width = (width/8);
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	da00      	bge.n	80019f0 <draw_fat_letter+0x144>
 80019ee:	3307      	adds	r3, #7
 80019f0:	10db      	asrs	r3, r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
	if(width == 0)
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <draw_fat_letter+0x154>
		width++;
 80019fa:	6a3b      	ldr	r3, [r7, #32]
 80019fc:	3301      	adds	r3, #1
 80019fe:	623b      	str	r3, [r7, #32]

	for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	e04e      	b.n	8001aa4 <draw_fat_letter+0x1f8>
	{
		xd = begin_x;
 8001a06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a08:	80bb      	strh	r3, [r7, #4]
		for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0e:	e03f      	b.n	8001a90 <draw_fat_letter+0x1e4>
		{
			for (int i = 7; i >= 0; i--)
 8001a10:	2307      	movs	r3, #7
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e036      	b.n	8001a84 <draw_fat_letter+0x1d8>
			{
				if ((glyph[((y_counter+1)*width)+x_counter] >> i) & 1)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	3301      	adds	r3, #1
 8001a1a:	6a3a      	ldr	r2, [r7, #32]
 8001a1c:	fb03 f202 	mul.w	r2, r3, r2
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	4413      	add	r3, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	4413      	add	r3, r2
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa42 f303 	asr.w	r3, r2, r3
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01d      	beq.n	8001a78 <draw_fat_letter+0x1cc>
				{
					UB_VGA_SetPixel(xd, yd, kleur);
 8001a3c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001a40:	8879      	ldrh	r1, [r7, #2]
 8001a42:	88bb      	ldrh	r3, [r7, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 fe19 	bl	800367c <UB_VGA_SetPixel>
					xd++;
 8001a4a:	88bb      	ldrh	r3, [r7, #4]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	80bb      	strh	r3, [r7, #4]
					UB_VGA_SetPixel(xd, yd, kleur);
 8001a50:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001a54:	8879      	ldrh	r1, [r7, #2]
 8001a56:	88bb      	ldrh	r3, [r7, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 fe0f 	bl	800367c <UB_VGA_SetPixel>
					xd++;
 8001a5e:	88bb      	ldrh	r3, [r7, #4]
 8001a60:	3301      	adds	r3, #1
 8001a62:	80bb      	strh	r3, [r7, #4]
					UB_VGA_SetPixel(xd, yd, kleur);
 8001a64:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001a68:	8879      	ldrh	r1, [r7, #2]
 8001a6a:	88bb      	ldrh	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 fe05 	bl	800367c <UB_VGA_SetPixel>
					xd-=2;
 8001a72:	88bb      	ldrh	r3, [r7, #4]
 8001a74:	3b02      	subs	r3, #2
 8001a76:	80bb      	strh	r3, [r7, #4]
				}
				xd++;
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	80bb      	strh	r3, [r7, #4]
			for (int i = 7; i >= 0; i--)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	dac5      	bge.n	8001a16 <draw_fat_letter+0x16a>
		for (x_counter = 0; x_counter < width; x_counter++) //goes trough every horizontal layer of the bitmap
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	dbbb      	blt.n	8001a10 <draw_fat_letter+0x164>
			}
		}
		yd++;
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	807b      	strh	r3, [r7, #2]
	for (y_counter = 0; y_counter < bitmap_height; y_counter++) //goes trough every vertical layer of the bitmap
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	7efb      	ldrb	r3, [r7, #27]
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbac      	blt.n	8001a06 <draw_fat_letter+0x15a>
	}
	end_cords[0] = xd;
 8001aac:	88bb      	ldrh	r3, [r7, #4]
 8001aae:	81bb      	strh	r3, [r7, #12]
    end_cords[1] = yd-bitmap_height;
 8001ab0:	7efb      	ldrb	r3, [r7, #27]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	887a      	ldrh	r2, [r7, #2]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	81fb      	strh	r3, [r7, #14]
    cord_p = end_cords;
 8001abc:	f107 030c 	add.w	r3, r7, #12
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
	return cord_p;
 8001ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3734      	adds	r7, #52	; 0x34
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	080112b4 	.word	0x080112b4
 8001ad0:	0801033c 	.word	0x0801033c
 8001ad4:	08010044 	.word	0x08010044
 8001ad8:	0800cce4 	.word	0x0800cce4
 8001adc:	08015cf4 	.word	0x08015cf4
 8001ae0:	08014ca4 	.word	0x08014ca4
 8001ae4:	080149a4 	.word	0x080149a4
 8001ae8:	080115b4 	.word	0x080115b4

08001aec <API_read_bitmap_SD>:
 *
 * @return Returns an error if error or returns nothing
 *
 *****************************************************************************/
int API_read_bitmap_SD(char *nr, uint16_t x_lup, uint16_t y_lup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001af8:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001afc:	6018      	str	r0, [r3, #0]
 8001afe:	4608      	mov	r0, r1
 8001b00:	4611      	mov	r1, r2
 8001b02:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b06:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	801a      	strh	r2, [r3, #0]
 8001b0e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b12:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001b16:	460a      	mov	r2, r1
 8001b18:	801a      	strh	r2, [r3, #0]

	// Fatfs variables
	FATFS FatFs;
    FIL fil; 		//File handle
    FRESULT fres; 	//Result after operations
    UINT SizeofBuffer = 30;
 8001b1a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b1e:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001b22:	221e      	movs	r2, #30
 8001b24:	601a      	str	r2, [r3, #0]

    //Reading buffer
    uint k = 0; // kijken welk variable we zijn
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

    //Position vga
    uint16_t xp,yp,xp2,yp2;

    xp2 = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
    yp2 = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac

    //Information from file system
    unsigned int Height,Width;

    //Creating decimal shift register
	unsigned int ColourFile = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	unsigned int DecimalshiftBuff = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498

	unsigned char i;

	char readBuf[30];

	TCHAR File[] = "00.txt";
 8001b44:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b48:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001b4c:	4a8a      	ldr	r2, [pc, #552]	; (8001d78 <API_read_bitmap_SD+0x28c>)
 8001b4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b52:	6018      	str	r0, [r3, #0]
 8001b54:	3304      	adds	r3, #4
 8001b56:	8019      	strh	r1, [r3, #0]
 8001b58:	3302      	adds	r3, #2
 8001b5a:	0c0a      	lsrs	r2, r1, #16
 8001b5c:	701a      	strb	r2, [r3, #0]

	File[0] = nr[0];		// checked
 8001b5e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b62:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	781a      	ldrb	r2, [r3, #0]
 8001b6a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b6e:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001b72:	701a      	strb	r2, [r3, #0]
	File[1] = nr[1];
 8001b74:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b78:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	785a      	ldrb	r2, [r3, #1]
 8001b80:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b84:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001b88:	705a      	strb	r2, [r3, #1]

	xp = x_lup;
 8001b8a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b8e:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
	yp = y_lup;
 8001b98:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001b9c:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0


    fres = f_mount(&FatFs, "", 1); //1=mount now
 8001ba6:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001baa:	2201      	movs	r2, #1
 8001bac:	4973      	ldr	r1, [pc, #460]	; (8001d7c <API_read_bitmap_SD+0x290>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f008 f8d4 	bl	8009d5c <f_mount>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK)
 8001bba:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <API_read_bitmap_SD+0xe0>
    {
    	API_err_handler(NO_SD_CARD_DETECTED);
 8001bc2:	200e      	movs	r0, #14
 8001bc4:	f000 f972 	bl	8001eac <API_err_handler>
    	return 0; //error
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e0cf      	b.n	8001d6c <API_read_bitmap_SD+0x280>
    }

	fres = f_open(&fil, File, FA_READ);
 8001bcc:	f107 0108 	add.w	r1, r7, #8
 8001bd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f008 f906 	bl	8009de8 <f_open>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	if (fres != FR_OK)
 8001be2:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80ad 	beq.w	8001d46 <API_read_bitmap_SD+0x25a>
	{
		API_err_handler(UNKNOWN_BITMAP);
 8001bec:	2007      	movs	r0, #7
 8001bee:	f000 f95d 	bl	8001eac <API_err_handler>
		return 0; //error
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e0ba      	b.n	8001d6c <API_read_bitmap_SD+0x280>
	}


	while (SizeofBuffer == 30)
	{
		f_read(&fil,(void*)readBuf, 30, &SizeofBuffer);
 8001bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bfa:	f107 0110 	add.w	r1, r7, #16
 8001bfe:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001c02:	221e      	movs	r2, #30
 8001c04:	f008 faae 	bl	800a164 <f_read>
		for (i=0; i<SizeofBuffer; i++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 8001c0e:	e090      	b.n	8001d32 <API_read_bitmap_SD+0x246>
		{

			if (readBuf[i] != 32)
 8001c10:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001c14:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8001c18:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d019      	beq.n	8001c56 <API_read_bitmap_SD+0x16a>
			{
				DecimalshiftBuff = readBuf[i]-'0';
 8001c22:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001c26:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8001c2a:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	3b30      	subs	r3, #48	; 0x30
 8001c32:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
				ColourFile *= 10;
 8001c36:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
				ColourFile += DecimalshiftBuff;
 8001c46:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001c4a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 8001c4e:	4413      	add	r3, r2
 8001c50:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 8001c54:	e068      	b.n	8001d28 <API_read_bitmap_SD+0x23c>
			}

			else if(readBuf[i] == 32)
 8001c56:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001c5a:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8001c5e:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	d15f      	bne.n	8001d28 <API_read_bitmap_SD+0x23c>
			{
				if (k > 1)
 8001c68:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d942      	bls.n	8001cf6 <API_read_bitmap_SD+0x20a>
				{
					if (xp < VGA_DISPLAY_X && yp < VGA_DISPLAY_Y)
 8001c70:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001c74:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c78:	d212      	bcs.n	8001ca0 <API_read_bitmap_SD+0x1b4>
 8001c7a:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8001c7e:	2bef      	cmp	r3, #239	; 0xef
 8001c80:	d80e      	bhi.n	8001ca0 <API_read_bitmap_SD+0x1b4>
					{
						VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = ColourFile;
 8001c82:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	; 0x4b0
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	441a      	add	r2, r3
 8001c90:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001c94:	4413      	add	r3, r2
 8001c96:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 8001c9a:	b2d1      	uxtb	r1, r2
 8001c9c:	4a38      	ldr	r2, [pc, #224]	; (8001d80 <API_read_bitmap_SD+0x294>)
 8001c9e:	54d1      	strb	r1, [r2, r3]
					}
					xp++;
 8001ca0:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
					xp2++;
 8001caa:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8001cae:	3301      	adds	r3, #1
 8001cb0:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					if (xp2 >= Width)
 8001cb4:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8001cb8:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d813      	bhi.n	8001ce8 <API_read_bitmap_SD+0x1fc>
					{
						yp++;
 8001cc0:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0
						yp2++;
 8001cca:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac
						xp = x_lup;
 8001cd4:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001cd8:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
						xp2 = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					}
					if (yp2 == Height)
 8001ce8:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8001cec:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d111      	bne.n	8001d18 <API_read_bitmap_SD+0x22c>
					{
						break;
 8001cf4:	e027      	b.n	8001d46 <API_read_bitmap_SD+0x25a>
					}
				}
				else if (k == 0) // Hoogte van de bit map
 8001cf6:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d104      	bne.n	8001d08 <API_read_bitmap_SD+0x21c>
				{
					Height = ColourFile;
 8001cfe:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001d02:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 8001d06:	e007      	b.n	8001d18 <API_read_bitmap_SD+0x22c>
				}
				else if (k == 1)
 8001d08:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d103      	bne.n	8001d18 <API_read_bitmap_SD+0x22c>
				{
					Width = ColourFile;
 8001d10:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001d14:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
				}

				k++;
 8001d18:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
				ColourFile = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
		for (i=0; i<SizeofBuffer; i++)
 8001d28:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 8001d32:	f897 249f 	ldrb.w	r2, [r7, #1183]	; 0x49f
 8001d36:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001d3a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f4ff af65 	bcc.w	8001c10 <API_read_bitmap_SD+0x124>
	while (SizeofBuffer == 30)
 8001d46:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001d4a:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b1e      	cmp	r3, #30
 8001d52:	f43f af50 	beq.w	8001bf6 <API_read_bitmap_SD+0x10a>
			}

		}
	}

	f_close(&fil);
 8001d56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f008 fbbf 	bl	800a4de <f_close>

    f_mount(NULL, "", 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	4906      	ldr	r1, [pc, #24]	; (8001d7c <API_read_bitmap_SD+0x290>)
 8001d64:	2000      	movs	r0, #0
 8001d66:	f007 fff9 	bl	8009d5c <f_mount>

	return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f507 6797 	add.w	r7, r7, #1208	; 0x4b8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	0800c5f0 	.word	0x0800c5f0
 8001d7c:	0800c5ec 	.word	0x0800c5ec
 8001d80:	20000a30 	.word	0x20000a30

08001d84 <API_blur_screen>:
 *
 * @return Returns an error if error or returns nothing
 *
 *****************************************************************************/
int API_blur_screen()
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
	uint16_t xp, yp;
	uint16_t xp_2, yp_2;
	uint16_t sum = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	81bb      	strh	r3, [r7, #12]
 8001d96:	e06d      	b.n	8001e74 <API_blur_screen+0xf0>
	{
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	81fb      	strh	r3, [r7, #14]
 8001d9c:	e063      	b.n	8001e66 <API_blur_screen+0xe2>
	  {
	    sum = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	80fb      	strh	r3, [r7, #6]
	    i = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001da6:	89bb      	ldrh	r3, [r7, #12]
 8001da8:	813b      	strh	r3, [r7, #8]
 8001daa:	e022      	b.n	8001df2 <API_blur_screen+0x6e>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001dac:	89fb      	ldrh	r3, [r7, #14]
 8001dae:	817b      	strh	r3, [r7, #10]
 8001db0:	e013      	b.n	8001dda <API_blur_screen+0x56>
	      {
	        sum += VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2];
 8001db2:	893a      	ldrh	r2, [r7, #8]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	019b      	lsls	r3, r3, #6
 8001dbc:	441a      	add	r2, r3
 8001dbe:	897b      	ldrh	r3, [r7, #10]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a31      	ldr	r2, [pc, #196]	; (8001e88 <API_blur_screen+0x104>)
 8001dc4:	5cd3      	ldrb	r3, [r2, r3]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	4413      	add	r3, r2
 8001dcc:	80fb      	strh	r3, [r7, #6]
	        i++;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	603b      	str	r3, [r7, #0]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001dd4:	897b      	ldrh	r3, [r7, #10]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	1c9a      	adds	r2, r3, #2
 8001dde:	897b      	ldrh	r3, [r7, #10]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	db03      	blt.n	8001dec <API_blur_screen+0x68>
 8001de4:	897b      	ldrh	r3, [r7, #10]
 8001de6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001dea:	d3e2      	bcc.n	8001db2 <API_blur_screen+0x2e>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001dec:	893b      	ldrh	r3, [r7, #8]
 8001dee:	3301      	adds	r3, #1
 8001df0:	813b      	strh	r3, [r7, #8]
 8001df2:	89bb      	ldrh	r3, [r7, #12]
 8001df4:	1c9a      	adds	r2, r3, #2
 8001df6:	893b      	ldrh	r3, [r7, #8]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	db02      	blt.n	8001e02 <API_blur_screen+0x7e>
 8001dfc:	893b      	ldrh	r3, [r7, #8]
 8001dfe:	2bef      	cmp	r3, #239	; 0xef
 8001e00:	d9d4      	bls.n	8001dac <API_blur_screen+0x28>
	      }
	    }
	    sum /= 9;
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	4a21      	ldr	r2, [pc, #132]	; (8001e8c <API_blur_screen+0x108>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	085b      	lsrs	r3, r3, #1
 8001e0c:	80fb      	strh	r3, [r7, #6]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001e0e:	89bb      	ldrh	r3, [r7, #12]
 8001e10:	813b      	strh	r3, [r7, #8]
 8001e12:	e01d      	b.n	8001e50 <API_blur_screen+0xcc>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001e14:	89fb      	ldrh	r3, [r7, #14]
 8001e16:	817b      	strh	r3, [r7, #10]
 8001e18:	e00e      	b.n	8001e38 <API_blur_screen+0xb4>
	      {
	        VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2] = sum;
 8001e1a:	893a      	ldrh	r2, [r7, #8]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	019b      	lsls	r3, r3, #6
 8001e24:	441a      	add	r2, r3
 8001e26:	897b      	ldrh	r3, [r7, #10]
 8001e28:	4413      	add	r3, r2
 8001e2a:	88fa      	ldrh	r2, [r7, #6]
 8001e2c:	b2d1      	uxtb	r1, r2
 8001e2e:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <API_blur_screen+0x104>)
 8001e30:	54d1      	strb	r1, [r2, r3]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001e32:	897b      	ldrh	r3, [r7, #10]
 8001e34:	3301      	adds	r3, #1
 8001e36:	817b      	strh	r3, [r7, #10]
 8001e38:	89fb      	ldrh	r3, [r7, #14]
 8001e3a:	1c9a      	adds	r2, r3, #2
 8001e3c:	897b      	ldrh	r3, [r7, #10]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	db03      	blt.n	8001e4a <API_blur_screen+0xc6>
 8001e42:	897b      	ldrh	r3, [r7, #10]
 8001e44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e48:	d3e7      	bcc.n	8001e1a <API_blur_screen+0x96>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001e4a:	893b      	ldrh	r3, [r7, #8]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	813b      	strh	r3, [r7, #8]
 8001e50:	89bb      	ldrh	r3, [r7, #12]
 8001e52:	1c9a      	adds	r2, r3, #2
 8001e54:	893b      	ldrh	r3, [r7, #8]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	db02      	blt.n	8001e60 <API_blur_screen+0xdc>
 8001e5a:	893b      	ldrh	r3, [r7, #8]
 8001e5c:	2bef      	cmp	r3, #239	; 0xef
 8001e5e:	d9d9      	bls.n	8001e14 <API_blur_screen+0x90>
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 8001e60:	89fb      	ldrh	r3, [r7, #14]
 8001e62:	3301      	adds	r3, #1
 8001e64:	81fb      	strh	r3, [r7, #14]
 8001e66:	89fb      	ldrh	r3, [r7, #14]
 8001e68:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e6c:	d397      	bcc.n	8001d9e <API_blur_screen+0x1a>
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 8001e6e:	89bb      	ldrh	r3, [r7, #12]
 8001e70:	3301      	adds	r3, #1
 8001e72:	81bb      	strh	r3, [r7, #12]
 8001e74:	89bb      	ldrh	r3, [r7, #12]
 8001e76:	2bef      	cmp	r3, #239	; 0xef
 8001e78:	d98e      	bls.n	8001d98 <API_blur_screen+0x14>
	      }
	    }
	  }
	}
	return 0;
 8001e7a:	2300      	movs	r3, #0
	}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	20000a30 	.word	0x20000a30
 8001e8c:	38e38e39 	.word	0x38e38e39

08001e90 <API_wacht>:
 *
 * @return returns 0
 *
 *****************************************************************************/
unsigned int API_wacht(uint16_t msecs)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(msecs);
 8001e9a:	88fb      	ldrh	r3, [r7, #6]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 fc87 	bl	80037b0 <HAL_Delay>
	return 0;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <API_err_handler>:
 *
 * @return returns a message to the user
 *
 *****************************************************************************/
void API_err_handler(int API_err_in)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	switch(API_err_in)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	2b11      	cmp	r3, #17
 8001eba:	f200 80ce 	bhi.w	800205a <API_err_handler+0x1ae>
 8001ebe:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <API_err_handler+0x18>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001f0d 	.word	0x08001f0d
 8001ec8:	08001f1b 	.word	0x08001f1b
 8001ecc:	08001f29 	.word	0x08001f29
 8001ed0:	08001f37 	.word	0x08001f37
 8001ed4:	08001f45 	.word	0x08001f45
 8001ed8:	08001f53 	.word	0x08001f53
 8001edc:	08001f61 	.word	0x08001f61
 8001ee0:	08001f6f 	.word	0x08001f6f
 8001ee4:	08001f7d 	.word	0x08001f7d
 8001ee8:	08001f8b 	.word	0x08001f8b
 8001eec:	08001f99 	.word	0x08001f99
 8001ef0:	08001fa7 	.word	0x08001fa7
 8001ef4:	08001fb5 	.word	0x08001fb5
 8001ef8:	08001fc3 	.word	0x08001fc3
 8001efc:	08001fd1 	.word	0x08001fd1
 8001f00:	0800205b 	.word	0x0800205b
 8001f04:	08001fdf 	.word	0x08001fdf
 8001f08:	08001fed 	.word	0x08001fed
	{
	case INVALID_MESSAGE:
		printf("dit bericht is niet volgens de richtlijnen, type help voor meer informatie ");
 8001f0c:	4857      	ldr	r0, [pc, #348]	; (800206c <API_err_handler+0x1c0>)
 8001f0e:	f008 fbad 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f12:	4857      	ldr	r0, [pc, #348]	; (8002070 <API_err_handler+0x1c4>)
 8001f14:	f008 fc46 	bl	800a7a4 <puts>
		break;
 8001f18:	e0a3      	b.n	8002062 <API_err_handler+0x1b6>
	case X_OUT_OF_BOUNDS:
		printf("Een van de ingevulde X coordinaten is niet geldig, X mag niet groter zijn dan 320 ");
 8001f1a:	4856      	ldr	r0, [pc, #344]	; (8002074 <API_err_handler+0x1c8>)
 8001f1c:	f008 fba6 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <API_err_handler+0x1c4>)
 8001f22:	f008 fc3f 	bl	800a7a4 <puts>
		break;
 8001f26:	e09c      	b.n	8002062 <API_err_handler+0x1b6>
	case Y_OUT_OF_BOUNDS:
		printf("Een van de ingevulde Y coordinaten is niet geldig, X mag niet groter zijn dan 240 ");
 8001f28:	4853      	ldr	r0, [pc, #332]	; (8002078 <API_err_handler+0x1cc>)
 8001f2a:	f008 fb9f 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f2e:	4850      	ldr	r0, [pc, #320]	; (8002070 <API_err_handler+0x1c4>)
 8001f30:	f008 fc38 	bl	800a7a4 <puts>
		break;
 8001f34:	e095      	b.n	8002062 <API_err_handler+0x1b6>
	case NOT_A_NUMBER:
		printf("Op de plek waar je een getal in moet vullen heb je iets anders ingevuld ");
 8001f36:	4851      	ldr	r0, [pc, #324]	; (800207c <API_err_handler+0x1d0>)
 8001f38:	f008 fb98 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f3c:	484c      	ldr	r0, [pc, #304]	; (8002070 <API_err_handler+0x1c4>)
 8001f3e:	f008 fc31 	bl	800a7a4 <puts>
		break;
 8001f42:	e08e      	b.n	8002062 <API_err_handler+0x1b6>
	case NOT_A_CHARACTER:
		printf("Op de plek waar je een character in moet vullen heb je iets anders ingevuld ");
 8001f44:	484e      	ldr	r0, [pc, #312]	; (8002080 <API_err_handler+0x1d4>)
 8001f46:	f008 fb91 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f4a:	4849      	ldr	r0, [pc, #292]	; (8002070 <API_err_handler+0x1c4>)
 8001f4c:	f008 fc2a 	bl	800a7a4 <puts>
		break;
 8001f50:	e087      	b.n	8002062 <API_err_handler+0x1b6>
	case UNKNOWN_COLOR:
		printf("de kleur die je hebt uitgekozen staat niet in de lijst van mogelijke kleuren ");
 8001f52:	484c      	ldr	r0, [pc, #304]	; (8002084 <API_err_handler+0x1d8>)
 8001f54:	f008 fb8a 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <API_err_handler+0x1c4>)
 8001f5a:	f008 fc23 	bl	800a7a4 <puts>
		break;
 8001f5e:	e080      	b.n	8002062 <API_err_handler+0x1b6>
	case UNKNOWN_BITMAP:
		printf("de bitmap die je zoekt staat niet het lijst van mogelijke bitmaps ");
 8001f60:	4849      	ldr	r0, [pc, #292]	; (8002088 <API_err_handler+0x1dc>)
 8001f62:	f008 fb83 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f66:	4842      	ldr	r0, [pc, #264]	; (8002070 <API_err_handler+0x1c4>)
 8001f68:	f008 fc1c 	bl	800a7a4 <puts>
		break;
 8001f6c:	e079      	b.n	8002062 <API_err_handler+0x1b6>
	case UNKNOWN_FONT:
		printf("de font die je invult is niet bekent. probeer arial of consolas ");
 8001f6e:	4847      	ldr	r0, [pc, #284]	; (800208c <API_err_handler+0x1e0>)
 8001f70:	f008 fb7c 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f74:	483e      	ldr	r0, [pc, #248]	; (8002070 <API_err_handler+0x1c4>)
 8001f76:	f008 fc15 	bl	800a7a4 <puts>
		break;
 8001f7a:	e072      	b.n	8002062 <API_err_handler+0x1b6>
	case UNKNOWN_FONT_SIZE:
		printf("de size die je hier invult is niet geldig. probeer 1 of 2 ");
 8001f7c:	4844      	ldr	r0, [pc, #272]	; (8002090 <API_err_handler+0x1e4>)
 8001f7e:	f008 fb75 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f82:	483b      	ldr	r0, [pc, #236]	; (8002070 <API_err_handler+0x1c4>)
 8001f84:	f008 fc0e 	bl	800a7a4 <puts>
		break;
 8001f88:	e06b      	b.n	8002062 <API_err_handler+0x1b6>
	case UNKNOWN_FONT_STYLE:
		printf("de stijl die je invult is niet bekent. probeer normaal, vet of cursief ");
 8001f8a:	4842      	ldr	r0, [pc, #264]	; (8002094 <API_err_handler+0x1e8>)
 8001f8c:	f008 fb6e 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f90:	4837      	ldr	r0, [pc, #220]	; (8002070 <API_err_handler+0x1c4>)
 8001f92:	f008 fc07 	bl	800a7a4 <puts>
		break;
 8001f96:	e064      	b.n	8002062 <API_err_handler+0x1b6>
	case UNKNOWN_FUNCTION:
		printf("de functie die je invult bestaat niet ");
 8001f98:	483f      	ldr	r0, [pc, #252]	; (8002098 <API_err_handler+0x1ec>)
 8001f9a:	f008 fb67 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001f9e:	4834      	ldr	r0, [pc, #208]	; (8002070 <API_err_handler+0x1c4>)
 8001fa0:	f008 fc00 	bl	800a7a4 <puts>
		break;
 8001fa4:	e05d      	b.n	8002062 <API_err_handler+0x1b6>
	case Y_TO_HIGH:
		printf("de functie gaat de maximale y waarde voorbij ");
 8001fa6:	483d      	ldr	r0, [pc, #244]	; (800209c <API_err_handler+0x1f0>)
 8001fa8:	f008 fb60 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001fac:	4830      	ldr	r0, [pc, #192]	; (8002070 <API_err_handler+0x1c4>)
 8001fae:	f008 fbf9 	bl	800a7a4 <puts>
		break;
 8001fb2:	e056      	b.n	8002062 <API_err_handler+0x1b6>
	case X_TO_HIGH:
		printf("de functie gaat de maximale x waarde voorbij ");
 8001fb4:	483a      	ldr	r0, [pc, #232]	; (80020a0 <API_err_handler+0x1f4>)
 8001fb6:	f008 fb59 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001fba:	482d      	ldr	r0, [pc, #180]	; (8002070 <API_err_handler+0x1c4>)
 8001fbc:	f008 fbf2 	bl	800a7a4 <puts>
		break;
 8001fc0:	e04f      	b.n	8002062 <API_err_handler+0x1b6>
	case NO_SD_CARD_DETECTED:
		printf("er is geen SD kaart aanwezig, check SD kaart slot ");
 8001fc2:	4838      	ldr	r0, [pc, #224]	; (80020a4 <API_err_handler+0x1f8>)
 8001fc4:	f008 fb52 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001fc8:	4829      	ldr	r0, [pc, #164]	; (8002070 <API_err_handler+0x1c4>)
 8001fca:	f008 fbeb 	bl	800a7a4 <puts>
		break;
 8001fce:	e048      	b.n	8002062 <API_err_handler+0x1b6>
	case NO_COMMA_DETECTED:
		printf("er mist een , tussen de verschillende onderdelen van je message ");
 8001fd0:	4835      	ldr	r0, [pc, #212]	; (80020a8 <API_err_handler+0x1fc>)
 8001fd2:	f008 fb4b 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001fd6:	4826      	ldr	r0, [pc, #152]	; (8002070 <API_err_handler+0x1c4>)
 8001fd8:	f008 fbe4 	bl	800a7a4 <puts>
		break;
 8001fdc:	e041      	b.n	8002062 <API_err_handler+0x1b6>
	case NO_END_TERMINATOR:
		printf("er mist een string terminator in je message ");
 8001fde:	4833      	ldr	r0, [pc, #204]	; (80020ac <API_err_handler+0x200>)
 8001fe0:	f008 fb44 	bl	800a66c <iprintf>
		printf("type help voor meer informatie\n");
 8001fe4:	4822      	ldr	r0, [pc, #136]	; (8002070 <API_err_handler+0x1c4>)
 8001fe6:	f008 fbdd 	bl	800a7a4 <puts>
		break;
 8001fea:	e03a      	b.n	8002062 <API_err_handler+0x1b6>
	case HELP:
		printf("------------------------------HELP-----------------------\n");
 8001fec:	4830      	ldr	r0, [pc, #192]	; (80020b0 <API_err_handler+0x204>)
 8001fee:	f008 fbd9 	bl	800a7a4 <puts>
		printf("\n");
 8001ff2:	200a      	movs	r0, #10
 8001ff4:	f008 fb52 	bl	800a69c <putchar>
		printf("Bericht layout's:\n");
 8001ff8:	482e      	ldr	r0, [pc, #184]	; (80020b4 <API_err_handler+0x208>)
 8001ffa:	f008 fbd3 	bl	800a7a4 <puts>
		printf("tekst, x, y, kleur, tekst, fontnaam (arial, consolas), fontgrootte (1,2), fontstijl (normaal, vet, cursief)\n");
 8001ffe:	482e      	ldr	r0, [pc, #184]	; (80020b8 <API_err_handler+0x20c>)
 8002000:	f008 fbd0 	bl	800a7a4 <puts>
		printf("bitmap, nr, x-lup, y-lup  [tenminste: pijl (in 4 richtingen), smiley (boos, blij)]\n");
 8002004:	482d      	ldr	r0, [pc, #180]	; (80020bc <API_err_handler+0x210>)
 8002006:	f008 fbcd 	bl	800a7a4 <puts>
		printf("clearscherm, kleur\n");
 800200a:	482d      	ldr	r0, [pc, #180]	; (80020c0 <API_err_handler+0x214>)
 800200c:	f008 fbca 	bl	800a7a4 <puts>
		printf("wacht, msecs\n");
 8002010:	482c      	ldr	r0, [pc, #176]	; (80020c4 <API_err_handler+0x218>)
 8002012:	f008 fbc7 	bl	800a7a4 <puts>
		printf("cirkel, x, y, radius, kleur\n");
 8002016:	482c      	ldr	r0, [pc, #176]	; (80020c8 <API_err_handler+0x21c>)
 8002018:	f008 fbc4 	bl	800a7a4 <puts>
		printf("rechthoek, x_lup, y_lup, breedte, hoogte, kleur, gevuld (1,0) [als 1: rand (1px) met kleur]\n");
 800201c:	482b      	ldr	r0, [pc, #172]	; (80020cc <API_err_handler+0x220>)
 800201e:	f008 fbc1 	bl	800a7a4 <puts>
		printf("lijn, x, y, x2, y2, kleur, dikte\n");
 8002022:	482b      	ldr	r0, [pc, #172]	; (80020d0 <API_err_handler+0x224>)
 8002024:	f008 fbbe 	bl	800a7a4 <puts>
		printf("blur\n");
 8002028:	482a      	ldr	r0, [pc, #168]	; (80020d4 <API_err_handler+0x228>)
 800202a:	f008 fbbb 	bl	800a7a4 <puts>
		printf("\n");
 800202e:	200a      	movs	r0, #10
 8002030:	f008 fb34 	bl	800a69c <putchar>
		printf("Parameters:\n");
 8002034:	4828      	ldr	r0, [pc, #160]	; (80020d8 <API_err_handler+0x22c>)
 8002036:	f008 fbb5 	bl	800a7a4 <puts>
		printf("Y max = 240\n");
 800203a:	4828      	ldr	r0, [pc, #160]	; (80020dc <API_err_handler+0x230>)
 800203c:	f008 fbb2 	bl	800a7a4 <puts>
		printf("X max = 320\n");
 8002040:	4827      	ldr	r0, [pc, #156]	; (80020e0 <API_err_handler+0x234>)
 8002042:	f008 fbaf 	bl	800a7a4 <puts>
		printf("\n");
 8002046:	200a      	movs	r0, #10
 8002048:	f008 fb28 	bl	800a69c <putchar>
		printf("Voor meer info check de Handleiding\n");
 800204c:	4825      	ldr	r0, [pc, #148]	; (80020e4 <API_err_handler+0x238>)
 800204e:	f008 fba9 	bl	800a7a4 <puts>
		printf("------------------------------einde----------------------\n");
 8002052:	4825      	ldr	r0, [pc, #148]	; (80020e8 <API_err_handler+0x23c>)
 8002054:	f008 fba6 	bl	800a7a4 <puts>
		break;
 8002058:	e003      	b.n	8002062 <API_err_handler+0x1b6>
	default:
		printf("onbekende error");
 800205a:	4824      	ldr	r0, [pc, #144]	; (80020ec <API_err_handler+0x240>)
 800205c:	f008 fb06 	bl	800a66c <iprintf>
		break;
 8002060:	bf00      	nop
	}
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	0800c5f8 	.word	0x0800c5f8
 8002070:	0800c644 	.word	0x0800c644
 8002074:	0800c664 	.word	0x0800c664
 8002078:	0800c6b8 	.word	0x0800c6b8
 800207c:	0800c70c 	.word	0x0800c70c
 8002080:	0800c758 	.word	0x0800c758
 8002084:	0800c7a8 	.word	0x0800c7a8
 8002088:	0800c7f8 	.word	0x0800c7f8
 800208c:	0800c83c 	.word	0x0800c83c
 8002090:	0800c880 	.word	0x0800c880
 8002094:	0800c8bc 	.word	0x0800c8bc
 8002098:	0800c904 	.word	0x0800c904
 800209c:	0800c92c 	.word	0x0800c92c
 80020a0:	0800c95c 	.word	0x0800c95c
 80020a4:	0800c98c 	.word	0x0800c98c
 80020a8:	0800c9c0 	.word	0x0800c9c0
 80020ac:	0800ca04 	.word	0x0800ca04
 80020b0:	0800ca34 	.word	0x0800ca34
 80020b4:	0800ca70 	.word	0x0800ca70
 80020b8:	0800ca84 	.word	0x0800ca84
 80020bc:	0800caf0 	.word	0x0800caf0
 80020c0:	0800cb44 	.word	0x0800cb44
 80020c4:	0800cb58 	.word	0x0800cb58
 80020c8:	0800cb68 	.word	0x0800cb68
 80020cc:	0800cb84 	.word	0x0800cb84
 80020d0:	0800cbe0 	.word	0x0800cbe0
 80020d4:	0800cc04 	.word	0x0800cc04
 80020d8:	0800cc0c 	.word	0x0800cc0c
 80020dc:	0800cc18 	.word	0x0800cc18
 80020e0:	0800cc24 	.word	0x0800cc24
 80020e4:	0800cc30 	.word	0x0800cc30
 80020e8:	0800cc54 	.word	0x0800cc54
 80020ec:	0800cc90 	.word	0x0800cc90

080020f0 <LogicLayer_Parser>:
 *
 * @return deze functie returned de struct Message_parser hierin staan de verschillende variabelen opgedeeld in hokjes en het hoeveelheid ontvangen variabelen
 *
 *****************************************************************************/
Message_parser LogicLayer_Parser(char *PMessage, unsigned int Messagelength)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80020fc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8002100:	6018      	str	r0, [r3, #0]
 8002102:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002106:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800210a:	6019      	str	r1, [r3, #0]
 800210c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002110:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002114:	601a      	str	r2, [r3, #0]
	unsigned int i,j,k,l = 0;			// Maak iterators aan voor het maken van een moving window langs de buffer message
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	i = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	j = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	k = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404


	Message_parser PlocalParser;

	  while (PMessage[i] != 0) 	// Kijk voor line end
 800212e:	e08b      	b.n	8002248 <LogicLayer_Parser+0x158>
	  {

		  while (PMessage[i] != 44 && PMessage[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 8002130:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002134:	3301      	adds	r3, #1
 8002136:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 800213a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800213e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8002142:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d903      	bls.n	8002154 <LogicLayer_Parser+0x64>
			  {
				  API_err_handler(NO_COMMA_DETECTED);
 800214c:	200f      	movs	r0, #15
 800214e:	f7ff fead 	bl	8001eac <API_err_handler>
				  break;
 8002152:	e015      	b.n	8002180 <LogicLayer_Parser+0x90>
		  while (PMessage[i] != 44 && PMessage[i] != 0)		//Detectie van de comma seperator
 8002154:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002158:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002162:	4413      	add	r3, r2
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b2c      	cmp	r3, #44	; 0x2c
 8002168:	d00a      	beq.n	8002180 <LogicLayer_Parser+0x90>
 800216a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800216e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1d7      	bne.n	8002130 <LogicLayer_Parser+0x40>
			  }
		  }

	  	  for (l=0; j<i; j++)
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 8002186:	e022      	b.n	80021ce <LogicLayer_Parser+0xde>
	  	  {
	  		PlocalParser.Parser_Message[k][l] = PMessage[j];
 8002188:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800218c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8002196:	4413      	add	r3, r2
 8002198:	7818      	ldrb	r0, [r3, #0]
 800219a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800219e:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 80021a2:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 80021a6:	2132      	movs	r1, #50	; 0x32
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	441a      	add	r2, r3
 80021ae:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80021b2:	4413      	add	r3, r2
 80021b4:	3301      	adds	r3, #1
 80021b6:	4602      	mov	r2, r0
 80021b8:	701a      	strb	r2, [r3, #0]
	  		l++;
 80021ba:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 80021be:	3301      	adds	r3, #1
 80021c0:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	  	  for (l=0; j<i; j++)
 80021c4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80021c8:	3301      	adds	r3, #1
 80021ca:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
 80021ce:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 80021d2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d3d6      	bcc.n	8002188 <LogicLayer_Parser+0x98>
	  	  }

	  	  j = i+1;
 80021da:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80021de:	3301      	adds	r3, #1
 80021e0:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

	  	  if (PMessage[j] == 0x20)	// checking for spaces between lines
 80021e4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80021e8:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80021f2:	4413      	add	r3, r2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d104      	bne.n	8002204 <LogicLayer_Parser+0x114>
	  	  {
	  		  j++;
 80021fa:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 80021fe:	3301      	adds	r3, #1
 8002200:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	  	  }

	  	  PlocalParser.Parser_Message[k][l] = '\0';
 8002204:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002208:	f5a3 727f 	sub.w	r2, r3, #1020	; 0x3fc
 800220c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002210:	2132      	movs	r1, #50	; 0x32
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	441a      	add	r2, r3
 8002218:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800221c:	4413      	add	r3, r2
 800221e:	3301      	adds	r3, #1
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]

	  	  i++;		//verhoog de iterator om niet in een oneindige loop te komen ivm while loop en komma detectie
 8002224:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002228:	3301      	adds	r3, #1
 800222a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c

	  	  k=(k+1);	//verhoog iterator voor meerdere berichten opslag
 800222e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002232:	3301      	adds	r3, #1
 8002234:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 8002238:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800223c:	2b14      	cmp	r3, #20
 800223e:	d903      	bls.n	8002248 <LogicLayer_Parser+0x158>
	  	  	  {
	  		  	  API_err_handler(NO_END_TERMINATOR);
 8002240:	2011      	movs	r0, #17
 8002242:	f7ff fe33 	bl	8001eac <API_err_handler>
	  		  	  break;
 8002246:	e00b      	b.n	8002260 <LogicLayer_Parser+0x170>
	  while (PMessage[i] != 0) 	// Kijk voor line end
 8002248:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800224c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8002256:	4413      	add	r3, r2
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	f47f af7a 	bne.w	8002154 <LogicLayer_Parser+0x64>
	  	  	  }

	  }

	PlocalParser.Variable_length = k;
 8002260:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002264:	b2da      	uxtb	r2, r3
 8002266:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800226a:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800226e:	701a      	strb	r2, [r3, #0]

	return PlocalParser;
 8002270:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002274:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800227e:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800228a:	461a      	mov	r2, r3
 800228c:	f008 f9d8 	bl	800a640 <memcpy>
}
 8002290:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002294:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <LogicLayer_CommandCheck>:
 *
 * @return returned niks tenzij de commando niet gevonden is
 *
 *****************************************************************************/
int LogicLayer_CommandCheck(Message_parser* PlocalParser)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	int i;
	unsigned char stringLength = sizeof(commands_check) / sizeof(commands_check[0]);
 80022ac:	230a      	movs	r3, #10
 80022ae:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCheck = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	727b      	strb	r3, [r7, #9]
	unsigned char stringCorrect = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	72fb      	strb	r3, [r7, #11]

	for (i = 1; i <= stringLength; i++)
 80022b8:	2301      	movs	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	e016      	b.n	80022ec <LogicLayer_CommandCheck+0x48>
	{
		stringCheck = strcmp(PlocalParser->Parser_Message[0],commands_check[i-1]);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	1c58      	adds	r0, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1e5a      	subs	r2, r3, #1
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4a10      	ldr	r2, [pc, #64]	; (8002310 <LogicLayer_CommandCheck+0x6c>)
 80022d0:	4413      	add	r3, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fd ff7c 	bl	80001d0 <strcmp>
 80022d8:	4603      	mov	r3, r0
 80022da:	727b      	strb	r3, [r7, #9]
		if (stringCheck == 0)
 80022dc:	7a7b      	ldrb	r3, [r7, #9]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <LogicLayer_CommandCheck+0x42>
		{
			stringCorrect = i;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	72fb      	strb	r3, [r7, #11]
	for (i = 1; i <= stringLength; i++)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	7abb      	ldrb	r3, [r7, #10]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dde4      	ble.n	80022be <LogicLayer_CommandCheck+0x1a>
		}
	}

	if (stringCorrect != 0)
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <LogicLayer_CommandCheck+0x5a>
	{
		return stringCorrect;
 80022fa:	7afb      	ldrb	r3, [r7, #11]
 80022fc:	e003      	b.n	8002306 <LogicLayer_CommandCheck+0x62>
	}
	else
		API_err_handler(UNKNOWN_FUNCTION);
 80022fe:	200b      	movs	r0, #11
 8002300:	f7ff fdd4 	bl	8001eac <API_err_handler>
	return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	08015ff4 	.word	0x08015ff4

08002314 <LogicLayer_CommandSwitch>:
 *
 * @return returned niks tenzij er niet genoeg variabelen mee zijn gegeven
 *
 *****************************************************************************/
int LogicLayer_CommandSwitch(Message_parser* PlocalParser, unsigned char Command)
{
 8002314:	b5b0      	push	{r4, r5, r7, lr}
 8002316:	b092      	sub	sp, #72	; 0x48
 8002318:	af04      	add	r7, sp, #16
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
	switch (Command)
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	3b01      	subs	r3, #1
 8002324:	2b09      	cmp	r3, #9
 8002326:	f200 824a 	bhi.w	80027be <LogicLayer_CommandSwitch+0x4aa>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <LogicLayer_CommandSwitch+0x1c>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002359 	.word	0x08002359
 8002334:	08002445 	.word	0x08002445
 8002338:	0800254b 	.word	0x0800254b
 800233c:	080025e9 	.word	0x080025e9
 8002340:	08002661 	.word	0x08002661
 8002344:	0800268d 	.word	0x0800268d
 8002348:	080027bf 	.word	0x080027bf
 800234c:	080026c3 	.word	0x080026c3
 8002350:	080027a1 	.word	0x080027a1
 8002354:	080027b9 	.word	0x080027b9
	{
		case 1:	//lijn
		{
			if (PlocalParser->Variable_length-1 == 6)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b07      	cmp	r3, #7
 800235e:	d16c      	bne.n	800243a <LogicLayer_CommandSwitch+0x126>
			{
				unsigned short x_1, y_1, x_2, y_2;
				unsigned char dikte, color;
				x_1 = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[1]), 1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3333      	adds	r3, #51	; 0x33
 8002364:	4618      	mov	r0, r3
 8002366:	f7fd ff3d 	bl	80001e4 <strlen>
 800236a:	4603      	mov	r3, r0
 800236c:	2201      	movs	r2, #1
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fa6f 	bl	8002854 <LogicLayer_intToAscii>
 8002376:	4603      	mov	r3, r0
 8002378:	82bb      	strh	r3, [r7, #20]
				y_1 = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[2]), 2);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3365      	adds	r3, #101	; 0x65
 800237e:	4618      	mov	r0, r3
 8002380:	f7fd ff30 	bl	80001e4 <strlen>
 8002384:	4603      	mov	r3, r0
 8002386:	2202      	movs	r2, #2
 8002388:	4619      	mov	r1, r3
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fa62 	bl	8002854 <LogicLayer_intToAscii>
 8002390:	4603      	mov	r3, r0
 8002392:	827b      	strh	r3, [r7, #18]
				x_2 = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[3]), 3);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3397      	adds	r3, #151	; 0x97
 8002398:	4618      	mov	r0, r3
 800239a:	f7fd ff23 	bl	80001e4 <strlen>
 800239e:	4603      	mov	r3, r0
 80023a0:	2203      	movs	r2, #3
 80023a2:	4619      	mov	r1, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fa55 	bl	8002854 <LogicLayer_intToAscii>
 80023aa:	4603      	mov	r3, r0
 80023ac:	823b      	strh	r3, [r7, #16]
				y_2 = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[4]), 4);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	33c9      	adds	r3, #201	; 0xc9
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fd ff16 	bl	80001e4 <strlen>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2204      	movs	r2, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fa48 	bl	8002854 <LogicLayer_intToAscii>
 80023c4:	4603      	mov	r3, r0
 80023c6:	81fb      	strh	r3, [r7, #14]
				color = LogicLayer_ColourCheck(PlocalParser, 5);
 80023c8:	2105      	movs	r1, #5
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa02 	bl	80027d4 <LogicLayer_ColourCheck>
 80023d0:	4603      	mov	r3, r0
 80023d2:	737b      	strb	r3, [r7, #13]
				dikte = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[6]), 6);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f203 132d 	addw	r3, r3, #301	; 0x12d
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fd ff02 	bl	80001e4 <strlen>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2206      	movs	r2, #6
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 fa34 	bl	8002854 <LogicLayer_intToAscii>
 80023ec:	4603      	mov	r3, r0
 80023ee:	733b      	strb	r3, [r7, #12]
				if(x_1 > VGA_DISPLAY_X || x_2 > VGA_DISPLAY_X)
 80023f0:	8abb      	ldrh	r3, [r7, #20]
 80023f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80023f6:	d803      	bhi.n	8002400 <LogicLayer_CommandSwitch+0xec>
 80023f8:	8a3b      	ldrh	r3, [r7, #16]
 80023fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80023fe:	d904      	bls.n	800240a <LogicLayer_CommandSwitch+0xf6>
				{
					API_err_handler(X_OUT_OF_BOUNDS);
 8002400:	2002      	movs	r0, #2
 8002402:	f7ff fd53 	bl	8001eac <API_err_handler>
					return 0;
 8002406:	2300      	movs	r3, #0
 8002408:	e1df      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_1 > VGA_DISPLAY_Y || y_2 > VGA_DISPLAY_Y)
 800240a:	8a7b      	ldrh	r3, [r7, #18]
 800240c:	2bf0      	cmp	r3, #240	; 0xf0
 800240e:	d802      	bhi.n	8002416 <LogicLayer_CommandSwitch+0x102>
 8002410:	89fb      	ldrh	r3, [r7, #14]
 8002412:	2bf0      	cmp	r3, #240	; 0xf0
 8002414:	d904      	bls.n	8002420 <LogicLayer_CommandSwitch+0x10c>
				{
					API_err_handler(Y_OUT_OF_BOUNDS);
 8002416:	2003      	movs	r0, #3
 8002418:	f7ff fd48 	bl	8001eac <API_err_handler>
					return 0;
 800241c:	2300      	movs	r3, #0
 800241e:	e1d4      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				API_draw_line(x_1, y_1, x_2, y_2, dikte, color);
 8002420:	89fc      	ldrh	r4, [r7, #14]
 8002422:	8a3a      	ldrh	r2, [r7, #16]
 8002424:	8a79      	ldrh	r1, [r7, #18]
 8002426:	8ab8      	ldrh	r0, [r7, #20]
 8002428:	7b7b      	ldrb	r3, [r7, #13]
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	7b3b      	ldrb	r3, [r7, #12]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	4623      	mov	r3, r4
 8002432:	f7fe fd9b 	bl	8000f6c <API_draw_line>
				return 0;
 8002436:	2300      	movs	r3, #0
 8002438:	e1c7      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				break;
			}
			else
				API_err_handler(INVALID_MESSAGE);
 800243a:	2001      	movs	r0, #1
 800243c:	f7ff fd36 	bl	8001eac <API_err_handler>
			return 0;
 8002440:	2300      	movs	r3, #0
 8002442:	e1c2      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
		}

		case 2:	//rechthoek
		{
			if (PlocalParser->Variable_length-1 == 6)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b07      	cmp	r3, #7
 800244a:	d179      	bne.n	8002540 <LogicLayer_CommandSwitch+0x22c>
			{
				unsigned short x_lup,  y_lup,  breedte,  hoogte;
				unsigned char color, gevuld;
				x_lup = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[1]), 1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3333      	adds	r3, #51	; 0x33
 8002450:	4618      	mov	r0, r3
 8002452:	f7fd fec7 	bl	80001e4 <strlen>
 8002456:	4603      	mov	r3, r0
 8002458:	2201      	movs	r2, #1
 800245a:	4619      	mov	r1, r3
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f9f9 	bl	8002854 <LogicLayer_intToAscii>
 8002462:	4603      	mov	r3, r0
 8002464:	83fb      	strh	r3, [r7, #30]
				y_lup = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[2]), 2);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3365      	adds	r3, #101	; 0x65
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd feba 	bl	80001e4 <strlen>
 8002470:	4603      	mov	r3, r0
 8002472:	2202      	movs	r2, #2
 8002474:	4619      	mov	r1, r3
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f9ec 	bl	8002854 <LogicLayer_intToAscii>
 800247c:	4603      	mov	r3, r0
 800247e:	83bb      	strh	r3, [r7, #28]
				breedte = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[3]), 3);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3397      	adds	r3, #151	; 0x97
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd fead 	bl	80001e4 <strlen>
 800248a:	4603      	mov	r3, r0
 800248c:	2203      	movs	r2, #3
 800248e:	4619      	mov	r1, r3
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f9df 	bl	8002854 <LogicLayer_intToAscii>
 8002496:	4603      	mov	r3, r0
 8002498:	837b      	strh	r3, [r7, #26]
				hoogte = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[4]), 4);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	33c9      	adds	r3, #201	; 0xc9
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fd fea0 	bl	80001e4 <strlen>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2204      	movs	r2, #4
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f9d2 	bl	8002854 <LogicLayer_intToAscii>
 80024b0:	4603      	mov	r3, r0
 80024b2:	833b      	strh	r3, [r7, #24]
				color = LogicLayer_ColourCheck(PlocalParser, 5);
 80024b4:	2105      	movs	r1, #5
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 f98c 	bl	80027d4 <LogicLayer_ColourCheck>
 80024bc:	4603      	mov	r3, r0
 80024be:	75fb      	strb	r3, [r7, #23]
				gevuld = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[6]), 6);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f203 132d 	addw	r3, r3, #301	; 0x12d
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd fe8c 	bl	80001e4 <strlen>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2206      	movs	r2, #6
 80024d0:	4619      	mov	r1, r3
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f9be 	bl	8002854 <LogicLayer_intToAscii>
 80024d8:	4603      	mov	r3, r0
 80024da:	75bb      	strb	r3, [r7, #22]
				if(x_lup > VGA_DISPLAY_X)
 80024dc:	8bfb      	ldrh	r3, [r7, #30]
 80024de:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024e2:	d904      	bls.n	80024ee <LogicLayer_CommandSwitch+0x1da>
				{
					API_err_handler(X_OUT_OF_BOUNDS);
 80024e4:	2002      	movs	r0, #2
 80024e6:	f7ff fce1 	bl	8001eac <API_err_handler>
					return 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e16d      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				if(x_lup+breedte > VGA_DISPLAY_X)
 80024ee:	8bfa      	ldrh	r2, [r7, #30]
 80024f0:	8b7b      	ldrh	r3, [r7, #26]
 80024f2:	4413      	add	r3, r2
 80024f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024f8:	dd04      	ble.n	8002504 <LogicLayer_CommandSwitch+0x1f0>
				{
					API_err_handler(X_TO_HIGH);
 80024fa:	200d      	movs	r0, #13
 80024fc:	f7ff fcd6 	bl	8001eac <API_err_handler>
					return 0;
 8002500:	2300      	movs	r3, #0
 8002502:	e162      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_lup > VGA_DISPLAY_Y)
 8002504:	8bbb      	ldrh	r3, [r7, #28]
 8002506:	2bf0      	cmp	r3, #240	; 0xf0
 8002508:	d904      	bls.n	8002514 <LogicLayer_CommandSwitch+0x200>
				{
					API_err_handler(Y_OUT_OF_BOUNDS);
 800250a:	2003      	movs	r0, #3
 800250c:	f7ff fcce 	bl	8001eac <API_err_handler>
					return 0;
 8002510:	2300      	movs	r3, #0
 8002512:	e15a      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_lup+hoogte > VGA_DISPLAY_Y)
 8002514:	8bba      	ldrh	r2, [r7, #28]
 8002516:	8b3b      	ldrh	r3, [r7, #24]
 8002518:	4413      	add	r3, r2
 800251a:	2bf0      	cmp	r3, #240	; 0xf0
 800251c:	dd04      	ble.n	8002528 <LogicLayer_CommandSwitch+0x214>
				{
					API_err_handler(Y_TO_HIGH);
 800251e:	200c      	movs	r0, #12
 8002520:	f7ff fcc4 	bl	8001eac <API_err_handler>
					return 0;
 8002524:	2300      	movs	r3, #0
 8002526:	e150      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}

				API_draw_rectangle(x_lup, y_lup, breedte, hoogte, color, gevuld);
 8002528:	8b3c      	ldrh	r4, [r7, #24]
 800252a:	8b7a      	ldrh	r2, [r7, #26]
 800252c:	8bb9      	ldrh	r1, [r7, #28]
 800252e:	8bf8      	ldrh	r0, [r7, #30]
 8002530:	7dbb      	ldrb	r3, [r7, #22]
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	4623      	mov	r3, r4
 800253a:	f7fe fde5 	bl	8001108 <API_draw_rectangle>

				break;
 800253e:	e143      	b.n	80027c8 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 8002540:	2001      	movs	r0, #1
 8002542:	f7ff fcb3 	bl	8001eac <API_err_handler>
			return 0;
 8002546:	2300      	movs	r3, #0
 8002548:	e13f      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
		}

		case 3: //tekst
		{
			if (PlocalParser->Variable_length-1 == 7)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b08      	cmp	r3, #8
 8002550:	d145      	bne.n	80025de <LogicLayer_CommandSwitch+0x2ca>
			{
				uint16_t x = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[1]), 1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3333      	adds	r3, #51	; 0x33
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd fe44 	bl	80001e4 <strlen>
 800255c:	4603      	mov	r3, r0
 800255e:	2201      	movs	r2, #1
 8002560:	4619      	mov	r1, r3
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f976 	bl	8002854 <LogicLayer_intToAscii>
 8002568:	4603      	mov	r3, r0
 800256a:	84bb      	strh	r3, [r7, #36]	; 0x24
				uint16_t y = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[2]), 2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3365      	adds	r3, #101	; 0x65
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd fe37 	bl	80001e4 <strlen>
 8002576:	4603      	mov	r3, r0
 8002578:	2202      	movs	r2, #2
 800257a:	4619      	mov	r1, r3
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f969 	bl	8002854 <LogicLayer_intToAscii>
 8002582:	4603      	mov	r3, r0
 8002584:	847b      	strh	r3, [r7, #34]	; 0x22
				uint8_t kleur = LogicLayer_ColourCheck(PlocalParser, 3);
 8002586:	2103      	movs	r1, #3
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f923 	bl	80027d4 <LogicLayer_ColourCheck>
 800258e:	4603      	mov	r3, r0
 8002590:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				uint8_t fontgrootte = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[6]), 6);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f203 132d 	addw	r3, r3, #301	; 0x12d
 800259a:	4618      	mov	r0, r3
 800259c:	f7fd fe22 	bl	80001e4 <strlen>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2206      	movs	r2, #6
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f954 	bl	8002854 <LogicLayer_intToAscii>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f887 3020 	strb.w	r3, [r7, #32]

				API_draw_text(x, y, kleur, PlocalParser->Parser_Message[4],PlocalParser->Parser_Message[5], fontgrootte, PlocalParser->Parser_Message[7]);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f103 05c9 	add.w	r5, r3, #201	; 0xc9
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	33fb      	adds	r3, #251	; 0xfb
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	f202 125f 	addw	r2, r2, #351	; 0x15f
 80025c2:	f897 4021 	ldrb.w	r4, [r7, #33]	; 0x21
 80025c6:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 80025c8:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80025ca:	9202      	str	r2, [sp, #8]
 80025cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025d0:	9201      	str	r2, [sp, #4]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	462b      	mov	r3, r5
 80025d6:	4622      	mov	r2, r4
 80025d8:	f7fe fe96 	bl	8001308 <API_draw_text>
				break;
 80025dc:	e0f4      	b.n	80027c8 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 80025de:	2001      	movs	r0, #1
 80025e0:	f7ff fc64 	bl	8001eac <API_err_handler>
			return 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e0f0      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
		}

		case 4: //bitmap
		{

			if (PlocalParser->Variable_length-1 == 3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d132      	bne.n	8002656 <LogicLayer_CommandSwitch+0x342>
			{
				unsigned short x_lup = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[2]), 2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3365      	adds	r3, #101	; 0x65
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd fdf5 	bl	80001e4 <strlen>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2202      	movs	r2, #2
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f927 	bl	8002854 <LogicLayer_intToAscii>
 8002606:	4603      	mov	r3, r0
 8002608:	853b      	strh	r3, [r7, #40]	; 0x28
				unsigned short y_lup = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[3]), 3);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3397      	adds	r3, #151	; 0x97
 800260e:	4618      	mov	r0, r3
 8002610:	f7fd fde8 	bl	80001e4 <strlen>
 8002614:	4603      	mov	r3, r0
 8002616:	2203      	movs	r2, #3
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f91a 	bl	8002854 <LogicLayer_intToAscii>
 8002620:	4603      	mov	r3, r0
 8002622:	84fb      	strh	r3, [r7, #38]	; 0x26
				if(x_lup > VGA_DISPLAY_X)
 8002624:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002626:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800262a:	d904      	bls.n	8002636 <LogicLayer_CommandSwitch+0x322>
				{
					API_err_handler(X_OUT_OF_BOUNDS);
 800262c:	2002      	movs	r0, #2
 800262e:	f7ff fc3d 	bl	8001eac <API_err_handler>
					return 0;
 8002632:	2300      	movs	r3, #0
 8002634:	e0c9      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_lup > VGA_DISPLAY_Y)
 8002636:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002638:	2bf0      	cmp	r3, #240	; 0xf0
 800263a:	d904      	bls.n	8002646 <LogicLayer_CommandSwitch+0x332>
				{
					API_err_handler(Y_OUT_OF_BOUNDS);
 800263c:	2003      	movs	r0, #3
 800263e:	f7ff fc35 	bl	8001eac <API_err_handler>
					return 0;
 8002642:	2300      	movs	r3, #0
 8002644:	e0c1      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				API_read_bitmap_SD(PlocalParser->Parser_Message[1], x_lup, y_lup);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3333      	adds	r3, #51	; 0x33
 800264a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800264c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fa4c 	bl	8001aec <API_read_bitmap_SD>
				break;
 8002654:	e0b8      	b.n	80027c8 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 8002656:	2001      	movs	r0, #1
 8002658:	f7ff fc28 	bl	8001eac <API_err_handler>
			return 0;
 800265c:	2300      	movs	r3, #0
 800265e:	e0b4      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
		}

		case 5: //clearscherm
		{
			if (PlocalParser->Variable_length-1 == 1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d10c      	bne.n	8002682 <LogicLayer_CommandSwitch+0x36e>
			{
				unsigned char color;
				color = LogicLayer_ColourCheck(PlocalParser, 1);
 8002668:	2101      	movs	r1, #1
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f8b2 	bl	80027d4 <LogicLayer_ColourCheck>
 8002670:	4603      	mov	r3, r0
 8002672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				UB_VGA_FillScreen(color);
 8002676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800267a:	4618      	mov	r0, r3
 800267c:	f000 ffda 	bl	8003634 <UB_VGA_FillScreen>
				break;
 8002680:	e0a2      	b.n	80027c8 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 8002682:	2001      	movs	r0, #1
 8002684:	f7ff fc12 	bl	8001eac <API_err_handler>
			return 0;
 8002688:	2300      	movs	r3, #0
 800268a:	e09e      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
		}

		case 6:
		{
			if (PlocalParser->Variable_length-1 == 1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d111      	bne.n	80026b8 <LogicLayer_CommandSwitch+0x3a4>
			{
				unsigned int msecs = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[1]), 1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3333      	adds	r3, #51	; 0x33
 8002698:	4618      	mov	r0, r3
 800269a:	f7fd fda3 	bl	80001e4 <strlen>
 800269e:	4603      	mov	r3, r0
 80026a0:	2201      	movs	r2, #1
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f8d5 	bl	8002854 <LogicLayer_intToAscii>
 80026aa:	62f8      	str	r0, [r7, #44]	; 0x2c
				API_wacht(msecs);
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fbed 	bl	8001e90 <API_wacht>
				break;
 80026b6:	e087      	b.n	80027c8 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7ff fbf7 	bl	8001eac <API_err_handler>
			return 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	e083      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
		}

		case 8:
		{
			if (PlocalParser->Variable_length-1 == 4)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d165      	bne.n	8002796 <LogicLayer_CommandSwitch+0x482>
			{
				uint16_t x_c = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[1]), 1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3333      	adds	r3, #51	; 0x33
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fd88 	bl	80001e4 <strlen>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2201      	movs	r2, #1
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8ba 	bl	8002854 <LogicLayer_intToAscii>
 80026e0:	4603      	mov	r3, r0
 80026e2:	86fb      	strh	r3, [r7, #54]	; 0x36
				uint16_t y_c = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[2]), 2);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3365      	adds	r3, #101	; 0x65
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd fd7b 	bl	80001e4 <strlen>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2202      	movs	r2, #2
 80026f2:	4619      	mov	r1, r3
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f8ad 	bl	8002854 <LogicLayer_intToAscii>
 80026fa:	4603      	mov	r3, r0
 80026fc:	86bb      	strh	r3, [r7, #52]	; 0x34
				uint16_t radius = LogicLayer_intToAscii(PlocalParser, strlen(PlocalParser->Parser_Message[3]), 3);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3397      	adds	r3, #151	; 0x97
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd fd6e 	bl	80001e4 <strlen>
 8002708:	4603      	mov	r3, r0
 800270a:	2203      	movs	r2, #3
 800270c:	4619      	mov	r1, r3
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f8a0 	bl	8002854 <LogicLayer_intToAscii>
 8002714:	4603      	mov	r3, r0
 8002716:	867b      	strh	r3, [r7, #50]	; 0x32
				uint8_t color = LogicLayer_ColourCheck(PlocalParser, 4);
 8002718:	2104      	movs	r1, #4
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f85a 	bl	80027d4 <LogicLayer_ColourCheck>
 8002720:	4603      	mov	r3, r0
 8002722:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				if(x_c > VGA_DISPLAY_X)
 8002726:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002728:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800272c:	d904      	bls.n	8002738 <LogicLayer_CommandSwitch+0x424>
				{
					API_err_handler(X_OUT_OF_BOUNDS);
 800272e:	2002      	movs	r0, #2
 8002730:	f7ff fbbc 	bl	8001eac <API_err_handler>
					return 0;
 8002734:	2300      	movs	r3, #0
 8002736:	e048      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				if(x_c+radius > VGA_DISPLAY_X || x_c-radius < 0)
 8002738:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800273a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800273c:	4413      	add	r3, r2
 800273e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002742:	dc04      	bgt.n	800274e <LogicLayer_CommandSwitch+0x43a>
 8002744:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002746:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	da04      	bge.n	8002758 <LogicLayer_CommandSwitch+0x444>
				{
					API_err_handler(X_TO_HIGH);
 800274e:	200d      	movs	r0, #13
 8002750:	f7ff fbac 	bl	8001eac <API_err_handler>
					return 0;
 8002754:	2300      	movs	r3, #0
 8002756:	e038      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_c > VGA_DISPLAY_Y)
 8002758:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800275a:	2bf0      	cmp	r3, #240	; 0xf0
 800275c:	d904      	bls.n	8002768 <LogicLayer_CommandSwitch+0x454>
				{
					API_err_handler(Y_OUT_OF_BOUNDS);
 800275e:	2003      	movs	r0, #3
 8002760:	f7ff fba4 	bl	8001eac <API_err_handler>
					return 0;
 8002764:	2300      	movs	r3, #0
 8002766:	e030      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				if(y_c+radius > VGA_DISPLAY_Y || y_c-radius < 0)
 8002768:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800276a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800276c:	4413      	add	r3, r2
 800276e:	2bf0      	cmp	r3, #240	; 0xf0
 8002770:	dc04      	bgt.n	800277c <LogicLayer_CommandSwitch+0x468>
 8002772:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002774:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	da04      	bge.n	8002786 <LogicLayer_CommandSwitch+0x472>
				{
					API_err_handler(Y_TO_HIGH);
 800277c:	200c      	movs	r0, #12
 800277e:	f7ff fb95 	bl	8001eac <API_err_handler>
					return 0;
 8002782:	2300      	movs	r3, #0
 8002784:	e021      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
				}
				API_draw_circle(x_c, y_c, radius, color);
 8002786:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800278a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800278c:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800278e:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8002790:	f7fe fd3e 	bl	8001210 <API_draw_circle>

				break;
 8002794:	e018      	b.n	80027c8 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 8002796:	2001      	movs	r0, #1
 8002798:	f7ff fb88 	bl	8001eac <API_err_handler>
			return 0;
 800279c:	2300      	movs	r3, #0
 800279e:	e014      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
		}

		case 9:
		{
			if (PlocalParser->Variable_length-1 == 0)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d102      	bne.n	80027ae <LogicLayer_CommandSwitch+0x49a>
			{
				API_blur_screen();
 80027a8:	f7ff faec 	bl	8001d84 <API_blur_screen>
				break;
 80027ac:	e00c      	b.n	80027c8 <LogicLayer_CommandSwitch+0x4b4>
			}
			else
				API_err_handler(INVALID_MESSAGE);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7ff fb7c 	bl	8001eac <API_err_handler>
			return 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	e008      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
		}

		case 10:
		{
			API_err_handler(HELP);
 80027b8:	2012      	movs	r0, #18
 80027ba:	f7ff fb77 	bl	8001eac <API_err_handler>
		}
		default:
		{
			API_err_handler(NO_ERROR);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7ff fb74 	bl	8001eac <API_err_handler>
			return 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <LogicLayer_CommandSwitch+0x4b6>
		}
	}
	return NO_ERROR;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3738      	adds	r7, #56	; 0x38
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bdb0      	pop	{r4, r5, r7, pc}
 80027d2:	bf00      	nop

080027d4 <LogicLayer_ColourCheck>:
 *
 * @return returned nul tenzij de kleur niet is gevonden
 *
 *****************************************************************************/
int LogicLayer_ColourCheck(Message_parser* PlocalParser, unsigned char StructLocation)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	70fb      	strb	r3, [r7, #3]
	int i;
	unsigned char stringLength = sizeof(message_col_string) / sizeof(message_col_string[0])+1;
 80027e0:	2310      	movs	r3, #16
 80027e2:	72fb      	strb	r3, [r7, #11]
	unsigned char stringCheck = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCorrect = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	727b      	strb	r3, [r7, #9]

	for (i = 1; i < stringLength; i++)
 80027ec:	2301      	movs	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	e020      	b.n	8002834 <LogicLayer_ColourCheck+0x60>
	{
		stringCheck = strcmp(PlocalParser->Parser_Message[StructLocation],message_col_string[i-1]);
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	2232      	movs	r2, #50	; 0x32
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	1c58      	adds	r0, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4a0f      	ldr	r2, [pc, #60]	; (800284c <LogicLayer_ColourCheck+0x78>)
 800280e:	4413      	add	r3, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f7fd fcdd 	bl	80001d0 <strcmp>
 8002816:	4603      	mov	r3, r0
 8002818:	72bb      	strb	r3, [r7, #10]
		if (stringCheck == 0)
 800281a:	7abb      	ldrb	r3, [r7, #10]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d106      	bne.n	800282e <LogicLayer_ColourCheck+0x5a>
		{
			return stringCorrect = message_col[i-1];
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3b01      	subs	r3, #1
 8002824:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <LogicLayer_ColourCheck+0x7c>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	727b      	strb	r3, [r7, #9]
 800282a:	7a7b      	ldrb	r3, [r7, #9]
 800282c:	e00a      	b.n	8002844 <LogicLayer_ColourCheck+0x70>
	for (i = 1; i < stringLength; i++)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3301      	adds	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	7afb      	ldrb	r3, [r7, #11]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	dbda      	blt.n	80027f2 <LogicLayer_ColourCheck+0x1e>
		}
	}

	API_err_handler(UNKNOWN_COLOR);
 800283c:	2006      	movs	r0, #6
 800283e:	f7ff fb35 	bl	8001eac <API_err_handler>
	return 0;
 8002842:	2300      	movs	r3, #0

}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	080160bc 	.word	0x080160bc
 8002850:	080161e8 	.word	0x080161e8

08002854 <LogicLayer_intToAscii>:
 *
 * @return returned nul tenzij de gegeven waardes geen cijfer is
 *
 *****************************************************************************/
unsigned int LogicLayer_intToAscii(Message_parser* PlocalParser, int numbersize, int StructLocation)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
	unsigned char i = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	77fb      	strb	r3, [r7, #31]
	unsigned char DecimalshiftBuff = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	75fb      	strb	r3, [r7, #23]
	unsigned int decimalvalue = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < numbersize; i++)
 800286c:	2300      	movs	r3, #0
 800286e:	77fb      	strb	r3, [r7, #31]
 8002870:	e020      	b.n	80028b4 <LogicLayer_intToAscii+0x60>
	{

		DecimalshiftBuff = PlocalParser->Parser_Message[StructLocation][i];	// making sure array doesnt have a negative number
 8002872:	7ffb      	ldrb	r3, [r7, #31]
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	2032      	movs	r0, #50	; 0x32
 800287a:	fb00 f202 	mul.w	r2, r0, r2
 800287e:	440a      	add	r2, r1
 8002880:	4413      	add	r3, r2
 8002882:	3301      	adds	r3, #1
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	75fb      	strb	r3, [r7, #23]
		if (DecimalshiftBuff < '0' ||  DecimalshiftBuff > '9')
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b2f      	cmp	r3, #47	; 0x2f
 800288c:	d90f      	bls.n	80028ae <LogicLayer_intToAscii+0x5a>
 800288e:	7dfb      	ldrb	r3, [r7, #23]
 8002890:	2b39      	cmp	r3, #57	; 0x39
 8002892:	d80c      	bhi.n	80028ae <LogicLayer_intToAscii+0x5a>
		{

		}
		else
		{
			DecimalshiftBuff -= '0';
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	3b30      	subs	r3, #48	; 0x30
 8002898:	75fb      	strb	r3, [r7, #23]

			decimalvalue *= 10;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
			decimalvalue += DecimalshiftBuff;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	3301      	adds	r3, #1
 80028b2:	77fb      	strb	r3, [r7, #31]
 80028b4:	7ffb      	ldrb	r3, [r7, #31]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	dcda      	bgt.n	8002872 <LogicLayer_intToAscii+0x1e>
		}
	}
	return decimalvalue;
 80028bc:	69bb      	ldr	r3, [r7, #24]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <MX_DMA_Init+0x3c>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <MX_DMA_Init+0x3c>)
 80028dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <MX_DMA_Init+0x3c>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	2044      	movs	r0, #68	; 0x44
 80028f4:	f001 f85b 	bl	80039ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80028f8:	2044      	movs	r0, #68	; 0x44
 80028fa:	f001 f874 	bl	80039e6 <HAL_NVIC_EnableIRQ>

}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023800 	.word	0x40023800

0800290c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	605a      	str	r2, [r3, #4]
 800291c:	609a      	str	r2, [r3, #8]
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <MX_GPIO_Init+0x108>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a3a      	ldr	r2, [pc, #232]	; (8002a14 <MX_GPIO_Init+0x108>)
 800292c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b38      	ldr	r3, [pc, #224]	; (8002a14 <MX_GPIO_Init+0x108>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b34      	ldr	r3, [pc, #208]	; (8002a14 <MX_GPIO_Init+0x108>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a33      	ldr	r2, [pc, #204]	; (8002a14 <MX_GPIO_Init+0x108>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <MX_GPIO_Init+0x108>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <MX_GPIO_Init+0x108>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <MX_GPIO_Init+0x108>)
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <MX_GPIO_Init+0x108>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	607b      	str	r3, [r7, #4]
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <MX_GPIO_Init+0x108>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <MX_GPIO_Init+0x108>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b23      	ldr	r3, [pc, #140]	; (8002a14 <MX_GPIO_Init+0x108>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002992:	2200      	movs	r2, #0
 8002994:	2102      	movs	r1, #2
 8002996:	4820      	ldr	r0, [pc, #128]	; (8002a18 <MX_GPIO_Init+0x10c>)
 8002998:	f001 fdde 	bl	8004558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 800299c:	2200      	movs	r2, #0
 800299e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80029a2:	481e      	ldr	r0, [pc, #120]	; (8002a1c <MX_GPIO_Init+0x110>)
 80029a4:	f001 fdd8 	bl	8004558 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 80029a8:	2200      	movs	r2, #0
 80029aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ae:	481c      	ldr	r0, [pc, #112]	; (8002a20 <MX_GPIO_Init+0x114>)
 80029b0:	f001 fdd2 	bl	8004558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80029b4:	2302      	movs	r3, #2
 80029b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b8:	2301      	movs	r3, #1
 80029ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029bc:	2301      	movs	r3, #1
 80029be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4619      	mov	r1, r3
 80029ca:	4813      	ldr	r0, [pc, #76]	; (8002a18 <MX_GPIO_Init+0x10c>)
 80029cc:	f001 fc28 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 80029d0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80029d4:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d6:	2301      	movs	r3, #1
 80029d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	480c      	ldr	r0, [pc, #48]	; (8002a1c <MX_GPIO_Init+0x110>)
 80029ea:	f001 fc19 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 80029ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f4:	2301      	movs	r3, #1
 80029f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fc:	2303      	movs	r3, #3
 80029fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	4619      	mov	r1, r3
 8002a06:	4806      	ldr	r0, [pc, #24]	; (8002a20 <MX_GPIO_Init+0x114>)
 8002a08:	f001 fc0a 	bl	8004220 <HAL_GPIO_Init>

}
 8002a0c:	bf00      	nop
 8002a0e:	3728      	adds	r7, #40	; 0x28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020000 	.word	0x40020000
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40020400 	.word	0x40020400

08002a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a2c:	f000 fe4e 	bl	80036cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a30:	f000 f8b0 	bl	8002b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a34:	f7ff ff6a 	bl	800290c <MX_GPIO_Init>
  MX_DMA_Init();
 8002a38:	f7ff ff48 	bl	80028cc <MX_DMA_Init>
  MX_TIM1_Init();
 8002a3c:	f000 fb9c 	bl	8003178 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002a40:	f000 fbea 	bl	8003218 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002a44:	f000 fd00 	bl	8003448 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8002a48:	f004 fefa 	bl	8007840 <MX_FATFS_Init>
  MX_SPI1_Init();
 8002a4c:	f000 f926 	bl	8002c9c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8002a50:	f000 fd9e 	bl	8003590 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f000 fded 	bl	8003634 <UB_VGA_FillScreen>
  unsigned int i = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
  for(i = 0; i < LINE_BUFLEN; i++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002a66:	e00b      	b.n	8002a80 <main+0x5c>
	  input.line_rx_buffer[i] = 0;
 8002a68:	4a46      	ldr	r2, [pc, #280]	; (8002b84 <main+0x160>)
 8002a6a:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002a6e:	4413      	add	r3, r2
 8002a70:	3301      	adds	r3, #1
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8002a76:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002a80:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a88:	d3ee      	bcc.n	8002a68 <main+0x44>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <main+0x160>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8002a90:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <main+0x160>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  input.command_execute_flag = FALSE;
 8002a98:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <main+0x160>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, LINE_BUFLEN);
 8002aa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aa4:	4937      	ldr	r1, [pc, #220]	; (8002b84 <main+0x160>)
 8002aa6:	4838      	ldr	r0, [pc, #224]	; (8002b88 <main+0x164>)
 8002aa8:	f003 ff27 	bl	80068fa <HAL_UART_Receive_IT>

  int Test = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(input.command_execute_flag == TRUE)
 8002ab2:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <main+0x160>)
 8002ab4:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8002ab8:	2bff      	cmp	r3, #255	; 0xff
 8002aba:	d1fa      	bne.n	8002ab2 <main+0x8e>
	  {
		  Debugging = LogicLayer_Parser(input.line_rx_buffer, LINE_BUFLEN);
 8002abc:	4c33      	ldr	r4, [pc, #204]	; (8002b8c <main+0x168>)
 8002abe:	463b      	mov	r3, r7
 8002ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ac4:	4932      	ldr	r1, [pc, #200]	; (8002b90 <main+0x16c>)
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fb12 	bl	80020f0 <LogicLayer_Parser>
 8002acc:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8002ad0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8002adc:	461a      	mov	r2, r3
 8002ade:	f007 fdaf 	bl	800a640 <memcpy>
		  Test = LogicLayer_CommandCheck(&Debugging);
 8002ae2:	482a      	ldr	r0, [pc, #168]	; (8002b8c <main+0x168>)
 8002ae4:	f7ff fbde 	bl	80022a4 <LogicLayer_CommandCheck>
 8002ae8:	f8c7 03f4 	str.w	r0, [r7, #1012]	; 0x3f4
		  if (Test == 0)
 8002aec:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d006      	beq.n	8002b02 <main+0xde>
		  {
			  //error handler
		  }
		  else
		  {
			  LogicLayer_CommandSwitch(&Debugging, Test);
 8002af4:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4619      	mov	r1, r3
 8002afc:	4823      	ldr	r0, [pc, #140]	; (8002b8c <main+0x168>)
 8002afe:	f7ff fc09 	bl	8002314 <LogicLayer_CommandSwitch>
		  }
		  for(i = 0; i < LINE_BUFLEN; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002b08:	e00b      	b.n	8002b22 <main+0xfe>
			  input.line_rx_buffer[i] = 0;
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <main+0x160>)
 8002b0c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b10:	4413      	add	r3, r2
 8002b12:	3301      	adds	r3, #1
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
		  for(i = 0; i < LINE_BUFLEN; i++)
 8002b18:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002b22:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b2a:	d3ee      	bcc.n	8002b0a <main+0xe6>
		  for (i = 0; i < ARGUMENTEN_LEN; i++)
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002b32:	e01e      	b.n	8002b72 <main+0x14e>
			  for (int j = 0; j < BUFFER_LEN_PARSER; j++)
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8002b3a:	e011      	b.n	8002b60 <main+0x13c>
				  Debugging.Parser_Message[i][j] = 0;
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <main+0x168>)
 8002b3e:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b42:	2132      	movs	r1, #50	; 0x32
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	441a      	add	r2, r3
 8002b4a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002b4e:	4413      	add	r3, r2
 8002b50:	3301      	adds	r3, #1
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
			  for (int j = 0; j < BUFFER_LEN_PARSER; j++)
 8002b56:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8
 8002b60:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 8002b64:	2b31      	cmp	r3, #49	; 0x31
 8002b66:	dde9      	ble.n	8002b3c <main+0x118>
		  for (i = 0; i < ARGUMENTEN_LEN; i++)
 8002b68:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 8002b72:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8002b76:	2b13      	cmp	r3, #19
 8002b78:	d9dc      	bls.n	8002b34 <main+0x110>
		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8002b7a:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <main+0x160>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
	  if(input.command_execute_flag == TRUE)
 8002b82:	e796      	b.n	8002ab2 <main+0x8e>
 8002b84:	200000a4 	.word	0x200000a4
 8002b88:	200009ec 	.word	0x200009ec
 8002b8c:	200004b4 	.word	0x200004b4
 8002b90:	200000a5 	.word	0x200000a5

08002b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b094      	sub	sp, #80	; 0x50
 8002b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b9a:	f107 0320 	add.w	r3, r7, #32
 8002b9e:	2230      	movs	r2, #48	; 0x30
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f007 fd5a 	bl	800a65c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	4b28      	ldr	r3, [pc, #160]	; (8002c60 <SystemClock_Config+0xcc>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <SystemClock_Config+0xcc>)
 8002bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc8:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <SystemClock_Config+0xcc>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <SystemClock_Config+0xd0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a21      	ldr	r2, [pc, #132]	; (8002c64 <SystemClock_Config+0xd0>)
 8002bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <SystemClock_Config+0xd0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c04:	2304      	movs	r3, #4
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002c08:	23a8      	movs	r3, #168	; 0xa8
 8002c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002c10:	2307      	movs	r3, #7
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c14:	f107 0320 	add.w	r3, r7, #32
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 fcb7 	bl	800458c <HAL_RCC_OscConfig>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c24:	f000 f832 	bl	8002c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c28:	230f      	movs	r3, #15
 8002c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	2105      	movs	r1, #5
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 ff18 	bl	8004a7c <HAL_RCC_ClockConfig>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002c52:	f000 f81b 	bl	8002c8c <Error_Handler>
  }
}
 8002c56:	bf00      	nop
 8002c58:	3750      	adds	r7, #80	; 0x50
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40007000 	.word	0x40007000

08002c68 <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8002c70:	1d39      	adds	r1, r7, #4
 8002c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c76:	2201      	movs	r2, #1
 8002c78:	4803      	ldr	r0, [pc, #12]	; (8002c88 <__io_putchar+0x20>)
 8002c7a:	f003 fdac 	bl	80067d6 <HAL_UART_Transmit>
	return ch;												//Return the character
 8002c7e:	687b      	ldr	r3, [r7, #4]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200009ec 	.word	0x200009ec

08002c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ca0:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <MX_SPI1_Init+0x68>)
 8002ca4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002ca8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ccc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002cd0:	2238      	movs	r2, #56	; 0x38
 8002cd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002ce8:	220a      	movs	r2, #10
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cec:	4804      	ldr	r0, [pc, #16]	; (8002d00 <MX_SPI1_Init+0x64>)
 8002cee:	f002 f8e5 	bl	8004ebc <HAL_SPI_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cf8:	f7ff ffc8 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	200008a0 	.word	0x200008a0
 8002d04:	40013000 	.word	0x40013000

08002d08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a28      	ldr	r2, [pc, #160]	; (8002dc8 <HAL_SPI_MspInit+0xc0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d149      	bne.n	8002dbe <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	4b27      	ldr	r3, [pc, #156]	; (8002dcc <HAL_SPI_MspInit+0xc4>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <HAL_SPI_MspInit+0xc4>)
 8002d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d38:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <HAL_SPI_MspInit+0xc4>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_SPI_MspInit+0xc4>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	4a1f      	ldr	r2, [pc, #124]	; (8002dcc <HAL_SPI_MspInit+0xc4>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6313      	str	r3, [r2, #48]	; 0x30
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_SPI_MspInit+0xc4>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_SPI_MspInit+0xc4>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_SPI_MspInit+0xc4>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_SPI_MspInit+0xc4>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d7e:	23c0      	movs	r3, #192	; 0xc0
 8002d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d86:	2301      	movs	r3, #1
 8002d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d8e:	2305      	movs	r3, #5
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	4619      	mov	r1, r3
 8002d98:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <HAL_SPI_MspInit+0xc8>)
 8002d9a:	f001 fa41 	bl	8004220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d9e:	2308      	movs	r3, #8
 8002da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	2303      	movs	r3, #3
 8002dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dae:	2305      	movs	r3, #5
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db2:	f107 0314 	add.w	r3, r7, #20
 8002db6:	4619      	mov	r1, r3
 8002db8:	4806      	ldr	r0, [pc, #24]	; (8002dd4 <HAL_SPI_MspInit+0xcc>)
 8002dba:	f001 fa31 	bl	8004220 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	3728      	adds	r7, #40	; 0x28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40013000 	.word	0x40013000
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400

08002dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_MspInit+0x4c>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <HAL_MspInit+0x4c>)
 8002de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dec:	6453      	str	r3, [r2, #68]	; 0x44
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <HAL_MspInit+0x4c>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	603b      	str	r3, [r7, #0]
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_MspInit+0x4c>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <HAL_MspInit+0x4c>)
 8002e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e08:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_MspInit+0x4c>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e12:	603b      	str	r3, [r7, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800

08002e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3a:	e7fe      	b.n	8002e3a <HardFault_Handler+0x4>

08002e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <MemManage_Handler+0x4>

08002e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <BusFault_Handler+0x4>

08002e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <UsageFault_Handler+0x4>

08002e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e7c:	f000 fc78 	bl	8003770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e88:	4828      	ldr	r0, [pc, #160]	; (8002f2c <TIM2_IRQHandler+0xa8>)
 8002e8a:	f002 fdf3 	bl	8005a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8002e8e:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <TIM2_IRQHandler+0xa8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f06f 0208 	mvn.w	r2, #8
 8002e96:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002ea2:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8002eac:	d905      	bls.n	8002eba <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <TIM2_IRQHandler+0xb0>)
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002eb8:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d802      	bhi.n	8002ec8 <TIM2_IRQHandler+0x44>
 8002ec2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ec6:	e001      	b.n	8002ecc <TIM2_IRQHandler+0x48>
 8002ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ecc:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <TIM2_IRQHandler+0xb4>)
 8002ece:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8002ed0:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	2b23      	cmp	r3, #35	; 0x23
 8002ed6:	d927      	bls.n	8002f28 <TIM2_IRQHandler+0xa4>
 8002ed8:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	f240 2202 	movw	r2, #514	; 0x202
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d821      	bhi.n	8002f28 <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8002ee4:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <TIM2_IRQHandler+0xb8>)
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8002eec:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <TIM2_IRQHandler+0xb8>)
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <TIM2_IRQHandler+0xbc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <TIM2_IRQHandler+0xbc>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <TIM2_IRQHandler+0xc0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <TIM2_IRQHandler+0xc0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f203 1341 	addw	r3, r3, #321	; 0x141
 8002f24:	4a02      	ldr	r2, [pc, #8]	; (8002f30 <TIM2_IRQHandler+0xac>)
 8002f26:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000944 	.word	0x20000944
 8002f30:	20013720 	.word	0x20013720
 8002f34:	20000a30 	.word	0x20000a30
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40026488 	.word	0x40026488
 8002f40:	40010000 	.word	0x40010000
 8002f44:	2000098c 	.word	0x2000098c

08002f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <USART2_IRQHandler+0x70>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	2b0a      	cmp	r3, #10
 8002f58:	d026      	beq.n	8002fa8 <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	2b0d      	cmp	r3, #13
 8002f5e:	d002      	beq.n	8002f66 <USART2_IRQHandler+0x1e>
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	2b2e      	cmp	r3, #46	; 0x2e
 8002f64:	d10e      	bne.n	8002f84 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <USART2_IRQHandler+0x74>)
 8002f68:	22ff      	movs	r2, #255	; 0xff
 8002f6a:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			// Store the message length for processing
			input.msglen = input.char_counter;
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <USART2_IRQHandler+0x74>)
 8002f70:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f74:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <USART2_IRQHandler+0x74>)
 8002f76:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
			// Reset the counter for the next line
			input.char_counter = 0;
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <USART2_IRQHandler+0x74>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002f82:	e011      	b.n	8002fa8 <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <USART2_IRQHandler+0x74>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
			input.line_rx_buffer[input.char_counter] = uart_char;
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <USART2_IRQHandler+0x74>)
 8002f8e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <USART2_IRQHandler+0x74>)
 8002f94:	4413      	add	r3, r2
 8002f96:	79fa      	ldrb	r2, [r7, #7]
 8002f98:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <USART2_IRQHandler+0x74>)
 8002f9c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <USART2_IRQHandler+0x74>)
 8002fa4:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002fa8:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <USART2_IRQHandler+0x78>)
 8002faa:	f003 fcd7 	bl	800695c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40004400 	.word	0x40004400
 8002fbc:	200000a4 	.word	0x200000a4
 8002fc0:	200009ec 	.word	0x200009ec

08002fc4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <DMA2_Stream5_IRQHandler+0x48>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6a1a      	ldr	r2, [r3, #32]
 8002fce:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10f      	bne.n	8002ff8 <DMA2_Stream5_IRQHandler+0x34>
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <DMA2_Stream5_IRQHandler+0x48>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6a1a      	ldr	r2, [r3, #32]
 8002fde:	f240 4344 	movw	r3, #1092	; 0x444
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <DMA2_Stream5_IRQHandler+0x34>
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <DMA2_Stream5_IRQHandler+0x48>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b07      	ldr	r3, [pc, #28]	; (800300c <DMA2_Stream5_IRQHandler+0x48>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <DMA2_Stream5_IRQHandler+0x4c>)
 8002ffa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003000:	4804      	ldr	r0, [pc, #16]	; (8003014 <DMA2_Stream5_IRQHandler+0x50>)
 8003002:	f000 fea3 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200008fc 	.word	0x200008fc
 8003010:	40021000 	.word	0x40021000
 8003014:	2000098c 	.word	0x2000098c

08003018 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	e00a      	b.n	8003040 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800302a:	f3af 8000 	nop.w
 800302e:	4601      	mov	r1, r0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	60ba      	str	r2, [r7, #8]
 8003036:	b2ca      	uxtb	r2, r1
 8003038:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3301      	adds	r3, #1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	dbf0      	blt.n	800302a <_read+0x12>
	}

return len;
 8003048:	687b      	ldr	r3, [r7, #4]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	e009      	b.n	8003078 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	60ba      	str	r2, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fdfb 	bl	8002c68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3301      	adds	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	dbf1      	blt.n	8003064 <_write+0x12>
	}
	return len;
 8003080:	687b      	ldr	r3, [r7, #4]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_close>:

int _close(int file)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
	return -1;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030b2:	605a      	str	r2, [r3, #4]
	return 0;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <_isatty>:

int _isatty(int file)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
	return 1;
 80030ca:	2301      	movs	r3, #1
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
	return 0;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <_sbrk+0x50>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d102      	bne.n	800310a <_sbrk+0x16>
		heap_end = &end;
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <_sbrk+0x50>)
 8003106:	4a10      	ldr	r2, [pc, #64]	; (8003148 <_sbrk+0x54>)
 8003108:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <_sbrk+0x50>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <_sbrk+0x50>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	466a      	mov	r2, sp
 800311a:	4293      	cmp	r3, r2
 800311c:	d907      	bls.n	800312e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800311e:	f007 fa65 	bl	800a5ec <__errno>
 8003122:	4603      	mov	r3, r0
 8003124:	220c      	movs	r2, #12
 8003126:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003128:	f04f 33ff 	mov.w	r3, #4294967295
 800312c:	e006      	b.n	800313c <_sbrk+0x48>
	}

	heap_end += incr;
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <_sbrk+0x50>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	4a03      	ldr	r2, [pc, #12]	; (8003144 <_sbrk+0x50>)
 8003138:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800313a:	68fb      	ldr	r3, [r7, #12]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200008f8 	.word	0x200008f8
 8003148:	20013788 	.word	0x20013788

0800314c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <SystemInit+0x28>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003156:	4a07      	ldr	r2, [pc, #28]	; (8003174 <SystemInit+0x28>)
 8003158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800315c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <SystemInit+0x28>)
 8003162:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003166:	609a      	str	r2, [r3, #8]
#endif
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	605a      	str	r2, [r3, #4]
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800318c:	463b      	mov	r3, r7
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003194:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <MX_TIM1_Init+0x98>)
 8003196:	4a1f      	ldr	r2, [pc, #124]	; (8003214 <MX_TIM1_Init+0x9c>)
 8003198:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <MX_TIM1_Init+0x98>)
 800319c:	2200      	movs	r2, #0
 800319e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <MX_TIM1_Init+0x98>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 80031a6:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <MX_TIM1_Init+0x98>)
 80031a8:	220b      	movs	r2, #11
 80031aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ac:	4b18      	ldr	r3, [pc, #96]	; (8003210 <MX_TIM1_Init+0x98>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <MX_TIM1_Init+0x98>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <MX_TIM1_Init+0x98>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031be:	4814      	ldr	r0, [pc, #80]	; (8003210 <MX_TIM1_Init+0x98>)
 80031c0:	f002 f972 	bl	80054a8 <HAL_TIM_Base_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80031ca:	f7ff fd5f 	bl	8002c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031d4:	f107 0308 	add.w	r3, r7, #8
 80031d8:	4619      	mov	r1, r3
 80031da:	480d      	ldr	r0, [pc, #52]	; (8003210 <MX_TIM1_Init+0x98>)
 80031dc:	f002 fe14 	bl	8005e08 <HAL_TIM_ConfigClockSource>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80031e6:	f7ff fd51 	bl	8002c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ee:	2300      	movs	r3, #0
 80031f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031f2:	463b      	mov	r3, r7
 80031f4:	4619      	mov	r1, r3
 80031f6:	4806      	ldr	r0, [pc, #24]	; (8003210 <MX_TIM1_Init+0x98>)
 80031f8:	f003 fa10 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8003202:	f7ff fd43 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200008fc 	.word	0x200008fc
 8003214:	40010000 	.word	0x40010000

08003218 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321e:	f107 0320 	add.w	r3, r7, #32
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	611a      	str	r2, [r3, #16]
 8003236:	615a      	str	r2, [r3, #20]
 8003238:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <MX_TIM2_Init+0xcc>)
 800323c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003240:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <MX_TIM2_Init+0xcc>)
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <MX_TIM2_Init+0xcc>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <MX_TIM2_Init+0xcc>)
 8003250:	f640 226b 	movw	r2, #2667	; 0xa6b
 8003254:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <MX_TIM2_Init+0xcc>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <MX_TIM2_Init+0xcc>)
 800325e:	2200      	movs	r2, #0
 8003260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003262:	4820      	ldr	r0, [pc, #128]	; (80032e4 <MX_TIM2_Init+0xcc>)
 8003264:	f002 f9d8 	bl	8005618 <HAL_TIM_PWM_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800326e:	f7ff fd0d 	bl	8002c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800327a:	f107 0320 	add.w	r3, r7, #32
 800327e:	4619      	mov	r1, r3
 8003280:	4818      	ldr	r0, [pc, #96]	; (80032e4 <MX_TIM2_Init+0xcc>)
 8003282:	f003 f9cb 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800328c:	f7ff fcfe 	bl	8002c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003290:	2360      	movs	r3, #96	; 0x60
 8003292:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8003294:	f240 13bb 	movw	r3, #443	; 0x1bb
 8003298:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800329a:	2302      	movs	r3, #2
 800329c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032a2:	1d3b      	adds	r3, r7, #4
 80032a4:	2208      	movs	r2, #8
 80032a6:	4619      	mov	r1, r3
 80032a8:	480e      	ldr	r0, [pc, #56]	; (80032e4 <MX_TIM2_Init+0xcc>)
 80032aa:	f002 fceb 	bl	8005c84 <HAL_TIM_PWM_ConfigChannel>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80032b4:	f7ff fcea 	bl	8002c8c <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 80032b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80032bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80032be:	1d3b      	adds	r3, r7, #4
 80032c0:	220c      	movs	r2, #12
 80032c2:	4619      	mov	r1, r3
 80032c4:	4807      	ldr	r0, [pc, #28]	; (80032e4 <MX_TIM2_Init+0xcc>)
 80032c6:	f002 fcdd 	bl	8005c84 <HAL_TIM_PWM_ConfigChannel>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80032d0:	f7ff fcdc 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032d4:	4803      	ldr	r0, [pc, #12]	; (80032e4 <MX_TIM2_Init+0xcc>)
 80032d6:	f000 f87f 	bl	80033d8 <HAL_TIM_MspPostInit>

}
 80032da:	bf00      	nop
 80032dc:	3728      	adds	r7, #40	; 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000944 	.word	0x20000944

080032e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a21      	ldr	r2, [pc, #132]	; (800337c <HAL_TIM_Base_MspInit+0x94>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d13c      	bne.n	8003374 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_TIM_Base_MspInit+0x98>)
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <HAL_TIM_Base_MspInit+0x98>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6453      	str	r3, [r2, #68]	; 0x44
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_TIM_Base_MspInit+0x98>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 8003318:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_TIM_Base_MspInit+0xa0>)
 800331a:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 800331c:	4b19      	ldr	r3, [pc, #100]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 800331e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003322:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003324:	4b17      	ldr	r3, [pc, #92]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 8003326:	2240      	movs	r2, #64	; 0x40
 8003328:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 800332c:	2200      	movs	r2, #0
 800332e:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 8003332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003336:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 800333a:	2200      	movs	r2, #0
 800333c:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 8003346:	2200      	movs	r2, #0
 8003348:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 800334c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003350:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 8003354:	2200      	movs	r2, #0
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8003358:	480a      	ldr	r0, [pc, #40]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 800335a:	f000 fb5f 	bl	8003a1c <HAL_DMA_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8003364:	f7ff fc92 	bl	8002c8c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a06      	ldr	r2, [pc, #24]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 800336c:	621a      	str	r2, [r3, #32]
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <HAL_TIM_Base_MspInit+0x9c>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40010000 	.word	0x40010000
 8003380:	40023800 	.word	0x40023800
 8003384:	2000098c 	.word	0x2000098c
 8003388:	40026488 	.word	0x40026488

0800338c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339c:	d115      	bne.n	80033ca <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <HAL_TIM_PWM_MspInit+0x48>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <HAL_TIM_PWM_MspInit+0x48>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6413      	str	r3, [r2, #64]	; 0x40
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_TIM_PWM_MspInit+0x48>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	201c      	movs	r0, #28
 80033c0:	f000 faf5 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033c4:	201c      	movs	r0, #28
 80033c6:	f000 fb0e 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800

080033d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d11e      	bne.n	8003438 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_TIM_MspPostInit+0x68>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <HAL_TIM_MspPostInit+0x68>)
 8003404:	f043 0302 	orr.w	r3, r3, #2
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <HAL_TIM_MspPostInit+0x68>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 8003416:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800341a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	2303      	movs	r3, #3
 8003426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003428:	2301      	movs	r3, #1
 800342a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 800342c:	f107 030c 	add.w	r3, r7, #12
 8003430:	4619      	mov	r1, r3
 8003432:	4804      	ldr	r0, [pc, #16]	; (8003444 <HAL_TIM_MspPostInit+0x6c>)
 8003434:	f000 fef4 	bl	8004220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003438:	bf00      	nop
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40023800 	.word	0x40023800
 8003444:	40020400 	.word	0x40020400

08003448 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <MX_USART2_UART_Init+0x4c>)
 800344e:	4a12      	ldr	r2, [pc, #72]	; (8003498 <MX_USART2_UART_Init+0x50>)
 8003450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <MX_USART2_UART_Init+0x4c>)
 8003454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <MX_USART2_UART_Init+0x4c>)
 800345c:	2200      	movs	r2, #0
 800345e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <MX_USART2_UART_Init+0x4c>)
 8003462:	2200      	movs	r2, #0
 8003464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <MX_USART2_UART_Init+0x4c>)
 8003468:	2200      	movs	r2, #0
 800346a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <MX_USART2_UART_Init+0x4c>)
 800346e:	220c      	movs	r2, #12
 8003470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <MX_USART2_UART_Init+0x4c>)
 8003474:	2200      	movs	r2, #0
 8003476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <MX_USART2_UART_Init+0x4c>)
 800347a:	2200      	movs	r2, #0
 800347c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800347e:	4805      	ldr	r0, [pc, #20]	; (8003494 <MX_USART2_UART_Init+0x4c>)
 8003480:	f003 f95c 	bl	800673c <HAL_UART_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800348a:	f7ff fbff 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200009ec 	.word	0x200009ec
 8003498:	40004400 	.word	0x40004400

0800349c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_UART_MspInit+0x94>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d133      	bne.n	8003526 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <HAL_UART_MspInit+0x98>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_UART_MspInit+0x98>)
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034cc:	6413      	str	r3, [r2, #64]	; 0x40
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <HAL_UART_MspInit+0x98>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_UART_MspInit+0x98>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a14      	ldr	r2, [pc, #80]	; (8003534 <HAL_UART_MspInit+0x98>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b12      	ldr	r3, [pc, #72]	; (8003534 <HAL_UART_MspInit+0x98>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034f6:	230c      	movs	r3, #12
 80034f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003506:	2307      	movs	r3, #7
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	4619      	mov	r1, r3
 8003510:	4809      	ldr	r0, [pc, #36]	; (8003538 <HAL_UART_MspInit+0x9c>)
 8003512:	f000 fe85 	bl	8004220 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	2026      	movs	r0, #38	; 0x26
 800351c:	f000 fa47 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003520:	2026      	movs	r0, #38	; 0x26
 8003522:	f000 fa60 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003526:	bf00      	nop
 8003528:	3728      	adds	r7, #40	; 0x28
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	40004400 	.word	0x40004400
 8003534:	40023800 	.word	0x40023800
 8003538:	40020000 	.word	0x40020000

0800353c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800353c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003574 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003540:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003542:	e003      	b.n	800354c <LoopCopyDataInit>

08003544 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003544:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003546:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003548:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800354a:	3104      	adds	r1, #4

0800354c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800354c:	480b      	ldr	r0, [pc, #44]	; (800357c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800354e:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003550:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003552:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003554:	d3f6      	bcc.n	8003544 <CopyDataInit>
  ldr  r2, =_sbss
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003558:	e002      	b.n	8003560 <LoopFillZerobss>

0800355a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800355a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800355c:	f842 3b04 	str.w	r3, [r2], #4

08003560 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003562:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003564:	d3f9      	bcc.n	800355a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003566:	f7ff fdf1 	bl	800314c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356a:	f007 f845 	bl	800a5f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800356e:	f7ff fa59 	bl	8002a24 <main>
  bx  lr    
 8003572:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003574:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003578:	08016378 	.word	0x08016378
  ldr  r0, =_sdata
 800357c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003580:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8003584:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8003588:	20013788 	.word	0x20013788

0800358c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800358c:	e7fe      	b.n	800358c <ADC_IRQHandler>
	...

08003590 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <UB_VGA_Screen_Init+0x84>)
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <UB_VGA_Screen_Init+0x84>)
 800359c:	2200      	movs	r2, #0
 800359e:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 80035a0:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <UB_VGA_Screen_Init+0x84>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 80035a6:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <UB_VGA_Screen_Init+0x88>)
 80035a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035ac:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80035ae:	481b      	ldr	r0, [pc, #108]	; (800361c <UB_VGA_Screen_Init+0x8c>)
 80035b0:	f001 ffca 	bl	8005548 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80035b4:	210c      	movs	r1, #12
 80035b6:	4819      	ldr	r0, [pc, #100]	; (800361c <UB_VGA_Screen_Init+0x8c>)
 80035b8:	f002 f87e 	bl	80056b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80035bc:	2108      	movs	r1, #8
 80035be:	4817      	ldr	r0, [pc, #92]	; (800361c <UB_VGA_Screen_Init+0x8c>)
 80035c0:	f002 f942 	bl	8005848 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <UB_VGA_Screen_Init+0x90>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	4b15      	ldr	r3, [pc, #84]	; (8003620 <UB_VGA_Screen_Init+0x90>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80035d4:	4b12      	ldr	r3, [pc, #72]	; (8003620 <UB_VGA_Screen_Init+0x90>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <UB_VGA_Screen_Init+0x90>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80035e4:	490f      	ldr	r1, [pc, #60]	; (8003624 <UB_VGA_Screen_Init+0x94>)
 80035e6:	f240 1341 	movw	r3, #321	; 0x141
 80035ea:	4a0f      	ldr	r2, [pc, #60]	; (8003628 <UB_VGA_Screen_Init+0x98>)
 80035ec:	480f      	ldr	r0, [pc, #60]	; (800362c <UB_VGA_Screen_Init+0x9c>)
 80035ee:	f000 fac3 	bl	8003b78 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80035f2:	480e      	ldr	r0, [pc, #56]	; (800362c <UB_VGA_Screen_Init+0x9c>)
 80035f4:	f000 fa12 	bl	8003a1c <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80035f8:	4b0c      	ldr	r3, [pc, #48]	; (800362c <UB_VGA_Screen_Init+0x9c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <UB_VGA_Screen_Init+0x9c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0210 	orr.w	r2, r2, #16
 8003606:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <UB_VGA_Screen_Init+0xa0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a01      	ldr	r2, [pc, #4]	; (8003614 <UB_VGA_Screen_Init+0x84>)
 800360e:	6093      	str	r3, [r2, #8]
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20013720 	.word	0x20013720
 8003618:	40020400 	.word	0x40020400
 800361c:	20000944 	.word	0x20000944
 8003620:	200008fc 	.word	0x200008fc
 8003624:	20000a30 	.word	0x20000a30
 8003628:	40021015 	.word	0x40021015
 800362c:	2000098c 	.word	0x2000098c
 8003630:	40026488 	.word	0x40026488

08003634 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 800363e:	2300      	movs	r3, #0
 8003640:	81bb      	strh	r3, [r7, #12]
 8003642:	e012      	b.n	800366a <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8003644:	2300      	movs	r3, #0
 8003646:	81fb      	strh	r3, [r7, #14]
 8003648:	e008      	b.n	800365c <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800364a:	79fa      	ldrb	r2, [r7, #7]
 800364c:	89b9      	ldrh	r1, [r7, #12]
 800364e:	89fb      	ldrh	r3, [r7, #14]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f813 	bl	800367c <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8003656:	89fb      	ldrh	r3, [r7, #14]
 8003658:	3301      	adds	r3, #1
 800365a:	81fb      	strh	r3, [r7, #14]
 800365c:	89fb      	ldrh	r3, [r7, #14]
 800365e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003662:	d3f2      	bcc.n	800364a <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8003664:	89bb      	ldrh	r3, [r7, #12]
 8003666:	3301      	adds	r3, #1
 8003668:	81bb      	strh	r3, [r7, #12]
 800366a:	89bb      	ldrh	r3, [r7, #12]
 800366c:	2bef      	cmp	r3, #239	; 0xef
 800366e:	d9e9      	bls.n	8003644 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	80fb      	strh	r3, [r7, #6]
 8003686:	460b      	mov	r3, r1
 8003688:	80bb      	strh	r3, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003694:	d301      	bcc.n	800369a <UB_VGA_SetPixel+0x1e>
    xp = 0;
 8003696:	2300      	movs	r3, #0
 8003698:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800369a:	88bb      	ldrh	r3, [r7, #4]
 800369c:	2bef      	cmp	r3, #239	; 0xef
 800369e:	d901      	bls.n	80036a4 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80036a4:	88ba      	ldrh	r2, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	441a      	add	r2, r3
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	4413      	add	r3, r2
 80036b4:	4904      	ldr	r1, [pc, #16]	; (80036c8 <UB_VGA_SetPixel+0x4c>)
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	54ca      	strb	r2, [r1, r3]
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	20000a30 	.word	0x20000a30

080036cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036d0:	4b0e      	ldr	r3, [pc, #56]	; (800370c <HAL_Init+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <HAL_Init+0x40>)
 80036d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_Init+0x40>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a0a      	ldr	r2, [pc, #40]	; (800370c <HAL_Init+0x40>)
 80036e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <HAL_Init+0x40>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a07      	ldr	r2, [pc, #28]	; (800370c <HAL_Init+0x40>)
 80036ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f4:	2003      	movs	r0, #3
 80036f6:	f000 f94f 	bl	8003998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036fa:	2000      	movs	r0, #0
 80036fc:	f000 f808 	bl	8003710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003700:	f7ff fb6a 	bl	8002dd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40023c00 	.word	0x40023c00

08003710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003718:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_InitTick+0x54>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <HAL_InitTick+0x58>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	4619      	mov	r1, r3
 8003722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003726:	fbb3 f3f1 	udiv	r3, r3, r1
 800372a:	fbb2 f3f3 	udiv	r3, r2, r3
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f967 	bl	8003a02 <HAL_SYSTICK_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e00e      	b.n	800375c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b0f      	cmp	r3, #15
 8003742:	d80a      	bhi.n	800375a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003744:	2200      	movs	r2, #0
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	f000 f92f 	bl	80039ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003750:	4a06      	ldr	r2, [pc, #24]	; (800376c <HAL_InitTick+0x5c>)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e000      	b.n	800375c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000000 	.word	0x20000000
 8003768:	20000008 	.word	0x20000008
 800376c:	20000004 	.word	0x20000004

08003770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003774:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_IncTick+0x20>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_IncTick+0x24>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4413      	add	r3, r2
 8003780:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_IncTick+0x24>)
 8003782:	6013      	str	r3, [r2, #0]
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000008 	.word	0x20000008
 8003794:	2001372c 	.word	0x2001372c

08003798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return uwTick;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_GetTick+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	2001372c 	.word	0x2001372c

080037b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b8:	f7ff ffee 	bl	8003798 <HAL_GetTick>
 80037bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d005      	beq.n	80037d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_Delay+0x44>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037d6:	bf00      	nop
 80037d8:	f7ff ffde 	bl	8003798 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d8f7      	bhi.n	80037d8 <HAL_Delay+0x28>
  {
  }
}
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000008 	.word	0x20000008

080037f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <__NVIC_SetPriorityGrouping+0x44>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003814:	4013      	ands	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003820:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800382a:	4a04      	ldr	r2, [pc, #16]	; (800383c <__NVIC_SetPriorityGrouping+0x44>)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	60d3      	str	r3, [r2, #12]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <__NVIC_GetPriorityGrouping+0x18>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	0a1b      	lsrs	r3, r3, #8
 800384a:	f003 0307 	and.w	r3, r3, #7
}
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	2b00      	cmp	r3, #0
 800386c:	db0b      	blt.n	8003886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	f003 021f 	and.w	r2, r3, #31
 8003874:	4907      	ldr	r1, [pc, #28]	; (8003894 <__NVIC_EnableIRQ+0x38>)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2001      	movs	r0, #1
 800387e:	fa00 f202 	lsl.w	r2, r0, r2
 8003882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000e100 	.word	0xe000e100

08003898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	db0a      	blt.n	80038c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	490c      	ldr	r1, [pc, #48]	; (80038e4 <__NVIC_SetPriority+0x4c>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	0112      	lsls	r2, r2, #4
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	440b      	add	r3, r1
 80038bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c0:	e00a      	b.n	80038d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <__NVIC_SetPriority+0x50>)
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	3b04      	subs	r3, #4
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	440b      	add	r3, r1
 80038d6:	761a      	strb	r2, [r3, #24]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000e100 	.word	0xe000e100
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f1c3 0307 	rsb	r3, r3, #7
 8003906:	2b04      	cmp	r3, #4
 8003908:	bf28      	it	cs
 800390a:	2304      	movcs	r3, #4
 800390c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3304      	adds	r3, #4
 8003912:	2b06      	cmp	r3, #6
 8003914:	d902      	bls.n	800391c <NVIC_EncodePriority+0x30>
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3b03      	subs	r3, #3
 800391a:	e000      	b.n	800391e <NVIC_EncodePriority+0x32>
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	f04f 32ff 	mov.w	r2, #4294967295
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43da      	mvns	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	401a      	ands	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003934:	f04f 31ff 	mov.w	r1, #4294967295
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	43d9      	mvns	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003944:	4313      	orrs	r3, r2
         );
}
 8003946:	4618      	mov	r0, r3
 8003948:	3724      	adds	r7, #36	; 0x24
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003964:	d301      	bcc.n	800396a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003966:	2301      	movs	r3, #1
 8003968:	e00f      	b.n	800398a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800396a:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <SysTick_Config+0x40>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003972:	210f      	movs	r1, #15
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	f7ff ff8e 	bl	8003898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <SysTick_Config+0x40>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <SysTick_Config+0x40>)
 8003984:	2207      	movs	r2, #7
 8003986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	e000e010 	.word	0xe000e010

08003998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff29 	bl	80037f8 <__NVIC_SetPriorityGrouping>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039c0:	f7ff ff3e 	bl	8003840 <__NVIC_GetPriorityGrouping>
 80039c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	f7ff ff8e 	bl	80038ec <NVIC_EncodePriority>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff5d 	bl	8003898 <__NVIC_SetPriority>
}
 80039de:	bf00      	nop
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff31 	bl	800385c <__NVIC_EnableIRQ>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff ffa2 	bl	8003954 <SysTick_Config>
 8003a10:	4603      	mov	r3, r0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a28:	f7ff feb6 	bl	8003798 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e099      	b.n	8003b6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a58:	e00f      	b.n	8003a7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a5a:	f7ff fe9d 	bl	8003798 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	d908      	bls.n	8003a7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2203      	movs	r2, #3
 8003a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e078      	b.n	8003b6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e8      	bne.n	8003a5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4b38      	ldr	r3, [pc, #224]	; (8003b74 <HAL_DMA_Init+0x158>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003abe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d107      	bne.n	8003ae4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	4313      	orrs	r3, r2
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 0307 	bic.w	r3, r3, #7
 8003afa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d117      	bne.n	8003b3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00e      	beq.n	8003b3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb01 	bl	8004128 <DMA_CheckFifoParam>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2240      	movs	r2, #64	; 0x40
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e016      	b.n	8003b6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fab8 	bl	80040bc <DMA_CalcBaseAndBitshift>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	223f      	movs	r2, #63	; 0x3f
 8003b56:	409a      	lsls	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	f010803f 	.word	0xf010803f

08003b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d101      	bne.n	8003b9e <HAL_DMA_Start_IT+0x26>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e040      	b.n	8003c20 <HAL_DMA_Start_IT+0xa8>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d12f      	bne.n	8003c12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fa4a 	bl	8004060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	223f      	movs	r2, #63	; 0x3f
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0216 	orr.w	r2, r2, #22
 8003be6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0208 	orr.w	r2, r2, #8
 8003bfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	e005      	b.n	8003c1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c36:	f7ff fdaf 	bl	8003798 <HAL_GetTick>
 8003c3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d008      	beq.n	8003c5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e052      	b.n	8003d00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0216 	bic.w	r2, r2, #22
 8003c68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d103      	bne.n	8003c8a <HAL_DMA_Abort+0x62>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0208 	bic.w	r2, r2, #8
 8003c98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003caa:	e013      	b.n	8003cd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cac:	f7ff fd74 	bl	8003798 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2203      	movs	r2, #3
 8003cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e015      	b.n	8003d00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e4      	bne.n	8003cac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce6:	223f      	movs	r2, #63	; 0x3f
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2280      	movs	r2, #128	; 0x80
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e00c      	b.n	8003d40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2205      	movs	r2, #5
 8003d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d58:	4b8e      	ldr	r3, [pc, #568]	; (8003f94 <HAL_DMA_IRQHandler+0x248>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a8e      	ldr	r2, [pc, #568]	; (8003f98 <HAL_DMA_IRQHandler+0x24c>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	2208      	movs	r2, #8
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01a      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	2208      	movs	r2, #8
 8003da6:	409a      	lsls	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d012      	beq.n	8003dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	2201      	movs	r2, #1
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f043 0202 	orr.w	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	2204      	movs	r2, #4
 8003df4:	409a      	lsls	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d012      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	2204      	movs	r2, #4
 8003e12:	409a      	lsls	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	2210      	movs	r2, #16
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d043      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03c      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	2210      	movs	r2, #16
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d018      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d024      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
 8003e7a:	e01f      	b.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
 8003e8c:	e016      	b.n	8003ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0208 	bic.w	r2, r2, #8
 8003eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 808f 	beq.w	8003fec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8087 	beq.w	8003fec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	d136      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0216 	bic.w	r2, r2, #22
 8003f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x1da>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0208 	bic.w	r2, r2, #8
 8003f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	223f      	movs	r2, #63	; 0x3f
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d07e      	beq.n	8004058 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
        }
        return;
 8003f62:	e079      	b.n	8004058 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01d      	beq.n	8003fae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d031      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
 8003f90:	e02c      	b.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
 8003f92:	bf00      	nop
 8003f94:	20000000 	.word	0x20000000
 8003f98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d023      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
 8003fac:	e01e      	b.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10f      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0210 	bic.w	r2, r2, #16
 8003fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d032      	beq.n	800405a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2205      	movs	r2, #5
 8004004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3301      	adds	r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	429a      	cmp	r2, r3
 8004022:	d307      	bcc.n	8004034 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f2      	bne.n	8004018 <HAL_DMA_IRQHandler+0x2cc>
 8004032:	e000      	b.n	8004036 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004034:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
 8004056:	e000      	b.n	800405a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004058:	bf00      	nop
    }
  }
}
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800407c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d108      	bne.n	80040a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800409e:	e007      	b.n	80040b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	3b10      	subs	r3, #16
 80040cc:	4a14      	ldr	r2, [pc, #80]	; (8004120 <DMA_CalcBaseAndBitshift+0x64>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040d6:	4a13      	ldr	r2, [pc, #76]	; (8004124 <DMA_CalcBaseAndBitshift+0x68>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d909      	bls.n	80040fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	659a      	str	r2, [r3, #88]	; 0x58
 80040fc:	e007      	b.n	800410e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	aaaaaaab 	.word	0xaaaaaaab
 8004124:	08016214 	.word	0x08016214

08004128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d11f      	bne.n	8004182 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d856      	bhi.n	80041f6 <DMA_CheckFifoParam+0xce>
 8004148:	a201      	add	r2, pc, #4	; (adr r2, 8004150 <DMA_CheckFifoParam+0x28>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	08004173 	.word	0x08004173
 8004158:	08004161 	.word	0x08004161
 800415c:	080041f7 	.word	0x080041f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d046      	beq.n	80041fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004170:	e043      	b.n	80041fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800417a:	d140      	bne.n	80041fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004180:	e03d      	b.n	80041fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418a:	d121      	bne.n	80041d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d837      	bhi.n	8004202 <DMA_CheckFifoParam+0xda>
 8004192:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <DMA_CheckFifoParam+0x70>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041af 	.word	0x080041af
 80041a0:	080041a9 	.word	0x080041a9
 80041a4:	080041c1 	.word	0x080041c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      break;
 80041ac:	e030      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d025      	beq.n	8004206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041be:	e022      	b.n	8004206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041c8:	d11f      	bne.n	800420a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ce:	e01c      	b.n	800420a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d903      	bls.n	80041de <DMA_CheckFifoParam+0xb6>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d003      	beq.n	80041e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041dc:	e018      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
      break;
 80041e2:	e015      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e00b      	b.n	800420e <DMA_CheckFifoParam+0xe6>
      break;
 80041f6:	bf00      	nop
 80041f8:	e00a      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 80041fa:	bf00      	nop
 80041fc:	e008      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 80041fe:	bf00      	nop
 8004200:	e006      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;   
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 800420e:	bf00      	nop
    }
  } 
  
  return status; 
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop

08004220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	; 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	e16b      	b.n	8004514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800423c:	2201      	movs	r2, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	429a      	cmp	r2, r3
 8004256:	f040 815a 	bne.w	800450e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d005      	beq.n	8004272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800426e:	2b02      	cmp	r3, #2
 8004270:	d130      	bne.n	80042d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	2203      	movs	r2, #3
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042a8:	2201      	movs	r2, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 0201 	and.w	r2, r3, #1
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d017      	beq.n	8004310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d123      	bne.n	8004364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	08da      	lsrs	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3208      	adds	r2, #8
 8004324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	220f      	movs	r2, #15
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	08da      	lsrs	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3208      	adds	r2, #8
 800435e:	69b9      	ldr	r1, [r7, #24]
 8004360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	2203      	movs	r2, #3
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0203 	and.w	r2, r3, #3
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80b4 	beq.w	800450e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	4b60      	ldr	r3, [pc, #384]	; (800452c <HAL_GPIO_Init+0x30c>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	4a5f      	ldr	r2, [pc, #380]	; (800452c <HAL_GPIO_Init+0x30c>)
 80043b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b4:	6453      	str	r3, [r2, #68]	; 0x44
 80043b6:	4b5d      	ldr	r3, [pc, #372]	; (800452c <HAL_GPIO_Init+0x30c>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043c2:	4a5b      	ldr	r2, [pc, #364]	; (8004530 <HAL_GPIO_Init+0x310>)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	089b      	lsrs	r3, r3, #2
 80043c8:	3302      	adds	r3, #2
 80043ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	220f      	movs	r2, #15
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a52      	ldr	r2, [pc, #328]	; (8004534 <HAL_GPIO_Init+0x314>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02b      	beq.n	8004446 <HAL_GPIO_Init+0x226>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a51      	ldr	r2, [pc, #324]	; (8004538 <HAL_GPIO_Init+0x318>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d025      	beq.n	8004442 <HAL_GPIO_Init+0x222>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a50      	ldr	r2, [pc, #320]	; (800453c <HAL_GPIO_Init+0x31c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <HAL_GPIO_Init+0x21e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a4f      	ldr	r2, [pc, #316]	; (8004540 <HAL_GPIO_Init+0x320>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d019      	beq.n	800443a <HAL_GPIO_Init+0x21a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a4e      	ldr	r2, [pc, #312]	; (8004544 <HAL_GPIO_Init+0x324>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_GPIO_Init+0x216>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a4d      	ldr	r2, [pc, #308]	; (8004548 <HAL_GPIO_Init+0x328>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00d      	beq.n	8004432 <HAL_GPIO_Init+0x212>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4c      	ldr	r2, [pc, #304]	; (800454c <HAL_GPIO_Init+0x32c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <HAL_GPIO_Init+0x20e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4b      	ldr	r2, [pc, #300]	; (8004550 <HAL_GPIO_Init+0x330>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_GPIO_Init+0x20a>
 8004426:	2307      	movs	r3, #7
 8004428:	e00e      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800442a:	2308      	movs	r3, #8
 800442c:	e00c      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800442e:	2306      	movs	r3, #6
 8004430:	e00a      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004432:	2305      	movs	r3, #5
 8004434:	e008      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004436:	2304      	movs	r3, #4
 8004438:	e006      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800443a:	2303      	movs	r3, #3
 800443c:	e004      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800443e:	2302      	movs	r3, #2
 8004440:	e002      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004446:	2300      	movs	r3, #0
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	f002 0203 	and.w	r2, r2, #3
 800444e:	0092      	lsls	r2, r2, #2
 8004450:	4093      	lsls	r3, r2
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004458:	4935      	ldr	r1, [pc, #212]	; (8004530 <HAL_GPIO_Init+0x310>)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	3302      	adds	r3, #2
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004466:	4b3b      	ldr	r3, [pc, #236]	; (8004554 <HAL_GPIO_Init+0x334>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800448a:	4a32      	ldr	r2, [pc, #200]	; (8004554 <HAL_GPIO_Init+0x334>)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004490:	4b30      	ldr	r3, [pc, #192]	; (8004554 <HAL_GPIO_Init+0x334>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b4:	4a27      	ldr	r2, [pc, #156]	; (8004554 <HAL_GPIO_Init+0x334>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <HAL_GPIO_Init+0x334>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044de:	4a1d      	ldr	r2, [pc, #116]	; (8004554 <HAL_GPIO_Init+0x334>)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e4:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <HAL_GPIO_Init+0x334>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004508:	4a12      	ldr	r2, [pc, #72]	; (8004554 <HAL_GPIO_Init+0x334>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b0f      	cmp	r3, #15
 8004518:	f67f ae90 	bls.w	800423c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	3724      	adds	r7, #36	; 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	40013800 	.word	0x40013800
 8004534:	40020000 	.word	0x40020000
 8004538:	40020400 	.word	0x40020400
 800453c:	40020800 	.word	0x40020800
 8004540:	40020c00 	.word	0x40020c00
 8004544:	40021000 	.word	0x40021000
 8004548:	40021400 	.word	0x40021400
 800454c:	40021800 	.word	0x40021800
 8004550:	40021c00 	.word	0x40021c00
 8004554:	40013c00 	.word	0x40013c00

08004558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
 8004564:	4613      	mov	r3, r2
 8004566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004568:	787b      	ldrb	r3, [r7, #1]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004574:	e003      	b.n	800457e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004576:	887b      	ldrh	r3, [r7, #2]
 8004578:	041a      	lsls	r2, r3, #16
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	619a      	str	r2, [r3, #24]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e267      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d075      	beq.n	8004696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045aa:	4b88      	ldr	r3, [pc, #544]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d00c      	beq.n	80045d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045b6:	4b85      	ldr	r3, [pc, #532]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d112      	bne.n	80045e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c2:	4b82      	ldr	r3, [pc, #520]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ce:	d10b      	bne.n	80045e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	4b7e      	ldr	r3, [pc, #504]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d05b      	beq.n	8004694 <HAL_RCC_OscConfig+0x108>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d157      	bne.n	8004694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e242      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f0:	d106      	bne.n	8004600 <HAL_RCC_OscConfig+0x74>
 80045f2:	4b76      	ldr	r3, [pc, #472]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a75      	ldr	r2, [pc, #468]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e01d      	b.n	800463c <HAL_RCC_OscConfig+0xb0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x98>
 800460a:	4b70      	ldr	r3, [pc, #448]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a6f      	ldr	r2, [pc, #444]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 8004610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	4b6d      	ldr	r3, [pc, #436]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6c      	ldr	r2, [pc, #432]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e00b      	b.n	800463c <HAL_RCC_OscConfig+0xb0>
 8004624:	4b69      	ldr	r3, [pc, #420]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a68      	ldr	r2, [pc, #416]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 800462a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	4b66      	ldr	r3, [pc, #408]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a65      	ldr	r2, [pc, #404]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 8004636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800463a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d013      	beq.n	800466c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7ff f8a8 	bl	8003798 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800464c:	f7ff f8a4 	bl	8003798 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e207      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b5b      	ldr	r3, [pc, #364]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0xc0>
 800466a:	e014      	b.n	8004696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7ff f894 	bl	8003798 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004674:	f7ff f890 	bl	8003798 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	; 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e1f3      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004686:	4b51      	ldr	r3, [pc, #324]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0xe8>
 8004692:	e000      	b.n	8004696 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d063      	beq.n	800476a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046a2:	4b4a      	ldr	r3, [pc, #296]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ae:	4b47      	ldr	r3, [pc, #284]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d11c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ba:	4b44      	ldr	r3, [pc, #272]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d116      	bne.n	80046f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c6:	4b41      	ldr	r3, [pc, #260]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_RCC_OscConfig+0x152>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d001      	beq.n	80046de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e1c7      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046de:	4b3b      	ldr	r3, [pc, #236]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4937      	ldr	r1, [pc, #220]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f2:	e03a      	b.n	800476a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046fc:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <HAL_RCC_OscConfig+0x244>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004702:	f7ff f849 	bl	8003798 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800470a:	f7ff f845 	bl	8003798 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e1a8      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471c:	4b2b      	ldr	r3, [pc, #172]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004728:	4b28      	ldr	r3, [pc, #160]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4925      	ldr	r1, [pc, #148]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 8004738:	4313      	orrs	r3, r2
 800473a:	600b      	str	r3, [r1, #0]
 800473c:	e015      	b.n	800476a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_RCC_OscConfig+0x244>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7ff f828 	bl	8003798 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800474c:	f7ff f824 	bl	8003798 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e187      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475e:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d036      	beq.n	80047e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d016      	beq.n	80047ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <HAL_RCC_OscConfig+0x248>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004784:	f7ff f808 	bl	8003798 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800478c:	f7ff f804 	bl	8003798 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e167      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_OscConfig+0x240>)
 80047a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x200>
 80047aa:	e01b      	b.n	80047e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_RCC_OscConfig+0x248>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b2:	f7fe fff1 	bl	8003798 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b8:	e00e      	b.n	80047d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047ba:	f7fe ffed 	bl	8003798 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d907      	bls.n	80047d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e150      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
 80047cc:	40023800 	.word	0x40023800
 80047d0:	42470000 	.word	0x42470000
 80047d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d8:	4b88      	ldr	r3, [pc, #544]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 80047da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ea      	bne.n	80047ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8097 	beq.w	8004920 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f6:	4b81      	ldr	r3, [pc, #516]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004802:	2300      	movs	r3, #0
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	4b7d      	ldr	r3, [pc, #500]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	4a7c      	ldr	r2, [pc, #496]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 800480c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004810:	6413      	str	r3, [r2, #64]	; 0x40
 8004812:	4b7a      	ldr	r3, [pc, #488]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481a:	60bb      	str	r3, [r7, #8]
 800481c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481e:	2301      	movs	r3, #1
 8004820:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004822:	4b77      	ldr	r3, [pc, #476]	; (8004a00 <HAL_RCC_OscConfig+0x474>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d118      	bne.n	8004860 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800482e:	4b74      	ldr	r3, [pc, #464]	; (8004a00 <HAL_RCC_OscConfig+0x474>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a73      	ldr	r2, [pc, #460]	; (8004a00 <HAL_RCC_OscConfig+0x474>)
 8004834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004838:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800483a:	f7fe ffad 	bl	8003798 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004842:	f7fe ffa9 	bl	8003798 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e10c      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004854:	4b6a      	ldr	r3, [pc, #424]	; (8004a00 <HAL_RCC_OscConfig+0x474>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d106      	bne.n	8004876 <HAL_RCC_OscConfig+0x2ea>
 8004868:	4b64      	ldr	r3, [pc, #400]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	4a63      	ldr	r2, [pc, #396]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6713      	str	r3, [r2, #112]	; 0x70
 8004874:	e01c      	b.n	80048b0 <HAL_RCC_OscConfig+0x324>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b05      	cmp	r3, #5
 800487c:	d10c      	bne.n	8004898 <HAL_RCC_OscConfig+0x30c>
 800487e:	4b5f      	ldr	r3, [pc, #380]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	4a5e      	ldr	r2, [pc, #376]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 8004884:	f043 0304 	orr.w	r3, r3, #4
 8004888:	6713      	str	r3, [r2, #112]	; 0x70
 800488a:	4b5c      	ldr	r3, [pc, #368]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	4a5b      	ldr	r2, [pc, #364]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	6713      	str	r3, [r2, #112]	; 0x70
 8004896:	e00b      	b.n	80048b0 <HAL_RCC_OscConfig+0x324>
 8004898:	4b58      	ldr	r3, [pc, #352]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 800489a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489c:	4a57      	ldr	r2, [pc, #348]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	6713      	str	r3, [r2, #112]	; 0x70
 80048a4:	4b55      	ldr	r3, [pc, #340]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a8:	4a54      	ldr	r2, [pc, #336]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 80048aa:	f023 0304 	bic.w	r3, r3, #4
 80048ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d015      	beq.n	80048e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fe ff6e 	bl	8003798 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c0:	f7fe ff6a 	bl	8003798 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e0cb      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d6:	4b49      	ldr	r3, [pc, #292]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 80048d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0ee      	beq.n	80048c0 <HAL_RCC_OscConfig+0x334>
 80048e2:	e014      	b.n	800490e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e4:	f7fe ff58 	bl	8003798 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ec:	f7fe ff54 	bl	8003798 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e0b5      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004902:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ee      	bne.n	80048ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800490e:	7dfb      	ldrb	r3, [r7, #23]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d105      	bne.n	8004920 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004914:	4b39      	ldr	r3, [pc, #228]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	4a38      	ldr	r2, [pc, #224]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 800491a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800491e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80a1 	beq.w	8004a6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800492a:	4b34      	ldr	r3, [pc, #208]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	2b08      	cmp	r3, #8
 8004934:	d05c      	beq.n	80049f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d141      	bne.n	80049c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493e:	4b31      	ldr	r3, [pc, #196]	; (8004a04 <HAL_RCC_OscConfig+0x478>)
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fe ff28 	bl	8003798 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494c:	f7fe ff24 	bl	8003798 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e087      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495e:	4b27      	ldr	r3, [pc, #156]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69da      	ldr	r2, [r3, #28]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	019b      	lsls	r3, r3, #6
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	3b01      	subs	r3, #1
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	061b      	lsls	r3, r3, #24
 800498e:	491b      	ldr	r1, [pc, #108]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <HAL_RCC_OscConfig+0x478>)
 8004996:	2201      	movs	r2, #1
 8004998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499a:	f7fe fefd 	bl	8003798 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a2:	f7fe fef9 	bl	8003798 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e05c      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b4:	4b11      	ldr	r3, [pc, #68]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x416>
 80049c0:	e054      	b.n	8004a6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <HAL_RCC_OscConfig+0x478>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fe fee6 	bl	8003798 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fe fee2 	bl	8003798 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e045      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <HAL_RCC_OscConfig+0x470>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x444>
 80049ee:	e03d      	b.n	8004a6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d107      	bne.n	8004a08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e038      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40007000 	.word	0x40007000
 8004a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a08:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <HAL_RCC_OscConfig+0x4ec>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d028      	beq.n	8004a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d121      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d11a      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d111      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4e:	085b      	lsrs	r3, r3, #1
 8004a50:	3b01      	subs	r3, #1
 8004a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d001      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800

08004a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0cc      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a90:	4b68      	ldr	r3, [pc, #416]	; (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d90c      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b65      	ldr	r3, [pc, #404]	; (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b63      	ldr	r3, [pc, #396]	; (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0b8      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d020      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad0:	4b59      	ldr	r3, [pc, #356]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	4a58      	ldr	r2, [pc, #352]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae8:	4b53      	ldr	r3, [pc, #332]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4a52      	ldr	r2, [pc, #328]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af4:	4b50      	ldr	r3, [pc, #320]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	494d      	ldr	r1, [pc, #308]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d044      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d107      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1a:	4b47      	ldr	r3, [pc, #284]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d119      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e07f      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d003      	beq.n	8004b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d107      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3a:	4b3f      	ldr	r3, [pc, #252]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d109      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e06f      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4a:	4b3b      	ldr	r3, [pc, #236]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e067      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b5a:	4b37      	ldr	r3, [pc, #220]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f023 0203 	bic.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	4934      	ldr	r1, [pc, #208]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b6c:	f7fe fe14 	bl	8003798 <HAL_GetTick>
 8004b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b72:	e00a      	b.n	8004b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b74:	f7fe fe10 	bl	8003798 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e04f      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8a:	4b2b      	ldr	r3, [pc, #172]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 020c 	and.w	r2, r3, #12
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d1eb      	bne.n	8004b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d20c      	bcs.n	8004bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b22      	ldr	r3, [pc, #136]	; (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d001      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e032      	b.n	8004c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd0:	4b19      	ldr	r3, [pc, #100]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4916      	ldr	r1, [pc, #88]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	490e      	ldr	r1, [pc, #56]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c02:	f000 f821 	bl	8004c48 <HAL_RCC_GetSysClockFreq>
 8004c06:	4602      	mov	r2, r0
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	490a      	ldr	r1, [pc, #40]	; (8004c3c <HAL_RCC_ClockConfig+0x1c0>)
 8004c14:	5ccb      	ldrb	r3, [r1, r3]
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <HAL_RCC_ClockConfig+0x1c8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fd74 	bl	8003710 <HAL_InitTick>

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40023c00 	.word	0x40023c00
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	080161fc 	.word	0x080161fc
 8004c40:	20000000 	.word	0x20000000
 8004c44:	20000004 	.word	0x20000004

08004c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c4c:	b094      	sub	sp, #80	; 0x50
 8004c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	647b      	str	r3, [r7, #68]	; 0x44
 8004c54:	2300      	movs	r3, #0
 8004c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c58:	2300      	movs	r3, #0
 8004c5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c60:	4b79      	ldr	r3, [pc, #484]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 030c 	and.w	r3, r3, #12
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d00d      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x40>
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	f200 80e1 	bhi.w	8004e34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_RCC_GetSysClockFreq+0x34>
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d003      	beq.n	8004c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c7a:	e0db      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c7c:	4b73      	ldr	r3, [pc, #460]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c80:	e0db      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c82:	4b73      	ldr	r3, [pc, #460]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c86:	e0d8      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c88:	4b6f      	ldr	r3, [pc, #444]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c92:	4b6d      	ldr	r3, [pc, #436]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d063      	beq.n	8004d66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9e:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	099b      	lsrs	r3, r3, #6
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cba:	4622      	mov	r2, r4
 8004cbc:	462b      	mov	r3, r5
 8004cbe:	f04f 0000 	mov.w	r0, #0
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	0159      	lsls	r1, r3, #5
 8004cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ccc:	0150      	lsls	r0, r2, #5
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	1a51      	subs	r1, r2, r1
 8004cd6:	6139      	str	r1, [r7, #16]
 8004cd8:	4629      	mov	r1, r5
 8004cda:	eb63 0301 	sbc.w	r3, r3, r1
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cec:	4659      	mov	r1, fp
 8004cee:	018b      	lsls	r3, r1, #6
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cf6:	4651      	mov	r1, sl
 8004cf8:	018a      	lsls	r2, r1, #6
 8004cfa:	4651      	mov	r1, sl
 8004cfc:	ebb2 0801 	subs.w	r8, r2, r1
 8004d00:	4659      	mov	r1, fp
 8004d02:	eb63 0901 	sbc.w	r9, r3, r1
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d1a:	4690      	mov	r8, r2
 8004d1c:	4699      	mov	r9, r3
 8004d1e:	4623      	mov	r3, r4
 8004d20:	eb18 0303 	adds.w	r3, r8, r3
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	462b      	mov	r3, r5
 8004d28:	eb49 0303 	adc.w	r3, r9, r3
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	024b      	lsls	r3, r1, #9
 8004d3e:	4621      	mov	r1, r4
 8004d40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d44:	4621      	mov	r1, r4
 8004d46:	024a      	lsls	r2, r1, #9
 8004d48:	4610      	mov	r0, r2
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d4e:	2200      	movs	r2, #0
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d58:	f7fb ff86 	bl	8000c68 <__aeabi_uldivmod>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4613      	mov	r3, r2
 8004d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d64:	e058      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d66:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	099b      	lsrs	r3, r3, #6
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	4611      	mov	r1, r2
 8004d72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d76:	623b      	str	r3, [r7, #32]
 8004d78:	2300      	movs	r3, #0
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d80:	4642      	mov	r2, r8
 8004d82:	464b      	mov	r3, r9
 8004d84:	f04f 0000 	mov.w	r0, #0
 8004d88:	f04f 0100 	mov.w	r1, #0
 8004d8c:	0159      	lsls	r1, r3, #5
 8004d8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d92:	0150      	lsls	r0, r2, #5
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4641      	mov	r1, r8
 8004d9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d9e:	4649      	mov	r1, r9
 8004da0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004db0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004db4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004db8:	ebb2 040a 	subs.w	r4, r2, sl
 8004dbc:	eb63 050b 	sbc.w	r5, r3, fp
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	f04f 0300 	mov.w	r3, #0
 8004dc8:	00eb      	lsls	r3, r5, #3
 8004dca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dce:	00e2      	lsls	r2, r4, #3
 8004dd0:	4614      	mov	r4, r2
 8004dd2:	461d      	mov	r5, r3
 8004dd4:	4643      	mov	r3, r8
 8004dd6:	18e3      	adds	r3, r4, r3
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	464b      	mov	r3, r9
 8004ddc:	eb45 0303 	adc.w	r3, r5, r3
 8004de0:	607b      	str	r3, [r7, #4]
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dee:	4629      	mov	r1, r5
 8004df0:	028b      	lsls	r3, r1, #10
 8004df2:	4621      	mov	r1, r4
 8004df4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004df8:	4621      	mov	r1, r4
 8004dfa:	028a      	lsls	r2, r1, #10
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e02:	2200      	movs	r2, #0
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	61fa      	str	r2, [r7, #28]
 8004e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e0c:	f7fb ff2c 	bl	8000c68 <__aeabi_uldivmod>
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4613      	mov	r3, r2
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	0c1b      	lsrs	r3, r3, #16
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	3301      	adds	r3, #1
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e32:	e002      	b.n	8004e3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004e36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3750      	adds	r7, #80	; 0x50
 8004e40:	46bd      	mov	sp, r7
 8004e42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e46:	bf00      	nop
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	00f42400 	.word	0x00f42400
 8004e50:	007a1200 	.word	0x007a1200

08004e54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e58:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	20000000 	.word	0x20000000

08004e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e70:	f7ff fff0 	bl	8004e54 <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0a9b      	lsrs	r3, r3, #10
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4903      	ldr	r1, [pc, #12]	; (8004e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	0801620c 	.word	0x0801620c

08004e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e98:	f7ff ffdc 	bl	8004e54 <HAL_RCC_GetHCLKFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0b5b      	lsrs	r3, r3, #13
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	4903      	ldr	r1, [pc, #12]	; (8004eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	0801620c 	.word	0x0801620c

08004ebc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e07b      	b.n	8004fc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d108      	bne.n	8004ee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ede:	d009      	beq.n	8004ef4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	61da      	str	r2, [r3, #28]
 8004ee6:	e005      	b.n	8004ef4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fd fefa 	bl	8002d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	ea42 0103 	orr.w	r1, r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	f003 0104 	and.w	r1, r3, #4
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f003 0210 	and.w	r2, r3, #16
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b08c      	sub	sp, #48	; 0x30
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x26>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e18a      	b.n	800530a <HAL_SPI_TransmitReceive+0x33c>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ffc:	f7fe fbcc 	bl	8003798 <HAL_GetTick>
 8005000:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005012:	887b      	ldrh	r3, [r7, #2]
 8005014:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005016:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800501a:	2b01      	cmp	r3, #1
 800501c:	d00f      	beq.n	800503e <HAL_SPI_TransmitReceive+0x70>
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005024:	d107      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d103      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x68>
 800502e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005032:	2b04      	cmp	r3, #4
 8005034:	d003      	beq.n	800503e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005036:	2302      	movs	r3, #2
 8005038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800503c:	e15b      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_SPI_TransmitReceive+0x82>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <HAL_SPI_TransmitReceive+0x82>
 800504a:	887b      	ldrh	r3, [r7, #2]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d103      	bne.n	8005058 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005056:	e14e      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b04      	cmp	r3, #4
 8005062:	d003      	beq.n	800506c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2205      	movs	r2, #5
 8005068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	887a      	ldrh	r2, [r7, #2]
 800507c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	887a      	ldrh	r2, [r7, #2]
 8005082:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	887a      	ldrh	r2, [r7, #2]
 800508e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	887a      	ldrh	r2, [r7, #2]
 8005094:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d007      	beq.n	80050c0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c8:	d178      	bne.n	80051bc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_TransmitReceive+0x10a>
 80050d2:	8b7b      	ldrh	r3, [r7, #26]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d166      	bne.n	80051a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	881a      	ldrh	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	1c9a      	adds	r2, r3, #2
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050fc:	e053      	b.n	80051a6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b02      	cmp	r3, #2
 800510a:	d11b      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x176>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d016      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x176>
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d113      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	881a      	ldrh	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	1c9a      	adds	r2, r3, #2
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d119      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x1b8>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d014      	beq.n	8005186 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	b292      	uxth	r2, r2
 8005168:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	1c9a      	adds	r2, r3, #2
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005182:	2301      	movs	r3, #1
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005186:	f7fe fb07 	bl	8003798 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005192:	429a      	cmp	r2, r3
 8005194:	d807      	bhi.n	80051a6 <HAL_SPI_TransmitReceive+0x1d8>
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d003      	beq.n	80051a6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051a4:	e0a7      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1a6      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x130>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1a1      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x130>
 80051ba:	e07c      	b.n	80052b6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_SPI_TransmitReceive+0x1fc>
 80051c4:	8b7b      	ldrh	r3, [r7, #26]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d16b      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	330c      	adds	r3, #12
 80051d4:	7812      	ldrb	r2, [r2, #0]
 80051d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f0:	e057      	b.n	80052a2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d11c      	bne.n	800523a <HAL_SPI_TransmitReceive+0x26c>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d017      	beq.n	800523a <HAL_SPI_TransmitReceive+0x26c>
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d114      	bne.n	800523a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	330c      	adds	r3, #12
 800521a:	7812      	ldrb	r2, [r2, #0]
 800521c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b01      	cmp	r3, #1
 8005246:	d119      	bne.n	800527c <HAL_SPI_TransmitReceive+0x2ae>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d014      	beq.n	800527c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005278:	2301      	movs	r3, #1
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800527c:	f7fe fa8c 	bl	8003798 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005288:	429a      	cmp	r2, r3
 800528a:	d803      	bhi.n	8005294 <HAL_SPI_TransmitReceive+0x2c6>
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d102      	bne.n	800529a <HAL_SPI_TransmitReceive+0x2cc>
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	2b00      	cmp	r3, #0
 8005298:	d103      	bne.n	80052a2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052a0:	e029      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1a2      	bne.n	80051f2 <HAL_SPI_TransmitReceive+0x224>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d19d      	bne.n	80051f2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 f8b2 	bl	8005424 <SPI_EndRxTxTransaction>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d006      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052d2:	e010      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10b      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	e000      	b.n	80052f6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005306:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800530a:	4618      	mov	r0, r3
 800530c:	3730      	adds	r7, #48	; 0x30
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	603b      	str	r3, [r7, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005324:	f7fe fa38 	bl	8003798 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	4413      	add	r3, r2
 8005332:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005334:	f7fe fa30 	bl	8003798 <HAL_GetTick>
 8005338:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800533a:	4b39      	ldr	r3, [pc, #228]	; (8005420 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	015b      	lsls	r3, r3, #5
 8005340:	0d1b      	lsrs	r3, r3, #20
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	fb02 f303 	mul.w	r3, r2, r3
 8005348:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800534a:	e054      	b.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005352:	d050      	beq.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005354:	f7fe fa20 	bl	8003798 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	429a      	cmp	r2, r3
 8005362:	d902      	bls.n	800536a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d13d      	bne.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005378:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005382:	d111      	bne.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538c:	d004      	beq.n	8005398 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005396:	d107      	bne.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b0:	d10f      	bne.n	80053d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c0:	601a      	str	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e017      	b.n	8005416 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4013      	ands	r3, r2
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	bf0c      	ite	eq
 8005406:	2301      	moveq	r3, #1
 8005408:	2300      	movne	r3, #0
 800540a:	b2db      	uxtb	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	429a      	cmp	r2, r3
 8005412:	d19b      	bne.n	800534c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000000 	.word	0x20000000

08005424 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af02      	add	r7, sp, #8
 800542a:	60f8      	str	r0, [r7, #12]
 800542c:	60b9      	str	r1, [r7, #8]
 800542e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005430:	4b1b      	ldr	r3, [pc, #108]	; (80054a0 <SPI_EndRxTxTransaction+0x7c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1b      	ldr	r2, [pc, #108]	; (80054a4 <SPI_EndRxTxTransaction+0x80>)
 8005436:	fba2 2303 	umull	r2, r3, r2, r3
 800543a:	0d5b      	lsrs	r3, r3, #21
 800543c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800544e:	d112      	bne.n	8005476 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2200      	movs	r2, #0
 8005458:	2180      	movs	r1, #128	; 0x80
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff ff5a 	bl	8005314 <SPI_WaitFlagStateUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d016      	beq.n	8005494 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	f043 0220 	orr.w	r2, r3, #32
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e00f      	b.n	8005496 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	3b01      	subs	r3, #1
 8005480:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548c:	2b80      	cmp	r3, #128	; 0x80
 800548e:	d0f2      	beq.n	8005476 <SPI_EndRxTxTransaction+0x52>
 8005490:	e000      	b.n	8005494 <SPI_EndRxTxTransaction+0x70>
        break;
 8005492:	bf00      	nop
  }

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000000 	.word	0x20000000
 80054a4:	165e9f81 	.word	0x165e9f81

080054a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e041      	b.n	800553e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d106      	bne.n	80054d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fd ff0a 	bl	80032e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f000 fd88 	bl	8005ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b01      	cmp	r3, #1
 800555a:	d001      	beq.n	8005560 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e046      	b.n	80055ee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a23      	ldr	r2, [pc, #140]	; (80055fc <HAL_TIM_Base_Start+0xb4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d022      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557a:	d01d      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <HAL_TIM_Base_Start+0xb8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d018      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1e      	ldr	r2, [pc, #120]	; (8005604 <HAL_TIM_Base_Start+0xbc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <HAL_TIM_Base_Start+0xc0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00e      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1b      	ldr	r2, [pc, #108]	; (800560c <HAL_TIM_Base_Start+0xc4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d009      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a19      	ldr	r2, [pc, #100]	; (8005610 <HAL_TIM_Base_Start+0xc8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_TIM_Base_Start+0x70>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a18      	ldr	r2, [pc, #96]	; (8005614 <HAL_TIM_Base_Start+0xcc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d111      	bne.n	80055dc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d010      	beq.n	80055ec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055da:	e007      	b.n	80055ec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f042 0201 	orr.w	r2, r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40010000 	.word	0x40010000
 8005600:	40000400 	.word	0x40000400
 8005604:	40000800 	.word	0x40000800
 8005608:	40000c00 	.word	0x40000c00
 800560c:	40010400 	.word	0x40010400
 8005610:	40014000 	.word	0x40014000
 8005614:	40001800 	.word	0x40001800

08005618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e041      	b.n	80056ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fd fea4 	bl	800338c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f000 fcd0 	bl	8005ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d109      	bne.n	80056dc <HAL_TIM_PWM_Start+0x24>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e022      	b.n	8005722 <HAL_TIM_PWM_Start+0x6a>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d109      	bne.n	80056f6 <HAL_TIM_PWM_Start+0x3e>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	bf14      	ite	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	2300      	moveq	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e015      	b.n	8005722 <HAL_TIM_PWM_Start+0x6a>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d109      	bne.n	8005710 <HAL_TIM_PWM_Start+0x58>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	e008      	b.n	8005722 <HAL_TIM_PWM_Start+0x6a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	bf14      	ite	ne
 800571c:	2301      	movne	r3, #1
 800571e:	2300      	moveq	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e07c      	b.n	8005824 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <HAL_TIM_PWM_Start+0x82>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005738:	e013      	b.n	8005762 <HAL_TIM_PWM_Start+0xaa>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d104      	bne.n	800574a <HAL_TIM_PWM_Start+0x92>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005748:	e00b      	b.n	8005762 <HAL_TIM_PWM_Start+0xaa>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d104      	bne.n	800575a <HAL_TIM_PWM_Start+0xa2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005758:	e003      	b.n	8005762 <HAL_TIM_PWM_Start+0xaa>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2201      	movs	r2, #1
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 ff30 	bl	80065d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2d      	ldr	r2, [pc, #180]	; (800582c <HAL_TIM_PWM_Start+0x174>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d004      	beq.n	8005784 <HAL_TIM_PWM_Start+0xcc>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2c      	ldr	r2, [pc, #176]	; (8005830 <HAL_TIM_PWM_Start+0x178>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d101      	bne.n	8005788 <HAL_TIM_PWM_Start+0xd0>
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <HAL_TIM_PWM_Start+0xd2>
 8005788:	2300      	movs	r3, #0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800579c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a22      	ldr	r2, [pc, #136]	; (800582c <HAL_TIM_PWM_Start+0x174>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d022      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b0:	d01d      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1f      	ldr	r2, [pc, #124]	; (8005834 <HAL_TIM_PWM_Start+0x17c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1d      	ldr	r2, [pc, #116]	; (8005838 <HAL_TIM_PWM_Start+0x180>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1c      	ldr	r2, [pc, #112]	; (800583c <HAL_TIM_PWM_Start+0x184>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a16      	ldr	r2, [pc, #88]	; (8005830 <HAL_TIM_PWM_Start+0x178>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a18      	ldr	r2, [pc, #96]	; (8005840 <HAL_TIM_PWM_Start+0x188>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_TIM_PWM_Start+0x136>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <HAL_TIM_PWM_Start+0x18c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d111      	bne.n	8005812 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b06      	cmp	r3, #6
 80057fe:	d010      	beq.n	8005822 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	e007      	b.n	8005822 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0201 	orr.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40010000 	.word	0x40010000
 8005830:	40010400 	.word	0x40010400
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40014000 	.word	0x40014000
 8005844:	40001800 	.word	0x40001800

08005848 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d109      	bne.n	8005870 <HAL_TIM_PWM_Start_IT+0x28>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b01      	cmp	r3, #1
 8005866:	bf14      	ite	ne
 8005868:	2301      	movne	r3, #1
 800586a:	2300      	moveq	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e022      	b.n	80058b6 <HAL_TIM_PWM_Start_IT+0x6e>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b04      	cmp	r3, #4
 8005874:	d109      	bne.n	800588a <HAL_TIM_PWM_Start_IT+0x42>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	bf14      	ite	ne
 8005882:	2301      	movne	r3, #1
 8005884:	2300      	moveq	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	e015      	b.n	80058b6 <HAL_TIM_PWM_Start_IT+0x6e>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b08      	cmp	r3, #8
 800588e:	d109      	bne.n	80058a4 <HAL_TIM_PWM_Start_IT+0x5c>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	bf14      	ite	ne
 800589c:	2301      	movne	r3, #1
 800589e:	2300      	moveq	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	e008      	b.n	80058b6 <HAL_TIM_PWM_Start_IT+0x6e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	bf14      	ite	ne
 80058b0:	2301      	movne	r3, #1
 80058b2:	2300      	moveq	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0c7      	b.n	8005a4e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d104      	bne.n	80058ce <HAL_TIM_PWM_Start_IT+0x86>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058cc:	e013      	b.n	80058f6 <HAL_TIM_PWM_Start_IT+0xae>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Start_IT+0x96>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058dc:	e00b      	b.n	80058f6 <HAL_TIM_PWM_Start_IT+0xae>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_PWM_Start_IT+0xa6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ec:	e003      	b.n	80058f6 <HAL_TIM_PWM_Start_IT+0xae>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2202      	movs	r2, #2
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b0c      	cmp	r3, #12
 80058fa:	d841      	bhi.n	8005980 <HAL_TIM_PWM_Start_IT+0x138>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <HAL_TIM_PWM_Start_IT+0xbc>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005939 	.word	0x08005939
 8005908:	08005981 	.word	0x08005981
 800590c:	08005981 	.word	0x08005981
 8005910:	08005981 	.word	0x08005981
 8005914:	0800594b 	.word	0x0800594b
 8005918:	08005981 	.word	0x08005981
 800591c:	08005981 	.word	0x08005981
 8005920:	08005981 	.word	0x08005981
 8005924:	0800595d 	.word	0x0800595d
 8005928:	08005981 	.word	0x08005981
 800592c:	08005981 	.word	0x08005981
 8005930:	08005981 	.word	0x08005981
 8005934:	0800596f 	.word	0x0800596f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0202 	orr.w	r2, r2, #2
 8005946:	60da      	str	r2, [r3, #12]
      break;
 8005948:	e01d      	b.n	8005986 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0204 	orr.w	r2, r2, #4
 8005958:	60da      	str	r2, [r3, #12]
      break;
 800595a:	e014      	b.n	8005986 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0208 	orr.w	r2, r2, #8
 800596a:	60da      	str	r2, [r3, #12]
      break;
 800596c:	e00b      	b.n	8005986 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0210 	orr.w	r2, r2, #16
 800597c:	60da      	str	r2, [r3, #12]
      break;
 800597e:	e002      	b.n	8005986 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	73fb      	strb	r3, [r7, #15]
      break;
 8005984:	bf00      	nop
  }

  if (status == HAL_OK)
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d15f      	bne.n	8005a4c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fe1b 	bl	80065d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2e      	ldr	r2, [pc, #184]	; (8005a58 <HAL_TIM_PWM_Start_IT+0x210>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d004      	beq.n	80059ae <HAL_TIM_PWM_Start_IT+0x166>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2c      	ldr	r2, [pc, #176]	; (8005a5c <HAL_TIM_PWM_Start_IT+0x214>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_TIM_PWM_Start_IT+0x16a>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <HAL_TIM_PWM_Start_IT+0x16c>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a22      	ldr	r2, [pc, #136]	; (8005a58 <HAL_TIM_PWM_Start_IT+0x210>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d022      	beq.n	8005a18 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059da:	d01d      	beq.n	8005a18 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1f      	ldr	r2, [pc, #124]	; (8005a60 <HAL_TIM_PWM_Start_IT+0x218>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d018      	beq.n	8005a18 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1e      	ldr	r2, [pc, #120]	; (8005a64 <HAL_TIM_PWM_Start_IT+0x21c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d013      	beq.n	8005a18 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1c      	ldr	r2, [pc, #112]	; (8005a68 <HAL_TIM_PWM_Start_IT+0x220>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00e      	beq.n	8005a18 <HAL_TIM_PWM_Start_IT+0x1d0>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <HAL_TIM_PWM_Start_IT+0x214>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d009      	beq.n	8005a18 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <HAL_TIM_PWM_Start_IT+0x224>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_TIM_PWM_Start_IT+0x1d0>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <HAL_TIM_PWM_Start_IT+0x228>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d111      	bne.n	8005a3c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b06      	cmp	r3, #6
 8005a28:	d010      	beq.n	8005a4c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0201 	orr.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3a:	e007      	b.n	8005a4c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40010400 	.word	0x40010400
 8005a60:	40000400 	.word	0x40000400
 8005a64:	40000800 	.word	0x40000800
 8005a68:	40000c00 	.word	0x40000c00
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40001800 	.word	0x40001800

08005a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d122      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d11b      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0202 	mvn.w	r2, #2
 8005aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fa81 	bl	8005fbe <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa73 	bl	8005faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fa84 	bl	8005fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d122      	bne.n	8005b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d11b      	bne.n	8005b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0204 	mvn.w	r2, #4
 8005af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fa57 	bl	8005fbe <HAL_TIM_IC_CaptureCallback>
 8005b10:	e005      	b.n	8005b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa49 	bl	8005faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fa5a 	bl	8005fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d122      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d11b      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0208 	mvn.w	r2, #8
 8005b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa2d 	bl	8005fbe <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fa1f 	bl	8005faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fa30 	bl	8005fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d122      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d11b      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0210 	mvn.w	r2, #16
 8005b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fa03 	bl	8005fbe <HAL_TIM_IC_CaptureCallback>
 8005bb8:	e005      	b.n	8005bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9f5 	bl	8005faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fa06 	bl	8005fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d107      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0201 	mvn.w	r2, #1
 8005bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f9cf 	bl	8005f96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d10e      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c10:	2b80      	cmp	r3, #128	; 0x80
 8005c12:	d107      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fd82 	bl	8006728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d10e      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d107      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f9cb 	bl	8005fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d10e      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d107      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0220 	mvn.w	r2, #32
 8005c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fd4c 	bl	8006714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d101      	bne.n	8005ca2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e0ae      	b.n	8005e00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b0c      	cmp	r3, #12
 8005cae:	f200 809f 	bhi.w	8005df0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cb2:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb8:	08005ced 	.word	0x08005ced
 8005cbc:	08005df1 	.word	0x08005df1
 8005cc0:	08005df1 	.word	0x08005df1
 8005cc4:	08005df1 	.word	0x08005df1
 8005cc8:	08005d2d 	.word	0x08005d2d
 8005ccc:	08005df1 	.word	0x08005df1
 8005cd0:	08005df1 	.word	0x08005df1
 8005cd4:	08005df1 	.word	0x08005df1
 8005cd8:	08005d6f 	.word	0x08005d6f
 8005cdc:	08005df1 	.word	0x08005df1
 8005ce0:	08005df1 	.word	0x08005df1
 8005ce4:	08005df1 	.word	0x08005df1
 8005ce8:	08005daf 	.word	0x08005daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fa22 	bl	800613c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0208 	orr.w	r2, r2, #8
 8005d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699a      	ldr	r2, [r3, #24]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0204 	bic.w	r2, r2, #4
 8005d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6999      	ldr	r1, [r3, #24]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	619a      	str	r2, [r3, #24]
      break;
 8005d2a:	e064      	b.n	8005df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fa72 	bl	800621c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6999      	ldr	r1, [r3, #24]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	021a      	lsls	r2, r3, #8
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	619a      	str	r2, [r3, #24]
      break;
 8005d6c:	e043      	b.n	8005df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68b9      	ldr	r1, [r7, #8]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fac7 	bl	8006308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0208 	orr.w	r2, r2, #8
 8005d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69da      	ldr	r2, [r3, #28]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0204 	bic.w	r2, r2, #4
 8005d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69d9      	ldr	r1, [r3, #28]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	61da      	str	r2, [r3, #28]
      break;
 8005dac:	e023      	b.n	8005df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68b9      	ldr	r1, [r7, #8]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fb1b 	bl	80063f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69da      	ldr	r2, [r3, #28]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69d9      	ldr	r1, [r3, #28]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	021a      	lsls	r2, r3, #8
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	61da      	str	r2, [r3, #28]
      break;
 8005dee:	e002      	b.n	8005df6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	75fb      	strb	r3, [r7, #23]
      break;
 8005df4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_TIM_ConfigClockSource+0x1c>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e0b4      	b.n	8005f8e <HAL_TIM_ConfigClockSource+0x186>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5c:	d03e      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0xd4>
 8005e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e62:	f200 8087 	bhi.w	8005f74 <HAL_TIM_ConfigClockSource+0x16c>
 8005e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6a:	f000 8086 	beq.w	8005f7a <HAL_TIM_ConfigClockSource+0x172>
 8005e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e72:	d87f      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x16c>
 8005e74:	2b70      	cmp	r3, #112	; 0x70
 8005e76:	d01a      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0xa6>
 8005e78:	2b70      	cmp	r3, #112	; 0x70
 8005e7a:	d87b      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x16c>
 8005e7c:	2b60      	cmp	r3, #96	; 0x60
 8005e7e:	d050      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x11a>
 8005e80:	2b60      	cmp	r3, #96	; 0x60
 8005e82:	d877      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x16c>
 8005e84:	2b50      	cmp	r3, #80	; 0x50
 8005e86:	d03c      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0xfa>
 8005e88:	2b50      	cmp	r3, #80	; 0x50
 8005e8a:	d873      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x16c>
 8005e8c:	2b40      	cmp	r3, #64	; 0x40
 8005e8e:	d058      	beq.n	8005f42 <HAL_TIM_ConfigClockSource+0x13a>
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d86f      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x16c>
 8005e94:	2b30      	cmp	r3, #48	; 0x30
 8005e96:	d064      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x15a>
 8005e98:	2b30      	cmp	r3, #48	; 0x30
 8005e9a:	d86b      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x16c>
 8005e9c:	2b20      	cmp	r3, #32
 8005e9e:	d060      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x15a>
 8005ea0:	2b20      	cmp	r3, #32
 8005ea2:	d867      	bhi.n	8005f74 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d05c      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x15a>
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d05a      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x15a>
 8005eac:	e062      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6818      	ldr	r0, [r3, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	6899      	ldr	r1, [r3, #8]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	f000 fb67 	bl	8006590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ed0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	609a      	str	r2, [r3, #8]
      break;
 8005eda:	e04f      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	6899      	ldr	r1, [r3, #8]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f000 fb50 	bl	8006590 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005efe:	609a      	str	r2, [r3, #8]
      break;
 8005f00:	e03c      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6859      	ldr	r1, [r3, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f000 fac4 	bl	800649c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2150      	movs	r1, #80	; 0x50
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fb1d 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 8005f20:	e02c      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6859      	ldr	r1, [r3, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f000 fae3 	bl	80064fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2160      	movs	r1, #96	; 0x60
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fb0d 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 8005f40:	e01c      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	6859      	ldr	r1, [r3, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f000 faa4 	bl	800649c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2140      	movs	r1, #64	; 0x40
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fafd 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 8005f60:	e00c      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	f000 faf4 	bl	800655a <TIM_ITRx_SetConfig>
      break;
 8005f72:	e003      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	73fb      	strb	r3, [r7, #15]
      break;
 8005f78:	e000      	b.n	8005f7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a40      	ldr	r2, [pc, #256]	; (8006110 <TIM_Base_SetConfig+0x114>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601a:	d00f      	beq.n	800603c <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3d      	ldr	r2, [pc, #244]	; (8006114 <TIM_Base_SetConfig+0x118>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00b      	beq.n	800603c <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3c      	ldr	r2, [pc, #240]	; (8006118 <TIM_Base_SetConfig+0x11c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d007      	beq.n	800603c <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a3b      	ldr	r2, [pc, #236]	; (800611c <TIM_Base_SetConfig+0x120>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_Base_SetConfig+0x40>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a3a      	ldr	r2, [pc, #232]	; (8006120 <TIM_Base_SetConfig+0x124>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d108      	bne.n	800604e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2f      	ldr	r2, [pc, #188]	; (8006110 <TIM_Base_SetConfig+0x114>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d02b      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605c:	d027      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2c      	ldr	r2, [pc, #176]	; (8006114 <TIM_Base_SetConfig+0x118>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d023      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2b      	ldr	r2, [pc, #172]	; (8006118 <TIM_Base_SetConfig+0x11c>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01f      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a2a      	ldr	r2, [pc, #168]	; (800611c <TIM_Base_SetConfig+0x120>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01b      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a29      	ldr	r2, [pc, #164]	; (8006120 <TIM_Base_SetConfig+0x124>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d017      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a28      	ldr	r2, [pc, #160]	; (8006124 <TIM_Base_SetConfig+0x128>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a27      	ldr	r2, [pc, #156]	; (8006128 <TIM_Base_SetConfig+0x12c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00f      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a26      	ldr	r2, [pc, #152]	; (800612c <TIM_Base_SetConfig+0x130>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00b      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a25      	ldr	r2, [pc, #148]	; (8006130 <TIM_Base_SetConfig+0x134>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d007      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a24      	ldr	r2, [pc, #144]	; (8006134 <TIM_Base_SetConfig+0x138>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a23      	ldr	r2, [pc, #140]	; (8006138 <TIM_Base_SetConfig+0x13c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d108      	bne.n	80060c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a0a      	ldr	r2, [pc, #40]	; (8006110 <TIM_Base_SetConfig+0x114>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_Base_SetConfig+0xf8>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a0c      	ldr	r2, [pc, #48]	; (8006120 <TIM_Base_SetConfig+0x124>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d103      	bne.n	80060fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	615a      	str	r2, [r3, #20]
}
 8006102:	bf00      	nop
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40010400 	.word	0x40010400
 8006124:	40014000 	.word	0x40014000
 8006128:	40014400 	.word	0x40014400
 800612c:	40014800 	.word	0x40014800
 8006130:	40001800 	.word	0x40001800
 8006134:	40001c00 	.word	0x40001c00
 8006138:	40002000 	.word	0x40002000

0800613c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f023 0201 	bic.w	r2, r3, #1
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800616a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0303 	bic.w	r3, r3, #3
 8006172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 0302 	bic.w	r3, r3, #2
 8006184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a20      	ldr	r2, [pc, #128]	; (8006214 <TIM_OC1_SetConfig+0xd8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_OC1_SetConfig+0x64>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a1f      	ldr	r2, [pc, #124]	; (8006218 <TIM_OC1_SetConfig+0xdc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d10c      	bne.n	80061ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0308 	bic.w	r3, r3, #8
 80061a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f023 0304 	bic.w	r3, r3, #4
 80061b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a15      	ldr	r2, [pc, #84]	; (8006214 <TIM_OC1_SetConfig+0xd8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_OC1_SetConfig+0x8e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a14      	ldr	r2, [pc, #80]	; (8006218 <TIM_OC1_SetConfig+0xdc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d111      	bne.n	80061ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	621a      	str	r2, [r3, #32]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	40010000 	.word	0x40010000
 8006218:	40010400 	.word	0x40010400

0800621c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f023 0210 	bic.w	r2, r3, #16
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	021b      	lsls	r3, r3, #8
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f023 0320 	bic.w	r3, r3, #32
 8006266:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a22      	ldr	r2, [pc, #136]	; (8006300 <TIM_OC2_SetConfig+0xe4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_OC2_SetConfig+0x68>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a21      	ldr	r2, [pc, #132]	; (8006304 <TIM_OC2_SetConfig+0xe8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d10d      	bne.n	80062a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800629e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a17      	ldr	r2, [pc, #92]	; (8006300 <TIM_OC2_SetConfig+0xe4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d003      	beq.n	80062b0 <TIM_OC2_SetConfig+0x94>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a16      	ldr	r2, [pc, #88]	; (8006304 <TIM_OC2_SetConfig+0xe8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d113      	bne.n	80062d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	621a      	str	r2, [r3, #32]
}
 80062f2:	bf00      	nop
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40010000 	.word	0x40010000
 8006304:	40010400 	.word	0x40010400

08006308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 0303 	bic.w	r3, r3, #3
 800633e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4313      	orrs	r3, r2
 800635c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <TIM_OC3_SetConfig+0xe0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_OC3_SetConfig+0x66>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a20      	ldr	r2, [pc, #128]	; (80063ec <TIM_OC3_SetConfig+0xe4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d10d      	bne.n	800638a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <TIM_OC3_SetConfig+0xe0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d003      	beq.n	800639a <TIM_OC3_SetConfig+0x92>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a15      	ldr	r2, [pc, #84]	; (80063ec <TIM_OC3_SetConfig+0xe4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d113      	bne.n	80063c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	621a      	str	r2, [r3, #32]
}
 80063dc:	bf00      	nop
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010400 	.word	0x40010400

080063f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b087      	sub	sp, #28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800643a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	031b      	lsls	r3, r3, #12
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a12      	ldr	r2, [pc, #72]	; (8006494 <TIM_OC4_SetConfig+0xa4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_OC4_SetConfig+0x68>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a11      	ldr	r2, [pc, #68]	; (8006498 <TIM_OC4_SetConfig+0xa8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d109      	bne.n	800646c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800645e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	019b      	lsls	r3, r3, #6
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40010000 	.word	0x40010000
 8006498:	40010400 	.word	0x40010400

0800649c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	f023 0201 	bic.w	r2, r3, #1
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f023 030a 	bic.w	r3, r3, #10
 80064d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	621a      	str	r2, [r3, #32]
}
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b087      	sub	sp, #28
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	f023 0210 	bic.w	r2, r3, #16
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006524:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	031b      	lsls	r3, r3, #12
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006536:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800655a:	b480      	push	{r7}
 800655c:	b085      	sub	sp, #20
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	f043 0307 	orr.w	r3, r3, #7
 800657c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	609a      	str	r2, [r3, #8]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	021a      	lsls	r2, r3, #8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	609a      	str	r2, [r3, #8]
}
 80065c4:	bf00      	nop
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	2201      	movs	r2, #1
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a1a      	ldr	r2, [r3, #32]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	43db      	mvns	r3, r3
 80065f2:	401a      	ands	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a1a      	ldr	r2, [r3, #32]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	fa01 f303 	lsl.w	r3, r1, r3
 8006608:	431a      	orrs	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006630:	2302      	movs	r3, #2
 8006632:	e05a      	b.n	80066ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a21      	ldr	r2, [pc, #132]	; (80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d022      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006680:	d01d      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1d      	ldr	r2, [pc, #116]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d018      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a1a      	ldr	r2, [pc, #104]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00e      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a18      	ldr	r2, [pc, #96]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d009      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a17      	ldr	r2, [pc, #92]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d004      	beq.n	80066be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a15      	ldr	r2, [pc, #84]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d10c      	bne.n	80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40010000 	.word	0x40010000
 80066fc:	40000400 	.word	0x40000400
 8006700:	40000800 	.word	0x40000800
 8006704:	40000c00 	.word	0x40000c00
 8006708:	40010400 	.word	0x40010400
 800670c:	40014000 	.word	0x40014000
 8006710:	40001800 	.word	0x40001800

08006714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e03f      	b.n	80067ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fc fe9a 	bl	800349c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2224      	movs	r2, #36	; 0x24
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800677e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fde9 	bl	8007358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691a      	ldr	r2, [r3, #16]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695a      	ldr	r2, [r3, #20]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68da      	ldr	r2, [r3, #12]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b08a      	sub	sp, #40	; 0x28
 80067da:	af02      	add	r7, sp, #8
 80067dc:	60f8      	str	r0, [r7, #12]
 80067de:	60b9      	str	r1, [r7, #8]
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b20      	cmp	r3, #32
 80067f4:	d17c      	bne.n	80068f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_UART_Transmit+0x2c>
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e075      	b.n	80068f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_UART_Transmit+0x3e>
 8006810:	2302      	movs	r3, #2
 8006812:	e06e      	b.n	80068f2 <HAL_UART_Transmit+0x11c>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2221      	movs	r2, #33	; 0x21
 8006826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800682a:	f7fc ffb5 	bl	8003798 <HAL_GetTick>
 800682e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	88fa      	ldrh	r2, [r7, #6]
 8006834:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	88fa      	ldrh	r2, [r7, #6]
 800683a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006844:	d108      	bne.n	8006858 <HAL_UART_Transmit+0x82>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	e003      	b.n	8006860 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006868:	e02a      	b.n	80068c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2200      	movs	r2, #0
 8006872:	2180      	movs	r1, #128	; 0x80
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 fb29 	bl	8006ecc <UART_WaitOnFlagUntilTimeout>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e036      	b.n	80068f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	3302      	adds	r3, #2
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	e007      	b.n	80068b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	3301      	adds	r3, #1
 80068b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1cf      	bne.n	800686a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2200      	movs	r2, #0
 80068d2:	2140      	movs	r1, #64	; 0x40
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 faf9 	bl	8006ecc <UART_WaitOnFlagUntilTimeout>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e006      	b.n	80068f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	e000      	b.n	80068f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80068f0:	2302      	movs	r3, #2
  }
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	4613      	mov	r3, r2
 8006906:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b20      	cmp	r3, #32
 8006912:	d11d      	bne.n	8006950 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_UART_Receive_IT+0x26>
 800691a:	88fb      	ldrh	r3, [r7, #6]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e016      	b.n	8006952 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692a:	2b01      	cmp	r3, #1
 800692c:	d101      	bne.n	8006932 <HAL_UART_Receive_IT+0x38>
 800692e:	2302      	movs	r3, #2
 8006930:	e00f      	b.n	8006952 <HAL_UART_Receive_IT+0x58>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006940:	88fb      	ldrh	r3, [r7, #6]
 8006942:	461a      	mov	r2, r3
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 fb2e 	bl	8006fa8 <UART_Start_Receive_IT>
 800694c:	4603      	mov	r3, r0
 800694e:	e000      	b.n	8006952 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006950:	2302      	movs	r3, #2
  }
}
 8006952:	4618      	mov	r0, r3
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
	...

0800695c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b0ba      	sub	sp, #232	; 0xe8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006982:	2300      	movs	r3, #0
 8006984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006988:	2300      	movs	r3, #0
 800698a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800699a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10f      	bne.n	80069c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a6:	f003 0320 	and.w	r3, r3, #32
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <HAL_UART_IRQHandler+0x66>
 80069ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d003      	beq.n	80069c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fc11 	bl	80071e2 <UART_Receive_IT>
      return;
 80069c0:	e256      	b.n	8006e70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80de 	beq.w	8006b88 <HAL_UART_IRQHandler+0x22c>
 80069cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d106      	bne.n	80069e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 80d1 	beq.w	8006b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00b      	beq.n	8006a0a <HAL_UART_IRQHandler+0xae>
 80069f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f043 0201 	orr.w	r2, r3, #1
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00b      	beq.n	8006a2e <HAL_UART_IRQHandler+0xd2>
 8006a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d005      	beq.n	8006a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f043 0202 	orr.w	r2, r3, #2
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00b      	beq.n	8006a52 <HAL_UART_IRQHandler+0xf6>
 8006a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d005      	beq.n	8006a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f043 0204 	orr.w	r2, r3, #4
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d011      	beq.n	8006a82 <HAL_UART_IRQHandler+0x126>
 8006a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f043 0208 	orr.w	r2, r3, #8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 81ed 	beq.w	8006e66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <HAL_UART_IRQHandler+0x14e>
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d002      	beq.n	8006aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fb9c 	bl	80071e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2301      	moveq	r3, #1
 8006aba:	2300      	movne	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	f003 0308 	and.w	r3, r3, #8
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d103      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x17a>
 8006ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d04f      	beq.n	8006b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 faa4 	bl	8007024 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d141      	bne.n	8006b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	3314      	adds	r3, #20
 8006af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006af8:	e853 3f00 	ldrex	r3, [r3]
 8006afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3314      	adds	r3, #20
 8006b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1d9      	bne.n	8006aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d013      	beq.n	8006b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	4a7d      	ldr	r2, [pc, #500]	; (8006d38 <HAL_UART_IRQHandler+0x3dc>)
 8006b44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7fd f8dc 	bl	8003d08 <HAL_DMA_Abort_IT>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d016      	beq.n	8006b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b60:	4610      	mov	r0, r2
 8006b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	e00e      	b.n	8006b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f99a 	bl	8006ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6c:	e00a      	b.n	8006b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f996 	bl	8006ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b74:	e006      	b.n	8006b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f992 	bl	8006ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b82:	e170      	b.n	8006e66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b84:	bf00      	nop
    return;
 8006b86:	e16e      	b.n	8006e66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	f040 814a 	bne.w	8006e26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 8143 	beq.w	8006e26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 813c 	beq.w	8006e26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60bb      	str	r3, [r7, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	60bb      	str	r3, [r7, #8]
 8006bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	f040 80b4 	bne.w	8006d3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8140 	beq.w	8006e6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	f080 8139 	bcs.w	8006e6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c0a:	f000 8088 	beq.w	8006d1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	330c      	adds	r3, #12
 8006c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	330c      	adds	r3, #12
 8006c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c4a:	e841 2300 	strex	r3, r2, [r1]
 8006c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1d9      	bne.n	8006c0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3314      	adds	r3, #20
 8006c60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3314      	adds	r3, #20
 8006c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c8a:	e841 2300 	strex	r3, r2, [r1]
 8006c8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1e1      	bne.n	8006c5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3314      	adds	r3, #20
 8006c9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ca0:	e853 3f00 	ldrex	r3, [r3]
 8006ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3314      	adds	r3, #20
 8006cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006cbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e3      	bne.n	8006c96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cee:	f023 0310 	bic.w	r3, r3, #16
 8006cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	330c      	adds	r3, #12
 8006cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d00:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e3      	bne.n	8006cdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fc ff85 	bl	8003c28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f8c0 	bl	8006eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d34:	e099      	b.n	8006e6a <HAL_UART_IRQHandler+0x50e>
 8006d36:	bf00      	nop
 8006d38:	080070eb 	.word	0x080070eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 808b 	beq.w	8006e6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8086 	beq.w	8006e6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d86:	647a      	str	r2, [r7, #68]	; 0x44
 8006d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d8e:	e841 2300 	strex	r3, r2, [r1]
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1e3      	bne.n	8006d62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	623b      	str	r3, [r7, #32]
   return(result);
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	f023 0301 	bic.w	r3, r3, #1
 8006db0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	3314      	adds	r3, #20
 8006dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dbe:	633a      	str	r2, [r7, #48]	; 0x30
 8006dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e3      	bne.n	8006d9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	330c      	adds	r3, #12
 8006de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	e853 3f00 	ldrex	r3, [r3]
 8006dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0310 	bic.w	r3, r3, #16
 8006df6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	330c      	adds	r3, #12
 8006e00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e04:	61fa      	str	r2, [r7, #28]
 8006e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e08:	69b9      	ldr	r1, [r7, #24]
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	e841 2300 	strex	r3, r2, [r1]
 8006e10:	617b      	str	r3, [r7, #20]
   return(result);
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e3      	bne.n	8006de0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f848 	bl	8006eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e24:	e023      	b.n	8006e6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <HAL_UART_IRQHandler+0x4ea>
 8006e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f967 	bl	8007112 <UART_Transmit_IT>
    return;
 8006e44:	e014      	b.n	8006e70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00e      	beq.n	8006e70 <HAL_UART_IRQHandler+0x514>
 8006e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d008      	beq.n	8006e70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f9a7 	bl	80071b2 <UART_EndTransmit_IT>
    return;
 8006e64:	e004      	b.n	8006e70 <HAL_UART_IRQHandler+0x514>
    return;
 8006e66:	bf00      	nop
 8006e68:	e002      	b.n	8006e70 <HAL_UART_IRQHandler+0x514>
      return;
 8006e6a:	bf00      	nop
 8006e6c:	e000      	b.n	8006e70 <HAL_UART_IRQHandler+0x514>
      return;
 8006e6e:	bf00      	nop
  }
}
 8006e70:	37e8      	adds	r7, #232	; 0xe8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop

08006e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b090      	sub	sp, #64	; 0x40
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006edc:	e050      	b.n	8006f80 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d04c      	beq.n	8006f80 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <UART_WaitOnFlagUntilTimeout+0x30>
 8006eec:	f7fc fc54 	bl	8003798 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d241      	bcs.n	8006f80 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	330c      	adds	r3, #12
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	330c      	adds	r3, #12
 8006f1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f1c:	637a      	str	r2, [r7, #52]	; 0x34
 8006f1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e5      	bne.n	8006efc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3314      	adds	r3, #20
 8006f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f023 0301 	bic.w	r3, r3, #1
 8006f46:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3314      	adds	r3, #20
 8006f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f50:	623a      	str	r2, [r7, #32]
 8006f52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	69f9      	ldr	r1, [r7, #28]
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e5      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e00f      	b.n	8006fa0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	bf0c      	ite	eq
 8006f90:	2301      	moveq	r3, #1
 8006f92:	2300      	movne	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	461a      	mov	r2, r3
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d09f      	beq.n	8006ede <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3740      	adds	r7, #64	; 0x40
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	88fa      	ldrh	r2, [r7, #6]
 8006fc0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	88fa      	ldrh	r2, [r7, #6]
 8006fc6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2222      	movs	r2, #34	; 0x22
 8006fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68da      	ldr	r2, [r3, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ff4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695a      	ldr	r2, [r3, #20]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0201 	orr.w	r2, r2, #1
 8007004:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f042 0220 	orr.w	r2, r2, #32
 8007014:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b095      	sub	sp, #84	; 0x54
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	330c      	adds	r3, #12
 800704a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800704c:	643a      	str	r2, [r7, #64]	; 0x40
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800705a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e5      	bne.n	800702c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3314      	adds	r3, #20
 8007066:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	f023 0301 	bic.w	r3, r3, #1
 8007076:	64bb      	str	r3, [r7, #72]	; 0x48
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3314      	adds	r3, #20
 800707e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007080:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e5      	bne.n	8007060 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	2b01      	cmp	r3, #1
 800709a:	d119      	bne.n	80070d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f023 0310 	bic.w	r3, r3, #16
 80070b2:	647b      	str	r3, [r7, #68]	; 0x44
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	330c      	adds	r3, #12
 80070ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070bc:	61ba      	str	r2, [r7, #24]
 80070be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	6979      	ldr	r1, [r7, #20]
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	e841 2300 	strex	r3, r2, [r1]
 80070c8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1e5      	bne.n	800709c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070de:	bf00      	nop
 80070e0:	3754      	adds	r7, #84	; 0x54
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f7ff fecb 	bl	8006ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b21      	cmp	r3, #33	; 0x21
 8007124:	d13e      	bne.n	80071a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712e:	d114      	bne.n	800715a <UART_Transmit_IT+0x48>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d110      	bne.n	800715a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	881b      	ldrh	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800714c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	1c9a      	adds	r2, r3, #2
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	621a      	str	r2, [r3, #32]
 8007158:	e008      	b.n	800716c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6211      	str	r1, [r2, #32]
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29b      	uxth	r3, r3
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	4619      	mov	r1, r3
 800717a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10f      	bne.n	80071a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800718e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800719e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	e000      	b.n	80071a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071a4:	2302      	movs	r3, #2
  }
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff fe50 	bl	8006e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b08c      	sub	sp, #48	; 0x30
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b22      	cmp	r3, #34	; 0x22
 80071f4:	f040 80ab 	bne.w	800734e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007200:	d117      	bne.n	8007232 <UART_Receive_IT+0x50>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d113      	bne.n	8007232 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007212:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007220:	b29a      	uxth	r2, r3
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	1c9a      	adds	r2, r3, #2
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	629a      	str	r2, [r3, #40]	; 0x28
 8007230:	e026      	b.n	8007280 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007238:	2300      	movs	r3, #0
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007244:	d007      	beq.n	8007256 <UART_Receive_IT+0x74>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <UART_Receive_IT+0x82>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d106      	bne.n	8007264 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	b2da      	uxtb	r2, r3
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	701a      	strb	r2, [r3, #0]
 8007262:	e008      	b.n	8007276 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007270:	b2da      	uxtb	r2, r3
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007284:	b29b      	uxth	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	b29b      	uxth	r3, r3
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	4619      	mov	r1, r3
 800728e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007290:	2b00      	cmp	r3, #0
 8007292:	d15a      	bne.n	800734a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0220 	bic.w	r2, r2, #32
 80072a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695a      	ldr	r2, [r3, #20]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0201 	bic.w	r2, r2, #1
 80072c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d135      	bne.n	8007340 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	330c      	adds	r3, #12
 80072e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	613b      	str	r3, [r7, #16]
   return(result);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f023 0310 	bic.w	r3, r3, #16
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	330c      	adds	r3, #12
 80072f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072fa:	623a      	str	r2, [r7, #32]
 80072fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	69f9      	ldr	r1, [r7, #28]
 8007300:	6a3a      	ldr	r2, [r7, #32]
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	61bb      	str	r3, [r7, #24]
   return(result);
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e5      	bne.n	80072da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0310 	and.w	r3, r3, #16
 8007318:	2b10      	cmp	r3, #16
 800731a:	d10a      	bne.n	8007332 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff fdbb 	bl	8006eb4 <HAL_UARTEx_RxEventCallback>
 800733e:	e002      	b.n	8007346 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7ff fda3 	bl	8006e8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	e002      	b.n	8007350 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	e000      	b.n	8007350 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800734e:	2302      	movs	r3, #2
  }
}
 8007350:	4618      	mov	r0, r3
 8007352:	3730      	adds	r7, #48	; 0x30
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800735c:	b0c0      	sub	sp, #256	; 0x100
 800735e:	af00      	add	r7, sp, #0
 8007360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	68d9      	ldr	r1, [r3, #12]
 8007376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	ea40 0301 	orr.w	r3, r0, r1
 8007380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	431a      	orrs	r2, r3
 8007390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	431a      	orrs	r2, r3
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073b0:	f021 010c 	bic.w	r1, r1, #12
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073be:	430b      	orrs	r3, r1
 80073c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d2:	6999      	ldr	r1, [r3, #24]
 80073d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	ea40 0301 	orr.w	r3, r0, r1
 80073de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	4b8f      	ldr	r3, [pc, #572]	; (8007624 <UART_SetConfig+0x2cc>)
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d005      	beq.n	80073f8 <UART_SetConfig+0xa0>
 80073ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	4b8d      	ldr	r3, [pc, #564]	; (8007628 <UART_SetConfig+0x2d0>)
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d104      	bne.n	8007402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073f8:	f7fd fd4c 	bl	8004e94 <HAL_RCC_GetPCLK2Freq>
 80073fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007400:	e003      	b.n	800740a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007402:	f7fd fd33 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 8007406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007414:	f040 810c 	bne.w	8007630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800741c:	2200      	movs	r2, #0
 800741e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800742a:	4622      	mov	r2, r4
 800742c:	462b      	mov	r3, r5
 800742e:	1891      	adds	r1, r2, r2
 8007430:	65b9      	str	r1, [r7, #88]	; 0x58
 8007432:	415b      	adcs	r3, r3
 8007434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800743a:	4621      	mov	r1, r4
 800743c:	eb12 0801 	adds.w	r8, r2, r1
 8007440:	4629      	mov	r1, r5
 8007442:	eb43 0901 	adc.w	r9, r3, r1
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800745a:	4690      	mov	r8, r2
 800745c:	4699      	mov	r9, r3
 800745e:	4623      	mov	r3, r4
 8007460:	eb18 0303 	adds.w	r3, r8, r3
 8007464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007468:	462b      	mov	r3, r5
 800746a:	eb49 0303 	adc.w	r3, r9, r3
 800746e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800747e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007486:	460b      	mov	r3, r1
 8007488:	18db      	adds	r3, r3, r3
 800748a:	653b      	str	r3, [r7, #80]	; 0x50
 800748c:	4613      	mov	r3, r2
 800748e:	eb42 0303 	adc.w	r3, r2, r3
 8007492:	657b      	str	r3, [r7, #84]	; 0x54
 8007494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800749c:	f7f9 fbe4 	bl	8000c68 <__aeabi_uldivmod>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4b61      	ldr	r3, [pc, #388]	; (800762c <UART_SetConfig+0x2d4>)
 80074a6:	fba3 2302 	umull	r2, r3, r3, r2
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	011c      	lsls	r4, r3, #4
 80074ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80074bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80074c0:	4642      	mov	r2, r8
 80074c2:	464b      	mov	r3, r9
 80074c4:	1891      	adds	r1, r2, r2
 80074c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80074c8:	415b      	adcs	r3, r3
 80074ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074d0:	4641      	mov	r1, r8
 80074d2:	eb12 0a01 	adds.w	sl, r2, r1
 80074d6:	4649      	mov	r1, r9
 80074d8:	eb43 0b01 	adc.w	fp, r3, r1
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074f0:	4692      	mov	sl, r2
 80074f2:	469b      	mov	fp, r3
 80074f4:	4643      	mov	r3, r8
 80074f6:	eb1a 0303 	adds.w	r3, sl, r3
 80074fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074fe:	464b      	mov	r3, r9
 8007500:	eb4b 0303 	adc.w	r3, fp, r3
 8007504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800751c:	460b      	mov	r3, r1
 800751e:	18db      	adds	r3, r3, r3
 8007520:	643b      	str	r3, [r7, #64]	; 0x40
 8007522:	4613      	mov	r3, r2
 8007524:	eb42 0303 	adc.w	r3, r2, r3
 8007528:	647b      	str	r3, [r7, #68]	; 0x44
 800752a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800752e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007532:	f7f9 fb99 	bl	8000c68 <__aeabi_uldivmod>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4611      	mov	r1, r2
 800753c:	4b3b      	ldr	r3, [pc, #236]	; (800762c <UART_SetConfig+0x2d4>)
 800753e:	fba3 2301 	umull	r2, r3, r3, r1
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	2264      	movs	r2, #100	; 0x64
 8007546:	fb02 f303 	mul.w	r3, r2, r3
 800754a:	1acb      	subs	r3, r1, r3
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007552:	4b36      	ldr	r3, [pc, #216]	; (800762c <UART_SetConfig+0x2d4>)
 8007554:	fba3 2302 	umull	r2, r3, r3, r2
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007560:	441c      	add	r4, r3
 8007562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007566:	2200      	movs	r2, #0
 8007568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800756c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007574:	4642      	mov	r2, r8
 8007576:	464b      	mov	r3, r9
 8007578:	1891      	adds	r1, r2, r2
 800757a:	63b9      	str	r1, [r7, #56]	; 0x38
 800757c:	415b      	adcs	r3, r3
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007584:	4641      	mov	r1, r8
 8007586:	1851      	adds	r1, r2, r1
 8007588:	6339      	str	r1, [r7, #48]	; 0x30
 800758a:	4649      	mov	r1, r9
 800758c:	414b      	adcs	r3, r1
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800759c:	4659      	mov	r1, fp
 800759e:	00cb      	lsls	r3, r1, #3
 80075a0:	4651      	mov	r1, sl
 80075a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075a6:	4651      	mov	r1, sl
 80075a8:	00ca      	lsls	r2, r1, #3
 80075aa:	4610      	mov	r0, r2
 80075ac:	4619      	mov	r1, r3
 80075ae:	4603      	mov	r3, r0
 80075b0:	4642      	mov	r2, r8
 80075b2:	189b      	adds	r3, r3, r2
 80075b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075b8:	464b      	mov	r3, r9
 80075ba:	460a      	mov	r2, r1
 80075bc:	eb42 0303 	adc.w	r3, r2, r3
 80075c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80075d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075d8:	460b      	mov	r3, r1
 80075da:	18db      	adds	r3, r3, r3
 80075dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80075de:	4613      	mov	r3, r2
 80075e0:	eb42 0303 	adc.w	r3, r2, r3
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075ee:	f7f9 fb3b 	bl	8000c68 <__aeabi_uldivmod>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4b0d      	ldr	r3, [pc, #52]	; (800762c <UART_SetConfig+0x2d4>)
 80075f8:	fba3 1302 	umull	r1, r3, r3, r2
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	2164      	movs	r1, #100	; 0x64
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	3332      	adds	r3, #50	; 0x32
 800760a:	4a08      	ldr	r2, [pc, #32]	; (800762c <UART_SetConfig+0x2d4>)
 800760c:	fba2 2303 	umull	r2, r3, r2, r3
 8007610:	095b      	lsrs	r3, r3, #5
 8007612:	f003 0207 	and.w	r2, r3, #7
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4422      	add	r2, r4
 800761e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007620:	e105      	b.n	800782e <UART_SetConfig+0x4d6>
 8007622:	bf00      	nop
 8007624:	40011000 	.word	0x40011000
 8007628:	40011400 	.word	0x40011400
 800762c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007634:	2200      	movs	r2, #0
 8007636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800763a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800763e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007642:	4642      	mov	r2, r8
 8007644:	464b      	mov	r3, r9
 8007646:	1891      	adds	r1, r2, r2
 8007648:	6239      	str	r1, [r7, #32]
 800764a:	415b      	adcs	r3, r3
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
 800764e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007652:	4641      	mov	r1, r8
 8007654:	1854      	adds	r4, r2, r1
 8007656:	4649      	mov	r1, r9
 8007658:	eb43 0501 	adc.w	r5, r3, r1
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	00eb      	lsls	r3, r5, #3
 8007666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800766a:	00e2      	lsls	r2, r4, #3
 800766c:	4614      	mov	r4, r2
 800766e:	461d      	mov	r5, r3
 8007670:	4643      	mov	r3, r8
 8007672:	18e3      	adds	r3, r4, r3
 8007674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007678:	464b      	mov	r3, r9
 800767a:	eb45 0303 	adc.w	r3, r5, r3
 800767e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800768e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800769e:	4629      	mov	r1, r5
 80076a0:	008b      	lsls	r3, r1, #2
 80076a2:	4621      	mov	r1, r4
 80076a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076a8:	4621      	mov	r1, r4
 80076aa:	008a      	lsls	r2, r1, #2
 80076ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80076b0:	f7f9 fada 	bl	8000c68 <__aeabi_uldivmod>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	4b60      	ldr	r3, [pc, #384]	; (800783c <UART_SetConfig+0x4e4>)
 80076ba:	fba3 2302 	umull	r2, r3, r3, r2
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	011c      	lsls	r4, r3, #4
 80076c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80076d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80076d4:	4642      	mov	r2, r8
 80076d6:	464b      	mov	r3, r9
 80076d8:	1891      	adds	r1, r2, r2
 80076da:	61b9      	str	r1, [r7, #24]
 80076dc:	415b      	adcs	r3, r3
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076e4:	4641      	mov	r1, r8
 80076e6:	1851      	adds	r1, r2, r1
 80076e8:	6139      	str	r1, [r7, #16]
 80076ea:	4649      	mov	r1, r9
 80076ec:	414b      	adcs	r3, r1
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	f04f 0200 	mov.w	r2, #0
 80076f4:	f04f 0300 	mov.w	r3, #0
 80076f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076fc:	4659      	mov	r1, fp
 80076fe:	00cb      	lsls	r3, r1, #3
 8007700:	4651      	mov	r1, sl
 8007702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007706:	4651      	mov	r1, sl
 8007708:	00ca      	lsls	r2, r1, #3
 800770a:	4610      	mov	r0, r2
 800770c:	4619      	mov	r1, r3
 800770e:	4603      	mov	r3, r0
 8007710:	4642      	mov	r2, r8
 8007712:	189b      	adds	r3, r3, r2
 8007714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007718:	464b      	mov	r3, r9
 800771a:	460a      	mov	r2, r1
 800771c:	eb42 0303 	adc.w	r3, r2, r3
 8007720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	67bb      	str	r3, [r7, #120]	; 0x78
 800772e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007730:	f04f 0200 	mov.w	r2, #0
 8007734:	f04f 0300 	mov.w	r3, #0
 8007738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800773c:	4649      	mov	r1, r9
 800773e:	008b      	lsls	r3, r1, #2
 8007740:	4641      	mov	r1, r8
 8007742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007746:	4641      	mov	r1, r8
 8007748:	008a      	lsls	r2, r1, #2
 800774a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800774e:	f7f9 fa8b 	bl	8000c68 <__aeabi_uldivmod>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4b39      	ldr	r3, [pc, #228]	; (800783c <UART_SetConfig+0x4e4>)
 8007758:	fba3 1302 	umull	r1, r3, r3, r2
 800775c:	095b      	lsrs	r3, r3, #5
 800775e:	2164      	movs	r1, #100	; 0x64
 8007760:	fb01 f303 	mul.w	r3, r1, r3
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	3332      	adds	r3, #50	; 0x32
 800776a:	4a34      	ldr	r2, [pc, #208]	; (800783c <UART_SetConfig+0x4e4>)
 800776c:	fba2 2303 	umull	r2, r3, r2, r3
 8007770:	095b      	lsrs	r3, r3, #5
 8007772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007776:	441c      	add	r4, r3
 8007778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800777c:	2200      	movs	r2, #0
 800777e:	673b      	str	r3, [r7, #112]	; 0x70
 8007780:	677a      	str	r2, [r7, #116]	; 0x74
 8007782:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007786:	4642      	mov	r2, r8
 8007788:	464b      	mov	r3, r9
 800778a:	1891      	adds	r1, r2, r2
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	415b      	adcs	r3, r3
 8007790:	60fb      	str	r3, [r7, #12]
 8007792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007796:	4641      	mov	r1, r8
 8007798:	1851      	adds	r1, r2, r1
 800779a:	6039      	str	r1, [r7, #0]
 800779c:	4649      	mov	r1, r9
 800779e:	414b      	adcs	r3, r1
 80077a0:	607b      	str	r3, [r7, #4]
 80077a2:	f04f 0200 	mov.w	r2, #0
 80077a6:	f04f 0300 	mov.w	r3, #0
 80077aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077ae:	4659      	mov	r1, fp
 80077b0:	00cb      	lsls	r3, r1, #3
 80077b2:	4651      	mov	r1, sl
 80077b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077b8:	4651      	mov	r1, sl
 80077ba:	00ca      	lsls	r2, r1, #3
 80077bc:	4610      	mov	r0, r2
 80077be:	4619      	mov	r1, r3
 80077c0:	4603      	mov	r3, r0
 80077c2:	4642      	mov	r2, r8
 80077c4:	189b      	adds	r3, r3, r2
 80077c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80077c8:	464b      	mov	r3, r9
 80077ca:	460a      	mov	r2, r1
 80077cc:	eb42 0303 	adc.w	r3, r2, r3
 80077d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	663b      	str	r3, [r7, #96]	; 0x60
 80077dc:	667a      	str	r2, [r7, #100]	; 0x64
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	f04f 0300 	mov.w	r3, #0
 80077e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80077ea:	4649      	mov	r1, r9
 80077ec:	008b      	lsls	r3, r1, #2
 80077ee:	4641      	mov	r1, r8
 80077f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077f4:	4641      	mov	r1, r8
 80077f6:	008a      	lsls	r2, r1, #2
 80077f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80077fc:	f7f9 fa34 	bl	8000c68 <__aeabi_uldivmod>
 8007800:	4602      	mov	r2, r0
 8007802:	460b      	mov	r3, r1
 8007804:	4b0d      	ldr	r3, [pc, #52]	; (800783c <UART_SetConfig+0x4e4>)
 8007806:	fba3 1302 	umull	r1, r3, r3, r2
 800780a:	095b      	lsrs	r3, r3, #5
 800780c:	2164      	movs	r1, #100	; 0x64
 800780e:	fb01 f303 	mul.w	r3, r1, r3
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	3332      	adds	r3, #50	; 0x32
 8007818:	4a08      	ldr	r2, [pc, #32]	; (800783c <UART_SetConfig+0x4e4>)
 800781a:	fba2 2303 	umull	r2, r3, r2, r3
 800781e:	095b      	lsrs	r3, r3, #5
 8007820:	f003 020f 	and.w	r2, r3, #15
 8007824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4422      	add	r2, r4
 800782c:	609a      	str	r2, [r3, #8]
}
 800782e:	bf00      	nop
 8007830:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007834:	46bd      	mov	sp, r7
 8007836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800783a:	bf00      	nop
 800783c:	51eb851f 	.word	0x51eb851f

08007840 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007844:	4904      	ldr	r1, [pc, #16]	; (8007858 <MX_FATFS_Init+0x18>)
 8007846:	4805      	ldr	r0, [pc, #20]	; (800785c <MX_FATFS_Init+0x1c>)
 8007848:	f002 fec0 	bl	800a5cc <FATFS_LinkDriver>
 800784c:	4603      	mov	r3, r0
 800784e:	461a      	mov	r2, r3
 8007850:	4b03      	ldr	r3, [pc, #12]	; (8007860 <MX_FATFS_Init+0x20>)
 8007852:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007854:	bf00      	nop
 8007856:	bd80      	pop	{r7, pc}
 8007858:	20013734 	.word	0x20013734
 800785c:	2000000c 	.word	0x2000000c
 8007860:	20013730 	.word	0x20013730

08007864 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007868:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800786a:	4618      	mov	r0, r3
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 f9d9 	bl	8007c38 <USER_SPI_initialize>
 8007886:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fab7 	bl	8007e10 <USER_SPI_status>
 80078a2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60b9      	str	r1, [r7, #8]
 80078b4:	607a      	str	r2, [r7, #4]
 80078b6:	603b      	str	r3, [r7, #0]
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80078bc:	7bf8      	ldrb	r0, [r7, #15]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	f000 faba 	bl	8007e3c <USER_SPI_read>
 80078c8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
 80078de:	4603      	mov	r3, r0
 80078e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80078e2:	7bf8      	ldrb	r0, [r7, #15]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	f000 fb0d 	bl	8007f08 <USER_SPI_write>
 80078ee:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	603a      	str	r2, [r7, #0]
 8007902:	71fb      	strb	r3, [r7, #7]
 8007904:	460b      	mov	r3, r1
 8007906:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8007908:	79b9      	ldrb	r1, [r7, #6]
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 fb76 	bl	8008000 <USER_SPI_ioctl>
 8007914:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007916:	4618      	mov	r0, r3
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007928:	f7fb ff36 	bl	8003798 <HAL_GetTick>
 800792c:	4603      	mov	r3, r0
 800792e:	4a04      	ldr	r2, [pc, #16]	; (8007940 <SPI_Timer_On+0x20>)
 8007930:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007932:	4a04      	ldr	r2, [pc, #16]	; (8007944 <SPI_Timer_On+0x24>)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6013      	str	r3, [r2, #0]
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	2001373c 	.word	0x2001373c
 8007944:	20013740 	.word	0x20013740

08007948 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007948:	b580      	push	{r7, lr}
 800794a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800794c:	f7fb ff24 	bl	8003798 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	4b06      	ldr	r3, [pc, #24]	; (800796c <SPI_Timer_Status+0x24>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	1ad2      	subs	r2, r2, r3
 8007958:	4b05      	ldr	r3, [pc, #20]	; (8007970 <SPI_Timer_Status+0x28>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	bf34      	ite	cc
 8007960:	2301      	movcc	r3, #1
 8007962:	2300      	movcs	r3, #0
 8007964:	b2db      	uxtb	r3, r3
}
 8007966:	4618      	mov	r0, r3
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	2001373c 	.word	0x2001373c
 8007970:	20013740 	.word	0x20013740

08007974 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af02      	add	r7, sp, #8
 800797a:	4603      	mov	r3, r0
 800797c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800797e:	f107 020f 	add.w	r2, r7, #15
 8007982:	1df9      	adds	r1, r7, #7
 8007984:	2332      	movs	r3, #50	; 0x32
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	2301      	movs	r3, #1
 800798a:	4804      	ldr	r0, [pc, #16]	; (800799c <xchg_spi+0x28>)
 800798c:	f7fd fb1f 	bl	8004fce <HAL_SPI_TransmitReceive>
    return rxDat;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	200008a0 	.word	0x200008a0

080079a0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80079a0:	b590      	push	{r4, r7, lr}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	e00a      	b.n	80079c6 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	18d4      	adds	r4, r2, r3
 80079b6:	20ff      	movs	r0, #255	; 0xff
 80079b8:	f7ff ffdc 	bl	8007974 <xchg_spi>
 80079bc:	4603      	mov	r3, r0
 80079be:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3301      	adds	r3, #1
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d3f0      	bcc.n	80079b0 <rcvr_spi_multi+0x10>
	}
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd90      	pop	{r4, r7, pc}

080079d8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	e009      	b.n	80079fc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4413      	add	r3, r2
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7ff ffbf 	bl	8007974 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3301      	adds	r3, #1
 80079fa:	60fb      	str	r3, [r7, #12]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d3f1      	bcc.n	80079e8 <xmit_spi_multi+0x10>
	}
}
 8007a04:	bf00      	nop
 8007a06:	bf00      	nop
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b086      	sub	sp, #24
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007a16:	f7fb febf 	bl	8003798 <HAL_GetTick>
 8007a1a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007a20:	20ff      	movs	r0, #255	; 0xff
 8007a22:	f7ff ffa7 	bl	8007974 <xchg_spi>
 8007a26:	4603      	mov	r3, r0
 8007a28:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
 8007a2c:	2bff      	cmp	r3, #255	; 0xff
 8007a2e:	d007      	beq.n	8007a40 <wait_ready+0x32>
 8007a30:	f7fb feb2 	bl	8003798 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d8ef      	bhi.n	8007a20 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
 8007a42:	2bff      	cmp	r3, #255	; 0xff
 8007a44:	bf0c      	ite	eq
 8007a46:	2301      	moveq	r3, #1
 8007a48:	2300      	movne	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007a58:	2201      	movs	r2, #1
 8007a5a:	2102      	movs	r1, #2
 8007a5c:	4803      	ldr	r0, [pc, #12]	; (8007a6c <despiselect+0x18>)
 8007a5e:	f7fc fd7b 	bl	8004558 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007a62:	20ff      	movs	r0, #255	; 0xff
 8007a64:	f7ff ff86 	bl	8007974 <xchg_spi>

}
 8007a68:	bf00      	nop
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40020000 	.word	0x40020000

08007a70 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007a74:	2200      	movs	r2, #0
 8007a76:	2102      	movs	r1, #2
 8007a78:	4809      	ldr	r0, [pc, #36]	; (8007aa0 <spiselect+0x30>)
 8007a7a:	f7fc fd6d 	bl	8004558 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007a7e:	20ff      	movs	r0, #255	; 0xff
 8007a80:	f7ff ff78 	bl	8007974 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007a84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a88:	f7ff ffc1 	bl	8007a0e <wait_ready>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <spiselect+0x26>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e002      	b.n	8007a9c <spiselect+0x2c>

	despiselect();
 8007a96:	f7ff ffdd 	bl	8007a54 <despiselect>
	return 0;	/* Timeout */
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	40020000 	.word	0x40020000

08007aa4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007aae:	20c8      	movs	r0, #200	; 0xc8
 8007ab0:	f7ff ff36 	bl	8007920 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007ab4:	20ff      	movs	r0, #255	; 0xff
 8007ab6:	f7ff ff5d 	bl	8007974 <xchg_spi>
 8007aba:	4603      	mov	r3, r0
 8007abc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
 8007ac0:	2bff      	cmp	r3, #255	; 0xff
 8007ac2:	d104      	bne.n	8007ace <rcvr_datablock+0x2a>
 8007ac4:	f7ff ff40 	bl	8007948 <SPI_Timer_Status>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f2      	bne.n	8007ab4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	2bfe      	cmp	r3, #254	; 0xfe
 8007ad2:	d001      	beq.n	8007ad8 <rcvr_datablock+0x34>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e00a      	b.n	8007aee <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7ff ff60 	bl	80079a0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007ae0:	20ff      	movs	r0, #255	; 0xff
 8007ae2:	f7ff ff47 	bl	8007974 <xchg_spi>
 8007ae6:	20ff      	movs	r0, #255	; 0xff
 8007ae8:	f7ff ff44 	bl	8007974 <xchg_spi>

	return 1;						/* Function succeeded */
 8007aec:	2301      	movs	r3, #1
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b06:	f7ff ff82 	bl	8007a0e <wait_ready>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <xmit_datablock+0x1e>
 8007b10:	2300      	movs	r3, #0
 8007b12:	e01e      	b.n	8007b52 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff ff2c 	bl	8007974 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	2bfd      	cmp	r3, #253	; 0xfd
 8007b20:	d016      	beq.n	8007b50 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007b22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7ff ff56 	bl	80079d8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007b2c:	20ff      	movs	r0, #255	; 0xff
 8007b2e:	f7ff ff21 	bl	8007974 <xchg_spi>
 8007b32:	20ff      	movs	r0, #255	; 0xff
 8007b34:	f7ff ff1e 	bl	8007974 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007b38:	20ff      	movs	r0, #255	; 0xff
 8007b3a:	f7ff ff1b 	bl	8007974 <xchg_spi>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	f003 031f 	and.w	r3, r3, #31
 8007b48:	2b05      	cmp	r3, #5
 8007b4a:	d001      	beq.n	8007b50 <xmit_datablock+0x5a>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	e000      	b.n	8007b52 <xmit_datablock+0x5c>
	}
	return 1;
 8007b50:	2301      	movs	r3, #1
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	4603      	mov	r3, r0
 8007b62:	6039      	str	r1, [r7, #0]
 8007b64:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	da0e      	bge.n	8007b8c <send_cmd+0x32>
		cmd &= 0x7F;
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b74:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007b76:	2100      	movs	r1, #0
 8007b78:	2037      	movs	r0, #55	; 0x37
 8007b7a:	f7ff ffee 	bl	8007b5a <send_cmd>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d901      	bls.n	8007b8c <send_cmd+0x32>
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	e051      	b.n	8007c30 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b0c      	cmp	r3, #12
 8007b90:	d008      	beq.n	8007ba4 <send_cmd+0x4a>
		despiselect();
 8007b92:	f7ff ff5f 	bl	8007a54 <despiselect>
		if (!spiselect()) return 0xFF;
 8007b96:	f7ff ff6b 	bl	8007a70 <spiselect>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <send_cmd+0x4a>
 8007ba0:	23ff      	movs	r3, #255	; 0xff
 8007ba2:	e045      	b.n	8007c30 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff fee1 	bl	8007974 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	0e1b      	lsrs	r3, r3, #24
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7ff fedb 	bl	8007974 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	0c1b      	lsrs	r3, r3, #16
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff fed5 	bl	8007974 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	0a1b      	lsrs	r3, r3, #8
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff fecf 	bl	8007974 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff feca 	bl	8007974 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007be0:	2301      	movs	r3, #1
 8007be2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <send_cmd+0x94>
 8007bea:	2395      	movs	r3, #149	; 0x95
 8007bec:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d101      	bne.n	8007bf8 <send_cmd+0x9e>
 8007bf4:	2387      	movs	r3, #135	; 0x87
 8007bf6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff feba 	bl	8007974 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	2b0c      	cmp	r3, #12
 8007c04:	d102      	bne.n	8007c0c <send_cmd+0xb2>
 8007c06:	20ff      	movs	r0, #255	; 0xff
 8007c08:	f7ff feb4 	bl	8007974 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007c0c:	230a      	movs	r3, #10
 8007c0e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007c10:	20ff      	movs	r0, #255	; 0xff
 8007c12:	f7ff feaf 	bl	8007974 <xchg_spi>
 8007c16:	4603      	mov	r3, r0
 8007c18:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007c1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da05      	bge.n	8007c2e <send_cmd+0xd4>
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1f0      	bne.n	8007c10 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007c38:	b590      	push	{r4, r7, lr}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <USER_SPI_initialize+0x14>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e0d6      	b.n	8007dfa <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007c4c:	4b6d      	ldr	r3, [pc, #436]	; (8007e04 <USER_SPI_initialize+0x1cc>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <USER_SPI_initialize+0x2a>
 8007c5a:	4b6a      	ldr	r3, [pc, #424]	; (8007e04 <USER_SPI_initialize+0x1cc>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	e0cb      	b.n	8007dfa <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007c62:	4b69      	ldr	r3, [pc, #420]	; (8007e08 <USER_SPI_initialize+0x1d0>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007c6c:	4b66      	ldr	r3, [pc, #408]	; (8007e08 <USER_SPI_initialize+0x1d0>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8007c74:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007c76:	230a      	movs	r3, #10
 8007c78:	73fb      	strb	r3, [r7, #15]
 8007c7a:	e005      	b.n	8007c88 <USER_SPI_initialize+0x50>
 8007c7c:	20ff      	movs	r0, #255	; 0xff
 8007c7e:	f7ff fe79 	bl	8007974 <xchg_spi>
 8007c82:	7bfb      	ldrb	r3, [r7, #15]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	73fb      	strb	r3, [r7, #15]
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f6      	bne.n	8007c7c <USER_SPI_initialize+0x44>

	ty = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007c92:	2100      	movs	r1, #0
 8007c94:	2000      	movs	r0, #0
 8007c96:	f7ff ff60 	bl	8007b5a <send_cmd>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	f040 808b 	bne.w	8007db8 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ca6:	f7ff fe3b 	bl	8007920 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007caa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007cae:	2008      	movs	r0, #8
 8007cb0:	f7ff ff53 	bl	8007b5a <send_cmd>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d151      	bne.n	8007d5e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
 8007cbe:	e00d      	b.n	8007cdc <USER_SPI_initialize+0xa4>
 8007cc0:	7bfc      	ldrb	r4, [r7, #15]
 8007cc2:	20ff      	movs	r0, #255	; 0xff
 8007cc4:	f7ff fe56 	bl	8007974 <xchg_spi>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f104 0310 	add.w	r3, r4, #16
 8007cd0:	443b      	add	r3, r7
 8007cd2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	73fb      	strb	r3, [r7, #15]
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d9ee      	bls.n	8007cc0 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007ce2:	7abb      	ldrb	r3, [r7, #10]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d167      	bne.n	8007db8 <USER_SPI_initialize+0x180>
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	2baa      	cmp	r3, #170	; 0xaa
 8007cec:	d164      	bne.n	8007db8 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007cee:	bf00      	nop
 8007cf0:	f7ff fe2a 	bl	8007948 <SPI_Timer_Status>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <USER_SPI_initialize+0xd2>
 8007cfa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007cfe:	20a9      	movs	r0, #169	; 0xa9
 8007d00:	f7ff ff2b 	bl	8007b5a <send_cmd>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f2      	bne.n	8007cf0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007d0a:	f7ff fe1d 	bl	8007948 <SPI_Timer_Status>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d051      	beq.n	8007db8 <USER_SPI_initialize+0x180>
 8007d14:	2100      	movs	r1, #0
 8007d16:	203a      	movs	r0, #58	; 0x3a
 8007d18:	f7ff ff1f 	bl	8007b5a <send_cmd>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d14a      	bne.n	8007db8 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
 8007d26:	e00d      	b.n	8007d44 <USER_SPI_initialize+0x10c>
 8007d28:	7bfc      	ldrb	r4, [r7, #15]
 8007d2a:	20ff      	movs	r0, #255	; 0xff
 8007d2c:	f7ff fe22 	bl	8007974 <xchg_spi>
 8007d30:	4603      	mov	r3, r0
 8007d32:	461a      	mov	r2, r3
 8007d34:	f104 0310 	add.w	r3, r4, #16
 8007d38:	443b      	add	r3, r7
 8007d3a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	3301      	adds	r3, #1
 8007d42:	73fb      	strb	r3, [r7, #15]
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d9ee      	bls.n	8007d28 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007d4a:	7a3b      	ldrb	r3, [r7, #8]
 8007d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <USER_SPI_initialize+0x120>
 8007d54:	230c      	movs	r3, #12
 8007d56:	e000      	b.n	8007d5a <USER_SPI_initialize+0x122>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	737b      	strb	r3, [r7, #13]
 8007d5c:	e02c      	b.n	8007db8 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007d5e:	2100      	movs	r1, #0
 8007d60:	20a9      	movs	r0, #169	; 0xa9
 8007d62:	f7ff fefa 	bl	8007b5a <send_cmd>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d804      	bhi.n	8007d76 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	737b      	strb	r3, [r7, #13]
 8007d70:	23a9      	movs	r3, #169	; 0xa9
 8007d72:	73bb      	strb	r3, [r7, #14]
 8007d74:	e003      	b.n	8007d7e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007d76:	2301      	movs	r3, #1
 8007d78:	737b      	strb	r3, [r7, #13]
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007d7e:	bf00      	nop
 8007d80:	f7ff fde2 	bl	8007948 <SPI_Timer_Status>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d007      	beq.n	8007d9a <USER_SPI_initialize+0x162>
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff fee3 	bl	8007b5a <send_cmd>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f2      	bne.n	8007d80 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007d9a:	f7ff fdd5 	bl	8007948 <SPI_Timer_Status>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <USER_SPI_initialize+0x17c>
 8007da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007da8:	2010      	movs	r0, #16
 8007daa:	f7ff fed6 	bl	8007b5a <send_cmd>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <USER_SPI_initialize+0x180>
				ty = 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007db8:	4a14      	ldr	r2, [pc, #80]	; (8007e0c <USER_SPI_initialize+0x1d4>)
 8007dba:	7b7b      	ldrb	r3, [r7, #13]
 8007dbc:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007dbe:	f7ff fe49 	bl	8007a54 <despiselect>

	if (ty) {			/* OK */
 8007dc2:	7b7b      	ldrb	r3, [r7, #13]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d012      	beq.n	8007dee <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007dc8:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <USER_SPI_initialize+0x1d0>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007dd2:	4b0d      	ldr	r3, [pc, #52]	; (8007e08 <USER_SPI_initialize+0x1d0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0210 	orr.w	r2, r2, #16
 8007dda:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <USER_SPI_initialize+0x1cc>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	f023 0301 	bic.w	r3, r3, #1
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <USER_SPI_initialize+0x1cc>)
 8007dea:	701a      	strb	r2, [r3, #0]
 8007dec:	e002      	b.n	8007df4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007dee:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <USER_SPI_initialize+0x1cc>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007df4:	4b03      	ldr	r3, [pc, #12]	; (8007e04 <USER_SPI_initialize+0x1cc>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	b2db      	uxtb	r3, r3
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd90      	pop	{r4, r7, pc}
 8007e02:	bf00      	nop
 8007e04:	20000020 	.word	0x20000020
 8007e08:	200008a0 	.word	0x200008a0
 8007e0c:	20013738 	.word	0x20013738

08007e10 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4603      	mov	r3, r0
 8007e18:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <USER_SPI_status+0x14>
 8007e20:	2301      	movs	r3, #1
 8007e22:	e002      	b.n	8007e2a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007e24:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <USER_SPI_status+0x28>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	b2db      	uxtb	r3, r3
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20000020 	.word	0x20000020

08007e3c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d102      	bne.n	8007e58 <USER_SPI_read+0x1c>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <USER_SPI_read+0x20>
 8007e58:	2304      	movs	r3, #4
 8007e5a:	e04d      	b.n	8007ef8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007e5c:	4b28      	ldr	r3, [pc, #160]	; (8007f00 <USER_SPI_read+0xc4>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <USER_SPI_read+0x32>
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e044      	b.n	8007ef8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007e6e:	4b25      	ldr	r3, [pc, #148]	; (8007f04 <USER_SPI_read+0xc8>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	f003 0308 	and.w	r3, r3, #8
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d102      	bne.n	8007e80 <USER_SPI_read+0x44>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	025b      	lsls	r3, r3, #9
 8007e7e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d111      	bne.n	8007eaa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	2011      	movs	r0, #17
 8007e8a:	f7ff fe66 	bl	8007b5a <send_cmd>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d129      	bne.n	8007ee8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e98:	68b8      	ldr	r0, [r7, #8]
 8007e9a:	f7ff fe03 	bl	8007aa4 <rcvr_datablock>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d021      	beq.n	8007ee8 <USER_SPI_read+0xac>
			count = 0;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	603b      	str	r3, [r7, #0]
 8007ea8:	e01e      	b.n	8007ee8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	2012      	movs	r0, #18
 8007eae:	f7ff fe54 	bl	8007b5a <send_cmd>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d117      	bne.n	8007ee8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ebc:	68b8      	ldr	r0, [r7, #8]
 8007ebe:	f7ff fdf1 	bl	8007aa4 <rcvr_datablock>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00a      	beq.n	8007ede <USER_SPI_read+0xa2>
				buff += 512;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ece:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	603b      	str	r3, [r7, #0]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1ed      	bne.n	8007eb8 <USER_SPI_read+0x7c>
 8007edc:	e000      	b.n	8007ee0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007ede:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	200c      	movs	r0, #12
 8007ee4:	f7ff fe39 	bl	8007b5a <send_cmd>
		}
	}
	despiselect();
 8007ee8:	f7ff fdb4 	bl	8007a54 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	bf14      	ite	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	2300      	moveq	r3, #0
 8007ef6:	b2db      	uxtb	r3, r3
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20000020 	.word	0x20000020
 8007f04:	20013738 	.word	0x20013738

08007f08 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	607a      	str	r2, [r7, #4]
 8007f12:	603b      	str	r3, [r7, #0]
 8007f14:	4603      	mov	r3, r0
 8007f16:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d102      	bne.n	8007f24 <USER_SPI_write+0x1c>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <USER_SPI_write+0x20>
 8007f24:	2304      	movs	r3, #4
 8007f26:	e063      	b.n	8007ff0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007f28:	4b33      	ldr	r3, [pc, #204]	; (8007ff8 <USER_SPI_write+0xf0>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <USER_SPI_write+0x32>
 8007f36:	2303      	movs	r3, #3
 8007f38:	e05a      	b.n	8007ff0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007f3a:	4b2f      	ldr	r3, [pc, #188]	; (8007ff8 <USER_SPI_write+0xf0>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <USER_SPI_write+0x44>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e051      	b.n	8007ff0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007f4c:	4b2b      	ldr	r3, [pc, #172]	; (8007ffc <USER_SPI_write+0xf4>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <USER_SPI_write+0x56>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	025b      	lsls	r3, r3, #9
 8007f5c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d110      	bne.n	8007f86 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	2018      	movs	r0, #24
 8007f68:	f7ff fdf7 	bl	8007b5a <send_cmd>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d136      	bne.n	8007fe0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007f72:	21fe      	movs	r1, #254	; 0xfe
 8007f74:	68b8      	ldr	r0, [r7, #8]
 8007f76:	f7ff fdbe 	bl	8007af6 <xmit_datablock>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d02f      	beq.n	8007fe0 <USER_SPI_write+0xd8>
			count = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	603b      	str	r3, [r7, #0]
 8007f84:	e02c      	b.n	8007fe0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007f86:	4b1d      	ldr	r3, [pc, #116]	; (8007ffc <USER_SPI_write+0xf4>)
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	f003 0306 	and.w	r3, r3, #6
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <USER_SPI_write+0x92>
 8007f92:	6839      	ldr	r1, [r7, #0]
 8007f94:	2097      	movs	r0, #151	; 0x97
 8007f96:	f7ff fde0 	bl	8007b5a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	2019      	movs	r0, #25
 8007f9e:	f7ff fddc 	bl	8007b5a <send_cmd>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d11b      	bne.n	8007fe0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007fa8:	21fc      	movs	r1, #252	; 0xfc
 8007faa:	68b8      	ldr	r0, [r7, #8]
 8007fac:	f7ff fda3 	bl	8007af6 <xmit_datablock>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <USER_SPI_write+0xc4>
				buff += 512;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007fbc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d1ee      	bne.n	8007fa8 <USER_SPI_write+0xa0>
 8007fca:	e000      	b.n	8007fce <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007fcc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007fce:	21fd      	movs	r1, #253	; 0xfd
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	f7ff fd90 	bl	8007af6 <xmit_datablock>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <USER_SPI_write+0xd8>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007fe0:	f7ff fd38 	bl	8007a54 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bf14      	ite	ne
 8007fea:	2301      	movne	r3, #1
 8007fec:	2300      	moveq	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20000020 	.word	0x20000020
 8007ffc:	20013738 	.word	0x20013738

08008000 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08c      	sub	sp, #48	; 0x30
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	603a      	str	r2, [r7, #0]
 800800a:	71fb      	strb	r3, [r7, #7]
 800800c:	460b      	mov	r3, r1
 800800e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <USER_SPI_ioctl+0x1a>
 8008016:	2304      	movs	r3, #4
 8008018:	e15a      	b.n	80082d0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800801a:	4baf      	ldr	r3, [pc, #700]	; (80082d8 <USER_SPI_ioctl+0x2d8>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <USER_SPI_ioctl+0x2c>
 8008028:	2303      	movs	r3, #3
 800802a:	e151      	b.n	80082d0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8008032:	79bb      	ldrb	r3, [r7, #6]
 8008034:	2b04      	cmp	r3, #4
 8008036:	f200 8136 	bhi.w	80082a6 <USER_SPI_ioctl+0x2a6>
 800803a:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <USER_SPI_ioctl+0x40>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008055 	.word	0x08008055
 8008044:	08008069 	.word	0x08008069
 8008048:	080082a7 	.word	0x080082a7
 800804c:	08008115 	.word	0x08008115
 8008050:	0800820b 	.word	0x0800820b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8008054:	f7ff fd0c 	bl	8007a70 <spiselect>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 8127 	beq.w	80082ae <USER_SPI_ioctl+0x2ae>
 8008060:	2300      	movs	r3, #0
 8008062:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008066:	e122      	b.n	80082ae <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008068:	2100      	movs	r1, #0
 800806a:	2009      	movs	r0, #9
 800806c:	f7ff fd75 	bl	8007b5a <send_cmd>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	f040 811d 	bne.w	80082b2 <USER_SPI_ioctl+0x2b2>
 8008078:	f107 030c 	add.w	r3, r7, #12
 800807c:	2110      	movs	r1, #16
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff fd10 	bl	8007aa4 <rcvr_datablock>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 8113 	beq.w	80082b2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800808c:	7b3b      	ldrb	r3, [r7, #12]
 800808e:	099b      	lsrs	r3, r3, #6
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b01      	cmp	r3, #1
 8008094:	d111      	bne.n	80080ba <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8008096:	7d7b      	ldrb	r3, [r7, #21]
 8008098:	461a      	mov	r2, r3
 800809a:	7d3b      	ldrb	r3, [r7, #20]
 800809c:	021b      	lsls	r3, r3, #8
 800809e:	4413      	add	r3, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	7cfb      	ldrb	r3, [r7, #19]
 80080a4:	041b      	lsls	r3, r3, #16
 80080a6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80080aa:	4413      	add	r3, r2
 80080ac:	3301      	adds	r3, #1
 80080ae:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	029a      	lsls	r2, r3, #10
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	e028      	b.n	800810c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80080ba:	7c7b      	ldrb	r3, [r7, #17]
 80080bc:	f003 030f 	and.w	r3, r3, #15
 80080c0:	b2da      	uxtb	r2, r3
 80080c2:	7dbb      	ldrb	r3, [r7, #22]
 80080c4:	09db      	lsrs	r3, r3, #7
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	4413      	add	r3, r2
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	7d7b      	ldrb	r3, [r7, #21]
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	f003 0306 	and.w	r3, r3, #6
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	4413      	add	r3, r2
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	3302      	adds	r3, #2
 80080de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80080e2:	7d3b      	ldrb	r3, [r7, #20]
 80080e4:	099b      	lsrs	r3, r3, #6
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	461a      	mov	r2, r3
 80080ea:	7cfb      	ldrb	r3, [r7, #19]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	441a      	add	r2, r3
 80080f0:	7cbb      	ldrb	r3, [r7, #18]
 80080f2:	029b      	lsls	r3, r3, #10
 80080f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080f8:	4413      	add	r3, r2
 80080fa:	3301      	adds	r3, #1
 80080fc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80080fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008102:	3b09      	subs	r3, #9
 8008104:	69fa      	ldr	r2, [r7, #28]
 8008106:	409a      	lsls	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8008112:	e0ce      	b.n	80082b2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8008114:	4b71      	ldr	r3, [pc, #452]	; (80082dc <USER_SPI_ioctl+0x2dc>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b00      	cmp	r3, #0
 800811e:	d031      	beq.n	8008184 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8008120:	2100      	movs	r1, #0
 8008122:	208d      	movs	r0, #141	; 0x8d
 8008124:	f7ff fd19 	bl	8007b5a <send_cmd>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	f040 80c3 	bne.w	80082b6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008130:	20ff      	movs	r0, #255	; 0xff
 8008132:	f7ff fc1f 	bl	8007974 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8008136:	f107 030c 	add.w	r3, r7, #12
 800813a:	2110      	movs	r1, #16
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff fcb1 	bl	8007aa4 <rcvr_datablock>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	f000 80b6 	beq.w	80082b6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800814a:	2330      	movs	r3, #48	; 0x30
 800814c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008150:	e007      	b.n	8008162 <USER_SPI_ioctl+0x162>
 8008152:	20ff      	movs	r0, #255	; 0xff
 8008154:	f7ff fc0e 	bl	8007974 <xchg_spi>
 8008158:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800815c:	3b01      	subs	r3, #1
 800815e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008162:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1f3      	bne.n	8008152 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800816a:	7dbb      	ldrb	r3, [r7, #22]
 800816c:	091b      	lsrs	r3, r3, #4
 800816e:	b2db      	uxtb	r3, r3
 8008170:	461a      	mov	r2, r3
 8008172:	2310      	movs	r3, #16
 8008174:	fa03 f202 	lsl.w	r2, r3, r2
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8008182:	e098      	b.n	80082b6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8008184:	2100      	movs	r1, #0
 8008186:	2009      	movs	r0, #9
 8008188:	f7ff fce7 	bl	8007b5a <send_cmd>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	f040 8091 	bne.w	80082b6 <USER_SPI_ioctl+0x2b6>
 8008194:	f107 030c 	add.w	r3, r7, #12
 8008198:	2110      	movs	r1, #16
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff fc82 	bl	8007aa4 <rcvr_datablock>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 8087 	beq.w	80082b6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80081a8:	4b4c      	ldr	r3, [pc, #304]	; (80082dc <USER_SPI_ioctl+0x2dc>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d012      	beq.n	80081da <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80081b4:	7dbb      	ldrb	r3, [r7, #22]
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80081bc:	7dfa      	ldrb	r2, [r7, #23]
 80081be:	09d2      	lsrs	r2, r2, #7
 80081c0:	b2d2      	uxtb	r2, r2
 80081c2:	4413      	add	r3, r2
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	7e7b      	ldrb	r3, [r7, #25]
 80081c8:	099b      	lsrs	r3, r3, #6
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	fa02 f303 	lsl.w	r3, r2, r3
 80081d2:	461a      	mov	r2, r3
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	e013      	b.n	8008202 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80081da:	7dbb      	ldrb	r3, [r7, #22]
 80081dc:	109b      	asrs	r3, r3, #2
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f003 031f 	and.w	r3, r3, #31
 80081e4:	3301      	adds	r3, #1
 80081e6:	7dfa      	ldrb	r2, [r7, #23]
 80081e8:	00d2      	lsls	r2, r2, #3
 80081ea:	f002 0218 	and.w	r2, r2, #24
 80081ee:	7df9      	ldrb	r1, [r7, #23]
 80081f0:	0949      	lsrs	r1, r1, #5
 80081f2:	b2c9      	uxtb	r1, r1
 80081f4:	440a      	add	r2, r1
 80081f6:	3201      	adds	r2, #1
 80081f8:	fb02 f303 	mul.w	r3, r2, r3
 80081fc:	461a      	mov	r2, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8008208:	e055      	b.n	80082b6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800820a:	4b34      	ldr	r3, [pc, #208]	; (80082dc <USER_SPI_ioctl+0x2dc>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	f003 0306 	and.w	r3, r3, #6
 8008212:	2b00      	cmp	r3, #0
 8008214:	d051      	beq.n	80082ba <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008216:	f107 020c 	add.w	r2, r7, #12
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	210b      	movs	r1, #11
 800821e:	4618      	mov	r0, r3
 8008220:	f7ff feee 	bl	8008000 <USER_SPI_ioctl>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d149      	bne.n	80082be <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800822a:	7b3b      	ldrb	r3, [r7, #12]
 800822c:	099b      	lsrs	r3, r3, #6
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <USER_SPI_ioctl+0x23e>
 8008234:	7dbb      	ldrb	r3, [r7, #22]
 8008236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823a:	2b00      	cmp	r3, #0
 800823c:	d041      	beq.n	80082c2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	623b      	str	r3, [r7, #32]
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800824e:	4b23      	ldr	r3, [pc, #140]	; (80082dc <USER_SPI_ioctl+0x2dc>)
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	f003 0308 	and.w	r3, r3, #8
 8008256:	2b00      	cmp	r3, #0
 8008258:	d105      	bne.n	8008266 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	025b      	lsls	r3, r3, #9
 800825e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008262:	025b      	lsls	r3, r3, #9
 8008264:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8008266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008268:	2020      	movs	r0, #32
 800826a:	f7ff fc76 	bl	8007b5a <send_cmd>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d128      	bne.n	80082c6 <USER_SPI_ioctl+0x2c6>
 8008274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008276:	2021      	movs	r0, #33	; 0x21
 8008278:	f7ff fc6f 	bl	8007b5a <send_cmd>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d121      	bne.n	80082c6 <USER_SPI_ioctl+0x2c6>
 8008282:	2100      	movs	r1, #0
 8008284:	2026      	movs	r0, #38	; 0x26
 8008286:	f7ff fc68 	bl	8007b5a <send_cmd>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d11a      	bne.n	80082c6 <USER_SPI_ioctl+0x2c6>
 8008290:	f247 5030 	movw	r0, #30000	; 0x7530
 8008294:	f7ff fbbb 	bl	8007a0e <wait_ready>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d013      	beq.n	80082c6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800829e:	2300      	movs	r3, #0
 80082a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80082a4:	e00f      	b.n	80082c6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80082a6:	2304      	movs	r3, #4
 80082a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80082ac:	e00c      	b.n	80082c8 <USER_SPI_ioctl+0x2c8>
		break;
 80082ae:	bf00      	nop
 80082b0:	e00a      	b.n	80082c8 <USER_SPI_ioctl+0x2c8>
		break;
 80082b2:	bf00      	nop
 80082b4:	e008      	b.n	80082c8 <USER_SPI_ioctl+0x2c8>
		break;
 80082b6:	bf00      	nop
 80082b8:	e006      	b.n	80082c8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80082ba:	bf00      	nop
 80082bc:	e004      	b.n	80082c8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80082be:	bf00      	nop
 80082c0:	e002      	b.n	80082c8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80082c2:	bf00      	nop
 80082c4:	e000      	b.n	80082c8 <USER_SPI_ioctl+0x2c8>
		break;
 80082c6:	bf00      	nop
	}

	despiselect();
 80082c8:	f7ff fbc4 	bl	8007a54 <despiselect>

	return res;
 80082cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3730      	adds	r7, #48	; 0x30
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	20000020 	.word	0x20000020
 80082dc:	20013738 	.word	0x20013738

080082e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	4a08      	ldr	r2, [pc, #32]	; (8008310 <disk_status+0x30>)
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	79fa      	ldrb	r2, [r7, #7]
 80082f8:	4905      	ldr	r1, [pc, #20]	; (8008310 <disk_status+0x30>)
 80082fa:	440a      	add	r2, r1
 80082fc:	7a12      	ldrb	r2, [r2, #8]
 80082fe:	4610      	mov	r0, r2
 8008300:	4798      	blx	r3
 8008302:	4603      	mov	r3, r0
 8008304:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	2001376c 	.word	0x2001376c

08008314 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	4603      	mov	r3, r0
 800831c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008322:	79fb      	ldrb	r3, [r7, #7]
 8008324:	4a0d      	ldr	r2, [pc, #52]	; (800835c <disk_initialize+0x48>)
 8008326:	5cd3      	ldrb	r3, [r2, r3]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d111      	bne.n	8008350 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	4a0b      	ldr	r2, [pc, #44]	; (800835c <disk_initialize+0x48>)
 8008330:	2101      	movs	r1, #1
 8008332:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	4a09      	ldr	r2, [pc, #36]	; (800835c <disk_initialize+0x48>)
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4413      	add	r3, r2
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	79fa      	ldrb	r2, [r7, #7]
 8008342:	4906      	ldr	r1, [pc, #24]	; (800835c <disk_initialize+0x48>)
 8008344:	440a      	add	r2, r1
 8008346:	7a12      	ldrb	r2, [r2, #8]
 8008348:	4610      	mov	r0, r2
 800834a:	4798      	blx	r3
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	2001376c 	.word	0x2001376c

08008360 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008360:	b590      	push	{r4, r7, lr}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	4a0a      	ldr	r2, [pc, #40]	; (800839c <disk_read+0x3c>)
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	689c      	ldr	r4, [r3, #8]
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	4a07      	ldr	r2, [pc, #28]	; (800839c <disk_read+0x3c>)
 8008380:	4413      	add	r3, r2
 8008382:	7a18      	ldrb	r0, [r3, #8]
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	47a0      	blx	r4
 800838c:	4603      	mov	r3, r0
 800838e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008390:	7dfb      	ldrb	r3, [r7, #23]
}
 8008392:	4618      	mov	r0, r3
 8008394:	371c      	adds	r7, #28
 8008396:	46bd      	mov	sp, r7
 8008398:	bd90      	pop	{r4, r7, pc}
 800839a:	bf00      	nop
 800839c:	2001376c 	.word	0x2001376c

080083a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80083a0:	b590      	push	{r4, r7, lr}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60b9      	str	r1, [r7, #8]
 80083a8:	607a      	str	r2, [r7, #4]
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	4a0a      	ldr	r2, [pc, #40]	; (80083dc <disk_write+0x3c>)
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	68dc      	ldr	r4, [r3, #12]
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	4a07      	ldr	r2, [pc, #28]	; (80083dc <disk_write+0x3c>)
 80083c0:	4413      	add	r3, r2
 80083c2:	7a18      	ldrb	r0, [r3, #8]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	68b9      	ldr	r1, [r7, #8]
 80083ca:	47a0      	blx	r4
 80083cc:	4603      	mov	r3, r0
 80083ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80083d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd90      	pop	{r4, r7, pc}
 80083da:	bf00      	nop
 80083dc:	2001376c 	.word	0x2001376c

080083e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	603a      	str	r2, [r7, #0]
 80083ea:	71fb      	strb	r3, [r7, #7]
 80083ec:	460b      	mov	r3, r1
 80083ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	4a09      	ldr	r2, [pc, #36]	; (8008418 <disk_ioctl+0x38>)
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	79fa      	ldrb	r2, [r7, #7]
 80083fe:	4906      	ldr	r1, [pc, #24]	; (8008418 <disk_ioctl+0x38>)
 8008400:	440a      	add	r2, r1
 8008402:	7a10      	ldrb	r0, [r2, #8]
 8008404:	79b9      	ldrb	r1, [r7, #6]
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	4798      	blx	r3
 800840a:	4603      	mov	r3, r0
 800840c:	73fb      	strb	r3, [r7, #15]
  return res;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	2001376c 	.word	0x2001376c

0800841c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	3301      	adds	r3, #1
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800842c:	89fb      	ldrh	r3, [r7, #14]
 800842e:	021b      	lsls	r3, r3, #8
 8008430:	b21a      	sxth	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	b21b      	sxth	r3, r3
 8008438:	4313      	orrs	r3, r2
 800843a:	b21b      	sxth	r3, r3
 800843c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800843e:	89fb      	ldrh	r3, [r7, #14]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3303      	adds	r3, #3
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	3202      	adds	r2, #2
 8008464:	7812      	ldrb	r2, [r2, #0]
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	021b      	lsls	r3, r3, #8
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	3201      	adds	r2, #1
 8008472:	7812      	ldrb	r2, [r2, #0]
 8008474:	4313      	orrs	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	7812      	ldrb	r2, [r2, #0]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
	return rv;
 8008484:	68fb      	ldr	r3, [r7, #12]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3714      	adds	r7, #20
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
 800849a:	460b      	mov	r3, r1
 800849c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	887a      	ldrh	r2, [r7, #2]
 80084a6:	b2d2      	uxtb	r2, r2
 80084a8:	701a      	strb	r2, [r3, #0]
 80084aa:	887b      	ldrh	r3, [r7, #2]
 80084ac:	0a1b      	lsrs	r3, r3, #8
 80084ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	887a      	ldrh	r2, [r7, #2]
 80084b8:	b2d2      	uxtb	r2, r2
 80084ba:	701a      	strb	r2, [r3, #0]
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	b2d2      	uxtb	r2, r2
 80084dc:	701a      	strb	r2, [r3, #0]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	0a1b      	lsrs	r3, r3, #8
 80084e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	0a1b      	lsrs	r3, r3, #8
 80084f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	0a1b      	lsrs	r3, r3, #8
 8008506:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	607a      	str	r2, [r7, #4]
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	b2d2      	uxtb	r2, r2
 8008512:	701a      	strb	r2, [r3, #0]
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00d      	beq.n	8008556 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	1c53      	adds	r3, r2, #1
 800853e:	613b      	str	r3, [r7, #16]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	1c59      	adds	r1, r3, #1
 8008544:	6179      	str	r1, [r7, #20]
 8008546:	7812      	ldrb	r2, [r2, #0]
 8008548:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3b01      	subs	r3, #1
 800854e:	607b      	str	r3, [r7, #4]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1f1      	bne.n	800853a <mem_cpy+0x1a>
	}
}
 8008556:	bf00      	nop
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008562:	b480      	push	{r7}
 8008564:	b087      	sub	sp, #28
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	617a      	str	r2, [r7, #20]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	b2d2      	uxtb	r2, r2
 800857c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3b01      	subs	r3, #1
 8008582:	607b      	str	r3, [r7, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1f3      	bne.n	8008572 <mem_set+0x10>
}
 800858a:	bf00      	nop
 800858c:	bf00      	nop
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008598:	b480      	push	{r7}
 800859a:	b089      	sub	sp, #36	; 0x24
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	61fb      	str	r3, [r7, #28]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	61fa      	str	r2, [r7, #28]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	4619      	mov	r1, r3
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	61ba      	str	r2, [r7, #24]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	1acb      	subs	r3, r1, r3
 80085c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	607b      	str	r3, [r7, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d002      	beq.n	80085d8 <mem_cmp+0x40>
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0eb      	beq.n	80085b0 <mem_cmp+0x18>

	return r;
 80085d8:	697b      	ldr	r3, [r7, #20]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3724      	adds	r7, #36	; 0x24
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80085f0:	e002      	b.n	80085f8 <chk_chr+0x12>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	3301      	adds	r3, #1
 80085f6:	607b      	str	r3, [r7, #4]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <chk_chr+0x26>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	4293      	cmp	r3, r2
 800860a:	d1f2      	bne.n	80085f2 <chk_chr+0xc>
	return *str;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	781b      	ldrb	r3, [r3, #0]
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008626:	2300      	movs	r3, #0
 8008628:	60bb      	str	r3, [r7, #8]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	e029      	b.n	8008684 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008630:	4a27      	ldr	r2, [pc, #156]	; (80086d0 <chk_lock+0xb4>)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	011b      	lsls	r3, r3, #4
 8008636:	4413      	add	r3, r2
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01d      	beq.n	800867a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800863e:	4a24      	ldr	r2, [pc, #144]	; (80086d0 <chk_lock+0xb4>)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	4413      	add	r3, r2
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d116      	bne.n	800867e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008650:	4a1f      	ldr	r2, [pc, #124]	; (80086d0 <chk_lock+0xb4>)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	4413      	add	r3, r2
 8008658:	3304      	adds	r3, #4
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008660:	429a      	cmp	r2, r3
 8008662:	d10c      	bne.n	800867e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008664:	4a1a      	ldr	r2, [pc, #104]	; (80086d0 <chk_lock+0xb4>)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	4413      	add	r3, r2
 800866c:	3308      	adds	r3, #8
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008674:	429a      	cmp	r2, r3
 8008676:	d102      	bne.n	800867e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008678:	e007      	b.n	800868a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800867a:	2301      	movs	r3, #1
 800867c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3301      	adds	r3, #1
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d9d2      	bls.n	8008630 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b02      	cmp	r3, #2
 800868e:	d109      	bne.n	80086a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d102      	bne.n	800869c <chk_lock+0x80>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d101      	bne.n	80086a0 <chk_lock+0x84>
 800869c:	2300      	movs	r3, #0
 800869e:	e010      	b.n	80086c2 <chk_lock+0xa6>
 80086a0:	2312      	movs	r3, #18
 80086a2:	e00e      	b.n	80086c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d108      	bne.n	80086bc <chk_lock+0xa0>
 80086aa:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <chk_lock+0xb4>)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	4413      	add	r3, r2
 80086b2:	330c      	adds	r3, #12
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ba:	d101      	bne.n	80086c0 <chk_lock+0xa4>
 80086bc:	2310      	movs	r3, #16
 80086be:	e000      	b.n	80086c2 <chk_lock+0xa6>
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	2001374c 	.word	0x2001374c

080086d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80086da:	2300      	movs	r3, #0
 80086dc:	607b      	str	r3, [r7, #4]
 80086de:	e002      	b.n	80086e6 <enq_lock+0x12>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3301      	adds	r3, #1
 80086e4:	607b      	str	r3, [r7, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d806      	bhi.n	80086fa <enq_lock+0x26>
 80086ec:	4a09      	ldr	r2, [pc, #36]	; (8008714 <enq_lock+0x40>)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	4413      	add	r3, r2
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1f2      	bne.n	80086e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	bf14      	ite	ne
 8008700:	2301      	movne	r3, #1
 8008702:	2300      	moveq	r3, #0
 8008704:	b2db      	uxtb	r3, r3
}
 8008706:	4618      	mov	r0, r3
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	2001374c 	.word	0x2001374c

08008718 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008722:	2300      	movs	r3, #0
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e01f      	b.n	8008768 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008728:	4a41      	ldr	r2, [pc, #260]	; (8008830 <inc_lock+0x118>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	4413      	add	r3, r2
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	429a      	cmp	r2, r3
 8008738:	d113      	bne.n	8008762 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800873a:	4a3d      	ldr	r2, [pc, #244]	; (8008830 <inc_lock+0x118>)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	4413      	add	r3, r2
 8008742:	3304      	adds	r3, #4
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800874a:	429a      	cmp	r2, r3
 800874c:	d109      	bne.n	8008762 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800874e:	4a38      	ldr	r2, [pc, #224]	; (8008830 <inc_lock+0x118>)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	011b      	lsls	r3, r3, #4
 8008754:	4413      	add	r3, r2
 8008756:	3308      	adds	r3, #8
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800875e:	429a      	cmp	r2, r3
 8008760:	d006      	beq.n	8008770 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3301      	adds	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d9dc      	bls.n	8008728 <inc_lock+0x10>
 800876e:	e000      	b.n	8008772 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008770:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d132      	bne.n	80087de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	e002      	b.n	8008784 <inc_lock+0x6c>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d806      	bhi.n	8008798 <inc_lock+0x80>
 800878a:	4a29      	ldr	r2, [pc, #164]	; (8008830 <inc_lock+0x118>)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	011b      	lsls	r3, r3, #4
 8008790:	4413      	add	r3, r2
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1f2      	bne.n	800877e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d101      	bne.n	80087a2 <inc_lock+0x8a>
 800879e:	2300      	movs	r3, #0
 80087a0:	e040      	b.n	8008824 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4922      	ldr	r1, [pc, #136]	; (8008830 <inc_lock+0x118>)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	011b      	lsls	r3, r3, #4
 80087ac:	440b      	add	r3, r1
 80087ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	491e      	ldr	r1, [pc, #120]	; (8008830 <inc_lock+0x118>)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	011b      	lsls	r3, r3, #4
 80087ba:	440b      	add	r3, r1
 80087bc:	3304      	adds	r3, #4
 80087be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	695a      	ldr	r2, [r3, #20]
 80087c4:	491a      	ldr	r1, [pc, #104]	; (8008830 <inc_lock+0x118>)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	440b      	add	r3, r1
 80087cc:	3308      	adds	r3, #8
 80087ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80087d0:	4a17      	ldr	r2, [pc, #92]	; (8008830 <inc_lock+0x118>)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	4413      	add	r3, r2
 80087d8:	330c      	adds	r3, #12
 80087da:	2200      	movs	r2, #0
 80087dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d009      	beq.n	80087f8 <inc_lock+0xe0>
 80087e4:	4a12      	ldr	r2, [pc, #72]	; (8008830 <inc_lock+0x118>)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	011b      	lsls	r3, r3, #4
 80087ea:	4413      	add	r3, r2
 80087ec:	330c      	adds	r3, #12
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <inc_lock+0xe0>
 80087f4:	2300      	movs	r3, #0
 80087f6:	e015      	b.n	8008824 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d108      	bne.n	8008810 <inc_lock+0xf8>
 80087fe:	4a0c      	ldr	r2, [pc, #48]	; (8008830 <inc_lock+0x118>)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	4413      	add	r3, r2
 8008806:	330c      	adds	r3, #12
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	3301      	adds	r3, #1
 800880c:	b29a      	uxth	r2, r3
 800880e:	e001      	b.n	8008814 <inc_lock+0xfc>
 8008810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008814:	4906      	ldr	r1, [pc, #24]	; (8008830 <inc_lock+0x118>)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	440b      	add	r3, r1
 800881c:	330c      	adds	r3, #12
 800881e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3301      	adds	r3, #1
}
 8008824:	4618      	mov	r0, r3
 8008826:	3714      	adds	r7, #20
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	2001374c 	.word	0x2001374c

08008834 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	3b01      	subs	r3, #1
 8008840:	607b      	str	r3, [r7, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d825      	bhi.n	8008894 <dec_lock+0x60>
		n = Files[i].ctr;
 8008848:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <dec_lock+0x74>)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	011b      	lsls	r3, r3, #4
 800884e:	4413      	add	r3, r2
 8008850:	330c      	adds	r3, #12
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008856:	89fb      	ldrh	r3, [r7, #14]
 8008858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800885c:	d101      	bne.n	8008862 <dec_lock+0x2e>
 800885e:	2300      	movs	r3, #0
 8008860:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008862:	89fb      	ldrh	r3, [r7, #14]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <dec_lock+0x3a>
 8008868:	89fb      	ldrh	r3, [r7, #14]
 800886a:	3b01      	subs	r3, #1
 800886c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800886e:	4a0e      	ldr	r2, [pc, #56]	; (80088a8 <dec_lock+0x74>)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	4413      	add	r3, r2
 8008876:	330c      	adds	r3, #12
 8008878:	89fa      	ldrh	r2, [r7, #14]
 800887a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800887c:	89fb      	ldrh	r3, [r7, #14]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d105      	bne.n	800888e <dec_lock+0x5a>
 8008882:	4a09      	ldr	r2, [pc, #36]	; (80088a8 <dec_lock+0x74>)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	4413      	add	r3, r2
 800888a:	2200      	movs	r2, #0
 800888c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	737b      	strb	r3, [r7, #13]
 8008892:	e001      	b.n	8008898 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008894:	2302      	movs	r3, #2
 8008896:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008898:	7b7b      	ldrb	r3, [r7, #13]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	2001374c 	.word	0x2001374c

080088ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]
 80088b8:	e010      	b.n	80088dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80088ba:	4a0d      	ldr	r2, [pc, #52]	; (80088f0 <clear_lock+0x44>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	011b      	lsls	r3, r3, #4
 80088c0:	4413      	add	r3, r2
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d105      	bne.n	80088d6 <clear_lock+0x2a>
 80088ca:	4a09      	ldr	r2, [pc, #36]	; (80088f0 <clear_lock+0x44>)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	011b      	lsls	r3, r3, #4
 80088d0:	4413      	add	r3, r2
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3301      	adds	r3, #1
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d9eb      	bls.n	80088ba <clear_lock+0xe>
	}
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	2001374c 	.word	0x2001374c

080088f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	78db      	ldrb	r3, [r3, #3]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d034      	beq.n	8008972 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7858      	ldrb	r0, [r3, #1]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008918:	2301      	movs	r3, #1
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	f7ff fd40 	bl	80083a0 <disk_write>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008926:	2301      	movs	r3, #1
 8008928:	73fb      	strb	r3, [r7, #15]
 800892a:	e022      	b.n	8008972 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	1ad2      	subs	r2, r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	429a      	cmp	r2, r3
 8008940:	d217      	bcs.n	8008972 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	789b      	ldrb	r3, [r3, #2]
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	e010      	b.n	800896c <sync_window+0x78>
					wsect += fs->fsize;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4413      	add	r3, r2
 8008952:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	7858      	ldrb	r0, [r3, #1]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800895e:	2301      	movs	r3, #1
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	f7ff fd1d 	bl	80083a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	3b01      	subs	r3, #1
 800896a:	613b      	str	r3, [r7, #16]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d8eb      	bhi.n	800894a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	d01b      	beq.n	80089cc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff ffad 	bl	80088f4 <sync_window>
 800899a:	4603      	mov	r3, r0
 800899c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d113      	bne.n	80089cc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	7858      	ldrb	r0, [r3, #1]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089ae:	2301      	movs	r3, #1
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	f7ff fcd5 	bl	8008360 <disk_read>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80089bc:	f04f 33ff 	mov.w	r3, #4294967295
 80089c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff ff87 	bl	80088f4 <sync_window>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d158      	bne.n	8008aa2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d148      	bne.n	8008a8a <sync_fs+0xb2>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	791b      	ldrb	r3, [r3, #4]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d144      	bne.n	8008a8a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	3330      	adds	r3, #48	; 0x30
 8008a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff fda9 	bl	8008562 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	3330      	adds	r3, #48	; 0x30
 8008a14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a18:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff fd38 	bl	8008492 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3330      	adds	r3, #48	; 0x30
 8008a26:	4921      	ldr	r1, [pc, #132]	; (8008aac <sync_fs+0xd4>)
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff fd4d 	bl	80084c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3330      	adds	r3, #48	; 0x30
 8008a32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008a36:	491e      	ldr	r1, [pc, #120]	; (8008ab0 <sync_fs+0xd8>)
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff fd45 	bl	80084c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	3330      	adds	r3, #48	; 0x30
 8008a42:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	f7ff fd3b 	bl	80084c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3330      	adds	r3, #48	; 0x30
 8008a56:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	4610      	mov	r0, r2
 8008a62:	f7ff fd31 	bl	80084c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	7858      	ldrb	r0, [r3, #1]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f7ff fc8e 	bl	80083a0 <disk_write>
			fs->fsi_flag = 0;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	785b      	ldrb	r3, [r3, #1]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2100      	movs	r1, #0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fca4 	bl	80083e0 <disk_ioctl>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <sync_fs+0xca>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	41615252 	.word	0x41615252
 8008ab0:	61417272 	.word	0x61417272

08008ab4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	3b02      	subs	r3, #2
 8008ac2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	3b02      	subs	r3, #2
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d301      	bcc.n	8008ad4 <clust2sect+0x20>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e008      	b.n	8008ae6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	895b      	ldrh	r3, [r3, #10]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	fb03 f202 	mul.w	r2, r3, r2
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae4:	4413      	add	r3, r2
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d904      	bls.n	8008b12 <get_fat+0x20>
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d302      	bcc.n	8008b18 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008b12:	2301      	movs	r3, #1
 8008b14:	617b      	str	r3, [r7, #20]
 8008b16:	e08f      	b.n	8008c38 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008b18:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d062      	beq.n	8008bec <get_fat+0xfa>
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	dc7c      	bgt.n	8008c24 <get_fat+0x132>
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d002      	beq.n	8008b34 <get_fat+0x42>
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d042      	beq.n	8008bb8 <get_fat+0xc6>
 8008b32:	e077      	b.n	8008c24 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	60fb      	str	r3, [r7, #12]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	085b      	lsrs	r3, r3, #1
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	6a1a      	ldr	r2, [r3, #32]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	0a5b      	lsrs	r3, r3, #9
 8008b4a:	4413      	add	r3, r2
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6938      	ldr	r0, [r7, #16]
 8008b50:	f7ff ff14 	bl	800897c <move_window>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d167      	bne.n	8008c2a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	1c5a      	adds	r2, r3, #1
 8008b5e:	60fa      	str	r2, [r7, #12]
 8008b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	4413      	add	r3, r2
 8008b68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	6a1a      	ldr	r2, [r3, #32]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	0a5b      	lsrs	r3, r3, #9
 8008b76:	4413      	add	r3, r2
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6938      	ldr	r0, [r7, #16]
 8008b7c:	f7ff fefe 	bl	800897c <move_window>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d153      	bne.n	8008c2e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b94:	021b      	lsls	r3, r3, #8
 8008b96:	461a      	mov	r2, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <get_fat+0xbc>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	091b      	lsrs	r3, r3, #4
 8008bac:	e002      	b.n	8008bb4 <get_fat+0xc2>
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bb4:	617b      	str	r3, [r7, #20]
			break;
 8008bb6:	e03f      	b.n	8008c38 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	6a1a      	ldr	r2, [r3, #32]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	0a1b      	lsrs	r3, r3, #8
 8008bc0:	4413      	add	r3, r2
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6938      	ldr	r0, [r7, #16]
 8008bc6:	f7ff fed9 	bl	800897c <move_window>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d130      	bne.n	8008c32 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008bde:	4413      	add	r3, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff fc1b 	bl	800841c <ld_word>
 8008be6:	4603      	mov	r3, r0
 8008be8:	617b      	str	r3, [r7, #20]
			break;
 8008bea:	e025      	b.n	8008c38 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	6a1a      	ldr	r2, [r3, #32]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	09db      	lsrs	r3, r3, #7
 8008bf4:	4413      	add	r3, r2
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6938      	ldr	r0, [r7, #16]
 8008bfa:	f7ff febf 	bl	800897c <move_window>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d118      	bne.n	8008c36 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c12:	4413      	add	r3, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7ff fc19 	bl	800844c <ld_dword>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008c20:	617b      	str	r3, [r7, #20]
			break;
 8008c22:	e009      	b.n	8008c38 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008c24:	2301      	movs	r3, #1
 8008c26:	617b      	str	r3, [r7, #20]
 8008c28:	e006      	b.n	8008c38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c2a:	bf00      	nop
 8008c2c:	e004      	b.n	8008c38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c2e:	bf00      	nop
 8008c30:	e002      	b.n	8008c38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c32:	bf00      	nop
 8008c34:	e000      	b.n	8008c38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c36:	bf00      	nop
		}
	}

	return val;
 8008c38:	697b      	ldr	r3, [r7, #20]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008c42:	b590      	push	{r4, r7, lr}
 8008c44:	b089      	sub	sp, #36	; 0x24
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	60f8      	str	r0, [r7, #12]
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008c4e:	2302      	movs	r3, #2
 8008c50:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	f240 80d2 	bls.w	8008dfe <put_fat+0x1bc>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	f080 80cc 	bcs.w	8008dfe <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	f000 8096 	beq.w	8008d9c <put_fat+0x15a>
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	f300 80cd 	bgt.w	8008e10 <put_fat+0x1ce>
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d002      	beq.n	8008c80 <put_fat+0x3e>
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d06e      	beq.n	8008d5c <put_fat+0x11a>
 8008c7e:	e0c7      	b.n	8008e10 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	61bb      	str	r3, [r7, #24]
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	085b      	lsrs	r3, r3, #1
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6a1a      	ldr	r2, [r3, #32]
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	0a5b      	lsrs	r3, r3, #9
 8008c96:	4413      	add	r3, r2
 8008c98:	4619      	mov	r1, r3
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f7ff fe6e 	bl	800897c <move_window>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ca4:	7ffb      	ldrb	r3, [r7, #31]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 80ab 	bne.w	8008e02 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	1c59      	adds	r1, r3, #1
 8008cb6:	61b9      	str	r1, [r7, #24]
 8008cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbc:	4413      	add	r3, r2
 8008cbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00d      	beq.n	8008ce6 <put_fat+0xa4>
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	b25b      	sxtb	r3, r3
 8008cd0:	f003 030f 	and.w	r3, r3, #15
 8008cd4:	b25a      	sxtb	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	011b      	lsls	r3, r3, #4
 8008cdc:	b25b      	sxtb	r3, r3
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	b25b      	sxtb	r3, r3
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	e001      	b.n	8008cea <put_fat+0xa8>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a1a      	ldr	r2, [r3, #32]
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	0a5b      	lsrs	r3, r3, #9
 8008cfc:	4413      	add	r3, r2
 8008cfe:	4619      	mov	r1, r3
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f7ff fe3b 	bl	800897c <move_window>
 8008d06:	4603      	mov	r3, r0
 8008d08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d0a:	7ffb      	ldrb	r3, [r7, #31]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d17a      	bne.n	8008e06 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1c:	4413      	add	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <put_fat+0xf0>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	091b      	lsrs	r3, r3, #4
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	e00e      	b.n	8008d50 <put_fat+0x10e>
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	b25b      	sxtb	r3, r3
 8008d38:	f023 030f 	bic.w	r3, r3, #15
 8008d3c:	b25a      	sxtb	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	0a1b      	lsrs	r3, r3, #8
 8008d42:	b25b      	sxtb	r3, r3
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	b25b      	sxtb	r3, r3
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	b25b      	sxtb	r3, r3
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2201      	movs	r2, #1
 8008d58:	70da      	strb	r2, [r3, #3]
			break;
 8008d5a:	e059      	b.n	8008e10 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a1a      	ldr	r2, [r3, #32]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	0a1b      	lsrs	r3, r3, #8
 8008d64:	4413      	add	r3, r2
 8008d66:	4619      	mov	r1, r3
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f7ff fe07 	bl	800897c <move_window>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d72:	7ffb      	ldrb	r3, [r7, #31]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d148      	bne.n	8008e0a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008d86:	4413      	add	r3, r2
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	b292      	uxth	r2, r2
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff fb7f 	bl	8008492 <st_word>
			fs->wflag = 1;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2201      	movs	r2, #1
 8008d98:	70da      	strb	r2, [r3, #3]
			break;
 8008d9a:	e039      	b.n	8008e10 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a1a      	ldr	r2, [r3, #32]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	09db      	lsrs	r3, r3, #7
 8008da4:	4413      	add	r3, r2
 8008da6:	4619      	mov	r1, r3
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff fde7 	bl	800897c <move_window>
 8008dae:	4603      	mov	r3, r0
 8008db0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008db2:	7ffb      	ldrb	r3, [r7, #31]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d12a      	bne.n	8008e0e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008dcc:	4413      	add	r3, r2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff fb3c 	bl	800844c <ld_dword>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008dda:	4323      	orrs	r3, r4
 8008ddc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008dec:	4413      	add	r3, r2
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff fb69 	bl	80084c8 <st_dword>
			fs->wflag = 1;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	70da      	strb	r2, [r3, #3]
			break;
 8008dfc:	e008      	b.n	8008e10 <put_fat+0x1ce>
		}
	}
 8008dfe:	bf00      	nop
 8008e00:	e006      	b.n	8008e10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e02:	bf00      	nop
 8008e04:	e004      	b.n	8008e10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e06:	bf00      	nop
 8008e08:	e002      	b.n	8008e10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e0a:	bf00      	nop
 8008e0c:	e000      	b.n	8008e10 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008e0e:	bf00      	nop
	return res;
 8008e10:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3724      	adds	r7, #36	; 0x24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd90      	pop	{r4, r7, pc}

08008e1a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b088      	sub	sp, #32
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d904      	bls.n	8008e40 <remove_chain+0x26>
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d301      	bcc.n	8008e44 <remove_chain+0x2a>
 8008e40:	2302      	movs	r3, #2
 8008e42:	e04b      	b.n	8008edc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00c      	beq.n	8008e64 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	69b8      	ldr	r0, [r7, #24]
 8008e52:	f7ff fef6 	bl	8008c42 <put_fat>
 8008e56:	4603      	mov	r3, r0
 8008e58:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008e5a:	7ffb      	ldrb	r3, [r7, #31]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d001      	beq.n	8008e64 <remove_chain+0x4a>
 8008e60:	7ffb      	ldrb	r3, [r7, #31]
 8008e62:	e03b      	b.n	8008edc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008e64:	68b9      	ldr	r1, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f7ff fe43 	bl	8008af2 <get_fat>
 8008e6c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d031      	beq.n	8008ed8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d101      	bne.n	8008e7e <remove_chain+0x64>
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e02e      	b.n	8008edc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e84:	d101      	bne.n	8008e8a <remove_chain+0x70>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e028      	b.n	8008edc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	69b8      	ldr	r0, [r7, #24]
 8008e90:	f7ff fed7 	bl	8008c42 <put_fat>
 8008e94:	4603      	mov	r3, r0
 8008e96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008e98:	7ffb      	ldrb	r3, [r7, #31]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <remove_chain+0x88>
 8008e9e:	7ffb      	ldrb	r3, [r7, #31]
 8008ea0:	e01c      	b.n	8008edc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	691a      	ldr	r2, [r3, #16]
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	3b02      	subs	r3, #2
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d20b      	bcs.n	8008ec8 <remove_chain+0xae>
			fs->free_clst++;
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	791b      	ldrb	r3, [r3, #4]
 8008ebe:	f043 0301 	orr.w	r3, r3, #1
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d3c6      	bcc.n	8008e64 <remove_chain+0x4a>
 8008ed6:	e000      	b.n	8008eda <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008ed8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10d      	bne.n	8008f16 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d004      	beq.n	8008f10 <create_chain+0x2c>
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d31b      	bcc.n	8008f48 <create_chain+0x64>
 8008f10:	2301      	movs	r3, #1
 8008f12:	61bb      	str	r3, [r7, #24]
 8008f14:	e018      	b.n	8008f48 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7ff fdea 	bl	8008af2 <get_fat>
 8008f1e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	d801      	bhi.n	8008f2a <create_chain+0x46>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e070      	b.n	800900c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d101      	bne.n	8008f36 <create_chain+0x52>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	e06a      	b.n	800900c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d201      	bcs.n	8008f44 <create_chain+0x60>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	e063      	b.n	800900c <create_chain+0x128>
		scl = clst;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d307      	bcc.n	8008f6c <create_chain+0x88>
				ncl = 2;
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008f60:	69fa      	ldr	r2, [r7, #28]
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d901      	bls.n	8008f6c <create_chain+0x88>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	e04f      	b.n	800900c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008f6c:	69f9      	ldr	r1, [r7, #28]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7ff fdbf 	bl	8008af2 <get_fat>
 8008f74:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00e      	beq.n	8008f9a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d003      	beq.n	8008f8a <create_chain+0xa6>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f88:	d101      	bne.n	8008f8e <create_chain+0xaa>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	e03e      	b.n	800900c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d1da      	bne.n	8008f4c <create_chain+0x68>
 8008f96:	2300      	movs	r3, #0
 8008f98:	e038      	b.n	800900c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008f9a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa0:	69f9      	ldr	r1, [r7, #28]
 8008fa2:	6938      	ldr	r0, [r7, #16]
 8008fa4:	f7ff fe4d 	bl	8008c42 <put_fat>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d109      	bne.n	8008fc6 <create_chain+0xe2>
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d006      	beq.n	8008fc6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008fb8:	69fa      	ldr	r2, [r7, #28]
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6938      	ldr	r0, [r7, #16]
 8008fbe:	f7ff fe40 	bl	8008c42 <put_fat>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d116      	bne.n	8008ffa <create_chain+0x116>
		fs->last_clst = ncl;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	691a      	ldr	r2, [r3, #16]
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	3b02      	subs	r3, #2
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d804      	bhi.n	8008fea <create_chain+0x106>
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	1e5a      	subs	r2, r3, #1
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	791b      	ldrb	r3, [r3, #4]
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	711a      	strb	r2, [r3, #4]
 8008ff8:	e007      	b.n	800900a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d102      	bne.n	8009006 <create_chain+0x122>
 8009000:	f04f 33ff 	mov.w	r3, #4294967295
 8009004:	e000      	b.n	8009008 <create_chain+0x124>
 8009006:	2301      	movs	r3, #1
 8009008:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800900a:	69fb      	ldr	r3, [r7, #28]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3720      	adds	r7, #32
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009028:	3304      	adds	r3, #4
 800902a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	0a5b      	lsrs	r3, r3, #9
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	8952      	ldrh	r2, [r2, #10]
 8009034:	fbb3 f3f2 	udiv	r3, r3, r2
 8009038:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1d1a      	adds	r2, r3, #4
 800903e:	613a      	str	r2, [r7, #16]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <clmt_clust+0x3a>
 800904a:	2300      	movs	r3, #0
 800904c:	e010      	b.n	8009070 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	429a      	cmp	r2, r3
 8009054:	d307      	bcc.n	8009066 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	617b      	str	r3, [r7, #20]
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	3304      	adds	r3, #4
 8009062:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009064:	e7e9      	b.n	800903a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009066:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	4413      	add	r3, r2
}
 8009070:	4618      	mov	r0, r3
 8009072:	371c      	adds	r7, #28
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b086      	sub	sp, #24
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009092:	d204      	bcs.n	800909e <dir_sdi+0x22>
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	f003 031f 	and.w	r3, r3, #31
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800909e:	2302      	movs	r3, #2
 80090a0:	e063      	b.n	800916a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d106      	bne.n	80090c2 <dir_sdi+0x46>
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d902      	bls.n	80090c2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10c      	bne.n	80090e2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	095b      	lsrs	r3, r3, #5
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	8912      	ldrh	r2, [r2, #8]
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d301      	bcc.n	80090d8 <dir_sdi+0x5c>
 80090d4:	2302      	movs	r3, #2
 80090d6:	e048      	b.n	800916a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	61da      	str	r2, [r3, #28]
 80090e0:	e029      	b.n	8009136 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	895b      	ldrh	r3, [r3, #10]
 80090e6:	025b      	lsls	r3, r3, #9
 80090e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80090ea:	e019      	b.n	8009120 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6979      	ldr	r1, [r7, #20]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff fcfe 	bl	8008af2 <get_fat>
 80090f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fe:	d101      	bne.n	8009104 <dir_sdi+0x88>
 8009100:	2301      	movs	r3, #1
 8009102:	e032      	b.n	800916a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d904      	bls.n	8009114 <dir_sdi+0x98>
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	429a      	cmp	r2, r3
 8009112:	d301      	bcc.n	8009118 <dir_sdi+0x9c>
 8009114:	2302      	movs	r3, #2
 8009116:	e028      	b.n	800916a <dir_sdi+0xee>
			ofs -= csz;
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	429a      	cmp	r2, r3
 8009126:	d2e1      	bcs.n	80090ec <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009128:	6979      	ldr	r1, [r7, #20]
 800912a:	6938      	ldr	r0, [r7, #16]
 800912c:	f7ff fcc2 	bl	8008ab4 <clust2sect>
 8009130:	4602      	mov	r2, r0
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <dir_sdi+0xcc>
 8009144:	2302      	movs	r3, #2
 8009146:	e010      	b.n	800916a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	69da      	ldr	r2, [r3, #28]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	0a5b      	lsrs	r3, r3, #9
 8009150:	441a      	add	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009162:	441a      	add	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b086      	sub	sp, #24
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	3320      	adds	r3, #32
 8009188:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d003      	beq.n	800919a <dir_next+0x28>
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009198:	d301      	bcc.n	800919e <dir_next+0x2c>
 800919a:	2304      	movs	r3, #4
 800919c:	e0aa      	b.n	80092f4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f040 8098 	bne.w	80092da <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	69db      	ldr	r3, [r3, #28]
 80091ae:	1c5a      	adds	r2, r3, #1
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10b      	bne.n	80091d4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	095b      	lsrs	r3, r3, #5
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	8912      	ldrh	r2, [r2, #8]
 80091c4:	4293      	cmp	r3, r2
 80091c6:	f0c0 8088 	bcc.w	80092da <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	61da      	str	r2, [r3, #28]
 80091d0:	2304      	movs	r3, #4
 80091d2:	e08f      	b.n	80092f4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	0a5b      	lsrs	r3, r3, #9
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	8952      	ldrh	r2, [r2, #10]
 80091dc:	3a01      	subs	r2, #1
 80091de:	4013      	ands	r3, r2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d17a      	bne.n	80092da <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f7ff fc80 	bl	8008af2 <get_fat>
 80091f2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d801      	bhi.n	80091fe <dir_next+0x8c>
 80091fa:	2302      	movs	r3, #2
 80091fc:	e07a      	b.n	80092f4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009204:	d101      	bne.n	800920a <dir_next+0x98>
 8009206:	2301      	movs	r3, #1
 8009208:	e074      	b.n	80092f4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	429a      	cmp	r2, r3
 8009212:	d358      	bcc.n	80092c6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d104      	bne.n	8009224 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	61da      	str	r2, [r3, #28]
 8009220:	2304      	movs	r3, #4
 8009222:	e067      	b.n	80092f4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	4619      	mov	r1, r3
 800922c:	4610      	mov	r0, r2
 800922e:	f7ff fe59 	bl	8008ee4 <create_chain>
 8009232:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <dir_next+0xcc>
 800923a:	2307      	movs	r3, #7
 800923c:	e05a      	b.n	80092f4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <dir_next+0xd6>
 8009244:	2302      	movs	r3, #2
 8009246:	e055      	b.n	80092f4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924e:	d101      	bne.n	8009254 <dir_next+0xe2>
 8009250:	2301      	movs	r3, #1
 8009252:	e04f      	b.n	80092f4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f7ff fb4d 	bl	80088f4 <sync_window>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <dir_next+0xf2>
 8009260:	2301      	movs	r3, #1
 8009262:	e047      	b.n	80092f4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3330      	adds	r3, #48	; 0x30
 8009268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800926c:	2100      	movs	r1, #0
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff f977 	bl	8008562 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009274:	2300      	movs	r3, #0
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	6979      	ldr	r1, [r7, #20]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f7ff fc1a 	bl	8008ab4 <clust2sect>
 8009280:	4602      	mov	r2, r0
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	62da      	str	r2, [r3, #44]	; 0x2c
 8009286:	e012      	b.n	80092ae <dir_next+0x13c>
						fs->wflag = 1;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2201      	movs	r2, #1
 800928c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff fb30 	bl	80088f4 <sync_window>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d001      	beq.n	800929e <dir_next+0x12c>
 800929a:	2301      	movs	r3, #1
 800929c:	e02a      	b.n	80092f4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	3301      	adds	r3, #1
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	895b      	ldrh	r3, [r3, #10]
 80092b2:	461a      	mov	r2, r3
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d3e6      	bcc.n	8009288 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	1ad2      	subs	r2, r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80092cc:	6979      	ldr	r1, [r7, #20]
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f7ff fbf0 	bl	8008ab4 <clust2sect>
 80092d4:	4602      	mov	r2, r0
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ec:	441a      	add	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800930c:	2100      	movs	r1, #0
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff feb4 	bl	800907c <dir_sdi>
 8009314:	4603      	mov	r3, r0
 8009316:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d12b      	bne.n	8009376 <dir_alloc+0x7a>
		n = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	4619      	mov	r1, r3
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f7ff fb27 	bl	800897c <move_window>
 800932e:	4603      	mov	r3, r0
 8009330:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d11d      	bne.n	8009374 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a1b      	ldr	r3, [r3, #32]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2be5      	cmp	r3, #229	; 0xe5
 8009340:	d004      	beq.n	800934c <dir_alloc+0x50>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d107      	bne.n	800935c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	3301      	adds	r3, #1
 8009350:	613b      	str	r3, [r7, #16]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	429a      	cmp	r2, r3
 8009358:	d102      	bne.n	8009360 <dir_alloc+0x64>
 800935a:	e00c      	b.n	8009376 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800935c:	2300      	movs	r3, #0
 800935e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009360:	2101      	movs	r1, #1
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff ff05 	bl	8009172 <dir_next>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0d7      	beq.n	8009322 <dir_alloc+0x26>
 8009372:	e000      	b.n	8009376 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009374:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009376:	7dfb      	ldrb	r3, [r7, #23]
 8009378:	2b04      	cmp	r3, #4
 800937a:	d101      	bne.n	8009380 <dir_alloc+0x84>
 800937c:	2307      	movs	r3, #7
 800937e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	331a      	adds	r3, #26
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff f83f 	bl	800841c <ld_word>
 800939e:	4603      	mov	r3, r0
 80093a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d109      	bne.n	80093be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	3314      	adds	r3, #20
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7ff f834 	bl	800841c <ld_word>
 80093b4:	4603      	mov	r3, r0
 80093b6:	041b      	lsls	r3, r3, #16
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80093be:	68fb      	ldr	r3, [r7, #12]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	331a      	adds	r3, #26
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	b292      	uxth	r2, r2
 80093dc:	4611      	mov	r1, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f7ff f857 	bl	8008492 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	2b03      	cmp	r3, #3
 80093ea:	d109      	bne.n	8009400 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	f103 0214 	add.w	r2, r3, #20
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	0c1b      	lsrs	r3, r3, #16
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	4619      	mov	r1, r3
 80093fa:	4610      	mov	r0, r2
 80093fc:	f7ff f849 	bl	8008492 <st_word>
	}
}
 8009400:	bf00      	nop
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009416:	2100      	movs	r1, #0
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff fe2f 	bl	800907c <dir_sdi>
 800941e:	4603      	mov	r3, r0
 8009420:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <dir_find+0x24>
 8009428:	7dfb      	ldrb	r3, [r7, #23]
 800942a:	e03e      	b.n	80094aa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	4619      	mov	r1, r3
 8009432:	6938      	ldr	r0, [r7, #16]
 8009434:	f7ff faa2 	bl	800897c <move_window>
 8009438:	4603      	mov	r3, r0
 800943a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d12f      	bne.n	80094a2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800944a:	7bfb      	ldrb	r3, [r7, #15]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d102      	bne.n	8009456 <dir_find+0x4e>
 8009450:	2304      	movs	r3, #4
 8009452:	75fb      	strb	r3, [r7, #23]
 8009454:	e028      	b.n	80094a8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	330b      	adds	r3, #11
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009462:	b2da      	uxtb	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6a1b      	ldr	r3, [r3, #32]
 800946c:	330b      	adds	r3, #11
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	f003 0308 	and.w	r3, r3, #8
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10a      	bne.n	800948e <dir_find+0x86>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a18      	ldr	r0, [r3, #32]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3324      	adds	r3, #36	; 0x24
 8009480:	220b      	movs	r2, #11
 8009482:	4619      	mov	r1, r3
 8009484:	f7ff f888 	bl	8008598 <mem_cmp>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00b      	beq.n	80094a6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800948e:	2100      	movs	r1, #0
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff fe6e 	bl	8009172 <dir_next>
 8009496:	4603      	mov	r3, r0
 8009498:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800949a:	7dfb      	ldrb	r3, [r7, #23]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0c5      	beq.n	800942c <dir_find+0x24>
 80094a0:	e002      	b.n	80094a8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80094a2:	bf00      	nop
 80094a4:	e000      	b.n	80094a8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80094a6:	bf00      	nop

	return res;
 80094a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b084      	sub	sp, #16
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80094c0:	2101      	movs	r1, #1
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7ff ff1a 	bl	80092fc <dir_alloc>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d11c      	bne.n	800950c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	69db      	ldr	r3, [r3, #28]
 80094d6:	4619      	mov	r1, r3
 80094d8:	68b8      	ldr	r0, [r7, #8]
 80094da:	f7ff fa4f 	bl	800897c <move_window>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d111      	bne.n	800950c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	2220      	movs	r2, #32
 80094ee:	2100      	movs	r1, #0
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7ff f836 	bl	8008562 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a18      	ldr	r0, [r3, #32]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3324      	adds	r3, #36	; 0x24
 80094fe:	220b      	movs	r2, #11
 8009500:	4619      	mov	r1, r3
 8009502:	f7ff f80d 	bl	8008520 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2201      	movs	r2, #1
 800950a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800950c:	7bfb      	ldrb	r3, [r7, #15]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	3324      	adds	r3, #36	; 0x24
 800952c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800952e:	220b      	movs	r2, #11
 8009530:	2120      	movs	r1, #32
 8009532:	68b8      	ldr	r0, [r7, #8]
 8009534:	f7ff f815 	bl	8008562 <mem_set>
	si = i = 0; ni = 8;
 8009538:	2300      	movs	r3, #0
 800953a:	613b      	str	r3, [r7, #16]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	61fb      	str	r3, [r7, #28]
 8009540:	2308      	movs	r3, #8
 8009542:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	1c5a      	adds	r2, r3, #1
 8009548:	61fa      	str	r2, [r7, #28]
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	4413      	add	r3, r2
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009552:	7efb      	ldrb	r3, [r7, #27]
 8009554:	2b20      	cmp	r3, #32
 8009556:	d94e      	bls.n	80095f6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009558:	7efb      	ldrb	r3, [r7, #27]
 800955a:	2b2f      	cmp	r3, #47	; 0x2f
 800955c:	d006      	beq.n	800956c <create_name+0x54>
 800955e:	7efb      	ldrb	r3, [r7, #27]
 8009560:	2b5c      	cmp	r3, #92	; 0x5c
 8009562:	d110      	bne.n	8009586 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009564:	e002      	b.n	800956c <create_name+0x54>
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	3301      	adds	r3, #1
 800956a:	61fb      	str	r3, [r7, #28]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	4413      	add	r3, r2
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	2b2f      	cmp	r3, #47	; 0x2f
 8009576:	d0f6      	beq.n	8009566 <create_name+0x4e>
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	4413      	add	r3, r2
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2b5c      	cmp	r3, #92	; 0x5c
 8009582:	d0f0      	beq.n	8009566 <create_name+0x4e>
			break;
 8009584:	e038      	b.n	80095f8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009586:	7efb      	ldrb	r3, [r7, #27]
 8009588:	2b2e      	cmp	r3, #46	; 0x2e
 800958a:	d003      	beq.n	8009594 <create_name+0x7c>
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	429a      	cmp	r2, r3
 8009592:	d30c      	bcc.n	80095ae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2b0b      	cmp	r3, #11
 8009598:	d002      	beq.n	80095a0 <create_name+0x88>
 800959a:	7efb      	ldrb	r3, [r7, #27]
 800959c:	2b2e      	cmp	r3, #46	; 0x2e
 800959e:	d001      	beq.n	80095a4 <create_name+0x8c>
 80095a0:	2306      	movs	r3, #6
 80095a2:	e044      	b.n	800962e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80095a4:	2308      	movs	r3, #8
 80095a6:	613b      	str	r3, [r7, #16]
 80095a8:	230b      	movs	r3, #11
 80095aa:	617b      	str	r3, [r7, #20]
			continue;
 80095ac:	e022      	b.n	80095f4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80095ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	da04      	bge.n	80095c0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80095b6:	7efb      	ldrb	r3, [r7, #27]
 80095b8:	3b80      	subs	r3, #128	; 0x80
 80095ba:	4a1f      	ldr	r2, [pc, #124]	; (8009638 <create_name+0x120>)
 80095bc:	5cd3      	ldrb	r3, [r2, r3]
 80095be:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80095c0:	7efb      	ldrb	r3, [r7, #27]
 80095c2:	4619      	mov	r1, r3
 80095c4:	481d      	ldr	r0, [pc, #116]	; (800963c <create_name+0x124>)
 80095c6:	f7ff f80e 	bl	80085e6 <chk_chr>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <create_name+0xbc>
 80095d0:	2306      	movs	r3, #6
 80095d2:	e02c      	b.n	800962e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80095d4:	7efb      	ldrb	r3, [r7, #27]
 80095d6:	2b60      	cmp	r3, #96	; 0x60
 80095d8:	d905      	bls.n	80095e6 <create_name+0xce>
 80095da:	7efb      	ldrb	r3, [r7, #27]
 80095dc:	2b7a      	cmp	r3, #122	; 0x7a
 80095de:	d802      	bhi.n	80095e6 <create_name+0xce>
 80095e0:	7efb      	ldrb	r3, [r7, #27]
 80095e2:	3b20      	subs	r3, #32
 80095e4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	613a      	str	r2, [r7, #16]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	4413      	add	r3, r2
 80095f0:	7efa      	ldrb	r2, [r7, #27]
 80095f2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80095f4:	e7a6      	b.n	8009544 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80095f6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	441a      	add	r2, r3
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <create_name+0xf4>
 8009608:	2306      	movs	r3, #6
 800960a:	e010      	b.n	800962e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	2be5      	cmp	r3, #229	; 0xe5
 8009612:	d102      	bne.n	800961a <create_name+0x102>
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2205      	movs	r2, #5
 8009618:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800961a:	7efb      	ldrb	r3, [r7, #27]
 800961c:	2b20      	cmp	r3, #32
 800961e:	d801      	bhi.n	8009624 <create_name+0x10c>
 8009620:	2204      	movs	r2, #4
 8009622:	e000      	b.n	8009626 <create_name+0x10e>
 8009624:	2200      	movs	r2, #0
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	330b      	adds	r3, #11
 800962a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800962c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800962e:	4618      	mov	r0, r3
 8009630:	3720      	adds	r7, #32
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	0801621c 	.word	0x0801621c
 800963c:	0800cca0 	.word	0x0800cca0

08009640 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009654:	e002      	b.n	800965c <follow_path+0x1c>
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	3301      	adds	r3, #1
 800965a:	603b      	str	r3, [r7, #0]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	2b2f      	cmp	r3, #47	; 0x2f
 8009662:	d0f8      	beq.n	8009656 <follow_path+0x16>
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	2b5c      	cmp	r3, #92	; 0x5c
 800966a:	d0f4      	beq.n	8009656 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	2200      	movs	r2, #0
 8009670:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2b1f      	cmp	r3, #31
 8009678:	d80a      	bhi.n	8009690 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2280      	movs	r2, #128	; 0x80
 800967e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009682:	2100      	movs	r1, #0
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7ff fcf9 	bl	800907c <dir_sdi>
 800968a:	4603      	mov	r3, r0
 800968c:	75fb      	strb	r3, [r7, #23]
 800968e:	e043      	b.n	8009718 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009690:	463b      	mov	r3, r7
 8009692:	4619      	mov	r1, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff ff3f 	bl	8009518 <create_name>
 800969a:	4603      	mov	r3, r0
 800969c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d134      	bne.n	800970e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7ff feaf 	bl	8009408 <dir_find>
 80096aa:	4603      	mov	r3, r0
 80096ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80096b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00a      	beq.n	80096d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	2b04      	cmp	r3, #4
 80096c0:	d127      	bne.n	8009712 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80096c2:	7afb      	ldrb	r3, [r7, #11]
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d122      	bne.n	8009712 <follow_path+0xd2>
 80096cc:	2305      	movs	r3, #5
 80096ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80096d0:	e01f      	b.n	8009712 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80096d2:	7afb      	ldrb	r3, [r7, #11]
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d11c      	bne.n	8009716 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	799b      	ldrb	r3, [r3, #6]
 80096e0:	f003 0310 	and.w	r3, r3, #16
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d102      	bne.n	80096ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80096e8:	2305      	movs	r3, #5
 80096ea:	75fb      	strb	r3, [r7, #23]
 80096ec:	e014      	b.n	8009718 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fc:	4413      	add	r3, r2
 80096fe:	4619      	mov	r1, r3
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff fe42 	bl	800938a <ld_clust>
 8009706:	4602      	mov	r2, r0
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800970c:	e7c0      	b.n	8009690 <follow_path+0x50>
			if (res != FR_OK) break;
 800970e:	bf00      	nop
 8009710:	e002      	b.n	8009718 <follow_path+0xd8>
				break;
 8009712:	bf00      	nop
 8009714:	e000      	b.n	8009718 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009716:	bf00      	nop
			}
		}
	}

	return res;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009722:	b480      	push	{r7}
 8009724:	b087      	sub	sp, #28
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800972a:	f04f 33ff 	mov.w	r3, #4294967295
 800972e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d031      	beq.n	800979c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	e002      	b.n	8009746 <get_ldnumber+0x24>
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	3301      	adds	r3, #1
 8009744:	617b      	str	r3, [r7, #20]
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2b20      	cmp	r3, #32
 800974c:	d903      	bls.n	8009756 <get_ldnumber+0x34>
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	2b3a      	cmp	r3, #58	; 0x3a
 8009754:	d1f4      	bne.n	8009740 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	2b3a      	cmp	r3, #58	; 0x3a
 800975c:	d11c      	bne.n	8009798 <get_ldnumber+0x76>
			tp = *path;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	1c5a      	adds	r2, r3, #1
 8009768:	60fa      	str	r2, [r7, #12]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	3b30      	subs	r3, #48	; 0x30
 800976e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2b09      	cmp	r3, #9
 8009774:	d80e      	bhi.n	8009794 <get_ldnumber+0x72>
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	429a      	cmp	r2, r3
 800977c:	d10a      	bne.n	8009794 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d107      	bne.n	8009794 <get_ldnumber+0x72>
					vol = (int)i;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	3301      	adds	r3, #1
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	697a      	ldr	r2, [r7, #20]
 8009792:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	e002      	b.n	800979e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800979c:	693b      	ldr	r3, [r7, #16]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	371c      	adds	r7, #28
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
	...

080097ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	70da      	strb	r2, [r3, #3]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f04f 32ff 	mov.w	r2, #4294967295
 80097c2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7ff f8d8 	bl	800897c <move_window>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <check_fs+0x2a>
 80097d2:	2304      	movs	r3, #4
 80097d4:	e038      	b.n	8009848 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3330      	adds	r3, #48	; 0x30
 80097da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097de:	4618      	mov	r0, r3
 80097e0:	f7fe fe1c 	bl	800841c <ld_word>
 80097e4:	4603      	mov	r3, r0
 80097e6:	461a      	mov	r2, r3
 80097e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d001      	beq.n	80097f4 <check_fs+0x48>
 80097f0:	2303      	movs	r3, #3
 80097f2:	e029      	b.n	8009848 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80097fa:	2be9      	cmp	r3, #233	; 0xe9
 80097fc:	d009      	beq.n	8009812 <check_fs+0x66>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009804:	2beb      	cmp	r3, #235	; 0xeb
 8009806:	d11e      	bne.n	8009846 <check_fs+0x9a>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800980e:	2b90      	cmp	r3, #144	; 0x90
 8009810:	d119      	bne.n	8009846 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3330      	adds	r3, #48	; 0x30
 8009816:	3336      	adds	r3, #54	; 0x36
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe fe17 	bl	800844c <ld_dword>
 800981e:	4603      	mov	r3, r0
 8009820:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009824:	4a0a      	ldr	r2, [pc, #40]	; (8009850 <check_fs+0xa4>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d101      	bne.n	800982e <check_fs+0x82>
 800982a:	2300      	movs	r3, #0
 800982c:	e00c      	b.n	8009848 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	3330      	adds	r3, #48	; 0x30
 8009832:	3352      	adds	r3, #82	; 0x52
 8009834:	4618      	mov	r0, r3
 8009836:	f7fe fe09 	bl	800844c <ld_dword>
 800983a:	4603      	mov	r3, r0
 800983c:	4a05      	ldr	r2, [pc, #20]	; (8009854 <check_fs+0xa8>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d101      	bne.n	8009846 <check_fs+0x9a>
 8009842:	2300      	movs	r3, #0
 8009844:	e000      	b.n	8009848 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009846:	2302      	movs	r3, #2
}
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	00544146 	.word	0x00544146
 8009854:	33544146 	.word	0x33544146

08009858 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b096      	sub	sp, #88	; 0x58
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	4613      	mov	r3, r2
 8009864:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f7ff ff58 	bl	8009722 <get_ldnumber>
 8009872:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009876:	2b00      	cmp	r3, #0
 8009878:	da01      	bge.n	800987e <find_volume+0x26>
 800987a:	230b      	movs	r3, #11
 800987c:	e22d      	b.n	8009cda <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800987e:	4aa1      	ldr	r2, [pc, #644]	; (8009b04 <find_volume+0x2ac>)
 8009880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009886:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <find_volume+0x3a>
 800988e:	230c      	movs	r3, #12
 8009890:	e223      	b.n	8009cda <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009896:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	f023 0301 	bic.w	r3, r3, #1
 800989e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01a      	beq.n	80098de <find_volume+0x86>
		stat = disk_status(fs->drv);
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fd17 	bl	80082e0 <disk_status>
 80098b2:	4603      	mov	r3, r0
 80098b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80098b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d10c      	bne.n	80098de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80098c4:	79fb      	ldrb	r3, [r7, #7]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d007      	beq.n	80098da <find_volume+0x82>
 80098ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80098ce:	f003 0304 	and.w	r3, r3, #4
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80098d6:	230a      	movs	r3, #10
 80098d8:	e1ff      	b.n	8009cda <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80098da:	2300      	movs	r3, #0
 80098dc:	e1fd      	b.n	8009cda <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80098de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80098e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80098ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ee:	785b      	ldrb	r3, [r3, #1]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fe fd0f 	bl	8008314 <disk_initialize>
 80098f6:	4603      	mov	r3, r0
 80098f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80098fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009908:	2303      	movs	r3, #3
 800990a:	e1e6      	b.n	8009cda <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800990c:	79fb      	ldrb	r3, [r7, #7]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d007      	beq.n	8009922 <find_volume+0xca>
 8009912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009916:	f003 0304 	and.w	r3, r3, #4
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800991e:	230a      	movs	r3, #10
 8009920:	e1db      	b.n	8009cda <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009926:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009928:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800992a:	f7ff ff3f 	bl	80097ac <check_fs>
 800992e:	4603      	mov	r3, r0
 8009930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009938:	2b02      	cmp	r3, #2
 800993a:	d149      	bne.n	80099d0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800993c:	2300      	movs	r3, #0
 800993e:	643b      	str	r3, [r7, #64]	; 0x40
 8009940:	e01e      	b.n	8009980 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009944:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800994a:	011b      	lsls	r3, r3, #4
 800994c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009950:	4413      	add	r3, r2
 8009952:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	3304      	adds	r3, #4
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d006      	beq.n	800996c <find_volume+0x114>
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	3308      	adds	r3, #8
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe fd72 	bl	800844c <ld_dword>
 8009968:	4602      	mov	r2, r0
 800996a:	e000      	b.n	800996e <find_volume+0x116>
 800996c:	2200      	movs	r2, #0
 800996e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	3358      	adds	r3, #88	; 0x58
 8009974:	443b      	add	r3, r7
 8009976:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800997a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800997c:	3301      	adds	r3, #1
 800997e:	643b      	str	r3, [r7, #64]	; 0x40
 8009980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009982:	2b03      	cmp	r3, #3
 8009984:	d9dd      	bls.n	8009942 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009986:	2300      	movs	r3, #0
 8009988:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800998a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <find_volume+0x13e>
 8009990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009992:	3b01      	subs	r3, #1
 8009994:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	3358      	adds	r3, #88	; 0x58
 800999c:	443b      	add	r3, r7
 800999e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80099a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80099a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d005      	beq.n	80099b6 <find_volume+0x15e>
 80099aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80099ae:	f7ff fefd 	bl	80097ac <check_fs>
 80099b2:	4603      	mov	r3, r0
 80099b4:	e000      	b.n	80099b8 <find_volume+0x160>
 80099b6:	2303      	movs	r3, #3
 80099b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80099bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d905      	bls.n	80099d0 <find_volume+0x178>
 80099c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099c6:	3301      	adds	r3, #1
 80099c8:	643b      	str	r3, [r7, #64]	; 0x40
 80099ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d9e2      	bls.n	8009996 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80099d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	d101      	bne.n	80099dc <find_volume+0x184>
 80099d8:	2301      	movs	r3, #1
 80099da:	e17e      	b.n	8009cda <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80099dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d901      	bls.n	80099e8 <find_volume+0x190>
 80099e4:	230d      	movs	r3, #13
 80099e6:	e178      	b.n	8009cda <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	3330      	adds	r3, #48	; 0x30
 80099ec:	330b      	adds	r3, #11
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fd14 	bl	800841c <ld_word>
 80099f4:	4603      	mov	r3, r0
 80099f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099fa:	d001      	beq.n	8009a00 <find_volume+0x1a8>
 80099fc:	230d      	movs	r3, #13
 80099fe:	e16c      	b.n	8009cda <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a02:	3330      	adds	r3, #48	; 0x30
 8009a04:	3316      	adds	r3, #22
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fd08 	bl	800841c <ld_word>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d106      	bne.n	8009a24 <find_volume+0x1cc>
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	3330      	adds	r3, #48	; 0x30
 8009a1a:	3324      	adds	r3, #36	; 0x24
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe fd15 	bl	800844c <ld_dword>
 8009a22:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a28:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a36:	789b      	ldrb	r3, [r3, #2]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d005      	beq.n	8009a48 <find_volume+0x1f0>
 8009a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3e:	789b      	ldrb	r3, [r3, #2]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d001      	beq.n	8009a48 <find_volume+0x1f0>
 8009a44:	230d      	movs	r3, #13
 8009a46:	e148      	b.n	8009cda <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	789b      	ldrb	r3, [r3, #2]
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a50:	fb02 f303 	mul.w	r3, r2, r3
 8009a54:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	895b      	ldrh	r3, [r3, #10]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d008      	beq.n	8009a7c <find_volume+0x224>
 8009a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6c:	895b      	ldrh	r3, [r3, #10]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	895b      	ldrh	r3, [r3, #10]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	4013      	ands	r3, r2
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <find_volume+0x228>
 8009a7c:	230d      	movs	r3, #13
 8009a7e:	e12c      	b.n	8009cda <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	3330      	adds	r3, #48	; 0x30
 8009a84:	3311      	adds	r3, #17
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fe fcc8 	bl	800841c <ld_word>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	461a      	mov	r2, r3
 8009a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	891b      	ldrh	r3, [r3, #8]
 8009a98:	f003 030f 	and.w	r3, r3, #15
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <find_volume+0x24e>
 8009aa2:	230d      	movs	r3, #13
 8009aa4:	e119      	b.n	8009cda <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	3330      	adds	r3, #48	; 0x30
 8009aaa:	3313      	adds	r3, #19
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fe fcb5 	bl	800841c <ld_word>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <find_volume+0x272>
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	3330      	adds	r3, #48	; 0x30
 8009ac0:	3320      	adds	r3, #32
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe fcc2 	bl	800844c <ld_dword>
 8009ac8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009acc:	3330      	adds	r3, #48	; 0x30
 8009ace:	330e      	adds	r3, #14
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe fca3 	bl	800841c <ld_word>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009ada:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d101      	bne.n	8009ae4 <find_volume+0x28c>
 8009ae0:	230d      	movs	r3, #13
 8009ae2:	e0fa      	b.n	8009cda <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009ae4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ae8:	4413      	add	r3, r2
 8009aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aec:	8912      	ldrh	r2, [r2, #8]
 8009aee:	0912      	lsrs	r2, r2, #4
 8009af0:	b292      	uxth	r2, r2
 8009af2:	4413      	add	r3, r2
 8009af4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009af6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d204      	bcs.n	8009b08 <find_volume+0x2b0>
 8009afe:	230d      	movs	r3, #13
 8009b00:	e0eb      	b.n	8009cda <find_volume+0x482>
 8009b02:	bf00      	nop
 8009b04:	20013744 	.word	0x20013744
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0c:	1ad3      	subs	r3, r2, r3
 8009b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b10:	8952      	ldrh	r2, [r2, #10]
 8009b12:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <find_volume+0x2ca>
 8009b1e:	230d      	movs	r3, #13
 8009b20:	e0db      	b.n	8009cda <find_volume+0x482>
		fmt = FS_FAT32;
 8009b22:	2303      	movs	r3, #3
 8009b24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d802      	bhi.n	8009b38 <find_volume+0x2e0>
 8009b32:	2302      	movs	r3, #2
 8009b34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d802      	bhi.n	8009b48 <find_volume+0x2f0>
 8009b42:	2301      	movs	r3, #1
 8009b44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4a:	1c9a      	adds	r2, r3, #2
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b54:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009b56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b5a:	441a      	add	r2, r3
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009b60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b64:	441a      	add	r2, r3
 8009b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b68:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009b6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b6e:	2b03      	cmp	r3, #3
 8009b70:	d11e      	bne.n	8009bb0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b74:	3330      	adds	r3, #48	; 0x30
 8009b76:	332a      	adds	r3, #42	; 0x2a
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe fc4f 	bl	800841c <ld_word>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <find_volume+0x330>
 8009b84:	230d      	movs	r3, #13
 8009b86:	e0a8      	b.n	8009cda <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	891b      	ldrh	r3, [r3, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <find_volume+0x33c>
 8009b90:	230d      	movs	r3, #13
 8009b92:	e0a2      	b.n	8009cda <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	3330      	adds	r3, #48	; 0x30
 8009b98:	332c      	adds	r3, #44	; 0x2c
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fc56 	bl	800844c <ld_dword>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	647b      	str	r3, [r7, #68]	; 0x44
 8009bae:	e01f      	b.n	8009bf0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb2:	891b      	ldrh	r3, [r3, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <find_volume+0x364>
 8009bb8:	230d      	movs	r3, #13
 8009bba:	e08e      	b.n	8009cda <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbe:	6a1a      	ldr	r2, [r3, #32]
 8009bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bc2:	441a      	add	r2, r3
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d103      	bne.n	8009bd8 <find_volume+0x380>
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	e00a      	b.n	8009bee <find_volume+0x396>
 8009bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bda:	695a      	ldr	r2, [r3, #20]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	4413      	add	r3, r2
 8009be2:	085a      	lsrs	r2, r3, #1
 8009be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009bee:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf2:	699a      	ldr	r2, [r3, #24]
 8009bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bf6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009bfa:	0a5b      	lsrs	r3, r3, #9
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d201      	bcs.n	8009c04 <find_volume+0x3ac>
 8009c00:	230d      	movs	r3, #13
 8009c02:	e06a      	b.n	8009cda <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c06:	f04f 32ff 	mov.w	r2, #4294967295
 8009c0a:	611a      	str	r2, [r3, #16]
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0e:	691a      	ldr	r2, [r3, #16]
 8009c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c12:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c16:	2280      	movs	r2, #128	; 0x80
 8009c18:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d149      	bne.n	8009cb6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c24:	3330      	adds	r3, #48	; 0x30
 8009c26:	3330      	adds	r3, #48	; 0x30
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fe fbf7 	bl	800841c <ld_word>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d140      	bne.n	8009cb6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c36:	3301      	adds	r3, #1
 8009c38:	4619      	mov	r1, r3
 8009c3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c3c:	f7fe fe9e 	bl	800897c <move_window>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d137      	bne.n	8009cb6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	2200      	movs	r2, #0
 8009c4a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4e:	3330      	adds	r3, #48	; 0x30
 8009c50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe fbe1 	bl	800841c <ld_word>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d127      	bne.n	8009cb6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	3330      	adds	r3, #48	; 0x30
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe fbee 	bl	800844c <ld_dword>
 8009c70:	4603      	mov	r3, r0
 8009c72:	4a1c      	ldr	r2, [pc, #112]	; (8009ce4 <find_volume+0x48c>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d11e      	bne.n	8009cb6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7a:	3330      	adds	r3, #48	; 0x30
 8009c7c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fe fbe3 	bl	800844c <ld_dword>
 8009c86:	4603      	mov	r3, r0
 8009c88:	4a17      	ldr	r2, [pc, #92]	; (8009ce8 <find_volume+0x490>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d113      	bne.n	8009cb6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c90:	3330      	adds	r3, #48	; 0x30
 8009c92:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe fbd8 	bl	800844c <ld_dword>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca4:	3330      	adds	r3, #48	; 0x30
 8009ca6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fbce 	bl	800844c <ld_dword>
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009cbc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009cbe:	4b0b      	ldr	r3, [pc, #44]	; (8009cec <find_volume+0x494>)
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	4b09      	ldr	r3, [pc, #36]	; (8009cec <find_volume+0x494>)
 8009cc8:	801a      	strh	r2, [r3, #0]
 8009cca:	4b08      	ldr	r3, [pc, #32]	; (8009cec <find_volume+0x494>)
 8009ccc:	881a      	ldrh	r2, [r3, #0]
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009cd2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009cd4:	f7fe fdea 	bl	80088ac <clear_lock>
#endif
	return FR_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3758      	adds	r7, #88	; 0x58
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	41615252 	.word	0x41615252
 8009ce8:	61417272 	.word	0x61417272
 8009cec:	20013748 	.word	0x20013748

08009cf0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009cfa:	2309      	movs	r3, #9
 8009cfc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d01c      	beq.n	8009d3e <validate+0x4e>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d018      	beq.n	8009d3e <validate+0x4e>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d013      	beq.n	8009d3e <validate+0x4e>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	889a      	ldrh	r2, [r3, #4]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	88db      	ldrh	r3, [r3, #6]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d10c      	bne.n	8009d3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fad8 	bl	80082e0 <disk_status>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <validate+0x4e>
			res = FR_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d102      	bne.n	8009d4a <validate+0x5a>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	e000      	b.n	8009d4c <validate+0x5c>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	6013      	str	r3, [r2, #0]
	return res;
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b088      	sub	sp, #32
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	4613      	mov	r3, r2
 8009d68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009d6e:	f107 0310 	add.w	r3, r7, #16
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7ff fcd5 	bl	8009722 <get_ldnumber>
 8009d78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	da01      	bge.n	8009d84 <f_mount+0x28>
 8009d80:	230b      	movs	r3, #11
 8009d82:	e02b      	b.n	8009ddc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009d84:	4a17      	ldr	r2, [pc, #92]	; (8009de4 <f_mount+0x88>)
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009d8e:	69bb      	ldr	r3, [r7, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d005      	beq.n	8009da0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009d94:	69b8      	ldr	r0, [r7, #24]
 8009d96:	f7fe fd89 	bl	80088ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d002      	beq.n	8009dac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	490d      	ldr	r1, [pc, #52]	; (8009de4 <f_mount+0x88>)
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <f_mount+0x66>
 8009dbc:	79fb      	ldrb	r3, [r7, #7]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d001      	beq.n	8009dc6 <f_mount+0x6a>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	e00a      	b.n	8009ddc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009dc6:	f107 010c 	add.w	r1, r7, #12
 8009dca:	f107 0308 	add.w	r3, r7, #8
 8009dce:	2200      	movs	r2, #0
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7ff fd41 	bl	8009858 <find_volume>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3720      	adds	r7, #32
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	20013744 	.word	0x20013744

08009de8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b098      	sub	sp, #96	; 0x60
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	4613      	mov	r3, r2
 8009df4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <f_open+0x18>
 8009dfc:	2309      	movs	r3, #9
 8009dfe:	e1ad      	b.n	800a15c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009e08:	79fa      	ldrb	r2, [r7, #7]
 8009e0a:	f107 0110 	add.w	r1, r7, #16
 8009e0e:	f107 0308 	add.w	r3, r7, #8
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7ff fd20 	bl	8009858 <find_volume>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009e1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f040 8191 	bne.w	800a14a <f_open+0x362>
		dj.obj.fs = fs;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	f107 0314 	add.w	r3, r7, #20
 8009e32:	4611      	mov	r1, r2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7ff fc03 	bl	8009640 <follow_path>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009e40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d11a      	bne.n	8009e7e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009e48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e4c:	b25b      	sxtb	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	da03      	bge.n	8009e5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009e52:	2306      	movs	r3, #6
 8009e54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009e58:	e011      	b.n	8009e7e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e5a:	79fb      	ldrb	r3, [r7, #7]
 8009e5c:	f023 0301 	bic.w	r3, r3, #1
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	bf14      	ite	ne
 8009e64:	2301      	movne	r3, #1
 8009e66:	2300      	moveq	r3, #0
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	f107 0314 	add.w	r3, r7, #20
 8009e70:	4611      	mov	r1, r2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fe fbd2 	bl	800861c <chk_lock>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009e7e:	79fb      	ldrb	r3, [r7, #7]
 8009e80:	f003 031c 	and.w	r3, r3, #28
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d07f      	beq.n	8009f88 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d017      	beq.n	8009ec0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009e90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e94:	2b04      	cmp	r3, #4
 8009e96:	d10e      	bne.n	8009eb6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009e98:	f7fe fc1c 	bl	80086d4 <enq_lock>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d006      	beq.n	8009eb0 <f_open+0xc8>
 8009ea2:	f107 0314 	add.w	r3, r7, #20
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff fb03 	bl	80094b2 <dir_register>
 8009eac:	4603      	mov	r3, r0
 8009eae:	e000      	b.n	8009eb2 <f_open+0xca>
 8009eb0:	2312      	movs	r3, #18
 8009eb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009eb6:	79fb      	ldrb	r3, [r7, #7]
 8009eb8:	f043 0308 	orr.w	r3, r3, #8
 8009ebc:	71fb      	strb	r3, [r7, #7]
 8009ebe:	e010      	b.n	8009ee2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009ec0:	7ebb      	ldrb	r3, [r7, #26]
 8009ec2:	f003 0311 	and.w	r3, r3, #17
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <f_open+0xea>
					res = FR_DENIED;
 8009eca:	2307      	movs	r3, #7
 8009ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ed0:	e007      	b.n	8009ee2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009ed2:	79fb      	ldrb	r3, [r7, #7]
 8009ed4:	f003 0304 	and.w	r3, r3, #4
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <f_open+0xfa>
 8009edc:	2308      	movs	r3, #8
 8009ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d168      	bne.n	8009fbc <f_open+0x1d4>
 8009eea:	79fb      	ldrb	r3, [r7, #7]
 8009eec:	f003 0308 	and.w	r3, r3, #8
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d063      	beq.n	8009fbc <f_open+0x1d4>
				dw = GET_FATTIME();
 8009ef4:	f7fd fcb6 	bl	8007864 <get_fattime>
 8009ef8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efc:	330e      	adds	r3, #14
 8009efe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe fae1 	bl	80084c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f08:	3316      	adds	r3, #22
 8009f0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fe fadb 	bl	80084c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f14:	330b      	adds	r3, #11
 8009f16:	2220      	movs	r2, #32
 8009f18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f1e:	4611      	mov	r1, r2
 8009f20:	4618      	mov	r0, r3
 8009f22:	f7ff fa32 	bl	800938a <ld_clust>
 8009f26:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff fa4a 	bl	80093c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f36:	331c      	adds	r3, #28
 8009f38:	2100      	movs	r1, #0
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fe fac4 	bl	80084c8 <st_dword>
					fs->wflag = 1;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2201      	movs	r2, #1
 8009f44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009f46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d037      	beq.n	8009fbc <f_open+0x1d4>
						dw = fs->winsect;
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009f52:	f107 0314 	add.w	r3, r7, #20
 8009f56:	2200      	movs	r2, #0
 8009f58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7fe ff5d 	bl	8008e1a <remove_chain>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009f66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d126      	bne.n	8009fbc <f_open+0x1d4>
							res = move_window(fs, dw);
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fd02 	bl	800897c <move_window>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f82:	3a01      	subs	r2, #1
 8009f84:	60da      	str	r2, [r3, #12]
 8009f86:	e019      	b.n	8009fbc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d115      	bne.n	8009fbc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009f90:	7ebb      	ldrb	r3, [r7, #26]
 8009f92:	f003 0310 	and.w	r3, r3, #16
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009f9a:	2304      	movs	r3, #4
 8009f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009fa0:	e00c      	b.n	8009fbc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009fa2:	79fb      	ldrb	r3, [r7, #7]
 8009fa4:	f003 0302 	and.w	r3, r3, #2
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d007      	beq.n	8009fbc <f_open+0x1d4>
 8009fac:	7ebb      	ldrb	r3, [r7, #26]
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d002      	beq.n	8009fbc <f_open+0x1d4>
						res = FR_DENIED;
 8009fb6:	2307      	movs	r3, #7
 8009fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d128      	bne.n	800a016 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	f003 0308 	and.w	r3, r3, #8
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009fce:	79fb      	ldrb	r3, [r7, #7]
 8009fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fd4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009fe4:	79fb      	ldrb	r3, [r7, #7]
 8009fe6:	f023 0301 	bic.w	r3, r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	bf14      	ite	ne
 8009fee:	2301      	movne	r3, #1
 8009ff0:	2300      	moveq	r3, #0
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	f107 0314 	add.w	r3, r7, #20
 8009ffa:	4611      	mov	r1, r2
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fe fb8b 	bl	8008718 <inc_lock>
 800a002:	4602      	mov	r2, r0
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d102      	bne.n	800a016 <f_open+0x22e>
 800a010:	2302      	movs	r3, #2
 800a012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f040 8095 	bne.w	800a14a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a024:	4611      	mov	r1, r2
 800a026:	4618      	mov	r0, r3
 800a028:	f7ff f9af 	bl	800938a <ld_clust>
 800a02c:	4602      	mov	r2, r0
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a034:	331c      	adds	r3, #28
 800a036:	4618      	mov	r0, r3
 800a038:	f7fe fa08 	bl	800844c <ld_dword>
 800a03c:	4602      	mov	r2, r0
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	88da      	ldrh	r2, [r3, #6]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	79fa      	ldrb	r2, [r7, #7]
 800a05a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3330      	adds	r3, #48	; 0x30
 800a072:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a076:	2100      	movs	r1, #0
 800a078:	4618      	mov	r0, r3
 800a07a:	f7fe fa72 	bl	8008562 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a07e:	79fb      	ldrb	r3, [r7, #7]
 800a080:	f003 0320 	and.w	r3, r3, #32
 800a084:	2b00      	cmp	r3, #0
 800a086:	d060      	beq.n	800a14a <f_open+0x362>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d05c      	beq.n	800a14a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	895b      	ldrh	r3, [r3, #10]
 800a09c:	025b      	lsls	r3, r3, #9
 800a09e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a0ac:	e016      	b.n	800a0dc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe fd1d 	bl	8008af2 <get_fat>
 800a0b8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a0ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d802      	bhi.n	800a0c6 <f_open+0x2de>
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a0c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0cc:	d102      	bne.n	800a0d4 <f_open+0x2ec>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a0d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	657b      	str	r3, [r7, #84]	; 0x54
 800a0dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d103      	bne.n	800a0ec <f_open+0x304>
 800a0e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d8e0      	bhi.n	800a0ae <f_open+0x2c6>
				}
				fp->clust = clst;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0f0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a0f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d127      	bne.n	800a14a <f_open+0x362>
 800a0fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a100:	2b00      	cmp	r3, #0
 800a102:	d022      	beq.n	800a14a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe fcd3 	bl	8008ab4 <clust2sect>
 800a10e:	6478      	str	r0, [r7, #68]	; 0x44
 800a110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a112:	2b00      	cmp	r3, #0
 800a114:	d103      	bne.n	800a11e <f_open+0x336>
						res = FR_INT_ERR;
 800a116:	2302      	movs	r3, #2
 800a118:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a11c:	e015      	b.n	800a14a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a11e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a120:	0a5a      	lsrs	r2, r3, #9
 800a122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a124:	441a      	add	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	7858      	ldrb	r0, [r3, #1]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6a1a      	ldr	r2, [r3, #32]
 800a138:	2301      	movs	r3, #1
 800a13a:	f7fe f911 	bl	8008360 <disk_read>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <f_open+0x362>
 800a144:	2301      	movs	r3, #1
 800a146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a14a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <f_open+0x370>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3760      	adds	r7, #96	; 0x60
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08e      	sub	sp, #56	; 0x38
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2200      	movs	r2, #0
 800a17a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f107 0214 	add.w	r2, r7, #20
 800a182:	4611      	mov	r1, r2
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff fdb3 	bl	8009cf0 <validate>
 800a18a:	4603      	mov	r3, r0
 800a18c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a190:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a194:	2b00      	cmp	r3, #0
 800a196:	d107      	bne.n	800a1a8 <f_read+0x44>
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	7d5b      	ldrb	r3, [r3, #21]
 800a19c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a1a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <f_read+0x4a>
 800a1a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1ac:	e115      	b.n	800a3da <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	7d1b      	ldrb	r3, [r3, #20]
 800a1b2:	f003 0301 	and.w	r3, r3, #1
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <f_read+0x5a>
 800a1ba:	2307      	movs	r3, #7
 800a1bc:	e10d      	b.n	800a3da <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	68da      	ldr	r2, [r3, #12]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	699b      	ldr	r3, [r3, #24]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	f240 80fe 	bls.w	800a3d0 <f_read+0x26c>
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a1d8:	e0fa      	b.n	800a3d0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f040 80c6 	bne.w	800a374 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	0a5b      	lsrs	r3, r3, #9
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	8952      	ldrh	r2, [r2, #10]
 800a1f2:	3a01      	subs	r2, #1
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d12f      	bne.n	800a25e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d103      	bne.n	800a20e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	633b      	str	r3, [r7, #48]	; 0x30
 800a20c:	e013      	b.n	800a236 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	2b00      	cmp	r3, #0
 800a214:	d007      	beq.n	800a226 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	4619      	mov	r1, r3
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f7fe fef9 	bl	8009014 <clmt_clust>
 800a222:	6338      	str	r0, [r7, #48]	; 0x30
 800a224:	e007      	b.n	800a236 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	4619      	mov	r1, r3
 800a22e:	4610      	mov	r0, r2
 800a230:	f7fe fc5f 	bl	8008af2 <get_fat>
 800a234:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d804      	bhi.n	800a246 <f_read+0xe2>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2202      	movs	r2, #2
 800a240:	755a      	strb	r2, [r3, #21]
 800a242:	2302      	movs	r3, #2
 800a244:	e0c9      	b.n	800a3da <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24c:	d104      	bne.n	800a258 <f_read+0xf4>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2201      	movs	r2, #1
 800a252:	755a      	strb	r2, [r3, #21]
 800a254:	2301      	movs	r3, #1
 800a256:	e0c0      	b.n	800a3da <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a25c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a25e:	697a      	ldr	r2, [r7, #20]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	4619      	mov	r1, r3
 800a266:	4610      	mov	r0, r2
 800a268:	f7fe fc24 	bl	8008ab4 <clust2sect>
 800a26c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d104      	bne.n	800a27e <f_read+0x11a>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2202      	movs	r2, #2
 800a278:	755a      	strb	r2, [r3, #21]
 800a27a:	2302      	movs	r3, #2
 800a27c:	e0ad      	b.n	800a3da <f_read+0x276>
			sect += csect;
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	4413      	add	r3, r2
 800a284:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	0a5b      	lsrs	r3, r3, #9
 800a28a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d039      	beq.n	800a306 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a292:	69fa      	ldr	r2, [r7, #28]
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	4413      	add	r3, r2
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	8952      	ldrh	r2, [r2, #10]
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d905      	bls.n	800a2ac <f_read+0x148>
					cc = fs->csize - csect;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	895b      	ldrh	r3, [r3, #10]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	7858      	ldrb	r0, [r3, #1]
 800a2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2b6:	f7fe f853 	bl	8008360 <disk_read>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d004      	beq.n	800a2ca <f_read+0x166>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	755a      	strb	r2, [r3, #21]
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e087      	b.n	800a3da <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	7d1b      	ldrb	r3, [r3, #20]
 800a2ce:	b25b      	sxtb	r3, r3
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	da14      	bge.n	800a2fe <f_read+0x19a>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6a1a      	ldr	r2, [r3, #32]
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d90d      	bls.n	800a2fe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6a1a      	ldr	r2, [r3, #32]
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	025b      	lsls	r3, r3, #9
 800a2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ee:	18d0      	adds	r0, r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3330      	adds	r3, #48	; 0x30
 800a2f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	f7fe f911 	bl	8008520 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	025b      	lsls	r3, r3, #9
 800a302:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a304:	e050      	b.n	800a3a8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6a1b      	ldr	r3, [r3, #32]
 800a30a:	69ba      	ldr	r2, [r7, #24]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d02e      	beq.n	800a36e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	7d1b      	ldrb	r3, [r3, #20]
 800a314:	b25b      	sxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	da18      	bge.n	800a34c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	7858      	ldrb	r0, [r3, #1]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6a1a      	ldr	r2, [r3, #32]
 800a328:	2301      	movs	r3, #1
 800a32a:	f7fe f839 	bl	80083a0 <disk_write>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <f_read+0x1da>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2201      	movs	r2, #1
 800a338:	755a      	strb	r2, [r3, #21]
 800a33a:	2301      	movs	r3, #1
 800a33c:	e04d      	b.n	800a3da <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	7d1b      	ldrb	r3, [r3, #20]
 800a342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a346:	b2da      	uxtb	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	7858      	ldrb	r0, [r3, #1]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a356:	2301      	movs	r3, #1
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	f7fe f801 	bl	8008360 <disk_read>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <f_read+0x20a>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	755a      	strb	r2, [r3, #21]
 800a36a:	2301      	movs	r3, #1
 800a36c:	e035      	b.n	800a3da <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a380:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	429a      	cmp	r2, r3
 800a388:	d901      	bls.n	800a38e <f_read+0x22a>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39c:	4413      	add	r3, r2
 800a39e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3a4:	f7fe f8bc 	bl	8008520 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ac:	4413      	add	r3, r2
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	699a      	ldr	r2, [r3, #24]
 800a3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b6:	441a      	add	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	619a      	str	r2, [r3, #24]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c2:	441a      	add	r2, r3
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f47f af01 	bne.w	800a1da <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3738      	adds	r7, #56	; 0x38
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b086      	sub	sp, #24
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f107 0208 	add.w	r2, r7, #8
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff fc7c 	bl	8009cf0 <validate>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d168      	bne.n	800a4d4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	7d1b      	ldrb	r3, [r3, #20]
 800a406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d062      	beq.n	800a4d4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	7d1b      	ldrb	r3, [r3, #20]
 800a412:	b25b      	sxtb	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	da15      	bge.n	800a444 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	7858      	ldrb	r0, [r3, #1]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a1a      	ldr	r2, [r3, #32]
 800a426:	2301      	movs	r3, #1
 800a428:	f7fd ffba 	bl	80083a0 <disk_write>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <f_sync+0x54>
 800a432:	2301      	movs	r3, #1
 800a434:	e04f      	b.n	800a4d6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	7d1b      	ldrb	r3, [r3, #20]
 800a43a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a444:	f7fd fa0e 	bl	8007864 <get_fattime>
 800a448:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a450:	4619      	mov	r1, r3
 800a452:	4610      	mov	r0, r2
 800a454:	f7fe fa92 	bl	800897c <move_window>
 800a458:	4603      	mov	r3, r0
 800a45a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a45c:	7dfb      	ldrb	r3, [r7, #23]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d138      	bne.n	800a4d4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a466:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	330b      	adds	r3, #11
 800a46c:	781a      	ldrb	r2, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	330b      	adds	r3, #11
 800a472:	f042 0220 	orr.w	r2, r2, #32
 800a476:	b2d2      	uxtb	r2, r2
 800a478:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6818      	ldr	r0, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	461a      	mov	r2, r3
 800a484:	68f9      	ldr	r1, [r7, #12]
 800a486:	f7fe ff9f 	bl	80093c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f103 021c 	add.w	r2, r3, #28
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	4619      	mov	r1, r3
 800a496:	4610      	mov	r0, r2
 800a498:	f7fe f816 	bl	80084c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	3316      	adds	r3, #22
 800a4a0:	6939      	ldr	r1, [r7, #16]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fe f810 	bl	80084c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	3312      	adds	r3, #18
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fd ffef 	bl	8008492 <st_word>
					fs->wflag = 1;
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fa8b 	bl	80089d8 <sync_fs>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3718      	adds	r7, #24
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff ff7b 	bl	800a3e2 <f_sync>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a4f0:	7bfb      	ldrb	r3, [r7, #15]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d118      	bne.n	800a528 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f107 0208 	add.w	r2, r7, #8
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff fbf6 	bl	8009cf0 <validate>
 800a504:	4603      	mov	r3, r0
 800a506:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a508:	7bfb      	ldrb	r3, [r7, #15]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10c      	bne.n	800a528 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe f98e 	bl	8008834 <dec_lock>
 800a518:	4603      	mov	r3, r0
 800a51a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d102      	bne.n	800a528 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a528:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
	...

0800a534 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	4613      	mov	r3, r2
 800a540:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a542:	2301      	movs	r3, #1
 800a544:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a546:	2300      	movs	r3, #0
 800a548:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a54a:	4b1f      	ldr	r3, [pc, #124]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a54c:	7a5b      	ldrb	r3, [r3, #9]
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b00      	cmp	r3, #0
 800a552:	d131      	bne.n	800a5b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a554:	4b1c      	ldr	r3, [pc, #112]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a556:	7a5b      	ldrb	r3, [r3, #9]
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	461a      	mov	r2, r3
 800a55c:	4b1a      	ldr	r3, [pc, #104]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a55e:	2100      	movs	r1, #0
 800a560:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a562:	4b19      	ldr	r3, [pc, #100]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a564:	7a5b      	ldrb	r3, [r3, #9]
 800a566:	b2db      	uxtb	r3, r3
 800a568:	4a17      	ldr	r2, [pc, #92]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a572:	4b15      	ldr	r3, [pc, #84]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a574:	7a5b      	ldrb	r3, [r3, #9]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	461a      	mov	r2, r3
 800a57a:	4b13      	ldr	r3, [pc, #76]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a57c:	4413      	add	r3, r2
 800a57e:	79fa      	ldrb	r2, [r7, #7]
 800a580:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a582:	4b11      	ldr	r3, [pc, #68]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a584:	7a5b      	ldrb	r3, [r3, #9]
 800a586:	b2db      	uxtb	r3, r3
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	b2d1      	uxtb	r1, r2
 800a58c:	4a0e      	ldr	r2, [pc, #56]	; (800a5c8 <FATFS_LinkDriverEx+0x94>)
 800a58e:	7251      	strb	r1, [r2, #9]
 800a590:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a592:	7dbb      	ldrb	r3, [r7, #22]
 800a594:	3330      	adds	r3, #48	; 0x30
 800a596:	b2da      	uxtb	r2, r3
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	223a      	movs	r2, #58	; 0x3a
 800a5a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3302      	adds	r3, #2
 800a5a8:	222f      	movs	r2, #47	; 0x2f
 800a5aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	3303      	adds	r3, #3
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	371c      	adds	r7, #28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	2001376c 	.word	0x2001376c

0800a5cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff ffaa 	bl	800a534 <FATFS_LinkDriverEx>
 800a5e0:	4603      	mov	r3, r0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <__errno>:
 800a5ec:	4b01      	ldr	r3, [pc, #4]	; (800a5f4 <__errno+0x8>)
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	20000024 	.word	0x20000024

0800a5f8 <__libc_init_array>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	4d0d      	ldr	r5, [pc, #52]	; (800a630 <__libc_init_array+0x38>)
 800a5fc:	4c0d      	ldr	r4, [pc, #52]	; (800a634 <__libc_init_array+0x3c>)
 800a5fe:	1b64      	subs	r4, r4, r5
 800a600:	10a4      	asrs	r4, r4, #2
 800a602:	2600      	movs	r6, #0
 800a604:	42a6      	cmp	r6, r4
 800a606:	d109      	bne.n	800a61c <__libc_init_array+0x24>
 800a608:	4d0b      	ldr	r5, [pc, #44]	; (800a638 <__libc_init_array+0x40>)
 800a60a:	4c0c      	ldr	r4, [pc, #48]	; (800a63c <__libc_init_array+0x44>)
 800a60c:	f001 ffd6 	bl	800c5bc <_init>
 800a610:	1b64      	subs	r4, r4, r5
 800a612:	10a4      	asrs	r4, r4, #2
 800a614:	2600      	movs	r6, #0
 800a616:	42a6      	cmp	r6, r4
 800a618:	d105      	bne.n	800a626 <__libc_init_array+0x2e>
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a620:	4798      	blx	r3
 800a622:	3601      	adds	r6, #1
 800a624:	e7ee      	b.n	800a604 <__libc_init_array+0xc>
 800a626:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62a:	4798      	blx	r3
 800a62c:	3601      	adds	r6, #1
 800a62e:	e7f2      	b.n	800a616 <__libc_init_array+0x1e>
 800a630:	08016370 	.word	0x08016370
 800a634:	08016370 	.word	0x08016370
 800a638:	08016370 	.word	0x08016370
 800a63c:	08016374 	.word	0x08016374

0800a640 <memcpy>:
 800a640:	440a      	add	r2, r1
 800a642:	4291      	cmp	r1, r2
 800a644:	f100 33ff 	add.w	r3, r0, #4294967295
 800a648:	d100      	bne.n	800a64c <memcpy+0xc>
 800a64a:	4770      	bx	lr
 800a64c:	b510      	push	{r4, lr}
 800a64e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a652:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a656:	4291      	cmp	r1, r2
 800a658:	d1f9      	bne.n	800a64e <memcpy+0xe>
 800a65a:	bd10      	pop	{r4, pc}

0800a65c <memset>:
 800a65c:	4402      	add	r2, r0
 800a65e:	4603      	mov	r3, r0
 800a660:	4293      	cmp	r3, r2
 800a662:	d100      	bne.n	800a666 <memset+0xa>
 800a664:	4770      	bx	lr
 800a666:	f803 1b01 	strb.w	r1, [r3], #1
 800a66a:	e7f9      	b.n	800a660 <memset+0x4>

0800a66c <iprintf>:
 800a66c:	b40f      	push	{r0, r1, r2, r3}
 800a66e:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <iprintf+0x2c>)
 800a670:	b513      	push	{r0, r1, r4, lr}
 800a672:	681c      	ldr	r4, [r3, #0]
 800a674:	b124      	cbz	r4, 800a680 <iprintf+0x14>
 800a676:	69a3      	ldr	r3, [r4, #24]
 800a678:	b913      	cbnz	r3, 800a680 <iprintf+0x14>
 800a67a:	4620      	mov	r0, r4
 800a67c:	f000 fa74 	bl	800ab68 <__sinit>
 800a680:	ab05      	add	r3, sp, #20
 800a682:	9a04      	ldr	r2, [sp, #16]
 800a684:	68a1      	ldr	r1, [r4, #8]
 800a686:	9301      	str	r3, [sp, #4]
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 fc7d 	bl	800af88 <_vfiprintf_r>
 800a68e:	b002      	add	sp, #8
 800a690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a694:	b004      	add	sp, #16
 800a696:	4770      	bx	lr
 800a698:	20000024 	.word	0x20000024

0800a69c <putchar>:
 800a69c:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <putchar+0x28>)
 800a69e:	b513      	push	{r0, r1, r4, lr}
 800a6a0:	681c      	ldr	r4, [r3, #0]
 800a6a2:	4601      	mov	r1, r0
 800a6a4:	b134      	cbz	r4, 800a6b4 <putchar+0x18>
 800a6a6:	69a3      	ldr	r3, [r4, #24]
 800a6a8:	b923      	cbnz	r3, 800a6b4 <putchar+0x18>
 800a6aa:	9001      	str	r0, [sp, #4]
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f000 fa5b 	bl	800ab68 <__sinit>
 800a6b2:	9901      	ldr	r1, [sp, #4]
 800a6b4:	68a2      	ldr	r2, [r4, #8]
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	b002      	add	sp, #8
 800a6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6be:	f000 bf27 	b.w	800b510 <_putc_r>
 800a6c2:	bf00      	nop
 800a6c4:	20000024 	.word	0x20000024

0800a6c8 <_puts_r>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	460e      	mov	r6, r1
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	b118      	cbz	r0, 800a6d8 <_puts_r+0x10>
 800a6d0:	6983      	ldr	r3, [r0, #24]
 800a6d2:	b90b      	cbnz	r3, 800a6d8 <_puts_r+0x10>
 800a6d4:	f000 fa48 	bl	800ab68 <__sinit>
 800a6d8:	69ab      	ldr	r3, [r5, #24]
 800a6da:	68ac      	ldr	r4, [r5, #8]
 800a6dc:	b913      	cbnz	r3, 800a6e4 <_puts_r+0x1c>
 800a6de:	4628      	mov	r0, r5
 800a6e0:	f000 fa42 	bl	800ab68 <__sinit>
 800a6e4:	4b2c      	ldr	r3, [pc, #176]	; (800a798 <_puts_r+0xd0>)
 800a6e6:	429c      	cmp	r4, r3
 800a6e8:	d120      	bne.n	800a72c <_puts_r+0x64>
 800a6ea:	686c      	ldr	r4, [r5, #4]
 800a6ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6ee:	07db      	lsls	r3, r3, #31
 800a6f0:	d405      	bmi.n	800a6fe <_puts_r+0x36>
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	0598      	lsls	r0, r3, #22
 800a6f6:	d402      	bmi.n	800a6fe <_puts_r+0x36>
 800a6f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6fa:	f000 fad3 	bl	800aca4 <__retarget_lock_acquire_recursive>
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	0719      	lsls	r1, r3, #28
 800a702:	d51d      	bpl.n	800a740 <_puts_r+0x78>
 800a704:	6923      	ldr	r3, [r4, #16]
 800a706:	b1db      	cbz	r3, 800a740 <_puts_r+0x78>
 800a708:	3e01      	subs	r6, #1
 800a70a:	68a3      	ldr	r3, [r4, #8]
 800a70c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a710:	3b01      	subs	r3, #1
 800a712:	60a3      	str	r3, [r4, #8]
 800a714:	bb39      	cbnz	r1, 800a766 <_puts_r+0x9e>
 800a716:	2b00      	cmp	r3, #0
 800a718:	da38      	bge.n	800a78c <_puts_r+0xc4>
 800a71a:	4622      	mov	r2, r4
 800a71c:	210a      	movs	r1, #10
 800a71e:	4628      	mov	r0, r5
 800a720:	f000 f848 	bl	800a7b4 <__swbuf_r>
 800a724:	3001      	adds	r0, #1
 800a726:	d011      	beq.n	800a74c <_puts_r+0x84>
 800a728:	250a      	movs	r5, #10
 800a72a:	e011      	b.n	800a750 <_puts_r+0x88>
 800a72c:	4b1b      	ldr	r3, [pc, #108]	; (800a79c <_puts_r+0xd4>)
 800a72e:	429c      	cmp	r4, r3
 800a730:	d101      	bne.n	800a736 <_puts_r+0x6e>
 800a732:	68ac      	ldr	r4, [r5, #8]
 800a734:	e7da      	b.n	800a6ec <_puts_r+0x24>
 800a736:	4b1a      	ldr	r3, [pc, #104]	; (800a7a0 <_puts_r+0xd8>)
 800a738:	429c      	cmp	r4, r3
 800a73a:	bf08      	it	eq
 800a73c:	68ec      	ldreq	r4, [r5, #12]
 800a73e:	e7d5      	b.n	800a6ec <_puts_r+0x24>
 800a740:	4621      	mov	r1, r4
 800a742:	4628      	mov	r0, r5
 800a744:	f000 f888 	bl	800a858 <__swsetup_r>
 800a748:	2800      	cmp	r0, #0
 800a74a:	d0dd      	beq.n	800a708 <_puts_r+0x40>
 800a74c:	f04f 35ff 	mov.w	r5, #4294967295
 800a750:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a752:	07da      	lsls	r2, r3, #31
 800a754:	d405      	bmi.n	800a762 <_puts_r+0x9a>
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	059b      	lsls	r3, r3, #22
 800a75a:	d402      	bmi.n	800a762 <_puts_r+0x9a>
 800a75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a75e:	f000 faa2 	bl	800aca6 <__retarget_lock_release_recursive>
 800a762:	4628      	mov	r0, r5
 800a764:	bd70      	pop	{r4, r5, r6, pc}
 800a766:	2b00      	cmp	r3, #0
 800a768:	da04      	bge.n	800a774 <_puts_r+0xac>
 800a76a:	69a2      	ldr	r2, [r4, #24]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	dc06      	bgt.n	800a77e <_puts_r+0xb6>
 800a770:	290a      	cmp	r1, #10
 800a772:	d004      	beq.n	800a77e <_puts_r+0xb6>
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	6022      	str	r2, [r4, #0]
 800a77a:	7019      	strb	r1, [r3, #0]
 800a77c:	e7c5      	b.n	800a70a <_puts_r+0x42>
 800a77e:	4622      	mov	r2, r4
 800a780:	4628      	mov	r0, r5
 800a782:	f000 f817 	bl	800a7b4 <__swbuf_r>
 800a786:	3001      	adds	r0, #1
 800a788:	d1bf      	bne.n	800a70a <_puts_r+0x42>
 800a78a:	e7df      	b.n	800a74c <_puts_r+0x84>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	250a      	movs	r5, #10
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	6022      	str	r2, [r4, #0]
 800a794:	701d      	strb	r5, [r3, #0]
 800a796:	e7db      	b.n	800a750 <_puts_r+0x88>
 800a798:	080162c0 	.word	0x080162c0
 800a79c:	080162e0 	.word	0x080162e0
 800a7a0:	080162a0 	.word	0x080162a0

0800a7a4 <puts>:
 800a7a4:	4b02      	ldr	r3, [pc, #8]	; (800a7b0 <puts+0xc>)
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	f7ff bf8d 	b.w	800a6c8 <_puts_r>
 800a7ae:	bf00      	nop
 800a7b0:	20000024 	.word	0x20000024

0800a7b4 <__swbuf_r>:
 800a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b6:	460e      	mov	r6, r1
 800a7b8:	4614      	mov	r4, r2
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	b118      	cbz	r0, 800a7c6 <__swbuf_r+0x12>
 800a7be:	6983      	ldr	r3, [r0, #24]
 800a7c0:	b90b      	cbnz	r3, 800a7c6 <__swbuf_r+0x12>
 800a7c2:	f000 f9d1 	bl	800ab68 <__sinit>
 800a7c6:	4b21      	ldr	r3, [pc, #132]	; (800a84c <__swbuf_r+0x98>)
 800a7c8:	429c      	cmp	r4, r3
 800a7ca:	d12b      	bne.n	800a824 <__swbuf_r+0x70>
 800a7cc:	686c      	ldr	r4, [r5, #4]
 800a7ce:	69a3      	ldr	r3, [r4, #24]
 800a7d0:	60a3      	str	r3, [r4, #8]
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	071a      	lsls	r2, r3, #28
 800a7d6:	d52f      	bpl.n	800a838 <__swbuf_r+0x84>
 800a7d8:	6923      	ldr	r3, [r4, #16]
 800a7da:	b36b      	cbz	r3, 800a838 <__swbuf_r+0x84>
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	6820      	ldr	r0, [r4, #0]
 800a7e0:	1ac0      	subs	r0, r0, r3
 800a7e2:	6963      	ldr	r3, [r4, #20]
 800a7e4:	b2f6      	uxtb	r6, r6
 800a7e6:	4283      	cmp	r3, r0
 800a7e8:	4637      	mov	r7, r6
 800a7ea:	dc04      	bgt.n	800a7f6 <__swbuf_r+0x42>
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f000 f926 	bl	800aa40 <_fflush_r>
 800a7f4:	bb30      	cbnz	r0, 800a844 <__swbuf_r+0x90>
 800a7f6:	68a3      	ldr	r3, [r4, #8]
 800a7f8:	3b01      	subs	r3, #1
 800a7fa:	60a3      	str	r3, [r4, #8]
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	1c5a      	adds	r2, r3, #1
 800a800:	6022      	str	r2, [r4, #0]
 800a802:	701e      	strb	r6, [r3, #0]
 800a804:	6963      	ldr	r3, [r4, #20]
 800a806:	3001      	adds	r0, #1
 800a808:	4283      	cmp	r3, r0
 800a80a:	d004      	beq.n	800a816 <__swbuf_r+0x62>
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	07db      	lsls	r3, r3, #31
 800a810:	d506      	bpl.n	800a820 <__swbuf_r+0x6c>
 800a812:	2e0a      	cmp	r6, #10
 800a814:	d104      	bne.n	800a820 <__swbuf_r+0x6c>
 800a816:	4621      	mov	r1, r4
 800a818:	4628      	mov	r0, r5
 800a81a:	f000 f911 	bl	800aa40 <_fflush_r>
 800a81e:	b988      	cbnz	r0, 800a844 <__swbuf_r+0x90>
 800a820:	4638      	mov	r0, r7
 800a822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a824:	4b0a      	ldr	r3, [pc, #40]	; (800a850 <__swbuf_r+0x9c>)
 800a826:	429c      	cmp	r4, r3
 800a828:	d101      	bne.n	800a82e <__swbuf_r+0x7a>
 800a82a:	68ac      	ldr	r4, [r5, #8]
 800a82c:	e7cf      	b.n	800a7ce <__swbuf_r+0x1a>
 800a82e:	4b09      	ldr	r3, [pc, #36]	; (800a854 <__swbuf_r+0xa0>)
 800a830:	429c      	cmp	r4, r3
 800a832:	bf08      	it	eq
 800a834:	68ec      	ldreq	r4, [r5, #12]
 800a836:	e7ca      	b.n	800a7ce <__swbuf_r+0x1a>
 800a838:	4621      	mov	r1, r4
 800a83a:	4628      	mov	r0, r5
 800a83c:	f000 f80c 	bl	800a858 <__swsetup_r>
 800a840:	2800      	cmp	r0, #0
 800a842:	d0cb      	beq.n	800a7dc <__swbuf_r+0x28>
 800a844:	f04f 37ff 	mov.w	r7, #4294967295
 800a848:	e7ea      	b.n	800a820 <__swbuf_r+0x6c>
 800a84a:	bf00      	nop
 800a84c:	080162c0 	.word	0x080162c0
 800a850:	080162e0 	.word	0x080162e0
 800a854:	080162a0 	.word	0x080162a0

0800a858 <__swsetup_r>:
 800a858:	4b32      	ldr	r3, [pc, #200]	; (800a924 <__swsetup_r+0xcc>)
 800a85a:	b570      	push	{r4, r5, r6, lr}
 800a85c:	681d      	ldr	r5, [r3, #0]
 800a85e:	4606      	mov	r6, r0
 800a860:	460c      	mov	r4, r1
 800a862:	b125      	cbz	r5, 800a86e <__swsetup_r+0x16>
 800a864:	69ab      	ldr	r3, [r5, #24]
 800a866:	b913      	cbnz	r3, 800a86e <__swsetup_r+0x16>
 800a868:	4628      	mov	r0, r5
 800a86a:	f000 f97d 	bl	800ab68 <__sinit>
 800a86e:	4b2e      	ldr	r3, [pc, #184]	; (800a928 <__swsetup_r+0xd0>)
 800a870:	429c      	cmp	r4, r3
 800a872:	d10f      	bne.n	800a894 <__swsetup_r+0x3c>
 800a874:	686c      	ldr	r4, [r5, #4]
 800a876:	89a3      	ldrh	r3, [r4, #12]
 800a878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a87c:	0719      	lsls	r1, r3, #28
 800a87e:	d42c      	bmi.n	800a8da <__swsetup_r+0x82>
 800a880:	06dd      	lsls	r5, r3, #27
 800a882:	d411      	bmi.n	800a8a8 <__swsetup_r+0x50>
 800a884:	2309      	movs	r3, #9
 800a886:	6033      	str	r3, [r6, #0]
 800a888:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a88c:	81a3      	strh	r3, [r4, #12]
 800a88e:	f04f 30ff 	mov.w	r0, #4294967295
 800a892:	e03e      	b.n	800a912 <__swsetup_r+0xba>
 800a894:	4b25      	ldr	r3, [pc, #148]	; (800a92c <__swsetup_r+0xd4>)
 800a896:	429c      	cmp	r4, r3
 800a898:	d101      	bne.n	800a89e <__swsetup_r+0x46>
 800a89a:	68ac      	ldr	r4, [r5, #8]
 800a89c:	e7eb      	b.n	800a876 <__swsetup_r+0x1e>
 800a89e:	4b24      	ldr	r3, [pc, #144]	; (800a930 <__swsetup_r+0xd8>)
 800a8a0:	429c      	cmp	r4, r3
 800a8a2:	bf08      	it	eq
 800a8a4:	68ec      	ldreq	r4, [r5, #12]
 800a8a6:	e7e6      	b.n	800a876 <__swsetup_r+0x1e>
 800a8a8:	0758      	lsls	r0, r3, #29
 800a8aa:	d512      	bpl.n	800a8d2 <__swsetup_r+0x7a>
 800a8ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ae:	b141      	cbz	r1, 800a8c2 <__swsetup_r+0x6a>
 800a8b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8b4:	4299      	cmp	r1, r3
 800a8b6:	d002      	beq.n	800a8be <__swsetup_r+0x66>
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f000 fa5b 	bl	800ad74 <_free_r>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8c8:	81a3      	strh	r3, [r4, #12]
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	6063      	str	r3, [r4, #4]
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	f043 0308 	orr.w	r3, r3, #8
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	6923      	ldr	r3, [r4, #16]
 800a8dc:	b94b      	cbnz	r3, 800a8f2 <__swsetup_r+0x9a>
 800a8de:	89a3      	ldrh	r3, [r4, #12]
 800a8e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e8:	d003      	beq.n	800a8f2 <__swsetup_r+0x9a>
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f000 fa01 	bl	800acf4 <__smakebuf_r>
 800a8f2:	89a0      	ldrh	r0, [r4, #12]
 800a8f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8f8:	f010 0301 	ands.w	r3, r0, #1
 800a8fc:	d00a      	beq.n	800a914 <__swsetup_r+0xbc>
 800a8fe:	2300      	movs	r3, #0
 800a900:	60a3      	str	r3, [r4, #8]
 800a902:	6963      	ldr	r3, [r4, #20]
 800a904:	425b      	negs	r3, r3
 800a906:	61a3      	str	r3, [r4, #24]
 800a908:	6923      	ldr	r3, [r4, #16]
 800a90a:	b943      	cbnz	r3, 800a91e <__swsetup_r+0xc6>
 800a90c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a910:	d1ba      	bne.n	800a888 <__swsetup_r+0x30>
 800a912:	bd70      	pop	{r4, r5, r6, pc}
 800a914:	0781      	lsls	r1, r0, #30
 800a916:	bf58      	it	pl
 800a918:	6963      	ldrpl	r3, [r4, #20]
 800a91a:	60a3      	str	r3, [r4, #8]
 800a91c:	e7f4      	b.n	800a908 <__swsetup_r+0xb0>
 800a91e:	2000      	movs	r0, #0
 800a920:	e7f7      	b.n	800a912 <__swsetup_r+0xba>
 800a922:	bf00      	nop
 800a924:	20000024 	.word	0x20000024
 800a928:	080162c0 	.word	0x080162c0
 800a92c:	080162e0 	.word	0x080162e0
 800a930:	080162a0 	.word	0x080162a0

0800a934 <__sflush_r>:
 800a934:	898a      	ldrh	r2, [r1, #12]
 800a936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93a:	4605      	mov	r5, r0
 800a93c:	0710      	lsls	r0, r2, #28
 800a93e:	460c      	mov	r4, r1
 800a940:	d458      	bmi.n	800a9f4 <__sflush_r+0xc0>
 800a942:	684b      	ldr	r3, [r1, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	dc05      	bgt.n	800a954 <__sflush_r+0x20>
 800a948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	dc02      	bgt.n	800a954 <__sflush_r+0x20>
 800a94e:	2000      	movs	r0, #0
 800a950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a956:	2e00      	cmp	r6, #0
 800a958:	d0f9      	beq.n	800a94e <__sflush_r+0x1a>
 800a95a:	2300      	movs	r3, #0
 800a95c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a960:	682f      	ldr	r7, [r5, #0]
 800a962:	602b      	str	r3, [r5, #0]
 800a964:	d032      	beq.n	800a9cc <__sflush_r+0x98>
 800a966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a968:	89a3      	ldrh	r3, [r4, #12]
 800a96a:	075a      	lsls	r2, r3, #29
 800a96c:	d505      	bpl.n	800a97a <__sflush_r+0x46>
 800a96e:	6863      	ldr	r3, [r4, #4]
 800a970:	1ac0      	subs	r0, r0, r3
 800a972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a974:	b10b      	cbz	r3, 800a97a <__sflush_r+0x46>
 800a976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a978:	1ac0      	subs	r0, r0, r3
 800a97a:	2300      	movs	r3, #0
 800a97c:	4602      	mov	r2, r0
 800a97e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a980:	6a21      	ldr	r1, [r4, #32]
 800a982:	4628      	mov	r0, r5
 800a984:	47b0      	blx	r6
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	d106      	bne.n	800a99a <__sflush_r+0x66>
 800a98c:	6829      	ldr	r1, [r5, #0]
 800a98e:	291d      	cmp	r1, #29
 800a990:	d82c      	bhi.n	800a9ec <__sflush_r+0xb8>
 800a992:	4a2a      	ldr	r2, [pc, #168]	; (800aa3c <__sflush_r+0x108>)
 800a994:	40ca      	lsrs	r2, r1
 800a996:	07d6      	lsls	r6, r2, #31
 800a998:	d528      	bpl.n	800a9ec <__sflush_r+0xb8>
 800a99a:	2200      	movs	r2, #0
 800a99c:	6062      	str	r2, [r4, #4]
 800a99e:	04d9      	lsls	r1, r3, #19
 800a9a0:	6922      	ldr	r2, [r4, #16]
 800a9a2:	6022      	str	r2, [r4, #0]
 800a9a4:	d504      	bpl.n	800a9b0 <__sflush_r+0x7c>
 800a9a6:	1c42      	adds	r2, r0, #1
 800a9a8:	d101      	bne.n	800a9ae <__sflush_r+0x7a>
 800a9aa:	682b      	ldr	r3, [r5, #0]
 800a9ac:	b903      	cbnz	r3, 800a9b0 <__sflush_r+0x7c>
 800a9ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a9b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9b2:	602f      	str	r7, [r5, #0]
 800a9b4:	2900      	cmp	r1, #0
 800a9b6:	d0ca      	beq.n	800a94e <__sflush_r+0x1a>
 800a9b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9bc:	4299      	cmp	r1, r3
 800a9be:	d002      	beq.n	800a9c6 <__sflush_r+0x92>
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	f000 f9d7 	bl	800ad74 <_free_r>
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a9ca:	e7c1      	b.n	800a950 <__sflush_r+0x1c>
 800a9cc:	6a21      	ldr	r1, [r4, #32]
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	47b0      	blx	r6
 800a9d4:	1c41      	adds	r1, r0, #1
 800a9d6:	d1c7      	bne.n	800a968 <__sflush_r+0x34>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0c4      	beq.n	800a968 <__sflush_r+0x34>
 800a9de:	2b1d      	cmp	r3, #29
 800a9e0:	d001      	beq.n	800a9e6 <__sflush_r+0xb2>
 800a9e2:	2b16      	cmp	r3, #22
 800a9e4:	d101      	bne.n	800a9ea <__sflush_r+0xb6>
 800a9e6:	602f      	str	r7, [r5, #0]
 800a9e8:	e7b1      	b.n	800a94e <__sflush_r+0x1a>
 800a9ea:	89a3      	ldrh	r3, [r4, #12]
 800a9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9f0:	81a3      	strh	r3, [r4, #12]
 800a9f2:	e7ad      	b.n	800a950 <__sflush_r+0x1c>
 800a9f4:	690f      	ldr	r7, [r1, #16]
 800a9f6:	2f00      	cmp	r7, #0
 800a9f8:	d0a9      	beq.n	800a94e <__sflush_r+0x1a>
 800a9fa:	0793      	lsls	r3, r2, #30
 800a9fc:	680e      	ldr	r6, [r1, #0]
 800a9fe:	bf08      	it	eq
 800aa00:	694b      	ldreq	r3, [r1, #20]
 800aa02:	600f      	str	r7, [r1, #0]
 800aa04:	bf18      	it	ne
 800aa06:	2300      	movne	r3, #0
 800aa08:	eba6 0807 	sub.w	r8, r6, r7
 800aa0c:	608b      	str	r3, [r1, #8]
 800aa0e:	f1b8 0f00 	cmp.w	r8, #0
 800aa12:	dd9c      	ble.n	800a94e <__sflush_r+0x1a>
 800aa14:	6a21      	ldr	r1, [r4, #32]
 800aa16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa18:	4643      	mov	r3, r8
 800aa1a:	463a      	mov	r2, r7
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	47b0      	blx	r6
 800aa20:	2800      	cmp	r0, #0
 800aa22:	dc06      	bgt.n	800aa32 <__sflush_r+0xfe>
 800aa24:	89a3      	ldrh	r3, [r4, #12]
 800aa26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa2a:	81a3      	strh	r3, [r4, #12]
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa30:	e78e      	b.n	800a950 <__sflush_r+0x1c>
 800aa32:	4407      	add	r7, r0
 800aa34:	eba8 0800 	sub.w	r8, r8, r0
 800aa38:	e7e9      	b.n	800aa0e <__sflush_r+0xda>
 800aa3a:	bf00      	nop
 800aa3c:	20400001 	.word	0x20400001

0800aa40 <_fflush_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	690b      	ldr	r3, [r1, #16]
 800aa44:	4605      	mov	r5, r0
 800aa46:	460c      	mov	r4, r1
 800aa48:	b913      	cbnz	r3, 800aa50 <_fflush_r+0x10>
 800aa4a:	2500      	movs	r5, #0
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	bd38      	pop	{r3, r4, r5, pc}
 800aa50:	b118      	cbz	r0, 800aa5a <_fflush_r+0x1a>
 800aa52:	6983      	ldr	r3, [r0, #24]
 800aa54:	b90b      	cbnz	r3, 800aa5a <_fflush_r+0x1a>
 800aa56:	f000 f887 	bl	800ab68 <__sinit>
 800aa5a:	4b14      	ldr	r3, [pc, #80]	; (800aaac <_fflush_r+0x6c>)
 800aa5c:	429c      	cmp	r4, r3
 800aa5e:	d11b      	bne.n	800aa98 <_fflush_r+0x58>
 800aa60:	686c      	ldr	r4, [r5, #4]
 800aa62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d0ef      	beq.n	800aa4a <_fflush_r+0xa>
 800aa6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa6c:	07d0      	lsls	r0, r2, #31
 800aa6e:	d404      	bmi.n	800aa7a <_fflush_r+0x3a>
 800aa70:	0599      	lsls	r1, r3, #22
 800aa72:	d402      	bmi.n	800aa7a <_fflush_r+0x3a>
 800aa74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa76:	f000 f915 	bl	800aca4 <__retarget_lock_acquire_recursive>
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	4621      	mov	r1, r4
 800aa7e:	f7ff ff59 	bl	800a934 <__sflush_r>
 800aa82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa84:	07da      	lsls	r2, r3, #31
 800aa86:	4605      	mov	r5, r0
 800aa88:	d4e0      	bmi.n	800aa4c <_fflush_r+0xc>
 800aa8a:	89a3      	ldrh	r3, [r4, #12]
 800aa8c:	059b      	lsls	r3, r3, #22
 800aa8e:	d4dd      	bmi.n	800aa4c <_fflush_r+0xc>
 800aa90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa92:	f000 f908 	bl	800aca6 <__retarget_lock_release_recursive>
 800aa96:	e7d9      	b.n	800aa4c <_fflush_r+0xc>
 800aa98:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <_fflush_r+0x70>)
 800aa9a:	429c      	cmp	r4, r3
 800aa9c:	d101      	bne.n	800aaa2 <_fflush_r+0x62>
 800aa9e:	68ac      	ldr	r4, [r5, #8]
 800aaa0:	e7df      	b.n	800aa62 <_fflush_r+0x22>
 800aaa2:	4b04      	ldr	r3, [pc, #16]	; (800aab4 <_fflush_r+0x74>)
 800aaa4:	429c      	cmp	r4, r3
 800aaa6:	bf08      	it	eq
 800aaa8:	68ec      	ldreq	r4, [r5, #12]
 800aaaa:	e7da      	b.n	800aa62 <_fflush_r+0x22>
 800aaac:	080162c0 	.word	0x080162c0
 800aab0:	080162e0 	.word	0x080162e0
 800aab4:	080162a0 	.word	0x080162a0

0800aab8 <std>:
 800aab8:	2300      	movs	r3, #0
 800aaba:	b510      	push	{r4, lr}
 800aabc:	4604      	mov	r4, r0
 800aabe:	e9c0 3300 	strd	r3, r3, [r0]
 800aac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aac6:	6083      	str	r3, [r0, #8]
 800aac8:	8181      	strh	r1, [r0, #12]
 800aaca:	6643      	str	r3, [r0, #100]	; 0x64
 800aacc:	81c2      	strh	r2, [r0, #14]
 800aace:	6183      	str	r3, [r0, #24]
 800aad0:	4619      	mov	r1, r3
 800aad2:	2208      	movs	r2, #8
 800aad4:	305c      	adds	r0, #92	; 0x5c
 800aad6:	f7ff fdc1 	bl	800a65c <memset>
 800aada:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <std+0x38>)
 800aadc:	6263      	str	r3, [r4, #36]	; 0x24
 800aade:	4b05      	ldr	r3, [pc, #20]	; (800aaf4 <std+0x3c>)
 800aae0:	62a3      	str	r3, [r4, #40]	; 0x28
 800aae2:	4b05      	ldr	r3, [pc, #20]	; (800aaf8 <std+0x40>)
 800aae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aae6:	4b05      	ldr	r3, [pc, #20]	; (800aafc <std+0x44>)
 800aae8:	6224      	str	r4, [r4, #32]
 800aaea:	6323      	str	r3, [r4, #48]	; 0x30
 800aaec:	bd10      	pop	{r4, pc}
 800aaee:	bf00      	nop
 800aaf0:	0800b5c1 	.word	0x0800b5c1
 800aaf4:	0800b5e3 	.word	0x0800b5e3
 800aaf8:	0800b61b 	.word	0x0800b61b
 800aafc:	0800b63f 	.word	0x0800b63f

0800ab00 <_cleanup_r>:
 800ab00:	4901      	ldr	r1, [pc, #4]	; (800ab08 <_cleanup_r+0x8>)
 800ab02:	f000 b8af 	b.w	800ac64 <_fwalk_reent>
 800ab06:	bf00      	nop
 800ab08:	0800aa41 	.word	0x0800aa41

0800ab0c <__sfmoreglue>:
 800ab0c:	b570      	push	{r4, r5, r6, lr}
 800ab0e:	2268      	movs	r2, #104	; 0x68
 800ab10:	1e4d      	subs	r5, r1, #1
 800ab12:	4355      	muls	r5, r2
 800ab14:	460e      	mov	r6, r1
 800ab16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab1a:	f000 f997 	bl	800ae4c <_malloc_r>
 800ab1e:	4604      	mov	r4, r0
 800ab20:	b140      	cbz	r0, 800ab34 <__sfmoreglue+0x28>
 800ab22:	2100      	movs	r1, #0
 800ab24:	e9c0 1600 	strd	r1, r6, [r0]
 800ab28:	300c      	adds	r0, #12
 800ab2a:	60a0      	str	r0, [r4, #8]
 800ab2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab30:	f7ff fd94 	bl	800a65c <memset>
 800ab34:	4620      	mov	r0, r4
 800ab36:	bd70      	pop	{r4, r5, r6, pc}

0800ab38 <__sfp_lock_acquire>:
 800ab38:	4801      	ldr	r0, [pc, #4]	; (800ab40 <__sfp_lock_acquire+0x8>)
 800ab3a:	f000 b8b3 	b.w	800aca4 <__retarget_lock_acquire_recursive>
 800ab3e:	bf00      	nop
 800ab40:	20013779 	.word	0x20013779

0800ab44 <__sfp_lock_release>:
 800ab44:	4801      	ldr	r0, [pc, #4]	; (800ab4c <__sfp_lock_release+0x8>)
 800ab46:	f000 b8ae 	b.w	800aca6 <__retarget_lock_release_recursive>
 800ab4a:	bf00      	nop
 800ab4c:	20013779 	.word	0x20013779

0800ab50 <__sinit_lock_acquire>:
 800ab50:	4801      	ldr	r0, [pc, #4]	; (800ab58 <__sinit_lock_acquire+0x8>)
 800ab52:	f000 b8a7 	b.w	800aca4 <__retarget_lock_acquire_recursive>
 800ab56:	bf00      	nop
 800ab58:	2001377a 	.word	0x2001377a

0800ab5c <__sinit_lock_release>:
 800ab5c:	4801      	ldr	r0, [pc, #4]	; (800ab64 <__sinit_lock_release+0x8>)
 800ab5e:	f000 b8a2 	b.w	800aca6 <__retarget_lock_release_recursive>
 800ab62:	bf00      	nop
 800ab64:	2001377a 	.word	0x2001377a

0800ab68 <__sinit>:
 800ab68:	b510      	push	{r4, lr}
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	f7ff fff0 	bl	800ab50 <__sinit_lock_acquire>
 800ab70:	69a3      	ldr	r3, [r4, #24]
 800ab72:	b11b      	cbz	r3, 800ab7c <__sinit+0x14>
 800ab74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab78:	f7ff bff0 	b.w	800ab5c <__sinit_lock_release>
 800ab7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab80:	6523      	str	r3, [r4, #80]	; 0x50
 800ab82:	4b13      	ldr	r3, [pc, #76]	; (800abd0 <__sinit+0x68>)
 800ab84:	4a13      	ldr	r2, [pc, #76]	; (800abd4 <__sinit+0x6c>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab8a:	42a3      	cmp	r3, r4
 800ab8c:	bf04      	itt	eq
 800ab8e:	2301      	moveq	r3, #1
 800ab90:	61a3      	streq	r3, [r4, #24]
 800ab92:	4620      	mov	r0, r4
 800ab94:	f000 f820 	bl	800abd8 <__sfp>
 800ab98:	6060      	str	r0, [r4, #4]
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 f81c 	bl	800abd8 <__sfp>
 800aba0:	60a0      	str	r0, [r4, #8]
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 f818 	bl	800abd8 <__sfp>
 800aba8:	2200      	movs	r2, #0
 800abaa:	60e0      	str	r0, [r4, #12]
 800abac:	2104      	movs	r1, #4
 800abae:	6860      	ldr	r0, [r4, #4]
 800abb0:	f7ff ff82 	bl	800aab8 <std>
 800abb4:	68a0      	ldr	r0, [r4, #8]
 800abb6:	2201      	movs	r2, #1
 800abb8:	2109      	movs	r1, #9
 800abba:	f7ff ff7d 	bl	800aab8 <std>
 800abbe:	68e0      	ldr	r0, [r4, #12]
 800abc0:	2202      	movs	r2, #2
 800abc2:	2112      	movs	r1, #18
 800abc4:	f7ff ff78 	bl	800aab8 <std>
 800abc8:	2301      	movs	r3, #1
 800abca:	61a3      	str	r3, [r4, #24]
 800abcc:	e7d2      	b.n	800ab74 <__sinit+0xc>
 800abce:	bf00      	nop
 800abd0:	0801629c 	.word	0x0801629c
 800abd4:	0800ab01 	.word	0x0800ab01

0800abd8 <__sfp>:
 800abd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abda:	4607      	mov	r7, r0
 800abdc:	f7ff ffac 	bl	800ab38 <__sfp_lock_acquire>
 800abe0:	4b1e      	ldr	r3, [pc, #120]	; (800ac5c <__sfp+0x84>)
 800abe2:	681e      	ldr	r6, [r3, #0]
 800abe4:	69b3      	ldr	r3, [r6, #24]
 800abe6:	b913      	cbnz	r3, 800abee <__sfp+0x16>
 800abe8:	4630      	mov	r0, r6
 800abea:	f7ff ffbd 	bl	800ab68 <__sinit>
 800abee:	3648      	adds	r6, #72	; 0x48
 800abf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	d503      	bpl.n	800ac00 <__sfp+0x28>
 800abf8:	6833      	ldr	r3, [r6, #0]
 800abfa:	b30b      	cbz	r3, 800ac40 <__sfp+0x68>
 800abfc:	6836      	ldr	r6, [r6, #0]
 800abfe:	e7f7      	b.n	800abf0 <__sfp+0x18>
 800ac00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac04:	b9d5      	cbnz	r5, 800ac3c <__sfp+0x64>
 800ac06:	4b16      	ldr	r3, [pc, #88]	; (800ac60 <__sfp+0x88>)
 800ac08:	60e3      	str	r3, [r4, #12]
 800ac0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac0e:	6665      	str	r5, [r4, #100]	; 0x64
 800ac10:	f000 f847 	bl	800aca2 <__retarget_lock_init_recursive>
 800ac14:	f7ff ff96 	bl	800ab44 <__sfp_lock_release>
 800ac18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac20:	6025      	str	r5, [r4, #0]
 800ac22:	61a5      	str	r5, [r4, #24]
 800ac24:	2208      	movs	r2, #8
 800ac26:	4629      	mov	r1, r5
 800ac28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac2c:	f7ff fd16 	bl	800a65c <memset>
 800ac30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac38:	4620      	mov	r0, r4
 800ac3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac3c:	3468      	adds	r4, #104	; 0x68
 800ac3e:	e7d9      	b.n	800abf4 <__sfp+0x1c>
 800ac40:	2104      	movs	r1, #4
 800ac42:	4638      	mov	r0, r7
 800ac44:	f7ff ff62 	bl	800ab0c <__sfmoreglue>
 800ac48:	4604      	mov	r4, r0
 800ac4a:	6030      	str	r0, [r6, #0]
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	d1d5      	bne.n	800abfc <__sfp+0x24>
 800ac50:	f7ff ff78 	bl	800ab44 <__sfp_lock_release>
 800ac54:	230c      	movs	r3, #12
 800ac56:	603b      	str	r3, [r7, #0]
 800ac58:	e7ee      	b.n	800ac38 <__sfp+0x60>
 800ac5a:	bf00      	nop
 800ac5c:	0801629c 	.word	0x0801629c
 800ac60:	ffff0001 	.word	0xffff0001

0800ac64 <_fwalk_reent>:
 800ac64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac68:	4606      	mov	r6, r0
 800ac6a:	4688      	mov	r8, r1
 800ac6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac70:	2700      	movs	r7, #0
 800ac72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac76:	f1b9 0901 	subs.w	r9, r9, #1
 800ac7a:	d505      	bpl.n	800ac88 <_fwalk_reent+0x24>
 800ac7c:	6824      	ldr	r4, [r4, #0]
 800ac7e:	2c00      	cmp	r4, #0
 800ac80:	d1f7      	bne.n	800ac72 <_fwalk_reent+0xe>
 800ac82:	4638      	mov	r0, r7
 800ac84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac88:	89ab      	ldrh	r3, [r5, #12]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d907      	bls.n	800ac9e <_fwalk_reent+0x3a>
 800ac8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac92:	3301      	adds	r3, #1
 800ac94:	d003      	beq.n	800ac9e <_fwalk_reent+0x3a>
 800ac96:	4629      	mov	r1, r5
 800ac98:	4630      	mov	r0, r6
 800ac9a:	47c0      	blx	r8
 800ac9c:	4307      	orrs	r7, r0
 800ac9e:	3568      	adds	r5, #104	; 0x68
 800aca0:	e7e9      	b.n	800ac76 <_fwalk_reent+0x12>

0800aca2 <__retarget_lock_init_recursive>:
 800aca2:	4770      	bx	lr

0800aca4 <__retarget_lock_acquire_recursive>:
 800aca4:	4770      	bx	lr

0800aca6 <__retarget_lock_release_recursive>:
 800aca6:	4770      	bx	lr

0800aca8 <__swhatbuf_r>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	460e      	mov	r6, r1
 800acac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb0:	2900      	cmp	r1, #0
 800acb2:	b096      	sub	sp, #88	; 0x58
 800acb4:	4614      	mov	r4, r2
 800acb6:	461d      	mov	r5, r3
 800acb8:	da08      	bge.n	800accc <__swhatbuf_r+0x24>
 800acba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	602a      	str	r2, [r5, #0]
 800acc2:	061a      	lsls	r2, r3, #24
 800acc4:	d410      	bmi.n	800ace8 <__swhatbuf_r+0x40>
 800acc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acca:	e00e      	b.n	800acea <__swhatbuf_r+0x42>
 800accc:	466a      	mov	r2, sp
 800acce:	f000 fcdd 	bl	800b68c <_fstat_r>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	dbf1      	blt.n	800acba <__swhatbuf_r+0x12>
 800acd6:	9a01      	ldr	r2, [sp, #4]
 800acd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800acdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ace0:	425a      	negs	r2, r3
 800ace2:	415a      	adcs	r2, r3
 800ace4:	602a      	str	r2, [r5, #0]
 800ace6:	e7ee      	b.n	800acc6 <__swhatbuf_r+0x1e>
 800ace8:	2340      	movs	r3, #64	; 0x40
 800acea:	2000      	movs	r0, #0
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	b016      	add	sp, #88	; 0x58
 800acf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800acf4 <__smakebuf_r>:
 800acf4:	898b      	ldrh	r3, [r1, #12]
 800acf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acf8:	079d      	lsls	r5, r3, #30
 800acfa:	4606      	mov	r6, r0
 800acfc:	460c      	mov	r4, r1
 800acfe:	d507      	bpl.n	800ad10 <__smakebuf_r+0x1c>
 800ad00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	6123      	str	r3, [r4, #16]
 800ad08:	2301      	movs	r3, #1
 800ad0a:	6163      	str	r3, [r4, #20]
 800ad0c:	b002      	add	sp, #8
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	ab01      	add	r3, sp, #4
 800ad12:	466a      	mov	r2, sp
 800ad14:	f7ff ffc8 	bl	800aca8 <__swhatbuf_r>
 800ad18:	9900      	ldr	r1, [sp, #0]
 800ad1a:	4605      	mov	r5, r0
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f000 f895 	bl	800ae4c <_malloc_r>
 800ad22:	b948      	cbnz	r0, 800ad38 <__smakebuf_r+0x44>
 800ad24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad28:	059a      	lsls	r2, r3, #22
 800ad2a:	d4ef      	bmi.n	800ad0c <__smakebuf_r+0x18>
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	f043 0302 	orr.w	r3, r3, #2
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	e7e3      	b.n	800ad00 <__smakebuf_r+0xc>
 800ad38:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <__smakebuf_r+0x7c>)
 800ad3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	6020      	str	r0, [r4, #0]
 800ad40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	9b00      	ldr	r3, [sp, #0]
 800ad48:	6163      	str	r3, [r4, #20]
 800ad4a:	9b01      	ldr	r3, [sp, #4]
 800ad4c:	6120      	str	r0, [r4, #16]
 800ad4e:	b15b      	cbz	r3, 800ad68 <__smakebuf_r+0x74>
 800ad50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad54:	4630      	mov	r0, r6
 800ad56:	f000 fcab 	bl	800b6b0 <_isatty_r>
 800ad5a:	b128      	cbz	r0, 800ad68 <__smakebuf_r+0x74>
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	f023 0303 	bic.w	r3, r3, #3
 800ad62:	f043 0301 	orr.w	r3, r3, #1
 800ad66:	81a3      	strh	r3, [r4, #12]
 800ad68:	89a0      	ldrh	r0, [r4, #12]
 800ad6a:	4305      	orrs	r5, r0
 800ad6c:	81a5      	strh	r5, [r4, #12]
 800ad6e:	e7cd      	b.n	800ad0c <__smakebuf_r+0x18>
 800ad70:	0800ab01 	.word	0x0800ab01

0800ad74 <_free_r>:
 800ad74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad76:	2900      	cmp	r1, #0
 800ad78:	d044      	beq.n	800ae04 <_free_r+0x90>
 800ad7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad7e:	9001      	str	r0, [sp, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f1a1 0404 	sub.w	r4, r1, #4
 800ad86:	bfb8      	it	lt
 800ad88:	18e4      	addlt	r4, r4, r3
 800ad8a:	f000 fcb3 	bl	800b6f4 <__malloc_lock>
 800ad8e:	4a1e      	ldr	r2, [pc, #120]	; (800ae08 <_free_r+0x94>)
 800ad90:	9801      	ldr	r0, [sp, #4]
 800ad92:	6813      	ldr	r3, [r2, #0]
 800ad94:	b933      	cbnz	r3, 800ada4 <_free_r+0x30>
 800ad96:	6063      	str	r3, [r4, #4]
 800ad98:	6014      	str	r4, [r2, #0]
 800ad9a:	b003      	add	sp, #12
 800ad9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ada0:	f000 bcae 	b.w	800b700 <__malloc_unlock>
 800ada4:	42a3      	cmp	r3, r4
 800ada6:	d908      	bls.n	800adba <_free_r+0x46>
 800ada8:	6825      	ldr	r5, [r4, #0]
 800adaa:	1961      	adds	r1, r4, r5
 800adac:	428b      	cmp	r3, r1
 800adae:	bf01      	itttt	eq
 800adb0:	6819      	ldreq	r1, [r3, #0]
 800adb2:	685b      	ldreq	r3, [r3, #4]
 800adb4:	1949      	addeq	r1, r1, r5
 800adb6:	6021      	streq	r1, [r4, #0]
 800adb8:	e7ed      	b.n	800ad96 <_free_r+0x22>
 800adba:	461a      	mov	r2, r3
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	b10b      	cbz	r3, 800adc4 <_free_r+0x50>
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	d9fa      	bls.n	800adba <_free_r+0x46>
 800adc4:	6811      	ldr	r1, [r2, #0]
 800adc6:	1855      	adds	r5, r2, r1
 800adc8:	42a5      	cmp	r5, r4
 800adca:	d10b      	bne.n	800ade4 <_free_r+0x70>
 800adcc:	6824      	ldr	r4, [r4, #0]
 800adce:	4421      	add	r1, r4
 800add0:	1854      	adds	r4, r2, r1
 800add2:	42a3      	cmp	r3, r4
 800add4:	6011      	str	r1, [r2, #0]
 800add6:	d1e0      	bne.n	800ad9a <_free_r+0x26>
 800add8:	681c      	ldr	r4, [r3, #0]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	6053      	str	r3, [r2, #4]
 800adde:	4421      	add	r1, r4
 800ade0:	6011      	str	r1, [r2, #0]
 800ade2:	e7da      	b.n	800ad9a <_free_r+0x26>
 800ade4:	d902      	bls.n	800adec <_free_r+0x78>
 800ade6:	230c      	movs	r3, #12
 800ade8:	6003      	str	r3, [r0, #0]
 800adea:	e7d6      	b.n	800ad9a <_free_r+0x26>
 800adec:	6825      	ldr	r5, [r4, #0]
 800adee:	1961      	adds	r1, r4, r5
 800adf0:	428b      	cmp	r3, r1
 800adf2:	bf04      	itt	eq
 800adf4:	6819      	ldreq	r1, [r3, #0]
 800adf6:	685b      	ldreq	r3, [r3, #4]
 800adf8:	6063      	str	r3, [r4, #4]
 800adfa:	bf04      	itt	eq
 800adfc:	1949      	addeq	r1, r1, r5
 800adfe:	6021      	streq	r1, [r4, #0]
 800ae00:	6054      	str	r4, [r2, #4]
 800ae02:	e7ca      	b.n	800ad9a <_free_r+0x26>
 800ae04:	b003      	add	sp, #12
 800ae06:	bd30      	pop	{r4, r5, pc}
 800ae08:	2001377c 	.word	0x2001377c

0800ae0c <sbrk_aligned>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	4e0e      	ldr	r6, [pc, #56]	; (800ae48 <sbrk_aligned+0x3c>)
 800ae10:	460c      	mov	r4, r1
 800ae12:	6831      	ldr	r1, [r6, #0]
 800ae14:	4605      	mov	r5, r0
 800ae16:	b911      	cbnz	r1, 800ae1e <sbrk_aligned+0x12>
 800ae18:	f000 fbc2 	bl	800b5a0 <_sbrk_r>
 800ae1c:	6030      	str	r0, [r6, #0]
 800ae1e:	4621      	mov	r1, r4
 800ae20:	4628      	mov	r0, r5
 800ae22:	f000 fbbd 	bl	800b5a0 <_sbrk_r>
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	d00a      	beq.n	800ae40 <sbrk_aligned+0x34>
 800ae2a:	1cc4      	adds	r4, r0, #3
 800ae2c:	f024 0403 	bic.w	r4, r4, #3
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	d007      	beq.n	800ae44 <sbrk_aligned+0x38>
 800ae34:	1a21      	subs	r1, r4, r0
 800ae36:	4628      	mov	r0, r5
 800ae38:	f000 fbb2 	bl	800b5a0 <_sbrk_r>
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	d101      	bne.n	800ae44 <sbrk_aligned+0x38>
 800ae40:	f04f 34ff 	mov.w	r4, #4294967295
 800ae44:	4620      	mov	r0, r4
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
 800ae48:	20013780 	.word	0x20013780

0800ae4c <_malloc_r>:
 800ae4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae50:	1ccd      	adds	r5, r1, #3
 800ae52:	f025 0503 	bic.w	r5, r5, #3
 800ae56:	3508      	adds	r5, #8
 800ae58:	2d0c      	cmp	r5, #12
 800ae5a:	bf38      	it	cc
 800ae5c:	250c      	movcc	r5, #12
 800ae5e:	2d00      	cmp	r5, #0
 800ae60:	4607      	mov	r7, r0
 800ae62:	db01      	blt.n	800ae68 <_malloc_r+0x1c>
 800ae64:	42a9      	cmp	r1, r5
 800ae66:	d905      	bls.n	800ae74 <_malloc_r+0x28>
 800ae68:	230c      	movs	r3, #12
 800ae6a:	603b      	str	r3, [r7, #0]
 800ae6c:	2600      	movs	r6, #0
 800ae6e:	4630      	mov	r0, r6
 800ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae74:	4e2e      	ldr	r6, [pc, #184]	; (800af30 <_malloc_r+0xe4>)
 800ae76:	f000 fc3d 	bl	800b6f4 <__malloc_lock>
 800ae7a:	6833      	ldr	r3, [r6, #0]
 800ae7c:	461c      	mov	r4, r3
 800ae7e:	bb34      	cbnz	r4, 800aece <_malloc_r+0x82>
 800ae80:	4629      	mov	r1, r5
 800ae82:	4638      	mov	r0, r7
 800ae84:	f7ff ffc2 	bl	800ae0c <sbrk_aligned>
 800ae88:	1c43      	adds	r3, r0, #1
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	d14d      	bne.n	800af2a <_malloc_r+0xde>
 800ae8e:	6834      	ldr	r4, [r6, #0]
 800ae90:	4626      	mov	r6, r4
 800ae92:	2e00      	cmp	r6, #0
 800ae94:	d140      	bne.n	800af18 <_malloc_r+0xcc>
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	eb04 0803 	add.w	r8, r4, r3
 800aea0:	f000 fb7e 	bl	800b5a0 <_sbrk_r>
 800aea4:	4580      	cmp	r8, r0
 800aea6:	d13a      	bne.n	800af1e <_malloc_r+0xd2>
 800aea8:	6821      	ldr	r1, [r4, #0]
 800aeaa:	3503      	adds	r5, #3
 800aeac:	1a6d      	subs	r5, r5, r1
 800aeae:	f025 0503 	bic.w	r5, r5, #3
 800aeb2:	3508      	adds	r5, #8
 800aeb4:	2d0c      	cmp	r5, #12
 800aeb6:	bf38      	it	cc
 800aeb8:	250c      	movcc	r5, #12
 800aeba:	4629      	mov	r1, r5
 800aebc:	4638      	mov	r0, r7
 800aebe:	f7ff ffa5 	bl	800ae0c <sbrk_aligned>
 800aec2:	3001      	adds	r0, #1
 800aec4:	d02b      	beq.n	800af1e <_malloc_r+0xd2>
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	442b      	add	r3, r5
 800aeca:	6023      	str	r3, [r4, #0]
 800aecc:	e00e      	b.n	800aeec <_malloc_r+0xa0>
 800aece:	6822      	ldr	r2, [r4, #0]
 800aed0:	1b52      	subs	r2, r2, r5
 800aed2:	d41e      	bmi.n	800af12 <_malloc_r+0xc6>
 800aed4:	2a0b      	cmp	r2, #11
 800aed6:	d916      	bls.n	800af06 <_malloc_r+0xba>
 800aed8:	1961      	adds	r1, r4, r5
 800aeda:	42a3      	cmp	r3, r4
 800aedc:	6025      	str	r5, [r4, #0]
 800aede:	bf18      	it	ne
 800aee0:	6059      	strne	r1, [r3, #4]
 800aee2:	6863      	ldr	r3, [r4, #4]
 800aee4:	bf08      	it	eq
 800aee6:	6031      	streq	r1, [r6, #0]
 800aee8:	5162      	str	r2, [r4, r5]
 800aeea:	604b      	str	r3, [r1, #4]
 800aeec:	4638      	mov	r0, r7
 800aeee:	f104 060b 	add.w	r6, r4, #11
 800aef2:	f000 fc05 	bl	800b700 <__malloc_unlock>
 800aef6:	f026 0607 	bic.w	r6, r6, #7
 800aefa:	1d23      	adds	r3, r4, #4
 800aefc:	1af2      	subs	r2, r6, r3
 800aefe:	d0b6      	beq.n	800ae6e <_malloc_r+0x22>
 800af00:	1b9b      	subs	r3, r3, r6
 800af02:	50a3      	str	r3, [r4, r2]
 800af04:	e7b3      	b.n	800ae6e <_malloc_r+0x22>
 800af06:	6862      	ldr	r2, [r4, #4]
 800af08:	42a3      	cmp	r3, r4
 800af0a:	bf0c      	ite	eq
 800af0c:	6032      	streq	r2, [r6, #0]
 800af0e:	605a      	strne	r2, [r3, #4]
 800af10:	e7ec      	b.n	800aeec <_malloc_r+0xa0>
 800af12:	4623      	mov	r3, r4
 800af14:	6864      	ldr	r4, [r4, #4]
 800af16:	e7b2      	b.n	800ae7e <_malloc_r+0x32>
 800af18:	4634      	mov	r4, r6
 800af1a:	6876      	ldr	r6, [r6, #4]
 800af1c:	e7b9      	b.n	800ae92 <_malloc_r+0x46>
 800af1e:	230c      	movs	r3, #12
 800af20:	603b      	str	r3, [r7, #0]
 800af22:	4638      	mov	r0, r7
 800af24:	f000 fbec 	bl	800b700 <__malloc_unlock>
 800af28:	e7a1      	b.n	800ae6e <_malloc_r+0x22>
 800af2a:	6025      	str	r5, [r4, #0]
 800af2c:	e7de      	b.n	800aeec <_malloc_r+0xa0>
 800af2e:	bf00      	nop
 800af30:	2001377c 	.word	0x2001377c

0800af34 <__sfputc_r>:
 800af34:	6893      	ldr	r3, [r2, #8]
 800af36:	3b01      	subs	r3, #1
 800af38:	2b00      	cmp	r3, #0
 800af3a:	b410      	push	{r4}
 800af3c:	6093      	str	r3, [r2, #8]
 800af3e:	da08      	bge.n	800af52 <__sfputc_r+0x1e>
 800af40:	6994      	ldr	r4, [r2, #24]
 800af42:	42a3      	cmp	r3, r4
 800af44:	db01      	blt.n	800af4a <__sfputc_r+0x16>
 800af46:	290a      	cmp	r1, #10
 800af48:	d103      	bne.n	800af52 <__sfputc_r+0x1e>
 800af4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af4e:	f7ff bc31 	b.w	800a7b4 <__swbuf_r>
 800af52:	6813      	ldr	r3, [r2, #0]
 800af54:	1c58      	adds	r0, r3, #1
 800af56:	6010      	str	r0, [r2, #0]
 800af58:	7019      	strb	r1, [r3, #0]
 800af5a:	4608      	mov	r0, r1
 800af5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <__sfputs_r>:
 800af62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af64:	4606      	mov	r6, r0
 800af66:	460f      	mov	r7, r1
 800af68:	4614      	mov	r4, r2
 800af6a:	18d5      	adds	r5, r2, r3
 800af6c:	42ac      	cmp	r4, r5
 800af6e:	d101      	bne.n	800af74 <__sfputs_r+0x12>
 800af70:	2000      	movs	r0, #0
 800af72:	e007      	b.n	800af84 <__sfputs_r+0x22>
 800af74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af78:	463a      	mov	r2, r7
 800af7a:	4630      	mov	r0, r6
 800af7c:	f7ff ffda 	bl	800af34 <__sfputc_r>
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	d1f3      	bne.n	800af6c <__sfputs_r+0xa>
 800af84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af88 <_vfiprintf_r>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	460d      	mov	r5, r1
 800af8e:	b09d      	sub	sp, #116	; 0x74
 800af90:	4614      	mov	r4, r2
 800af92:	4698      	mov	r8, r3
 800af94:	4606      	mov	r6, r0
 800af96:	b118      	cbz	r0, 800afa0 <_vfiprintf_r+0x18>
 800af98:	6983      	ldr	r3, [r0, #24]
 800af9a:	b90b      	cbnz	r3, 800afa0 <_vfiprintf_r+0x18>
 800af9c:	f7ff fde4 	bl	800ab68 <__sinit>
 800afa0:	4b89      	ldr	r3, [pc, #548]	; (800b1c8 <_vfiprintf_r+0x240>)
 800afa2:	429d      	cmp	r5, r3
 800afa4:	d11b      	bne.n	800afde <_vfiprintf_r+0x56>
 800afa6:	6875      	ldr	r5, [r6, #4]
 800afa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afaa:	07d9      	lsls	r1, r3, #31
 800afac:	d405      	bmi.n	800afba <_vfiprintf_r+0x32>
 800afae:	89ab      	ldrh	r3, [r5, #12]
 800afb0:	059a      	lsls	r2, r3, #22
 800afb2:	d402      	bmi.n	800afba <_vfiprintf_r+0x32>
 800afb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afb6:	f7ff fe75 	bl	800aca4 <__retarget_lock_acquire_recursive>
 800afba:	89ab      	ldrh	r3, [r5, #12]
 800afbc:	071b      	lsls	r3, r3, #28
 800afbe:	d501      	bpl.n	800afc4 <_vfiprintf_r+0x3c>
 800afc0:	692b      	ldr	r3, [r5, #16]
 800afc2:	b9eb      	cbnz	r3, 800b000 <_vfiprintf_r+0x78>
 800afc4:	4629      	mov	r1, r5
 800afc6:	4630      	mov	r0, r6
 800afc8:	f7ff fc46 	bl	800a858 <__swsetup_r>
 800afcc:	b1c0      	cbz	r0, 800b000 <_vfiprintf_r+0x78>
 800afce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afd0:	07dc      	lsls	r4, r3, #31
 800afd2:	d50e      	bpl.n	800aff2 <_vfiprintf_r+0x6a>
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295
 800afd8:	b01d      	add	sp, #116	; 0x74
 800afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afde:	4b7b      	ldr	r3, [pc, #492]	; (800b1cc <_vfiprintf_r+0x244>)
 800afe0:	429d      	cmp	r5, r3
 800afe2:	d101      	bne.n	800afe8 <_vfiprintf_r+0x60>
 800afe4:	68b5      	ldr	r5, [r6, #8]
 800afe6:	e7df      	b.n	800afa8 <_vfiprintf_r+0x20>
 800afe8:	4b79      	ldr	r3, [pc, #484]	; (800b1d0 <_vfiprintf_r+0x248>)
 800afea:	429d      	cmp	r5, r3
 800afec:	bf08      	it	eq
 800afee:	68f5      	ldreq	r5, [r6, #12]
 800aff0:	e7da      	b.n	800afa8 <_vfiprintf_r+0x20>
 800aff2:	89ab      	ldrh	r3, [r5, #12]
 800aff4:	0598      	lsls	r0, r3, #22
 800aff6:	d4ed      	bmi.n	800afd4 <_vfiprintf_r+0x4c>
 800aff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800affa:	f7ff fe54 	bl	800aca6 <__retarget_lock_release_recursive>
 800affe:	e7e9      	b.n	800afd4 <_vfiprintf_r+0x4c>
 800b000:	2300      	movs	r3, #0
 800b002:	9309      	str	r3, [sp, #36]	; 0x24
 800b004:	2320      	movs	r3, #32
 800b006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b00a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b00e:	2330      	movs	r3, #48	; 0x30
 800b010:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b1d4 <_vfiprintf_r+0x24c>
 800b014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b018:	f04f 0901 	mov.w	r9, #1
 800b01c:	4623      	mov	r3, r4
 800b01e:	469a      	mov	sl, r3
 800b020:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b024:	b10a      	cbz	r2, 800b02a <_vfiprintf_r+0xa2>
 800b026:	2a25      	cmp	r2, #37	; 0x25
 800b028:	d1f9      	bne.n	800b01e <_vfiprintf_r+0x96>
 800b02a:	ebba 0b04 	subs.w	fp, sl, r4
 800b02e:	d00b      	beq.n	800b048 <_vfiprintf_r+0xc0>
 800b030:	465b      	mov	r3, fp
 800b032:	4622      	mov	r2, r4
 800b034:	4629      	mov	r1, r5
 800b036:	4630      	mov	r0, r6
 800b038:	f7ff ff93 	bl	800af62 <__sfputs_r>
 800b03c:	3001      	adds	r0, #1
 800b03e:	f000 80aa 	beq.w	800b196 <_vfiprintf_r+0x20e>
 800b042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b044:	445a      	add	r2, fp
 800b046:	9209      	str	r2, [sp, #36]	; 0x24
 800b048:	f89a 3000 	ldrb.w	r3, [sl]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f000 80a2 	beq.w	800b196 <_vfiprintf_r+0x20e>
 800b052:	2300      	movs	r3, #0
 800b054:	f04f 32ff 	mov.w	r2, #4294967295
 800b058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b05c:	f10a 0a01 	add.w	sl, sl, #1
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	9307      	str	r3, [sp, #28]
 800b064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b068:	931a      	str	r3, [sp, #104]	; 0x68
 800b06a:	4654      	mov	r4, sl
 800b06c:	2205      	movs	r2, #5
 800b06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b072:	4858      	ldr	r0, [pc, #352]	; (800b1d4 <_vfiprintf_r+0x24c>)
 800b074:	f7f5 f8c4 	bl	8000200 <memchr>
 800b078:	9a04      	ldr	r2, [sp, #16]
 800b07a:	b9d8      	cbnz	r0, 800b0b4 <_vfiprintf_r+0x12c>
 800b07c:	06d1      	lsls	r1, r2, #27
 800b07e:	bf44      	itt	mi
 800b080:	2320      	movmi	r3, #32
 800b082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b086:	0713      	lsls	r3, r2, #28
 800b088:	bf44      	itt	mi
 800b08a:	232b      	movmi	r3, #43	; 0x2b
 800b08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b090:	f89a 3000 	ldrb.w	r3, [sl]
 800b094:	2b2a      	cmp	r3, #42	; 0x2a
 800b096:	d015      	beq.n	800b0c4 <_vfiprintf_r+0x13c>
 800b098:	9a07      	ldr	r2, [sp, #28]
 800b09a:	4654      	mov	r4, sl
 800b09c:	2000      	movs	r0, #0
 800b09e:	f04f 0c0a 	mov.w	ip, #10
 800b0a2:	4621      	mov	r1, r4
 800b0a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0a8:	3b30      	subs	r3, #48	; 0x30
 800b0aa:	2b09      	cmp	r3, #9
 800b0ac:	d94e      	bls.n	800b14c <_vfiprintf_r+0x1c4>
 800b0ae:	b1b0      	cbz	r0, 800b0de <_vfiprintf_r+0x156>
 800b0b0:	9207      	str	r2, [sp, #28]
 800b0b2:	e014      	b.n	800b0de <_vfiprintf_r+0x156>
 800b0b4:	eba0 0308 	sub.w	r3, r0, r8
 800b0b8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	9304      	str	r3, [sp, #16]
 800b0c0:	46a2      	mov	sl, r4
 800b0c2:	e7d2      	b.n	800b06a <_vfiprintf_r+0xe2>
 800b0c4:	9b03      	ldr	r3, [sp, #12]
 800b0c6:	1d19      	adds	r1, r3, #4
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	9103      	str	r1, [sp, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	bfbb      	ittet	lt
 800b0d0:	425b      	neglt	r3, r3
 800b0d2:	f042 0202 	orrlt.w	r2, r2, #2
 800b0d6:	9307      	strge	r3, [sp, #28]
 800b0d8:	9307      	strlt	r3, [sp, #28]
 800b0da:	bfb8      	it	lt
 800b0dc:	9204      	strlt	r2, [sp, #16]
 800b0de:	7823      	ldrb	r3, [r4, #0]
 800b0e0:	2b2e      	cmp	r3, #46	; 0x2e
 800b0e2:	d10c      	bne.n	800b0fe <_vfiprintf_r+0x176>
 800b0e4:	7863      	ldrb	r3, [r4, #1]
 800b0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0e8:	d135      	bne.n	800b156 <_vfiprintf_r+0x1ce>
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	1d1a      	adds	r2, r3, #4
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	9203      	str	r2, [sp, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	bfb8      	it	lt
 800b0f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0fa:	3402      	adds	r4, #2
 800b0fc:	9305      	str	r3, [sp, #20]
 800b0fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1e4 <_vfiprintf_r+0x25c>
 800b102:	7821      	ldrb	r1, [r4, #0]
 800b104:	2203      	movs	r2, #3
 800b106:	4650      	mov	r0, sl
 800b108:	f7f5 f87a 	bl	8000200 <memchr>
 800b10c:	b140      	cbz	r0, 800b120 <_vfiprintf_r+0x198>
 800b10e:	2340      	movs	r3, #64	; 0x40
 800b110:	eba0 000a 	sub.w	r0, r0, sl
 800b114:	fa03 f000 	lsl.w	r0, r3, r0
 800b118:	9b04      	ldr	r3, [sp, #16]
 800b11a:	4303      	orrs	r3, r0
 800b11c:	3401      	adds	r4, #1
 800b11e:	9304      	str	r3, [sp, #16]
 800b120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b124:	482c      	ldr	r0, [pc, #176]	; (800b1d8 <_vfiprintf_r+0x250>)
 800b126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b12a:	2206      	movs	r2, #6
 800b12c:	f7f5 f868 	bl	8000200 <memchr>
 800b130:	2800      	cmp	r0, #0
 800b132:	d03f      	beq.n	800b1b4 <_vfiprintf_r+0x22c>
 800b134:	4b29      	ldr	r3, [pc, #164]	; (800b1dc <_vfiprintf_r+0x254>)
 800b136:	bb1b      	cbnz	r3, 800b180 <_vfiprintf_r+0x1f8>
 800b138:	9b03      	ldr	r3, [sp, #12]
 800b13a:	3307      	adds	r3, #7
 800b13c:	f023 0307 	bic.w	r3, r3, #7
 800b140:	3308      	adds	r3, #8
 800b142:	9303      	str	r3, [sp, #12]
 800b144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b146:	443b      	add	r3, r7
 800b148:	9309      	str	r3, [sp, #36]	; 0x24
 800b14a:	e767      	b.n	800b01c <_vfiprintf_r+0x94>
 800b14c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b150:	460c      	mov	r4, r1
 800b152:	2001      	movs	r0, #1
 800b154:	e7a5      	b.n	800b0a2 <_vfiprintf_r+0x11a>
 800b156:	2300      	movs	r3, #0
 800b158:	3401      	adds	r4, #1
 800b15a:	9305      	str	r3, [sp, #20]
 800b15c:	4619      	mov	r1, r3
 800b15e:	f04f 0c0a 	mov.w	ip, #10
 800b162:	4620      	mov	r0, r4
 800b164:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b168:	3a30      	subs	r2, #48	; 0x30
 800b16a:	2a09      	cmp	r2, #9
 800b16c:	d903      	bls.n	800b176 <_vfiprintf_r+0x1ee>
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0c5      	beq.n	800b0fe <_vfiprintf_r+0x176>
 800b172:	9105      	str	r1, [sp, #20]
 800b174:	e7c3      	b.n	800b0fe <_vfiprintf_r+0x176>
 800b176:	fb0c 2101 	mla	r1, ip, r1, r2
 800b17a:	4604      	mov	r4, r0
 800b17c:	2301      	movs	r3, #1
 800b17e:	e7f0      	b.n	800b162 <_vfiprintf_r+0x1da>
 800b180:	ab03      	add	r3, sp, #12
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	462a      	mov	r2, r5
 800b186:	4b16      	ldr	r3, [pc, #88]	; (800b1e0 <_vfiprintf_r+0x258>)
 800b188:	a904      	add	r1, sp, #16
 800b18a:	4630      	mov	r0, r6
 800b18c:	f3af 8000 	nop.w
 800b190:	4607      	mov	r7, r0
 800b192:	1c78      	adds	r0, r7, #1
 800b194:	d1d6      	bne.n	800b144 <_vfiprintf_r+0x1bc>
 800b196:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b198:	07d9      	lsls	r1, r3, #31
 800b19a:	d405      	bmi.n	800b1a8 <_vfiprintf_r+0x220>
 800b19c:	89ab      	ldrh	r3, [r5, #12]
 800b19e:	059a      	lsls	r2, r3, #22
 800b1a0:	d402      	bmi.n	800b1a8 <_vfiprintf_r+0x220>
 800b1a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1a4:	f7ff fd7f 	bl	800aca6 <__retarget_lock_release_recursive>
 800b1a8:	89ab      	ldrh	r3, [r5, #12]
 800b1aa:	065b      	lsls	r3, r3, #25
 800b1ac:	f53f af12 	bmi.w	800afd4 <_vfiprintf_r+0x4c>
 800b1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1b2:	e711      	b.n	800afd8 <_vfiprintf_r+0x50>
 800b1b4:	ab03      	add	r3, sp, #12
 800b1b6:	9300      	str	r3, [sp, #0]
 800b1b8:	462a      	mov	r2, r5
 800b1ba:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <_vfiprintf_r+0x258>)
 800b1bc:	a904      	add	r1, sp, #16
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f000 f880 	bl	800b2c4 <_printf_i>
 800b1c4:	e7e4      	b.n	800b190 <_vfiprintf_r+0x208>
 800b1c6:	bf00      	nop
 800b1c8:	080162c0 	.word	0x080162c0
 800b1cc:	080162e0 	.word	0x080162e0
 800b1d0:	080162a0 	.word	0x080162a0
 800b1d4:	08016300 	.word	0x08016300
 800b1d8:	0801630a 	.word	0x0801630a
 800b1dc:	00000000 	.word	0x00000000
 800b1e0:	0800af63 	.word	0x0800af63
 800b1e4:	08016306 	.word	0x08016306

0800b1e8 <_printf_common>:
 800b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ec:	4616      	mov	r6, r2
 800b1ee:	4699      	mov	r9, r3
 800b1f0:	688a      	ldr	r2, [r1, #8]
 800b1f2:	690b      	ldr	r3, [r1, #16]
 800b1f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	bfb8      	it	lt
 800b1fc:	4613      	movlt	r3, r2
 800b1fe:	6033      	str	r3, [r6, #0]
 800b200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b204:	4607      	mov	r7, r0
 800b206:	460c      	mov	r4, r1
 800b208:	b10a      	cbz	r2, 800b20e <_printf_common+0x26>
 800b20a:	3301      	adds	r3, #1
 800b20c:	6033      	str	r3, [r6, #0]
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	0699      	lsls	r1, r3, #26
 800b212:	bf42      	ittt	mi
 800b214:	6833      	ldrmi	r3, [r6, #0]
 800b216:	3302      	addmi	r3, #2
 800b218:	6033      	strmi	r3, [r6, #0]
 800b21a:	6825      	ldr	r5, [r4, #0]
 800b21c:	f015 0506 	ands.w	r5, r5, #6
 800b220:	d106      	bne.n	800b230 <_printf_common+0x48>
 800b222:	f104 0a19 	add.w	sl, r4, #25
 800b226:	68e3      	ldr	r3, [r4, #12]
 800b228:	6832      	ldr	r2, [r6, #0]
 800b22a:	1a9b      	subs	r3, r3, r2
 800b22c:	42ab      	cmp	r3, r5
 800b22e:	dc26      	bgt.n	800b27e <_printf_common+0x96>
 800b230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b234:	1e13      	subs	r3, r2, #0
 800b236:	6822      	ldr	r2, [r4, #0]
 800b238:	bf18      	it	ne
 800b23a:	2301      	movne	r3, #1
 800b23c:	0692      	lsls	r2, r2, #26
 800b23e:	d42b      	bmi.n	800b298 <_printf_common+0xb0>
 800b240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b244:	4649      	mov	r1, r9
 800b246:	4638      	mov	r0, r7
 800b248:	47c0      	blx	r8
 800b24a:	3001      	adds	r0, #1
 800b24c:	d01e      	beq.n	800b28c <_printf_common+0xa4>
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	68e5      	ldr	r5, [r4, #12]
 800b252:	6832      	ldr	r2, [r6, #0]
 800b254:	f003 0306 	and.w	r3, r3, #6
 800b258:	2b04      	cmp	r3, #4
 800b25a:	bf08      	it	eq
 800b25c:	1aad      	subeq	r5, r5, r2
 800b25e:	68a3      	ldr	r3, [r4, #8]
 800b260:	6922      	ldr	r2, [r4, #16]
 800b262:	bf0c      	ite	eq
 800b264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b268:	2500      	movne	r5, #0
 800b26a:	4293      	cmp	r3, r2
 800b26c:	bfc4      	itt	gt
 800b26e:	1a9b      	subgt	r3, r3, r2
 800b270:	18ed      	addgt	r5, r5, r3
 800b272:	2600      	movs	r6, #0
 800b274:	341a      	adds	r4, #26
 800b276:	42b5      	cmp	r5, r6
 800b278:	d11a      	bne.n	800b2b0 <_printf_common+0xc8>
 800b27a:	2000      	movs	r0, #0
 800b27c:	e008      	b.n	800b290 <_printf_common+0xa8>
 800b27e:	2301      	movs	r3, #1
 800b280:	4652      	mov	r2, sl
 800b282:	4649      	mov	r1, r9
 800b284:	4638      	mov	r0, r7
 800b286:	47c0      	blx	r8
 800b288:	3001      	adds	r0, #1
 800b28a:	d103      	bne.n	800b294 <_printf_common+0xac>
 800b28c:	f04f 30ff 	mov.w	r0, #4294967295
 800b290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b294:	3501      	adds	r5, #1
 800b296:	e7c6      	b.n	800b226 <_printf_common+0x3e>
 800b298:	18e1      	adds	r1, r4, r3
 800b29a:	1c5a      	adds	r2, r3, #1
 800b29c:	2030      	movs	r0, #48	; 0x30
 800b29e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2a2:	4422      	add	r2, r4
 800b2a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2ac:	3302      	adds	r3, #2
 800b2ae:	e7c7      	b.n	800b240 <_printf_common+0x58>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	4622      	mov	r2, r4
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	47c0      	blx	r8
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	d0e6      	beq.n	800b28c <_printf_common+0xa4>
 800b2be:	3601      	adds	r6, #1
 800b2c0:	e7d9      	b.n	800b276 <_printf_common+0x8e>
	...

0800b2c4 <_printf_i>:
 800b2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c8:	7e0f      	ldrb	r7, [r1, #24]
 800b2ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b2cc:	2f78      	cmp	r7, #120	; 0x78
 800b2ce:	4691      	mov	r9, r2
 800b2d0:	4680      	mov	r8, r0
 800b2d2:	460c      	mov	r4, r1
 800b2d4:	469a      	mov	sl, r3
 800b2d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b2da:	d807      	bhi.n	800b2ec <_printf_i+0x28>
 800b2dc:	2f62      	cmp	r7, #98	; 0x62
 800b2de:	d80a      	bhi.n	800b2f6 <_printf_i+0x32>
 800b2e0:	2f00      	cmp	r7, #0
 800b2e2:	f000 80d8 	beq.w	800b496 <_printf_i+0x1d2>
 800b2e6:	2f58      	cmp	r7, #88	; 0x58
 800b2e8:	f000 80a3 	beq.w	800b432 <_printf_i+0x16e>
 800b2ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2f4:	e03a      	b.n	800b36c <_printf_i+0xa8>
 800b2f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2fa:	2b15      	cmp	r3, #21
 800b2fc:	d8f6      	bhi.n	800b2ec <_printf_i+0x28>
 800b2fe:	a101      	add	r1, pc, #4	; (adr r1, 800b304 <_printf_i+0x40>)
 800b300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b304:	0800b35d 	.word	0x0800b35d
 800b308:	0800b371 	.word	0x0800b371
 800b30c:	0800b2ed 	.word	0x0800b2ed
 800b310:	0800b2ed 	.word	0x0800b2ed
 800b314:	0800b2ed 	.word	0x0800b2ed
 800b318:	0800b2ed 	.word	0x0800b2ed
 800b31c:	0800b371 	.word	0x0800b371
 800b320:	0800b2ed 	.word	0x0800b2ed
 800b324:	0800b2ed 	.word	0x0800b2ed
 800b328:	0800b2ed 	.word	0x0800b2ed
 800b32c:	0800b2ed 	.word	0x0800b2ed
 800b330:	0800b47d 	.word	0x0800b47d
 800b334:	0800b3a1 	.word	0x0800b3a1
 800b338:	0800b45f 	.word	0x0800b45f
 800b33c:	0800b2ed 	.word	0x0800b2ed
 800b340:	0800b2ed 	.word	0x0800b2ed
 800b344:	0800b49f 	.word	0x0800b49f
 800b348:	0800b2ed 	.word	0x0800b2ed
 800b34c:	0800b3a1 	.word	0x0800b3a1
 800b350:	0800b2ed 	.word	0x0800b2ed
 800b354:	0800b2ed 	.word	0x0800b2ed
 800b358:	0800b467 	.word	0x0800b467
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	1d1a      	adds	r2, r3, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	602a      	str	r2, [r5, #0]
 800b364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b36c:	2301      	movs	r3, #1
 800b36e:	e0a3      	b.n	800b4b8 <_printf_i+0x1f4>
 800b370:	6820      	ldr	r0, [r4, #0]
 800b372:	6829      	ldr	r1, [r5, #0]
 800b374:	0606      	lsls	r6, r0, #24
 800b376:	f101 0304 	add.w	r3, r1, #4
 800b37a:	d50a      	bpl.n	800b392 <_printf_i+0xce>
 800b37c:	680e      	ldr	r6, [r1, #0]
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	2e00      	cmp	r6, #0
 800b382:	da03      	bge.n	800b38c <_printf_i+0xc8>
 800b384:	232d      	movs	r3, #45	; 0x2d
 800b386:	4276      	negs	r6, r6
 800b388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b38c:	485e      	ldr	r0, [pc, #376]	; (800b508 <_printf_i+0x244>)
 800b38e:	230a      	movs	r3, #10
 800b390:	e019      	b.n	800b3c6 <_printf_i+0x102>
 800b392:	680e      	ldr	r6, [r1, #0]
 800b394:	602b      	str	r3, [r5, #0]
 800b396:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b39a:	bf18      	it	ne
 800b39c:	b236      	sxthne	r6, r6
 800b39e:	e7ef      	b.n	800b380 <_printf_i+0xbc>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	6820      	ldr	r0, [r4, #0]
 800b3a4:	1d19      	adds	r1, r3, #4
 800b3a6:	6029      	str	r1, [r5, #0]
 800b3a8:	0601      	lsls	r1, r0, #24
 800b3aa:	d501      	bpl.n	800b3b0 <_printf_i+0xec>
 800b3ac:	681e      	ldr	r6, [r3, #0]
 800b3ae:	e002      	b.n	800b3b6 <_printf_i+0xf2>
 800b3b0:	0646      	lsls	r6, r0, #25
 800b3b2:	d5fb      	bpl.n	800b3ac <_printf_i+0xe8>
 800b3b4:	881e      	ldrh	r6, [r3, #0]
 800b3b6:	4854      	ldr	r0, [pc, #336]	; (800b508 <_printf_i+0x244>)
 800b3b8:	2f6f      	cmp	r7, #111	; 0x6f
 800b3ba:	bf0c      	ite	eq
 800b3bc:	2308      	moveq	r3, #8
 800b3be:	230a      	movne	r3, #10
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3c6:	6865      	ldr	r5, [r4, #4]
 800b3c8:	60a5      	str	r5, [r4, #8]
 800b3ca:	2d00      	cmp	r5, #0
 800b3cc:	bfa2      	ittt	ge
 800b3ce:	6821      	ldrge	r1, [r4, #0]
 800b3d0:	f021 0104 	bicge.w	r1, r1, #4
 800b3d4:	6021      	strge	r1, [r4, #0]
 800b3d6:	b90e      	cbnz	r6, 800b3dc <_printf_i+0x118>
 800b3d8:	2d00      	cmp	r5, #0
 800b3da:	d04d      	beq.n	800b478 <_printf_i+0x1b4>
 800b3dc:	4615      	mov	r5, r2
 800b3de:	fbb6 f1f3 	udiv	r1, r6, r3
 800b3e2:	fb03 6711 	mls	r7, r3, r1, r6
 800b3e6:	5dc7      	ldrb	r7, [r0, r7]
 800b3e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3ec:	4637      	mov	r7, r6
 800b3ee:	42bb      	cmp	r3, r7
 800b3f0:	460e      	mov	r6, r1
 800b3f2:	d9f4      	bls.n	800b3de <_printf_i+0x11a>
 800b3f4:	2b08      	cmp	r3, #8
 800b3f6:	d10b      	bne.n	800b410 <_printf_i+0x14c>
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	07de      	lsls	r6, r3, #31
 800b3fc:	d508      	bpl.n	800b410 <_printf_i+0x14c>
 800b3fe:	6923      	ldr	r3, [r4, #16]
 800b400:	6861      	ldr	r1, [r4, #4]
 800b402:	4299      	cmp	r1, r3
 800b404:	bfde      	ittt	le
 800b406:	2330      	movle	r3, #48	; 0x30
 800b408:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b40c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b410:	1b52      	subs	r2, r2, r5
 800b412:	6122      	str	r2, [r4, #16]
 800b414:	f8cd a000 	str.w	sl, [sp]
 800b418:	464b      	mov	r3, r9
 800b41a:	aa03      	add	r2, sp, #12
 800b41c:	4621      	mov	r1, r4
 800b41e:	4640      	mov	r0, r8
 800b420:	f7ff fee2 	bl	800b1e8 <_printf_common>
 800b424:	3001      	adds	r0, #1
 800b426:	d14c      	bne.n	800b4c2 <_printf_i+0x1fe>
 800b428:	f04f 30ff 	mov.w	r0, #4294967295
 800b42c:	b004      	add	sp, #16
 800b42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b432:	4835      	ldr	r0, [pc, #212]	; (800b508 <_printf_i+0x244>)
 800b434:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b438:	6829      	ldr	r1, [r5, #0]
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b440:	6029      	str	r1, [r5, #0]
 800b442:	061d      	lsls	r5, r3, #24
 800b444:	d514      	bpl.n	800b470 <_printf_i+0x1ac>
 800b446:	07df      	lsls	r7, r3, #31
 800b448:	bf44      	itt	mi
 800b44a:	f043 0320 	orrmi.w	r3, r3, #32
 800b44e:	6023      	strmi	r3, [r4, #0]
 800b450:	b91e      	cbnz	r6, 800b45a <_printf_i+0x196>
 800b452:	6823      	ldr	r3, [r4, #0]
 800b454:	f023 0320 	bic.w	r3, r3, #32
 800b458:	6023      	str	r3, [r4, #0]
 800b45a:	2310      	movs	r3, #16
 800b45c:	e7b0      	b.n	800b3c0 <_printf_i+0xfc>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	f043 0320 	orr.w	r3, r3, #32
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	2378      	movs	r3, #120	; 0x78
 800b468:	4828      	ldr	r0, [pc, #160]	; (800b50c <_printf_i+0x248>)
 800b46a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b46e:	e7e3      	b.n	800b438 <_printf_i+0x174>
 800b470:	0659      	lsls	r1, r3, #25
 800b472:	bf48      	it	mi
 800b474:	b2b6      	uxthmi	r6, r6
 800b476:	e7e6      	b.n	800b446 <_printf_i+0x182>
 800b478:	4615      	mov	r5, r2
 800b47a:	e7bb      	b.n	800b3f4 <_printf_i+0x130>
 800b47c:	682b      	ldr	r3, [r5, #0]
 800b47e:	6826      	ldr	r6, [r4, #0]
 800b480:	6961      	ldr	r1, [r4, #20]
 800b482:	1d18      	adds	r0, r3, #4
 800b484:	6028      	str	r0, [r5, #0]
 800b486:	0635      	lsls	r5, r6, #24
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	d501      	bpl.n	800b490 <_printf_i+0x1cc>
 800b48c:	6019      	str	r1, [r3, #0]
 800b48e:	e002      	b.n	800b496 <_printf_i+0x1d2>
 800b490:	0670      	lsls	r0, r6, #25
 800b492:	d5fb      	bpl.n	800b48c <_printf_i+0x1c8>
 800b494:	8019      	strh	r1, [r3, #0]
 800b496:	2300      	movs	r3, #0
 800b498:	6123      	str	r3, [r4, #16]
 800b49a:	4615      	mov	r5, r2
 800b49c:	e7ba      	b.n	800b414 <_printf_i+0x150>
 800b49e:	682b      	ldr	r3, [r5, #0]
 800b4a0:	1d1a      	adds	r2, r3, #4
 800b4a2:	602a      	str	r2, [r5, #0]
 800b4a4:	681d      	ldr	r5, [r3, #0]
 800b4a6:	6862      	ldr	r2, [r4, #4]
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f7f4 fea8 	bl	8000200 <memchr>
 800b4b0:	b108      	cbz	r0, 800b4b6 <_printf_i+0x1f2>
 800b4b2:	1b40      	subs	r0, r0, r5
 800b4b4:	6060      	str	r0, [r4, #4]
 800b4b6:	6863      	ldr	r3, [r4, #4]
 800b4b8:	6123      	str	r3, [r4, #16]
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4c0:	e7a8      	b.n	800b414 <_printf_i+0x150>
 800b4c2:	6923      	ldr	r3, [r4, #16]
 800b4c4:	462a      	mov	r2, r5
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	4640      	mov	r0, r8
 800b4ca:	47d0      	blx	sl
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	d0ab      	beq.n	800b428 <_printf_i+0x164>
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	079b      	lsls	r3, r3, #30
 800b4d4:	d413      	bmi.n	800b4fe <_printf_i+0x23a>
 800b4d6:	68e0      	ldr	r0, [r4, #12]
 800b4d8:	9b03      	ldr	r3, [sp, #12]
 800b4da:	4298      	cmp	r0, r3
 800b4dc:	bfb8      	it	lt
 800b4de:	4618      	movlt	r0, r3
 800b4e0:	e7a4      	b.n	800b42c <_printf_i+0x168>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	4649      	mov	r1, r9
 800b4e8:	4640      	mov	r0, r8
 800b4ea:	47d0      	blx	sl
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	d09b      	beq.n	800b428 <_printf_i+0x164>
 800b4f0:	3501      	adds	r5, #1
 800b4f2:	68e3      	ldr	r3, [r4, #12]
 800b4f4:	9903      	ldr	r1, [sp, #12]
 800b4f6:	1a5b      	subs	r3, r3, r1
 800b4f8:	42ab      	cmp	r3, r5
 800b4fa:	dcf2      	bgt.n	800b4e2 <_printf_i+0x21e>
 800b4fc:	e7eb      	b.n	800b4d6 <_printf_i+0x212>
 800b4fe:	2500      	movs	r5, #0
 800b500:	f104 0619 	add.w	r6, r4, #25
 800b504:	e7f5      	b.n	800b4f2 <_printf_i+0x22e>
 800b506:	bf00      	nop
 800b508:	08016311 	.word	0x08016311
 800b50c:	08016322 	.word	0x08016322

0800b510 <_putc_r>:
 800b510:	b570      	push	{r4, r5, r6, lr}
 800b512:	460d      	mov	r5, r1
 800b514:	4614      	mov	r4, r2
 800b516:	4606      	mov	r6, r0
 800b518:	b118      	cbz	r0, 800b522 <_putc_r+0x12>
 800b51a:	6983      	ldr	r3, [r0, #24]
 800b51c:	b90b      	cbnz	r3, 800b522 <_putc_r+0x12>
 800b51e:	f7ff fb23 	bl	800ab68 <__sinit>
 800b522:	4b1c      	ldr	r3, [pc, #112]	; (800b594 <_putc_r+0x84>)
 800b524:	429c      	cmp	r4, r3
 800b526:	d124      	bne.n	800b572 <_putc_r+0x62>
 800b528:	6874      	ldr	r4, [r6, #4]
 800b52a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b52c:	07d8      	lsls	r0, r3, #31
 800b52e:	d405      	bmi.n	800b53c <_putc_r+0x2c>
 800b530:	89a3      	ldrh	r3, [r4, #12]
 800b532:	0599      	lsls	r1, r3, #22
 800b534:	d402      	bmi.n	800b53c <_putc_r+0x2c>
 800b536:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b538:	f7ff fbb4 	bl	800aca4 <__retarget_lock_acquire_recursive>
 800b53c:	68a3      	ldr	r3, [r4, #8]
 800b53e:	3b01      	subs	r3, #1
 800b540:	2b00      	cmp	r3, #0
 800b542:	60a3      	str	r3, [r4, #8]
 800b544:	da05      	bge.n	800b552 <_putc_r+0x42>
 800b546:	69a2      	ldr	r2, [r4, #24]
 800b548:	4293      	cmp	r3, r2
 800b54a:	db1c      	blt.n	800b586 <_putc_r+0x76>
 800b54c:	b2eb      	uxtb	r3, r5
 800b54e:	2b0a      	cmp	r3, #10
 800b550:	d019      	beq.n	800b586 <_putc_r+0x76>
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	1c5a      	adds	r2, r3, #1
 800b556:	6022      	str	r2, [r4, #0]
 800b558:	701d      	strb	r5, [r3, #0]
 800b55a:	b2ed      	uxtb	r5, r5
 800b55c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b55e:	07da      	lsls	r2, r3, #31
 800b560:	d405      	bmi.n	800b56e <_putc_r+0x5e>
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	059b      	lsls	r3, r3, #22
 800b566:	d402      	bmi.n	800b56e <_putc_r+0x5e>
 800b568:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b56a:	f7ff fb9c 	bl	800aca6 <__retarget_lock_release_recursive>
 800b56e:	4628      	mov	r0, r5
 800b570:	bd70      	pop	{r4, r5, r6, pc}
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <_putc_r+0x88>)
 800b574:	429c      	cmp	r4, r3
 800b576:	d101      	bne.n	800b57c <_putc_r+0x6c>
 800b578:	68b4      	ldr	r4, [r6, #8]
 800b57a:	e7d6      	b.n	800b52a <_putc_r+0x1a>
 800b57c:	4b07      	ldr	r3, [pc, #28]	; (800b59c <_putc_r+0x8c>)
 800b57e:	429c      	cmp	r4, r3
 800b580:	bf08      	it	eq
 800b582:	68f4      	ldreq	r4, [r6, #12]
 800b584:	e7d1      	b.n	800b52a <_putc_r+0x1a>
 800b586:	4629      	mov	r1, r5
 800b588:	4622      	mov	r2, r4
 800b58a:	4630      	mov	r0, r6
 800b58c:	f7ff f912 	bl	800a7b4 <__swbuf_r>
 800b590:	4605      	mov	r5, r0
 800b592:	e7e3      	b.n	800b55c <_putc_r+0x4c>
 800b594:	080162c0 	.word	0x080162c0
 800b598:	080162e0 	.word	0x080162e0
 800b59c:	080162a0 	.word	0x080162a0

0800b5a0 <_sbrk_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4d06      	ldr	r5, [pc, #24]	; (800b5bc <_sbrk_r+0x1c>)
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	4608      	mov	r0, r1
 800b5aa:	602b      	str	r3, [r5, #0]
 800b5ac:	f7f7 fda2 	bl	80030f4 <_sbrk>
 800b5b0:	1c43      	adds	r3, r0, #1
 800b5b2:	d102      	bne.n	800b5ba <_sbrk_r+0x1a>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	b103      	cbz	r3, 800b5ba <_sbrk_r+0x1a>
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	bd38      	pop	{r3, r4, r5, pc}
 800b5bc:	20013784 	.word	0x20013784

0800b5c0 <__sread>:
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c8:	f000 f8a0 	bl	800b70c <_read_r>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	bfab      	itete	ge
 800b5d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5d2:	89a3      	ldrhlt	r3, [r4, #12]
 800b5d4:	181b      	addge	r3, r3, r0
 800b5d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5da:	bfac      	ite	ge
 800b5dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5de:	81a3      	strhlt	r3, [r4, #12]
 800b5e0:	bd10      	pop	{r4, pc}

0800b5e2 <__swrite>:
 800b5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e6:	461f      	mov	r7, r3
 800b5e8:	898b      	ldrh	r3, [r1, #12]
 800b5ea:	05db      	lsls	r3, r3, #23
 800b5ec:	4605      	mov	r5, r0
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	4616      	mov	r6, r2
 800b5f2:	d505      	bpl.n	800b600 <__swrite+0x1e>
 800b5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f000 f868 	bl	800b6d0 <_lseek_r>
 800b600:	89a3      	ldrh	r3, [r4, #12]
 800b602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	4632      	mov	r2, r6
 800b60e:	463b      	mov	r3, r7
 800b610:	4628      	mov	r0, r5
 800b612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b616:	f000 b817 	b.w	800b648 <_write_r>

0800b61a <__sseek>:
 800b61a:	b510      	push	{r4, lr}
 800b61c:	460c      	mov	r4, r1
 800b61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b622:	f000 f855 	bl	800b6d0 <_lseek_r>
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	89a3      	ldrh	r3, [r4, #12]
 800b62a:	bf15      	itete	ne
 800b62c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b62e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b636:	81a3      	strheq	r3, [r4, #12]
 800b638:	bf18      	it	ne
 800b63a:	81a3      	strhne	r3, [r4, #12]
 800b63c:	bd10      	pop	{r4, pc}

0800b63e <__sclose>:
 800b63e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b642:	f000 b813 	b.w	800b66c <_close_r>
	...

0800b648 <_write_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4d07      	ldr	r5, [pc, #28]	; (800b668 <_write_r+0x20>)
 800b64c:	4604      	mov	r4, r0
 800b64e:	4608      	mov	r0, r1
 800b650:	4611      	mov	r1, r2
 800b652:	2200      	movs	r2, #0
 800b654:	602a      	str	r2, [r5, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	f7f7 fcfb 	bl	8003052 <_write>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_write_r+0x1e>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_write_r+0x1e>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	20013784 	.word	0x20013784

0800b66c <_close_r>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
 800b66e:	4d06      	ldr	r5, [pc, #24]	; (800b688 <_close_r+0x1c>)
 800b670:	2300      	movs	r3, #0
 800b672:	4604      	mov	r4, r0
 800b674:	4608      	mov	r0, r1
 800b676:	602b      	str	r3, [r5, #0]
 800b678:	f7f7 fd07 	bl	800308a <_close>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d102      	bne.n	800b686 <_close_r+0x1a>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	b103      	cbz	r3, 800b686 <_close_r+0x1a>
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	20013784 	.word	0x20013784

0800b68c <_fstat_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4d07      	ldr	r5, [pc, #28]	; (800b6ac <_fstat_r+0x20>)
 800b690:	2300      	movs	r3, #0
 800b692:	4604      	mov	r4, r0
 800b694:	4608      	mov	r0, r1
 800b696:	4611      	mov	r1, r2
 800b698:	602b      	str	r3, [r5, #0]
 800b69a:	f7f7 fd02 	bl	80030a2 <_fstat>
 800b69e:	1c43      	adds	r3, r0, #1
 800b6a0:	d102      	bne.n	800b6a8 <_fstat_r+0x1c>
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	b103      	cbz	r3, 800b6a8 <_fstat_r+0x1c>
 800b6a6:	6023      	str	r3, [r4, #0]
 800b6a8:	bd38      	pop	{r3, r4, r5, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20013784 	.word	0x20013784

0800b6b0 <_isatty_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4d06      	ldr	r5, [pc, #24]	; (800b6cc <_isatty_r+0x1c>)
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	4608      	mov	r0, r1
 800b6ba:	602b      	str	r3, [r5, #0]
 800b6bc:	f7f7 fd01 	bl	80030c2 <_isatty>
 800b6c0:	1c43      	adds	r3, r0, #1
 800b6c2:	d102      	bne.n	800b6ca <_isatty_r+0x1a>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	b103      	cbz	r3, 800b6ca <_isatty_r+0x1a>
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	bd38      	pop	{r3, r4, r5, pc}
 800b6cc:	20013784 	.word	0x20013784

0800b6d0 <_lseek_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4d07      	ldr	r5, [pc, #28]	; (800b6f0 <_lseek_r+0x20>)
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	4608      	mov	r0, r1
 800b6d8:	4611      	mov	r1, r2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	602a      	str	r2, [r5, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	f7f7 fcfa 	bl	80030d8 <_lseek>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	d102      	bne.n	800b6ee <_lseek_r+0x1e>
 800b6e8:	682b      	ldr	r3, [r5, #0]
 800b6ea:	b103      	cbz	r3, 800b6ee <_lseek_r+0x1e>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	20013784 	.word	0x20013784

0800b6f4 <__malloc_lock>:
 800b6f4:	4801      	ldr	r0, [pc, #4]	; (800b6fc <__malloc_lock+0x8>)
 800b6f6:	f7ff bad5 	b.w	800aca4 <__retarget_lock_acquire_recursive>
 800b6fa:	bf00      	nop
 800b6fc:	20013778 	.word	0x20013778

0800b700 <__malloc_unlock>:
 800b700:	4801      	ldr	r0, [pc, #4]	; (800b708 <__malloc_unlock+0x8>)
 800b702:	f7ff bad0 	b.w	800aca6 <__retarget_lock_release_recursive>
 800b706:	bf00      	nop
 800b708:	20013778 	.word	0x20013778

0800b70c <_read_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4d07      	ldr	r5, [pc, #28]	; (800b72c <_read_r+0x20>)
 800b710:	4604      	mov	r4, r0
 800b712:	4608      	mov	r0, r1
 800b714:	4611      	mov	r1, r2
 800b716:	2200      	movs	r2, #0
 800b718:	602a      	str	r2, [r5, #0]
 800b71a:	461a      	mov	r2, r3
 800b71c:	f7f7 fc7c 	bl	8003018 <_read>
 800b720:	1c43      	adds	r3, r0, #1
 800b722:	d102      	bne.n	800b72a <_read_r+0x1e>
 800b724:	682b      	ldr	r3, [r5, #0]
 800b726:	b103      	cbz	r3, 800b72a <_read_r+0x1e>
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	bd38      	pop	{r3, r4, r5, pc}
 800b72c:	20013784 	.word	0x20013784

0800b730 <pow>:
 800b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b732:	ed2d 8b02 	vpush	{d8}
 800b736:	eeb0 8a40 	vmov.f32	s16, s0
 800b73a:	eef0 8a60 	vmov.f32	s17, s1
 800b73e:	ec55 4b11 	vmov	r4, r5, d1
 800b742:	f000 f891 	bl	800b868 <__ieee754_pow>
 800b746:	4622      	mov	r2, r4
 800b748:	462b      	mov	r3, r5
 800b74a:	4620      	mov	r0, r4
 800b74c:	4629      	mov	r1, r5
 800b74e:	ec57 6b10 	vmov	r6, r7, d0
 800b752:	f7f5 f9fb 	bl	8000b4c <__aeabi_dcmpun>
 800b756:	2800      	cmp	r0, #0
 800b758:	d13b      	bne.n	800b7d2 <pow+0xa2>
 800b75a:	ec51 0b18 	vmov	r0, r1, d8
 800b75e:	2200      	movs	r2, #0
 800b760:	2300      	movs	r3, #0
 800b762:	f7f5 f9c1 	bl	8000ae8 <__aeabi_dcmpeq>
 800b766:	b1b8      	cbz	r0, 800b798 <pow+0x68>
 800b768:	2200      	movs	r2, #0
 800b76a:	2300      	movs	r3, #0
 800b76c:	4620      	mov	r0, r4
 800b76e:	4629      	mov	r1, r5
 800b770:	f7f5 f9ba 	bl	8000ae8 <__aeabi_dcmpeq>
 800b774:	2800      	cmp	r0, #0
 800b776:	d146      	bne.n	800b806 <pow+0xd6>
 800b778:	ec45 4b10 	vmov	d0, r4, r5
 800b77c:	f000 fe8d 	bl	800c49a <finite>
 800b780:	b338      	cbz	r0, 800b7d2 <pow+0xa2>
 800b782:	2200      	movs	r2, #0
 800b784:	2300      	movs	r3, #0
 800b786:	4620      	mov	r0, r4
 800b788:	4629      	mov	r1, r5
 800b78a:	f7f5 f9b7 	bl	8000afc <__aeabi_dcmplt>
 800b78e:	b300      	cbz	r0, 800b7d2 <pow+0xa2>
 800b790:	f7fe ff2c 	bl	800a5ec <__errno>
 800b794:	2322      	movs	r3, #34	; 0x22
 800b796:	e01b      	b.n	800b7d0 <pow+0xa0>
 800b798:	ec47 6b10 	vmov	d0, r6, r7
 800b79c:	f000 fe7d 	bl	800c49a <finite>
 800b7a0:	b9e0      	cbnz	r0, 800b7dc <pow+0xac>
 800b7a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b7a6:	eef0 0a68 	vmov.f32	s1, s17
 800b7aa:	f000 fe76 	bl	800c49a <finite>
 800b7ae:	b1a8      	cbz	r0, 800b7dc <pow+0xac>
 800b7b0:	ec45 4b10 	vmov	d0, r4, r5
 800b7b4:	f000 fe71 	bl	800c49a <finite>
 800b7b8:	b180      	cbz	r0, 800b7dc <pow+0xac>
 800b7ba:	4632      	mov	r2, r6
 800b7bc:	463b      	mov	r3, r7
 800b7be:	4630      	mov	r0, r6
 800b7c0:	4639      	mov	r1, r7
 800b7c2:	f7f5 f9c3 	bl	8000b4c <__aeabi_dcmpun>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d0e2      	beq.n	800b790 <pow+0x60>
 800b7ca:	f7fe ff0f 	bl	800a5ec <__errno>
 800b7ce:	2321      	movs	r3, #33	; 0x21
 800b7d0:	6003      	str	r3, [r0, #0]
 800b7d2:	ecbd 8b02 	vpop	{d8}
 800b7d6:	ec47 6b10 	vmov	d0, r6, r7
 800b7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2300      	movs	r3, #0
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	f7f5 f980 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d0f2      	beq.n	800b7d2 <pow+0xa2>
 800b7ec:	eeb0 0a48 	vmov.f32	s0, s16
 800b7f0:	eef0 0a68 	vmov.f32	s1, s17
 800b7f4:	f000 fe51 	bl	800c49a <finite>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d0ea      	beq.n	800b7d2 <pow+0xa2>
 800b7fc:	ec45 4b10 	vmov	d0, r4, r5
 800b800:	f000 fe4b 	bl	800c49a <finite>
 800b804:	e7c3      	b.n	800b78e <pow+0x5e>
 800b806:	4f01      	ldr	r7, [pc, #4]	; (800b80c <pow+0xdc>)
 800b808:	2600      	movs	r6, #0
 800b80a:	e7e2      	b.n	800b7d2 <pow+0xa2>
 800b80c:	3ff00000 	.word	0x3ff00000

0800b810 <sqrt>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	ed2d 8b02 	vpush	{d8}
 800b816:	ec55 4b10 	vmov	r4, r5, d0
 800b81a:	f000 fd53 	bl	800c2c4 <__ieee754_sqrt>
 800b81e:	4622      	mov	r2, r4
 800b820:	462b      	mov	r3, r5
 800b822:	4620      	mov	r0, r4
 800b824:	4629      	mov	r1, r5
 800b826:	eeb0 8a40 	vmov.f32	s16, s0
 800b82a:	eef0 8a60 	vmov.f32	s17, s1
 800b82e:	f7f5 f98d 	bl	8000b4c <__aeabi_dcmpun>
 800b832:	b990      	cbnz	r0, 800b85a <sqrt+0x4a>
 800b834:	2200      	movs	r2, #0
 800b836:	2300      	movs	r3, #0
 800b838:	4620      	mov	r0, r4
 800b83a:	4629      	mov	r1, r5
 800b83c:	f7f5 f95e 	bl	8000afc <__aeabi_dcmplt>
 800b840:	b158      	cbz	r0, 800b85a <sqrt+0x4a>
 800b842:	f7fe fed3 	bl	800a5ec <__errno>
 800b846:	2321      	movs	r3, #33	; 0x21
 800b848:	6003      	str	r3, [r0, #0]
 800b84a:	2200      	movs	r2, #0
 800b84c:	2300      	movs	r3, #0
 800b84e:	4610      	mov	r0, r2
 800b850:	4619      	mov	r1, r3
 800b852:	f7f5 f80b 	bl	800086c <__aeabi_ddiv>
 800b856:	ec41 0b18 	vmov	d8, r0, r1
 800b85a:	eeb0 0a48 	vmov.f32	s0, s16
 800b85e:	eef0 0a68 	vmov.f32	s1, s17
 800b862:	ecbd 8b02 	vpop	{d8}
 800b866:	bd38      	pop	{r3, r4, r5, pc}

0800b868 <__ieee754_pow>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	ed2d 8b06 	vpush	{d8-d10}
 800b870:	b089      	sub	sp, #36	; 0x24
 800b872:	ed8d 1b00 	vstr	d1, [sp]
 800b876:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b87a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b87e:	ea58 0102 	orrs.w	r1, r8, r2
 800b882:	ec57 6b10 	vmov	r6, r7, d0
 800b886:	d115      	bne.n	800b8b4 <__ieee754_pow+0x4c>
 800b888:	19b3      	adds	r3, r6, r6
 800b88a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b88e:	4152      	adcs	r2, r2
 800b890:	4299      	cmp	r1, r3
 800b892:	4b89      	ldr	r3, [pc, #548]	; (800bab8 <__ieee754_pow+0x250>)
 800b894:	4193      	sbcs	r3, r2
 800b896:	f080 84d2 	bcs.w	800c23e <__ieee754_pow+0x9d6>
 800b89a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b89e:	4630      	mov	r0, r6
 800b8a0:	4639      	mov	r1, r7
 800b8a2:	f7f4 fd03 	bl	80002ac <__adddf3>
 800b8a6:	ec41 0b10 	vmov	d0, r0, r1
 800b8aa:	b009      	add	sp, #36	; 0x24
 800b8ac:	ecbd 8b06 	vpop	{d8-d10}
 800b8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b4:	4b81      	ldr	r3, [pc, #516]	; (800babc <__ieee754_pow+0x254>)
 800b8b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b8ba:	429c      	cmp	r4, r3
 800b8bc:	ee10 aa10 	vmov	sl, s0
 800b8c0:	463d      	mov	r5, r7
 800b8c2:	dc06      	bgt.n	800b8d2 <__ieee754_pow+0x6a>
 800b8c4:	d101      	bne.n	800b8ca <__ieee754_pow+0x62>
 800b8c6:	2e00      	cmp	r6, #0
 800b8c8:	d1e7      	bne.n	800b89a <__ieee754_pow+0x32>
 800b8ca:	4598      	cmp	r8, r3
 800b8cc:	dc01      	bgt.n	800b8d2 <__ieee754_pow+0x6a>
 800b8ce:	d10f      	bne.n	800b8f0 <__ieee754_pow+0x88>
 800b8d0:	b172      	cbz	r2, 800b8f0 <__ieee754_pow+0x88>
 800b8d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b8d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b8da:	ea55 050a 	orrs.w	r5, r5, sl
 800b8de:	d1dc      	bne.n	800b89a <__ieee754_pow+0x32>
 800b8e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b8e4:	18db      	adds	r3, r3, r3
 800b8e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b8ea:	4152      	adcs	r2, r2
 800b8ec:	429d      	cmp	r5, r3
 800b8ee:	e7d0      	b.n	800b892 <__ieee754_pow+0x2a>
 800b8f0:	2d00      	cmp	r5, #0
 800b8f2:	da3b      	bge.n	800b96c <__ieee754_pow+0x104>
 800b8f4:	4b72      	ldr	r3, [pc, #456]	; (800bac0 <__ieee754_pow+0x258>)
 800b8f6:	4598      	cmp	r8, r3
 800b8f8:	dc51      	bgt.n	800b99e <__ieee754_pow+0x136>
 800b8fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b8fe:	4598      	cmp	r8, r3
 800b900:	f340 84ac 	ble.w	800c25c <__ieee754_pow+0x9f4>
 800b904:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b908:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b90c:	2b14      	cmp	r3, #20
 800b90e:	dd0f      	ble.n	800b930 <__ieee754_pow+0xc8>
 800b910:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b914:	fa22 f103 	lsr.w	r1, r2, r3
 800b918:	fa01 f303 	lsl.w	r3, r1, r3
 800b91c:	4293      	cmp	r3, r2
 800b91e:	f040 849d 	bne.w	800c25c <__ieee754_pow+0x9f4>
 800b922:	f001 0101 	and.w	r1, r1, #1
 800b926:	f1c1 0302 	rsb	r3, r1, #2
 800b92a:	9304      	str	r3, [sp, #16]
 800b92c:	b182      	cbz	r2, 800b950 <__ieee754_pow+0xe8>
 800b92e:	e05f      	b.n	800b9f0 <__ieee754_pow+0x188>
 800b930:	2a00      	cmp	r2, #0
 800b932:	d15b      	bne.n	800b9ec <__ieee754_pow+0x184>
 800b934:	f1c3 0314 	rsb	r3, r3, #20
 800b938:	fa48 f103 	asr.w	r1, r8, r3
 800b93c:	fa01 f303 	lsl.w	r3, r1, r3
 800b940:	4543      	cmp	r3, r8
 800b942:	f040 8488 	bne.w	800c256 <__ieee754_pow+0x9ee>
 800b946:	f001 0101 	and.w	r1, r1, #1
 800b94a:	f1c1 0302 	rsb	r3, r1, #2
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	4b5c      	ldr	r3, [pc, #368]	; (800bac4 <__ieee754_pow+0x25c>)
 800b952:	4598      	cmp	r8, r3
 800b954:	d132      	bne.n	800b9bc <__ieee754_pow+0x154>
 800b956:	f1b9 0f00 	cmp.w	r9, #0
 800b95a:	f280 8478 	bge.w	800c24e <__ieee754_pow+0x9e6>
 800b95e:	4959      	ldr	r1, [pc, #356]	; (800bac4 <__ieee754_pow+0x25c>)
 800b960:	4632      	mov	r2, r6
 800b962:	463b      	mov	r3, r7
 800b964:	2000      	movs	r0, #0
 800b966:	f7f4 ff81 	bl	800086c <__aeabi_ddiv>
 800b96a:	e79c      	b.n	800b8a6 <__ieee754_pow+0x3e>
 800b96c:	2300      	movs	r3, #0
 800b96e:	9304      	str	r3, [sp, #16]
 800b970:	2a00      	cmp	r2, #0
 800b972:	d13d      	bne.n	800b9f0 <__ieee754_pow+0x188>
 800b974:	4b51      	ldr	r3, [pc, #324]	; (800babc <__ieee754_pow+0x254>)
 800b976:	4598      	cmp	r8, r3
 800b978:	d1ea      	bne.n	800b950 <__ieee754_pow+0xe8>
 800b97a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b97e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b982:	ea53 030a 	orrs.w	r3, r3, sl
 800b986:	f000 845a 	beq.w	800c23e <__ieee754_pow+0x9d6>
 800b98a:	4b4f      	ldr	r3, [pc, #316]	; (800bac8 <__ieee754_pow+0x260>)
 800b98c:	429c      	cmp	r4, r3
 800b98e:	dd08      	ble.n	800b9a2 <__ieee754_pow+0x13a>
 800b990:	f1b9 0f00 	cmp.w	r9, #0
 800b994:	f2c0 8457 	blt.w	800c246 <__ieee754_pow+0x9de>
 800b998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b99c:	e783      	b.n	800b8a6 <__ieee754_pow+0x3e>
 800b99e:	2302      	movs	r3, #2
 800b9a0:	e7e5      	b.n	800b96e <__ieee754_pow+0x106>
 800b9a2:	f1b9 0f00 	cmp.w	r9, #0
 800b9a6:	f04f 0000 	mov.w	r0, #0
 800b9aa:	f04f 0100 	mov.w	r1, #0
 800b9ae:	f6bf af7a 	bge.w	800b8a6 <__ieee754_pow+0x3e>
 800b9b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b9b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9ba:	e774      	b.n	800b8a6 <__ieee754_pow+0x3e>
 800b9bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b9c0:	d106      	bne.n	800b9d0 <__ieee754_pow+0x168>
 800b9c2:	4632      	mov	r2, r6
 800b9c4:	463b      	mov	r3, r7
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	f7f4 fe25 	bl	8000618 <__aeabi_dmul>
 800b9ce:	e76a      	b.n	800b8a6 <__ieee754_pow+0x3e>
 800b9d0:	4b3e      	ldr	r3, [pc, #248]	; (800bacc <__ieee754_pow+0x264>)
 800b9d2:	4599      	cmp	r9, r3
 800b9d4:	d10c      	bne.n	800b9f0 <__ieee754_pow+0x188>
 800b9d6:	2d00      	cmp	r5, #0
 800b9d8:	db0a      	blt.n	800b9f0 <__ieee754_pow+0x188>
 800b9da:	ec47 6b10 	vmov	d0, r6, r7
 800b9de:	b009      	add	sp, #36	; 0x24
 800b9e0:	ecbd 8b06 	vpop	{d8-d10}
 800b9e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e8:	f000 bc6c 	b.w	800c2c4 <__ieee754_sqrt>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	9304      	str	r3, [sp, #16]
 800b9f0:	ec47 6b10 	vmov	d0, r6, r7
 800b9f4:	f000 fd48 	bl	800c488 <fabs>
 800b9f8:	ec51 0b10 	vmov	r0, r1, d0
 800b9fc:	f1ba 0f00 	cmp.w	sl, #0
 800ba00:	d129      	bne.n	800ba56 <__ieee754_pow+0x1ee>
 800ba02:	b124      	cbz	r4, 800ba0e <__ieee754_pow+0x1a6>
 800ba04:	4b2f      	ldr	r3, [pc, #188]	; (800bac4 <__ieee754_pow+0x25c>)
 800ba06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d123      	bne.n	800ba56 <__ieee754_pow+0x1ee>
 800ba0e:	f1b9 0f00 	cmp.w	r9, #0
 800ba12:	da05      	bge.n	800ba20 <__ieee754_pow+0x1b8>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	2000      	movs	r0, #0
 800ba1a:	492a      	ldr	r1, [pc, #168]	; (800bac4 <__ieee754_pow+0x25c>)
 800ba1c:	f7f4 ff26 	bl	800086c <__aeabi_ddiv>
 800ba20:	2d00      	cmp	r5, #0
 800ba22:	f6bf af40 	bge.w	800b8a6 <__ieee754_pow+0x3e>
 800ba26:	9b04      	ldr	r3, [sp, #16]
 800ba28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ba2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ba30:	4323      	orrs	r3, r4
 800ba32:	d108      	bne.n	800ba46 <__ieee754_pow+0x1de>
 800ba34:	4602      	mov	r2, r0
 800ba36:	460b      	mov	r3, r1
 800ba38:	4610      	mov	r0, r2
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	f7f4 fc34 	bl	80002a8 <__aeabi_dsub>
 800ba40:	4602      	mov	r2, r0
 800ba42:	460b      	mov	r3, r1
 800ba44:	e78f      	b.n	800b966 <__ieee754_pow+0xfe>
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	f47f af2c 	bne.w	800b8a6 <__ieee754_pow+0x3e>
 800ba4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba52:	4619      	mov	r1, r3
 800ba54:	e727      	b.n	800b8a6 <__ieee754_pow+0x3e>
 800ba56:	0feb      	lsrs	r3, r5, #31
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	9306      	str	r3, [sp, #24]
 800ba5c:	9a06      	ldr	r2, [sp, #24]
 800ba5e:	9b04      	ldr	r3, [sp, #16]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	d102      	bne.n	800ba6a <__ieee754_pow+0x202>
 800ba64:	4632      	mov	r2, r6
 800ba66:	463b      	mov	r3, r7
 800ba68:	e7e6      	b.n	800ba38 <__ieee754_pow+0x1d0>
 800ba6a:	4b19      	ldr	r3, [pc, #100]	; (800bad0 <__ieee754_pow+0x268>)
 800ba6c:	4598      	cmp	r8, r3
 800ba6e:	f340 80fb 	ble.w	800bc68 <__ieee754_pow+0x400>
 800ba72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ba76:	4598      	cmp	r8, r3
 800ba78:	4b13      	ldr	r3, [pc, #76]	; (800bac8 <__ieee754_pow+0x260>)
 800ba7a:	dd0c      	ble.n	800ba96 <__ieee754_pow+0x22e>
 800ba7c:	429c      	cmp	r4, r3
 800ba7e:	dc0f      	bgt.n	800baa0 <__ieee754_pow+0x238>
 800ba80:	f1b9 0f00 	cmp.w	r9, #0
 800ba84:	da0f      	bge.n	800baa6 <__ieee754_pow+0x23e>
 800ba86:	2000      	movs	r0, #0
 800ba88:	b009      	add	sp, #36	; 0x24
 800ba8a:	ecbd 8b06 	vpop	{d8-d10}
 800ba8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba92:	f000 bcf0 	b.w	800c476 <__math_oflow>
 800ba96:	429c      	cmp	r4, r3
 800ba98:	dbf2      	blt.n	800ba80 <__ieee754_pow+0x218>
 800ba9a:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <__ieee754_pow+0x25c>)
 800ba9c:	429c      	cmp	r4, r3
 800ba9e:	dd19      	ble.n	800bad4 <__ieee754_pow+0x26c>
 800baa0:	f1b9 0f00 	cmp.w	r9, #0
 800baa4:	dcef      	bgt.n	800ba86 <__ieee754_pow+0x21e>
 800baa6:	2000      	movs	r0, #0
 800baa8:	b009      	add	sp, #36	; 0x24
 800baaa:	ecbd 8b06 	vpop	{d8-d10}
 800baae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab2:	f000 bcd7 	b.w	800c464 <__math_uflow>
 800bab6:	bf00      	nop
 800bab8:	fff00000 	.word	0xfff00000
 800babc:	7ff00000 	.word	0x7ff00000
 800bac0:	433fffff 	.word	0x433fffff
 800bac4:	3ff00000 	.word	0x3ff00000
 800bac8:	3fefffff 	.word	0x3fefffff
 800bacc:	3fe00000 	.word	0x3fe00000
 800bad0:	41e00000 	.word	0x41e00000
 800bad4:	4b60      	ldr	r3, [pc, #384]	; (800bc58 <__ieee754_pow+0x3f0>)
 800bad6:	2200      	movs	r2, #0
 800bad8:	f7f4 fbe6 	bl	80002a8 <__aeabi_dsub>
 800badc:	a354      	add	r3, pc, #336	; (adr r3, 800bc30 <__ieee754_pow+0x3c8>)
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	4604      	mov	r4, r0
 800bae4:	460d      	mov	r5, r1
 800bae6:	f7f4 fd97 	bl	8000618 <__aeabi_dmul>
 800baea:	a353      	add	r3, pc, #332	; (adr r3, 800bc38 <__ieee754_pow+0x3d0>)
 800baec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf0:	4606      	mov	r6, r0
 800baf2:	460f      	mov	r7, r1
 800baf4:	4620      	mov	r0, r4
 800baf6:	4629      	mov	r1, r5
 800baf8:	f7f4 fd8e 	bl	8000618 <__aeabi_dmul>
 800bafc:	4b57      	ldr	r3, [pc, #348]	; (800bc5c <__ieee754_pow+0x3f4>)
 800bafe:	4682      	mov	sl, r0
 800bb00:	468b      	mov	fp, r1
 800bb02:	2200      	movs	r2, #0
 800bb04:	4620      	mov	r0, r4
 800bb06:	4629      	mov	r1, r5
 800bb08:	f7f4 fd86 	bl	8000618 <__aeabi_dmul>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	a14b      	add	r1, pc, #300	; (adr r1, 800bc40 <__ieee754_pow+0x3d8>)
 800bb12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb16:	f7f4 fbc7 	bl	80002a8 <__aeabi_dsub>
 800bb1a:	4622      	mov	r2, r4
 800bb1c:	462b      	mov	r3, r5
 800bb1e:	f7f4 fd7b 	bl	8000618 <__aeabi_dmul>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	2000      	movs	r0, #0
 800bb28:	494d      	ldr	r1, [pc, #308]	; (800bc60 <__ieee754_pow+0x3f8>)
 800bb2a:	f7f4 fbbd 	bl	80002a8 <__aeabi_dsub>
 800bb2e:	4622      	mov	r2, r4
 800bb30:	4680      	mov	r8, r0
 800bb32:	4689      	mov	r9, r1
 800bb34:	462b      	mov	r3, r5
 800bb36:	4620      	mov	r0, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7f4 fd6d 	bl	8000618 <__aeabi_dmul>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4640      	mov	r0, r8
 800bb44:	4649      	mov	r1, r9
 800bb46:	f7f4 fd67 	bl	8000618 <__aeabi_dmul>
 800bb4a:	a33f      	add	r3, pc, #252	; (adr r3, 800bc48 <__ieee754_pow+0x3e0>)
 800bb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb50:	f7f4 fd62 	bl	8000618 <__aeabi_dmul>
 800bb54:	4602      	mov	r2, r0
 800bb56:	460b      	mov	r3, r1
 800bb58:	4650      	mov	r0, sl
 800bb5a:	4659      	mov	r1, fp
 800bb5c:	f7f4 fba4 	bl	80002a8 <__aeabi_dsub>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4680      	mov	r8, r0
 800bb66:	4689      	mov	r9, r1
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	f7f4 fb9e 	bl	80002ac <__adddf3>
 800bb70:	2000      	movs	r0, #0
 800bb72:	4632      	mov	r2, r6
 800bb74:	463b      	mov	r3, r7
 800bb76:	4604      	mov	r4, r0
 800bb78:	460d      	mov	r5, r1
 800bb7a:	f7f4 fb95 	bl	80002a8 <__aeabi_dsub>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	460b      	mov	r3, r1
 800bb82:	4640      	mov	r0, r8
 800bb84:	4649      	mov	r1, r9
 800bb86:	f7f4 fb8f 	bl	80002a8 <__aeabi_dsub>
 800bb8a:	9b04      	ldr	r3, [sp, #16]
 800bb8c:	9a06      	ldr	r2, [sp, #24]
 800bb8e:	3b01      	subs	r3, #1
 800bb90:	4313      	orrs	r3, r2
 800bb92:	4682      	mov	sl, r0
 800bb94:	468b      	mov	fp, r1
 800bb96:	f040 81e7 	bne.w	800bf68 <__ieee754_pow+0x700>
 800bb9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bc50 <__ieee754_pow+0x3e8>
 800bb9e:	eeb0 8a47 	vmov.f32	s16, s14
 800bba2:	eef0 8a67 	vmov.f32	s17, s15
 800bba6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bbaa:	2600      	movs	r6, #0
 800bbac:	4632      	mov	r2, r6
 800bbae:	463b      	mov	r3, r7
 800bbb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbb4:	f7f4 fb78 	bl	80002a8 <__aeabi_dsub>
 800bbb8:	4622      	mov	r2, r4
 800bbba:	462b      	mov	r3, r5
 800bbbc:	f7f4 fd2c 	bl	8000618 <__aeabi_dmul>
 800bbc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbc4:	4680      	mov	r8, r0
 800bbc6:	4689      	mov	r9, r1
 800bbc8:	4650      	mov	r0, sl
 800bbca:	4659      	mov	r1, fp
 800bbcc:	f7f4 fd24 	bl	8000618 <__aeabi_dmul>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4640      	mov	r0, r8
 800bbd6:	4649      	mov	r1, r9
 800bbd8:	f7f4 fb68 	bl	80002ac <__adddf3>
 800bbdc:	4632      	mov	r2, r6
 800bbde:	463b      	mov	r3, r7
 800bbe0:	4680      	mov	r8, r0
 800bbe2:	4689      	mov	r9, r1
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	f7f4 fd16 	bl	8000618 <__aeabi_dmul>
 800bbec:	460b      	mov	r3, r1
 800bbee:	4604      	mov	r4, r0
 800bbf0:	460d      	mov	r5, r1
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	4649      	mov	r1, r9
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	f7f4 fb58 	bl	80002ac <__adddf3>
 800bbfc:	4b19      	ldr	r3, [pc, #100]	; (800bc64 <__ieee754_pow+0x3fc>)
 800bbfe:	4299      	cmp	r1, r3
 800bc00:	ec45 4b19 	vmov	d9, r4, r5
 800bc04:	4606      	mov	r6, r0
 800bc06:	460f      	mov	r7, r1
 800bc08:	468b      	mov	fp, r1
 800bc0a:	f340 82f1 	ble.w	800c1f0 <__ieee754_pow+0x988>
 800bc0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bc12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bc16:	4303      	orrs	r3, r0
 800bc18:	f000 81e4 	beq.w	800bfe4 <__ieee754_pow+0x77c>
 800bc1c:	ec51 0b18 	vmov	r0, r1, d8
 800bc20:	2200      	movs	r2, #0
 800bc22:	2300      	movs	r3, #0
 800bc24:	f7f4 ff6a 	bl	8000afc <__aeabi_dcmplt>
 800bc28:	3800      	subs	r0, #0
 800bc2a:	bf18      	it	ne
 800bc2c:	2001      	movne	r0, #1
 800bc2e:	e72b      	b.n	800ba88 <__ieee754_pow+0x220>
 800bc30:	60000000 	.word	0x60000000
 800bc34:	3ff71547 	.word	0x3ff71547
 800bc38:	f85ddf44 	.word	0xf85ddf44
 800bc3c:	3e54ae0b 	.word	0x3e54ae0b
 800bc40:	55555555 	.word	0x55555555
 800bc44:	3fd55555 	.word	0x3fd55555
 800bc48:	652b82fe 	.word	0x652b82fe
 800bc4c:	3ff71547 	.word	0x3ff71547
 800bc50:	00000000 	.word	0x00000000
 800bc54:	bff00000 	.word	0xbff00000
 800bc58:	3ff00000 	.word	0x3ff00000
 800bc5c:	3fd00000 	.word	0x3fd00000
 800bc60:	3fe00000 	.word	0x3fe00000
 800bc64:	408fffff 	.word	0x408fffff
 800bc68:	4bd5      	ldr	r3, [pc, #852]	; (800bfc0 <__ieee754_pow+0x758>)
 800bc6a:	402b      	ands	r3, r5
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	b92b      	cbnz	r3, 800bc7c <__ieee754_pow+0x414>
 800bc70:	4bd4      	ldr	r3, [pc, #848]	; (800bfc4 <__ieee754_pow+0x75c>)
 800bc72:	f7f4 fcd1 	bl	8000618 <__aeabi_dmul>
 800bc76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bc7a:	460c      	mov	r4, r1
 800bc7c:	1523      	asrs	r3, r4, #20
 800bc7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc82:	4413      	add	r3, r2
 800bc84:	9305      	str	r3, [sp, #20]
 800bc86:	4bd0      	ldr	r3, [pc, #832]	; (800bfc8 <__ieee754_pow+0x760>)
 800bc88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc8c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bc90:	429c      	cmp	r4, r3
 800bc92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc96:	dd08      	ble.n	800bcaa <__ieee754_pow+0x442>
 800bc98:	4bcc      	ldr	r3, [pc, #816]	; (800bfcc <__ieee754_pow+0x764>)
 800bc9a:	429c      	cmp	r4, r3
 800bc9c:	f340 8162 	ble.w	800bf64 <__ieee754_pow+0x6fc>
 800bca0:	9b05      	ldr	r3, [sp, #20]
 800bca2:	3301      	adds	r3, #1
 800bca4:	9305      	str	r3, [sp, #20]
 800bca6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bcaa:	2400      	movs	r4, #0
 800bcac:	00e3      	lsls	r3, r4, #3
 800bcae:	9307      	str	r3, [sp, #28]
 800bcb0:	4bc7      	ldr	r3, [pc, #796]	; (800bfd0 <__ieee754_pow+0x768>)
 800bcb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bcb6:	ed93 7b00 	vldr	d7, [r3]
 800bcba:	4629      	mov	r1, r5
 800bcbc:	ec53 2b17 	vmov	r2, r3, d7
 800bcc0:	eeb0 9a47 	vmov.f32	s18, s14
 800bcc4:	eef0 9a67 	vmov.f32	s19, s15
 800bcc8:	4682      	mov	sl, r0
 800bcca:	f7f4 faed 	bl	80002a8 <__aeabi_dsub>
 800bcce:	4652      	mov	r2, sl
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	460f      	mov	r7, r1
 800bcd4:	462b      	mov	r3, r5
 800bcd6:	ec51 0b19 	vmov	r0, r1, d9
 800bcda:	f7f4 fae7 	bl	80002ac <__adddf3>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	2000      	movs	r0, #0
 800bce4:	49bb      	ldr	r1, [pc, #748]	; (800bfd4 <__ieee754_pow+0x76c>)
 800bce6:	f7f4 fdc1 	bl	800086c <__aeabi_ddiv>
 800bcea:	ec41 0b1a 	vmov	d10, r0, r1
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	f7f4 fc8f 	bl	8000618 <__aeabi_dmul>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd00:	9302      	str	r3, [sp, #8]
 800bd02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bd06:	46ab      	mov	fp, r5
 800bd08:	106d      	asrs	r5, r5, #1
 800bd0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bd0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bd12:	ec41 0b18 	vmov	d8, r0, r1
 800bd16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	4640      	mov	r0, r8
 800bd1e:	4649      	mov	r1, r9
 800bd20:	4614      	mov	r4, r2
 800bd22:	461d      	mov	r5, r3
 800bd24:	f7f4 fc78 	bl	8000618 <__aeabi_dmul>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	4639      	mov	r1, r7
 800bd30:	f7f4 faba 	bl	80002a8 <__aeabi_dsub>
 800bd34:	ec53 2b19 	vmov	r2, r3, d9
 800bd38:	4606      	mov	r6, r0
 800bd3a:	460f      	mov	r7, r1
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	4629      	mov	r1, r5
 800bd40:	f7f4 fab2 	bl	80002a8 <__aeabi_dsub>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	4650      	mov	r0, sl
 800bd4a:	4659      	mov	r1, fp
 800bd4c:	f7f4 faac 	bl	80002a8 <__aeabi_dsub>
 800bd50:	4642      	mov	r2, r8
 800bd52:	464b      	mov	r3, r9
 800bd54:	f7f4 fc60 	bl	8000618 <__aeabi_dmul>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	4639      	mov	r1, r7
 800bd60:	f7f4 faa2 	bl	80002a8 <__aeabi_dsub>
 800bd64:	ec53 2b1a 	vmov	r2, r3, d10
 800bd68:	f7f4 fc56 	bl	8000618 <__aeabi_dmul>
 800bd6c:	ec53 2b18 	vmov	r2, r3, d8
 800bd70:	ec41 0b19 	vmov	d9, r0, r1
 800bd74:	ec51 0b18 	vmov	r0, r1, d8
 800bd78:	f7f4 fc4e 	bl	8000618 <__aeabi_dmul>
 800bd7c:	a37c      	add	r3, pc, #496	; (adr r3, 800bf70 <__ieee754_pow+0x708>)
 800bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd82:	4604      	mov	r4, r0
 800bd84:	460d      	mov	r5, r1
 800bd86:	f7f4 fc47 	bl	8000618 <__aeabi_dmul>
 800bd8a:	a37b      	add	r3, pc, #492	; (adr r3, 800bf78 <__ieee754_pow+0x710>)
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	f7f4 fa8c 	bl	80002ac <__adddf3>
 800bd94:	4622      	mov	r2, r4
 800bd96:	462b      	mov	r3, r5
 800bd98:	f7f4 fc3e 	bl	8000618 <__aeabi_dmul>
 800bd9c:	a378      	add	r3, pc, #480	; (adr r3, 800bf80 <__ieee754_pow+0x718>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	f7f4 fa83 	bl	80002ac <__adddf3>
 800bda6:	4622      	mov	r2, r4
 800bda8:	462b      	mov	r3, r5
 800bdaa:	f7f4 fc35 	bl	8000618 <__aeabi_dmul>
 800bdae:	a376      	add	r3, pc, #472	; (adr r3, 800bf88 <__ieee754_pow+0x720>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	f7f4 fa7a 	bl	80002ac <__adddf3>
 800bdb8:	4622      	mov	r2, r4
 800bdba:	462b      	mov	r3, r5
 800bdbc:	f7f4 fc2c 	bl	8000618 <__aeabi_dmul>
 800bdc0:	a373      	add	r3, pc, #460	; (adr r3, 800bf90 <__ieee754_pow+0x728>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	f7f4 fa71 	bl	80002ac <__adddf3>
 800bdca:	4622      	mov	r2, r4
 800bdcc:	462b      	mov	r3, r5
 800bdce:	f7f4 fc23 	bl	8000618 <__aeabi_dmul>
 800bdd2:	a371      	add	r3, pc, #452	; (adr r3, 800bf98 <__ieee754_pow+0x730>)
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f7f4 fa68 	bl	80002ac <__adddf3>
 800bddc:	4622      	mov	r2, r4
 800bdde:	4606      	mov	r6, r0
 800bde0:	460f      	mov	r7, r1
 800bde2:	462b      	mov	r3, r5
 800bde4:	4620      	mov	r0, r4
 800bde6:	4629      	mov	r1, r5
 800bde8:	f7f4 fc16 	bl	8000618 <__aeabi_dmul>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 fc10 	bl	8000618 <__aeabi_dmul>
 800bdf8:	4642      	mov	r2, r8
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	460d      	mov	r5, r1
 800bdfe:	464b      	mov	r3, r9
 800be00:	ec51 0b18 	vmov	r0, r1, d8
 800be04:	f7f4 fa52 	bl	80002ac <__adddf3>
 800be08:	ec53 2b19 	vmov	r2, r3, d9
 800be0c:	f7f4 fc04 	bl	8000618 <__aeabi_dmul>
 800be10:	4622      	mov	r2, r4
 800be12:	462b      	mov	r3, r5
 800be14:	f7f4 fa4a 	bl	80002ac <__adddf3>
 800be18:	4642      	mov	r2, r8
 800be1a:	4682      	mov	sl, r0
 800be1c:	468b      	mov	fp, r1
 800be1e:	464b      	mov	r3, r9
 800be20:	4640      	mov	r0, r8
 800be22:	4649      	mov	r1, r9
 800be24:	f7f4 fbf8 	bl	8000618 <__aeabi_dmul>
 800be28:	4b6b      	ldr	r3, [pc, #428]	; (800bfd8 <__ieee754_pow+0x770>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	4606      	mov	r6, r0
 800be2e:	460f      	mov	r7, r1
 800be30:	f7f4 fa3c 	bl	80002ac <__adddf3>
 800be34:	4652      	mov	r2, sl
 800be36:	465b      	mov	r3, fp
 800be38:	f7f4 fa38 	bl	80002ac <__adddf3>
 800be3c:	2000      	movs	r0, #0
 800be3e:	4604      	mov	r4, r0
 800be40:	460d      	mov	r5, r1
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4640      	mov	r0, r8
 800be48:	4649      	mov	r1, r9
 800be4a:	f7f4 fbe5 	bl	8000618 <__aeabi_dmul>
 800be4e:	4b62      	ldr	r3, [pc, #392]	; (800bfd8 <__ieee754_pow+0x770>)
 800be50:	4680      	mov	r8, r0
 800be52:	4689      	mov	r9, r1
 800be54:	2200      	movs	r2, #0
 800be56:	4620      	mov	r0, r4
 800be58:	4629      	mov	r1, r5
 800be5a:	f7f4 fa25 	bl	80002a8 <__aeabi_dsub>
 800be5e:	4632      	mov	r2, r6
 800be60:	463b      	mov	r3, r7
 800be62:	f7f4 fa21 	bl	80002a8 <__aeabi_dsub>
 800be66:	4602      	mov	r2, r0
 800be68:	460b      	mov	r3, r1
 800be6a:	4650      	mov	r0, sl
 800be6c:	4659      	mov	r1, fp
 800be6e:	f7f4 fa1b 	bl	80002a8 <__aeabi_dsub>
 800be72:	ec53 2b18 	vmov	r2, r3, d8
 800be76:	f7f4 fbcf 	bl	8000618 <__aeabi_dmul>
 800be7a:	4622      	mov	r2, r4
 800be7c:	4606      	mov	r6, r0
 800be7e:	460f      	mov	r7, r1
 800be80:	462b      	mov	r3, r5
 800be82:	ec51 0b19 	vmov	r0, r1, d9
 800be86:	f7f4 fbc7 	bl	8000618 <__aeabi_dmul>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4630      	mov	r0, r6
 800be90:	4639      	mov	r1, r7
 800be92:	f7f4 fa0b 	bl	80002ac <__adddf3>
 800be96:	4606      	mov	r6, r0
 800be98:	460f      	mov	r7, r1
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	4640      	mov	r0, r8
 800bea0:	4649      	mov	r1, r9
 800bea2:	f7f4 fa03 	bl	80002ac <__adddf3>
 800bea6:	a33e      	add	r3, pc, #248	; (adr r3, 800bfa0 <__ieee754_pow+0x738>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	2000      	movs	r0, #0
 800beae:	4604      	mov	r4, r0
 800beb0:	460d      	mov	r5, r1
 800beb2:	f7f4 fbb1 	bl	8000618 <__aeabi_dmul>
 800beb6:	4642      	mov	r2, r8
 800beb8:	ec41 0b18 	vmov	d8, r0, r1
 800bebc:	464b      	mov	r3, r9
 800bebe:	4620      	mov	r0, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	f7f4 f9f1 	bl	80002a8 <__aeabi_dsub>
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	4630      	mov	r0, r6
 800becc:	4639      	mov	r1, r7
 800bece:	f7f4 f9eb 	bl	80002a8 <__aeabi_dsub>
 800bed2:	a335      	add	r3, pc, #212	; (adr r3, 800bfa8 <__ieee754_pow+0x740>)
 800bed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed8:	f7f4 fb9e 	bl	8000618 <__aeabi_dmul>
 800bedc:	a334      	add	r3, pc, #208	; (adr r3, 800bfb0 <__ieee754_pow+0x748>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	4606      	mov	r6, r0
 800bee4:	460f      	mov	r7, r1
 800bee6:	4620      	mov	r0, r4
 800bee8:	4629      	mov	r1, r5
 800beea:	f7f4 fb95 	bl	8000618 <__aeabi_dmul>
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	4630      	mov	r0, r6
 800bef4:	4639      	mov	r1, r7
 800bef6:	f7f4 f9d9 	bl	80002ac <__adddf3>
 800befa:	9a07      	ldr	r2, [sp, #28]
 800befc:	4b37      	ldr	r3, [pc, #220]	; (800bfdc <__ieee754_pow+0x774>)
 800befe:	4413      	add	r3, r2
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	f7f4 f9d2 	bl	80002ac <__adddf3>
 800bf08:	4682      	mov	sl, r0
 800bf0a:	9805      	ldr	r0, [sp, #20]
 800bf0c:	468b      	mov	fp, r1
 800bf0e:	f7f4 fb19 	bl	8000544 <__aeabi_i2d>
 800bf12:	9a07      	ldr	r2, [sp, #28]
 800bf14:	4b32      	ldr	r3, [pc, #200]	; (800bfe0 <__ieee754_pow+0x778>)
 800bf16:	4413      	add	r3, r2
 800bf18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	460f      	mov	r7, r1
 800bf20:	4652      	mov	r2, sl
 800bf22:	465b      	mov	r3, fp
 800bf24:	ec51 0b18 	vmov	r0, r1, d8
 800bf28:	f7f4 f9c0 	bl	80002ac <__adddf3>
 800bf2c:	4642      	mov	r2, r8
 800bf2e:	464b      	mov	r3, r9
 800bf30:	f7f4 f9bc 	bl	80002ac <__adddf3>
 800bf34:	4632      	mov	r2, r6
 800bf36:	463b      	mov	r3, r7
 800bf38:	f7f4 f9b8 	bl	80002ac <__adddf3>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	4632      	mov	r2, r6
 800bf40:	463b      	mov	r3, r7
 800bf42:	4604      	mov	r4, r0
 800bf44:	460d      	mov	r5, r1
 800bf46:	f7f4 f9af 	bl	80002a8 <__aeabi_dsub>
 800bf4a:	4642      	mov	r2, r8
 800bf4c:	464b      	mov	r3, r9
 800bf4e:	f7f4 f9ab 	bl	80002a8 <__aeabi_dsub>
 800bf52:	ec53 2b18 	vmov	r2, r3, d8
 800bf56:	f7f4 f9a7 	bl	80002a8 <__aeabi_dsub>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4650      	mov	r0, sl
 800bf60:	4659      	mov	r1, fp
 800bf62:	e610      	b.n	800bb86 <__ieee754_pow+0x31e>
 800bf64:	2401      	movs	r4, #1
 800bf66:	e6a1      	b.n	800bcac <__ieee754_pow+0x444>
 800bf68:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bfb8 <__ieee754_pow+0x750>
 800bf6c:	e617      	b.n	800bb9e <__ieee754_pow+0x336>
 800bf6e:	bf00      	nop
 800bf70:	4a454eef 	.word	0x4a454eef
 800bf74:	3fca7e28 	.word	0x3fca7e28
 800bf78:	93c9db65 	.word	0x93c9db65
 800bf7c:	3fcd864a 	.word	0x3fcd864a
 800bf80:	a91d4101 	.word	0xa91d4101
 800bf84:	3fd17460 	.word	0x3fd17460
 800bf88:	518f264d 	.word	0x518f264d
 800bf8c:	3fd55555 	.word	0x3fd55555
 800bf90:	db6fabff 	.word	0xdb6fabff
 800bf94:	3fdb6db6 	.word	0x3fdb6db6
 800bf98:	33333303 	.word	0x33333303
 800bf9c:	3fe33333 	.word	0x3fe33333
 800bfa0:	e0000000 	.word	0xe0000000
 800bfa4:	3feec709 	.word	0x3feec709
 800bfa8:	dc3a03fd 	.word	0xdc3a03fd
 800bfac:	3feec709 	.word	0x3feec709
 800bfb0:	145b01f5 	.word	0x145b01f5
 800bfb4:	be3e2fe0 	.word	0xbe3e2fe0
 800bfb8:	00000000 	.word	0x00000000
 800bfbc:	3ff00000 	.word	0x3ff00000
 800bfc0:	7ff00000 	.word	0x7ff00000
 800bfc4:	43400000 	.word	0x43400000
 800bfc8:	0003988e 	.word	0x0003988e
 800bfcc:	000bb679 	.word	0x000bb679
 800bfd0:	08016338 	.word	0x08016338
 800bfd4:	3ff00000 	.word	0x3ff00000
 800bfd8:	40080000 	.word	0x40080000
 800bfdc:	08016358 	.word	0x08016358
 800bfe0:	08016348 	.word	0x08016348
 800bfe4:	a3b5      	add	r3, pc, #724	; (adr r3, 800c2bc <__ieee754_pow+0xa54>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	4640      	mov	r0, r8
 800bfec:	4649      	mov	r1, r9
 800bfee:	f7f4 f95d 	bl	80002ac <__adddf3>
 800bff2:	4622      	mov	r2, r4
 800bff4:	ec41 0b1a 	vmov	d10, r0, r1
 800bff8:	462b      	mov	r3, r5
 800bffa:	4630      	mov	r0, r6
 800bffc:	4639      	mov	r1, r7
 800bffe:	f7f4 f953 	bl	80002a8 <__aeabi_dsub>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	ec51 0b1a 	vmov	r0, r1, d10
 800c00a:	f7f4 fd95 	bl	8000b38 <__aeabi_dcmpgt>
 800c00e:	2800      	cmp	r0, #0
 800c010:	f47f ae04 	bne.w	800bc1c <__ieee754_pow+0x3b4>
 800c014:	4aa4      	ldr	r2, [pc, #656]	; (800c2a8 <__ieee754_pow+0xa40>)
 800c016:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c01a:	4293      	cmp	r3, r2
 800c01c:	f340 8108 	ble.w	800c230 <__ieee754_pow+0x9c8>
 800c020:	151b      	asrs	r3, r3, #20
 800c022:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c026:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c02a:	fa4a f303 	asr.w	r3, sl, r3
 800c02e:	445b      	add	r3, fp
 800c030:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c034:	4e9d      	ldr	r6, [pc, #628]	; (800c2ac <__ieee754_pow+0xa44>)
 800c036:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c03a:	4116      	asrs	r6, r2
 800c03c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c040:	2000      	movs	r0, #0
 800c042:	ea23 0106 	bic.w	r1, r3, r6
 800c046:	f1c2 0214 	rsb	r2, r2, #20
 800c04a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c04e:	fa4a fa02 	asr.w	sl, sl, r2
 800c052:	f1bb 0f00 	cmp.w	fp, #0
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	4620      	mov	r0, r4
 800c05c:	4629      	mov	r1, r5
 800c05e:	bfb8      	it	lt
 800c060:	f1ca 0a00 	rsblt	sl, sl, #0
 800c064:	f7f4 f920 	bl	80002a8 <__aeabi_dsub>
 800c068:	ec41 0b19 	vmov	d9, r0, r1
 800c06c:	4642      	mov	r2, r8
 800c06e:	464b      	mov	r3, r9
 800c070:	ec51 0b19 	vmov	r0, r1, d9
 800c074:	f7f4 f91a 	bl	80002ac <__adddf3>
 800c078:	a37b      	add	r3, pc, #492	; (adr r3, 800c268 <__ieee754_pow+0xa00>)
 800c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07e:	2000      	movs	r0, #0
 800c080:	4604      	mov	r4, r0
 800c082:	460d      	mov	r5, r1
 800c084:	f7f4 fac8 	bl	8000618 <__aeabi_dmul>
 800c088:	ec53 2b19 	vmov	r2, r3, d9
 800c08c:	4606      	mov	r6, r0
 800c08e:	460f      	mov	r7, r1
 800c090:	4620      	mov	r0, r4
 800c092:	4629      	mov	r1, r5
 800c094:	f7f4 f908 	bl	80002a8 <__aeabi_dsub>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4640      	mov	r0, r8
 800c09e:	4649      	mov	r1, r9
 800c0a0:	f7f4 f902 	bl	80002a8 <__aeabi_dsub>
 800c0a4:	a372      	add	r3, pc, #456	; (adr r3, 800c270 <__ieee754_pow+0xa08>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7f4 fab5 	bl	8000618 <__aeabi_dmul>
 800c0ae:	a372      	add	r3, pc, #456	; (adr r3, 800c278 <__ieee754_pow+0xa10>)
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	4680      	mov	r8, r0
 800c0b6:	4689      	mov	r9, r1
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	f7f4 faac 	bl	8000618 <__aeabi_dmul>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4640      	mov	r0, r8
 800c0c6:	4649      	mov	r1, r9
 800c0c8:	f7f4 f8f0 	bl	80002ac <__adddf3>
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	460d      	mov	r5, r1
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	f7f4 f8e8 	bl	80002ac <__adddf3>
 800c0dc:	4632      	mov	r2, r6
 800c0de:	463b      	mov	r3, r7
 800c0e0:	4680      	mov	r8, r0
 800c0e2:	4689      	mov	r9, r1
 800c0e4:	f7f4 f8e0 	bl	80002a8 <__aeabi_dsub>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f7f4 f8da 	bl	80002a8 <__aeabi_dsub>
 800c0f4:	4642      	mov	r2, r8
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	464b      	mov	r3, r9
 800c0fc:	4640      	mov	r0, r8
 800c0fe:	4649      	mov	r1, r9
 800c100:	f7f4 fa8a 	bl	8000618 <__aeabi_dmul>
 800c104:	a35e      	add	r3, pc, #376	; (adr r3, 800c280 <__ieee754_pow+0xa18>)
 800c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10a:	4604      	mov	r4, r0
 800c10c:	460d      	mov	r5, r1
 800c10e:	f7f4 fa83 	bl	8000618 <__aeabi_dmul>
 800c112:	a35d      	add	r3, pc, #372	; (adr r3, 800c288 <__ieee754_pow+0xa20>)
 800c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c118:	f7f4 f8c6 	bl	80002a8 <__aeabi_dsub>
 800c11c:	4622      	mov	r2, r4
 800c11e:	462b      	mov	r3, r5
 800c120:	f7f4 fa7a 	bl	8000618 <__aeabi_dmul>
 800c124:	a35a      	add	r3, pc, #360	; (adr r3, 800c290 <__ieee754_pow+0xa28>)
 800c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12a:	f7f4 f8bf 	bl	80002ac <__adddf3>
 800c12e:	4622      	mov	r2, r4
 800c130:	462b      	mov	r3, r5
 800c132:	f7f4 fa71 	bl	8000618 <__aeabi_dmul>
 800c136:	a358      	add	r3, pc, #352	; (adr r3, 800c298 <__ieee754_pow+0xa30>)
 800c138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13c:	f7f4 f8b4 	bl	80002a8 <__aeabi_dsub>
 800c140:	4622      	mov	r2, r4
 800c142:	462b      	mov	r3, r5
 800c144:	f7f4 fa68 	bl	8000618 <__aeabi_dmul>
 800c148:	a355      	add	r3, pc, #340	; (adr r3, 800c2a0 <__ieee754_pow+0xa38>)
 800c14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14e:	f7f4 f8ad 	bl	80002ac <__adddf3>
 800c152:	4622      	mov	r2, r4
 800c154:	462b      	mov	r3, r5
 800c156:	f7f4 fa5f 	bl	8000618 <__aeabi_dmul>
 800c15a:	4602      	mov	r2, r0
 800c15c:	460b      	mov	r3, r1
 800c15e:	4640      	mov	r0, r8
 800c160:	4649      	mov	r1, r9
 800c162:	f7f4 f8a1 	bl	80002a8 <__aeabi_dsub>
 800c166:	4604      	mov	r4, r0
 800c168:	460d      	mov	r5, r1
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	4640      	mov	r0, r8
 800c170:	4649      	mov	r1, r9
 800c172:	f7f4 fa51 	bl	8000618 <__aeabi_dmul>
 800c176:	2200      	movs	r2, #0
 800c178:	ec41 0b19 	vmov	d9, r0, r1
 800c17c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c180:	4620      	mov	r0, r4
 800c182:	4629      	mov	r1, r5
 800c184:	f7f4 f890 	bl	80002a8 <__aeabi_dsub>
 800c188:	4602      	mov	r2, r0
 800c18a:	460b      	mov	r3, r1
 800c18c:	ec51 0b19 	vmov	r0, r1, d9
 800c190:	f7f4 fb6c 	bl	800086c <__aeabi_ddiv>
 800c194:	4632      	mov	r2, r6
 800c196:	4604      	mov	r4, r0
 800c198:	460d      	mov	r5, r1
 800c19a:	463b      	mov	r3, r7
 800c19c:	4640      	mov	r0, r8
 800c19e:	4649      	mov	r1, r9
 800c1a0:	f7f4 fa3a 	bl	8000618 <__aeabi_dmul>
 800c1a4:	4632      	mov	r2, r6
 800c1a6:	463b      	mov	r3, r7
 800c1a8:	f7f4 f880 	bl	80002ac <__adddf3>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	f7f4 f878 	bl	80002a8 <__aeabi_dsub>
 800c1b8:	4642      	mov	r2, r8
 800c1ba:	464b      	mov	r3, r9
 800c1bc:	f7f4 f874 	bl	80002a8 <__aeabi_dsub>
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	493a      	ldr	r1, [pc, #232]	; (800c2b0 <__ieee754_pow+0xa48>)
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	f7f4 f86e 	bl	80002a8 <__aeabi_dsub>
 800c1cc:	ec41 0b10 	vmov	d0, r0, r1
 800c1d0:	ee10 3a90 	vmov	r3, s1
 800c1d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c1d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1dc:	da2b      	bge.n	800c236 <__ieee754_pow+0x9ce>
 800c1de:	4650      	mov	r0, sl
 800c1e0:	f000 f966 	bl	800c4b0 <scalbn>
 800c1e4:	ec51 0b10 	vmov	r0, r1, d0
 800c1e8:	ec53 2b18 	vmov	r2, r3, d8
 800c1ec:	f7ff bbed 	b.w	800b9ca <__ieee754_pow+0x162>
 800c1f0:	4b30      	ldr	r3, [pc, #192]	; (800c2b4 <__ieee754_pow+0xa4c>)
 800c1f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c1f6:	429e      	cmp	r6, r3
 800c1f8:	f77f af0c 	ble.w	800c014 <__ieee754_pow+0x7ac>
 800c1fc:	4b2e      	ldr	r3, [pc, #184]	; (800c2b8 <__ieee754_pow+0xa50>)
 800c1fe:	440b      	add	r3, r1
 800c200:	4303      	orrs	r3, r0
 800c202:	d009      	beq.n	800c218 <__ieee754_pow+0x9b0>
 800c204:	ec51 0b18 	vmov	r0, r1, d8
 800c208:	2200      	movs	r2, #0
 800c20a:	2300      	movs	r3, #0
 800c20c:	f7f4 fc76 	bl	8000afc <__aeabi_dcmplt>
 800c210:	3800      	subs	r0, #0
 800c212:	bf18      	it	ne
 800c214:	2001      	movne	r0, #1
 800c216:	e447      	b.n	800baa8 <__ieee754_pow+0x240>
 800c218:	4622      	mov	r2, r4
 800c21a:	462b      	mov	r3, r5
 800c21c:	f7f4 f844 	bl	80002a8 <__aeabi_dsub>
 800c220:	4642      	mov	r2, r8
 800c222:	464b      	mov	r3, r9
 800c224:	f7f4 fc7e 	bl	8000b24 <__aeabi_dcmpge>
 800c228:	2800      	cmp	r0, #0
 800c22a:	f43f aef3 	beq.w	800c014 <__ieee754_pow+0x7ac>
 800c22e:	e7e9      	b.n	800c204 <__ieee754_pow+0x99c>
 800c230:	f04f 0a00 	mov.w	sl, #0
 800c234:	e71a      	b.n	800c06c <__ieee754_pow+0x804>
 800c236:	ec51 0b10 	vmov	r0, r1, d0
 800c23a:	4619      	mov	r1, r3
 800c23c:	e7d4      	b.n	800c1e8 <__ieee754_pow+0x980>
 800c23e:	491c      	ldr	r1, [pc, #112]	; (800c2b0 <__ieee754_pow+0xa48>)
 800c240:	2000      	movs	r0, #0
 800c242:	f7ff bb30 	b.w	800b8a6 <__ieee754_pow+0x3e>
 800c246:	2000      	movs	r0, #0
 800c248:	2100      	movs	r1, #0
 800c24a:	f7ff bb2c 	b.w	800b8a6 <__ieee754_pow+0x3e>
 800c24e:	4630      	mov	r0, r6
 800c250:	4639      	mov	r1, r7
 800c252:	f7ff bb28 	b.w	800b8a6 <__ieee754_pow+0x3e>
 800c256:	9204      	str	r2, [sp, #16]
 800c258:	f7ff bb7a 	b.w	800b950 <__ieee754_pow+0xe8>
 800c25c:	2300      	movs	r3, #0
 800c25e:	f7ff bb64 	b.w	800b92a <__ieee754_pow+0xc2>
 800c262:	bf00      	nop
 800c264:	f3af 8000 	nop.w
 800c268:	00000000 	.word	0x00000000
 800c26c:	3fe62e43 	.word	0x3fe62e43
 800c270:	fefa39ef 	.word	0xfefa39ef
 800c274:	3fe62e42 	.word	0x3fe62e42
 800c278:	0ca86c39 	.word	0x0ca86c39
 800c27c:	be205c61 	.word	0xbe205c61
 800c280:	72bea4d0 	.word	0x72bea4d0
 800c284:	3e663769 	.word	0x3e663769
 800c288:	c5d26bf1 	.word	0xc5d26bf1
 800c28c:	3ebbbd41 	.word	0x3ebbbd41
 800c290:	af25de2c 	.word	0xaf25de2c
 800c294:	3f11566a 	.word	0x3f11566a
 800c298:	16bebd93 	.word	0x16bebd93
 800c29c:	3f66c16c 	.word	0x3f66c16c
 800c2a0:	5555553e 	.word	0x5555553e
 800c2a4:	3fc55555 	.word	0x3fc55555
 800c2a8:	3fe00000 	.word	0x3fe00000
 800c2ac:	000fffff 	.word	0x000fffff
 800c2b0:	3ff00000 	.word	0x3ff00000
 800c2b4:	4090cbff 	.word	0x4090cbff
 800c2b8:	3f6f3400 	.word	0x3f6f3400
 800c2bc:	652b82fe 	.word	0x652b82fe
 800c2c0:	3c971547 	.word	0x3c971547

0800c2c4 <__ieee754_sqrt>:
 800c2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c8:	ec55 4b10 	vmov	r4, r5, d0
 800c2cc:	4e55      	ldr	r6, [pc, #340]	; (800c424 <__ieee754_sqrt+0x160>)
 800c2ce:	43ae      	bics	r6, r5
 800c2d0:	ee10 0a10 	vmov	r0, s0
 800c2d4:	ee10 3a10 	vmov	r3, s0
 800c2d8:	462a      	mov	r2, r5
 800c2da:	4629      	mov	r1, r5
 800c2dc:	d110      	bne.n	800c300 <__ieee754_sqrt+0x3c>
 800c2de:	ee10 2a10 	vmov	r2, s0
 800c2e2:	462b      	mov	r3, r5
 800c2e4:	f7f4 f998 	bl	8000618 <__aeabi_dmul>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	f7f3 ffdc 	bl	80002ac <__adddf3>
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	460d      	mov	r5, r1
 800c2f8:	ec45 4b10 	vmov	d0, r4, r5
 800c2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c300:	2d00      	cmp	r5, #0
 800c302:	dc10      	bgt.n	800c326 <__ieee754_sqrt+0x62>
 800c304:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c308:	4330      	orrs	r0, r6
 800c30a:	d0f5      	beq.n	800c2f8 <__ieee754_sqrt+0x34>
 800c30c:	b15d      	cbz	r5, 800c326 <__ieee754_sqrt+0x62>
 800c30e:	ee10 2a10 	vmov	r2, s0
 800c312:	462b      	mov	r3, r5
 800c314:	ee10 0a10 	vmov	r0, s0
 800c318:	f7f3 ffc6 	bl	80002a8 <__aeabi_dsub>
 800c31c:	4602      	mov	r2, r0
 800c31e:	460b      	mov	r3, r1
 800c320:	f7f4 faa4 	bl	800086c <__aeabi_ddiv>
 800c324:	e7e6      	b.n	800c2f4 <__ieee754_sqrt+0x30>
 800c326:	1512      	asrs	r2, r2, #20
 800c328:	d074      	beq.n	800c414 <__ieee754_sqrt+0x150>
 800c32a:	07d4      	lsls	r4, r2, #31
 800c32c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c330:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c334:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c338:	bf5e      	ittt	pl
 800c33a:	0fda      	lsrpl	r2, r3, #31
 800c33c:	005b      	lslpl	r3, r3, #1
 800c33e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c342:	2400      	movs	r4, #0
 800c344:	0fda      	lsrs	r2, r3, #31
 800c346:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c34a:	107f      	asrs	r7, r7, #1
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	2516      	movs	r5, #22
 800c350:	4620      	mov	r0, r4
 800c352:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c356:	1886      	adds	r6, r0, r2
 800c358:	428e      	cmp	r6, r1
 800c35a:	bfde      	ittt	le
 800c35c:	1b89      	suble	r1, r1, r6
 800c35e:	18b0      	addle	r0, r6, r2
 800c360:	18a4      	addle	r4, r4, r2
 800c362:	0049      	lsls	r1, r1, #1
 800c364:	3d01      	subs	r5, #1
 800c366:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c36a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c36e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c372:	d1f0      	bne.n	800c356 <__ieee754_sqrt+0x92>
 800c374:	462a      	mov	r2, r5
 800c376:	f04f 0e20 	mov.w	lr, #32
 800c37a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c37e:	4281      	cmp	r1, r0
 800c380:	eb06 0c05 	add.w	ip, r6, r5
 800c384:	dc02      	bgt.n	800c38c <__ieee754_sqrt+0xc8>
 800c386:	d113      	bne.n	800c3b0 <__ieee754_sqrt+0xec>
 800c388:	459c      	cmp	ip, r3
 800c38a:	d811      	bhi.n	800c3b0 <__ieee754_sqrt+0xec>
 800c38c:	f1bc 0f00 	cmp.w	ip, #0
 800c390:	eb0c 0506 	add.w	r5, ip, r6
 800c394:	da43      	bge.n	800c41e <__ieee754_sqrt+0x15a>
 800c396:	2d00      	cmp	r5, #0
 800c398:	db41      	blt.n	800c41e <__ieee754_sqrt+0x15a>
 800c39a:	f100 0801 	add.w	r8, r0, #1
 800c39e:	1a09      	subs	r1, r1, r0
 800c3a0:	459c      	cmp	ip, r3
 800c3a2:	bf88      	it	hi
 800c3a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c3a8:	eba3 030c 	sub.w	r3, r3, ip
 800c3ac:	4432      	add	r2, r6
 800c3ae:	4640      	mov	r0, r8
 800c3b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c3b4:	f1be 0e01 	subs.w	lr, lr, #1
 800c3b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c3bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c3c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c3c4:	d1db      	bne.n	800c37e <__ieee754_sqrt+0xba>
 800c3c6:	430b      	orrs	r3, r1
 800c3c8:	d006      	beq.n	800c3d8 <__ieee754_sqrt+0x114>
 800c3ca:	1c50      	adds	r0, r2, #1
 800c3cc:	bf13      	iteet	ne
 800c3ce:	3201      	addne	r2, #1
 800c3d0:	3401      	addeq	r4, #1
 800c3d2:	4672      	moveq	r2, lr
 800c3d4:	f022 0201 	bicne.w	r2, r2, #1
 800c3d8:	1063      	asrs	r3, r4, #1
 800c3da:	0852      	lsrs	r2, r2, #1
 800c3dc:	07e1      	lsls	r1, r4, #31
 800c3de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c3e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c3e6:	bf48      	it	mi
 800c3e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c3ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c3f0:	4614      	mov	r4, r2
 800c3f2:	e781      	b.n	800c2f8 <__ieee754_sqrt+0x34>
 800c3f4:	0ad9      	lsrs	r1, r3, #11
 800c3f6:	3815      	subs	r0, #21
 800c3f8:	055b      	lsls	r3, r3, #21
 800c3fa:	2900      	cmp	r1, #0
 800c3fc:	d0fa      	beq.n	800c3f4 <__ieee754_sqrt+0x130>
 800c3fe:	02cd      	lsls	r5, r1, #11
 800c400:	d50a      	bpl.n	800c418 <__ieee754_sqrt+0x154>
 800c402:	f1c2 0420 	rsb	r4, r2, #32
 800c406:	fa23 f404 	lsr.w	r4, r3, r4
 800c40a:	1e55      	subs	r5, r2, #1
 800c40c:	4093      	lsls	r3, r2
 800c40e:	4321      	orrs	r1, r4
 800c410:	1b42      	subs	r2, r0, r5
 800c412:	e78a      	b.n	800c32a <__ieee754_sqrt+0x66>
 800c414:	4610      	mov	r0, r2
 800c416:	e7f0      	b.n	800c3fa <__ieee754_sqrt+0x136>
 800c418:	0049      	lsls	r1, r1, #1
 800c41a:	3201      	adds	r2, #1
 800c41c:	e7ef      	b.n	800c3fe <__ieee754_sqrt+0x13a>
 800c41e:	4680      	mov	r8, r0
 800c420:	e7bd      	b.n	800c39e <__ieee754_sqrt+0xda>
 800c422:	bf00      	nop
 800c424:	7ff00000 	.word	0x7ff00000

0800c428 <with_errno>:
 800c428:	b570      	push	{r4, r5, r6, lr}
 800c42a:	4604      	mov	r4, r0
 800c42c:	460d      	mov	r5, r1
 800c42e:	4616      	mov	r6, r2
 800c430:	f7fe f8dc 	bl	800a5ec <__errno>
 800c434:	4629      	mov	r1, r5
 800c436:	6006      	str	r6, [r0, #0]
 800c438:	4620      	mov	r0, r4
 800c43a:	bd70      	pop	{r4, r5, r6, pc}

0800c43c <xflow>:
 800c43c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c43e:	4614      	mov	r4, r2
 800c440:	461d      	mov	r5, r3
 800c442:	b108      	cbz	r0, 800c448 <xflow+0xc>
 800c444:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c448:	e9cd 2300 	strd	r2, r3, [sp]
 800c44c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c450:	4620      	mov	r0, r4
 800c452:	4629      	mov	r1, r5
 800c454:	f7f4 f8e0 	bl	8000618 <__aeabi_dmul>
 800c458:	2222      	movs	r2, #34	; 0x22
 800c45a:	b003      	add	sp, #12
 800c45c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c460:	f7ff bfe2 	b.w	800c428 <with_errno>

0800c464 <__math_uflow>:
 800c464:	b508      	push	{r3, lr}
 800c466:	2200      	movs	r2, #0
 800c468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c46c:	f7ff ffe6 	bl	800c43c <xflow>
 800c470:	ec41 0b10 	vmov	d0, r0, r1
 800c474:	bd08      	pop	{r3, pc}

0800c476 <__math_oflow>:
 800c476:	b508      	push	{r3, lr}
 800c478:	2200      	movs	r2, #0
 800c47a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c47e:	f7ff ffdd 	bl	800c43c <xflow>
 800c482:	ec41 0b10 	vmov	d0, r0, r1
 800c486:	bd08      	pop	{r3, pc}

0800c488 <fabs>:
 800c488:	ec51 0b10 	vmov	r0, r1, d0
 800c48c:	ee10 2a10 	vmov	r2, s0
 800c490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c494:	ec43 2b10 	vmov	d0, r2, r3
 800c498:	4770      	bx	lr

0800c49a <finite>:
 800c49a:	b082      	sub	sp, #8
 800c49c:	ed8d 0b00 	vstr	d0, [sp]
 800c4a0:	9801      	ldr	r0, [sp, #4]
 800c4a2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c4a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c4aa:	0fc0      	lsrs	r0, r0, #31
 800c4ac:	b002      	add	sp, #8
 800c4ae:	4770      	bx	lr

0800c4b0 <scalbn>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	ec55 4b10 	vmov	r4, r5, d0
 800c4b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c4ba:	4606      	mov	r6, r0
 800c4bc:	462b      	mov	r3, r5
 800c4be:	b99a      	cbnz	r2, 800c4e8 <scalbn+0x38>
 800c4c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c4c4:	4323      	orrs	r3, r4
 800c4c6:	d036      	beq.n	800c536 <scalbn+0x86>
 800c4c8:	4b39      	ldr	r3, [pc, #228]	; (800c5b0 <scalbn+0x100>)
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	ee10 0a10 	vmov	r0, s0
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f7f4 f8a1 	bl	8000618 <__aeabi_dmul>
 800c4d6:	4b37      	ldr	r3, [pc, #220]	; (800c5b4 <scalbn+0x104>)
 800c4d8:	429e      	cmp	r6, r3
 800c4da:	4604      	mov	r4, r0
 800c4dc:	460d      	mov	r5, r1
 800c4de:	da10      	bge.n	800c502 <scalbn+0x52>
 800c4e0:	a32b      	add	r3, pc, #172	; (adr r3, 800c590 <scalbn+0xe0>)
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	e03a      	b.n	800c55e <scalbn+0xae>
 800c4e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c4ec:	428a      	cmp	r2, r1
 800c4ee:	d10c      	bne.n	800c50a <scalbn+0x5a>
 800c4f0:	ee10 2a10 	vmov	r2, s0
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	4629      	mov	r1, r5
 800c4f8:	f7f3 fed8 	bl	80002ac <__adddf3>
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	460d      	mov	r5, r1
 800c500:	e019      	b.n	800c536 <scalbn+0x86>
 800c502:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c506:	460b      	mov	r3, r1
 800c508:	3a36      	subs	r2, #54	; 0x36
 800c50a:	4432      	add	r2, r6
 800c50c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c510:	428a      	cmp	r2, r1
 800c512:	dd08      	ble.n	800c526 <scalbn+0x76>
 800c514:	2d00      	cmp	r5, #0
 800c516:	a120      	add	r1, pc, #128	; (adr r1, 800c598 <scalbn+0xe8>)
 800c518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c51c:	da1c      	bge.n	800c558 <scalbn+0xa8>
 800c51e:	a120      	add	r1, pc, #128	; (adr r1, 800c5a0 <scalbn+0xf0>)
 800c520:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c524:	e018      	b.n	800c558 <scalbn+0xa8>
 800c526:	2a00      	cmp	r2, #0
 800c528:	dd08      	ble.n	800c53c <scalbn+0x8c>
 800c52a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c52e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c532:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c536:	ec45 4b10 	vmov	d0, r4, r5
 800c53a:	bd70      	pop	{r4, r5, r6, pc}
 800c53c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c540:	da19      	bge.n	800c576 <scalbn+0xc6>
 800c542:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c546:	429e      	cmp	r6, r3
 800c548:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c54c:	dd0a      	ble.n	800c564 <scalbn+0xb4>
 800c54e:	a112      	add	r1, pc, #72	; (adr r1, 800c598 <scalbn+0xe8>)
 800c550:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1e2      	bne.n	800c51e <scalbn+0x6e>
 800c558:	a30f      	add	r3, pc, #60	; (adr r3, 800c598 <scalbn+0xe8>)
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	f7f4 f85b 	bl	8000618 <__aeabi_dmul>
 800c562:	e7cb      	b.n	800c4fc <scalbn+0x4c>
 800c564:	a10a      	add	r1, pc, #40	; (adr r1, 800c590 <scalbn+0xe0>)
 800c566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d0b8      	beq.n	800c4e0 <scalbn+0x30>
 800c56e:	a10e      	add	r1, pc, #56	; (adr r1, 800c5a8 <scalbn+0xf8>)
 800c570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c574:	e7b4      	b.n	800c4e0 <scalbn+0x30>
 800c576:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c57a:	3236      	adds	r2, #54	; 0x36
 800c57c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c580:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c584:	4620      	mov	r0, r4
 800c586:	4b0c      	ldr	r3, [pc, #48]	; (800c5b8 <scalbn+0x108>)
 800c588:	2200      	movs	r2, #0
 800c58a:	e7e8      	b.n	800c55e <scalbn+0xae>
 800c58c:	f3af 8000 	nop.w
 800c590:	c2f8f359 	.word	0xc2f8f359
 800c594:	01a56e1f 	.word	0x01a56e1f
 800c598:	8800759c 	.word	0x8800759c
 800c59c:	7e37e43c 	.word	0x7e37e43c
 800c5a0:	8800759c 	.word	0x8800759c
 800c5a4:	fe37e43c 	.word	0xfe37e43c
 800c5a8:	c2f8f359 	.word	0xc2f8f359
 800c5ac:	81a56e1f 	.word	0x81a56e1f
 800c5b0:	43500000 	.word	0x43500000
 800c5b4:	ffff3cb0 	.word	0xffff3cb0
 800c5b8:	3c900000 	.word	0x3c900000

0800c5bc <_init>:
 800c5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5be:	bf00      	nop
 800c5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5c2:	bc08      	pop	{r3}
 800c5c4:	469e      	mov	lr, r3
 800c5c6:	4770      	bx	lr

0800c5c8 <_fini>:
 800c5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ca:	bf00      	nop
 800c5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ce:	bc08      	pop	{r3}
 800c5d0:	469e      	mov	lr, r3
 800c5d2:	4770      	bx	lr
