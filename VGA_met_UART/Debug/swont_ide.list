
swont_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800a748  0800a748  0001a748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab44  0800ab44  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab44  0800ab44  0001ab44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab4c  0800ab4c  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab4c  0800ab4c  0001ab4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab50  0800ab50  0001ab50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800ab54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013490  2000017c  0800acd0  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001360c  0800acd0  0002360c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c11  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003968  00000000  00000000  00037dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003cb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b34  00000000  00000000  0003dd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001da3c  00000000  00000000  00064864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1393  00000000  00000000  000822a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a68  00000000  00000000  00153684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a730 	.word	0x0800a730

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800a730 	.word	0x0800a730

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006cc:	f000 b974 	b.w	80009b8 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f806 	bl	80006e8 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__udivmoddi4>:
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	9d08      	ldr	r5, [sp, #32]
 80006ee:	4604      	mov	r4, r0
 80006f0:	468e      	mov	lr, r1
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d14d      	bne.n	8000792 <__udivmoddi4+0xaa>
 80006f6:	428a      	cmp	r2, r1
 80006f8:	4694      	mov	ip, r2
 80006fa:	d969      	bls.n	80007d0 <__udivmoddi4+0xe8>
 80006fc:	fab2 f282 	clz	r2, r2
 8000700:	b152      	cbz	r2, 8000718 <__udivmoddi4+0x30>
 8000702:	fa01 f302 	lsl.w	r3, r1, r2
 8000706:	f1c2 0120 	rsb	r1, r2, #32
 800070a:	fa20 f101 	lsr.w	r1, r0, r1
 800070e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000712:	ea41 0e03 	orr.w	lr, r1, r3
 8000716:	4094      	lsls	r4, r2
 8000718:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800071c:	0c21      	lsrs	r1, r4, #16
 800071e:	fbbe f6f8 	udiv	r6, lr, r8
 8000722:	fa1f f78c 	uxth.w	r7, ip
 8000726:	fb08 e316 	mls	r3, r8, r6, lr
 800072a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800072e:	fb06 f107 	mul.w	r1, r6, r7
 8000732:	4299      	cmp	r1, r3
 8000734:	d90a      	bls.n	800074c <__udivmoddi4+0x64>
 8000736:	eb1c 0303 	adds.w	r3, ip, r3
 800073a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800073e:	f080 811f 	bcs.w	8000980 <__udivmoddi4+0x298>
 8000742:	4299      	cmp	r1, r3
 8000744:	f240 811c 	bls.w	8000980 <__udivmoddi4+0x298>
 8000748:	3e02      	subs	r6, #2
 800074a:	4463      	add	r3, ip
 800074c:	1a5b      	subs	r3, r3, r1
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb3 f0f8 	udiv	r0, r3, r8
 8000754:	fb08 3310 	mls	r3, r8, r0, r3
 8000758:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800075c:	fb00 f707 	mul.w	r7, r0, r7
 8000760:	42a7      	cmp	r7, r4
 8000762:	d90a      	bls.n	800077a <__udivmoddi4+0x92>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800076c:	f080 810a 	bcs.w	8000984 <__udivmoddi4+0x29c>
 8000770:	42a7      	cmp	r7, r4
 8000772:	f240 8107 	bls.w	8000984 <__udivmoddi4+0x29c>
 8000776:	4464      	add	r4, ip
 8000778:	3802      	subs	r0, #2
 800077a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800077e:	1be4      	subs	r4, r4, r7
 8000780:	2600      	movs	r6, #0
 8000782:	b11d      	cbz	r5, 800078c <__udivmoddi4+0xa4>
 8000784:	40d4      	lsrs	r4, r2
 8000786:	2300      	movs	r3, #0
 8000788:	e9c5 4300 	strd	r4, r3, [r5]
 800078c:	4631      	mov	r1, r6
 800078e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000792:	428b      	cmp	r3, r1
 8000794:	d909      	bls.n	80007aa <__udivmoddi4+0xc2>
 8000796:	2d00      	cmp	r5, #0
 8000798:	f000 80ef 	beq.w	800097a <__udivmoddi4+0x292>
 800079c:	2600      	movs	r6, #0
 800079e:	e9c5 0100 	strd	r0, r1, [r5]
 80007a2:	4630      	mov	r0, r6
 80007a4:	4631      	mov	r1, r6
 80007a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007aa:	fab3 f683 	clz	r6, r3
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d14a      	bne.n	8000848 <__udivmoddi4+0x160>
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d302      	bcc.n	80007bc <__udivmoddi4+0xd4>
 80007b6:	4282      	cmp	r2, r0
 80007b8:	f200 80f9 	bhi.w	80009ae <__udivmoddi4+0x2c6>
 80007bc:	1a84      	subs	r4, r0, r2
 80007be:	eb61 0303 	sbc.w	r3, r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	469e      	mov	lr, r3
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d0e0      	beq.n	800078c <__udivmoddi4+0xa4>
 80007ca:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ce:	e7dd      	b.n	800078c <__udivmoddi4+0xa4>
 80007d0:	b902      	cbnz	r2, 80007d4 <__udivmoddi4+0xec>
 80007d2:	deff      	udf	#255	; 0xff
 80007d4:	fab2 f282 	clz	r2, r2
 80007d8:	2a00      	cmp	r2, #0
 80007da:	f040 8092 	bne.w	8000902 <__udivmoddi4+0x21a>
 80007de:	eba1 010c 	sub.w	r1, r1, ip
 80007e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007e6:	fa1f fe8c 	uxth.w	lr, ip
 80007ea:	2601      	movs	r6, #1
 80007ec:	0c20      	lsrs	r0, r4, #16
 80007ee:	fbb1 f3f7 	udiv	r3, r1, r7
 80007f2:	fb07 1113 	mls	r1, r7, r3, r1
 80007f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007fa:	fb0e f003 	mul.w	r0, lr, r3
 80007fe:	4288      	cmp	r0, r1
 8000800:	d908      	bls.n	8000814 <__udivmoddi4+0x12c>
 8000802:	eb1c 0101 	adds.w	r1, ip, r1
 8000806:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x12a>
 800080c:	4288      	cmp	r0, r1
 800080e:	f200 80cb 	bhi.w	80009a8 <__udivmoddi4+0x2c0>
 8000812:	4643      	mov	r3, r8
 8000814:	1a09      	subs	r1, r1, r0
 8000816:	b2a4      	uxth	r4, r4
 8000818:	fbb1 f0f7 	udiv	r0, r1, r7
 800081c:	fb07 1110 	mls	r1, r7, r0, r1
 8000820:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000824:	fb0e fe00 	mul.w	lr, lr, r0
 8000828:	45a6      	cmp	lr, r4
 800082a:	d908      	bls.n	800083e <__udivmoddi4+0x156>
 800082c:	eb1c 0404 	adds.w	r4, ip, r4
 8000830:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000834:	d202      	bcs.n	800083c <__udivmoddi4+0x154>
 8000836:	45a6      	cmp	lr, r4
 8000838:	f200 80bb 	bhi.w	80009b2 <__udivmoddi4+0x2ca>
 800083c:	4608      	mov	r0, r1
 800083e:	eba4 040e 	sub.w	r4, r4, lr
 8000842:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000846:	e79c      	b.n	8000782 <__udivmoddi4+0x9a>
 8000848:	f1c6 0720 	rsb	r7, r6, #32
 800084c:	40b3      	lsls	r3, r6
 800084e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000852:	ea4c 0c03 	orr.w	ip, ip, r3
 8000856:	fa20 f407 	lsr.w	r4, r0, r7
 800085a:	fa01 f306 	lsl.w	r3, r1, r6
 800085e:	431c      	orrs	r4, r3
 8000860:	40f9      	lsrs	r1, r7
 8000862:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000866:	fa00 f306 	lsl.w	r3, r0, r6
 800086a:	fbb1 f8f9 	udiv	r8, r1, r9
 800086e:	0c20      	lsrs	r0, r4, #16
 8000870:	fa1f fe8c 	uxth.w	lr, ip
 8000874:	fb09 1118 	mls	r1, r9, r8, r1
 8000878:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800087c:	fb08 f00e 	mul.w	r0, r8, lr
 8000880:	4288      	cmp	r0, r1
 8000882:	fa02 f206 	lsl.w	r2, r2, r6
 8000886:	d90b      	bls.n	80008a0 <__udivmoddi4+0x1b8>
 8000888:	eb1c 0101 	adds.w	r1, ip, r1
 800088c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000890:	f080 8088 	bcs.w	80009a4 <__udivmoddi4+0x2bc>
 8000894:	4288      	cmp	r0, r1
 8000896:	f240 8085 	bls.w	80009a4 <__udivmoddi4+0x2bc>
 800089a:	f1a8 0802 	sub.w	r8, r8, #2
 800089e:	4461      	add	r1, ip
 80008a0:	1a09      	subs	r1, r1, r0
 80008a2:	b2a4      	uxth	r4, r4
 80008a4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008a8:	fb09 1110 	mls	r1, r9, r0, r1
 80008ac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008b4:	458e      	cmp	lr, r1
 80008b6:	d908      	bls.n	80008ca <__udivmoddi4+0x1e2>
 80008b8:	eb1c 0101 	adds.w	r1, ip, r1
 80008bc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80008c0:	d26c      	bcs.n	800099c <__udivmoddi4+0x2b4>
 80008c2:	458e      	cmp	lr, r1
 80008c4:	d96a      	bls.n	800099c <__udivmoddi4+0x2b4>
 80008c6:	3802      	subs	r0, #2
 80008c8:	4461      	add	r1, ip
 80008ca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ce:	fba0 9402 	umull	r9, r4, r0, r2
 80008d2:	eba1 010e 	sub.w	r1, r1, lr
 80008d6:	42a1      	cmp	r1, r4
 80008d8:	46c8      	mov	r8, r9
 80008da:	46a6      	mov	lr, r4
 80008dc:	d356      	bcc.n	800098c <__udivmoddi4+0x2a4>
 80008de:	d053      	beq.n	8000988 <__udivmoddi4+0x2a0>
 80008e0:	b15d      	cbz	r5, 80008fa <__udivmoddi4+0x212>
 80008e2:	ebb3 0208 	subs.w	r2, r3, r8
 80008e6:	eb61 010e 	sbc.w	r1, r1, lr
 80008ea:	fa01 f707 	lsl.w	r7, r1, r7
 80008ee:	fa22 f306 	lsr.w	r3, r2, r6
 80008f2:	40f1      	lsrs	r1, r6
 80008f4:	431f      	orrs	r7, r3
 80008f6:	e9c5 7100 	strd	r7, r1, [r5]
 80008fa:	2600      	movs	r6, #0
 80008fc:	4631      	mov	r1, r6
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	f1c2 0320 	rsb	r3, r2, #32
 8000906:	40d8      	lsrs	r0, r3
 8000908:	fa0c fc02 	lsl.w	ip, ip, r2
 800090c:	fa21 f303 	lsr.w	r3, r1, r3
 8000910:	4091      	lsls	r1, r2
 8000912:	4301      	orrs	r1, r0
 8000914:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000918:	fa1f fe8c 	uxth.w	lr, ip
 800091c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000920:	fb07 3610 	mls	r6, r7, r0, r3
 8000924:	0c0b      	lsrs	r3, r1, #16
 8000926:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800092a:	fb00 f60e 	mul.w	r6, r0, lr
 800092e:	429e      	cmp	r6, r3
 8000930:	fa04 f402 	lsl.w	r4, r4, r2
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x260>
 8000936:	eb1c 0303 	adds.w	r3, ip, r3
 800093a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800093e:	d22f      	bcs.n	80009a0 <__udivmoddi4+0x2b8>
 8000940:	429e      	cmp	r6, r3
 8000942:	d92d      	bls.n	80009a0 <__udivmoddi4+0x2b8>
 8000944:	3802      	subs	r0, #2
 8000946:	4463      	add	r3, ip
 8000948:	1b9b      	subs	r3, r3, r6
 800094a:	b289      	uxth	r1, r1
 800094c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000950:	fb07 3316 	mls	r3, r7, r6, r3
 8000954:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000958:	fb06 f30e 	mul.w	r3, r6, lr
 800095c:	428b      	cmp	r3, r1
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x28a>
 8000960:	eb1c 0101 	adds.w	r1, ip, r1
 8000964:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000968:	d216      	bcs.n	8000998 <__udivmoddi4+0x2b0>
 800096a:	428b      	cmp	r3, r1
 800096c:	d914      	bls.n	8000998 <__udivmoddi4+0x2b0>
 800096e:	3e02      	subs	r6, #2
 8000970:	4461      	add	r1, ip
 8000972:	1ac9      	subs	r1, r1, r3
 8000974:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000978:	e738      	b.n	80007ec <__udivmoddi4+0x104>
 800097a:	462e      	mov	r6, r5
 800097c:	4628      	mov	r0, r5
 800097e:	e705      	b.n	800078c <__udivmoddi4+0xa4>
 8000980:	4606      	mov	r6, r0
 8000982:	e6e3      	b.n	800074c <__udivmoddi4+0x64>
 8000984:	4618      	mov	r0, r3
 8000986:	e6f8      	b.n	800077a <__udivmoddi4+0x92>
 8000988:	454b      	cmp	r3, r9
 800098a:	d2a9      	bcs.n	80008e0 <__udivmoddi4+0x1f8>
 800098c:	ebb9 0802 	subs.w	r8, r9, r2
 8000990:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000994:	3801      	subs	r0, #1
 8000996:	e7a3      	b.n	80008e0 <__udivmoddi4+0x1f8>
 8000998:	4646      	mov	r6, r8
 800099a:	e7ea      	b.n	8000972 <__udivmoddi4+0x28a>
 800099c:	4620      	mov	r0, r4
 800099e:	e794      	b.n	80008ca <__udivmoddi4+0x1e2>
 80009a0:	4640      	mov	r0, r8
 80009a2:	e7d1      	b.n	8000948 <__udivmoddi4+0x260>
 80009a4:	46d0      	mov	r8, sl
 80009a6:	e77b      	b.n	80008a0 <__udivmoddi4+0x1b8>
 80009a8:	3b02      	subs	r3, #2
 80009aa:	4461      	add	r1, ip
 80009ac:	e732      	b.n	8000814 <__udivmoddi4+0x12c>
 80009ae:	4630      	mov	r0, r6
 80009b0:	e709      	b.n	80007c6 <__udivmoddi4+0xde>
 80009b2:	4464      	add	r4, ip
 80009b4:	3802      	subs	r0, #2
 80009b6:	e742      	b.n	800083e <__udivmoddi4+0x156>

080009b8 <__aeabi_idiv0>:
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <API_draw_line>:
 * 	bitmap:
 *
 */

int API_draw_line(uint16_t x_1, uint16_t y_1, uint16_t x_2, uint16_t y_2, uint8_t dikte, uint8_t color)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b08d      	sub	sp, #52	; 0x34
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4604      	mov	r4, r0
 80009c4:	4608      	mov	r0, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	4623      	mov	r3, r4
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	4603      	mov	r3, r0
 80009d0:	80bb      	strh	r3, [r7, #4]
 80009d2:	460b      	mov	r3, r1
 80009d4:	807b      	strh	r3, [r7, #2]
 80009d6:	4613      	mov	r3, r2
 80009d8:	803b      	strh	r3, [r7, #0]
	int error = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
	//error checks
//	if(checkcolor(color))
//		return error;

	int dx = x_2 - x_1;
 80009de:	887a      	ldrh	r2, [r7, #2]
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	617b      	str	r3, [r7, #20]
	int dy = y_2 - y_1;
 80009e6:	883a      	ldrh	r2, [r7, #0]
 80009e8:	88bb      	ldrh	r3, [r7, #4]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	613b      	str	r3, [r7, #16]
	int steps;
	if(abs(dx)>abs(dy))
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80009f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bfb8      	it	lt
 80009fe:	425b      	neglt	r3, r3
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dd05      	ble.n	8000a10 <API_draw_line+0x54>
	{
		steps = abs(dx);
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	bfb8      	it	lt
 8000a0a:	425b      	neglt	r3, r3
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a0e:	e00f      	b.n	8000a30 <API_draw_line+0x74>
	}
	else if(abs(dy)>abs(dx))
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a16:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	bfb8      	it	lt
 8000a20:	425b      	neglt	r3, r3
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dd04      	ble.n	8000a30 <API_draw_line+0x74>
	{
		steps = abs(dy);
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	bfb8      	it	lt
 8000a2c:	425b      	neglt	r3, r3
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	float xIncrement = (float) dx / steps;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	ee07 3a90 	vmov	s15, r3
 8000a36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a48:	edc7 7a03 	vstr	s15, [r7, #12]
	float yIncrement = (float) dy / steps;
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	ee07 3a90 	vmov	s15, r3
 8000a52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	ee07 3a90 	vmov	s15, r3
 8000a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a64:	edc7 7a02 	vstr	s15, [r7, #8]
	int i;

	// Set the pixels along the center line of the given thickness
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000a68:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000a6c:	085b      	lsrs	r3, r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	425b      	negs	r3, r3
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a74:	e053      	b.n	8000b1e <API_draw_line+0x162>
		float x = x_1 + 0.5;
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fd63 	bl	8000544 <__aeabi_i2d>
 8000a7e:	f04f 0200 	mov.w	r2, #0
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <API_draw_line+0x17c>)
 8000a84:	f7ff fc12 	bl	80002ac <__adddf3>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f7ff fdc2 	bl	8000618 <__aeabi_d2f>
 8000a94:	4603      	mov	r3, r0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
		float y = y_1 + i + 0.5;
 8000a98:	88ba      	ldrh	r2, [r7, #4]
 8000a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fd50 	bl	8000544 <__aeabi_i2d>
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <API_draw_line+0x17c>)
 8000aaa:	f7ff fbff 	bl	80002ac <__adddf3>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f7ff fdaf 	bl	8000618 <__aeabi_d2f>
 8000aba:	4603      	mov	r3, r0
 8000abc:	623b      	str	r3, [r7, #32]
		int j;
		for (j = 0; j < steps; j++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
 8000ac2:	e025      	b.n	8000b10 <API_draw_line+0x154>
			UB_VGA_SetPixel(x, y, color);
 8000ac4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000acc:	ee17 3a90 	vmov	r3, s15
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ada:	ee17 2a90 	vmov	r2, s15
 8000ade:	b291      	uxth	r1, r2
 8000ae0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fe4b 	bl	8002780 <UB_VGA_SetPixel>
			x += xIncrement;
 8000aea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			y += yIncrement;
 8000afa:	ed97 7a08 	vldr	s14, [r7, #32]
 8000afe:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b06:	edc7 7a08 	vstr	s15, [r7, #32]
		for (j = 0; j < steps; j++) {
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	69fa      	ldr	r2, [r7, #28]
 8000b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b14:	429a      	cmp	r2, r3
 8000b16:	dbd5      	blt.n	8000ac4 <API_draw_line+0x108>
	for (i = 0-abs(dikte/2); i <= abs(dikte/2); i++) {
 8000b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	461a      	mov	r2, r3
 8000b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	dda3      	ble.n	8000a76 <API_draw_line+0xba>
		}
	}
	return error;
 8000b2e:	69bb      	ldr	r3, [r7, #24]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3734      	adds	r7, #52	; 0x34
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	3fe00000 	.word	0x3fe00000

08000b3c <API_draw_rectangle>:
}



int API_draw_rectangle(uint16_t x_lup, uint16_t y_lup, uint16_t breedte, uint16_t hoogte, uint8_t color, uint8_t gevuld)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4604      	mov	r4, r0
 8000b44:	4608      	mov	r0, r1
 8000b46:	4611      	mov	r1, r2
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4623      	mov	r3, r4
 8000b4c:	80fb      	strh	r3, [r7, #6]
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80bb      	strh	r3, [r7, #4]
 8000b52:	460b      	mov	r3, r1
 8000b54:	807b      	strh	r3, [r7, #2]
 8000b56:	4613      	mov	r3, r2
 8000b58:	803b      	strh	r3, [r7, #0]
	int xp = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
	int yp = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]

	//draw lines along screen every y-value
	if(gevuld == 1)
 8000b62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d121      	bne.n	8000bae <API_draw_rectangle+0x72>
	{
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	e017      	b.n	8000ba0 <API_draw_rectangle+0x64>
		{
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	e00b      	b.n	8000b8e <API_draw_rectangle+0x52>
			{
				UB_VGA_SetPixel(xp, yp, color);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	b291      	uxth	r1, r2
 8000b7e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fdfc 	bl	8002780 <UB_VGA_SetPixel>
			for(xp = x_lup; xp < x_lup + breedte; xp++)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	88fa      	ldrh	r2, [r7, #6]
 8000b90:	887b      	ldrh	r3, [r7, #2]
 8000b92:	4413      	add	r3, r2
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	dbed      	blt.n	8000b76 <API_draw_rectangle+0x3a>
		for(yp = y_lup; yp < y_lup + hoogte; yp++)
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	883b      	ldrh	r3, [r7, #0]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbe1      	blt.n	8000b70 <API_draw_rectangle+0x34>
 8000bac:	e042      	b.n	8000c34 <API_draw_rectangle+0xf8>
			}
		}
	}

	else if(gevuld == 0)
 8000bae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d13e      	bne.n	8000c34 <API_draw_rectangle+0xf8>
	{

			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 8000bb6:	88bb      	ldrh	r3, [r7, #4]
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	e035      	b.n	8000c28 <API_draw_rectangle+0xec>
			{
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e029      	b.n	8000c16 <API_draw_rectangle+0xda>
				{
					//draw lines along screen every y-value
					if ((yp == y_lup) || (yp == (y_lup + hoogte)))
 8000bc2:	88bb      	ldrh	r3, [r7, #4]
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d005      	beq.n	8000bd6 <API_draw_rectangle+0x9a>
 8000bca:	88ba      	ldrh	r2, [r7, #4]
 8000bcc:	883b      	ldrh	r3, [r7, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	68ba      	ldr	r2, [r7, #8]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d109      	bne.n	8000bea <API_draw_rectangle+0xae>
					{
						UB_VGA_SetPixel(xp, yp, color);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	b291      	uxth	r1, r2
 8000bde:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fdcc 	bl	8002780 <UB_VGA_SetPixel>
 8000be8:	e012      	b.n	8000c10 <API_draw_rectangle+0xd4>
					}

					//Draw pixels along screen only at edges
					else if((xp == x_lup) || (xp == (x_lup + breedte)))
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d005      	beq.n	8000bfe <API_draw_rectangle+0xc2>
 8000bf2:	88fa      	ldrh	r2, [r7, #6]
 8000bf4:	887b      	ldrh	r3, [r7, #2]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d108      	bne.n	8000c10 <API_draw_rectangle+0xd4>
					{
						UB_VGA_SetPixel(xp, yp, color);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	b291      	uxth	r1, r2
 8000c06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fdb8 	bl	8002780 <UB_VGA_SetPixel>
				for(xp = x_lup; xp <= x_lup + breedte; xp++)
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	3301      	adds	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	88fa      	ldrh	r2, [r7, #6]
 8000c18:	887b      	ldrh	r3, [r7, #2]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	ddcf      	ble.n	8000bc2 <API_draw_rectangle+0x86>
			for(yp = y_lup; yp <= y_lup + hoogte; yp++)
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	3301      	adds	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	88ba      	ldrh	r2, [r7, #4]
 8000c2a:	883b      	ldrh	r3, [r7, #0]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	ddc3      	ble.n	8000bbc <API_draw_rectangle+0x80>
					}
				}
			}
	}
}
 8000c34:	bf00      	nop
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd90      	pop	{r4, r7, pc}
	...

08000c40 <API_draw_text>:
//	}
//	return error;
//}

int API_draw_text(uint16_t x, uint16_t y, uint8_t kleur, char* tekst, char* fontnaam,uint8_t fontgrootte,char* fontstijl)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b08b      	sub	sp, #44	; 0x2c
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	4603      	mov	r3, r0
 8000c4a:	81fb      	strh	r3, [r7, #14]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	81bb      	strh	r3, [r7, #12]
 8000c50:	4613      	mov	r3, r2
 8000c52:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint16_t xd = x;
 8000c54:	89fb      	ldrh	r3, [r7, #14]
 8000c56:	83bb      	strh	r3, [r7, #28]
	uint16_t yd = y;
 8000c58:	89bb      	ldrh	r3, [r7, #12]
 8000c5a:	82fb      	strh	r3, [r7, #22]
	uint16_t* cord_p;
	char* letterp;
	if(strcmp(fontnaam, "arial")  == 0)
 8000c5c:	495c      	ldr	r1, [pc, #368]	; (8000dd0 <API_draw_text+0x190>)
 8000c5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000c60:	f7ff fab6 	bl	80001d0 <strcmp>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d151      	bne.n	8000d0e <API_draw_text+0xce>
	{
		for(i = 0; tekst[i] != ' '; i++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	77fb      	strb	r3, [r7, #31]
 8000c6e:	e047      	b.n	8000d00 <API_draw_text+0xc0>
		{
			letterp = get_letter_bitmap(ARIAL,tekst[i], letterp);
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f000 f9c3 	bl	8001008 <get_letter_bitmap>
 8000c82:	4603      	mov	r3, r0
 8000c84:	613b      	str	r3, [r7, #16]
			switch(fontstijl[0])
 8000c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b76      	cmp	r3, #118	; 0x76
 8000c8c:	d015      	beq.n	8000cba <API_draw_text+0x7a>
 8000c8e:	2b76      	cmp	r3, #118	; 0x76
 8000c90:	dc33      	bgt.n	8000cfa <API_draw_text+0xba>
 8000c92:	2b63      	cmp	r3, #99	; 0x63
 8000c94:	d021      	beq.n	8000cda <API_draw_text+0x9a>
 8000c96:	2b6e      	cmp	r3, #110	; 0x6e
 8000c98:	d12f      	bne.n	8000cfa <API_draw_text+0xba>
			{
			case 'n':
				cord_p = draw_normal_letter(letterp, xd, yd, fontgrootte, kleur, cord_p);
 8000c9a:	6938      	ldr	r0, [r7, #16]
 8000c9c:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8000ca0:	8afa      	ldrh	r2, [r7, #22]
 8000ca2:	8bb9      	ldrh	r1, [r7, #28]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	7afb      	ldrb	r3, [r7, #11]
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	4623      	mov	r3, r4
 8000cae:	f000 f893 	bl	8000dd8 <draw_normal_letter>
 8000cb2:	61b8      	str	r0, [r7, #24]
				xd = cord_p;
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	83bb      	strh	r3, [r7, #28]
				break;
 8000cb8:	e01f      	b.n	8000cfa <API_draw_text+0xba>
			case 'v':
				cord_p = draw_fat_letter(letterp, xd, yd, fontgrootte, kleur, cord_p);
 8000cba:	6938      	ldr	r0, [r7, #16]
 8000cbc:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8000cc0:	8afa      	ldrh	r2, [r7, #22]
 8000cc2:	8bb9      	ldrh	r1, [r7, #28]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	9301      	str	r3, [sp, #4]
 8000cc8:	7afb      	ldrb	r3, [r7, #11]
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	4623      	mov	r3, r4
 8000cce:	f000 f936 	bl	8000f3e <draw_fat_letter>
 8000cd2:	61b8      	str	r0, [r7, #24]
				xd = cord_p;
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	83bb      	strh	r3, [r7, #28]
				break;
 8000cd8:	e00f      	b.n	8000cfa <API_draw_text+0xba>
			case 'c':
				cord_p = draw_cursive_letter(letterp, xd, yd, fontgrootte, kleur, cord_p);
 8000cda:	6938      	ldr	r0, [r7, #16]
 8000cdc:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8000ce0:	8afa      	ldrh	r2, [r7, #22]
 8000ce2:	8bb9      	ldrh	r1, [r7, #28]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	7afb      	ldrb	r3, [r7, #11]
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	4623      	mov	r3, r4
 8000cee:	f000 f8bb 	bl	8000e68 <draw_cursive_letter>
 8000cf2:	61b8      	str	r0, [r7, #24]
				xd = cord_p;
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	83bb      	strh	r3, [r7, #28]
				break;
 8000cf8:	bf00      	nop
		for(i = 0; tekst[i] != ' '; i++)
 8000cfa:	7ffb      	ldrb	r3, [r7, #31]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	77fb      	strb	r3, [r7, #31]
 8000d00:	7ffb      	ldrb	r3, [r7, #31]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b20      	cmp	r3, #32
 8000d0a:	d1b1      	bne.n	8000c70 <API_draw_text+0x30>
 8000d0c:	e05a      	b.n	8000dc4 <API_draw_text+0x184>
			}
		}
	}
	else if(strcmp(fontnaam, "consolas")  == 0)
 8000d0e:	4931      	ldr	r1, [pc, #196]	; (8000dd4 <API_draw_text+0x194>)
 8000d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d12:	f7ff fa5d 	bl	80001d0 <strcmp>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d153      	bne.n	8000dc4 <API_draw_text+0x184>
	{
		for(i = 0; tekst[i] == ' '; i++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	77fb      	strb	r3, [r7, #31]
 8000d20:	e04a      	b.n	8000db8 <API_draw_text+0x178>
		{
			letterp = get_letter_bitmap(CONSOLAS,tekst[i], letterp);
 8000d22:	7ffb      	ldrb	r3, [r7, #31]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	4413      	add	r3, r2
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f000 f96a 	bl	8001008 <get_letter_bitmap>
 8000d34:	4603      	mov	r3, r0
 8000d36:	613b      	str	r3, [r7, #16]
			switch(fontstijl[0])
 8000d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b76      	cmp	r3, #118	; 0x76
 8000d3e:	d016      	beq.n	8000d6e <API_draw_text+0x12e>
 8000d40:	2b76      	cmp	r3, #118	; 0x76
 8000d42:	dc36      	bgt.n	8000db2 <API_draw_text+0x172>
 8000d44:	2b63      	cmp	r3, #99	; 0x63
 8000d46:	d023      	beq.n	8000d90 <API_draw_text+0x150>
 8000d48:	2b6e      	cmp	r3, #110	; 0x6e
 8000d4a:	d132      	bne.n	8000db2 <API_draw_text+0x172>
			{
			case 'n':
				cord_p = draw_normal_letter(&letterp, xd, yd, fontgrootte, kleur, cord_p);
 8000d4c:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8000d50:	8afa      	ldrh	r2, [r7, #22]
 8000d52:	8bb9      	ldrh	r1, [r7, #28]
 8000d54:	f107 0010 	add.w	r0, r7, #16
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	9301      	str	r3, [sp, #4]
 8000d5c:	7afb      	ldrb	r3, [r7, #11]
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	4623      	mov	r3, r4
 8000d62:	f000 f839 	bl	8000dd8 <draw_normal_letter>
 8000d66:	61b8      	str	r0, [r7, #24]
				xd = cord_p;
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	83bb      	strh	r3, [r7, #28]
				break;
 8000d6c:	e021      	b.n	8000db2 <API_draw_text+0x172>
			case 'v':
				cord_p = draw_fat_letter(&letterp, xd, yd, fontgrootte, kleur, cord_p);
 8000d6e:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8000d72:	8afa      	ldrh	r2, [r7, #22]
 8000d74:	8bb9      	ldrh	r1, [r7, #28]
 8000d76:	f107 0010 	add.w	r0, r7, #16
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	4623      	mov	r3, r4
 8000d84:	f000 f8db 	bl	8000f3e <draw_fat_letter>
 8000d88:	61b8      	str	r0, [r7, #24]
				xd = cord_p;
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	83bb      	strh	r3, [r7, #28]
				break;
 8000d8e:	e010      	b.n	8000db2 <API_draw_text+0x172>
			case 'c':
				cord_p = draw_cursive_letter(&letterp, xd, yd, fontgrootte, kleur, cord_p);
 8000d90:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 8000d94:	8afa      	ldrh	r2, [r7, #22]
 8000d96:	8bb9      	ldrh	r1, [r7, #28]
 8000d98:	f107 0010 	add.w	r0, r7, #16
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	7afb      	ldrb	r3, [r7, #11]
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	4623      	mov	r3, r4
 8000da6:	f000 f85f 	bl	8000e68 <draw_cursive_letter>
 8000daa:	61b8      	str	r0, [r7, #24]
				xd = cord_p;
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	83bb      	strh	r3, [r7, #28]
				break;
 8000db0:	bf00      	nop
		for(i = 0; tekst[i] == ' '; i++)
 8000db2:	7ffb      	ldrb	r3, [r7, #31]
 8000db4:	3301      	adds	r3, #1
 8000db6:	77fb      	strb	r3, [r7, #31]
 8000db8:	7ffb      	ldrb	r3, [r7, #31]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b20      	cmp	r3, #32
 8000dc2:	d0ae      	beq.n	8000d22 <API_draw_text+0xe2>
			}
		}
	}
	return 0;//returns error
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd90      	pop	{r4, r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	0800a748 	.word	0x0800a748
 8000dd4:	0800a750 	.word	0x0800a750

08000dd8 <draw_normal_letter>:

uint16_t * draw_normal_letter(char** letterp, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	4608      	mov	r0, r1
 8000de2:	4611      	mov	r1, r2
 8000de4:	461a      	mov	r2, r3
 8000de6:	4603      	mov	r3, r0
 8000de8:	817b      	strh	r3, [r7, #10]
 8000dea:	460b      	mov	r3, r1
 8000dec:	813b      	strh	r3, [r7, #8]
 8000dee:	4613      	mov	r3, r2
 8000df0:	71fb      	strb	r3, [r7, #7]
    uint16_t end_cords;
    uint16_t begin_x = xd;
 8000df2:	897b      	ldrh	r3, [r7, #10]
 8000df4:	82fb      	strh	r3, [r7, #22]
    int x_counter;
    int y_counter;
    char holder; //for testing only
    for (y_counter = 0; y_counter < LETTER_BITMAP_HEIGHT-1; y_counter++) //goes trough every vertical layer of the bitmap
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	e029      	b.n	8000e50 <draw_normal_letter+0x78>
    {
        xd = begin_x;
 8000dfc:	8afb      	ldrh	r3, [r7, #22]
 8000dfe:	817b      	strh	r3, [r7, #10]
        for (x_counter = 0; x_counter < LETTER_BITMAP_LENGTH-1; x_counter++) //goes trough every horizontal layer of the bitmap
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
 8000e04:	e015      	b.n	8000e32 <draw_normal_letter+0x5a>
        {
            if ( holder != 255)//checks if a pixel needs to be placed (background bitmap is white)
 8000e06:	7cfb      	ldrb	r3, [r7, #19]
 8000e08:	2bff      	cmp	r3, #255	; 0xff
 8000e0a:	d006      	beq.n	8000e1a <draw_normal_letter+0x42>
            {
                UB_VGA_SetPixel(xd, yd, kleur);
 8000e0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e10:	8939      	ldrh	r1, [r7, #8]
 8000e12:	897b      	ldrh	r3, [r7, #10]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fcb3 	bl	8002780 <UB_VGA_SetPixel>
            }
            xd++;
 8000e1a:	897b      	ldrh	r3, [r7, #10]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	817b      	strh	r3, [r7, #10]
            if (fontgrootte == SIZE_1) //skips one pixel of bitmap to shorten the letter by half
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d102      	bne.n	8000e2c <draw_normal_letter+0x54>
                x_counter++;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	61fb      	str	r3, [r7, #28]
        for (x_counter = 0; x_counter < LETTER_BITMAP_LENGTH-1; x_counter++) //goes trough every horizontal layer of the bitmap
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	61fb      	str	r3, [r7, #28]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	dde6      	ble.n	8000e06 <draw_normal_letter+0x2e>
        }
        yd++;
 8000e38:	893b      	ldrh	r3, [r7, #8]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	813b      	strh	r3, [r7, #8]
        if (fontgrootte == SIZE_1)//skips one pixel of bitmap to shorten the letter by half
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d102      	bne.n	8000e4a <draw_normal_letter+0x72>
            y_counter++;
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	3301      	adds	r3, #1
 8000e48:	61bb      	str	r3, [r7, #24]
    for (y_counter = 0; y_counter < LETTER_BITMAP_HEIGHT-1; y_counter++) //goes trough every vertical layer of the bitmap
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2b14      	cmp	r3, #20
 8000e54:	ddd2      	ble.n	8000dfc <draw_normal_letter+0x24>
    }
    end_cords = xd;
 8000e56:	897b      	ldrh	r3, [r7, #10]
 8000e58:	82bb      	strh	r3, [r7, #20]
    cord_p = end_cords;
 8000e5a:	8abb      	ldrh	r3, [r7, #20]
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return cord_p;
 8000e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3720      	adds	r7, #32
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <draw_cursive_letter>:

uint16_t * draw_cursive_letter(char** letterp, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	4608      	mov	r0, r1
 8000e72:	4611      	mov	r1, r2
 8000e74:	461a      	mov	r2, r3
 8000e76:	4603      	mov	r3, r0
 8000e78:	817b      	strh	r3, [r7, #10]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	813b      	strh	r3, [r7, #8]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	71fb      	strb	r3, [r7, #7]
	uint16_t end_cords[2];
	uint16_t begin_x = xd;
 8000e82:	897b      	ldrh	r3, [r7, #10]
 8000e84:	837b      	strh	r3, [r7, #26]
	int x_counter;
	int y_counter;
	int angle = LETTER_BITMAP_LENGTH; //sets angle offset for cursive letter
 8000e86:	230b      	movs	r3, #11
 8000e88:	61fb      	str	r3, [r7, #28]
	if(fontgrootte == SIZE_1)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d104      	bne.n	8000e9a <draw_cursive_letter+0x32>
		angle = angle/2;
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	0fda      	lsrs	r2, r3, #31
 8000e94:	4413      	add	r3, r2
 8000e96:	105b      	asrs	r3, r3, #1
 8000e98:	61fb      	str	r3, [r7, #28]

	for(y_counter = 0; y_counter < LETTER_BITMAP_HEIGHT-1; y_counter++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
 8000e9e:	e03b      	b.n	8000f18 <draw_cursive_letter+0xb0>
	{
		xd = begin_x;
 8000ea0:	8b7b      	ldrh	r3, [r7, #26]
 8000ea2:	817b      	strh	r3, [r7, #10]
		for(x_counter = 0; x_counter < LETTER_BITMAP_LENGTH-1; x_counter++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea8:	e024      	b.n	8000ef4 <draw_cursive_letter+0x8c>
		{
			if(letterp[x_counter+(LETTER_BITMAP_LENGTH*y_counter)] != 255)
 8000eaa:	6a3a      	ldr	r2, [r7, #32]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	441a      	add	r2, r3
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2bff      	cmp	r3, #255	; 0xff
 8000ec4:	d00a      	beq.n	8000edc <draw_cursive_letter+0x74>
			{
				UB_VGA_SetPixel(xd+angle, yd, kleur);
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	897b      	ldrh	r3, [r7, #10]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000ed4:	8939      	ldrh	r1, [r7, #8]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 fc52 	bl	8002780 <UB_VGA_SetPixel>
			}
			xd++;
 8000edc:	897b      	ldrh	r3, [r7, #10]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	817b      	strh	r3, [r7, #10]
			if(fontgrootte == SIZE_1)
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d102      	bne.n	8000eee <draw_cursive_letter+0x86>
				x_counter++;
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	3301      	adds	r3, #1
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
		for(x_counter = 0; x_counter < LETTER_BITMAP_LENGTH-1; x_counter++)
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	2b09      	cmp	r3, #9
 8000ef8:	ddd7      	ble.n	8000eaa <draw_cursive_letter+0x42>
		}
		angle--; //decreases ofset for each y layer to create an angle
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
		yd++;
 8000f00:	893b      	ldrh	r3, [r7, #8]
 8000f02:	3301      	adds	r3, #1
 8000f04:	813b      	strh	r3, [r7, #8]
		if(fontgrootte == SIZE_1)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d102      	bne.n	8000f12 <draw_cursive_letter+0xaa>
			y_counter++;
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	623b      	str	r3, [r7, #32]
	for(y_counter = 0; y_counter < LETTER_BITMAP_HEIGHT-1; y_counter++)
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	3301      	adds	r3, #1
 8000f16:	623b      	str	r3, [r7, #32]
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	2b14      	cmp	r3, #20
 8000f1c:	ddc0      	ble.n	8000ea0 <draw_cursive_letter+0x38>
	}
    end_cords[0] = xd;
 8000f1e:	897b      	ldrh	r3, [r7, #10]
 8000f20:	82bb      	strh	r3, [r7, #20]
    end_cords[1] = yd;
 8000f22:	893b      	ldrh	r3, [r7, #8]
 8000f24:	82fb      	strh	r3, [r7, #22]
    cord_p[0] = end_cords[0];
 8000f26:	8aba      	ldrh	r2, [r7, #20]
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	801a      	strh	r2, [r3, #0]
	cord_p[1] = end_cords[1];
 8000f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2e:	3302      	adds	r3, #2
 8000f30:	8afa      	ldrh	r2, [r7, #22]
 8000f32:	801a      	strh	r2, [r3, #0]
    return cord_p;
 8000f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <draw_fat_letter>:


uint16_t * draw_fat_letter(char** letterp, uint16_t xd, uint16_t yd,uint8_t fontgrootte, uint8_t kleur, uint16_t* cord_p)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	4608      	mov	r0, r1
 8000f48:	4611      	mov	r1, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	817b      	strh	r3, [r7, #10]
 8000f50:	460b      	mov	r3, r1
 8000f52:	813b      	strh	r3, [r7, #8]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71fb      	strb	r3, [r7, #7]
	uint16_t end_cords[2];
	uint16_t begin_x = xd;
 8000f58:	897b      	ldrh	r3, [r7, #10]
 8000f5a:	82fb      	strh	r3, [r7, #22]
	int x_counter;
	int y_counter;

	for(y_counter = 0; y_counter == LETTER_BITMAP_HEIGHT-1; y_counter++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	e03e      	b.n	8000fe0 <draw_fat_letter+0xa2>
	{
		xd = begin_x;
 8000f62:	8afb      	ldrh	r3, [r7, #22]
 8000f64:	817b      	strh	r3, [r7, #10]
		for(x_counter = 0; x_counter == LETTER_BITMAP_LENGTH-1; x_counter++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e02a      	b.n	8000fc2 <draw_fat_letter+0x84>
		{
			if(letterp[x_counter+(LETTER_BITMAP_LENGTH*y_counter)] != 255)
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	441a      	add	r2, r3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	4413      	add	r3, r2
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2bff      	cmp	r3, #255	; 0xff
 8000f86:	d010      	beq.n	8000faa <draw_fat_letter+0x6c>
			{
				UB_VGA_SetPixel(xd, yd, kleur);
 8000f88:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f8c:	8939      	ldrh	r1, [r7, #8]
 8000f8e:	897b      	ldrh	r3, [r7, #10]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 fbf5 	bl	8002780 <UB_VGA_SetPixel>
				xd++;
 8000f96:	897b      	ldrh	r3, [r7, #10]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	817b      	strh	r3, [r7, #10]
				UB_VGA_SetPixel(xd, yd, kleur);//2e pixel extra op de x waarde zorgt voor een 2x zo breede leter
 8000f9c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000fa0:	8939      	ldrh	r1, [r7, #8]
 8000fa2:	897b      	ldrh	r3, [r7, #10]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 fbeb 	bl	8002780 <UB_VGA_SetPixel>
			}
			if(fontgrootte == SIZE_1)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d102      	bne.n	8000fb6 <draw_fat_letter+0x78>
				x_counter++;
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61fb      	str	r3, [r7, #28]
			xd++;
 8000fb6:	897b      	ldrh	r3, [r7, #10]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	817b      	strh	r3, [r7, #10]
		for(x_counter = 0; x_counter == LETTER_BITMAP_LENGTH-1; x_counter++)
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	2b0a      	cmp	r3, #10
 8000fc6:	d0d1      	beq.n	8000f6c <draw_fat_letter+0x2e>
		}
		yd++;
 8000fc8:	893b      	ldrh	r3, [r7, #8]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	813b      	strh	r3, [r7, #8]
		if(fontgrootte == SIZE_1)
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d102      	bne.n	8000fda <draw_fat_letter+0x9c>
			y_counter++;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
	for(y_counter = 0; y_counter == LETTER_BITMAP_HEIGHT-1; y_counter++)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61bb      	str	r3, [r7, #24]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b15      	cmp	r3, #21
 8000fe4:	d0bd      	beq.n	8000f62 <draw_fat_letter+0x24>
	}
    end_cords[0] = xd;
 8000fe6:	897b      	ldrh	r3, [r7, #10]
 8000fe8:	823b      	strh	r3, [r7, #16]
    end_cords[1] = yd;
 8000fea:	893b      	ldrh	r3, [r7, #8]
 8000fec:	827b      	strh	r3, [r7, #18]
    cord_p[0] = end_cords[0];
 8000fee:	8a3a      	ldrh	r2, [r7, #16]
 8000ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff2:	801a      	strh	r2, [r3, #0]
	cord_p[1] = end_cords[1];
 8000ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	8a7a      	ldrh	r2, [r7, #18]
 8000ffa:	801a      	strh	r2, [r3, #0]
    return cord_p;
 8000ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <get_letter_bitmap>:

char * get_letter_bitmap(char type,char letter,char* letterp)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	603a      	str	r2, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	460b      	mov	r3, r1
 8001016:	71bb      	strb	r3, [r7, #6]
		letterp[0] = t[0];
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <get_letter_bitmap+0x28>)
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	701a      	strb	r2, [r3, #0]
	return letterp;
 8001020:	683b      	ldr	r3, [r7, #0]
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000000 	.word	0x20000000

08001034 <API_read_bitmap_SD>:

int API_read_bitmap_SD(char *nr, uint16_t x_lup, uint16_t y_lup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	f5ad 6d97 	sub.w	sp, sp, #1208	; 0x4b8
 800103a:	af00      	add	r7, sp, #0
 800103c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001040:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 8001044:	6018      	str	r0, [r3, #0]
 8001046:	4608      	mov	r0, r1
 8001048:	4611      	mov	r1, r2
 800104a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800104e:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8001052:	4602      	mov	r2, r0
 8001054:	801a      	strh	r2, [r3, #0]
 8001056:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800105a:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 800105e:	460a      	mov	r2, r1
 8001060:	801a      	strh	r2, [r3, #0]

	// Fatfs variables
	FATFS FatFs;
    FIL fil; 		//File handle
    FRESULT fres; 	//Result after operations
    UINT SizeofBuffer = 30;
 8001062:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001066:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 800106a:	221e      	movs	r2, #30
 800106c:	601a      	str	r2, [r3, #0]

    //Reading buffer
    uint k = 0; // kijken welk variable we zijn
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

    //Position vga
    uint16_t xp,yp,xp2,yp2;

    xp2 = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
    yp2 = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac

    //Information from file system
    unsigned int Height,Width;

    //Creating decimal shift register
	unsigned int ColourFile = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	unsigned int DecimalshiftBuff = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498

	unsigned char i;

	char readBuf[30];

	TCHAR File[] = "00.txt";
 800108c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001090:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 8001094:	4a91      	ldr	r2, [pc, #580]	; (80012dc <API_read_bitmap_SD+0x2a8>)
 8001096:	e892 0003 	ldmia.w	r2, {r0, r1}
 800109a:	6018      	str	r0, [r3, #0]
 800109c:	3304      	adds	r3, #4
 800109e:	8019      	strh	r1, [r3, #0]
 80010a0:	3302      	adds	r3, #2
 80010a2:	0c0a      	lsrs	r2, r1, #16
 80010a4:	701a      	strb	r2, [r3, #0]

	File[0] = nr[0];		// checked
 80010a6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80010aa:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80010b6:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80010ba:	701a      	strb	r2, [r3, #0]
	File[1] = nr[1];
 80010bc:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80010c0:	f2a3 43b4 	subw	r3, r3, #1204	; 0x4b4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	785a      	ldrb	r2, [r3, #1]
 80010c8:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80010cc:	f5a3 6396 	sub.w	r3, r3, #1200	; 0x4b0
 80010d0:	705a      	strb	r2, [r3, #1]

	xp = x_lup;
 80010d2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80010d6:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
	yp = y_lup;
 80010e0:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80010e4:	f5a3 6397 	sub.w	r3, r3, #1208	; 0x4b8
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0


    fres = f_mount(&FatFs, "", 1); //1=mount now
 80010ee:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80010f2:	2201      	movs	r2, #1
 80010f4:	497a      	ldr	r1, [pc, #488]	; (80012e0 <API_read_bitmap_SD+0x2ac>)
 80010f6:	4618      	mov	r0, r3
 80010f8:	f007 fe8e 	bl	8008e18 <f_mount>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
    if (fres != FR_OK) {
 8001102:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001106:	2b00      	cmp	r3, #0
 8001108:	d006      	beq.n	8001118 <API_read_bitmap_SD+0xe4>
   	printf("f_mount error (%i)\r\n", fres);
 800110a:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800110e:	4619      	mov	r1, r3
 8001110:	4874      	ldr	r0, [pc, #464]	; (80012e4 <API_read_bitmap_SD+0x2b0>)
 8001112:	f008 fb09 	bl	8009728 <iprintf>
   	while(1);
 8001116:	e7fe      	b.n	8001116 <API_read_bitmap_SD+0xe2>
    }

	fres = f_open(&fil, File, FA_READ);
 8001118:	f107 0108 	add.w	r1, r7, #8
 800111c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001120:	2201      	movs	r2, #1
 8001122:	4618      	mov	r0, r3
 8001124:	f007 febe 	bl	8008ea4 <f_open>
 8001128:	4603      	mov	r3, r0
 800112a:	f887 3497 	strb.w	r3, [r7, #1175]	; 0x497
	if (fres != FR_OK) {
 800112e:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 80b9 	beq.w	80012aa <API_read_bitmap_SD+0x276>
	printf("f_open error (%i)\r\n",fres);
 8001138:	f897 3497 	ldrb.w	r3, [r7, #1175]	; 0x497
 800113c:	4619      	mov	r1, r3
 800113e:	486a      	ldr	r0, [pc, #424]	; (80012e8 <API_read_bitmap_SD+0x2b4>)
 8001140:	f008 faf2 	bl	8009728 <iprintf>
	while(1);
 8001144:	e7fe      	b.n	8001144 <API_read_bitmap_SD+0x110>
	}


	while (SizeofBuffer == 30)
	{
		f_read(&fil,(void*)readBuf, 30, &SizeofBuffer);
 8001146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114a:	f107 0110 	add.w	r1, r7, #16
 800114e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001152:	221e      	movs	r2, #30
 8001154:	f008 f864 	bl	8009220 <f_read>
		for (i=0; i<SizeofBuffer; i++)
 8001158:	2300      	movs	r3, #0
 800115a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 800115e:	e09a      	b.n	8001296 <API_read_bitmap_SD+0x262>
		{

			if (readBuf[i] != 32)
 8001160:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001164:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 8001168:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 800116c:	5cd3      	ldrb	r3, [r2, r3]
 800116e:	2b20      	cmp	r3, #32
 8001170:	d019      	beq.n	80011a6 <API_read_bitmap_SD+0x172>
			{
				DecimalshiftBuff = readBuf[i]-'0';
 8001172:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001176:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 800117a:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 800117e:	5cd3      	ldrb	r3, [r2, r3]
 8001180:	3b30      	subs	r3, #48	; 0x30
 8001182:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
				ColourFile *= 10;
 8001186:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800118a:	4613      	mov	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
				ColourFile += DecimalshiftBuff;
 8001196:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 800119a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800119e:	4413      	add	r3, r2
 80011a0:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
 80011a4:	e072      	b.n	800128c <API_read_bitmap_SD+0x258>
			}

			else if(readBuf[i] == 32)
 80011a6:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80011aa:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80011ae:	f5a2 6295 	sub.w	r2, r2, #1192	; 0x4a8
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	2b20      	cmp	r3, #32
 80011b6:	d169      	bne.n	800128c <API_read_bitmap_SD+0x258>
			{
				if (k > 1)
 80011b8:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d94c      	bls.n	800125a <API_read_bitmap_SD+0x226>
				{
					if (xp < VGA_DISPLAY_X && yp < VGA_DISPLAY_Y)
 80011c0:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 80011c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011c8:	d212      	bcs.n	80011f0 <API_read_bitmap_SD+0x1bc>
 80011ca:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 80011ce:	2bef      	cmp	r3, #239	; 0xef
 80011d0:	d80e      	bhi.n	80011f0 <API_read_bitmap_SD+0x1bc>
					{
						VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = ColourFile;
 80011d2:	f8b7 24b0 	ldrh.w	r2, [r7, #1200]	; 0x4b0
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	019b      	lsls	r3, r3, #6
 80011de:	441a      	add	r2, r3
 80011e0:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 80011e4:	4413      	add	r3, r2
 80011e6:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	; 0x4a0
 80011ea:	b2d1      	uxtb	r1, r2
 80011ec:	4a3f      	ldr	r2, [pc, #252]	; (80012ec <API_read_bitmap_SD+0x2b8>)
 80011ee:	54d1      	strb	r1, [r2, r3]
					}

					UB_VGA_SetPixel(xp, yp, ColourFile);
 80011f0:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	f8b7 14b0 	ldrh.w	r1, [r7, #1200]	; 0x4b0
 80011fa:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fabe 	bl	8002780 <UB_VGA_SetPixel>
					xp++;
 8001204:	f8b7 34b2 	ldrh.w	r3, [r7, #1202]	; 0x4b2
 8001208:	3301      	adds	r3, #1
 800120a:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
					xp2++;
 800120e:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 8001212:	3301      	adds	r3, #1
 8001214:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					if (xp2 >= Width)
 8001218:	f8b7 34ae 	ldrh.w	r3, [r7, #1198]	; 0x4ae
 800121c:	f8d7 24a4 	ldr.w	r2, [r7, #1188]	; 0x4a4
 8001220:	429a      	cmp	r2, r3
 8001222:	d813      	bhi.n	800124c <API_read_bitmap_SD+0x218>
					{
						yp++;
 8001224:	f8b7 34b0 	ldrh.w	r3, [r7, #1200]	; 0x4b0
 8001228:	3301      	adds	r3, #1
 800122a:	f8a7 34b0 	strh.w	r3, [r7, #1200]	; 0x4b0
						yp2++;
 800122e:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8001232:	3301      	adds	r3, #1
 8001234:	f8a7 34ac 	strh.w	r3, [r7, #1196]	; 0x4ac
						xp = x_lup;
 8001238:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800123c:	f2a3 43b6 	subw	r3, r3, #1206	; 0x4b6
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	f8a7 34b2 	strh.w	r3, [r7, #1202]	; 0x4b2
						xp2 = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	f8a7 34ae 	strh.w	r3, [r7, #1198]	; 0x4ae
					}
					if (yp2 == Height)
 800124c:	f8b7 34ac 	ldrh.w	r3, [r7, #1196]	; 0x4ac
 8001250:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	; 0x4a8
 8001254:	429a      	cmp	r2, r3
 8001256:	d111      	bne.n	800127c <API_read_bitmap_SD+0x248>
					{
						break;
 8001258:	e027      	b.n	80012aa <API_read_bitmap_SD+0x276>
					}
				}
				else if (k == 0) // Hoogte van de bit map
 800125a:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 800125e:	2b00      	cmp	r3, #0
 8001260:	d104      	bne.n	800126c <API_read_bitmap_SD+0x238>
				{
					Height = ColourFile;
 8001262:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001266:	f8c7 34a8 	str.w	r3, [r7, #1192]	; 0x4a8
 800126a:	e007      	b.n	800127c <API_read_bitmap_SD+0x248>
				}
				else if (k == 1)
 800126c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001270:	2b01      	cmp	r3, #1
 8001272:	d103      	bne.n	800127c <API_read_bitmap_SD+0x248>
				{
					Width = ColourFile;
 8001274:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	; 0x4a0
 8001278:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
				}

				k++;
 800127c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001280:	3301      	adds	r3, #1
 8001282:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
				ColourFile = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
		for (i=0; i<SizeofBuffer; i++)
 800128c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001290:	3301      	adds	r3, #1
 8001292:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
 8001296:	f897 249f 	ldrb.w	r2, [r7, #1183]	; 0x49f
 800129a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800129e:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f4ff af5b 	bcc.w	8001160 <API_read_bitmap_SD+0x12c>
	while (SizeofBuffer == 30)
 80012aa:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80012ae:	f5a3 6391 	sub.w	r3, r3, #1160	; 0x488
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b1e      	cmp	r3, #30
 80012b6:	f43f af46 	beq.w	8001146 <API_read_bitmap_SD+0x112>
			}

		}
	}

	f_close(&fil);
 80012ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012be:	4618      	mov	r0, r3
 80012c0:	f008 f96b 	bl	800959a <f_close>

    f_mount(NULL, "", 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	4906      	ldr	r1, [pc, #24]	; (80012e0 <API_read_bitmap_SD+0x2ac>)
 80012c8:	2000      	movs	r0, #0
 80012ca:	f007 fda5 	bl	8008e18 <f_mount>

	return 0;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	f507 6797 	add.w	r7, r7, #1208	; 0x4b8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	0800a78c 	.word	0x0800a78c
 80012e0:	0800a75c 	.word	0x0800a75c
 80012e4:	0800a760 	.word	0x0800a760
 80012e8:	0800a778 	.word	0x0800a778
 80012ec:	200008b4 	.word	0x200008b4

080012f0 <API_blur_screen>:

int API_blur_screen()
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
	uint16_t xp, yp;
	uint16_t xp_2, yp_2;
	uint16_t sum = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	603b      	str	r3, [r7, #0]
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 80012fe:	2300      	movs	r3, #0
 8001300:	81bb      	strh	r3, [r7, #12]
 8001302:	e06d      	b.n	80013e0 <API_blur_screen+0xf0>
	{
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 8001304:	2300      	movs	r3, #0
 8001306:	81fb      	strh	r3, [r7, #14]
 8001308:	e063      	b.n	80013d2 <API_blur_screen+0xe2>
	  {
	    sum = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	80fb      	strh	r3, [r7, #6]
	    i = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001312:	89bb      	ldrh	r3, [r7, #12]
 8001314:	813b      	strh	r3, [r7, #8]
 8001316:	e022      	b.n	800135e <API_blur_screen+0x6e>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001318:	89fb      	ldrh	r3, [r7, #14]
 800131a:	817b      	strh	r3, [r7, #10]
 800131c:	e013      	b.n	8001346 <API_blur_screen+0x56>
	      {
	        sum += VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2];
 800131e:	893a      	ldrh	r2, [r7, #8]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	019b      	lsls	r3, r3, #6
 8001328:	441a      	add	r2, r3
 800132a:	897b      	ldrh	r3, [r7, #10]
 800132c:	4413      	add	r3, r2
 800132e:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <API_blur_screen+0x104>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	b29a      	uxth	r2, r3
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	4413      	add	r3, r2
 8001338:	80fb      	strh	r3, [r7, #6]
	        i++;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	603b      	str	r3, [r7, #0]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	3301      	adds	r3, #1
 8001344:	817b      	strh	r3, [r7, #10]
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	1c9a      	adds	r2, r3, #2
 800134a:	897b      	ldrh	r3, [r7, #10]
 800134c:	429a      	cmp	r2, r3
 800134e:	db03      	blt.n	8001358 <API_blur_screen+0x68>
 8001350:	897b      	ldrh	r3, [r7, #10]
 8001352:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001356:	d3e2      	bcc.n	800131e <API_blur_screen+0x2e>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 8001358:	893b      	ldrh	r3, [r7, #8]
 800135a:	3301      	adds	r3, #1
 800135c:	813b      	strh	r3, [r7, #8]
 800135e:	89bb      	ldrh	r3, [r7, #12]
 8001360:	1c9a      	adds	r2, r3, #2
 8001362:	893b      	ldrh	r3, [r7, #8]
 8001364:	429a      	cmp	r2, r3
 8001366:	db02      	blt.n	800136e <API_blur_screen+0x7e>
 8001368:	893b      	ldrh	r3, [r7, #8]
 800136a:	2bef      	cmp	r3, #239	; 0xef
 800136c:	d9d4      	bls.n	8001318 <API_blur_screen+0x28>
	      }
	    }
	    sum /= 9;
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <API_blur_screen+0x108>)
 8001372:	fba2 2303 	umull	r2, r3, r2, r3
 8001376:	085b      	lsrs	r3, r3, #1
 8001378:	80fb      	strh	r3, [r7, #6]
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 800137a:	89bb      	ldrh	r3, [r7, #12]
 800137c:	813b      	strh	r3, [r7, #8]
 800137e:	e01d      	b.n	80013bc <API_blur_screen+0xcc>
	    {
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 8001380:	89fb      	ldrh	r3, [r7, #14]
 8001382:	817b      	strh	r3, [r7, #10]
 8001384:	e00e      	b.n	80013a4 <API_blur_screen+0xb4>
	      {
	        VGA_RAM1[(yp_2 * (VGA_DISPLAY_X + 1)) + xp_2] = sum;
 8001386:	893a      	ldrh	r2, [r7, #8]
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	019b      	lsls	r3, r3, #6
 8001390:	441a      	add	r2, r3
 8001392:	897b      	ldrh	r3, [r7, #10]
 8001394:	4413      	add	r3, r2
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	b2d1      	uxtb	r1, r2
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <API_blur_screen+0x104>)
 800139c:	54d1      	strb	r1, [r2, r3]
	      for (xp_2 = xp; xp_2 < xp + 3 && xp_2 < VGA_DISPLAY_X; xp_2++)
 800139e:	897b      	ldrh	r3, [r7, #10]
 80013a0:	3301      	adds	r3, #1
 80013a2:	817b      	strh	r3, [r7, #10]
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	1c9a      	adds	r2, r3, #2
 80013a8:	897b      	ldrh	r3, [r7, #10]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	db03      	blt.n	80013b6 <API_blur_screen+0xc6>
 80013ae:	897b      	ldrh	r3, [r7, #10]
 80013b0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013b4:	d3e7      	bcc.n	8001386 <API_blur_screen+0x96>
	    for (yp_2 = yp; yp_2 < yp + 3 && yp_2 < VGA_DISPLAY_Y; yp_2++)
 80013b6:	893b      	ldrh	r3, [r7, #8]
 80013b8:	3301      	adds	r3, #1
 80013ba:	813b      	strh	r3, [r7, #8]
 80013bc:	89bb      	ldrh	r3, [r7, #12]
 80013be:	1c9a      	adds	r2, r3, #2
 80013c0:	893b      	ldrh	r3, [r7, #8]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	db02      	blt.n	80013cc <API_blur_screen+0xdc>
 80013c6:	893b      	ldrh	r3, [r7, #8]
 80013c8:	2bef      	cmp	r3, #239	; 0xef
 80013ca:	d9d9      	bls.n	8001380 <API_blur_screen+0x90>
	  for (xp = 0; xp < VGA_DISPLAY_X; xp++)
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	3301      	adds	r3, #1
 80013d0:	81fb      	strh	r3, [r7, #14]
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013d8:	d397      	bcc.n	800130a <API_blur_screen+0x1a>
	for (yp = 0; yp < VGA_DISPLAY_Y; yp++)
 80013da:	89bb      	ldrh	r3, [r7, #12]
 80013dc:	3301      	adds	r3, #1
 80013de:	81bb      	strh	r3, [r7, #12]
 80013e0:	89bb      	ldrh	r3, [r7, #12]
 80013e2:	2bef      	cmp	r3, #239	; 0xef
 80013e4:	d98e      	bls.n	8001304 <API_blur_screen+0x14>
	      }
	    }
	  }
	}
	return 0;
 80013e6:	2300      	movs	r3, #0
	}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	200008b4 	.word	0x200008b4
 80013f8:	38e38e39 	.word	0x38e38e39

080013fc <LogicLayer_Parser>:


Message_parser LogicLayer_Parser(char*, unsigned int);

Message_parser LogicLayer_Parser(char *Message, unsigned int Messagelength)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0ee      	sub	sp, #440	; 0x1b8
 8001400:	af00      	add	r7, sp, #0
 8001402:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001406:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800140a:	6018      	str	r0, [r3, #0]
 800140c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001410:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001414:	6019      	str	r1, [r3, #0]
 8001416:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800141a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800141e:	601a      	str	r2, [r3, #0]
	unsigned int i,j,k,l = 0;			// Maak iterators aan voor het maken van een moving window langs de buffer message
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	i = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	j = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	k = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac


	Message_parser localParser;

	  while (Message[i] != 0) 	// Kijk voor line end
 8001438:	e08d      	b.n	8001556 <LogicLayer_Parser+0x15a>
	  {

		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
		  {
			  i++;
 800143a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800143e:	3301      	adds	r3, #1
 8001440:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

			  if (i > Messagelength) // Error detectie tegen oneindige while loop
 8001444:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001448:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800144c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d903      	bls.n	800145e <LogicLayer_Parser+0x62>
			  {
				  printf("Error , not detected \n");
 8001456:	4856      	ldr	r0, [pc, #344]	; (80015b0 <LogicLayer_Parser+0x1b4>)
 8001458:	f008 f9ec 	bl	8009834 <puts>
				  break;
 800145c:	e015      	b.n	800148a <LogicLayer_Parser+0x8e>
		  while (Message[i] != 44 && Message[i] != 0)		//Detectie van de comma seperator
 800145e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001462:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b2c      	cmp	r3, #44	; 0x2c
 8001472:	d00a      	beq.n	800148a <LogicLayer_Parser+0x8e>
 8001474:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001478:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1d7      	bne.n	800143a <LogicLayer_Parser+0x3e>
			  }
		  }

	  	  for (l=0; j<i; j++)
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001490:	e023      	b.n	80014da <LogicLayer_Parser+0xde>
	  	  {
	  		localParser.Parser_Message[k][l] = Message[j];
 8001492:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001496:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014a0:	4413      	add	r3, r2
 80014a2:	7818      	ldrb	r0, [r3, #0]
 80014a4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80014a8:	f5a3 71d2 	sub.w	r1, r3, #420	; 0x1a4
 80014ac:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 80014b0:	4613      	mov	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	18ca      	adds	r2, r1, r3
 80014ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014be:	4413      	add	r3, r2
 80014c0:	3301      	adds	r3, #1
 80014c2:	4602      	mov	r2, r0
 80014c4:	701a      	strb	r2, [r3, #0]
	  		l++;
 80014c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80014ca:	3301      	adds	r3, #1
 80014cc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	  	  for (l=0; j<i; j++)
 80014d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014d4:	3301      	adds	r3, #1
 80014d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80014da:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80014de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d3d5      	bcc.n	8001492 <LogicLayer_Parser+0x96>
	  	  }

	  	  j = i+1;
 80014e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80014ea:	3301      	adds	r3, #1
 80014ec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	  	  if (Message[j] == 0x20)	// checking for spaces between lines
 80014f0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80014f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b20      	cmp	r3, #32
 8001504:	d104      	bne.n	8001510 <LogicLayer_Parser+0x114>
	  	  {
	  		  j++;
 8001506:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800150a:	3301      	adds	r3, #1
 800150c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	  	  }

	  	  localParser.Parser_Message[k][l] = '\0';
 8001510:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001514:	f5a3 71d2 	sub.w	r1, r3, #420	; 0x1a4
 8001518:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	18ca      	adds	r2, r1, r3
 8001526:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800152a:	4413      	add	r3, r2
 800152c:	3301      	adds	r3, #1
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]

	  	  i++;		//verhoog de iterator om niet in een oneindige loop te komen ivm while loop en komma detectie
 8001532:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001536:	3301      	adds	r3, #1
 8001538:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

	  	  k=(k+1);	//verhoog iterator voor meerdere berichten opslag
 800153c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001540:	3301      	adds	r3, #1
 8001542:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	  	  if (k > BUFFER_LEN) // Error detectie tegen oneindige while loop
 8001546:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800154a:	2b14      	cmp	r3, #20
 800154c:	d903      	bls.n	8001556 <LogicLayer_Parser+0x15a>
	  	  	  {
	  		  	  printf("Error no message end detected \n");
 800154e:	4819      	ldr	r0, [pc, #100]	; (80015b4 <LogicLayer_Parser+0x1b8>)
 8001550:	f008 f970 	bl	8009834 <puts>
	  		  	  break;
 8001554:	e00b      	b.n	800156e <LogicLayer_Parser+0x172>
	  while (Message[i] != 0) 	// Kijk voor line end
 8001556:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800155a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f47f af78 	bne.w	800145e <LogicLayer_Parser+0x62>
	  	  	  }

	  }

	localParser.Variable_length = k;
 800156e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001572:	b2da      	uxtb	r2, r3
 8001574:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001578:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800157c:	701a      	strb	r2, [r3, #0]

	return localParser;
 800157e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8001582:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800158c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f240 1391 	movw	r3, #401	; 0x191
 8001598:	461a      	mov	r2, r3
 800159a:	f008 f8af 	bl	80096fc <memcpy>
}
 800159e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80015a2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80015a6:	6818      	ldr	r0, [r3, #0]
 80015a8:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	0800a794 	.word	0x0800a794
 80015b4:	0800a7ac 	.word	0x0800a7ac

080015b8 <LogicLayer_CommandCheck>:

int LogicLayer_CommandCheck(Message_parser localParser)
{
 80015b8:	b084      	sub	sp, #16
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	f107 0c10 	add.w	ip, r7, #16
 80015c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	int i;
	unsigned char stringLength = sizeof(commands_check) / sizeof(commands_check[0]);
 80015c8:	2308      	movs	r3, #8
 80015ca:	70bb      	strb	r3, [r7, #2]
	unsigned char stringCheck = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	707b      	strb	r3, [r7, #1]
	unsigned char stringCorrect = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	70fb      	strb	r3, [r7, #3]

	for (i = 1; i < stringLength; i++)
 80015d4:	2301      	movs	r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	e017      	b.n	800160a <LogicLayer_CommandCheck+0x52>
	{
		stringCheck = strcmp(localParser.Parser_Message[0],commands_check[i-1]);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	1e5a      	subs	r2, r3, #1
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4a11      	ldr	r2, [pc, #68]	; (800162c <LogicLayer_CommandCheck+0x74>)
 80015e8:	441a      	add	r2, r3
 80015ea:	f107 0311 	add.w	r3, r7, #17
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe fded 	bl	80001d0 <strcmp>
 80015f6:	4603      	mov	r3, r0
 80015f8:	707b      	strb	r3, [r7, #1]
		if (stringCheck == 0)
 80015fa:	787b      	ldrb	r3, [r7, #1]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <LogicLayer_CommandCheck+0x4c>
		{
			stringCorrect = i;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	70fb      	strb	r3, [r7, #3]
	for (i = 1; i < stringLength; i++)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3301      	adds	r3, #1
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	78bb      	ldrb	r3, [r7, #2]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	dbe3      	blt.n	80015da <LogicLayer_CommandCheck+0x22>
		}
	}

	if (stringCorrect != 0)
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <LogicLayer_CommandCheck+0x64>
	{
		return stringCorrect;
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	e000      	b.n	800161e <LogicLayer_CommandCheck+0x66>
	}
	else return 0;
 800161c:	2300      	movs	r3, #0

}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001628:	b004      	add	sp, #16
 800162a:	4770      	bx	lr
 800162c:	0800a82c 	.word	0x0800a82c

08001630 <LogicLayer_CommandSwitch>:

int LogicLayer_CommandSwitch(unsigned char Command, Message_parser localParser)
{
 8001630:	b084      	sub	sp, #16
 8001632:	b590      	push	{r4, r7, lr}
 8001634:	b08d      	sub	sp, #52	; 0x34
 8001636:	af02      	add	r7, sp, #8
 8001638:	4604      	mov	r4, r0
 800163a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800163e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001642:	4623      	mov	r3, r4
 8001644:	71fb      	strb	r3, [r7, #7]

	switch (Command)
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	3b01      	subs	r3, #1
 800164a:	2b04      	cmp	r3, #4
 800164c:	f200 8111 	bhi.w	8001872 <LogicLayer_CommandSwitch+0x242>
 8001650:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <LogicLayer_CommandSwitch+0x28>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	0800166d 	.word	0x0800166d
 800165c:	08001735 	.word	0x08001735
 8001660:	080017fd 	.word	0x080017fd
 8001664:	08001803 	.word	0x08001803
 8001668:	08001855 	.word	0x08001855
		case 1:	//lijn
		{
			unsigned short x_1, y_1, x_2, y_2;
			unsigned char dikte, color;

			x_1 = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[1]), 1);
 800166c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001670:	3315      	adds	r3, #21
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fdb6 	bl	80001e4 <strlen>
 8001678:	4603      	mov	r3, r0
 800167a:	4619      	mov	r1, r3
 800167c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001680:	2201      	movs	r2, #1
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f93e 	bl	8001904 <LogicLayer_intToAscii>
 8001688:	4603      	mov	r3, r0
 800168a:	82fb      	strh	r3, [r7, #22]
			y_1 = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[2]), 2);
 800168c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001690:	3329      	adds	r3, #41	; 0x29
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fda6 	bl	80001e4 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	4619      	mov	r1, r3
 800169c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016a0:	2202      	movs	r2, #2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f92e 	bl	8001904 <LogicLayer_intToAscii>
 80016a8:	4603      	mov	r3, r0
 80016aa:	82bb      	strh	r3, [r7, #20]
			x_2 = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[3]), 3);
 80016ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016b0:	333d      	adds	r3, #61	; 0x3d
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fd96 	bl	80001e4 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016c0:	2203      	movs	r2, #3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f91e 	bl	8001904 <LogicLayer_intToAscii>
 80016c8:	4603      	mov	r3, r0
 80016ca:	827b      	strh	r3, [r7, #18]
			y_2 = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[4]), 4);
 80016cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016d0:	3351      	adds	r3, #81	; 0x51
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fd86 	bl	80001e4 <strlen>
 80016d8:	4603      	mov	r3, r0
 80016da:	4619      	mov	r1, r3
 80016dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016e0:	2204      	movs	r2, #4
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f90e 	bl	8001904 <LogicLayer_intToAscii>
 80016e8:	4603      	mov	r3, r0
 80016ea:	823b      	strh	r3, [r7, #16]
			dikte = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[6]), 6);
 80016ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016f0:	3379      	adds	r3, #121	; 0x79
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe fd76 	bl	80001e4 <strlen>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4619      	mov	r1, r3
 80016fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001700:	2206      	movs	r2, #6
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f8fe 	bl	8001904 <LogicLayer_intToAscii>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]

			color = LogicLayer_ColourCheck(&localParser, 5);
 800170c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001710:	2105      	movs	r1, #5
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f8b8 	bl	8001888 <LogicLayer_ColourCheck>
 8001718:	4603      	mov	r3, r0
 800171a:	73bb      	strb	r3, [r7, #14]

			API_draw_line(x_1, y_1, x_2, y_2, dikte, color);
 800171c:	8a3c      	ldrh	r4, [r7, #16]
 800171e:	8a7a      	ldrh	r2, [r7, #18]
 8001720:	8ab9      	ldrh	r1, [r7, #20]
 8001722:	8af8      	ldrh	r0, [r7, #22]
 8001724:	7bbb      	ldrb	r3, [r7, #14]
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4623      	mov	r3, r4
 800172e:	f7ff f945 	bl	80009bc <API_draw_line>

			break;
 8001732:	e0a0      	b.n	8001876 <LogicLayer_CommandSwitch+0x246>

		case 2:	//rechthoek
		{
			unsigned short x_lup,  y_lup,  breedte,  hoogte;
			unsigned char color, gevuld;
			x_lup = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[1]), 1);
 8001734:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001738:	3315      	adds	r3, #21
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe fd52 	bl	80001e4 <strlen>
 8001740:	4603      	mov	r3, r0
 8001742:	4619      	mov	r1, r3
 8001744:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001748:	2201      	movs	r2, #1
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f8da 	bl	8001904 <LogicLayer_intToAscii>
 8001750:	4603      	mov	r3, r0
 8001752:	843b      	strh	r3, [r7, #32]
			y_lup = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[2]), 2);
 8001754:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001758:	3329      	adds	r3, #41	; 0x29
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fd42 	bl	80001e4 <strlen>
 8001760:	4603      	mov	r3, r0
 8001762:	4619      	mov	r1, r3
 8001764:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001768:	2202      	movs	r2, #2
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f8ca 	bl	8001904 <LogicLayer_intToAscii>
 8001770:	4603      	mov	r3, r0
 8001772:	83fb      	strh	r3, [r7, #30]
			breedte = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[3]), 3);
 8001774:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001778:	333d      	adds	r3, #61	; 0x3d
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fd32 	bl	80001e4 <strlen>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001788:	2203      	movs	r2, #3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f8ba 	bl	8001904 <LogicLayer_intToAscii>
 8001790:	4603      	mov	r3, r0
 8001792:	83bb      	strh	r3, [r7, #28]
			hoogte = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[4]), 4);
 8001794:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001798:	3351      	adds	r3, #81	; 0x51
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fd22 	bl	80001e4 <strlen>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4619      	mov	r1, r3
 80017a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017a8:	2204      	movs	r2, #4
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f8aa 	bl	8001904 <LogicLayer_intToAscii>
 80017b0:	4603      	mov	r3, r0
 80017b2:	837b      	strh	r3, [r7, #26]

			color = LogicLayer_ColourCheck(&localParser, 5);
 80017b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017b8:	2105      	movs	r1, #5
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f864 	bl	8001888 <LogicLayer_ColourCheck>
 80017c0:	4603      	mov	r3, r0
 80017c2:	767b      	strb	r3, [r7, #25]
			gevuld = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[6]), 6);
 80017c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017c8:	3379      	adds	r3, #121	; 0x79
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fd0a 	bl	80001e4 <strlen>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4619      	mov	r1, r3
 80017d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017d8:	2206      	movs	r2, #6
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f892 	bl	8001904 <LogicLayer_intToAscii>
 80017e0:	4603      	mov	r3, r0
 80017e2:	763b      	strb	r3, [r7, #24]

			API_draw_rectangle(x_lup, y_lup, breedte, hoogte, color, gevuld);
 80017e4:	8b7c      	ldrh	r4, [r7, #26]
 80017e6:	8bba      	ldrh	r2, [r7, #28]
 80017e8:	8bf9      	ldrh	r1, [r7, #30]
 80017ea:	8c38      	ldrh	r0, [r7, #32]
 80017ec:	7e3b      	ldrb	r3, [r7, #24]
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	7e7b      	ldrb	r3, [r7, #25]
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	4623      	mov	r3, r4
 80017f6:	f7ff f9a1 	bl	8000b3c <API_draw_rectangle>

			break;
 80017fa:	e03c      	b.n	8001876 <LogicLayer_CommandSwitch+0x246>
		}

		case 3: //tekst
		{
			API_blur_screen();
 80017fc:	f7ff fd78 	bl	80012f0 <API_blur_screen>
			break;
 8001800:	e039      	b.n	8001876 <LogicLayer_CommandSwitch+0x246>
		}

		case 4: //bitmap
		{
			unsigned short x_lup = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[2]), 2);
 8001802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001806:	3329      	adds	r3, #41	; 0x29
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fceb 	bl	80001e4 <strlen>
 800180e:	4603      	mov	r3, r0
 8001810:	4619      	mov	r1, r3
 8001812:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001816:	2202      	movs	r2, #2
 8001818:	4618      	mov	r0, r3
 800181a:	f000 f873 	bl	8001904 <LogicLayer_intToAscii>
 800181e:	4603      	mov	r3, r0
 8001820:	84bb      	strh	r3, [r7, #36]	; 0x24
			unsigned short y_lup = LogicLayer_intToAscii(&localParser, strlen(localParser.Parser_Message[3]), 3);
 8001822:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001826:	333d      	adds	r3, #61	; 0x3d
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fcdb 	bl	80001e4 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	4619      	mov	r1, r3
 8001832:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001836:	2203      	movs	r2, #3
 8001838:	4618      	mov	r0, r3
 800183a:	f000 f863 	bl	8001904 <LogicLayer_intToAscii>
 800183e:	4603      	mov	r3, r0
 8001840:	847b      	strh	r3, [r7, #34]	; 0x22
			API_read_bitmap_SD(localParser.Parser_Message[1], x_lup, y_lup);
 8001842:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001844:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001846:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800184a:	3315      	adds	r3, #21
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fbf1 	bl	8001034 <API_read_bitmap_SD>
			break;
 8001852:	e010      	b.n	8001876 <LogicLayer_CommandSwitch+0x246>
		}

		case 5: //clearscherm
		{
			unsigned char color;
			color = LogicLayer_ColourCheck(&localParser, 1);
 8001854:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001858:	2101      	movs	r1, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f814 	bl	8001888 <LogicLayer_ColourCheck>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			UB_VGA_FillScreen(color);
 8001866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800186a:	4618      	mov	r0, r3
 800186c:	f000 ff64 	bl	8002738 <UB_VGA_FillScreen>
			break;
 8001870:	e001      	b.n	8001876 <LogicLayer_CommandSwitch+0x246>
		}
		default:
		{
			return 0;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <LogicLayer_CommandSwitch+0x248>
		}
	}
	return 1;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	372c      	adds	r7, #44	; 0x2c
 800187c:	46bd      	mov	sp, r7
 800187e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001882:	b004      	add	sp, #16
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <LogicLayer_ColourCheck>:

int LogicLayer_ColourCheck(Message_parser* localParser, unsigned char StructLocation)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
	int i;
	unsigned char stringLength = sizeof(message_col_string) / sizeof(message_col_string[0])+1;
 8001894:	2310      	movs	r3, #16
 8001896:	72fb      	strb	r3, [r7, #11]
	unsigned char stringCheck = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	72bb      	strb	r3, [r7, #10]
	unsigned char stringCorrect = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	727b      	strb	r3, [r7, #9]

	for (i = 1; i < stringLength; i++)
 80018a0:	2301      	movs	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	e021      	b.n	80018ea <LogicLayer_ColourCheck+0x62>
	{
		stringCheck = strcmp(localParser->Parser_Message[StructLocation],message_col_string[i-1]);
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	1c58      	adds	r0, r3, #1
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1e5a      	subs	r2, r3, #1
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4a0e      	ldr	r2, [pc, #56]	; (80018fc <LogicLayer_ColourCheck+0x74>)
 80018c4:	4413      	add	r3, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7fe fc82 	bl	80001d0 <strcmp>
 80018cc:	4603      	mov	r3, r0
 80018ce:	72bb      	strb	r3, [r7, #10]
		if (stringCheck == 0)
 80018d0:	7abb      	ldrb	r3, [r7, #10]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d106      	bne.n	80018e4 <LogicLayer_ColourCheck+0x5c>
		{
			return stringCorrect = message_col[i-1];
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3b01      	subs	r3, #1
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <LogicLayer_ColourCheck+0x78>)
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
 80018de:	727b      	strb	r3, [r7, #9]
 80018e0:	7a7b      	ldrb	r3, [r7, #9]
 80018e2:	e007      	b.n	80018f4 <LogicLayer_ColourCheck+0x6c>
	for (i = 1; i < stringLength; i++)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	7afb      	ldrb	r3, [r7, #11]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	dbd9      	blt.n	80018a6 <LogicLayer_ColourCheck+0x1e>
		}
	}


	return 0;
 80018f2:	2300      	movs	r3, #0

}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	0800a8cc 	.word	0x0800a8cc
 8001900:	0800a9f8 	.word	0x0800a9f8

08001904 <LogicLayer_intToAscii>:

int LogicLayer_intToAscii(Message_parser* localParser, int numbersize, int StructLocation)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
	unsigned char i = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
	unsigned char DecimalshiftBuff = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]
	unsigned int decimalvalue = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 800191c:	2300      	movs	r3, #0
 800191e:	77fb      	strb	r3, [r7, #31]
 8001920:	e01b      	b.n	800195a <LogicLayer_intToAscii+0x56>
	{
		DecimalshiftBuff = localParser->Parser_Message[StructLocation][i];	// making sure array doesnt have a negative number
 8001922:	7ff9      	ldrb	r1, [r7, #31]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4403      	add	r3, r0
 8001932:	440b      	add	r3, r1
 8001934:	3301      	adds	r3, #1
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	75fb      	strb	r3, [r7, #23]
		DecimalshiftBuff -= '0';
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	3b30      	subs	r3, #48	; 0x30
 800193e:	75fb      	strb	r3, [r7, #23]

		decimalvalue *= 10;
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	61bb      	str	r3, [r7, #24]
		decimalvalue += DecimalshiftBuff;
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4413      	add	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < numbersize; i++)
 8001954:	7ffb      	ldrb	r3, [r7, #31]
 8001956:	3301      	adds	r3, #1
 8001958:	77fb      	strb	r3, [r7, #31]
 800195a:	7ffb      	ldrb	r3, [r7, #31]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	429a      	cmp	r2, r3
 8001960:	dcdf      	bgt.n	8001922 <LogicLayer_intToAscii+0x1e>
	}
	return decimalvalue;
 8001962:	69bb      	ldr	r3, [r7, #24]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3724      	adds	r7, #36	; 0x24
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_DMA_Init+0x3c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <MX_DMA_Init+0x3c>)
 8001980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_DMA_Init+0x3c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2044      	movs	r0, #68	; 0x44
 8001998:	f001 f867 	bl	8002a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800199c:	2044      	movs	r0, #68	; 0x44
 800199e:	f001 f880 	bl	8002aa2 <HAL_NVIC_EnableIRQ>

}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800

080019b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
 80019c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <MX_GPIO_Init+0x108>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a3a      	ldr	r2, [pc, #232]	; (8001ab8 <MX_GPIO_Init+0x108>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <MX_GPIO_Init+0x108>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <MX_GPIO_Init+0x108>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a33      	ldr	r2, [pc, #204]	; (8001ab8 <MX_GPIO_Init+0x108>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <MX_GPIO_Init+0x108>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <MX_GPIO_Init+0x108>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a2c      	ldr	r2, [pc, #176]	; (8001ab8 <MX_GPIO_Init+0x108>)
 8001a08:	f043 0310 	orr.w	r3, r3, #16
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <MX_GPIO_Init+0x108>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <MX_GPIO_Init+0x108>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <MX_GPIO_Init+0x108>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <MX_GPIO_Init+0x108>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4820      	ldr	r0, [pc, #128]	; (8001abc <MX_GPIO_Init+0x10c>)
 8001a3c:	f001 fdea 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001a40:	2200      	movs	r2, #0
 8001a42:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001a46:	481e      	ldr	r0, [pc, #120]	; (8001ac0 <MX_GPIO_Init+0x110>)
 8001a48:	f001 fde4 	bl	8003614 <HAL_GPIO_WritePin>
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VGA_VSYNC_GPIO_Port, VGA_VSYNC_Pin, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a52:	481c      	ldr	r0, [pc, #112]	; (8001ac4 <MX_GPIO_Init+0x114>)
 8001a54:	f001 fdde 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4813      	ldr	r0, [pc, #76]	; (8001abc <MX_GPIO_Init+0x10c>)
 8001a70:	f001 fc34 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = VGA_BLUE0_Pin|VGA_BLUE1_Pin|VGA_GREEN0_Pin|VGA_GREEN1_Pin
 8001a74:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001a78:	617b      	str	r3, [r7, #20]
                          |VGA_GREEN2_Pin|VGA_RED0_Pin|VGA_RED1_Pin|VGA_RED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <MX_GPIO_Init+0x110>)
 8001a8e:	f001 fc25 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VGA_VSYNC_Pin;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VGA_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <MX_GPIO_Init+0x114>)
 8001aac:	f001 fc16 	bl	80032dc <HAL_GPIO_Init>

}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	; 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40020400 	.word	0x40020400

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 8001ace:	af62      	add	r7, sp, #392	; 0x188
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ad0:	f000 fe7e 	bl	80027d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad4:	f000 f8e0 	bl	8001c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad8:	f7ff ff6a 	bl	80019b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001adc:	f7ff ff48 	bl	8001970 <MX_DMA_Init>
  MX_TIM1_Init();
 8001ae0:	f000 fbcc 	bl	800227c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ae4:	f000 fc1a 	bl	800231c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001ae8:	f000 fd30 	bl	800254c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001aec:	f004 ff06 	bl	80068fc <MX_FATFS_Init>
  MX_SPI1_Init();
 8001af0:	f000 f956 	bl	8001da0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  UB_VGA_Screen_Init(); // Init VGA-Screen
 8001af4:	f000 fdce 	bl	8002694 <UB_VGA_Screen_Init>

  UB_VGA_FillScreen(VGA_COL_BLACK);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f000 fe1d 	bl	8002738 <UB_VGA_FillScreen>
  UB_VGA_SetPixel(10,10,10);
 8001afe:	220a      	movs	r2, #10
 8001b00:	210a      	movs	r1, #10
 8001b02:	200a      	movs	r0, #10
 8001b04:	f000 fe3c 	bl	8002780 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(0,0,0x00);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f000 fe37 	bl	8002780 <UB_VGA_SetPixel>
  UB_VGA_SetPixel(319,0,0x00);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	f240 103f 	movw	r0, #319	; 0x13f
 8001b1a:	f000 fe31 	bl	8002780 <UB_VGA_SetPixel>




  unsigned int i = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4


  for(i = 0; i < LINE_BUFLEN; i++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b2a:	e00b      	b.n	8001b44 <main+0x7c>
	  input.line_rx_buffer[i] = 0;
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <main+0x1b0>)
 8001b2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001b32:	4413      	add	r3, r2
 8001b34:	3301      	adds	r3, #1
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < LINE_BUFLEN; i++)
 8001b3a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b44:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b4c:	d3ee      	bcc.n	8001b2c <main+0x64>

  // Reset some stuff
  input.byte_buffer_rx[0] = 0;
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <main+0x1b0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
  input.char_counter = 0;
 8001b54:	4b48      	ldr	r3, [pc, #288]	; (8001c78 <main+0x1b0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
  input.command_execute_flag = FALSE;
 8001b5c:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <main+0x1b0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

  // HAl wants a memory location to store the charachter it receives from the UART
  // We will pass it an array, but we will not use it. We declare our own variable in the interupt handler
  // See stm32f4xx_it.c
  HAL_UART_Receive_IT(&huart2, input.byte_buffer_rx, LINE_BUFLEN);
 8001b64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b68:	4943      	ldr	r1, [pc, #268]	; (8001c78 <main+0x1b0>)
 8001b6a:	4844      	ldr	r0, [pc, #272]	; (8001c7c <main+0x1b4>)
 8001b6c:	f003 ff23 	bl	80059b6 <HAL_UART_Receive_IT>
  //API_read_bitmap_SD("01", 0, 0);
  char test[] = "tot ";
 8001b70:	4a43      	ldr	r2, [pc, #268]	; (8001c80 <main+0x1b8>)
 8001b72:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b7a:	6018      	str	r0, [r3, #0]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	7019      	strb	r1, [r3, #0]
  char test_naam[] = "arial";
 8001b80:	4a40      	ldr	r2, [pc, #256]	; (8001c84 <main+0x1bc>)
 8001b82:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b8a:	6018      	str	r0, [r3, #0]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	8019      	strh	r1, [r3, #0]
  char test_style[] = "normaal";
 8001b90:	4a3d      	ldr	r2, [pc, #244]	; (8001c88 <main+0x1c0>)
 8001b92:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b9a:	e883 0003 	stmia.w	r3, {r0, r1}
  char* tekst = test;
 8001b9e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001ba2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  char* fontnaam = test_naam;
 8001ba6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001baa:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
  char* fontstijl = test_style;
 8001bae:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001bb2:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  API_draw_text(20, 120, VGA_COL_RED, tekst, fontnaam, 2, fontstijl);
 8001bb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001bca:	22e0      	movs	r2, #224	; 0xe0
 8001bcc:	2178      	movs	r1, #120	; 0x78
 8001bce:	2014      	movs	r0, #20
 8001bd0:	f7ff f836 	bl	8000c40 <API_draw_text>

  int j = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

  int Test = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(input.command_execute_flag == TRUE)
 8001be0:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <main+0x1b0>)
 8001be2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001be6:	2bff      	cmp	r3, #255	; 0xff
 8001be8:	d1fa      	bne.n	8001be0 <main+0x118>
	  {
		  i = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	//	  API_read_bitmap_SD(&input.line_rx_buffer, j, 0);
		  Debugging = LogicLayer_Parser(input.line_rx_buffer, LINE_BUFLEN);
 8001bf0:	4c26      	ldr	r4, [pc, #152]	; (8001c8c <main+0x1c4>)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bf8:	4925      	ldr	r1, [pc, #148]	; (8001c90 <main+0x1c8>)
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fbfe 	bl	80013fc <LogicLayer_Parser>
 8001c00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001c04:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f240 1391 	movw	r3, #401	; 0x191
 8001c10:	461a      	mov	r2, r3
 8001c12:	f007 fd73 	bl	80096fc <memcpy>
		  Test = LogicLayer_CommandCheck(Debugging);
 8001c16:	4c1d      	ldr	r4, [pc, #116]	; (8001c8c <main+0x1c4>)
 8001c18:	4668      	mov	r0, sp
 8001c1a:	f104 0310 	add.w	r3, r4, #16
 8001c1e:	f240 1281 	movw	r2, #385	; 0x181
 8001c22:	4619      	mov	r1, r3
 8001c24:	f007 fd6a 	bl	80096fc <memcpy>
 8001c28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c2c:	f7ff fcc4 	bl	80015b8 <LogicLayer_CommandCheck>
 8001c30:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
		  if (Test == 0)
 8001c34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <main+0x196>
		  {
			  //error handler
		  }
		  else
		  {
			  LogicLayer_CommandSwitch(Test, Debugging);
 8001c3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c40:	b2dd      	uxtb	r5, r3
 8001c42:	4c12      	ldr	r4, [pc, #72]	; (8001c8c <main+0x1c4>)
 8001c44:	4668      	mov	r0, sp
 8001c46:	f104 030c 	add.w	r3, r4, #12
 8001c4a:	f240 1285 	movw	r2, #389	; 0x185
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f007 fd54 	bl	80096fc <memcpy>
 8001c54:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001c58:	4628      	mov	r0, r5
 8001c5a:	f7ff fce9 	bl	8001630 <LogicLayer_CommandSwitch>
		  }

		  j+= 160;
 8001c5e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001c62:	33a0      	adds	r3, #160	; 0xa0
 8001c64:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0



		  // Do some stuff
		  printf("yes\n");
 8001c68:	480a      	ldr	r0, [pc, #40]	; (8001c94 <main+0x1cc>)
 8001c6a:	f007 fde3 	bl	8009834 <puts>
		  //UB_VGA_FillScreen(colorTest);


		  // When finished reset the flag
		  input.command_execute_flag = FALSE;
 8001c6e:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <main+0x1b0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	  if(input.command_execute_flag == TRUE)
 8001c76:	e7b3      	b.n	8001be0 <main+0x118>
 8001c78:	20000198 	.word	0x20000198
 8001c7c:	20000870 	.word	0x20000870
 8001c80:	0800a7d0 	.word	0x0800a7d0
 8001c84:	0800a7d8 	.word	0x0800a7d8
 8001c88:	0800a7e0 	.word	0x0800a7e0
 8001c8c:	20000590 	.word	0x20000590
 8001c90:	20000199 	.word	0x20000199
 8001c94:	0800a7cc 	.word	0x0800a7cc

08001c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b094      	sub	sp, #80	; 0x50
 8001c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	2230      	movs	r2, #48	; 0x30
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f007 fd36 	bl	8009718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <SystemClock_Config+0xcc>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	4a27      	ldr	r2, [pc, #156]	; (8001d64 <SystemClock_Config+0xcc>)
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ccc:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <SystemClock_Config+0xcc>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <SystemClock_Config+0xd0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <SystemClock_Config+0xd0>)
 8001ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <SystemClock_Config+0xd0>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d0c:	23a8      	movs	r3, #168	; 0xa8
 8001d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d14:	2307      	movs	r3, #7
 8001d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 fc93 	bl	8003648 <HAL_RCC_OscConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d28:	f000 f832 	bl	8001d90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	2105      	movs	r1, #5
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 fef4 	bl	8003b38 <HAL_RCC_ClockConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d56:	f000 f81b 	bl	8001d90 <Error_Handler>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3750      	adds	r7, #80	; 0x50
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40007000 	.word	0x40007000

08001d6c <__io_putchar>:
	#define USART_PRINTF int fputc(int ch, FILE *f)		//With other compiler printf calls fputc()
#endif /* __GNUC__ */

//Retargets the C library printf function to the USART
USART_PRINTF
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);	//Write character to UART2
 8001d74:	1d39      	adds	r1, r7, #4
 8001d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <__io_putchar+0x20>)
 8001d7e:	f003 fd88 	bl	8005892 <HAL_UART_Transmit>
	return ch;												//Return the character
 8001d82:	687b      	ldr	r3, [r7, #4]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000870 	.word	0x20000870

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001da4:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <MX_SPI1_Init+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dd4:	2238      	movs	r2, #56	; 0x38
 8001dd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001dec:	220a      	movs	r2, #10
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	; (8001e04 <MX_SPI1_Init+0x64>)
 8001df2:	f002 f8c1 	bl	8003f78 <HAL_SPI_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dfc:	f7ff ffc8 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000724 	.word	0x20000724
 8001e08:	40013000 	.word	0x40013000

08001e0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <HAL_SPI_MspInit+0xc0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d149      	bne.n	8001ec2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_SPI_MspInit+0xc4>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e82:	23c0      	movs	r3, #192	; 0xc0
 8001e84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e92:	2305      	movs	r3, #5
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <HAL_SPI_MspInit+0xc8>)
 8001e9e:	f001 fa1d 	bl	80032dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ea2:	2308      	movs	r3, #8
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <HAL_SPI_MspInit+0xcc>)
 8001ebe:	f001 fa0d 	bl	80032dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40013000 	.word	0x40013000
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40020400 	.word	0x40020400

08001edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a0f      	ldr	r2, [pc, #60]	; (8001f28 <HAL_MspInit+0x4c>)
 8001eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HAL_MspInit+0x4c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	4a08      	ldr	r2, [pc, #32]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_MspInit+0x4c>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 fc78 	bl	8002874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f8c:	4828      	ldr	r0, [pc, #160]	; (8002030 <TIM2_IRQHandler+0xa8>)
 8001f8e:	f002 fdcf 	bl	8004b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_CC3); // uncomment HAL_TIM_IRQHandler(&htim2); ^^
 8001f92:	4b27      	ldr	r3, [pc, #156]	; (8002030 <TIM2_IRQHandler+0xa8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f06f 0208 	mvn.w	r2, #8
 8001f9a:	611a      	str	r2, [r3, #16]

  VGA.hsync_cnt++;
 8001f9c:	4b25      	ldr	r3, [pc, #148]	; (8002034 <TIM2_IRQHandler+0xac>)
 8001f9e:	881b      	ldrh	r3, [r3, #0]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <TIM2_IRQHandler+0xac>)
 8001fa6:	801a      	strh	r2, [r3, #0]
  if (VGA.hsync_cnt >= VGA_VSYNC_PERIODE)
 8001fa8:	4b22      	ldr	r3, [pc, #136]	; (8002034 <TIM2_IRQHandler+0xac>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001fb0:	d905      	bls.n	8001fbe <TIM2_IRQHandler+0x36>
  {
    // -----------
    VGA.hsync_cnt = 0;
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <TIM2_IRQHandler+0xac>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr = (uint32_t)(&VGA_RAM1[0]);
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <TIM2_IRQHandler+0xb0>)
 8001fba:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <TIM2_IRQHandler+0xac>)
 8001fbc:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  GPIOB->BSRR = (VGA.hsync_cnt < VGA_VSYNC_IMP) ? VGA_VSYNC_Pin << 16u: VGA_VSYNC_Pin;
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <TIM2_IRQHandler+0xac>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d802      	bhi.n	8001fcc <TIM2_IRQHandler+0x44>
 8001fc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001fca:	e001      	b.n	8001fd0 <TIM2_IRQHandler+0x48>
 8001fcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	; (800203c <TIM2_IRQHandler+0xb4>)
 8001fd2:	6193      	str	r3, [r2, #24]

  // Test for DMA start
  if((VGA.hsync_cnt >= VGA_VSYNC_BILD_START) && (VGA.hsync_cnt <= VGA_VSYNC_BILD_STOP))
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <TIM2_IRQHandler+0xac>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2b23      	cmp	r3, #35	; 0x23
 8001fda:	d927      	bls.n	800202c <TIM2_IRQHandler+0xa4>
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <TIM2_IRQHandler+0xac>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f240 2202 	movw	r2, #514	; 0x202
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d821      	bhi.n	800202c <TIM2_IRQHandler+0xa4>
  {
    // after FP start => DMA Transfer

    // DMA2 init
	  DMA2_Stream5->CR = VGA.dma2_cr_reg;
 8001fe8:	4a15      	ldr	r2, [pc, #84]	; (8002040 <TIM2_IRQHandler+0xb8>)
 8001fea:	4b12      	ldr	r3, [pc, #72]	; (8002034 <TIM2_IRQHandler+0xac>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR = VGA.start_adr;
 8001ff0:	4a13      	ldr	r2, [pc, #76]	; (8002040 <TIM2_IRQHandler+0xb8>)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <TIM2_IRQHandler+0xac>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1 |= TIM_CR1_CEN; // __HAL_TIM_ENABLE(&htim1); // too slow?
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <TIM2_IRQHandler+0xbc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a11      	ldr	r2, [pc, #68]	; (8002044 <TIM2_IRQHandler+0xbc>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	6013      	str	r3, [r2, #0]
    // DMA2 enable
    __HAL_DMA_ENABLE(&hdma_tim1_up);
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <TIM2_IRQHandler+0xc0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <TIM2_IRQHandler+0xc0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
    // Test Adrespointer for high
    if(VGA.hsync_cnt & 0x01)
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <TIM2_IRQHandler+0xac>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <TIM2_IRQHandler+0xa4>
      VGA.start_adr += (VGA_DISPLAY_X + 1); // inc after Hsync
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <TIM2_IRQHandler+0xac>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f203 1341 	addw	r3, r3, #321	; 0x141
 8002028:	4a02      	ldr	r2, [pc, #8]	; (8002034 <TIM2_IRQHandler+0xac>)
 800202a:	6053      	str	r3, [r2, #4]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200007c8 	.word	0x200007c8
 8002034:	200135a4 	.word	0x200135a4
 8002038:	200008b4 	.word	0x200008b4
 800203c:	40020400 	.word	0x40020400
 8002040:	40026488 	.word	0x40026488
 8002044:	40010000 	.word	0x40010000
 8002048:	20000810 	.word	0x20000810

0800204c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	// Store the byte we received on the UART
	char uart_char = USART2->DR;
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <USART2_IRQHandler+0x70>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	71fb      	strb	r3, [r7, #7]

	//Ignore the '\n' character
	if(uart_char != LINE_FEED)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	2b0a      	cmp	r3, #10
 800205c:	d026      	beq.n	80020ac <USART2_IRQHandler+0x60>
	{
		//Check for CR or a dot
		// There was a small bug in the terminal program.
		// By terminating your message with a dot you can ignore the CR (Enter) character
		if((uart_char == CARRIAGE_RETURN) || (uart_char == '.'))
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2b0d      	cmp	r3, #13
 8002062:	d002      	beq.n	800206a <USART2_IRQHandler+0x1e>
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	2b2e      	cmp	r3, #46	; 0x2e
 8002068:	d10e      	bne.n	8002088 <USART2_IRQHandler+0x3c>
		{
			input.command_execute_flag = TRUE;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <USART2_IRQHandler+0x74>)
 800206c:	22ff      	movs	r2, #255	; 0xff
 800206e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			// Store the message length for processing
			input.msglen = input.char_counter;
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <USART2_IRQHandler+0x74>)
 8002074:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <USART2_IRQHandler+0x74>)
 800207a:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
			// Reset the counter for the next line
			input.char_counter = 0;
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <USART2_IRQHandler+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
 8002086:	e011      	b.n	80020ac <USART2_IRQHandler+0x60>
			//Gently exit interrupt
		}
		else
		{
			input.command_execute_flag = FALSE;
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <USART2_IRQHandler+0x74>)
 800208a:	2200      	movs	r2, #0
 800208c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			input.line_rx_buffer[input.char_counter] = uart_char;
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <USART2_IRQHandler+0x74>)
 8002092:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <USART2_IRQHandler+0x74>)
 8002098:	4413      	add	r3, r2
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	705a      	strb	r2, [r3, #1]
			input.char_counter++;
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <USART2_IRQHandler+0x74>)
 80020a0:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <USART2_IRQHandler+0x74>)
 80020a8:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		}
	}

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <USART2_IRQHandler+0x78>)
 80020ae:	f003 fcb3 	bl	8005a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40004400 	.word	0x40004400
 80020c0:	20000198 	.word	0x20000198
 80020c4:	20000870 	.word	0x20000870

080020c8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

    // Timer1 stop
    __HAL_TIM_DISABLE(&htim1);
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <DMA2_Stream5_IRQHandler+0x48>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6a1a      	ldr	r2, [r3, #32]
 80020d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10f      	bne.n	80020fc <DMA2_Stream5_IRQHandler+0x34>
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <DMA2_Stream5_IRQHandler+0x48>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6a1a      	ldr	r2, [r3, #32]
 80020e2:	f240 4344 	movw	r3, #1092	; 0x444
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d107      	bne.n	80020fc <DMA2_Stream5_IRQHandler+0x34>
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <DMA2_Stream5_IRQHandler+0x48>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <DMA2_Stream5_IRQHandler+0x48>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
    // DMA2 disable
    // __HAL_DMA_DISABLE(&hdma_tim1_up); // not needed?
    // switch on black
    GPIOE->BSRR = VGA_GPIO_HINIBBLE << 16u;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <DMA2_Stream5_IRQHandler+0x4c>)
 80020fe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002102:	619a      	str	r2, [r3, #24]

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002104:	4804      	ldr	r0, [pc, #16]	; (8002118 <DMA2_Stream5_IRQHandler+0x50>)
 8002106:	f000 fe7f 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000780 	.word	0x20000780
 8002114:	40021000 	.word	0x40021000
 8002118:	20000810 	.word	0x20000810

0800211c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e00a      	b.n	8002144 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800212e:	f3af 8000 	nop.w
 8002132:	4601      	mov	r1, r0
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	60ba      	str	r2, [r7, #8]
 800213a:	b2ca      	uxtb	r2, r1
 800213c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	dbf0      	blt.n	800212e <_read+0x12>
	}

return len;
 800214c:	687b      	ldr	r3, [r7, #4]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e009      	b.n	800217c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	1c5a      	adds	r2, r3, #1
 800216c:	60ba      	str	r2, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fdfb 	bl	8001d6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	3301      	adds	r3, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	dbf1      	blt.n	8002168 <_write+0x12>
	}
	return len;
 8002184:	687b      	ldr	r3, [r7, #4]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <_close>:

int _close(int file)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	return -1;
 8002196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021b6:	605a      	str	r2, [r3, #4]
	return 0;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_isatty>:

int _isatty(int file)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
	return 1;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
	return 0;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <_sbrk+0x50>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x16>
		heap_end = &end;
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <_sbrk+0x50>)
 800220a:	4a10      	ldr	r2, [pc, #64]	; (800224c <_sbrk+0x54>)
 800220c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <_sbrk+0x50>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <_sbrk+0x50>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	466a      	mov	r2, sp
 800221e:	4293      	cmp	r3, r2
 8002220:	d907      	bls.n	8002232 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002222:	f007 fa41 	bl	80096a8 <__errno>
 8002226:	4603      	mov	r3, r0
 8002228:	220c      	movs	r2, #12
 800222a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800222c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002230:	e006      	b.n	8002240 <_sbrk+0x48>
	}

	heap_end += incr;
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <_sbrk+0x50>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a03      	ldr	r2, [pc, #12]	; (8002248 <_sbrk+0x50>)
 800223c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2000077c 	.word	0x2000077c
 800224c:	20013610 	.word	0x20013610

08002250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <SystemInit+0x28>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	4a07      	ldr	r2, [pc, #28]	; (8002278 <SystemInit+0x28>)
 800225c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <SystemInit+0x28>)
 8002266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800226a:	609a      	str	r2, [r3, #8]
#endif
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002290:	463b      	mov	r3, r7
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <MX_TIM1_Init+0x98>)
 800229a:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <MX_TIM1_Init+0x9c>)
 800229c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = VGA_TIM1_PRESCALE;
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <MX_TIM1_Init+0x98>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <MX_TIM1_Init+0x98>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = VGA_TIM1_PERIODE;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <MX_TIM1_Init+0x98>)
 80022ac:	220b      	movs	r2, #11
 80022ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <MX_TIM1_Init+0x98>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <MX_TIM1_Init+0x98>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022bc:	4b15      	ldr	r3, [pc, #84]	; (8002314 <MX_TIM1_Init+0x98>)
 80022be:	2200      	movs	r2, #0
 80022c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022c2:	4814      	ldr	r0, [pc, #80]	; (8002314 <MX_TIM1_Init+0x98>)
 80022c4:	f002 f94e 	bl	8004564 <HAL_TIM_Base_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80022ce:	f7ff fd5f 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4619      	mov	r1, r3
 80022de:	480d      	ldr	r0, [pc, #52]	; (8002314 <MX_TIM1_Init+0x98>)
 80022e0:	f002 fdf0 	bl	8004ec4 <HAL_TIM_ConfigClockSource>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80022ea:	f7ff fd51 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022f6:	463b      	mov	r3, r7
 80022f8:	4619      	mov	r1, r3
 80022fa:	4806      	ldr	r0, [pc, #24]	; (8002314 <MX_TIM1_Init+0x98>)
 80022fc:	f003 f9ec 	bl	80056d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002306:	f7ff fd43 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000780 	.word	0x20000780
 8002318:	40010000 	.word	0x40010000

0800231c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002322:	f107 0320 	add.w	r3, r7, #32
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]
 800233a:	615a      	str	r2, [r3, #20]
 800233c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <MX_TIM2_Init+0xcc>)
 8002340:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002344:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8002346:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <MX_TIM2_Init+0xcc>)
 8002348:	2200      	movs	r2, #0
 800234a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <MX_TIM2_Init+0xcc>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = VGA_TIM2_HSYNC_PERIODE;
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <MX_TIM2_Init+0xcc>)
 8002354:	f640 226b 	movw	r2, #2667	; 0xa6b
 8002358:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235a:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <MX_TIM2_Init+0xcc>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <MX_TIM2_Init+0xcc>)
 8002362:	2200      	movs	r2, #0
 8002364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002366:	4820      	ldr	r0, [pc, #128]	; (80023e8 <MX_TIM2_Init+0xcc>)
 8002368:	f002 f9b4 	bl	80046d4 <HAL_TIM_PWM_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002372:	f7ff fd0d 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800237e:	f107 0320 	add.w	r3, r7, #32
 8002382:	4619      	mov	r1, r3
 8002384:	4818      	ldr	r0, [pc, #96]	; (80023e8 <MX_TIM2_Init+0xcc>)
 8002386:	f003 f9a7 	bl	80056d8 <HAL_TIMEx_MasterConfigSynchronization>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002390:	f7ff fcfe 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002394:	2360      	movs	r3, #96	; 0x60
 8002396:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = VGA_TIM2_HTRIGGER_START - VGA_TIM2_DMA_DELAY;
 8002398:	f240 13bb 	movw	r3, #443	; 0x1bb
 800239c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800239e:	2302      	movs	r3, #2
 80023a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2208      	movs	r2, #8
 80023aa:	4619      	mov	r1, r3
 80023ac:	480e      	ldr	r0, [pc, #56]	; (80023e8 <MX_TIM2_Init+0xcc>)
 80023ae:	f002 fcc7 	bl	8004d40 <HAL_TIM_PWM_ConfigChannel>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80023b8:	f7ff fcea 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.Pulse = VGA_TIM2_HSYNC_IMP;
 80023bc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	220c      	movs	r2, #12
 80023c6:	4619      	mov	r1, r3
 80023c8:	4807      	ldr	r0, [pc, #28]	; (80023e8 <MX_TIM2_Init+0xcc>)
 80023ca:	f002 fcb9 	bl	8004d40 <HAL_TIM_PWM_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80023d4:	f7ff fcdc 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023d8:	4803      	ldr	r0, [pc, #12]	; (80023e8 <MX_TIM2_Init+0xcc>)
 80023da:	f000 f87f 	bl	80024dc <HAL_TIM_MspPostInit>

}
 80023de:	bf00      	nop
 80023e0:	3728      	adds	r7, #40	; 0x28
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200007c8 	.word	0x200007c8

080023ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a21      	ldr	r2, [pc, #132]	; (8002480 <HAL_TIM_Base_MspInit+0x94>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d13c      	bne.n	8002478 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_TIM_Base_MspInit+0x98>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_TIM_Base_MspInit+0x98>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6453      	str	r3, [r2, #68]	; 0x44
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_TIM_Base_MspInit+0x98>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <HAL_TIM_Base_MspInit+0xa0>)
 800241e:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8002420:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 8002422:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002426:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 8002436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800243a:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 8002450:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002454:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 8002458:	2200      	movs	r2, #0
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 800245c:	480a      	ldr	r0, [pc, #40]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 800245e:	f000 fb3b 	bl	8002ad8 <HAL_DMA_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_TIM_Base_MspInit+0x80>
    {
      Error_Handler();
 8002468:	f7ff fc92 	bl	8001d90 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a06      	ldr	r2, [pc, #24]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 8002470:	621a      	str	r2, [r3, #32]
 8002472:	4a05      	ldr	r2, [pc, #20]	; (8002488 <HAL_TIM_Base_MspInit+0x9c>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40010000 	.word	0x40010000
 8002484:	40023800 	.word	0x40023800
 8002488:	20000810 	.word	0x20000810
 800248c:	40026488 	.word	0x40026488

08002490 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a0:	d115      	bne.n	80024ce <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_TIM_PWM_MspInit+0x48>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <HAL_TIM_PWM_MspInit+0x48>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6413      	str	r3, [r2, #64]	; 0x40
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_TIM_PWM_MspInit+0x48>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	201c      	movs	r0, #28
 80024c4:	f000 fad1 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024c8:	201c      	movs	r0, #28
 80024ca:	f000 faea 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800

080024dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fc:	d11e      	bne.n	800253c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_TIM_MspPostInit+0x68>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <HAL_TIM_MspPostInit+0x68>)
 8002508:	f043 0302 	orr.w	r3, r3, #2
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <HAL_TIM_MspPostInit+0x68>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = VGA_HSYNC_Pin;
 800251a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800251e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800252c:	2301      	movs	r3, #1
 800252e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VGA_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8002530:	f107 030c 	add.w	r3, r7, #12
 8002534:	4619      	mov	r1, r3
 8002536:	4804      	ldr	r0, [pc, #16]	; (8002548 <HAL_TIM_MspPostInit+0x6c>)
 8002538:	f000 fed0 	bl	80032dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800253c:	bf00      	nop
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	40020400 	.word	0x40020400

0800254c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_USART2_UART_Init+0x4c>)
 8002552:	4a12      	ldr	r2, [pc, #72]	; (800259c <MX_USART2_UART_Init+0x50>)
 8002554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <MX_USART2_UART_Init+0x4c>)
 8002558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800255c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <MX_USART2_UART_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <MX_USART2_UART_Init+0x4c>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <MX_USART2_UART_Init+0x4c>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <MX_USART2_UART_Init+0x4c>)
 8002572:	220c      	movs	r2, #12
 8002574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002576:	4b08      	ldr	r3, [pc, #32]	; (8002598 <MX_USART2_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <MX_USART2_UART_Init+0x4c>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002582:	4805      	ldr	r0, [pc, #20]	; (8002598 <MX_USART2_UART_Init+0x4c>)
 8002584:	f003 f938 	bl	80057f8 <HAL_UART_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800258e:	f7ff fbff 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000870 	.word	0x20000870
 800259c:	40004400 	.word	0x40004400

080025a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08a      	sub	sp, #40	; 0x28
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <HAL_UART_MspInit+0x94>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d133      	bne.n	800262a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <HAL_UART_MspInit+0x98>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a1b      	ldr	r2, [pc, #108]	; (8002638 <HAL_UART_MspInit+0x98>)
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_UART_MspInit+0x98>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_UART_MspInit+0x98>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a14      	ldr	r2, [pc, #80]	; (8002638 <HAL_UART_MspInit+0x98>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_UART_MspInit+0x98>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025fa:	230c      	movs	r3, #12
 80025fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fe:	2302      	movs	r3, #2
 8002600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800260a:	2307      	movs	r3, #7
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	4619      	mov	r1, r3
 8002614:	4809      	ldr	r0, [pc, #36]	; (800263c <HAL_UART_MspInit+0x9c>)
 8002616:	f000 fe61 	bl	80032dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	2026      	movs	r0, #38	; 0x26
 8002620:	f000 fa23 	bl	8002a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002624:	2026      	movs	r0, #38	; 0x26
 8002626:	f000 fa3c 	bl	8002aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800262a:	bf00      	nop
 800262c:	3728      	adds	r7, #40	; 0x28
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40004400 	.word	0x40004400
 8002638:	40023800 	.word	0x40023800
 800263c:	40020000 	.word	0x40020000

08002640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002678 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002644:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002646:	e003      	b.n	8002650 <LoopCopyDataInit>

08002648 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800264a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800264c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800264e:	3104      	adds	r1, #4

08002650 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002650:	480b      	ldr	r0, [pc, #44]	; (8002680 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002652:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002654:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002656:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002658:	d3f6      	bcc.n	8002648 <CopyDataInit>
  ldr  r2, =_sbss
 800265a:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800265c:	e002      	b.n	8002664 <LoopFillZerobss>

0800265e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800265e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002660:	f842 3b04 	str.w	r3, [r2], #4

08002664 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002664:	4b09      	ldr	r3, [pc, #36]	; (800268c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002666:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002668:	d3f9      	bcc.n	800265e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800266a:	f7ff fdf1 	bl	8002250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266e:	f007 f821 	bl	80096b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002672:	f7ff fa29 	bl	8001ac8 <main>
  bx  lr    
 8002676:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002678:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800267c:	0800ab54 	.word	0x0800ab54
  ldr  r0, =_sdata
 8002680:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002684:	2000017c 	.word	0x2000017c
  ldr  r2, =_sbss
 8002688:	2000017c 	.word	0x2000017c
  ldr  r3, = _ebss
 800268c:	2001360c 	.word	0x2001360c

08002690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002690:	e7fe      	b.n	8002690 <ADC_IRQHandler>
	...

08002694 <UB_VGA_Screen_Init>:
VGA_t VGA;
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  VGA.hsync_cnt = 0;
 8002698:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <UB_VGA_Screen_Init+0x84>)
 800269a:	2200      	movs	r2, #0
 800269c:	801a      	strh	r2, [r3, #0]
  VGA.start_adr = 0;
 800269e:	4b1e      	ldr	r3, [pc, #120]	; (8002718 <UB_VGA_Screen_Init+0x84>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg = 0;
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <UB_VGA_Screen_Init+0x84>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]

  GPIOB->BSRR = VGA_VSYNC_Pin;
 80026aa:	4b1c      	ldr	r3, [pc, #112]	; (800271c <UB_VGA_Screen_Init+0x88>)
 80026ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026b0:	619a      	str	r2, [r3, #24]

  // TIM2
  HAL_TIM_Base_Start(&htim2);
 80026b2:	481b      	ldr	r0, [pc, #108]	; (8002720 <UB_VGA_Screen_Init+0x8c>)
 80026b4:	f001 ffa6 	bl	8004604 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80026b8:	210c      	movs	r1, #12
 80026ba:	4819      	ldr	r0, [pc, #100]	; (8002720 <UB_VGA_Screen_Init+0x8c>)
 80026bc:	f002 f85a 	bl	8004774 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 80026c0:	2108      	movs	r1, #8
 80026c2:	4817      	ldr	r0, [pc, #92]	; (8002720 <UB_VGA_Screen_Init+0x8c>)
 80026c4:	f002 f91e 	bl	8004904 <HAL_TIM_PWM_Start_IT>

  // TIM1
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <UB_VGA_Screen_Init+0x90>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <UB_VGA_Screen_Init+0x90>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d6:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(&htim1);
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <UB_VGA_Screen_Init+0x90>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <UB_VGA_Screen_Init+0x90>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
  HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&VGA_RAM1[0], VGA_GPIOE_ODR_ADDRESS, VGA_DISPLAY_X + 1);
 80026e8:	490f      	ldr	r1, [pc, #60]	; (8002728 <UB_VGA_Screen_Init+0x94>)
 80026ea:	f240 1341 	movw	r3, #321	; 0x141
 80026ee:	4a0f      	ldr	r2, [pc, #60]	; (800272c <UB_VGA_Screen_Init+0x98>)
 80026f0:	480f      	ldr	r0, [pc, #60]	; (8002730 <UB_VGA_Screen_Init+0x9c>)
 80026f2:	f000 fa9f 	bl	8002c34 <HAL_DMA_Start_IT>

  HAL_DMA_Init(&hdma_tim1_up);
 80026f6:	480e      	ldr	r0, [pc, #56]	; (8002730 <UB_VGA_Screen_Init+0x9c>)
 80026f8:	f000 f9ee 	bl	8002ad8 <HAL_DMA_Init>
  __HAL_DMA_ENABLE_IT(&hdma_tim1_up, DMA_IT_TC);
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <UB_VGA_Screen_Init+0x9c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <UB_VGA_Screen_Init+0x9c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0210 	orr.w	r2, r2, #16
 800270a:	601a      	str	r2, [r3, #0]

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg = DMA2_Stream5->CR;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <UB_VGA_Screen_Init+0xa0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a01      	ldr	r2, [pc, #4]	; (8002718 <UB_VGA_Screen_Init+0x84>)
 8002712:	6093      	str	r3, [r2, #8]
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200135a4 	.word	0x200135a4
 800271c:	40020400 	.word	0x40020400
 8002720:	200007c8 	.word	0x200007c8
 8002724:	20000780 	.word	0x20000780
 8002728:	200008b4 	.word	0x200008b4
 800272c:	40021015 	.word	0x40021015
 8002730:	20000810 	.word	0x20000810
 8002734:	40026488 	.word	0x40026488

08002738 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8002742:	2300      	movs	r3, #0
 8002744:	81bb      	strh	r3, [r7, #12]
 8002746:	e012      	b.n	800276e <UB_VGA_FillScreen+0x36>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8002748:	2300      	movs	r3, #0
 800274a:	81fb      	strh	r3, [r7, #14]
 800274c:	e008      	b.n	8002760 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp, yp, color);
 800274e:	79fa      	ldrb	r2, [r7, #7]
 8002750:	89b9      	ldrh	r1, [r7, #12]
 8002752:	89fb      	ldrh	r3, [r7, #14]
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f813 	bl	8002780 <UB_VGA_SetPixel>
    for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800275a:	89fb      	ldrh	r3, [r7, #14]
 800275c:	3301      	adds	r3, #1
 800275e:	81fb      	strh	r3, [r7, #14]
 8002760:	89fb      	ldrh	r3, [r7, #14]
 8002762:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002766:	d3f2      	bcc.n	800274e <UB_VGA_FillScreen+0x16>
  for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8002768:	89bb      	ldrh	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	81bb      	strh	r3, [r7, #12]
 800276e:	89bb      	ldrh	r3, [r7, #12]
 8002770:	2bef      	cmp	r3, #239	; 0xef
 8002772:	d9e9      	bls.n	8002748 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
 800278a:	460b      	mov	r3, r1
 800278c:	80bb      	strh	r3, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	70fb      	strb	r3, [r7, #3]
  if(xp >= VGA_DISPLAY_X)
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002798:	d301      	bcc.n	800279e <UB_VGA_SetPixel+0x1e>
    xp = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	80fb      	strh	r3, [r7, #6]
  if(yp >= VGA_DISPLAY_Y)
 800279e:	88bb      	ldrh	r3, [r7, #4]
 80027a0:	2bef      	cmp	r3, #239	; 0xef
 80027a2:	d901      	bls.n	80027a8 <UB_VGA_SetPixel+0x28>
    yp = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp * (VGA_DISPLAY_X + 1)) + xp] = color;
 80027a8:	88ba      	ldrh	r2, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	019b      	lsls	r3, r3, #6
 80027b2:	441a      	add	r2, r3
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	4413      	add	r3, r2
 80027b8:	4904      	ldr	r1, [pc, #16]	; (80027cc <UB_VGA_SetPixel+0x4c>)
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	54ca      	strb	r2, [r1, r3]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	200008b4 	.word	0x200008b4

080027d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_Init+0x40>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <HAL_Init+0x40>)
 80027da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <HAL_Init+0x40>)
 80027e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a07      	ldr	r2, [pc, #28]	; (8002810 <HAL_Init+0x40>)
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f8:	2003      	movs	r0, #3
 80027fa:	f000 f92b 	bl	8002a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027fe:	2000      	movs	r0, #0
 8002800:	f000 f808 	bl	8002814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002804:	f7ff fb6a 	bl	8001edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023c00 	.word	0x40023c00

08002814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_InitTick+0x54>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_InitTick+0x58>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	fbb3 f3f1 	udiv	r3, r3, r1
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f943 	bl	8002abe <HAL_SYSTICK_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00e      	b.n	8002860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b0f      	cmp	r3, #15
 8002846:	d80a      	bhi.n	800285e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002848:	2200      	movs	r2, #0
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002850:	f000 f90b 	bl	8002a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <HAL_InitTick+0x5c>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200000f4 	.word	0x200000f4
 800286c:	200000fc 	.word	0x200000fc
 8002870:	200000f8 	.word	0x200000f8

08002874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002878:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_IncTick+0x20>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_IncTick+0x24>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4413      	add	r3, r2
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_IncTick+0x24>)
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	200000fc 	.word	0x200000fc
 8002898:	200135b0 	.word	0x200135b0

0800289c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return uwTick;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_GetTick+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	200135b0 	.word	0x200135b0

080028b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d0:	4013      	ands	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028e6:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <__NVIC_SetPriorityGrouping+0x44>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60d3      	str	r3, [r2, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <__NVIC_GetPriorityGrouping+0x18>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0a1b      	lsrs	r3, r3, #8
 8002906:	f003 0307 	and.w	r3, r3, #7
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	2b00      	cmp	r3, #0
 8002928:	db0b      	blt.n	8002942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	4907      	ldr	r1, [pc, #28]	; (8002950 <__NVIC_EnableIRQ+0x38>)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	2001      	movs	r0, #1
 800293a:	fa00 f202 	lsl.w	r2, r0, r2
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	e000e100 	.word	0xe000e100

08002954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	2b00      	cmp	r3, #0
 8002966:	db0a      	blt.n	800297e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	490c      	ldr	r1, [pc, #48]	; (80029a0 <__NVIC_SetPriority+0x4c>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	0112      	lsls	r2, r2, #4
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	440b      	add	r3, r1
 8002978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800297c:	e00a      	b.n	8002994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4908      	ldr	r1, [pc, #32]	; (80029a4 <__NVIC_SetPriority+0x50>)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	3b04      	subs	r3, #4
 800298c:	0112      	lsls	r2, r2, #4
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	440b      	add	r3, r1
 8002992:	761a      	strb	r2, [r3, #24]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f1c3 0307 	rsb	r3, r3, #7
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	bf28      	it	cs
 80029c6:	2304      	movcs	r3, #4
 80029c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d902      	bls.n	80029d8 <NVIC_EncodePriority+0x30>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3b03      	subs	r3, #3
 80029d6:	e000      	b.n	80029da <NVIC_EncodePriority+0x32>
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	401a      	ands	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	4313      	orrs	r3, r2
         );
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3724      	adds	r7, #36	; 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a20:	d301      	bcc.n	8002a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00f      	b.n	8002a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <SysTick_Config+0x40>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2e:	210f      	movs	r1, #15
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a34:	f7ff ff8e 	bl	8002954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <SysTick_Config+0x40>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <SysTick_Config+0x40>)
 8002a40:	2207      	movs	r2, #7
 8002a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	e000e010 	.word	0xe000e010

08002a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff29 	bl	80028b4 <__NVIC_SetPriorityGrouping>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a7c:	f7ff ff3e 	bl	80028fc <__NVIC_GetPriorityGrouping>
 8002a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	6978      	ldr	r0, [r7, #20]
 8002a88:	f7ff ff8e 	bl	80029a8 <NVIC_EncodePriority>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff5d 	bl	8002954 <__NVIC_SetPriority>
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff31 	bl	8002918 <__NVIC_EnableIRQ>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffa2 	bl	8002a10 <SysTick_Config>
 8002acc:	4603      	mov	r3, r0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff feda 	bl	800289c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e099      	b.n	8002c28 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b14:	e00f      	b.n	8002b36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b16:	f7ff fec1 	bl	800289c <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b05      	cmp	r3, #5
 8002b22:	d908      	bls.n	8002b36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e078      	b.n	8002c28 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e8      	bne.n	8002b16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <HAL_DMA_Init+0x158>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d107      	bne.n	8002ba0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f023 0307 	bic.w	r3, r3, #7
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d117      	bne.n	8002bfa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00e      	beq.n	8002bfa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fb01 	bl	80031e4 <DMA_CheckFifoParam>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2240      	movs	r2, #64	; 0x40
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e016      	b.n	8002c28 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 fab8 	bl	8003178 <DMA_CalcBaseAndBitshift>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	223f      	movs	r2, #63	; 0x3f
 8002c12:	409a      	lsls	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	f010803f 	.word	0xf010803f

08002c34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_DMA_Start_IT+0x26>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e040      	b.n	8002cdc <HAL_DMA_Start_IT+0xa8>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d12f      	bne.n	8002cce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fa4a 	bl	800311c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	223f      	movs	r2, #63	; 0x3f
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0216 	orr.w	r2, r2, #22
 8002ca2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0208 	orr.w	r2, r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e005      	b.n	8002cda <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cf2:	f7ff fdd3 	bl	800289c <HAL_GetTick>
 8002cf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d008      	beq.n	8002d16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e052      	b.n	8002dbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0216 	bic.w	r2, r2, #22
 8002d24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d103      	bne.n	8002d46 <HAL_DMA_Abort+0x62>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0208 	bic.w	r2, r2, #8
 8002d54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d66:	e013      	b.n	8002d90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d68:	f7ff fd98 	bl	800289c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b05      	cmp	r3, #5
 8002d74:	d90c      	bls.n	8002d90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2203      	movs	r2, #3
 8002d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e015      	b.n	8002dbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e4      	bne.n	8002d68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da2:	223f      	movs	r2, #63	; 0x3f
 8002da4:	409a      	lsls	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d004      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00c      	b.n	8002dfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2205      	movs	r2, #5
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e14:	4b8e      	ldr	r3, [pc, #568]	; (8003050 <HAL_DMA_IRQHandler+0x248>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a8e      	ldr	r2, [pc, #568]	; (8003054 <HAL_DMA_IRQHandler+0x24c>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0a9b      	lsrs	r3, r3, #10
 8002e20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	2208      	movs	r2, #8
 8002e34:	409a      	lsls	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01a      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0204 	bic.w	r2, r2, #4
 8002e5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	2208      	movs	r2, #8
 8002e62:	409a      	lsls	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	2201      	movs	r2, #1
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	2201      	movs	r2, #1
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f043 0202 	orr.w	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	2204      	movs	r2, #4
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d012      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	2204      	movs	r2, #4
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f043 0204 	orr.w	r2, r3, #4
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d043      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d03c      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	2210      	movs	r2, #16
 8002f04:	409a      	lsls	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d018      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d108      	bne.n	8002f38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d024      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
 8002f36:	e01f      	b.n	8002f78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01b      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
 8002f48:	e016      	b.n	8002f78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d107      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0208 	bic.w	r2, r2, #8
 8002f66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 808f 	beq.w	80030a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8087 	beq.w	80030a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d136      	bne.n	8003020 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0216 	bic.w	r2, r2, #22
 8002fc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x1da>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0208 	bic.w	r2, r2, #8
 8002ff0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	223f      	movs	r2, #63	; 0x3f
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003012:	2b00      	cmp	r3, #0
 8003014:	d07e      	beq.n	8003114 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
        }
        return;
 800301e:	e079      	b.n	8003114 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01d      	beq.n	800306a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10d      	bne.n	8003058 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	2b00      	cmp	r3, #0
 8003042:	d031      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e02c      	b.n	80030a8 <HAL_DMA_IRQHandler+0x2a0>
 800304e:	bf00      	nop
 8003050:	200000f4 	.word	0x200000f4
 8003054:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d023      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
 8003068:	e01e      	b.n	80030a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10f      	bne.n	8003098 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0210 	bic.w	r2, r2, #16
 8003086:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d032      	beq.n	8003116 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d022      	beq.n	8003102 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2205      	movs	r2, #5
 80030c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0201 	bic.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	3301      	adds	r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d307      	bcc.n	80030f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f2      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x2cc>
 80030ee:	e000      	b.n	80030f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	4798      	blx	r3
 8003112:	e000      	b.n	8003116 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003114:	bf00      	nop
    }
  }
}
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003138:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b40      	cmp	r3, #64	; 0x40
 8003148:	d108      	bne.n	800315c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800315a:	e007      	b.n	800316c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	60da      	str	r2, [r3, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	3b10      	subs	r3, #16
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <DMA_CalcBaseAndBitshift+0x64>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	091b      	lsrs	r3, r3, #4
 8003190:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003192:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <DMA_CalcBaseAndBitshift+0x68>)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d909      	bls.n	80031ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031ae:	f023 0303 	bic.w	r3, r3, #3
 80031b2:	1d1a      	adds	r2, r3, #4
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	659a      	str	r2, [r3, #88]	; 0x58
 80031b8:	e007      	b.n	80031ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031c2:	f023 0303 	bic.w	r3, r3, #3
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	aaaaaaab 	.word	0xaaaaaaab
 80031e0:	0800aa24 	.word	0x0800aa24

080031e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d11f      	bne.n	800323e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d856      	bhi.n	80032b2 <DMA_CheckFifoParam+0xce>
 8003204:	a201      	add	r2, pc, #4	; (adr r2, 800320c <DMA_CheckFifoParam+0x28>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	0800321d 	.word	0x0800321d
 8003210:	0800322f 	.word	0x0800322f
 8003214:	0800321d 	.word	0x0800321d
 8003218:	080032b3 	.word	0x080032b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d046      	beq.n	80032b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322c:	e043      	b.n	80032b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003236:	d140      	bne.n	80032ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800323c:	e03d      	b.n	80032ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003246:	d121      	bne.n	800328c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d837      	bhi.n	80032be <DMA_CheckFifoParam+0xda>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <DMA_CheckFifoParam+0x70>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	08003265 	.word	0x08003265
 8003258:	0800326b 	.word	0x0800326b
 800325c:	08003265 	.word	0x08003265
 8003260:	0800327d 	.word	0x0800327d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      break;
 8003268:	e030      	b.n	80032cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d025      	beq.n	80032c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800327a:	e022      	b.n	80032c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003284:	d11f      	bne.n	80032c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800328a:	e01c      	b.n	80032c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d903      	bls.n	800329a <DMA_CheckFifoParam+0xb6>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d003      	beq.n	80032a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003298:	e018      	b.n	80032cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
      break;
 800329e:	e015      	b.n	80032cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00e      	beq.n	80032ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
      break;
 80032b0:	e00b      	b.n	80032ca <DMA_CheckFifoParam+0xe6>
      break;
 80032b2:	bf00      	nop
 80032b4:	e00a      	b.n	80032cc <DMA_CheckFifoParam+0xe8>
      break;
 80032b6:	bf00      	nop
 80032b8:	e008      	b.n	80032cc <DMA_CheckFifoParam+0xe8>
      break;
 80032ba:	bf00      	nop
 80032bc:	e006      	b.n	80032cc <DMA_CheckFifoParam+0xe8>
      break;
 80032be:	bf00      	nop
 80032c0:	e004      	b.n	80032cc <DMA_CheckFifoParam+0xe8>
      break;
 80032c2:	bf00      	nop
 80032c4:	e002      	b.n	80032cc <DMA_CheckFifoParam+0xe8>
      break;   
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <DMA_CheckFifoParam+0xe8>
      break;
 80032ca:	bf00      	nop
    }
  } 
  
  return status; 
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop

080032dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	; 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	e16b      	b.n	80035d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f8:	2201      	movs	r2, #1
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	429a      	cmp	r2, r3
 8003312:	f040 815a 	bne.w	80035ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d005      	beq.n	800332e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800332a:	2b02      	cmp	r3, #2
 800332c:	d130      	bne.n	8003390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	2203      	movs	r2, #3
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43db      	mvns	r3, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4013      	ands	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003364:	2201      	movs	r2, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f003 0201 	and.w	r2, r3, #1
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b03      	cmp	r3, #3
 800339a:	d017      	beq.n	80033cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2203      	movs	r2, #3
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d123      	bne.n	8003420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	08da      	lsrs	r2, r3, #3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3208      	adds	r2, #8
 80033e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	220f      	movs	r2, #15
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	08da      	lsrs	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3208      	adds	r2, #8
 800341a:	69b9      	ldr	r1, [r7, #24]
 800341c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	2203      	movs	r2, #3
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f003 0203 	and.w	r2, r3, #3
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 80b4 	beq.w	80035ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	4b60      	ldr	r3, [pc, #384]	; (80035e8 <HAL_GPIO_Init+0x30c>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	4a5f      	ldr	r2, [pc, #380]	; (80035e8 <HAL_GPIO_Init+0x30c>)
 800346c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003470:	6453      	str	r3, [r2, #68]	; 0x44
 8003472:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_GPIO_Init+0x30c>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800347e:	4a5b      	ldr	r2, [pc, #364]	; (80035ec <HAL_GPIO_Init+0x310>)
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	089b      	lsrs	r3, r3, #2
 8003484:	3302      	adds	r3, #2
 8003486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	220f      	movs	r2, #15
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a52      	ldr	r2, [pc, #328]	; (80035f0 <HAL_GPIO_Init+0x314>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d02b      	beq.n	8003502 <HAL_GPIO_Init+0x226>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a51      	ldr	r2, [pc, #324]	; (80035f4 <HAL_GPIO_Init+0x318>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d025      	beq.n	80034fe <HAL_GPIO_Init+0x222>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a50      	ldr	r2, [pc, #320]	; (80035f8 <HAL_GPIO_Init+0x31c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01f      	beq.n	80034fa <HAL_GPIO_Init+0x21e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4f      	ldr	r2, [pc, #316]	; (80035fc <HAL_GPIO_Init+0x320>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d019      	beq.n	80034f6 <HAL_GPIO_Init+0x21a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4e      	ldr	r2, [pc, #312]	; (8003600 <HAL_GPIO_Init+0x324>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_GPIO_Init+0x216>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4d      	ldr	r2, [pc, #308]	; (8003604 <HAL_GPIO_Init+0x328>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00d      	beq.n	80034ee <HAL_GPIO_Init+0x212>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4c      	ldr	r2, [pc, #304]	; (8003608 <HAL_GPIO_Init+0x32c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <HAL_GPIO_Init+0x20e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4b      	ldr	r2, [pc, #300]	; (800360c <HAL_GPIO_Init+0x330>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d101      	bne.n	80034e6 <HAL_GPIO_Init+0x20a>
 80034e2:	2307      	movs	r3, #7
 80034e4:	e00e      	b.n	8003504 <HAL_GPIO_Init+0x228>
 80034e6:	2308      	movs	r3, #8
 80034e8:	e00c      	b.n	8003504 <HAL_GPIO_Init+0x228>
 80034ea:	2306      	movs	r3, #6
 80034ec:	e00a      	b.n	8003504 <HAL_GPIO_Init+0x228>
 80034ee:	2305      	movs	r3, #5
 80034f0:	e008      	b.n	8003504 <HAL_GPIO_Init+0x228>
 80034f2:	2304      	movs	r3, #4
 80034f4:	e006      	b.n	8003504 <HAL_GPIO_Init+0x228>
 80034f6:	2303      	movs	r3, #3
 80034f8:	e004      	b.n	8003504 <HAL_GPIO_Init+0x228>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e002      	b.n	8003504 <HAL_GPIO_Init+0x228>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <HAL_GPIO_Init+0x228>
 8003502:	2300      	movs	r3, #0
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	f002 0203 	and.w	r2, r2, #3
 800350a:	0092      	lsls	r2, r2, #2
 800350c:	4093      	lsls	r3, r2
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4313      	orrs	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003514:	4935      	ldr	r1, [pc, #212]	; (80035ec <HAL_GPIO_Init+0x310>)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	089b      	lsrs	r3, r3, #2
 800351a:	3302      	adds	r3, #2
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_GPIO_Init+0x334>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003546:	4a32      	ldr	r2, [pc, #200]	; (8003610 <HAL_GPIO_Init+0x334>)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800354c:	4b30      	ldr	r3, [pc, #192]	; (8003610 <HAL_GPIO_Init+0x334>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003570:	4a27      	ldr	r2, [pc, #156]	; (8003610 <HAL_GPIO_Init+0x334>)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <HAL_GPIO_Init+0x334>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800359a:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <HAL_GPIO_Init+0x334>)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035a0:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <HAL_GPIO_Init+0x334>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035c4:	4a12      	ldr	r2, [pc, #72]	; (8003610 <HAL_GPIO_Init+0x334>)
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3301      	adds	r3, #1
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	2b0f      	cmp	r3, #15
 80035d4:	f67f ae90 	bls.w	80032f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	3724      	adds	r7, #36	; 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40013800 	.word	0x40013800
 80035f0:	40020000 	.word	0x40020000
 80035f4:	40020400 	.word	0x40020400
 80035f8:	40020800 	.word	0x40020800
 80035fc:	40020c00 	.word	0x40020c00
 8003600:	40021000 	.word	0x40021000
 8003604:	40021400 	.word	0x40021400
 8003608:	40021800 	.word	0x40021800
 800360c:	40021c00 	.word	0x40021c00
 8003610:	40013c00 	.word	0x40013c00

08003614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
 8003620:	4613      	mov	r3, r2
 8003622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003624:	787b      	ldrb	r3, [r7, #1]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003630:	e003      	b.n	800363a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003632:	887b      	ldrh	r3, [r7, #2]
 8003634:	041a      	lsls	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	619a      	str	r2, [r3, #24]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e267      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d075      	beq.n	8003752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003666:	4b88      	ldr	r3, [pc, #544]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b04      	cmp	r3, #4
 8003670:	d00c      	beq.n	800368c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003672:	4b85      	ldr	r3, [pc, #532]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800367a:	2b08      	cmp	r3, #8
 800367c:	d112      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367e:	4b82      	ldr	r3, [pc, #520]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800368a:	d10b      	bne.n	80036a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368c:	4b7e      	ldr	r3, [pc, #504]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d05b      	beq.n	8003750 <HAL_RCC_OscConfig+0x108>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d157      	bne.n	8003750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e242      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d106      	bne.n	80036bc <HAL_RCC_OscConfig+0x74>
 80036ae:	4b76      	ldr	r3, [pc, #472]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a75      	ldr	r2, [pc, #468]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80036b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e01d      	b.n	80036f8 <HAL_RCC_OscConfig+0xb0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c4:	d10c      	bne.n	80036e0 <HAL_RCC_OscConfig+0x98>
 80036c6:	4b70      	ldr	r3, [pc, #448]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a6f      	ldr	r2, [pc, #444]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80036cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b6d      	ldr	r3, [pc, #436]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a6c      	ldr	r2, [pc, #432]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80036d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	e00b      	b.n	80036f8 <HAL_RCC_OscConfig+0xb0>
 80036e0:	4b69      	ldr	r3, [pc, #420]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a68      	ldr	r2, [pc, #416]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b66      	ldr	r3, [pc, #408]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a65      	ldr	r2, [pc, #404]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d013      	beq.n	8003728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003700:	f7ff f8cc 	bl	800289c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003708:	f7ff f8c8 	bl	800289c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b64      	cmp	r3, #100	; 0x64
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e207      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b5b      	ldr	r3, [pc, #364]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0xc0>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7ff f8b8 	bl	800289c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003730:	f7ff f8b4 	bl	800289c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e1f3      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003742:	4b51      	ldr	r3, [pc, #324]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0xe8>
 800374e:	e000      	b.n	8003752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d063      	beq.n	8003826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800375e:	4b4a      	ldr	r3, [pc, #296]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376a:	4b47      	ldr	r3, [pc, #284]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003772:	2b08      	cmp	r3, #8
 8003774:	d11c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003776:	4b44      	ldr	r3, [pc, #272]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d116      	bne.n	80037b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003782:	4b41      	ldr	r3, [pc, #260]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_RCC_OscConfig+0x152>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d001      	beq.n	800379a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1c7      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4937      	ldr	r1, [pc, #220]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ae:	e03a      	b.n	8003826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d020      	beq.n	80037fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037b8:	4b34      	ldr	r3, [pc, #208]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037be:	f7ff f86d 	bl	800289c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037c6:	f7ff f869 	bl	800289c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1a8      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d8:	4b2b      	ldr	r3, [pc, #172]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e4:	4b28      	ldr	r3, [pc, #160]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4925      	ldr	r1, [pc, #148]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]
 80037f8:	e015      	b.n	8003826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_OscConfig+0x244>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7ff f84c 	bl	800289c <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003808:	f7ff f848 	bl	800289c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e187      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d036      	beq.n	80038a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_RCC_OscConfig+0x248>)
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7ff f82c 	bl	800289c <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003848:	f7ff f828 	bl	800289c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e167      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_RCC_OscConfig+0x240>)
 800385c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x200>
 8003866:	e01b      	b.n	80038a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <HAL_RCC_OscConfig+0x248>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386e:	f7ff f815 	bl	800289c <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003874:	e00e      	b.n	8003894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003876:	f7ff f811 	bl	800289c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d907      	bls.n	8003894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e150      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
 8003888:	40023800 	.word	0x40023800
 800388c:	42470000 	.word	0x42470000
 8003890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	4b88      	ldr	r3, [pc, #544]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ea      	bne.n	8003876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8097 	beq.w	80039dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ae:	2300      	movs	r3, #0
 80038b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b2:	4b81      	ldr	r3, [pc, #516]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	4b7d      	ldr	r3, [pc, #500]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	4a7c      	ldr	r2, [pc, #496]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80038c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038cc:	6413      	str	r3, [r2, #64]	; 0x40
 80038ce:	4b7a      	ldr	r3, [pc, #488]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038da:	2301      	movs	r3, #1
 80038dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	4b77      	ldr	r3, [pc, #476]	; (8003abc <HAL_RCC_OscConfig+0x474>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d118      	bne.n	800391c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ea:	4b74      	ldr	r3, [pc, #464]	; (8003abc <HAL_RCC_OscConfig+0x474>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a73      	ldr	r2, [pc, #460]	; (8003abc <HAL_RCC_OscConfig+0x474>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f6:	f7fe ffd1 	bl	800289c <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fe:	f7fe ffcd 	bl	800289c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e10c      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	4b6a      	ldr	r3, [pc, #424]	; (8003abc <HAL_RCC_OscConfig+0x474>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d106      	bne.n	8003932 <HAL_RCC_OscConfig+0x2ea>
 8003924:	4b64      	ldr	r3, [pc, #400]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003928:	4a63      	ldr	r2, [pc, #396]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6713      	str	r3, [r2, #112]	; 0x70
 8003930:	e01c      	b.n	800396c <HAL_RCC_OscConfig+0x324>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b05      	cmp	r3, #5
 8003938:	d10c      	bne.n	8003954 <HAL_RCC_OscConfig+0x30c>
 800393a:	4b5f      	ldr	r3, [pc, #380]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	4a5e      	ldr	r2, [pc, #376]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003940:	f043 0304 	orr.w	r3, r3, #4
 8003944:	6713      	str	r3, [r2, #112]	; 0x70
 8003946:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	4a5b      	ldr	r2, [pc, #364]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6713      	str	r3, [r2, #112]	; 0x70
 8003952:	e00b      	b.n	800396c <HAL_RCC_OscConfig+0x324>
 8003954:	4b58      	ldr	r3, [pc, #352]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	4a57      	ldr	r2, [pc, #348]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	6713      	str	r3, [r2, #112]	; 0x70
 8003960:	4b55      	ldr	r3, [pc, #340]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a54      	ldr	r2, [pc, #336]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003966:	f023 0304 	bic.w	r3, r3, #4
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d015      	beq.n	80039a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fe ff92 	bl	800289c <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397a:	e00a      	b.n	8003992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397c:	f7fe ff8e 	bl	800289c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	; 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e0cb      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003992:	4b49      	ldr	r3, [pc, #292]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0ee      	beq.n	800397c <HAL_RCC_OscConfig+0x334>
 800399e:	e014      	b.n	80039ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a0:	f7fe ff7c 	bl	800289c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039a6:	e00a      	b.n	80039be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fe ff78 	bl	800289c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e0b5      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039be:	4b3e      	ldr	r3, [pc, #248]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1ee      	bne.n	80039a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d0:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	4a38      	ldr	r2, [pc, #224]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80039d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a1 	beq.w	8003b28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039e6:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d05c      	beq.n	8003aac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d141      	bne.n	8003a7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	4b31      	ldr	r3, [pc, #196]	; (8003ac0 <HAL_RCC_OscConfig+0x478>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe ff4c 	bl	800289c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe ff48 	bl	800289c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e087      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	085b      	lsrs	r3, r3, #1
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	041b      	lsls	r3, r3, #16
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	491b      	ldr	r1, [pc, #108]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a50:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <HAL_RCC_OscConfig+0x478>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fe ff21 	bl	800289c <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fe ff1d 	bl	800289c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e05c      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x416>
 8003a7c:	e054      	b.n	8003b28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <HAL_RCC_OscConfig+0x478>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe ff0a 	bl	800289c <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe ff06 	bl	800289c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e045      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x444>
 8003aaa:	e03d      	b.n	8003b28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e038      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x4ec>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d028      	beq.n	8003b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d121      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d11a      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003af4:	4013      	ands	r3, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d111      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d107      	bne.n	8003b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023800 	.word	0x40023800

08003b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0cc      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b68      	ldr	r3, [pc, #416]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d90c      	bls.n	8003b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b62:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0b8      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d020      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b8c:	4b59      	ldr	r3, [pc, #356]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a58      	ldr	r2, [pc, #352]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba4:	4b53      	ldr	r3, [pc, #332]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4a52      	ldr	r2, [pc, #328]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb0:	4b50      	ldr	r3, [pc, #320]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	494d      	ldr	r1, [pc, #308]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d044      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d107      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd6:	4b47      	ldr	r3, [pc, #284]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d119      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e07f      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d107      	bne.n	8003c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf6:	4b3f      	ldr	r3, [pc, #252]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e06f      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c06:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e067      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c16:	4b37      	ldr	r3, [pc, #220]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f023 0203 	bic.w	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4934      	ldr	r1, [pc, #208]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c28:	f7fe fe38 	bl	800289c <HAL_GetTick>
 8003c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2e:	e00a      	b.n	8003c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c30:	f7fe fe34 	bl	800289c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e04f      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c46:	4b2b      	ldr	r3, [pc, #172]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 020c 	and.w	r2, r3, #12
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d1eb      	bne.n	8003c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c58:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d20c      	bcs.n	8003c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6e:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d001      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e032      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	4916      	ldr	r1, [pc, #88]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d009      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	490e      	ldr	r1, [pc, #56]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cbe:	f000 f821 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	490a      	ldr	r1, [pc, #40]	; (8003cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	5ccb      	ldrb	r3, [r1, r3]
 8003cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd6:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x1c4>)
 8003cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cda:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <HAL_RCC_ClockConfig+0x1c8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe fd98 	bl	8002814 <HAL_InitTick>

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023c00 	.word	0x40023c00
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	0800aa0c 	.word	0x0800aa0c
 8003cfc:	200000f4 	.word	0x200000f4
 8003d00:	200000f8 	.word	0x200000f8

08003d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d08:	b094      	sub	sp, #80	; 0x50
 8003d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d10:	2300      	movs	r3, #0
 8003d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d14:	2300      	movs	r3, #0
 8003d16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d1c:	4b79      	ldr	r3, [pc, #484]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 030c 	and.w	r3, r3, #12
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d00d      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0x40>
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	f200 80e1 	bhi.w	8003ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x34>
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d003      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003d36:	e0db      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d38:	4b73      	ldr	r3, [pc, #460]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d3c:	e0db      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d3e:	4b73      	ldr	r3, [pc, #460]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x208>)
 8003d40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d42:	e0d8      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d44:	4b6f      	ldr	r3, [pc, #444]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d4e:	4b6d      	ldr	r3, [pc, #436]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d063      	beq.n	8003e22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d5a:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	099b      	lsrs	r3, r3, #6
 8003d60:	2200      	movs	r2, #0
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d6e:	2300      	movs	r3, #0
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
 8003d72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d76:	4622      	mov	r2, r4
 8003d78:	462b      	mov	r3, r5
 8003d7a:	f04f 0000 	mov.w	r0, #0
 8003d7e:	f04f 0100 	mov.w	r1, #0
 8003d82:	0159      	lsls	r1, r3, #5
 8003d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d88:	0150      	lsls	r0, r2, #5
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4621      	mov	r1, r4
 8003d90:	1a51      	subs	r1, r2, r1
 8003d92:	6139      	str	r1, [r7, #16]
 8003d94:	4629      	mov	r1, r5
 8003d96:	eb63 0301 	sbc.w	r3, r3, r1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003da8:	4659      	mov	r1, fp
 8003daa:	018b      	lsls	r3, r1, #6
 8003dac:	4651      	mov	r1, sl
 8003dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003db2:	4651      	mov	r1, sl
 8003db4:	018a      	lsls	r2, r1, #6
 8003db6:	4651      	mov	r1, sl
 8003db8:	ebb2 0801 	subs.w	r8, r2, r1
 8003dbc:	4659      	mov	r1, fp
 8003dbe:	eb63 0901 	sbc.w	r9, r3, r1
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dd6:	4690      	mov	r8, r2
 8003dd8:	4699      	mov	r9, r3
 8003dda:	4623      	mov	r3, r4
 8003ddc:	eb18 0303 	adds.w	r3, r8, r3
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	462b      	mov	r3, r5
 8003de4:	eb49 0303 	adc.w	r3, r9, r3
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003df6:	4629      	mov	r1, r5
 8003df8:	024b      	lsls	r3, r1, #9
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e00:	4621      	mov	r1, r4
 8003e02:	024a      	lsls	r2, r1, #9
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e14:	f7fc fc50 	bl	80006b8 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e20:	e058      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e22:	4b38      	ldr	r3, [pc, #224]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	099b      	lsrs	r3, r3, #6
 8003e28:	2200      	movs	r2, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e32:	623b      	str	r3, [r7, #32]
 8003e34:	2300      	movs	r3, #0
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
 8003e38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	464b      	mov	r3, r9
 8003e40:	f04f 0000 	mov.w	r0, #0
 8003e44:	f04f 0100 	mov.w	r1, #0
 8003e48:	0159      	lsls	r1, r3, #5
 8003e4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e4e:	0150      	lsls	r0, r2, #5
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4641      	mov	r1, r8
 8003e56:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e74:	ebb2 040a 	subs.w	r4, r2, sl
 8003e78:	eb63 050b 	sbc.w	r5, r3, fp
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	00eb      	lsls	r3, r5, #3
 8003e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e8a:	00e2      	lsls	r2, r4, #3
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	461d      	mov	r5, r3
 8003e90:	4643      	mov	r3, r8
 8003e92:	18e3      	adds	r3, r4, r3
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	464b      	mov	r3, r9
 8003e98:	eb45 0303 	adc.w	r3, r5, r3
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eaa:	4629      	mov	r1, r5
 8003eac:	028b      	lsls	r3, r1, #10
 8003eae:	4621      	mov	r1, r4
 8003eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	028a      	lsls	r2, r1, #10
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	61fa      	str	r2, [r7, #28]
 8003ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec8:	f7fc fbf6 	bl	80006b8 <__aeabi_uldivmod>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ee4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eee:	e002      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ef2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3750      	adds	r7, #80	; 0x50
 8003efc:	46bd      	mov	sp, r7
 8003efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f02:	bf00      	nop
 8003f04:	40023800 	.word	0x40023800
 8003f08:	00f42400 	.word	0x00f42400
 8003f0c:	007a1200 	.word	0x007a1200

08003f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f14:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f16:	681b      	ldr	r3, [r3, #0]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	200000f4 	.word	0x200000f4

08003f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f2c:	f7ff fff0 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	0a9b      	lsrs	r3, r3, #10
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	4903      	ldr	r1, [pc, #12]	; (8003f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	0800aa1c 	.word	0x0800aa1c

08003f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f54:	f7ff ffdc 	bl	8003f10 <HAL_RCC_GetHCLKFreq>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	0b5b      	lsrs	r3, r3, #13
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	4903      	ldr	r1, [pc, #12]	; (8003f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f66:	5ccb      	ldrb	r3, [r1, r3]
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40023800 	.word	0x40023800
 8003f74:	0800aa1c 	.word	0x0800aa1c

08003f78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07b      	b.n	8004082 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d108      	bne.n	8003fa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f9a:	d009      	beq.n	8003fb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]
 8003fa2:	e005      	b.n	8003fb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd ff1e 	bl	8001e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004034:	ea42 0103 	orr.w	r1, r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	f003 0104 	and.w	r1, r3, #4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	f003 0210 	and.w	r2, r3, #16
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004070:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b08c      	sub	sp, #48	; 0x30
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004098:	2301      	movs	r3, #1
 800409a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_SPI_TransmitReceive+0x26>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e18a      	b.n	80043c6 <HAL_SPI_TransmitReceive+0x33c>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040b8:	f7fe fbf0 	bl	800289c <HAL_GetTick>
 80040bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040ce:	887b      	ldrh	r3, [r7, #2]
 80040d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d00f      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x70>
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e0:	d107      	bne.n	80040f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <HAL_SPI_TransmitReceive+0x68>
 80040ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d003      	beq.n	80040fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80040f2:	2302      	movs	r3, #2
 80040f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040f8:	e15b      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_SPI_TransmitReceive+0x82>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d002      	beq.n	800410c <HAL_SPI_TransmitReceive+0x82>
 8004106:	887b      	ldrh	r3, [r7, #2]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d103      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004112:	e14e      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b04      	cmp	r3, #4
 800411e:	d003      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2205      	movs	r2, #5
 8004124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	887a      	ldrh	r2, [r7, #2]
 800413e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	887a      	ldrh	r2, [r7, #2]
 800414a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004168:	2b40      	cmp	r3, #64	; 0x40
 800416a:	d007      	beq.n	800417c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800417a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004184:	d178      	bne.n	8004278 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_SPI_TransmitReceive+0x10a>
 800418e:	8b7b      	ldrh	r3, [r7, #26]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d166      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	881a      	ldrh	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	1c9a      	adds	r2, r3, #2
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b8:	e053      	b.n	8004262 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d11b      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x176>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d016      	beq.n	8004200 <HAL_SPI_TransmitReceive+0x176>
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d113      	bne.n	8004200 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	881a      	ldrh	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	1c9a      	adds	r2, r3, #2
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d119      	bne.n	8004242 <HAL_SPI_TransmitReceive+0x1b8>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d014      	beq.n	8004242 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	b292      	uxth	r2, r2
 8004224:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422a:	1c9a      	adds	r2, r3, #2
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800423e:	2301      	movs	r3, #1
 8004240:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004242:	f7fe fb2b 	bl	800289c <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800424e:	429a      	cmp	r2, r3
 8004250:	d807      	bhi.n	8004262 <HAL_SPI_TransmitReceive+0x1d8>
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004258:	d003      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004260:	e0a7      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1a6      	bne.n	80041ba <HAL_SPI_TransmitReceive+0x130>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1a1      	bne.n	80041ba <HAL_SPI_TransmitReceive+0x130>
 8004276:	e07c      	b.n	8004372 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <HAL_SPI_TransmitReceive+0x1fc>
 8004280:	8b7b      	ldrh	r3, [r7, #26]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d16b      	bne.n	800435e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ac:	e057      	b.n	800435e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d11c      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x26c>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d017      	beq.n	80042f6 <HAL_SPI_TransmitReceive+0x26c>
 80042c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d114      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	7812      	ldrb	r2, [r2, #0]
 80042d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d119      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x2ae>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d014      	beq.n	8004338 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004334:	2301      	movs	r3, #1
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004338:	f7fe fab0 	bl	800289c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004344:	429a      	cmp	r2, r3
 8004346:	d803      	bhi.n	8004350 <HAL_SPI_TransmitReceive+0x2c6>
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800434e:	d102      	bne.n	8004356 <HAL_SPI_TransmitReceive+0x2cc>
 8004350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800435c:	e029      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1a2      	bne.n	80042ae <HAL_SPI_TransmitReceive+0x224>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d19d      	bne.n	80042ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004374:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f8b2 	bl	80044e0 <SPI_EndRxTxTransaction>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d006      	beq.n	8004390 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800438e:	e010      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	e000      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80043b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3730      	adds	r7, #48	; 0x30
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043e0:	f7fe fa5c 	bl	800289c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	4413      	add	r3, r2
 80043ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043f0:	f7fe fa54 	bl	800289c <HAL_GetTick>
 80043f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043f6:	4b39      	ldr	r3, [pc, #228]	; (80044dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	015b      	lsls	r3, r3, #5
 80043fc:	0d1b      	lsrs	r3, r3, #20
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	fb02 f303 	mul.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004406:	e054      	b.n	80044b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440e:	d050      	beq.n	80044b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004410:	f7fe fa44 	bl	800289c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	429a      	cmp	r2, r3
 800441e:	d902      	bls.n	8004426 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d13d      	bne.n	80044a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004434:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800443e:	d111      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004448:	d004      	beq.n	8004454 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004452:	d107      	bne.n	8004464 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004462:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446c:	d10f      	bne.n	800448e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800448c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e017      	b.n	80044d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4013      	ands	r3, r2
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	429a      	cmp	r2, r3
 80044c0:	bf0c      	ite	eq
 80044c2:	2301      	moveq	r3, #1
 80044c4:	2300      	movne	r3, #0
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d19b      	bne.n	8004408 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	200000f4 	.word	0x200000f4

080044e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044ec:	4b1b      	ldr	r3, [pc, #108]	; (800455c <SPI_EndRxTxTransaction+0x7c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <SPI_EndRxTxTransaction+0x80>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	0d5b      	lsrs	r3, r3, #21
 80044f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044fc:	fb02 f303 	mul.w	r3, r2, r3
 8004500:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800450a:	d112      	bne.n	8004532 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2200      	movs	r2, #0
 8004514:	2180      	movs	r1, #128	; 0x80
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7ff ff5a 	bl	80043d0 <SPI_WaitFlagStateUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	f043 0220 	orr.w	r2, r3, #32
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e00f      	b.n	8004552 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	3b01      	subs	r3, #1
 800453c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d0f2      	beq.n	8004532 <SPI_EndRxTxTransaction+0x52>
 800454c:	e000      	b.n	8004550 <SPI_EndRxTxTransaction+0x70>
        break;
 800454e:	bf00      	nop
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	200000f4 	.word	0x200000f4
 8004560:	165e9f81 	.word	0x165e9f81

08004564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e041      	b.n	80045fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd ff2e 	bl	80023ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f000 fd88 	bl	80050b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d001      	beq.n	800461c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e046      	b.n	80046aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a23      	ldr	r2, [pc, #140]	; (80046b8 <HAL_TIM_Base_Start+0xb4>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d022      	beq.n	8004674 <HAL_TIM_Base_Start+0x70>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004636:	d01d      	beq.n	8004674 <HAL_TIM_Base_Start+0x70>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <HAL_TIM_Base_Start+0xb8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d018      	beq.n	8004674 <HAL_TIM_Base_Start+0x70>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1e      	ldr	r2, [pc, #120]	; (80046c0 <HAL_TIM_Base_Start+0xbc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d013      	beq.n	8004674 <HAL_TIM_Base_Start+0x70>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <HAL_TIM_Base_Start+0xc0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00e      	beq.n	8004674 <HAL_TIM_Base_Start+0x70>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <HAL_TIM_Base_Start+0xc4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d009      	beq.n	8004674 <HAL_TIM_Base_Start+0x70>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a19      	ldr	r2, [pc, #100]	; (80046cc <HAL_TIM_Base_Start+0xc8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d004      	beq.n	8004674 <HAL_TIM_Base_Start+0x70>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a18      	ldr	r2, [pc, #96]	; (80046d0 <HAL_TIM_Base_Start+0xcc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d111      	bne.n	8004698 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b06      	cmp	r3, #6
 8004684:	d010      	beq.n	80046a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0201 	orr.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004696:	e007      	b.n	80046a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40010400 	.word	0x40010400
 80046cc:	40014000 	.word	0x40014000
 80046d0:	40001800 	.word	0x40001800

080046d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e041      	b.n	800476a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fd fec8 	bl	8002490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f000 fcd0 	bl	80050b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_TIM_PWM_Start+0x24>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e022      	b.n	80047de <HAL_TIM_PWM_Start+0x6a>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	2b04      	cmp	r3, #4
 800479c:	d109      	bne.n	80047b2 <HAL_TIM_PWM_Start+0x3e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	e015      	b.n	80047de <HAL_TIM_PWM_Start+0x6a>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d109      	bne.n	80047cc <HAL_TIM_PWM_Start+0x58>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e008      	b.n	80047de <HAL_TIM_PWM_Start+0x6a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e07c      	b.n	80048e0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <HAL_TIM_PWM_Start+0x82>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f4:	e013      	b.n	800481e <HAL_TIM_PWM_Start+0xaa>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b04      	cmp	r3, #4
 80047fa:	d104      	bne.n	8004806 <HAL_TIM_PWM_Start+0x92>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004804:	e00b      	b.n	800481e <HAL_TIM_PWM_Start+0xaa>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b08      	cmp	r3, #8
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0xa2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004814:	e003      	b.n	800481e <HAL_TIM_PWM_Start+0xaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	6839      	ldr	r1, [r7, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 ff30 	bl	800568c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a2d      	ldr	r2, [pc, #180]	; (80048e8 <HAL_TIM_PWM_Start+0x174>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <HAL_TIM_PWM_Start+0xcc>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2c      	ldr	r2, [pc, #176]	; (80048ec <HAL_TIM_PWM_Start+0x178>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <HAL_TIM_PWM_Start+0xd0>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <HAL_TIM_PWM_Start+0xd2>
 8004844:	2300      	movs	r3, #0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004858:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a22      	ldr	r2, [pc, #136]	; (80048e8 <HAL_TIM_PWM_Start+0x174>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486c:	d01d      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1f      	ldr	r2, [pc, #124]	; (80048f0 <HAL_TIM_PWM_Start+0x17c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <HAL_TIM_PWM_Start+0x180>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1c      	ldr	r2, [pc, #112]	; (80048f8 <HAL_TIM_PWM_Start+0x184>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a16      	ldr	r2, [pc, #88]	; (80048ec <HAL_TIM_PWM_Start+0x178>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a18      	ldr	r2, [pc, #96]	; (80048fc <HAL_TIM_PWM_Start+0x188>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_TIM_PWM_Start+0x136>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a16      	ldr	r2, [pc, #88]	; (8004900 <HAL_TIM_PWM_Start+0x18c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d111      	bne.n	80048ce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b06      	cmp	r3, #6
 80048ba:	d010      	beq.n	80048de <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048cc:	e007      	b.n	80048de <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0201 	orr.w	r2, r2, #1
 80048dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40010000 	.word	0x40010000
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	40014000 	.word	0x40014000
 8004900:	40001800 	.word	0x40001800

08004904 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d109      	bne.n	800492c <HAL_TIM_PWM_Start_IT+0x28>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	bf14      	ite	ne
 8004924:	2301      	movne	r3, #1
 8004926:	2300      	moveq	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e022      	b.n	8004972 <HAL_TIM_PWM_Start_IT+0x6e>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b04      	cmp	r3, #4
 8004930:	d109      	bne.n	8004946 <HAL_TIM_PWM_Start_IT+0x42>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b01      	cmp	r3, #1
 800493c:	bf14      	ite	ne
 800493e:	2301      	movne	r3, #1
 8004940:	2300      	moveq	r3, #0
 8004942:	b2db      	uxtb	r3, r3
 8004944:	e015      	b.n	8004972 <HAL_TIM_PWM_Start_IT+0x6e>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b08      	cmp	r3, #8
 800494a:	d109      	bne.n	8004960 <HAL_TIM_PWM_Start_IT+0x5c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b01      	cmp	r3, #1
 8004956:	bf14      	ite	ne
 8004958:	2301      	movne	r3, #1
 800495a:	2300      	moveq	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	e008      	b.n	8004972 <HAL_TIM_PWM_Start_IT+0x6e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	bf14      	ite	ne
 800496c:	2301      	movne	r3, #1
 800496e:	2300      	moveq	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e0c7      	b.n	8004b0a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d104      	bne.n	800498a <HAL_TIM_PWM_Start_IT+0x86>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004988:	e013      	b.n	80049b2 <HAL_TIM_PWM_Start_IT+0xae>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b04      	cmp	r3, #4
 800498e:	d104      	bne.n	800499a <HAL_TIM_PWM_Start_IT+0x96>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004998:	e00b      	b.n	80049b2 <HAL_TIM_PWM_Start_IT+0xae>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d104      	bne.n	80049aa <HAL_TIM_PWM_Start_IT+0xa6>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049a8:	e003      	b.n	80049b2 <HAL_TIM_PWM_Start_IT+0xae>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	d841      	bhi.n	8004a3c <HAL_TIM_PWM_Start_IT+0x138>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	08004a3d 	.word	0x08004a3d
 80049c8:	08004a3d 	.word	0x08004a3d
 80049cc:	08004a3d 	.word	0x08004a3d
 80049d0:	08004a07 	.word	0x08004a07
 80049d4:	08004a3d 	.word	0x08004a3d
 80049d8:	08004a3d 	.word	0x08004a3d
 80049dc:	08004a3d 	.word	0x08004a3d
 80049e0:	08004a19 	.word	0x08004a19
 80049e4:	08004a3d 	.word	0x08004a3d
 80049e8:	08004a3d 	.word	0x08004a3d
 80049ec:	08004a3d 	.word	0x08004a3d
 80049f0:	08004a2b 	.word	0x08004a2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0202 	orr.w	r2, r2, #2
 8004a02:	60da      	str	r2, [r3, #12]
      break;
 8004a04:	e01d      	b.n	8004a42 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0204 	orr.w	r2, r2, #4
 8004a14:	60da      	str	r2, [r3, #12]
      break;
 8004a16:	e014      	b.n	8004a42 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0208 	orr.w	r2, r2, #8
 8004a26:	60da      	str	r2, [r3, #12]
      break;
 8004a28:	e00b      	b.n	8004a42 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68da      	ldr	r2, [r3, #12]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0210 	orr.w	r2, r2, #16
 8004a38:	60da      	str	r2, [r3, #12]
      break;
 8004a3a:	e002      	b.n	8004a42 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a40:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d15f      	bne.n	8004b08 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fe1b 	bl	800568c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a2e      	ldr	r2, [pc, #184]	; (8004b14 <HAL_TIM_PWM_Start_IT+0x210>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_TIM_PWM_Start_IT+0x166>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a2c      	ldr	r2, [pc, #176]	; (8004b18 <HAL_TIM_PWM_Start_IT+0x214>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <HAL_TIM_PWM_Start_IT+0x16a>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <HAL_TIM_PWM_Start_IT+0x16c>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a82:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a22      	ldr	r2, [pc, #136]	; (8004b14 <HAL_TIM_PWM_Start_IT+0x210>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d022      	beq.n	8004ad4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a96:	d01d      	beq.n	8004ad4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_TIM_PWM_Start_IT+0x218>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d018      	beq.n	8004ad4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_TIM_PWM_Start_IT+0x21c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1c      	ldr	r2, [pc, #112]	; (8004b24 <HAL_TIM_PWM_Start_IT+0x220>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <HAL_TIM_PWM_Start_IT+0x214>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_TIM_PWM_Start_IT+0x224>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <HAL_TIM_PWM_Start_IT+0x228>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d111      	bne.n	8004af8 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d010      	beq.n	8004b08 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0201 	orr.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af6:	e007      	b.n	8004b08 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010400 	.word	0x40010400
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40001800 	.word	0x40001800

08004b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d122      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d11b      	bne.n	8004b8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0202 	mvn.w	r2, #2
 8004b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fa81 	bl	800507a <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fa73 	bl	8005066 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fa84 	bl	800508e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d122      	bne.n	8004be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d11b      	bne.n	8004be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0204 	mvn.w	r2, #4
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa57 	bl	800507a <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa49 	bl	8005066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa5a 	bl	800508e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d122      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d11b      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0208 	mvn.w	r2, #8
 8004c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa2d 	bl	800507a <HAL_TIM_IC_CaptureCallback>
 8004c20:	e005      	b.n	8004c2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fa1f 	bl	8005066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fa30 	bl	800508e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	d122      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d11b      	bne.n	8004c88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0210 	mvn.w	r2, #16
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2208      	movs	r2, #8
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa03 	bl	800507a <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f9f5 	bl	8005066 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fa06 	bl	800508e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d10e      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0201 	mvn.w	r2, #1
 8004cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9cf 	bl	8005052 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b80      	cmp	r3, #128	; 0x80
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ccc:	2b80      	cmp	r3, #128	; 0x80
 8004cce:	d107      	bne.n	8004ce0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 fd82 	bl	80057e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b40      	cmp	r3, #64	; 0x40
 8004cec:	d10e      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f9cb 	bl	80050a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d10e      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d107      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0220 	mvn.w	r2, #32
 8004d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fd4c 	bl	80057d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e0ae      	b.n	8004ebc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b0c      	cmp	r3, #12
 8004d6a:	f200 809f 	bhi.w	8004eac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004da9 	.word	0x08004da9
 8004d78:	08004ead 	.word	0x08004ead
 8004d7c:	08004ead 	.word	0x08004ead
 8004d80:	08004ead 	.word	0x08004ead
 8004d84:	08004de9 	.word	0x08004de9
 8004d88:	08004ead 	.word	0x08004ead
 8004d8c:	08004ead 	.word	0x08004ead
 8004d90:	08004ead 	.word	0x08004ead
 8004d94:	08004e2b 	.word	0x08004e2b
 8004d98:	08004ead 	.word	0x08004ead
 8004d9c:	08004ead 	.word	0x08004ead
 8004da0:	08004ead 	.word	0x08004ead
 8004da4:	08004e6b 	.word	0x08004e6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fa22 	bl	80051f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 0208 	orr.w	r2, r2, #8
 8004dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0204 	bic.w	r2, r2, #4
 8004dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6999      	ldr	r1, [r3, #24]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	691a      	ldr	r2, [r3, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	619a      	str	r2, [r3, #24]
      break;
 8004de6:	e064      	b.n	8004eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fa72 	bl	80052d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6999      	ldr	r1, [r3, #24]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	021a      	lsls	r2, r3, #8
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	619a      	str	r2, [r3, #24]
      break;
 8004e28:	e043      	b.n	8004eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fac7 	bl	80053c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f042 0208 	orr.w	r2, r2, #8
 8004e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f022 0204 	bic.w	r2, r2, #4
 8004e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69d9      	ldr	r1, [r3, #28]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	61da      	str	r2, [r3, #28]
      break;
 8004e68:	e023      	b.n	8004eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fb1b 	bl	80054ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69d9      	ldr	r1, [r3, #28]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	021a      	lsls	r2, r3, #8
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	61da      	str	r2, [r3, #28]
      break;
 8004eaa:	e002      	b.n	8004eb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e0b4      	b.n	800504a <HAL_TIM_ConfigClockSource+0x186>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f18:	d03e      	beq.n	8004f98 <HAL_TIM_ConfigClockSource+0xd4>
 8004f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1e:	f200 8087 	bhi.w	8005030 <HAL_TIM_ConfigClockSource+0x16c>
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	f000 8086 	beq.w	8005036 <HAL_TIM_ConfigClockSource+0x172>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2e:	d87f      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x16c>
 8004f30:	2b70      	cmp	r3, #112	; 0x70
 8004f32:	d01a      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0xa6>
 8004f34:	2b70      	cmp	r3, #112	; 0x70
 8004f36:	d87b      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b60      	cmp	r3, #96	; 0x60
 8004f3a:	d050      	beq.n	8004fde <HAL_TIM_ConfigClockSource+0x11a>
 8004f3c:	2b60      	cmp	r3, #96	; 0x60
 8004f3e:	d877      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b50      	cmp	r3, #80	; 0x50
 8004f42:	d03c      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0xfa>
 8004f44:	2b50      	cmp	r3, #80	; 0x50
 8004f46:	d873      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b40      	cmp	r3, #64	; 0x40
 8004f4a:	d058      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0x13a>
 8004f4c:	2b40      	cmp	r3, #64	; 0x40
 8004f4e:	d86f      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b30      	cmp	r3, #48	; 0x30
 8004f52:	d064      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x15a>
 8004f54:	2b30      	cmp	r3, #48	; 0x30
 8004f56:	d86b      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d060      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x15a>
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d867      	bhi.n	8005030 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d05c      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d05a      	beq.n	800501e <HAL_TIM_ConfigClockSource+0x15a>
 8004f68:	e062      	b.n	8005030 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6899      	ldr	r1, [r3, #8]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	f000 fb67 	bl	800564c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	609a      	str	r2, [r3, #8]
      break;
 8004f96:	e04f      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6899      	ldr	r1, [r3, #8]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f000 fb50 	bl	800564c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fba:	609a      	str	r2, [r3, #8]
      break;
 8004fbc:	e03c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6859      	ldr	r1, [r3, #4]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f000 fac4 	bl	8005558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2150      	movs	r1, #80	; 0x50
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fb1d 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 8004fdc:	e02c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6818      	ldr	r0, [r3, #0]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	6859      	ldr	r1, [r3, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f000 fae3 	bl	80055b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2160      	movs	r1, #96	; 0x60
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fb0d 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 8004ffc:	e01c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	461a      	mov	r2, r3
 800500c:	f000 faa4 	bl	8005558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2140      	movs	r1, #64	; 0x40
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fafd 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 800501c:	e00c      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f000 faf4 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 800502e:	e003      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      break;
 8005034:	e000      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005052:	b480      	push	{r7}
 8005054:	b083      	sub	sp, #12
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005066:	b480      	push	{r7}
 8005068:	b083      	sub	sp, #12
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005082:	bf00      	nop
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b083      	sub	sp, #12
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050aa:	bf00      	nop
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a40      	ldr	r2, [pc, #256]	; (80051cc <TIM_Base_SetConfig+0x114>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d6:	d00f      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a3d      	ldr	r2, [pc, #244]	; (80051d0 <TIM_Base_SetConfig+0x118>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00b      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a3c      	ldr	r2, [pc, #240]	; (80051d4 <TIM_Base_SetConfig+0x11c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d007      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a3b      	ldr	r2, [pc, #236]	; (80051d8 <TIM_Base_SetConfig+0x120>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_Base_SetConfig+0x40>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a3a      	ldr	r2, [pc, #232]	; (80051dc <TIM_Base_SetConfig+0x124>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d108      	bne.n	800510a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2f      	ldr	r2, [pc, #188]	; (80051cc <TIM_Base_SetConfig+0x114>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02b      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005118:	d027      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2c      	ldr	r2, [pc, #176]	; (80051d0 <TIM_Base_SetConfig+0x118>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d023      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2b      	ldr	r2, [pc, #172]	; (80051d4 <TIM_Base_SetConfig+0x11c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d01f      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a2a      	ldr	r2, [pc, #168]	; (80051d8 <TIM_Base_SetConfig+0x120>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d01b      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a29      	ldr	r2, [pc, #164]	; (80051dc <TIM_Base_SetConfig+0x124>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d017      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a28      	ldr	r2, [pc, #160]	; (80051e0 <TIM_Base_SetConfig+0x128>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a27      	ldr	r2, [pc, #156]	; (80051e4 <TIM_Base_SetConfig+0x12c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00f      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a26      	ldr	r2, [pc, #152]	; (80051e8 <TIM_Base_SetConfig+0x130>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00b      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a25      	ldr	r2, [pc, #148]	; (80051ec <TIM_Base_SetConfig+0x134>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a24      	ldr	r2, [pc, #144]	; (80051f0 <TIM_Base_SetConfig+0x138>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <TIM_Base_SetConfig+0x13c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d108      	bne.n	800517c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <TIM_Base_SetConfig+0x114>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d003      	beq.n	80051b0 <TIM_Base_SetConfig+0xf8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a0c      	ldr	r2, [pc, #48]	; (80051dc <TIM_Base_SetConfig+0x124>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d103      	bne.n	80051b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	615a      	str	r2, [r3, #20]
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40010400 	.word	0x40010400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800
 80051ec:	40001800 	.word	0x40001800
 80051f0:	40001c00 	.word	0x40001c00
 80051f4:	40002000 	.word	0x40002000

080051f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f023 0302 	bic.w	r3, r3, #2
 8005240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <TIM_OC1_SetConfig+0xd8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_OC1_SetConfig+0x64>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a1f      	ldr	r2, [pc, #124]	; (80052d4 <TIM_OC1_SetConfig+0xdc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10c      	bne.n	8005276 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 0308 	bic.w	r3, r3, #8
 8005262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f023 0304 	bic.w	r3, r3, #4
 8005274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <TIM_OC1_SetConfig+0xd8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_OC1_SetConfig+0x8e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <TIM_OC1_SetConfig+0xdc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d111      	bne.n	80052aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800528c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	621a      	str	r2, [r3, #32]
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40010400 	.word	0x40010400

080052d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0210 	bic.w	r2, r3, #16
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0320 	bic.w	r3, r3, #32
 8005322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a22      	ldr	r2, [pc, #136]	; (80053bc <TIM_OC2_SetConfig+0xe4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC2_SetConfig+0x68>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <TIM_OC2_SetConfig+0xe8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d10d      	bne.n	800535c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <TIM_OC2_SetConfig+0xe4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC2_SetConfig+0x94>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <TIM_OC2_SetConfig+0xe8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d113      	bne.n	8005394 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800537a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	621a      	str	r2, [r3, #32]
}
 80053ae:	bf00      	nop
 80053b0:	371c      	adds	r7, #28
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40010400 	.word	0x40010400

080053c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0303 	bic.w	r3, r3, #3
 80053fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800540c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a21      	ldr	r2, [pc, #132]	; (80054a4 <TIM_OC3_SetConfig+0xe0>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_OC3_SetConfig+0x66>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a20      	ldr	r2, [pc, #128]	; (80054a8 <TIM_OC3_SetConfig+0xe4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10d      	bne.n	8005446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	021b      	lsls	r3, r3, #8
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	4313      	orrs	r3, r2
 800543c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a16      	ldr	r2, [pc, #88]	; (80054a4 <TIM_OC3_SetConfig+0xe0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d003      	beq.n	8005456 <TIM_OC3_SetConfig+0x92>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <TIM_OC3_SetConfig+0xe4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d113      	bne.n	800547e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800545c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	621a      	str	r2, [r3, #32]
}
 8005498:	bf00      	nop
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	40010000 	.word	0x40010000
 80054a8:	40010400 	.word	0x40010400

080054ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	031b      	lsls	r3, r3, #12
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a12      	ldr	r2, [pc, #72]	; (8005550 <TIM_OC4_SetConfig+0xa4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_OC4_SetConfig+0x68>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a11      	ldr	r2, [pc, #68]	; (8005554 <TIM_OC4_SetConfig+0xa8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d109      	bne.n	8005528 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800551a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40010000 	.word	0x40010000
 8005554:	40010400 	.word	0x40010400

08005558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0201 	bic.w	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f023 030a 	bic.w	r3, r3, #10
 8005594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b087      	sub	sp, #28
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f023 0210 	bic.w	r2, r3, #16
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	031b      	lsls	r3, r3, #12
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	f043 0307 	orr.w	r3, r3, #7
 8005638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	021a      	lsls	r2, r3, #8
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	431a      	orrs	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4313      	orrs	r3, r2
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	4313      	orrs	r3, r2
 8005678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	609a      	str	r2, [r3, #8]
}
 8005680:	bf00      	nop
 8005682:	371c      	adds	r7, #28
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	2201      	movs	r2, #1
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1a      	ldr	r2, [r3, #32]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	43db      	mvns	r3, r3
 80056ae:	401a      	ands	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6a1a      	ldr	r2, [r3, #32]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	fa01 f303 	lsl.w	r3, r1, r3
 80056c4:	431a      	orrs	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e05a      	b.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a21      	ldr	r2, [pc, #132]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d022      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d01d      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d018      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1b      	ldr	r2, [pc, #108]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d013      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00e      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a18      	ldr	r2, [pc, #96]	; (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d009      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a15      	ldr	r2, [pc, #84]	; (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d10c      	bne.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4313      	orrs	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	40010400 	.word	0x40010400
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40001800 	.word	0x40001800

080057d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e03f      	b.n	800588a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f7fc febe 	bl	80025a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2224      	movs	r2, #36	; 0x24
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800583a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 fde9 	bl	8006414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695a      	ldr	r2, [r3, #20]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2220      	movs	r2, #32
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b08a      	sub	sp, #40	; 0x28
 8005896:	af02      	add	r7, sp, #8
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d17c      	bne.n	80059ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <HAL_UART_Transmit+0x2c>
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e075      	b.n	80059ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d101      	bne.n	80058d0 <HAL_UART_Transmit+0x3e>
 80058cc:	2302      	movs	r3, #2
 80058ce:	e06e      	b.n	80059ae <HAL_UART_Transmit+0x11c>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2221      	movs	r2, #33	; 0x21
 80058e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058e6:	f7fc ffd9 	bl	800289c <HAL_GetTick>
 80058ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	88fa      	ldrh	r2, [r7, #6]
 80058f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	88fa      	ldrh	r2, [r7, #6]
 80058f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005900:	d108      	bne.n	8005914 <HAL_UART_Transmit+0x82>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	e003      	b.n	800591c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005924:	e02a      	b.n	800597c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2200      	movs	r2, #0
 800592e:	2180      	movs	r1, #128	; 0x80
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fb29 	bl	8005f88 <UART_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e036      	b.n	80059ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10b      	bne.n	800595e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	3302      	adds	r3, #2
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e007      	b.n	800596e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	3301      	adds	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1cf      	bne.n	8005926 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2200      	movs	r2, #0
 800598e:	2140      	movs	r1, #64	; 0x40
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 faf9 	bl	8005f88 <UART_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e006      	b.n	80059ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	e000      	b.n	80059ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059ac:	2302      	movs	r3, #2
  }
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	4613      	mov	r3, r2
 80059c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d11d      	bne.n	8005a0c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_UART_Receive_IT+0x26>
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e016      	b.n	8005a0e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_UART_Receive_IT+0x38>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e00f      	b.n	8005a0e <HAL_UART_Receive_IT+0x58>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fb2e 	bl	8006064 <UART_Start_Receive_IT>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	e000      	b.n	8005a0e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
  }
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b0ba      	sub	sp, #232	; 0xe8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10f      	bne.n	8005a7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_UART_IRQHandler+0x66>
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fc11 	bl	800629e <UART_Receive_IT>
      return;
 8005a7c:	e256      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 80de 	beq.w	8005c44 <HAL_UART_IRQHandler+0x22c>
 8005a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d106      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 80d1 	beq.w	8005c44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00b      	beq.n	8005ac6 <HAL_UART_IRQHandler+0xae>
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f043 0201 	orr.w	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00b      	beq.n	8005aea <HAL_UART_IRQHandler+0xd2>
 8005ad2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d005      	beq.n	8005aea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f043 0202 	orr.w	r2, r3, #2
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <HAL_UART_IRQHandler+0xf6>
 8005af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0204 	orr.w	r2, r3, #4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d011      	beq.n	8005b3e <HAL_UART_IRQHandler+0x126>
 8005b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d105      	bne.n	8005b32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f043 0208 	orr.w	r2, r3, #8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 81ed 	beq.w	8005f22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_UART_IRQHandler+0x14e>
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fb9c 	bl	800629e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b40      	cmp	r3, #64	; 0x40
 8005b72:	bf0c      	ite	eq
 8005b74:	2301      	moveq	r3, #1
 8005b76:	2300      	movne	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <HAL_UART_IRQHandler+0x17a>
 8005b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d04f      	beq.n	8005c32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 faa4 	bl	80060e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d141      	bne.n	8005c2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1d9      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d013      	beq.n	8005c22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	4a7d      	ldr	r2, [pc, #500]	; (8005df4 <HAL_UART_IRQHandler+0x3dc>)
 8005c00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fd f8dc 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d016      	beq.n	8005c40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	e00e      	b.n	8005c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f99a 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c28:	e00a      	b.n	8005c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f996 	bl	8005f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c30:	e006      	b.n	8005c40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f992 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005c3e:	e170      	b.n	8005f22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c40:	bf00      	nop
    return;
 8005c42:	e16e      	b.n	8005f22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	f040 814a 	bne.w	8005ee2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8143 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c60:	f003 0310 	and.w	r3, r3, #16
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 813c 	beq.w	8005ee2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	60bb      	str	r3, [r7, #8]
 8005c7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	f040 80b4 	bne.w	8005df8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8140 	beq.w	8005f26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	f080 8139 	bcs.w	8005f26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc6:	f000 8088 	beq.w	8005dda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	330c      	adds	r3, #12
 8005cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005cf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1d9      	bne.n	8005cca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3314      	adds	r3, #20
 8005d1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d28:	f023 0301 	bic.w	r3, r3, #1
 8005d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3314      	adds	r3, #20
 8005d36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e1      	bne.n	8005d16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3314      	adds	r3, #20
 8005d58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5c:	e853 3f00 	ldrex	r3, [r3]
 8005d60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005d76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005d7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d7e:	e841 2300 	strex	r3, r2, [r1]
 8005d82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e3      	bne.n	8005d52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005daa:	f023 0310 	bic.w	r3, r3, #16
 8005dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005dbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005dbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005dc4:	e841 2300 	strex	r3, r2, [r1]
 8005dc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e3      	bne.n	8005d98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fc ff85 	bl	8002ce4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f8c0 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005df0:	e099      	b.n	8005f26 <HAL_UART_IRQHandler+0x50e>
 8005df2:	bf00      	nop
 8005df4:	080061a7 	.word	0x080061a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 808b 	beq.w	8005f2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8086 	beq.w	8005f2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	330c      	adds	r3, #12
 8005e24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e42:	647a      	str	r2, [r7, #68]	; 0x44
 8005e44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e3      	bne.n	8005e1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3314      	adds	r3, #20
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	623b      	str	r3, [r7, #32]
   return(result);
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3314      	adds	r3, #20
 8005e76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005e7a:	633a      	str	r2, [r7, #48]	; 0x30
 8005e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e3      	bne.n	8005e56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2220      	movs	r2, #32
 8005e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0310 	bic.w	r3, r3, #16
 8005eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ec0:	61fa      	str	r2, [r7, #28]
 8005ec2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec4:	69b9      	ldr	r1, [r7, #24]
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e3      	bne.n	8005e9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f848 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ee0:	e023      	b.n	8005f2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_UART_IRQHandler+0x4ea>
 8005eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f967 	bl	80061ce <UART_Transmit_IT>
    return;
 8005f00:	e014      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00e      	beq.n	8005f2c <HAL_UART_IRQHandler+0x514>
 8005f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f9a7 	bl	800626e <UART_EndTransmit_IT>
    return;
 8005f20:	e004      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
    return;
 8005f22:	bf00      	nop
 8005f24:	e002      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
      return;
 8005f26:	bf00      	nop
 8005f28:	e000      	b.n	8005f2c <HAL_UART_IRQHandler+0x514>
      return;
 8005f2a:	bf00      	nop
  }
}
 8005f2c:	37e8      	adds	r7, #232	; 0xe8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop

08005f34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b090      	sub	sp, #64	; 0x40
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	603b      	str	r3, [r7, #0]
 8005f94:	4613      	mov	r3, r2
 8005f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f98:	e050      	b.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa0:	d04c      	beq.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fa8:	f7fc fc78 	bl	800289c <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d241      	bcs.n	800603c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	330c      	adds	r3, #12
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fd8:	637a      	str	r2, [r7, #52]	; 0x34
 8005fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e5      	bne.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	3314      	adds	r3, #20
 8005ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f023 0301 	bic.w	r3, r3, #1
 8006002:	63bb      	str	r3, [r7, #56]	; 0x38
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3314      	adds	r3, #20
 800600a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800600c:	623a      	str	r2, [r7, #32]
 800600e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	69f9      	ldr	r1, [r7, #28]
 8006012:	6a3a      	ldr	r2, [r7, #32]
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	61bb      	str	r3, [r7, #24]
   return(result);
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e5      	bne.n	8005fec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e00f      	b.n	800605c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	4013      	ands	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	bf0c      	ite	eq
 800604c:	2301      	moveq	r3, #1
 800604e:	2300      	movne	r3, #0
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	429a      	cmp	r2, r3
 8006058:	d09f      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3740      	adds	r7, #64	; 0x40
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4613      	mov	r3, r2
 8006070:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	88fa      	ldrh	r2, [r7, #6]
 800607c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2222      	movs	r2, #34	; 0x22
 800608e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695a      	ldr	r2, [r3, #20]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0220 	orr.w	r2, r2, #32
 80060d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b095      	sub	sp, #84	; 0x54
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f2:	e853 3f00 	ldrex	r3, [r3]
 80060f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	330c      	adds	r3, #12
 8006106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006108:	643a      	str	r2, [r7, #64]	; 0x40
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800610e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006110:	e841 2300 	strex	r3, r2, [r1]
 8006114:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1e5      	bne.n	80060e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3314      	adds	r3, #20
 8006122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	61fb      	str	r3, [r7, #28]
   return(result);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	64bb      	str	r3, [r7, #72]	; 0x48
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3314      	adds	r3, #20
 800613a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800613c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	2b01      	cmp	r3, #1
 8006156:	d119      	bne.n	800618c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	60bb      	str	r3, [r7, #8]
   return(result);
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f023 0310 	bic.w	r3, r3, #16
 800616e:	647b      	str	r3, [r7, #68]	; 0x44
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	330c      	adds	r3, #12
 8006176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006178:	61ba      	str	r2, [r7, #24]
 800617a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	6979      	ldr	r1, [r7, #20]
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	613b      	str	r3, [r7, #16]
   return(result);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e5      	bne.n	8006158 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	631a      	str	r2, [r3, #48]	; 0x30
}
 800619a:	bf00      	nop
 800619c:	3754      	adds	r7, #84	; 0x54
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b084      	sub	sp, #16
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff fecb 	bl	8005f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b21      	cmp	r3, #33	; 0x21
 80061e0:	d13e      	bne.n	8006260 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	d114      	bne.n	8006216 <UART_Transmit_IT+0x48>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d110      	bne.n	8006216 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006208:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	1c9a      	adds	r2, r3, #2
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	621a      	str	r2, [r3, #32]
 8006214:	e008      	b.n	8006228 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6211      	str	r1, [r2, #32]
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29b      	uxth	r3, r3
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4619      	mov	r1, r3
 8006236:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10f      	bne.n	800625c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800624a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800625a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	e000      	b.n	8006262 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006260:	2302      	movs	r3, #2
  }
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006284:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff fe50 	bl	8005f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b08c      	sub	sp, #48	; 0x30
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b22      	cmp	r3, #34	; 0x22
 80062b0:	f040 80ab 	bne.w	800640a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062bc:	d117      	bne.n	80062ee <UART_Receive_IT+0x50>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d113      	bne.n	80062ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062dc:	b29a      	uxth	r2, r3
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	1c9a      	adds	r2, r3, #2
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	629a      	str	r2, [r3, #40]	; 0x28
 80062ec:	e026      	b.n	800633c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80062f4:	2300      	movs	r3, #0
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006300:	d007      	beq.n	8006312 <UART_Receive_IT+0x74>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <UART_Receive_IT+0x82>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	e008      	b.n	8006332 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632c:	b2da      	uxtb	r2, r3
 800632e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006330:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29b      	uxth	r3, r3
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	4619      	mov	r1, r3
 800634a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800634c:	2b00      	cmp	r3, #0
 800634e:	d15a      	bne.n	8006406 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0220 	bic.w	r2, r2, #32
 800635e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800636e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695a      	ldr	r2, [r3, #20]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0201 	bic.w	r2, r2, #1
 800637e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638c:	2b01      	cmp	r3, #1
 800638e:	d135      	bne.n	80063fc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	330c      	adds	r3, #12
 800639c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	613b      	str	r3, [r7, #16]
   return(result);
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f023 0310 	bic.w	r3, r3, #16
 80063ac:	627b      	str	r3, [r7, #36]	; 0x24
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	330c      	adds	r3, #12
 80063b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b6:	623a      	str	r2, [r7, #32]
 80063b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	69f9      	ldr	r1, [r7, #28]
 80063bc:	6a3a      	ldr	r2, [r7, #32]
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e5      	bne.n	8006396 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d10a      	bne.n	80063ee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff fdbb 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
 80063fa:	e002      	b.n	8006402 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff fda3 	bl	8005f48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e002      	b.n	800640c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e000      	b.n	800640c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
  }
}
 800640c:	4618      	mov	r0, r3
 800640e:	3730      	adds	r7, #48	; 0x30
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006418:	b0c0      	sub	sp, #256	; 0x100
 800641a:	af00      	add	r7, sp, #0
 800641c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	68d9      	ldr	r1, [r3, #12]
 8006432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	ea40 0301 	orr.w	r3, r0, r1
 800643c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800643e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	431a      	orrs	r2, r3
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	431a      	orrs	r2, r3
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800646c:	f021 010c 	bic.w	r1, r1, #12
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800647a:	430b      	orrs	r3, r1
 800647c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800647e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800648a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648e:	6999      	ldr	r1, [r3, #24]
 8006490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	ea40 0301 	orr.w	r3, r0, r1
 800649a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	4b8f      	ldr	r3, [pc, #572]	; (80066e0 <UART_SetConfig+0x2cc>)
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d005      	beq.n	80064b4 <UART_SetConfig+0xa0>
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4b8d      	ldr	r3, [pc, #564]	; (80066e4 <UART_SetConfig+0x2d0>)
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d104      	bne.n	80064be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064b4:	f7fd fd4c 	bl	8003f50 <HAL_RCC_GetPCLK2Freq>
 80064b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064bc:	e003      	b.n	80064c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064be:	f7fd fd33 	bl	8003f28 <HAL_RCC_GetPCLK1Freq>
 80064c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064d0:	f040 810c 	bne.w	80066ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d8:	2200      	movs	r2, #0
 80064da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064e6:	4622      	mov	r2, r4
 80064e8:	462b      	mov	r3, r5
 80064ea:	1891      	adds	r1, r2, r2
 80064ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80064ee:	415b      	adcs	r3, r3
 80064f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064f6:	4621      	mov	r1, r4
 80064f8:	eb12 0801 	adds.w	r8, r2, r1
 80064fc:	4629      	mov	r1, r5
 80064fe:	eb43 0901 	adc.w	r9, r3, r1
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800650e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006512:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006516:	4690      	mov	r8, r2
 8006518:	4699      	mov	r9, r3
 800651a:	4623      	mov	r3, r4
 800651c:	eb18 0303 	adds.w	r3, r8, r3
 8006520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006524:	462b      	mov	r3, r5
 8006526:	eb49 0303 	adc.w	r3, r9, r3
 800652a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800653a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800653e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006542:	460b      	mov	r3, r1
 8006544:	18db      	adds	r3, r3, r3
 8006546:	653b      	str	r3, [r7, #80]	; 0x50
 8006548:	4613      	mov	r3, r2
 800654a:	eb42 0303 	adc.w	r3, r2, r3
 800654e:	657b      	str	r3, [r7, #84]	; 0x54
 8006550:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006554:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006558:	f7fa f8ae 	bl	80006b8 <__aeabi_uldivmod>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4b61      	ldr	r3, [pc, #388]	; (80066e8 <UART_SetConfig+0x2d4>)
 8006562:	fba3 2302 	umull	r2, r3, r3, r2
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	011c      	lsls	r4, r3, #4
 800656a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800656e:	2200      	movs	r2, #0
 8006570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006574:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006578:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800657c:	4642      	mov	r2, r8
 800657e:	464b      	mov	r3, r9
 8006580:	1891      	adds	r1, r2, r2
 8006582:	64b9      	str	r1, [r7, #72]	; 0x48
 8006584:	415b      	adcs	r3, r3
 8006586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006588:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800658c:	4641      	mov	r1, r8
 800658e:	eb12 0a01 	adds.w	sl, r2, r1
 8006592:	4649      	mov	r1, r9
 8006594:	eb43 0b01 	adc.w	fp, r3, r1
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	f04f 0300 	mov.w	r3, #0
 80065a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065ac:	4692      	mov	sl, r2
 80065ae:	469b      	mov	fp, r3
 80065b0:	4643      	mov	r3, r8
 80065b2:	eb1a 0303 	adds.w	r3, sl, r3
 80065b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ba:	464b      	mov	r3, r9
 80065bc:	eb4b 0303 	adc.w	r3, fp, r3
 80065c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065d8:	460b      	mov	r3, r1
 80065da:	18db      	adds	r3, r3, r3
 80065dc:	643b      	str	r3, [r7, #64]	; 0x40
 80065de:	4613      	mov	r3, r2
 80065e0:	eb42 0303 	adc.w	r3, r2, r3
 80065e4:	647b      	str	r3, [r7, #68]	; 0x44
 80065e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065ee:	f7fa f863 	bl	80006b8 <__aeabi_uldivmod>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4611      	mov	r1, r2
 80065f8:	4b3b      	ldr	r3, [pc, #236]	; (80066e8 <UART_SetConfig+0x2d4>)
 80065fa:	fba3 2301 	umull	r2, r3, r3, r1
 80065fe:	095b      	lsrs	r3, r3, #5
 8006600:	2264      	movs	r2, #100	; 0x64
 8006602:	fb02 f303 	mul.w	r3, r2, r3
 8006606:	1acb      	subs	r3, r1, r3
 8006608:	00db      	lsls	r3, r3, #3
 800660a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800660e:	4b36      	ldr	r3, [pc, #216]	; (80066e8 <UART_SetConfig+0x2d4>)
 8006610:	fba3 2302 	umull	r2, r3, r3, r2
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800661c:	441c      	add	r4, r3
 800661e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006622:	2200      	movs	r2, #0
 8006624:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006628:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800662c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006630:	4642      	mov	r2, r8
 8006632:	464b      	mov	r3, r9
 8006634:	1891      	adds	r1, r2, r2
 8006636:	63b9      	str	r1, [r7, #56]	; 0x38
 8006638:	415b      	adcs	r3, r3
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006640:	4641      	mov	r1, r8
 8006642:	1851      	adds	r1, r2, r1
 8006644:	6339      	str	r1, [r7, #48]	; 0x30
 8006646:	4649      	mov	r1, r9
 8006648:	414b      	adcs	r3, r1
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006658:	4659      	mov	r1, fp
 800665a:	00cb      	lsls	r3, r1, #3
 800665c:	4651      	mov	r1, sl
 800665e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006662:	4651      	mov	r1, sl
 8006664:	00ca      	lsls	r2, r1, #3
 8006666:	4610      	mov	r0, r2
 8006668:	4619      	mov	r1, r3
 800666a:	4603      	mov	r3, r0
 800666c:	4642      	mov	r2, r8
 800666e:	189b      	adds	r3, r3, r2
 8006670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006674:	464b      	mov	r3, r9
 8006676:	460a      	mov	r2, r1
 8006678:	eb42 0303 	adc.w	r3, r2, r3
 800667c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800668c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006690:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006694:	460b      	mov	r3, r1
 8006696:	18db      	adds	r3, r3, r3
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
 800669a:	4613      	mov	r3, r2
 800669c:	eb42 0303 	adc.w	r3, r2, r3
 80066a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066aa:	f7fa f805 	bl	80006b8 <__aeabi_uldivmod>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <UART_SetConfig+0x2d4>)
 80066b4:	fba3 1302 	umull	r1, r3, r3, r2
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	2164      	movs	r1, #100	; 0x64
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	3332      	adds	r3, #50	; 0x32
 80066c6:	4a08      	ldr	r2, [pc, #32]	; (80066e8 <UART_SetConfig+0x2d4>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	f003 0207 	and.w	r2, r3, #7
 80066d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4422      	add	r2, r4
 80066da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066dc:	e105      	b.n	80068ea <UART_SetConfig+0x4d6>
 80066de:	bf00      	nop
 80066e0:	40011000 	.word	0x40011000
 80066e4:	40011400 	.word	0x40011400
 80066e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066f0:	2200      	movs	r2, #0
 80066f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066fe:	4642      	mov	r2, r8
 8006700:	464b      	mov	r3, r9
 8006702:	1891      	adds	r1, r2, r2
 8006704:	6239      	str	r1, [r7, #32]
 8006706:	415b      	adcs	r3, r3
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
 800670a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800670e:	4641      	mov	r1, r8
 8006710:	1854      	adds	r4, r2, r1
 8006712:	4649      	mov	r1, r9
 8006714:	eb43 0501 	adc.w	r5, r3, r1
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	00eb      	lsls	r3, r5, #3
 8006722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006726:	00e2      	lsls	r2, r4, #3
 8006728:	4614      	mov	r4, r2
 800672a:	461d      	mov	r5, r3
 800672c:	4643      	mov	r3, r8
 800672e:	18e3      	adds	r3, r4, r3
 8006730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006734:	464b      	mov	r3, r9
 8006736:	eb45 0303 	adc.w	r3, r5, r3
 800673a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800673e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800674a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800675a:	4629      	mov	r1, r5
 800675c:	008b      	lsls	r3, r1, #2
 800675e:	4621      	mov	r1, r4
 8006760:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006764:	4621      	mov	r1, r4
 8006766:	008a      	lsls	r2, r1, #2
 8006768:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800676c:	f7f9 ffa4 	bl	80006b8 <__aeabi_uldivmod>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4b60      	ldr	r3, [pc, #384]	; (80068f8 <UART_SetConfig+0x4e4>)
 8006776:	fba3 2302 	umull	r2, r3, r3, r2
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	011c      	lsls	r4, r3, #4
 800677e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006782:	2200      	movs	r2, #0
 8006784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006788:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800678c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006790:	4642      	mov	r2, r8
 8006792:	464b      	mov	r3, r9
 8006794:	1891      	adds	r1, r2, r2
 8006796:	61b9      	str	r1, [r7, #24]
 8006798:	415b      	adcs	r3, r3
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067a0:	4641      	mov	r1, r8
 80067a2:	1851      	adds	r1, r2, r1
 80067a4:	6139      	str	r1, [r7, #16]
 80067a6:	4649      	mov	r1, r9
 80067a8:	414b      	adcs	r3, r1
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067b8:	4659      	mov	r1, fp
 80067ba:	00cb      	lsls	r3, r1, #3
 80067bc:	4651      	mov	r1, sl
 80067be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067c2:	4651      	mov	r1, sl
 80067c4:	00ca      	lsls	r2, r1, #3
 80067c6:	4610      	mov	r0, r2
 80067c8:	4619      	mov	r1, r3
 80067ca:	4603      	mov	r3, r0
 80067cc:	4642      	mov	r2, r8
 80067ce:	189b      	adds	r3, r3, r2
 80067d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067d4:	464b      	mov	r3, r9
 80067d6:	460a      	mov	r2, r1
 80067d8:	eb42 0303 	adc.w	r3, r2, r3
 80067dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80067ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067f8:	4649      	mov	r1, r9
 80067fa:	008b      	lsls	r3, r1, #2
 80067fc:	4641      	mov	r1, r8
 80067fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006802:	4641      	mov	r1, r8
 8006804:	008a      	lsls	r2, r1, #2
 8006806:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800680a:	f7f9 ff55 	bl	80006b8 <__aeabi_uldivmod>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4b39      	ldr	r3, [pc, #228]	; (80068f8 <UART_SetConfig+0x4e4>)
 8006814:	fba3 1302 	umull	r1, r3, r3, r2
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	2164      	movs	r1, #100	; 0x64
 800681c:	fb01 f303 	mul.w	r3, r1, r3
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	3332      	adds	r3, #50	; 0x32
 8006826:	4a34      	ldr	r2, [pc, #208]	; (80068f8 <UART_SetConfig+0x4e4>)
 8006828:	fba2 2303 	umull	r2, r3, r2, r3
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006832:	441c      	add	r4, r3
 8006834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006838:	2200      	movs	r2, #0
 800683a:	673b      	str	r3, [r7, #112]	; 0x70
 800683c:	677a      	str	r2, [r7, #116]	; 0x74
 800683e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006842:	4642      	mov	r2, r8
 8006844:	464b      	mov	r3, r9
 8006846:	1891      	adds	r1, r2, r2
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	415b      	adcs	r3, r3
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006852:	4641      	mov	r1, r8
 8006854:	1851      	adds	r1, r2, r1
 8006856:	6039      	str	r1, [r7, #0]
 8006858:	4649      	mov	r1, r9
 800685a:	414b      	adcs	r3, r1
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	f04f 0200 	mov.w	r2, #0
 8006862:	f04f 0300 	mov.w	r3, #0
 8006866:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800686a:	4659      	mov	r1, fp
 800686c:	00cb      	lsls	r3, r1, #3
 800686e:	4651      	mov	r1, sl
 8006870:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006874:	4651      	mov	r1, sl
 8006876:	00ca      	lsls	r2, r1, #3
 8006878:	4610      	mov	r0, r2
 800687a:	4619      	mov	r1, r3
 800687c:	4603      	mov	r3, r0
 800687e:	4642      	mov	r2, r8
 8006880:	189b      	adds	r3, r3, r2
 8006882:	66bb      	str	r3, [r7, #104]	; 0x68
 8006884:	464b      	mov	r3, r9
 8006886:	460a      	mov	r2, r1
 8006888:	eb42 0303 	adc.w	r3, r2, r3
 800688c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800688e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	663b      	str	r3, [r7, #96]	; 0x60
 8006898:	667a      	str	r2, [r7, #100]	; 0x64
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068a6:	4649      	mov	r1, r9
 80068a8:	008b      	lsls	r3, r1, #2
 80068aa:	4641      	mov	r1, r8
 80068ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068b0:	4641      	mov	r1, r8
 80068b2:	008a      	lsls	r2, r1, #2
 80068b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068b8:	f7f9 fefe 	bl	80006b8 <__aeabi_uldivmod>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <UART_SetConfig+0x4e4>)
 80068c2:	fba3 1302 	umull	r1, r3, r3, r2
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	2164      	movs	r1, #100	; 0x64
 80068ca:	fb01 f303 	mul.w	r3, r1, r3
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	3332      	adds	r3, #50	; 0x32
 80068d4:	4a08      	ldr	r2, [pc, #32]	; (80068f8 <UART_SetConfig+0x4e4>)
 80068d6:	fba2 2303 	umull	r2, r3, r2, r3
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	f003 020f 	and.w	r2, r3, #15
 80068e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4422      	add	r2, r4
 80068e8:	609a      	str	r2, [r3, #8]
}
 80068ea:	bf00      	nop
 80068ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068f0:	46bd      	mov	sp, r7
 80068f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068f6:	bf00      	nop
 80068f8:	51eb851f 	.word	0x51eb851f

080068fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006900:	4904      	ldr	r1, [pc, #16]	; (8006914 <MX_FATFS_Init+0x18>)
 8006902:	4805      	ldr	r0, [pc, #20]	; (8006918 <MX_FATFS_Init+0x1c>)
 8006904:	f002 fec0 	bl	8009688 <FATFS_LinkDriver>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	4b03      	ldr	r3, [pc, #12]	; (800691c <MX_FATFS_Init+0x20>)
 800690e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006910:	bf00      	nop
 8006912:	bd80      	pop	{r7, pc}
 8006914:	200135b8 	.word	0x200135b8
 8006918:	20000100 	.word	0x20000100
 800691c:	200135b4 	.word	0x200135b4

08006920 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006924:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006926:	4618      	mov	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800693a:	79fb      	ldrb	r3, [r7, #7]
 800693c:	4618      	mov	r0, r3
 800693e:	f000 f9d9 	bl	8006cf4 <USER_SPI_initialize>
 8006942:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	4618      	mov	r0, r3
 800695a:	f000 fab7 	bl	8006ecc <USER_SPI_status>
 800695e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006978:	7bf8      	ldrb	r0, [r7, #15]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	f000 faba 	bl	8006ef8 <USER_SPI_read>
 8006984:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b084      	sub	sp, #16
 8006992:	af00      	add	r7, sp, #0
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
 800699a:	4603      	mov	r3, r0
 800699c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800699e:	7bf8      	ldrb	r0, [r7, #15]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	f000 fb0d 	bl	8006fc4 <USER_SPI_write>
 80069aa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	603a      	str	r2, [r7, #0]
 80069be:	71fb      	strb	r3, [r7, #7]
 80069c0:	460b      	mov	r3, r1
 80069c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80069c4:	79b9      	ldrb	r1, [r7, #6]
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 fb76 	bl	80070bc <USER_SPI_ioctl>
 80069d0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
	...

080069dc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80069e4:	f7fb ff5a 	bl	800289c <HAL_GetTick>
 80069e8:	4603      	mov	r3, r0
 80069ea:	4a04      	ldr	r2, [pc, #16]	; (80069fc <SPI_Timer_On+0x20>)
 80069ec:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80069ee:	4a04      	ldr	r2, [pc, #16]	; (8006a00 <SPI_Timer_On+0x24>)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6013      	str	r3, [r2, #0]
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	200135c0 	.word	0x200135c0
 8006a00:	200135c4 	.word	0x200135c4

08006a04 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006a08:	f7fb ff48 	bl	800289c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <SPI_Timer_Status+0x24>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <SPI_Timer_Status+0x28>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	bf34      	ite	cc
 8006a1c:	2301      	movcc	r3, #1
 8006a1e:	2300      	movcs	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	200135c0 	.word	0x200135c0
 8006a2c:	200135c4 	.word	0x200135c4

08006a30 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	4603      	mov	r3, r0
 8006a38:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006a3a:	f107 020f 	add.w	r2, r7, #15
 8006a3e:	1df9      	adds	r1, r7, #7
 8006a40:	2332      	movs	r3, #50	; 0x32
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	2301      	movs	r3, #1
 8006a46:	4804      	ldr	r0, [pc, #16]	; (8006a58 <xchg_spi+0x28>)
 8006a48:	f7fd fb1f 	bl	800408a <HAL_SPI_TransmitReceive>
    return rxDat;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000724 	.word	0x20000724

08006a5c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006a5c:	b590      	push	{r4, r7, lr}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	e00a      	b.n	8006a82 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	18d4      	adds	r4, r2, r3
 8006a72:	20ff      	movs	r0, #255	; 0xff
 8006a74:	f7ff ffdc 	bl	8006a30 <xchg_spi>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d3f0      	bcc.n	8006a6c <rcvr_spi_multi+0x10>
	}
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd90      	pop	{r4, r7, pc}

08006a94 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	e009      	b.n	8006ab8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff ffbf 	bl	8006a30 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d3f1      	bcc.n	8006aa4 <xmit_spi_multi+0x10>
	}
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b086      	sub	sp, #24
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006ad2:	f7fb fee3 	bl	800289c <HAL_GetTick>
 8006ad6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006adc:	20ff      	movs	r0, #255	; 0xff
 8006ade:	f7ff ffa7 	bl	8006a30 <xchg_spi>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2bff      	cmp	r3, #255	; 0xff
 8006aea:	d007      	beq.n	8006afc <wait_ready+0x32>
 8006aec:	f7fb fed6 	bl	800289c <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d8ef      	bhi.n	8006adc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2bff      	cmp	r3, #255	; 0xff
 8006b00:	bf0c      	ite	eq
 8006b02:	2301      	moveq	r3, #1
 8006b04:	2300      	movne	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006b14:	2201      	movs	r2, #1
 8006b16:	2102      	movs	r1, #2
 8006b18:	4803      	ldr	r0, [pc, #12]	; (8006b28 <despiselect+0x18>)
 8006b1a:	f7fc fd7b 	bl	8003614 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006b1e:	20ff      	movs	r0, #255	; 0xff
 8006b20:	f7ff ff86 	bl	8006a30 <xchg_spi>

}
 8006b24:	bf00      	nop
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40020000 	.word	0x40020000

08006b2c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006b30:	2200      	movs	r2, #0
 8006b32:	2102      	movs	r1, #2
 8006b34:	4809      	ldr	r0, [pc, #36]	; (8006b5c <spiselect+0x30>)
 8006b36:	f7fc fd6d 	bl	8003614 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006b3a:	20ff      	movs	r0, #255	; 0xff
 8006b3c:	f7ff ff78 	bl	8006a30 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006b40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b44:	f7ff ffc1 	bl	8006aca <wait_ready>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <spiselect+0x26>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e002      	b.n	8006b58 <spiselect+0x2c>

	despiselect();
 8006b52:	f7ff ffdd 	bl	8006b10 <despiselect>
	return 0;	/* Timeout */
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40020000 	.word	0x40020000

08006b60 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006b6a:	20c8      	movs	r0, #200	; 0xc8
 8006b6c:	f7ff ff36 	bl	80069dc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006b70:	20ff      	movs	r0, #255	; 0xff
 8006b72:	f7ff ff5d 	bl	8006a30 <xchg_spi>
 8006b76:	4603      	mov	r3, r0
 8006b78:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2bff      	cmp	r3, #255	; 0xff
 8006b7e:	d104      	bne.n	8006b8a <rcvr_datablock+0x2a>
 8006b80:	f7ff ff40 	bl	8006a04 <SPI_Timer_Status>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f2      	bne.n	8006b70 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2bfe      	cmp	r3, #254	; 0xfe
 8006b8e:	d001      	beq.n	8006b94 <rcvr_datablock+0x34>
 8006b90:	2300      	movs	r3, #0
 8006b92:	e00a      	b.n	8006baa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff ff60 	bl	8006a5c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006b9c:	20ff      	movs	r0, #255	; 0xff
 8006b9e:	f7ff ff47 	bl	8006a30 <xchg_spi>
 8006ba2:	20ff      	movs	r0, #255	; 0xff
 8006ba4:	f7ff ff44 	bl	8006a30 <xchg_spi>

	return 1;						/* Function succeeded */
 8006ba8:	2301      	movs	r3, #1
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006bbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bc2:	f7ff ff82 	bl	8006aca <wait_ready>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <xmit_datablock+0x1e>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e01e      	b.n	8006c0e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7ff ff2c 	bl	8006a30 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	2bfd      	cmp	r3, #253	; 0xfd
 8006bdc:	d016      	beq.n	8006c0c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f7ff ff56 	bl	8006a94 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006be8:	20ff      	movs	r0, #255	; 0xff
 8006bea:	f7ff ff21 	bl	8006a30 <xchg_spi>
 8006bee:	20ff      	movs	r0, #255	; 0xff
 8006bf0:	f7ff ff1e 	bl	8006a30 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006bf4:	20ff      	movs	r0, #255	; 0xff
 8006bf6:	f7ff ff1b 	bl	8006a30 <xchg_spi>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	f003 031f 	and.w	r3, r3, #31
 8006c04:	2b05      	cmp	r3, #5
 8006c06:	d001      	beq.n	8006c0c <xmit_datablock+0x5a>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e000      	b.n	8006c0e <xmit_datablock+0x5c>
	}
	return 1;
 8006c0c:	2301      	movs	r3, #1
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	6039      	str	r1, [r7, #0]
 8006c20:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	da0e      	bge.n	8006c48 <send_cmd+0x32>
		cmd &= 0x7F;
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c30:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006c32:	2100      	movs	r1, #0
 8006c34:	2037      	movs	r0, #55	; 0x37
 8006c36:	f7ff ffee 	bl	8006c16 <send_cmd>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d901      	bls.n	8006c48 <send_cmd+0x32>
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	e051      	b.n	8006cec <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2b0c      	cmp	r3, #12
 8006c4c:	d008      	beq.n	8006c60 <send_cmd+0x4a>
		despiselect();
 8006c4e:	f7ff ff5f 	bl	8006b10 <despiselect>
		if (!spiselect()) return 0xFF;
 8006c52:	f7ff ff6b 	bl	8006b2c <spiselect>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <send_cmd+0x4a>
 8006c5c:	23ff      	movs	r3, #255	; 0xff
 8006c5e:	e045      	b.n	8006cec <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff fee1 	bl	8006a30 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	0e1b      	lsrs	r3, r3, #24
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff fedb 	bl	8006a30 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	0c1b      	lsrs	r3, r3, #16
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff fed5 	bl	8006a30 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	0a1b      	lsrs	r3, r3, #8
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7ff fecf 	bl	8006a30 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff feca 	bl	8006a30 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <send_cmd+0x94>
 8006ca6:	2395      	movs	r3, #149	; 0x95
 8006ca8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d101      	bne.n	8006cb4 <send_cmd+0x9e>
 8006cb0:	2387      	movs	r3, #135	; 0x87
 8006cb2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff feba 	bl	8006a30 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	2b0c      	cmp	r3, #12
 8006cc0:	d102      	bne.n	8006cc8 <send_cmd+0xb2>
 8006cc2:	20ff      	movs	r0, #255	; 0xff
 8006cc4:	f7ff feb4 	bl	8006a30 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006cc8:	230a      	movs	r3, #10
 8006cca:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006ccc:	20ff      	movs	r0, #255	; 0xff
 8006cce:	f7ff feaf 	bl	8006a30 <xchg_spi>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	da05      	bge.n	8006cea <send_cmd+0xd4>
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f0      	bne.n	8006ccc <send_cmd+0xb6>

	return res;							/* Return received response */
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006cf4:	b590      	push	{r4, r7, lr}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <USER_SPI_initialize+0x14>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0d6      	b.n	8006eb6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006d08:	4b6d      	ldr	r3, [pc, #436]	; (8006ec0 <USER_SPI_initialize+0x1cc>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <USER_SPI_initialize+0x2a>
 8006d16:	4b6a      	ldr	r3, [pc, #424]	; (8006ec0 <USER_SPI_initialize+0x1cc>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	e0cb      	b.n	8006eb6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006d1e:	4b69      	ldr	r3, [pc, #420]	; (8006ec4 <USER_SPI_initialize+0x1d0>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006d28:	4b66      	ldr	r3, [pc, #408]	; (8006ec4 <USER_SPI_initialize+0x1d0>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006d30:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006d32:	230a      	movs	r3, #10
 8006d34:	73fb      	strb	r3, [r7, #15]
 8006d36:	e005      	b.n	8006d44 <USER_SPI_initialize+0x50>
 8006d38:	20ff      	movs	r0, #255	; 0xff
 8006d3a:	f7ff fe79 	bl	8006a30 <xchg_spi>
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1f6      	bne.n	8006d38 <USER_SPI_initialize+0x44>

	ty = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006d4e:	2100      	movs	r1, #0
 8006d50:	2000      	movs	r0, #0
 8006d52:	f7ff ff60 	bl	8006c16 <send_cmd>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	f040 808b 	bne.w	8006e74 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d62:	f7ff fe3b 	bl	80069dc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006d66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d6a:	2008      	movs	r0, #8
 8006d6c:	f7ff ff53 	bl	8006c16 <send_cmd>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d151      	bne.n	8006e1a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]
 8006d7a:	e00d      	b.n	8006d98 <USER_SPI_initialize+0xa4>
 8006d7c:	7bfc      	ldrb	r4, [r7, #15]
 8006d7e:	20ff      	movs	r0, #255	; 0xff
 8006d80:	f7ff fe56 	bl	8006a30 <xchg_spi>
 8006d84:	4603      	mov	r3, r0
 8006d86:	461a      	mov	r2, r3
 8006d88:	f104 0310 	add.w	r3, r4, #16
 8006d8c:	443b      	add	r3, r7
 8006d8e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	3301      	adds	r3, #1
 8006d96:	73fb      	strb	r3, [r7, #15]
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d9ee      	bls.n	8006d7c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006d9e:	7abb      	ldrb	r3, [r7, #10]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d167      	bne.n	8006e74 <USER_SPI_initialize+0x180>
 8006da4:	7afb      	ldrb	r3, [r7, #11]
 8006da6:	2baa      	cmp	r3, #170	; 0xaa
 8006da8:	d164      	bne.n	8006e74 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006daa:	bf00      	nop
 8006dac:	f7ff fe2a 	bl	8006a04 <SPI_Timer_Status>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d007      	beq.n	8006dc6 <USER_SPI_initialize+0xd2>
 8006db6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006dba:	20a9      	movs	r0, #169	; 0xa9
 8006dbc:	f7ff ff2b 	bl	8006c16 <send_cmd>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f2      	bne.n	8006dac <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006dc6:	f7ff fe1d 	bl	8006a04 <SPI_Timer_Status>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d051      	beq.n	8006e74 <USER_SPI_initialize+0x180>
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	203a      	movs	r0, #58	; 0x3a
 8006dd4:	f7ff ff1f 	bl	8006c16 <send_cmd>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d14a      	bne.n	8006e74 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
 8006de2:	e00d      	b.n	8006e00 <USER_SPI_initialize+0x10c>
 8006de4:	7bfc      	ldrb	r4, [r7, #15]
 8006de6:	20ff      	movs	r0, #255	; 0xff
 8006de8:	f7ff fe22 	bl	8006a30 <xchg_spi>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	f104 0310 	add.w	r3, r4, #16
 8006df4:	443b      	add	r3, r7
 8006df6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d9ee      	bls.n	8006de4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006e06:	7a3b      	ldrb	r3, [r7, #8]
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <USER_SPI_initialize+0x120>
 8006e10:	230c      	movs	r3, #12
 8006e12:	e000      	b.n	8006e16 <USER_SPI_initialize+0x122>
 8006e14:	2304      	movs	r3, #4
 8006e16:	737b      	strb	r3, [r7, #13]
 8006e18:	e02c      	b.n	8006e74 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	20a9      	movs	r0, #169	; 0xa9
 8006e1e:	f7ff fefa 	bl	8006c16 <send_cmd>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d804      	bhi.n	8006e32 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006e28:	2302      	movs	r3, #2
 8006e2a:	737b      	strb	r3, [r7, #13]
 8006e2c:	23a9      	movs	r3, #169	; 0xa9
 8006e2e:	73bb      	strb	r3, [r7, #14]
 8006e30:	e003      	b.n	8006e3a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006e32:	2301      	movs	r3, #1
 8006e34:	737b      	strb	r3, [r7, #13]
 8006e36:	2301      	movs	r3, #1
 8006e38:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006e3a:	bf00      	nop
 8006e3c:	f7ff fde2 	bl	8006a04 <SPI_Timer_Status>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <USER_SPI_initialize+0x162>
 8006e46:	7bbb      	ldrb	r3, [r7, #14]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fee3 	bl	8006c16 <send_cmd>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f2      	bne.n	8006e3c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006e56:	f7ff fdd5 	bl	8006a04 <SPI_Timer_Status>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d007      	beq.n	8006e70 <USER_SPI_initialize+0x17c>
 8006e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e64:	2010      	movs	r0, #16
 8006e66:	f7ff fed6 	bl	8006c16 <send_cmd>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <USER_SPI_initialize+0x180>
				ty = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006e74:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <USER_SPI_initialize+0x1d4>)
 8006e76:	7b7b      	ldrb	r3, [r7, #13]
 8006e78:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006e7a:	f7ff fe49 	bl	8006b10 <despiselect>

	if (ty) {			/* OK */
 8006e7e:	7b7b      	ldrb	r3, [r7, #13]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d012      	beq.n	8006eaa <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006e84:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <USER_SPI_initialize+0x1d0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ec4 <USER_SPI_initialize+0x1d0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0210 	orr.w	r2, r2, #16
 8006e96:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006e98:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <USER_SPI_initialize+0x1cc>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f023 0301 	bic.w	r3, r3, #1
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <USER_SPI_initialize+0x1cc>)
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	e002      	b.n	8006eb0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <USER_SPI_initialize+0x1cc>)
 8006eac:	2201      	movs	r2, #1
 8006eae:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006eb0:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <USER_SPI_initialize+0x1cc>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	b2db      	uxtb	r3, r3
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd90      	pop	{r4, r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	20000114 	.word	0x20000114
 8006ec4:	20000724 	.word	0x20000724
 8006ec8:	200135bc 	.word	0x200135bc

08006ecc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006ed6:	79fb      	ldrb	r3, [r7, #7]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <USER_SPI_status+0x14>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e002      	b.n	8006ee6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006ee0:	4b04      	ldr	r3, [pc, #16]	; (8006ef4 <USER_SPI_status+0x28>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	b2db      	uxtb	r3, r3
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	20000114 	.word	0x20000114

08006ef8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d102      	bne.n	8006f14 <USER_SPI_read+0x1c>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <USER_SPI_read+0x20>
 8006f14:	2304      	movs	r3, #4
 8006f16:	e04d      	b.n	8006fb4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006f18:	4b28      	ldr	r3, [pc, #160]	; (8006fbc <USER_SPI_read+0xc4>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <USER_SPI_read+0x32>
 8006f26:	2303      	movs	r3, #3
 8006f28:	e044      	b.n	8006fb4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006f2a:	4b25      	ldr	r3, [pc, #148]	; (8006fc0 <USER_SPI_read+0xc8>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <USER_SPI_read+0x44>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	025b      	lsls	r3, r3, #9
 8006f3a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d111      	bne.n	8006f66 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	2011      	movs	r0, #17
 8006f46:	f7ff fe66 	bl	8006c16 <send_cmd>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d129      	bne.n	8006fa4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f54:	68b8      	ldr	r0, [r7, #8]
 8006f56:	f7ff fe03 	bl	8006b60 <rcvr_datablock>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d021      	beq.n	8006fa4 <USER_SPI_read+0xac>
			count = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	e01e      	b.n	8006fa4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	2012      	movs	r0, #18
 8006f6a:	f7ff fe54 	bl	8006c16 <send_cmd>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d117      	bne.n	8006fa4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f78:	68b8      	ldr	r0, [r7, #8]
 8006f7a:	f7ff fdf1 	bl	8006b60 <rcvr_datablock>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <USER_SPI_read+0xa2>
				buff += 512;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006f8a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	603b      	str	r3, [r7, #0]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1ed      	bne.n	8006f74 <USER_SPI_read+0x7c>
 8006f98:	e000      	b.n	8006f9c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006f9a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	200c      	movs	r0, #12
 8006fa0:	f7ff fe39 	bl	8006c16 <send_cmd>
		}
	}
	despiselect();
 8006fa4:	f7ff fdb4 	bl	8006b10 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	bf14      	ite	ne
 8006fae:	2301      	movne	r3, #1
 8006fb0:	2300      	moveq	r3, #0
 8006fb2:	b2db      	uxtb	r3, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	20000114 	.word	0x20000114
 8006fc0:	200135bc 	.word	0x200135bc

08006fc4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <USER_SPI_write+0x1c>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <USER_SPI_write+0x20>
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	e063      	b.n	80070ac <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006fe4:	4b33      	ldr	r3, [pc, #204]	; (80070b4 <USER_SPI_write+0xf0>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <USER_SPI_write+0x32>
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e05a      	b.n	80070ac <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006ff6:	4b2f      	ldr	r3, [pc, #188]	; (80070b4 <USER_SPI_write+0xf0>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <USER_SPI_write+0x44>
 8007004:	2302      	movs	r3, #2
 8007006:	e051      	b.n	80070ac <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007008:	4b2b      	ldr	r3, [pc, #172]	; (80070b8 <USER_SPI_write+0xf4>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d102      	bne.n	800701a <USER_SPI_write+0x56>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	025b      	lsls	r3, r3, #9
 8007018:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d110      	bne.n	8007042 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007020:	6879      	ldr	r1, [r7, #4]
 8007022:	2018      	movs	r0, #24
 8007024:	f7ff fdf7 	bl	8006c16 <send_cmd>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d136      	bne.n	800709c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800702e:	21fe      	movs	r1, #254	; 0xfe
 8007030:	68b8      	ldr	r0, [r7, #8]
 8007032:	f7ff fdbe 	bl	8006bb2 <xmit_datablock>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d02f      	beq.n	800709c <USER_SPI_write+0xd8>
			count = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	e02c      	b.n	800709c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007042:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <USER_SPI_write+0xf4>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f003 0306 	and.w	r3, r3, #6
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <USER_SPI_write+0x92>
 800704e:	6839      	ldr	r1, [r7, #0]
 8007050:	2097      	movs	r0, #151	; 0x97
 8007052:	f7ff fde0 	bl	8006c16 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	2019      	movs	r0, #25
 800705a:	f7ff fddc 	bl	8006c16 <send_cmd>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d11b      	bne.n	800709c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007064:	21fc      	movs	r1, #252	; 0xfc
 8007066:	68b8      	ldr	r0, [r7, #8]
 8007068:	f7ff fda3 	bl	8006bb2 <xmit_datablock>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <USER_SPI_write+0xc4>
				buff += 512;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007078:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	3b01      	subs	r3, #1
 800707e:	603b      	str	r3, [r7, #0]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1ee      	bne.n	8007064 <USER_SPI_write+0xa0>
 8007086:	e000      	b.n	800708a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007088:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800708a:	21fd      	movs	r1, #253	; 0xfd
 800708c:	2000      	movs	r0, #0
 800708e:	f7ff fd90 	bl	8006bb2 <xmit_datablock>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <USER_SPI_write+0xd8>
 8007098:	2301      	movs	r3, #1
 800709a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800709c:	f7ff fd38 	bl	8006b10 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	bf14      	ite	ne
 80070a6:	2301      	movne	r3, #1
 80070a8:	2300      	moveq	r3, #0
 80070aa:	b2db      	uxtb	r3, r3
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000114 	.word	0x20000114
 80070b8:	200135bc 	.word	0x200135bc

080070bc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08c      	sub	sp, #48	; 0x30
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	603a      	str	r2, [r7, #0]
 80070c6:	71fb      	strb	r3, [r7, #7]
 80070c8:	460b      	mov	r3, r1
 80070ca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <USER_SPI_ioctl+0x1a>
 80070d2:	2304      	movs	r3, #4
 80070d4:	e15a      	b.n	800738c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80070d6:	4baf      	ldr	r3, [pc, #700]	; (8007394 <USER_SPI_ioctl+0x2d8>)
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <USER_SPI_ioctl+0x2c>
 80070e4:	2303      	movs	r3, #3
 80070e6:	e151      	b.n	800738c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80070ee:	79bb      	ldrb	r3, [r7, #6]
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	f200 8136 	bhi.w	8007362 <USER_SPI_ioctl+0x2a6>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <USER_SPI_ioctl+0x40>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	08007111 	.word	0x08007111
 8007100:	08007125 	.word	0x08007125
 8007104:	08007363 	.word	0x08007363
 8007108:	080071d1 	.word	0x080071d1
 800710c:	080072c7 	.word	0x080072c7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007110:	f7ff fd0c 	bl	8006b2c <spiselect>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 8127 	beq.w	800736a <USER_SPI_ioctl+0x2ae>
 800711c:	2300      	movs	r3, #0
 800711e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007122:	e122      	b.n	800736a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007124:	2100      	movs	r1, #0
 8007126:	2009      	movs	r0, #9
 8007128:	f7ff fd75 	bl	8006c16 <send_cmd>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	f040 811d 	bne.w	800736e <USER_SPI_ioctl+0x2b2>
 8007134:	f107 030c 	add.w	r3, r7, #12
 8007138:	2110      	movs	r1, #16
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff fd10 	bl	8006b60 <rcvr_datablock>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 8113 	beq.w	800736e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007148:	7b3b      	ldrb	r3, [r7, #12]
 800714a:	099b      	lsrs	r3, r3, #6
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b01      	cmp	r3, #1
 8007150:	d111      	bne.n	8007176 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007152:	7d7b      	ldrb	r3, [r7, #21]
 8007154:	461a      	mov	r2, r3
 8007156:	7d3b      	ldrb	r3, [r7, #20]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	4413      	add	r3, r2
 800715c:	461a      	mov	r2, r3
 800715e:	7cfb      	ldrb	r3, [r7, #19]
 8007160:	041b      	lsls	r3, r3, #16
 8007162:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007166:	4413      	add	r3, r2
 8007168:	3301      	adds	r3, #1
 800716a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	029a      	lsls	r2, r3, #10
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	e028      	b.n	80071c8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007176:	7c7b      	ldrb	r3, [r7, #17]
 8007178:	f003 030f 	and.w	r3, r3, #15
 800717c:	b2da      	uxtb	r2, r3
 800717e:	7dbb      	ldrb	r3, [r7, #22]
 8007180:	09db      	lsrs	r3, r3, #7
 8007182:	b2db      	uxtb	r3, r3
 8007184:	4413      	add	r3, r2
 8007186:	b2da      	uxtb	r2, r3
 8007188:	7d7b      	ldrb	r3, [r7, #21]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	b2db      	uxtb	r3, r3
 800718e:	f003 0306 	and.w	r3, r3, #6
 8007192:	b2db      	uxtb	r3, r3
 8007194:	4413      	add	r3, r2
 8007196:	b2db      	uxtb	r3, r3
 8007198:	3302      	adds	r3, #2
 800719a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800719e:	7d3b      	ldrb	r3, [r7, #20]
 80071a0:	099b      	lsrs	r3, r3, #6
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	461a      	mov	r2, r3
 80071a6:	7cfb      	ldrb	r3, [r7, #19]
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	441a      	add	r2, r3
 80071ac:	7cbb      	ldrb	r3, [r7, #18]
 80071ae:	029b      	lsls	r3, r3, #10
 80071b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071b4:	4413      	add	r3, r2
 80071b6:	3301      	adds	r3, #1
 80071b8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80071ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80071be:	3b09      	subs	r3, #9
 80071c0:	69fa      	ldr	r2, [r7, #28]
 80071c2:	409a      	lsls	r2, r3
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80071ce:	e0ce      	b.n	800736e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80071d0:	4b71      	ldr	r3, [pc, #452]	; (8007398 <USER_SPI_ioctl+0x2dc>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d031      	beq.n	8007240 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80071dc:	2100      	movs	r1, #0
 80071de:	208d      	movs	r0, #141	; 0x8d
 80071e0:	f7ff fd19 	bl	8006c16 <send_cmd>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f040 80c3 	bne.w	8007372 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80071ec:	20ff      	movs	r0, #255	; 0xff
 80071ee:	f7ff fc1f 	bl	8006a30 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80071f2:	f107 030c 	add.w	r3, r7, #12
 80071f6:	2110      	movs	r1, #16
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff fcb1 	bl	8006b60 <rcvr_datablock>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 80b6 	beq.w	8007372 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007206:	2330      	movs	r3, #48	; 0x30
 8007208:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800720c:	e007      	b.n	800721e <USER_SPI_ioctl+0x162>
 800720e:	20ff      	movs	r0, #255	; 0xff
 8007210:	f7ff fc0e 	bl	8006a30 <xchg_spi>
 8007214:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007218:	3b01      	subs	r3, #1
 800721a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800721e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f3      	bne.n	800720e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007226:	7dbb      	ldrb	r3, [r7, #22]
 8007228:	091b      	lsrs	r3, r3, #4
 800722a:	b2db      	uxtb	r3, r3
 800722c:	461a      	mov	r2, r3
 800722e:	2310      	movs	r3, #16
 8007230:	fa03 f202 	lsl.w	r2, r3, r2
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800723e:	e098      	b.n	8007372 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007240:	2100      	movs	r1, #0
 8007242:	2009      	movs	r0, #9
 8007244:	f7ff fce7 	bl	8006c16 <send_cmd>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	f040 8091 	bne.w	8007372 <USER_SPI_ioctl+0x2b6>
 8007250:	f107 030c 	add.w	r3, r7, #12
 8007254:	2110      	movs	r1, #16
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fc82 	bl	8006b60 <rcvr_datablock>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 8087 	beq.w	8007372 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007264:	4b4c      	ldr	r3, [pc, #304]	; (8007398 <USER_SPI_ioctl+0x2dc>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d012      	beq.n	8007296 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007270:	7dbb      	ldrb	r3, [r7, #22]
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007278:	7dfa      	ldrb	r2, [r7, #23]
 800727a:	09d2      	lsrs	r2, r2, #7
 800727c:	b2d2      	uxtb	r2, r2
 800727e:	4413      	add	r3, r2
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	7e7b      	ldrb	r3, [r7, #25]
 8007284:	099b      	lsrs	r3, r3, #6
 8007286:	b2db      	uxtb	r3, r3
 8007288:	3b01      	subs	r3, #1
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	461a      	mov	r2, r3
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e013      	b.n	80072be <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007296:	7dbb      	ldrb	r3, [r7, #22]
 8007298:	109b      	asrs	r3, r3, #2
 800729a:	b29b      	uxth	r3, r3
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	3301      	adds	r3, #1
 80072a2:	7dfa      	ldrb	r2, [r7, #23]
 80072a4:	00d2      	lsls	r2, r2, #3
 80072a6:	f002 0218 	and.w	r2, r2, #24
 80072aa:	7df9      	ldrb	r1, [r7, #23]
 80072ac:	0949      	lsrs	r1, r1, #5
 80072ae:	b2c9      	uxtb	r1, r1
 80072b0:	440a      	add	r2, r1
 80072b2:	3201      	adds	r2, #1
 80072b4:	fb02 f303 	mul.w	r3, r2, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80072c4:	e055      	b.n	8007372 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80072c6:	4b34      	ldr	r3, [pc, #208]	; (8007398 <USER_SPI_ioctl+0x2dc>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	f003 0306 	and.w	r3, r3, #6
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d051      	beq.n	8007376 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80072d2:	f107 020c 	add.w	r2, r7, #12
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	210b      	movs	r1, #11
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff feee 	bl	80070bc <USER_SPI_ioctl>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d149      	bne.n	800737a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80072e6:	7b3b      	ldrb	r3, [r7, #12]
 80072e8:	099b      	lsrs	r3, r3, #6
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d104      	bne.n	80072fa <USER_SPI_ioctl+0x23e>
 80072f0:	7dbb      	ldrb	r3, [r7, #22]
 80072f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d041      	beq.n	800737e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	623b      	str	r3, [r7, #32]
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	62bb      	str	r3, [r7, #40]	; 0x28
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800730a:	4b23      	ldr	r3, [pc, #140]	; (8007398 <USER_SPI_ioctl+0x2dc>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d105      	bne.n	8007322 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	025b      	lsls	r3, r3, #9
 800731a:	62bb      	str	r3, [r7, #40]	; 0x28
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	025b      	lsls	r3, r3, #9
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007322:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007324:	2020      	movs	r0, #32
 8007326:	f7ff fc76 	bl	8006c16 <send_cmd>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d128      	bne.n	8007382 <USER_SPI_ioctl+0x2c6>
 8007330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007332:	2021      	movs	r0, #33	; 0x21
 8007334:	f7ff fc6f 	bl	8006c16 <send_cmd>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d121      	bne.n	8007382 <USER_SPI_ioctl+0x2c6>
 800733e:	2100      	movs	r1, #0
 8007340:	2026      	movs	r0, #38	; 0x26
 8007342:	f7ff fc68 	bl	8006c16 <send_cmd>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d11a      	bne.n	8007382 <USER_SPI_ioctl+0x2c6>
 800734c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007350:	f7ff fbbb 	bl	8006aca <wait_ready>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d013      	beq.n	8007382 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800735a:	2300      	movs	r3, #0
 800735c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8007360:	e00f      	b.n	8007382 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007362:	2304      	movs	r3, #4
 8007364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007368:	e00c      	b.n	8007384 <USER_SPI_ioctl+0x2c8>
		break;
 800736a:	bf00      	nop
 800736c:	e00a      	b.n	8007384 <USER_SPI_ioctl+0x2c8>
		break;
 800736e:	bf00      	nop
 8007370:	e008      	b.n	8007384 <USER_SPI_ioctl+0x2c8>
		break;
 8007372:	bf00      	nop
 8007374:	e006      	b.n	8007384 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007376:	bf00      	nop
 8007378:	e004      	b.n	8007384 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800737a:	bf00      	nop
 800737c:	e002      	b.n	8007384 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800737e:	bf00      	nop
 8007380:	e000      	b.n	8007384 <USER_SPI_ioctl+0x2c8>
		break;
 8007382:	bf00      	nop
	}

	despiselect();
 8007384:	f7ff fbc4 	bl	8006b10 <despiselect>

	return res;
 8007388:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800738c:	4618      	mov	r0, r3
 800738e:	3730      	adds	r7, #48	; 0x30
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20000114 	.word	0x20000114
 8007398:	200135bc 	.word	0x200135bc

0800739c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	4a08      	ldr	r2, [pc, #32]	; (80073cc <disk_status+0x30>)
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	79fa      	ldrb	r2, [r7, #7]
 80073b4:	4905      	ldr	r1, [pc, #20]	; (80073cc <disk_status+0x30>)
 80073b6:	440a      	add	r2, r1
 80073b8:	7a12      	ldrb	r2, [r2, #8]
 80073ba:	4610      	mov	r0, r2
 80073bc:	4798      	blx	r3
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	200135f0 	.word	0x200135f0

080073d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	4a0d      	ldr	r2, [pc, #52]	; (8007418 <disk_initialize+0x48>)
 80073e2:	5cd3      	ldrb	r3, [r2, r3]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d111      	bne.n	800740c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80073e8:	79fb      	ldrb	r3, [r7, #7]
 80073ea:	4a0b      	ldr	r2, [pc, #44]	; (8007418 <disk_initialize+0x48>)
 80073ec:	2101      	movs	r1, #1
 80073ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	4a09      	ldr	r2, [pc, #36]	; (8007418 <disk_initialize+0x48>)
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	79fa      	ldrb	r2, [r7, #7]
 80073fe:	4906      	ldr	r1, [pc, #24]	; (8007418 <disk_initialize+0x48>)
 8007400:	440a      	add	r2, r1
 8007402:	7a12      	ldrb	r2, [r2, #8]
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	200135f0 	.word	0x200135f0

0800741c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800741c:	b590      	push	{r4, r7, lr}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	4a0a      	ldr	r2, [pc, #40]	; (8007458 <disk_read+0x3c>)
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	689c      	ldr	r4, [r3, #8]
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	4a07      	ldr	r2, [pc, #28]	; (8007458 <disk_read+0x3c>)
 800743c:	4413      	add	r3, r2
 800743e:	7a18      	ldrb	r0, [r3, #8]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	68b9      	ldr	r1, [r7, #8]
 8007446:	47a0      	blx	r4
 8007448:	4603      	mov	r3, r0
 800744a:	75fb      	strb	r3, [r7, #23]
  return res;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
}
 800744e:	4618      	mov	r0, r3
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	bd90      	pop	{r4, r7, pc}
 8007456:	bf00      	nop
 8007458:	200135f0 	.word	0x200135f0

0800745c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800745c:	b590      	push	{r4, r7, lr}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	4a0a      	ldr	r2, [pc, #40]	; (8007498 <disk_write+0x3c>)
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	68dc      	ldr	r4, [r3, #12]
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	4a07      	ldr	r2, [pc, #28]	; (8007498 <disk_write+0x3c>)
 800747c:	4413      	add	r3, r2
 800747e:	7a18      	ldrb	r0, [r3, #8]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	68b9      	ldr	r1, [r7, #8]
 8007486:	47a0      	blx	r4
 8007488:	4603      	mov	r3, r0
 800748a:	75fb      	strb	r3, [r7, #23]
  return res;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
}
 800748e:	4618      	mov	r0, r3
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	bd90      	pop	{r4, r7, pc}
 8007496:	bf00      	nop
 8007498:	200135f0 	.word	0x200135f0

0800749c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	603a      	str	r2, [r7, #0]
 80074a6:	71fb      	strb	r3, [r7, #7]
 80074a8:	460b      	mov	r3, r1
 80074aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80074ac:	79fb      	ldrb	r3, [r7, #7]
 80074ae:	4a09      	ldr	r2, [pc, #36]	; (80074d4 <disk_ioctl+0x38>)
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	79fa      	ldrb	r2, [r7, #7]
 80074ba:	4906      	ldr	r1, [pc, #24]	; (80074d4 <disk_ioctl+0x38>)
 80074bc:	440a      	add	r2, r1
 80074be:	7a10      	ldrb	r0, [r2, #8]
 80074c0:	79b9      	ldrb	r1, [r7, #6]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	4798      	blx	r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	73fb      	strb	r3, [r7, #15]
  return res;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	200135f0 	.word	0x200135f0

080074d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3301      	adds	r3, #1
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80074e8:	89fb      	ldrh	r3, [r7, #14]
 80074ea:	021b      	lsls	r3, r3, #8
 80074ec:	b21a      	sxth	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	b21b      	sxth	r3, r3
 80074f4:	4313      	orrs	r3, r2
 80074f6:	b21b      	sxth	r3, r3
 80074f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80074fa:	89fb      	ldrh	r3, [r7, #14]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3303      	adds	r3, #3
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	021b      	lsls	r3, r3, #8
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	3202      	adds	r2, #2
 8007520:	7812      	ldrb	r2, [r2, #0]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	021b      	lsls	r3, r3, #8
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	3201      	adds	r2, #1
 800752e:	7812      	ldrb	r2, [r2, #0]
 8007530:	4313      	orrs	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	021b      	lsls	r3, r3, #8
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	7812      	ldrb	r2, [r2, #0]
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007540:	68fb      	ldr	r3, [r7, #12]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	887a      	ldrh	r2, [r7, #2]
 8007562:	b2d2      	uxtb	r2, r2
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	887b      	ldrh	r3, [r7, #2]
 8007568:	0a1b      	lsrs	r3, r3, #8
 800756a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	887a      	ldrh	r2, [r7, #2]
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	701a      	strb	r2, [r3, #0]
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	701a      	strb	r2, [r3, #0]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	0a1b      	lsrs	r3, r3, #8
 800759e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	607a      	str	r2, [r7, #4]
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	701a      	strb	r2, [r3, #0]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	0a1b      	lsrs	r3, r3, #8
 80075b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	0a1b      	lsrs	r3, r3, #8
 80075c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00d      	beq.n	8007612 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	1c53      	adds	r3, r2, #1
 80075fa:	613b      	str	r3, [r7, #16]
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	1c59      	adds	r1, r3, #1
 8007600:	6179      	str	r1, [r7, #20]
 8007602:	7812      	ldrb	r2, [r2, #0]
 8007604:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3b01      	subs	r3, #1
 800760a:	607b      	str	r3, [r7, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f1      	bne.n	80075f6 <mem_cpy+0x1a>
	}
}
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800761e:	b480      	push	{r7}
 8007620:	b087      	sub	sp, #28
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	60b9      	str	r1, [r7, #8]
 8007628:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	1c5a      	adds	r2, r3, #1
 8007632:	617a      	str	r2, [r7, #20]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	3b01      	subs	r3, #1
 800763e:	607b      	str	r3, [r7, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f3      	bne.n	800762e <mem_set+0x10>
}
 8007646:	bf00      	nop
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007654:	b480      	push	{r7}
 8007656:	b089      	sub	sp, #36	; 0x24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	61fb      	str	r3, [r7, #28]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007668:	2300      	movs	r3, #0
 800766a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	61fa      	str	r2, [r7, #28]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	4619      	mov	r1, r3
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	61ba      	str	r2, [r7, #24]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	1acb      	subs	r3, r1, r3
 8007680:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3b01      	subs	r3, #1
 8007686:	607b      	str	r3, [r7, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <mem_cmp+0x40>
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0eb      	beq.n	800766c <mem_cmp+0x18>

	return r;
 8007694:	697b      	ldr	r3, [r7, #20]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3724      	adds	r7, #36	; 0x24
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80076ac:	e002      	b.n	80076b4 <chk_chr+0x12>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3301      	adds	r3, #1
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <chk_chr+0x26>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	461a      	mov	r2, r3
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d1f2      	bne.n	80076ae <chk_chr+0xc>
	return *str;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	781b      	ldrb	r3, [r3, #0]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076e2:	2300      	movs	r3, #0
 80076e4:	60bb      	str	r3, [r7, #8]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	e029      	b.n	8007740 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80076ec:	4a27      	ldr	r2, [pc, #156]	; (800778c <chk_lock+0xb4>)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	4413      	add	r3, r2
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01d      	beq.n	8007736 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076fa:	4a24      	ldr	r2, [pc, #144]	; (800778c <chk_lock+0xb4>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	4413      	add	r3, r2
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d116      	bne.n	800773a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800770c:	4a1f      	ldr	r2, [pc, #124]	; (800778c <chk_lock+0xb4>)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	4413      	add	r3, r2
 8007714:	3304      	adds	r3, #4
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800771c:	429a      	cmp	r2, r3
 800771e:	d10c      	bne.n	800773a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007720:	4a1a      	ldr	r2, [pc, #104]	; (800778c <chk_lock+0xb4>)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	4413      	add	r3, r2
 8007728:	3308      	adds	r3, #8
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007730:	429a      	cmp	r2, r3
 8007732:	d102      	bne.n	800773a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007734:	e007      	b.n	8007746 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007736:	2301      	movs	r3, #1
 8007738:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d9d2      	bls.n	80076ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d109      	bne.n	8007760 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <chk_lock+0x80>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b02      	cmp	r3, #2
 8007756:	d101      	bne.n	800775c <chk_lock+0x84>
 8007758:	2300      	movs	r3, #0
 800775a:	e010      	b.n	800777e <chk_lock+0xa6>
 800775c:	2312      	movs	r3, #18
 800775e:	e00e      	b.n	800777e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d108      	bne.n	8007778 <chk_lock+0xa0>
 8007766:	4a09      	ldr	r2, [pc, #36]	; (800778c <chk_lock+0xb4>)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	4413      	add	r3, r2
 800776e:	330c      	adds	r3, #12
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007776:	d101      	bne.n	800777c <chk_lock+0xa4>
 8007778:	2310      	movs	r3, #16
 800777a:	e000      	b.n	800777e <chk_lock+0xa6>
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	200135d0 	.word	0x200135d0

08007790 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007796:	2300      	movs	r3, #0
 8007798:	607b      	str	r3, [r7, #4]
 800779a:	e002      	b.n	80077a2 <enq_lock+0x12>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3301      	adds	r3, #1
 80077a0:	607b      	str	r3, [r7, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d806      	bhi.n	80077b6 <enq_lock+0x26>
 80077a8:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <enq_lock+0x40>)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	011b      	lsls	r3, r3, #4
 80077ae:	4413      	add	r3, r2
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1f2      	bne.n	800779c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	bf14      	ite	ne
 80077bc:	2301      	movne	r3, #1
 80077be:	2300      	moveq	r3, #0
 80077c0:	b2db      	uxtb	r3, r3
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	200135d0 	.word	0x200135d0

080077d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	e01f      	b.n	8007824 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80077e4:	4a41      	ldr	r2, [pc, #260]	; (80078ec <inc_lock+0x118>)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	4413      	add	r3, r2
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d113      	bne.n	800781e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80077f6:	4a3d      	ldr	r2, [pc, #244]	; (80078ec <inc_lock+0x118>)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	011b      	lsls	r3, r3, #4
 80077fc:	4413      	add	r3, r2
 80077fe:	3304      	adds	r3, #4
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007806:	429a      	cmp	r2, r3
 8007808:	d109      	bne.n	800781e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800780a:	4a38      	ldr	r2, [pc, #224]	; (80078ec <inc_lock+0x118>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	4413      	add	r3, r2
 8007812:	3308      	adds	r3, #8
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800781a:	429a      	cmp	r2, r3
 800781c:	d006      	beq.n	800782c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3301      	adds	r3, #1
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d9dc      	bls.n	80077e4 <inc_lock+0x10>
 800782a:	e000      	b.n	800782e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800782c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d132      	bne.n	800789a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007834:	2300      	movs	r3, #0
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	e002      	b.n	8007840 <inc_lock+0x6c>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d806      	bhi.n	8007854 <inc_lock+0x80>
 8007846:	4a29      	ldr	r2, [pc, #164]	; (80078ec <inc_lock+0x118>)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	4413      	add	r3, r2
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1f2      	bne.n	800783a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d101      	bne.n	800785e <inc_lock+0x8a>
 800785a:	2300      	movs	r3, #0
 800785c:	e040      	b.n	80078e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	4922      	ldr	r1, [pc, #136]	; (80078ec <inc_lock+0x118>)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	440b      	add	r3, r1
 800786a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	491e      	ldr	r1, [pc, #120]	; (80078ec <inc_lock+0x118>)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	440b      	add	r3, r1
 8007878:	3304      	adds	r3, #4
 800787a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695a      	ldr	r2, [r3, #20]
 8007880:	491a      	ldr	r1, [pc, #104]	; (80078ec <inc_lock+0x118>)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	011b      	lsls	r3, r3, #4
 8007886:	440b      	add	r3, r1
 8007888:	3308      	adds	r3, #8
 800788a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800788c:	4a17      	ldr	r2, [pc, #92]	; (80078ec <inc_lock+0x118>)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	4413      	add	r3, r2
 8007894:	330c      	adds	r3, #12
 8007896:	2200      	movs	r2, #0
 8007898:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d009      	beq.n	80078b4 <inc_lock+0xe0>
 80078a0:	4a12      	ldr	r2, [pc, #72]	; (80078ec <inc_lock+0x118>)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	4413      	add	r3, r2
 80078a8:	330c      	adds	r3, #12
 80078aa:	881b      	ldrh	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d001      	beq.n	80078b4 <inc_lock+0xe0>
 80078b0:	2300      	movs	r3, #0
 80078b2:	e015      	b.n	80078e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d108      	bne.n	80078cc <inc_lock+0xf8>
 80078ba:	4a0c      	ldr	r2, [pc, #48]	; (80078ec <inc_lock+0x118>)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	011b      	lsls	r3, r3, #4
 80078c0:	4413      	add	r3, r2
 80078c2:	330c      	adds	r3, #12
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	3301      	adds	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	e001      	b.n	80078d0 <inc_lock+0xfc>
 80078cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078d0:	4906      	ldr	r1, [pc, #24]	; (80078ec <inc_lock+0x118>)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	440b      	add	r3, r1
 80078d8:	330c      	adds	r3, #12
 80078da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3301      	adds	r3, #1
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	200135d0 	.word	0x200135d0

080078f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	607b      	str	r3, [r7, #4]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d825      	bhi.n	8007950 <dec_lock+0x60>
		n = Files[i].ctr;
 8007904:	4a17      	ldr	r2, [pc, #92]	; (8007964 <dec_lock+0x74>)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	4413      	add	r3, r2
 800790c:	330c      	adds	r3, #12
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007912:	89fb      	ldrh	r3, [r7, #14]
 8007914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007918:	d101      	bne.n	800791e <dec_lock+0x2e>
 800791a:	2300      	movs	r3, #0
 800791c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800791e:	89fb      	ldrh	r3, [r7, #14]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <dec_lock+0x3a>
 8007924:	89fb      	ldrh	r3, [r7, #14]
 8007926:	3b01      	subs	r3, #1
 8007928:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800792a:	4a0e      	ldr	r2, [pc, #56]	; (8007964 <dec_lock+0x74>)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	4413      	add	r3, r2
 8007932:	330c      	adds	r3, #12
 8007934:	89fa      	ldrh	r2, [r7, #14]
 8007936:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007938:	89fb      	ldrh	r3, [r7, #14]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d105      	bne.n	800794a <dec_lock+0x5a>
 800793e:	4a09      	ldr	r2, [pc, #36]	; (8007964 <dec_lock+0x74>)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	011b      	lsls	r3, r3, #4
 8007944:	4413      	add	r3, r2
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	737b      	strb	r3, [r7, #13]
 800794e:	e001      	b.n	8007954 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007950:	2302      	movs	r3, #2
 8007952:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007954:	7b7b      	ldrb	r3, [r7, #13]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	200135d0 	.word	0x200135d0

08007968 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e010      	b.n	8007998 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007976:	4a0d      	ldr	r2, [pc, #52]	; (80079ac <clear_lock+0x44>)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	011b      	lsls	r3, r3, #4
 800797c:	4413      	add	r3, r2
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	429a      	cmp	r2, r3
 8007984:	d105      	bne.n	8007992 <clear_lock+0x2a>
 8007986:	4a09      	ldr	r2, [pc, #36]	; (80079ac <clear_lock+0x44>)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	4413      	add	r3, r2
 800798e:	2200      	movs	r2, #0
 8007990:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3301      	adds	r3, #1
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d9eb      	bls.n	8007976 <clear_lock+0xe>
	}
}
 800799e:	bf00      	nop
 80079a0:	bf00      	nop
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	200135d0 	.word	0x200135d0

080079b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	78db      	ldrb	r3, [r3, #3]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d034      	beq.n	8007a2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7858      	ldrb	r0, [r3, #1]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079d4:	2301      	movs	r3, #1
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	f7ff fd40 	bl	800745c <disk_write>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	73fb      	strb	r3, [r7, #15]
 80079e6:	e022      	b.n	8007a2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	1ad2      	subs	r2, r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d217      	bcs.n	8007a2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	789b      	ldrb	r3, [r3, #2]
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	e010      	b.n	8007a28 <sync_window+0x78>
					wsect += fs->fsize;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7858      	ldrb	r0, [r3, #1]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	f7ff fd1d 	bl	800745c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	613b      	str	r3, [r7, #16]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d8eb      	bhi.n	8007a06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d01b      	beq.n	8007a88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff ffad 	bl	80079b0 <sync_window>
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d113      	bne.n	8007a88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7858      	ldrb	r0, [r3, #1]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	f7ff fcd5 	bl	800741c <disk_read>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d004      	beq.n	8007a82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
	...

08007a94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff ff87 	bl	80079b0 <sync_window>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d158      	bne.n	8007b5e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d148      	bne.n	8007b46 <sync_fs+0xb2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	791b      	ldrb	r3, [r3, #4]
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d144      	bne.n	8007b46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3330      	adds	r3, #48	; 0x30
 8007ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff fda9 	bl	800761e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	3330      	adds	r3, #48	; 0x30
 8007ad0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ad4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7ff fd38 	bl	800754e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	3330      	adds	r3, #48	; 0x30
 8007ae2:	4921      	ldr	r1, [pc, #132]	; (8007b68 <sync_fs+0xd4>)
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fd4d 	bl	8007584 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3330      	adds	r3, #48	; 0x30
 8007aee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007af2:	491e      	ldr	r1, [pc, #120]	; (8007b6c <sync_fs+0xd8>)
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fd45 	bl	8007584 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3330      	adds	r3, #48	; 0x30
 8007afe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	4619      	mov	r1, r3
 8007b08:	4610      	mov	r0, r2
 8007b0a:	f7ff fd3b 	bl	8007584 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	3330      	adds	r3, #48	; 0x30
 8007b12:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f7ff fd31 	bl	8007584 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7858      	ldrb	r0, [r3, #1]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	f7ff fc8e 	bl	800745c <disk_write>
			fs->fsi_flag = 0;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	785b      	ldrb	r3, [r3, #1]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7ff fca4 	bl	800749c <disk_ioctl>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <sync_fs+0xca>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	41615252 	.word	0x41615252
 8007b6c:	61417272 	.word	0x61417272

08007b70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	3b02      	subs	r3, #2
 8007b7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	3b02      	subs	r3, #2
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d301      	bcc.n	8007b90 <clust2sect+0x20>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	e008      	b.n	8007ba2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	895b      	ldrh	r3, [r3, #10]
 8007b94:	461a      	mov	r2, r3
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	fb03 f202 	mul.w	r2, r3, r2
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba0:	4413      	add	r3, r2
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b086      	sub	sp, #24
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d904      	bls.n	8007bce <get_fat+0x20>
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d302      	bcc.n	8007bd4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007bce:	2301      	movs	r3, #1
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	e08f      	b.n	8007cf4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bd8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d062      	beq.n	8007ca8 <get_fat+0xfa>
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	dc7c      	bgt.n	8007ce0 <get_fat+0x132>
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d002      	beq.n	8007bf0 <get_fat+0x42>
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d042      	beq.n	8007c74 <get_fat+0xc6>
 8007bee:	e077      	b.n	8007ce0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	085b      	lsrs	r3, r3, #1
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	6a1a      	ldr	r2, [r3, #32]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	0a5b      	lsrs	r3, r3, #9
 8007c06:	4413      	add	r3, r2
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6938      	ldr	r0, [r7, #16]
 8007c0c:	f7ff ff14 	bl	8007a38 <move_window>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d167      	bne.n	8007ce6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	60fa      	str	r2, [r7, #12]
 8007c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4413      	add	r3, r2
 8007c24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c28:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	6a1a      	ldr	r2, [r3, #32]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	0a5b      	lsrs	r3, r3, #9
 8007c32:	4413      	add	r3, r2
 8007c34:	4619      	mov	r1, r3
 8007c36:	6938      	ldr	r0, [r7, #16]
 8007c38:	f7ff fefe 	bl	8007a38 <move_window>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d153      	bne.n	8007cea <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	461a      	mov	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <get_fat+0xbc>
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	091b      	lsrs	r3, r3, #4
 8007c68:	e002      	b.n	8007c70 <get_fat+0xc2>
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c70:	617b      	str	r3, [r7, #20]
			break;
 8007c72:	e03f      	b.n	8007cf4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6a1a      	ldr	r2, [r3, #32]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	0a1b      	lsrs	r3, r3, #8
 8007c7c:	4413      	add	r3, r2
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6938      	ldr	r0, [r7, #16]
 8007c82:	f7ff fed9 	bl	8007a38 <move_window>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d130      	bne.n	8007cee <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007c9a:	4413      	add	r3, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fc1b 	bl	80074d8 <ld_word>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	617b      	str	r3, [r7, #20]
			break;
 8007ca6:	e025      	b.n	8007cf4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	6a1a      	ldr	r2, [r3, #32]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	09db      	lsrs	r3, r3, #7
 8007cb0:	4413      	add	r3, r2
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6938      	ldr	r0, [r7, #16]
 8007cb6:	f7ff febf 	bl	8007a38 <move_window>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d118      	bne.n	8007cf2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007cce:	4413      	add	r3, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff fc19 	bl	8007508 <ld_dword>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007cdc:	617b      	str	r3, [r7, #20]
			break;
 8007cde:	e009      	b.n	8007cf4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	e006      	b.n	8007cf4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ce6:	bf00      	nop
 8007ce8:	e004      	b.n	8007cf4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cea:	bf00      	nop
 8007cec:	e002      	b.n	8007cf4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007cee:	bf00      	nop
 8007cf0:	e000      	b.n	8007cf4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cf2:	bf00      	nop
		}
	}

	return val;
 8007cf4:	697b      	ldr	r3, [r7, #20]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007cfe:	b590      	push	{r4, r7, lr}
 8007d00:	b089      	sub	sp, #36	; 0x24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	f240 80d2 	bls.w	8007eba <put_fat+0x1bc>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	f080 80cc 	bcs.w	8007eba <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	f000 8096 	beq.w	8007e58 <put_fat+0x15a>
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	f300 80cd 	bgt.w	8007ecc <put_fat+0x1ce>
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d002      	beq.n	8007d3c <put_fat+0x3e>
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d06e      	beq.n	8007e18 <put_fat+0x11a>
 8007d3a:	e0c7      	b.n	8007ecc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	61bb      	str	r3, [r7, #24]
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	085b      	lsrs	r3, r3, #1
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	4413      	add	r3, r2
 8007d48:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6a1a      	ldr	r2, [r3, #32]
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	0a5b      	lsrs	r3, r3, #9
 8007d52:	4413      	add	r3, r2
 8007d54:	4619      	mov	r1, r3
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f7ff fe6e 	bl	8007a38 <move_window>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d60:	7ffb      	ldrb	r3, [r7, #31]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f040 80ab 	bne.w	8007ebe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	1c59      	adds	r1, r3, #1
 8007d72:	61b9      	str	r1, [r7, #24]
 8007d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d78:	4413      	add	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00d      	beq.n	8007da2 <put_fat+0xa4>
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	b25b      	sxtb	r3, r3
 8007d8c:	f003 030f 	and.w	r3, r3, #15
 8007d90:	b25a      	sxtb	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	b25b      	sxtb	r3, r3
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	b25b      	sxtb	r3, r3
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	e001      	b.n	8007da6 <put_fat+0xa8>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2201      	movs	r2, #1
 8007dae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a1a      	ldr	r2, [r3, #32]
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	0a5b      	lsrs	r3, r3, #9
 8007db8:	4413      	add	r3, r2
 8007dba:	4619      	mov	r1, r3
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7ff fe3b 	bl	8007a38 <move_window>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007dc6:	7ffb      	ldrb	r3, [r7, #31]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d17a      	bne.n	8007ec2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd8:	4413      	add	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <put_fat+0xf0>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	091b      	lsrs	r3, r3, #4
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	e00e      	b.n	8007e0c <put_fat+0x10e>
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b25b      	sxtb	r3, r3
 8007df4:	f023 030f 	bic.w	r3, r3, #15
 8007df8:	b25a      	sxtb	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	0a1b      	lsrs	r3, r3, #8
 8007dfe:	b25b      	sxtb	r3, r3
 8007e00:	f003 030f 	and.w	r3, r3, #15
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	4313      	orrs	r3, r2
 8007e08:	b25b      	sxtb	r3, r3
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2201      	movs	r2, #1
 8007e14:	70da      	strb	r2, [r3, #3]
			break;
 8007e16:	e059      	b.n	8007ecc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a1a      	ldr	r2, [r3, #32]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	0a1b      	lsrs	r3, r3, #8
 8007e20:	4413      	add	r3, r2
 8007e22:	4619      	mov	r1, r3
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff fe07 	bl	8007a38 <move_window>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e2e:	7ffb      	ldrb	r3, [r7, #31]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d148      	bne.n	8007ec6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007e42:	4413      	add	r3, r2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	b292      	uxth	r2, r2
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7ff fb7f 	bl	800754e <st_word>
			fs->wflag = 1;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	70da      	strb	r2, [r3, #3]
			break;
 8007e56:	e039      	b.n	8007ecc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a1a      	ldr	r2, [r3, #32]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	09db      	lsrs	r3, r3, #7
 8007e60:	4413      	add	r3, r2
 8007e62:	4619      	mov	r1, r3
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7ff fde7 	bl	8007a38 <move_window>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e6e:	7ffb      	ldrb	r3, [r7, #31]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d12a      	bne.n	8007eca <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007e88:	4413      	add	r3, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff fb3c 	bl	8007508 <ld_dword>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e96:	4323      	orrs	r3, r4
 8007e98:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007ea8:	4413      	add	r3, r2
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff fb69 	bl	8007584 <st_dword>
			fs->wflag = 1;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	70da      	strb	r2, [r3, #3]
			break;
 8007eb8:	e008      	b.n	8007ecc <put_fat+0x1ce>
		}
	}
 8007eba:	bf00      	nop
 8007ebc:	e006      	b.n	8007ecc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ebe:	bf00      	nop
 8007ec0:	e004      	b.n	8007ecc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ec2:	bf00      	nop
 8007ec4:	e002      	b.n	8007ecc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007ec6:	bf00      	nop
 8007ec8:	e000      	b.n	8007ecc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007eca:	bf00      	nop
	return res;
 8007ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3724      	adds	r7, #36	; 0x24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd90      	pop	{r4, r7, pc}

08007ed6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b088      	sub	sp, #32
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d904      	bls.n	8007efc <remove_chain+0x26>
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d301      	bcc.n	8007f00 <remove_chain+0x2a>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e04b      	b.n	8007f98 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00c      	beq.n	8007f20 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	69b8      	ldr	r0, [r7, #24]
 8007f0e:	f7ff fef6 	bl	8007cfe <put_fat>
 8007f12:	4603      	mov	r3, r0
 8007f14:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007f16:	7ffb      	ldrb	r3, [r7, #31]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <remove_chain+0x4a>
 8007f1c:	7ffb      	ldrb	r3, [r7, #31]
 8007f1e:	e03b      	b.n	8007f98 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff fe43 	bl	8007bae <get_fat>
 8007f28:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d031      	beq.n	8007f94 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <remove_chain+0x64>
 8007f36:	2302      	movs	r3, #2
 8007f38:	e02e      	b.n	8007f98 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f40:	d101      	bne.n	8007f46 <remove_chain+0x70>
 8007f42:	2301      	movs	r3, #1
 8007f44:	e028      	b.n	8007f98 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f46:	2200      	movs	r2, #0
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	69b8      	ldr	r0, [r7, #24]
 8007f4c:	f7ff fed7 	bl	8007cfe <put_fat>
 8007f50:	4603      	mov	r3, r0
 8007f52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f54:	7ffb      	ldrb	r3, [r7, #31]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <remove_chain+0x88>
 8007f5a:	7ffb      	ldrb	r3, [r7, #31]
 8007f5c:	e01c      	b.n	8007f98 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	3b02      	subs	r3, #2
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d20b      	bcs.n	8007f84 <remove_chain+0xae>
			fs->free_clst++;
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	1c5a      	adds	r2, r3, #1
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	791b      	ldrb	r3, [r3, #4]
 8007f7a:	f043 0301 	orr.w	r3, r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d3c6      	bcc.n	8007f20 <remove_chain+0x4a>
 8007f92:	e000      	b.n	8007f96 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007f94:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3720      	adds	r7, #32
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10d      	bne.n	8007fd2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <create_chain+0x2c>
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d31b      	bcc.n	8008004 <create_chain+0x64>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	61bb      	str	r3, [r7, #24]
 8007fd0:	e018      	b.n	8008004 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007fd2:	6839      	ldr	r1, [r7, #0]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff fdea 	bl	8007bae <get_fat>
 8007fda:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d801      	bhi.n	8007fe6 <create_chain+0x46>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e070      	b.n	80080c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fec:	d101      	bne.n	8007ff2 <create_chain+0x52>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	e06a      	b.n	80080c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d201      	bcs.n	8008000 <create_chain+0x60>
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	e063      	b.n	80080c8 <create_chain+0x128>
		scl = clst;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	3301      	adds	r3, #1
 800800c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	429a      	cmp	r2, r3
 8008016:	d307      	bcc.n	8008028 <create_chain+0x88>
				ncl = 2;
 8008018:	2302      	movs	r3, #2
 800801a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800801c:	69fa      	ldr	r2, [r7, #28]
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	429a      	cmp	r2, r3
 8008022:	d901      	bls.n	8008028 <create_chain+0x88>
 8008024:	2300      	movs	r3, #0
 8008026:	e04f      	b.n	80080c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008028:	69f9      	ldr	r1, [r7, #28]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff fdbf 	bl	8007bae <get_fat>
 8008030:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00e      	beq.n	8008056 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d003      	beq.n	8008046 <create_chain+0xa6>
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008044:	d101      	bne.n	800804a <create_chain+0xaa>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	e03e      	b.n	80080c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	429a      	cmp	r2, r3
 8008050:	d1da      	bne.n	8008008 <create_chain+0x68>
 8008052:	2300      	movs	r3, #0
 8008054:	e038      	b.n	80080c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008056:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800805c:	69f9      	ldr	r1, [r7, #28]
 800805e:	6938      	ldr	r0, [r7, #16]
 8008060:	f7ff fe4d 	bl	8007cfe <put_fat>
 8008064:	4603      	mov	r3, r0
 8008066:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <create_chain+0xe2>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d006      	beq.n	8008082 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008074:	69fa      	ldr	r2, [r7, #28]
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6938      	ldr	r0, [r7, #16]
 800807a:	f7ff fe40 	bl	8007cfe <put_fat>
 800807e:	4603      	mov	r3, r0
 8008080:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d116      	bne.n	80080b6 <create_chain+0x116>
		fs->last_clst = ncl;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	691a      	ldr	r2, [r3, #16]
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	3b02      	subs	r3, #2
 8008098:	429a      	cmp	r2, r3
 800809a:	d804      	bhi.n	80080a6 <create_chain+0x106>
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	1e5a      	subs	r2, r3, #1
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	791b      	ldrb	r3, [r3, #4]
 80080aa:	f043 0301 	orr.w	r3, r3, #1
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	711a      	strb	r2, [r3, #4]
 80080b4:	e007      	b.n	80080c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d102      	bne.n	80080c2 <create_chain+0x122>
 80080bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080c0:	e000      	b.n	80080c4 <create_chain+0x124>
 80080c2:	2301      	movs	r3, #1
 80080c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80080c6:	69fb      	ldr	r3, [r7, #28]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	3304      	adds	r3, #4
 80080e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	0a5b      	lsrs	r3, r3, #9
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	8952      	ldrh	r2, [r2, #10]
 80080f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80080f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1d1a      	adds	r2, r3, #4
 80080fa:	613a      	str	r2, [r7, #16]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <clmt_clust+0x3a>
 8008106:	2300      	movs	r3, #0
 8008108:	e010      	b.n	800812c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	429a      	cmp	r2, r3
 8008110:	d307      	bcc.n	8008122 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	617b      	str	r3, [r7, #20]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	3304      	adds	r3, #4
 800811e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008120:	e7e9      	b.n	80080f6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008122:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	4413      	add	r3, r2
}
 800812c:	4618      	mov	r0, r3
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800814e:	d204      	bcs.n	800815a <dir_sdi+0x22>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f003 031f 	and.w	r3, r3, #31
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <dir_sdi+0x26>
		return FR_INT_ERR;
 800815a:	2302      	movs	r3, #2
 800815c:	e063      	b.n	8008226 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d106      	bne.n	800817e <dir_sdi+0x46>
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d902      	bls.n	800817e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10c      	bne.n	800819e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	8912      	ldrh	r2, [r2, #8]
 800818c:	4293      	cmp	r3, r2
 800818e:	d301      	bcc.n	8008194 <dir_sdi+0x5c>
 8008190:	2302      	movs	r3, #2
 8008192:	e048      	b.n	8008226 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	61da      	str	r2, [r3, #28]
 800819c:	e029      	b.n	80081f2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	895b      	ldrh	r3, [r3, #10]
 80081a2:	025b      	lsls	r3, r3, #9
 80081a4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081a6:	e019      	b.n	80081dc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6979      	ldr	r1, [r7, #20]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff fcfe 	bl	8007bae <get_fat>
 80081b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ba:	d101      	bne.n	80081c0 <dir_sdi+0x88>
 80081bc:	2301      	movs	r3, #1
 80081be:	e032      	b.n	8008226 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d904      	bls.n	80081d0 <dir_sdi+0x98>
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d301      	bcc.n	80081d4 <dir_sdi+0x9c>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e028      	b.n	8008226 <dir_sdi+0xee>
			ofs -= csz;
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d2e1      	bcs.n	80081a8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80081e4:	6979      	ldr	r1, [r7, #20]
 80081e6:	6938      	ldr	r0, [r7, #16]
 80081e8:	f7ff fcc2 	bl	8007b70 <clust2sect>
 80081ec:	4602      	mov	r2, r0
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <dir_sdi+0xcc>
 8008200:	2302      	movs	r3, #2
 8008202:	e010      	b.n	8008226 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	69da      	ldr	r2, [r3, #28]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	0a5b      	lsrs	r3, r3, #9
 800820c:	441a      	add	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821e:	441a      	add	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	3320      	adds	r3, #32
 8008244:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <dir_next+0x28>
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008254:	d301      	bcc.n	800825a <dir_next+0x2c>
 8008256:	2304      	movs	r3, #4
 8008258:	e0aa      	b.n	80083b0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008260:	2b00      	cmp	r3, #0
 8008262:	f040 8098 	bne.w	8008396 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10b      	bne.n	8008290 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	8912      	ldrh	r2, [r2, #8]
 8008280:	4293      	cmp	r3, r2
 8008282:	f0c0 8088 	bcc.w	8008396 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	61da      	str	r2, [r3, #28]
 800828c:	2304      	movs	r3, #4
 800828e:	e08f      	b.n	80083b0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	0a5b      	lsrs	r3, r3, #9
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	8952      	ldrh	r2, [r2, #10]
 8008298:	3a01      	subs	r2, #1
 800829a:	4013      	ands	r3, r2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d17a      	bne.n	8008396 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	4619      	mov	r1, r3
 80082a8:	4610      	mov	r0, r2
 80082aa:	f7ff fc80 	bl	8007bae <get_fat>
 80082ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d801      	bhi.n	80082ba <dir_next+0x8c>
 80082b6:	2302      	movs	r3, #2
 80082b8:	e07a      	b.n	80083b0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082c0:	d101      	bne.n	80082c6 <dir_next+0x98>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e074      	b.n	80083b0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d358      	bcc.n	8008382 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	61da      	str	r2, [r3, #28]
 80082dc:	2304      	movs	r3, #4
 80082de:	e067      	b.n	80083b0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	4619      	mov	r1, r3
 80082e8:	4610      	mov	r0, r2
 80082ea:	f7ff fe59 	bl	8007fa0 <create_chain>
 80082ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <dir_next+0xcc>
 80082f6:	2307      	movs	r3, #7
 80082f8:	e05a      	b.n	80083b0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d101      	bne.n	8008304 <dir_next+0xd6>
 8008300:	2302      	movs	r3, #2
 8008302:	e055      	b.n	80083b0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800830a:	d101      	bne.n	8008310 <dir_next+0xe2>
 800830c:	2301      	movs	r3, #1
 800830e:	e04f      	b.n	80083b0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f7ff fb4d 	bl	80079b0 <sync_window>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <dir_next+0xf2>
 800831c:	2301      	movs	r3, #1
 800831e:	e047      	b.n	80083b0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3330      	adds	r3, #48	; 0x30
 8008324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008328:	2100      	movs	r1, #0
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff f977 	bl	800761e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008330:	2300      	movs	r3, #0
 8008332:	613b      	str	r3, [r7, #16]
 8008334:	6979      	ldr	r1, [r7, #20]
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f7ff fc1a 	bl	8007b70 <clust2sect>
 800833c:	4602      	mov	r2, r0
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	62da      	str	r2, [r3, #44]	; 0x2c
 8008342:	e012      	b.n	800836a <dir_next+0x13c>
						fs->wflag = 1;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2201      	movs	r2, #1
 8008348:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7ff fb30 	bl	80079b0 <sync_window>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <dir_next+0x12c>
 8008356:	2301      	movs	r3, #1
 8008358:	e02a      	b.n	80083b0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	3301      	adds	r3, #1
 800835e:	613b      	str	r3, [r7, #16]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	62da      	str	r2, [r3, #44]	; 0x2c
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	895b      	ldrh	r3, [r3, #10]
 800836e:	461a      	mov	r2, r3
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	4293      	cmp	r3, r2
 8008374:	d3e6      	bcc.n	8008344 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad2      	subs	r2, r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008388:	6979      	ldr	r1, [r7, #20]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7ff fbf0 	bl	8007b70 <clust2sect>
 8008390:	4602      	mov	r2, r0
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a8:	441a      	add	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80083c8:	2100      	movs	r1, #0
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7ff feb4 	bl	8008138 <dir_sdi>
 80083d0:	4603      	mov	r3, r0
 80083d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d12b      	bne.n	8008432 <dir_alloc+0x7a>
		n = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	4619      	mov	r1, r3
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f7ff fb27 	bl	8007a38 <move_window>
 80083ea:	4603      	mov	r3, r0
 80083ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d11d      	bne.n	8008430 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2be5      	cmp	r3, #229	; 0xe5
 80083fc:	d004      	beq.n	8008408 <dir_alloc+0x50>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d107      	bne.n	8008418 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	3301      	adds	r3, #1
 800840c:	613b      	str	r3, [r7, #16]
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d102      	bne.n	800841c <dir_alloc+0x64>
 8008416:	e00c      	b.n	8008432 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800841c:	2101      	movs	r1, #1
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff ff05 	bl	800822e <dir_next>
 8008424:	4603      	mov	r3, r0
 8008426:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0d7      	beq.n	80083de <dir_alloc+0x26>
 800842e:	e000      	b.n	8008432 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008430:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008432:	7dfb      	ldrb	r3, [r7, #23]
 8008434:	2b04      	cmp	r3, #4
 8008436:	d101      	bne.n	800843c <dir_alloc+0x84>
 8008438:	2307      	movs	r3, #7
 800843a:	75fb      	strb	r3, [r7, #23]
	return res;
 800843c:	7dfb      	ldrb	r3, [r7, #23]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3718      	adds	r7, #24
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	331a      	adds	r3, #26
 8008454:	4618      	mov	r0, r3
 8008456:	f7ff f83f 	bl	80074d8 <ld_word>
 800845a:	4603      	mov	r3, r0
 800845c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b03      	cmp	r3, #3
 8008464:	d109      	bne.n	800847a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	3314      	adds	r3, #20
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff f834 	bl	80074d8 <ld_word>
 8008470:	4603      	mov	r3, r0
 8008472:	041b      	lsls	r3, r3, #16
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800847a:	68fb      	ldr	r3, [r7, #12]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	331a      	adds	r3, #26
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	b292      	uxth	r2, r2
 8008498:	4611      	mov	r1, r2
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff f857 	bl	800754e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d109      	bne.n	80084bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f103 0214 	add.w	r2, r3, #20
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	0c1b      	lsrs	r3, r3, #16
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f7ff f849 	bl	800754e <st_word>
	}
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80084d2:	2100      	movs	r1, #0
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff fe2f 	bl	8008138 <dir_sdi>
 80084da:	4603      	mov	r3, r0
 80084dc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <dir_find+0x24>
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	e03e      	b.n	8008566 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	4619      	mov	r1, r3
 80084ee:	6938      	ldr	r0, [r7, #16]
 80084f0:	f7ff faa2 	bl	8007a38 <move_window>
 80084f4:	4603      	mov	r3, r0
 80084f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d12f      	bne.n	800855e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <dir_find+0x4e>
 800850c:	2304      	movs	r3, #4
 800850e:	75fb      	strb	r3, [r7, #23]
 8008510:	e028      	b.n	8008564 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	330b      	adds	r3, #11
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800851e:	b2da      	uxtb	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	330b      	adds	r3, #11
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	f003 0308 	and.w	r3, r3, #8
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <dir_find+0x86>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a18      	ldr	r0, [r3, #32]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3324      	adds	r3, #36	; 0x24
 800853c:	220b      	movs	r2, #11
 800853e:	4619      	mov	r1, r3
 8008540:	f7ff f888 	bl	8007654 <mem_cmp>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00b      	beq.n	8008562 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800854a:	2100      	movs	r1, #0
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff fe6e 	bl	800822e <dir_next>
 8008552:	4603      	mov	r3, r0
 8008554:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0c5      	beq.n	80084e8 <dir_find+0x24>
 800855c:	e002      	b.n	8008564 <dir_find+0xa0>
		if (res != FR_OK) break;
 800855e:	bf00      	nop
 8008560:	e000      	b.n	8008564 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008562:	bf00      	nop

	return res;
 8008564:	7dfb      	ldrb	r3, [r7, #23]
}
 8008566:	4618      	mov	r0, r3
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800857c:	2101      	movs	r1, #1
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff ff1a 	bl	80083b8 <dir_alloc>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d11c      	bne.n	80085c8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	4619      	mov	r1, r3
 8008594:	68b8      	ldr	r0, [r7, #8]
 8008596:	f7ff fa4f 	bl	8007a38 <move_window>
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d111      	bne.n	80085c8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	2220      	movs	r2, #32
 80085aa:	2100      	movs	r1, #0
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7ff f836 	bl	800761e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a18      	ldr	r0, [r3, #32]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3324      	adds	r3, #36	; 0x24
 80085ba:	220b      	movs	r2, #11
 80085bc:	4619      	mov	r1, r3
 80085be:	f7ff f80d 	bl	80075dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2201      	movs	r2, #1
 80085c6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3324      	adds	r3, #36	; 0x24
 80085e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80085ea:	220b      	movs	r2, #11
 80085ec:	2120      	movs	r1, #32
 80085ee:	68b8      	ldr	r0, [r7, #8]
 80085f0:	f7ff f815 	bl	800761e <mem_set>
	si = i = 0; ni = 8;
 80085f4:	2300      	movs	r3, #0
 80085f6:	613b      	str	r3, [r7, #16]
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	2308      	movs	r3, #8
 80085fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	61fa      	str	r2, [r7, #28]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4413      	add	r3, r2
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800860e:	7efb      	ldrb	r3, [r7, #27]
 8008610:	2b20      	cmp	r3, #32
 8008612:	d94e      	bls.n	80086b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008614:	7efb      	ldrb	r3, [r7, #27]
 8008616:	2b2f      	cmp	r3, #47	; 0x2f
 8008618:	d006      	beq.n	8008628 <create_name+0x54>
 800861a:	7efb      	ldrb	r3, [r7, #27]
 800861c:	2b5c      	cmp	r3, #92	; 0x5c
 800861e:	d110      	bne.n	8008642 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008620:	e002      	b.n	8008628 <create_name+0x54>
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	3301      	adds	r3, #1
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b2f      	cmp	r3, #47	; 0x2f
 8008632:	d0f6      	beq.n	8008622 <create_name+0x4e>
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2b5c      	cmp	r3, #92	; 0x5c
 800863e:	d0f0      	beq.n	8008622 <create_name+0x4e>
			break;
 8008640:	e038      	b.n	80086b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008642:	7efb      	ldrb	r3, [r7, #27]
 8008644:	2b2e      	cmp	r3, #46	; 0x2e
 8008646:	d003      	beq.n	8008650 <create_name+0x7c>
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	429a      	cmp	r2, r3
 800864e:	d30c      	bcc.n	800866a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b0b      	cmp	r3, #11
 8008654:	d002      	beq.n	800865c <create_name+0x88>
 8008656:	7efb      	ldrb	r3, [r7, #27]
 8008658:	2b2e      	cmp	r3, #46	; 0x2e
 800865a:	d001      	beq.n	8008660 <create_name+0x8c>
 800865c:	2306      	movs	r3, #6
 800865e:	e044      	b.n	80086ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008660:	2308      	movs	r3, #8
 8008662:	613b      	str	r3, [r7, #16]
 8008664:	230b      	movs	r3, #11
 8008666:	617b      	str	r3, [r7, #20]
			continue;
 8008668:	e022      	b.n	80086b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800866a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800866e:	2b00      	cmp	r3, #0
 8008670:	da04      	bge.n	800867c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008672:	7efb      	ldrb	r3, [r7, #27]
 8008674:	3b80      	subs	r3, #128	; 0x80
 8008676:	4a1f      	ldr	r2, [pc, #124]	; (80086f4 <create_name+0x120>)
 8008678:	5cd3      	ldrb	r3, [r2, r3]
 800867a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800867c:	7efb      	ldrb	r3, [r7, #27]
 800867e:	4619      	mov	r1, r3
 8008680:	481d      	ldr	r0, [pc, #116]	; (80086f8 <create_name+0x124>)
 8008682:	f7ff f80e 	bl	80076a2 <chk_chr>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <create_name+0xbc>
 800868c:	2306      	movs	r3, #6
 800868e:	e02c      	b.n	80086ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008690:	7efb      	ldrb	r3, [r7, #27]
 8008692:	2b60      	cmp	r3, #96	; 0x60
 8008694:	d905      	bls.n	80086a2 <create_name+0xce>
 8008696:	7efb      	ldrb	r3, [r7, #27]
 8008698:	2b7a      	cmp	r3, #122	; 0x7a
 800869a:	d802      	bhi.n	80086a2 <create_name+0xce>
 800869c:	7efb      	ldrb	r3, [r7, #27]
 800869e:	3b20      	subs	r3, #32
 80086a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	1c5a      	adds	r2, r3, #1
 80086a6:	613a      	str	r2, [r7, #16]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	4413      	add	r3, r2
 80086ac:	7efa      	ldrb	r2, [r7, #27]
 80086ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80086b0:	e7a6      	b.n	8008600 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80086b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	441a      	add	r2, r3
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <create_name+0xf4>
 80086c4:	2306      	movs	r3, #6
 80086c6:	e010      	b.n	80086ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2be5      	cmp	r3, #229	; 0xe5
 80086ce:	d102      	bne.n	80086d6 <create_name+0x102>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2205      	movs	r2, #5
 80086d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80086d6:	7efb      	ldrb	r3, [r7, #27]
 80086d8:	2b20      	cmp	r3, #32
 80086da:	d801      	bhi.n	80086e0 <create_name+0x10c>
 80086dc:	2204      	movs	r2, #4
 80086de:	e000      	b.n	80086e2 <create_name+0x10e>
 80086e0:	2200      	movs	r2, #0
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	330b      	adds	r3, #11
 80086e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80086e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3720      	adds	r7, #32
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	0800aa2c 	.word	0x0800aa2c
 80086f8:	0800a7e8 	.word	0x0800a7e8

080086fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008710:	e002      	b.n	8008718 <follow_path+0x1c>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	3301      	adds	r3, #1
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b2f      	cmp	r3, #47	; 0x2f
 800871e:	d0f8      	beq.n	8008712 <follow_path+0x16>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	2b5c      	cmp	r3, #92	; 0x5c
 8008726:	d0f4      	beq.n	8008712 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2200      	movs	r2, #0
 800872c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b1f      	cmp	r3, #31
 8008734:	d80a      	bhi.n	800874c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2280      	movs	r2, #128	; 0x80
 800873a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800873e:	2100      	movs	r1, #0
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff fcf9 	bl	8008138 <dir_sdi>
 8008746:	4603      	mov	r3, r0
 8008748:	75fb      	strb	r3, [r7, #23]
 800874a:	e043      	b.n	80087d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800874c:	463b      	mov	r3, r7
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f7ff ff3f 	bl	80085d4 <create_name>
 8008756:	4603      	mov	r3, r0
 8008758:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800875a:	7dfb      	ldrb	r3, [r7, #23]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d134      	bne.n	80087ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff feaf 	bl	80084c4 <dir_find>
 8008766:	4603      	mov	r3, r0
 8008768:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008770:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008772:	7dfb      	ldrb	r3, [r7, #23]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	2b04      	cmp	r3, #4
 800877c:	d127      	bne.n	80087ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800877e:	7afb      	ldrb	r3, [r7, #11]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b00      	cmp	r3, #0
 8008786:	d122      	bne.n	80087ce <follow_path+0xd2>
 8008788:	2305      	movs	r3, #5
 800878a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800878c:	e01f      	b.n	80087ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800878e:	7afb      	ldrb	r3, [r7, #11]
 8008790:	f003 0304 	and.w	r3, r3, #4
 8008794:	2b00      	cmp	r3, #0
 8008796:	d11c      	bne.n	80087d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	799b      	ldrb	r3, [r3, #6]
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d102      	bne.n	80087aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80087a4:	2305      	movs	r3, #5
 80087a6:	75fb      	strb	r3, [r7, #23]
 80087a8:	e014      	b.n	80087d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b8:	4413      	add	r3, r2
 80087ba:	4619      	mov	r1, r3
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7ff fe42 	bl	8008446 <ld_clust>
 80087c2:	4602      	mov	r2, r0
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80087c8:	e7c0      	b.n	800874c <follow_path+0x50>
			if (res != FR_OK) break;
 80087ca:	bf00      	nop
 80087cc:	e002      	b.n	80087d4 <follow_path+0xd8>
				break;
 80087ce:	bf00      	nop
 80087d0:	e000      	b.n	80087d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80087d2:	bf00      	nop
			}
		}
	}

	return res;
 80087d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3718      	adds	r7, #24
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80087de:	b480      	push	{r7}
 80087e0:	b087      	sub	sp, #28
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80087e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d031      	beq.n	8008858 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	e002      	b.n	8008802 <get_ldnumber+0x24>
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	3301      	adds	r3, #1
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b20      	cmp	r3, #32
 8008808:	d903      	bls.n	8008812 <get_ldnumber+0x34>
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b3a      	cmp	r3, #58	; 0x3a
 8008810:	d1f4      	bne.n	80087fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	2b3a      	cmp	r3, #58	; 0x3a
 8008818:	d11c      	bne.n	8008854 <get_ldnumber+0x76>
			tp = *path;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	60fa      	str	r2, [r7, #12]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	3b30      	subs	r3, #48	; 0x30
 800882a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b09      	cmp	r3, #9
 8008830:	d80e      	bhi.n	8008850 <get_ldnumber+0x72>
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	429a      	cmp	r2, r3
 8008838:	d10a      	bne.n	8008850 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d107      	bne.n	8008850 <get_ldnumber+0x72>
					vol = (int)i;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	3301      	adds	r3, #1
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	e002      	b.n	800885a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008854:	2300      	movs	r3, #0
 8008856:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008858:	693b      	ldr	r3, [r7, #16]
}
 800885a:	4618      	mov	r0, r3
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
	...

08008868 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	70da      	strb	r2, [r3, #3]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800887e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7ff f8d8 	bl	8007a38 <move_window>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <check_fs+0x2a>
 800888e:	2304      	movs	r3, #4
 8008890:	e038      	b.n	8008904 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3330      	adds	r3, #48	; 0x30
 8008896:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fe1c 	bl	80074d8 <ld_word>
 80088a0:	4603      	mov	r3, r0
 80088a2:	461a      	mov	r2, r3
 80088a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d001      	beq.n	80088b0 <check_fs+0x48>
 80088ac:	2303      	movs	r3, #3
 80088ae:	e029      	b.n	8008904 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088b6:	2be9      	cmp	r3, #233	; 0xe9
 80088b8:	d009      	beq.n	80088ce <check_fs+0x66>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088c0:	2beb      	cmp	r3, #235	; 0xeb
 80088c2:	d11e      	bne.n	8008902 <check_fs+0x9a>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80088ca:	2b90      	cmp	r3, #144	; 0x90
 80088cc:	d119      	bne.n	8008902 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3330      	adds	r3, #48	; 0x30
 80088d2:	3336      	adds	r3, #54	; 0x36
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fe17 	bl	8007508 <ld_dword>
 80088da:	4603      	mov	r3, r0
 80088dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80088e0:	4a0a      	ldr	r2, [pc, #40]	; (800890c <check_fs+0xa4>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d101      	bne.n	80088ea <check_fs+0x82>
 80088e6:	2300      	movs	r3, #0
 80088e8:	e00c      	b.n	8008904 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	3330      	adds	r3, #48	; 0x30
 80088ee:	3352      	adds	r3, #82	; 0x52
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fe fe09 	bl	8007508 <ld_dword>
 80088f6:	4603      	mov	r3, r0
 80088f8:	4a05      	ldr	r2, [pc, #20]	; (8008910 <check_fs+0xa8>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d101      	bne.n	8008902 <check_fs+0x9a>
 80088fe:	2300      	movs	r3, #0
 8008900:	e000      	b.n	8008904 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008902:	2302      	movs	r3, #2
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	00544146 	.word	0x00544146
 8008910:	33544146 	.word	0x33544146

08008914 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b096      	sub	sp, #88	; 0x58
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7ff ff58 	bl	80087de <get_ldnumber>
 800892e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008932:	2b00      	cmp	r3, #0
 8008934:	da01      	bge.n	800893a <find_volume+0x26>
 8008936:	230b      	movs	r3, #11
 8008938:	e22d      	b.n	8008d96 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800893a:	4aa1      	ldr	r2, [pc, #644]	; (8008bc0 <find_volume+0x2ac>)
 800893c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008942:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <find_volume+0x3a>
 800894a:	230c      	movs	r3, #12
 800894c:	e223      	b.n	8008d96 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008952:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008954:	79fb      	ldrb	r3, [r7, #7]
 8008956:	f023 0301 	bic.w	r3, r3, #1
 800895a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800895c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01a      	beq.n	800899a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	785b      	ldrb	r3, [r3, #1]
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fd17 	bl	800739c <disk_status>
 800896e:	4603      	mov	r3, r0
 8008970:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008974:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10c      	bne.n	800899a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d007      	beq.n	8008996 <find_volume+0x82>
 8008986:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008992:	230a      	movs	r3, #10
 8008994:	e1ff      	b.n	8008d96 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008996:	2300      	movs	r3, #0
 8008998:	e1fd      	b.n	8008d96 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	2200      	movs	r2, #0
 800899e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80089a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80089a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe fd0f 	bl	80073d0 <disk_initialize>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80089b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089bc:	f003 0301 	and.w	r3, r3, #1
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80089c4:	2303      	movs	r3, #3
 80089c6:	e1e6      	b.n	8008d96 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <find_volume+0xca>
 80089ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80089da:	230a      	movs	r3, #10
 80089dc:	e1db      	b.n	8008d96 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80089e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089e6:	f7ff ff3f 	bl	8008868 <check_fs>
 80089ea:	4603      	mov	r3, r0
 80089ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80089f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	d149      	bne.n	8008a8c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089f8:	2300      	movs	r3, #0
 80089fa:	643b      	str	r3, [r7, #64]	; 0x40
 80089fc:	e01e      	b.n	8008a3c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008a0c:	4413      	add	r3, r2
 8008a0e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	3304      	adds	r3, #4
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d006      	beq.n	8008a28 <find_volume+0x114>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fd72 	bl	8007508 <ld_dword>
 8008a24:	4602      	mov	r2, r0
 8008a26:	e000      	b.n	8008a2a <find_volume+0x116>
 8008a28:	2200      	movs	r2, #0
 8008a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	3358      	adds	r3, #88	; 0x58
 8008a30:	443b      	add	r3, r7
 8008a32:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a38:	3301      	adds	r3, #1
 8008a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d9dd      	bls.n	80089fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008a42:	2300      	movs	r3, #0
 8008a44:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d002      	beq.n	8008a52 <find_volume+0x13e>
 8008a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a4e:	3b01      	subs	r3, #1
 8008a50:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	3358      	adds	r3, #88	; 0x58
 8008a58:	443b      	add	r3, r7
 8008a5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008a5e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <find_volume+0x15e>
 8008a66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a6a:	f7ff fefd 	bl	8008868 <check_fs>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	e000      	b.n	8008a74 <find_volume+0x160>
 8008a72:	2303      	movs	r3, #3
 8008a74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d905      	bls.n	8008a8c <find_volume+0x178>
 8008a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a82:	3301      	adds	r3, #1
 8008a84:	643b      	str	r3, [r7, #64]	; 0x40
 8008a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d9e2      	bls.n	8008a52 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d101      	bne.n	8008a98 <find_volume+0x184>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e17e      	b.n	8008d96 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008a98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d901      	bls.n	8008aa4 <find_volume+0x190>
 8008aa0:	230d      	movs	r3, #13
 8008aa2:	e178      	b.n	8008d96 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa6:	3330      	adds	r3, #48	; 0x30
 8008aa8:	330b      	adds	r3, #11
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe fd14 	bl	80074d8 <ld_word>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab6:	d001      	beq.n	8008abc <find_volume+0x1a8>
 8008ab8:	230d      	movs	r3, #13
 8008aba:	e16c      	b.n	8008d96 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	3330      	adds	r3, #48	; 0x30
 8008ac0:	3316      	adds	r3, #22
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe fd08 	bl	80074d8 <ld_word>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <find_volume+0x1cc>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	3330      	adds	r3, #48	; 0x30
 8008ad6:	3324      	adds	r3, #36	; 0x24
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe fd15 	bl	8007508 <ld_dword>
 8008ade:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ae4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af2:	789b      	ldrb	r3, [r3, #2]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d005      	beq.n	8008b04 <find_volume+0x1f0>
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	789b      	ldrb	r3, [r3, #2]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d001      	beq.n	8008b04 <find_volume+0x1f0>
 8008b00:	230d      	movs	r3, #13
 8008b02:	e148      	b.n	8008d96 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	789b      	ldrb	r3, [r3, #2]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b0c:	fb02 f303 	mul.w	r3, r2, r3
 8008b10:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b20:	895b      	ldrh	r3, [r3, #10]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d008      	beq.n	8008b38 <find_volume+0x224>
 8008b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b28:	895b      	ldrh	r3, [r3, #10]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	895b      	ldrh	r3, [r3, #10]
 8008b30:	3b01      	subs	r3, #1
 8008b32:	4013      	ands	r3, r2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <find_volume+0x228>
 8008b38:	230d      	movs	r3, #13
 8008b3a:	e12c      	b.n	8008d96 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	3330      	adds	r3, #48	; 0x30
 8008b40:	3311      	adds	r3, #17
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fcc8 	bl	80074d8 <ld_word>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	891b      	ldrh	r3, [r3, #8]
 8008b54:	f003 030f 	and.w	r3, r3, #15
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <find_volume+0x24e>
 8008b5e:	230d      	movs	r3, #13
 8008b60:	e119      	b.n	8008d96 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	3330      	adds	r3, #48	; 0x30
 8008b66:	3313      	adds	r3, #19
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fe fcb5 	bl	80074d8 <ld_word>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d106      	bne.n	8008b86 <find_volume+0x272>
 8008b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7a:	3330      	adds	r3, #48	; 0x30
 8008b7c:	3320      	adds	r3, #32
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fcc2 	bl	8007508 <ld_dword>
 8008b84:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b88:	3330      	adds	r3, #48	; 0x30
 8008b8a:	330e      	adds	r3, #14
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fe fca3 	bl	80074d8 <ld_word>
 8008b92:	4603      	mov	r3, r0
 8008b94:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008b96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <find_volume+0x28c>
 8008b9c:	230d      	movs	r3, #13
 8008b9e:	e0fa      	b.n	8008d96 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008ba0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba4:	4413      	add	r3, r2
 8008ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ba8:	8912      	ldrh	r2, [r2, #8]
 8008baa:	0912      	lsrs	r2, r2, #4
 8008bac:	b292      	uxth	r2, r2
 8008bae:	4413      	add	r3, r2
 8008bb0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008bb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d204      	bcs.n	8008bc4 <find_volume+0x2b0>
 8008bba:	230d      	movs	r3, #13
 8008bbc:	e0eb      	b.n	8008d96 <find_volume+0x482>
 8008bbe:	bf00      	nop
 8008bc0:	200135c8 	.word	0x200135c8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bcc:	8952      	ldrh	r2, [r2, #10]
 8008bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <find_volume+0x2ca>
 8008bda:	230d      	movs	r3, #13
 8008bdc:	e0db      	b.n	8008d96 <find_volume+0x482>
		fmt = FS_FAT32;
 8008bde:	2303      	movs	r3, #3
 8008be0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d802      	bhi.n	8008bf4 <find_volume+0x2e0>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d802      	bhi.n	8008c04 <find_volume+0x2f0>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c06:	1c9a      	adds	r2, r3, #2
 8008c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c10:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008c12:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c16:	441a      	add	r2, r3
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008c1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	441a      	add	r2, r3
 8008c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c24:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008c26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	d11e      	bne.n	8008c6c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	3330      	adds	r3, #48	; 0x30
 8008c32:	332a      	adds	r3, #42	; 0x2a
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe fc4f 	bl	80074d8 <ld_word>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d001      	beq.n	8008c44 <find_volume+0x330>
 8008c40:	230d      	movs	r3, #13
 8008c42:	e0a8      	b.n	8008d96 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	891b      	ldrh	r3, [r3, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <find_volume+0x33c>
 8008c4c:	230d      	movs	r3, #13
 8008c4e:	e0a2      	b.n	8008d96 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	3330      	adds	r3, #48	; 0x30
 8008c54:	332c      	adds	r3, #44	; 0x2c
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fe fc56 	bl	8007508 <ld_dword>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	647b      	str	r3, [r7, #68]	; 0x44
 8008c6a:	e01f      	b.n	8008cac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6e:	891b      	ldrh	r3, [r3, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <find_volume+0x364>
 8008c74:	230d      	movs	r3, #13
 8008c76:	e08e      	b.n	8008d96 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	6a1a      	ldr	r2, [r3, #32]
 8008c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c7e:	441a      	add	r2, r3
 8008c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c82:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008c84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d103      	bne.n	8008c94 <find_volume+0x380>
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	e00a      	b.n	8008caa <find_volume+0x396>
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	695a      	ldr	r2, [r3, #20]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	4413      	add	r3, r2
 8008c9e:	085a      	lsrs	r2, r3, #1
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	695b      	ldr	r3, [r3, #20]
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008caa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cae:	699a      	ldr	r2, [r3, #24]
 8008cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008cb6:	0a5b      	lsrs	r3, r3, #9
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d201      	bcs.n	8008cc0 <find_volume+0x3ac>
 8008cbc:	230d      	movs	r3, #13
 8008cbe:	e06a      	b.n	8008d96 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cc6:	611a      	str	r2, [r3, #16]
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	691a      	ldr	r2, [r3, #16]
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cce:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	2280      	movs	r2, #128	; 0x80
 8008cd4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008cd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d149      	bne.n	8008d72 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce0:	3330      	adds	r3, #48	; 0x30
 8008ce2:	3330      	adds	r3, #48	; 0x30
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7fe fbf7 	bl	80074d8 <ld_word>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d140      	bne.n	8008d72 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008cf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cf8:	f7fe fe9e 	bl	8007a38 <move_window>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d137      	bne.n	8008d72 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	2200      	movs	r2, #0
 8008d06:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0a:	3330      	adds	r3, #48	; 0x30
 8008d0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe fbe1 	bl	80074d8 <ld_word>
 8008d16:	4603      	mov	r3, r0
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d127      	bne.n	8008d72 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d24:	3330      	adds	r3, #48	; 0x30
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe fbee 	bl	8007508 <ld_dword>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	4a1c      	ldr	r2, [pc, #112]	; (8008da0 <find_volume+0x48c>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d11e      	bne.n	8008d72 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	3330      	adds	r3, #48	; 0x30
 8008d38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fe fbe3 	bl	8007508 <ld_dword>
 8008d42:	4603      	mov	r3, r0
 8008d44:	4a17      	ldr	r2, [pc, #92]	; (8008da4 <find_volume+0x490>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d113      	bne.n	8008d72 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	3330      	adds	r3, #48	; 0x30
 8008d4e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fbd8 	bl	8007508 <ld_dword>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	3330      	adds	r3, #48	; 0x30
 8008d62:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7fe fbce 	bl	8007508 <ld_dword>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d74:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008d78:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d7a:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <find_volume+0x494>)
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	4b09      	ldr	r3, [pc, #36]	; (8008da8 <find_volume+0x494>)
 8008d84:	801a      	strh	r2, [r3, #0]
 8008d86:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <find_volume+0x494>)
 8008d88:	881a      	ldrh	r2, [r3, #0]
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008d8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d90:	f7fe fdea 	bl	8007968 <clear_lock>
#endif
	return FR_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3758      	adds	r7, #88	; 0x58
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	41615252 	.word	0x41615252
 8008da4:	61417272 	.word	0x61417272
 8008da8:	200135cc 	.word	0x200135cc

08008dac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008db6:	2309      	movs	r3, #9
 8008db8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01c      	beq.n	8008dfa <validate+0x4e>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d018      	beq.n	8008dfa <validate+0x4e>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d013      	beq.n	8008dfa <validate+0x4e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	889a      	ldrh	r2, [r3, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	88db      	ldrh	r3, [r3, #6]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d10c      	bne.n	8008dfa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fad8 	bl	800739c <disk_status>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <validate+0x4e>
			res = FR_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d102      	bne.n	8008e06 <validate+0x5a>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	e000      	b.n	8008e08 <validate+0x5c>
 8008e06:	2300      	movs	r3, #0
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	6013      	str	r3, [r2, #0]
	return res;
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	4613      	mov	r3, r2
 8008e24:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008e2a:	f107 0310 	add.w	r3, r7, #16
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff fcd5 	bl	80087de <get_ldnumber>
 8008e34:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	da01      	bge.n	8008e40 <f_mount+0x28>
 8008e3c:	230b      	movs	r3, #11
 8008e3e:	e02b      	b.n	8008e98 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008e40:	4a17      	ldr	r2, [pc, #92]	; (8008ea0 <f_mount+0x88>)
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e48:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008e50:	69b8      	ldr	r0, [r7, #24]
 8008e52:	f7fe fd89 	bl	8007968 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	490d      	ldr	r1, [pc, #52]	; (8008ea0 <f_mount+0x88>)
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <f_mount+0x66>
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d001      	beq.n	8008e82 <f_mount+0x6a>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e00a      	b.n	8008e98 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008e82:	f107 010c 	add.w	r1, r7, #12
 8008e86:	f107 0308 	add.w	r3, r7, #8
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff fd41 	bl	8008914 <find_volume>
 8008e92:	4603      	mov	r3, r0
 8008e94:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	200135c8 	.word	0x200135c8

08008ea4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b098      	sub	sp, #96	; 0x60
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <f_open+0x18>
 8008eb8:	2309      	movs	r3, #9
 8008eba:	e1ad      	b.n	8009218 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ec2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008ec4:	79fa      	ldrb	r2, [r7, #7]
 8008ec6:	f107 0110 	add.w	r1, r7, #16
 8008eca:	f107 0308 	add.w	r3, r7, #8
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff fd20 	bl	8008914 <find_volume>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008eda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f040 8191 	bne.w	8009206 <f_open+0x362>
		dj.obj.fs = fs;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	f107 0314 	add.w	r3, r7, #20
 8008eee:	4611      	mov	r1, r2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7ff fc03 	bl	80086fc <follow_path>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008efc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d11a      	bne.n	8008f3a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008f04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f08:	b25b      	sxtb	r3, r3
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	da03      	bge.n	8008f16 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008f0e:	2306      	movs	r3, #6
 8008f10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f14:	e011      	b.n	8008f3a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f16:	79fb      	ldrb	r3, [r7, #7]
 8008f18:	f023 0301 	bic.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	bf14      	ite	ne
 8008f20:	2301      	movne	r3, #1
 8008f22:	2300      	moveq	r3, #0
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	461a      	mov	r2, r3
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	4611      	mov	r1, r2
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fe fbd2 	bl	80076d8 <chk_lock>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	f003 031c 	and.w	r3, r3, #28
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d07f      	beq.n	8009044 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008f44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d017      	beq.n	8008f7c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f50:	2b04      	cmp	r3, #4
 8008f52:	d10e      	bne.n	8008f72 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008f54:	f7fe fc1c 	bl	8007790 <enq_lock>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d006      	beq.n	8008f6c <f_open+0xc8>
 8008f5e:	f107 0314 	add.w	r3, r7, #20
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff fb03 	bl	800856e <dir_register>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	e000      	b.n	8008f6e <f_open+0xca>
 8008f6c:	2312      	movs	r3, #18
 8008f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	f043 0308 	orr.w	r3, r3, #8
 8008f78:	71fb      	strb	r3, [r7, #7]
 8008f7a:	e010      	b.n	8008f9e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008f7c:	7ebb      	ldrb	r3, [r7, #26]
 8008f7e:	f003 0311 	and.w	r3, r3, #17
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <f_open+0xea>
					res = FR_DENIED;
 8008f86:	2307      	movs	r3, #7
 8008f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f8c:	e007      	b.n	8008f9e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008f8e:	79fb      	ldrb	r3, [r7, #7]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <f_open+0xfa>
 8008f98:	2308      	movs	r3, #8
 8008f9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d168      	bne.n	8009078 <f_open+0x1d4>
 8008fa6:	79fb      	ldrb	r3, [r7, #7]
 8008fa8:	f003 0308 	and.w	r3, r3, #8
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d063      	beq.n	8009078 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008fb0:	f7fd fcb6 	bl	8006920 <get_fattime>
 8008fb4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb8:	330e      	adds	r3, #14
 8008fba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe fae1 	bl	8007584 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc4:	3316      	adds	r3, #22
 8008fc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7fe fadb 	bl	8007584 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd0:	330b      	adds	r3, #11
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fda:	4611      	mov	r1, r2
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fa32 	bl	8008446 <ld_clust>
 8008fe2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008fe8:	2200      	movs	r2, #0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff fa4a 	bl	8008484 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff2:	331c      	adds	r3, #28
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fe fac4 	bl	8007584 <st_dword>
					fs->wflag = 1;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2201      	movs	r2, #1
 8009000:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d037      	beq.n	8009078 <f_open+0x1d4>
						dw = fs->winsect;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800900e:	f107 0314 	add.w	r3, r7, #20
 8009012:	2200      	movs	r2, #0
 8009014:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009016:	4618      	mov	r0, r3
 8009018:	f7fe ff5d 	bl	8007ed6 <remove_chain>
 800901c:	4603      	mov	r3, r0
 800901e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009022:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009026:	2b00      	cmp	r3, #0
 8009028:	d126      	bne.n	8009078 <f_open+0x1d4>
							res = move_window(fs, dw);
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800902e:	4618      	mov	r0, r3
 8009030:	f7fe fd02 	bl	8007a38 <move_window>
 8009034:	4603      	mov	r3, r0
 8009036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800903e:	3a01      	subs	r2, #1
 8009040:	60da      	str	r2, [r3, #12]
 8009042:	e019      	b.n	8009078 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009044:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009048:	2b00      	cmp	r3, #0
 800904a:	d115      	bne.n	8009078 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800904c:	7ebb      	ldrb	r3, [r7, #26]
 800904e:	f003 0310 	and.w	r3, r3, #16
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <f_open+0x1ba>
					res = FR_NO_FILE;
 8009056:	2304      	movs	r3, #4
 8009058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800905c:	e00c      	b.n	8009078 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	f003 0302 	and.w	r3, r3, #2
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <f_open+0x1d4>
 8009068:	7ebb      	ldrb	r3, [r7, #26]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <f_open+0x1d4>
						res = FR_DENIED;
 8009072:	2307      	movs	r3, #7
 8009074:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009078:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800907c:	2b00      	cmp	r3, #0
 800907e:	d128      	bne.n	80090d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009080:	79fb      	ldrb	r3, [r7, #7]
 8009082:	f003 0308 	and.w	r3, r3, #8
 8009086:	2b00      	cmp	r3, #0
 8009088:	d003      	beq.n	8009092 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800908a:	79fb      	ldrb	r3, [r7, #7]
 800908c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009090:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800909a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80090a0:	79fb      	ldrb	r3, [r7, #7]
 80090a2:	f023 0301 	bic.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	bf14      	ite	ne
 80090aa:	2301      	movne	r3, #1
 80090ac:	2300      	moveq	r3, #0
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	461a      	mov	r2, r3
 80090b2:	f107 0314 	add.w	r3, r7, #20
 80090b6:	4611      	mov	r1, r2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fb8b 	bl	80077d4 <inc_lock>
 80090be:	4602      	mov	r2, r0
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d102      	bne.n	80090d2 <f_open+0x22e>
 80090cc:	2302      	movs	r3, #2
 80090ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80090d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f040 8095 	bne.w	8009206 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff f9af 	bl	8008446 <ld_clust>
 80090e8:	4602      	mov	r2, r0
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80090ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f0:	331c      	adds	r3, #28
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7fe fa08 	bl	8007508 <ld_dword>
 80090f8:	4602      	mov	r2, r0
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	88da      	ldrh	r2, [r3, #6]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	79fa      	ldrb	r2, [r7, #7]
 8009116:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3330      	adds	r3, #48	; 0x30
 800912e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009132:	2100      	movs	r1, #0
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe fa72 	bl	800761e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	f003 0320 	and.w	r3, r3, #32
 8009140:	2b00      	cmp	r3, #0
 8009142:	d060      	beq.n	8009206 <f_open+0x362>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d05c      	beq.n	8009206 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	68da      	ldr	r2, [r3, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	895b      	ldrh	r3, [r3, #10]
 8009158:	025b      	lsls	r3, r3, #9
 800915a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	657b      	str	r3, [r7, #84]	; 0x54
 8009168:	e016      	b.n	8009198 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fd1d 	bl	8007bae <get_fat>
 8009174:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009178:	2b01      	cmp	r3, #1
 800917a:	d802      	bhi.n	8009182 <f_open+0x2de>
 800917c:	2302      	movs	r3, #2
 800917e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009188:	d102      	bne.n	8009190 <f_open+0x2ec>
 800918a:	2301      	movs	r3, #1
 800918c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009190:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	657b      	str	r3, [r7, #84]	; 0x54
 8009198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800919c:	2b00      	cmp	r3, #0
 800919e:	d103      	bne.n	80091a8 <f_open+0x304>
 80091a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d8e0      	bhi.n	800916a <f_open+0x2c6>
				}
				fp->clust = clst;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091ac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80091ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d127      	bne.n	8009206 <f_open+0x362>
 80091b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d022      	beq.n	8009206 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fe fcd3 	bl	8007b70 <clust2sect>
 80091ca:	6478      	str	r0, [r7, #68]	; 0x44
 80091cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d103      	bne.n	80091da <f_open+0x336>
						res = FR_INT_ERR;
 80091d2:	2302      	movs	r3, #2
 80091d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80091d8:	e015      	b.n	8009206 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80091da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091dc:	0a5a      	lsrs	r2, r3, #9
 80091de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091e0:	441a      	add	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	7858      	ldrb	r0, [r3, #1]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6a1a      	ldr	r2, [r3, #32]
 80091f4:	2301      	movs	r3, #1
 80091f6:	f7fe f911 	bl	800741c <disk_read>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <f_open+0x362>
 8009200:	2301      	movs	r3, #1
 8009202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009206:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <f_open+0x370>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009214:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009218:	4618      	mov	r0, r3
 800921a:	3760      	adds	r7, #96	; 0x60
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08e      	sub	sp, #56	; 0x38
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	2200      	movs	r2, #0
 8009236:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f107 0214 	add.w	r2, r7, #20
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff fdb3 	bl	8008dac <validate>
 8009246:	4603      	mov	r3, r0
 8009248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800924c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009250:	2b00      	cmp	r3, #0
 8009252:	d107      	bne.n	8009264 <f_read+0x44>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	7d5b      	ldrb	r3, [r3, #21]
 8009258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800925c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <f_read+0x4a>
 8009264:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009268:	e115      	b.n	8009496 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	7d1b      	ldrb	r3, [r3, #20]
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <f_read+0x5a>
 8009276:	2307      	movs	r3, #7
 8009278:	e10d      	b.n	8009496 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	429a      	cmp	r2, r3
 800928c:	f240 80fe 	bls.w	800948c <f_read+0x26c>
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009294:	e0fa      	b.n	800948c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f040 80c6 	bne.w	8009430 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	0a5b      	lsrs	r3, r3, #9
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	8952      	ldrh	r2, [r2, #10]
 80092ae:	3a01      	subs	r2, #1
 80092b0:	4013      	ands	r3, r2
 80092b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d12f      	bne.n	800931a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	633b      	str	r3, [r7, #48]	; 0x30
 80092c8:	e013      	b.n	80092f2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d007      	beq.n	80092e2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	4619      	mov	r1, r3
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f7fe fef9 	bl	80080d0 <clmt_clust>
 80092de:	6338      	str	r0, [r7, #48]	; 0x30
 80092e0:	e007      	b.n	80092f2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	69db      	ldr	r3, [r3, #28]
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f7fe fc5f 	bl	8007bae <get_fat>
 80092f0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80092f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d804      	bhi.n	8009302 <f_read+0xe2>
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2202      	movs	r2, #2
 80092fc:	755a      	strb	r2, [r3, #21]
 80092fe:	2302      	movs	r3, #2
 8009300:	e0c9      	b.n	8009496 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009308:	d104      	bne.n	8009314 <f_read+0xf4>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2201      	movs	r2, #1
 800930e:	755a      	strb	r2, [r3, #21]
 8009310:	2301      	movs	r3, #1
 8009312:	e0c0      	b.n	8009496 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009318:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	69db      	ldr	r3, [r3, #28]
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f7fe fc24 	bl	8007b70 <clust2sect>
 8009328:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800932a:	69bb      	ldr	r3, [r7, #24]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d104      	bne.n	800933a <f_read+0x11a>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2202      	movs	r2, #2
 8009334:	755a      	strb	r2, [r3, #21]
 8009336:	2302      	movs	r3, #2
 8009338:	e0ad      	b.n	8009496 <f_read+0x276>
			sect += csect;
 800933a:	69ba      	ldr	r2, [r7, #24]
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	4413      	add	r3, r2
 8009340:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	0a5b      	lsrs	r3, r3, #9
 8009346:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	2b00      	cmp	r3, #0
 800934c:	d039      	beq.n	80093c2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800934e:	69fa      	ldr	r2, [r7, #28]
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	4413      	add	r3, r2
 8009354:	697a      	ldr	r2, [r7, #20]
 8009356:	8952      	ldrh	r2, [r2, #10]
 8009358:	4293      	cmp	r3, r2
 800935a:	d905      	bls.n	8009368 <f_read+0x148>
					cc = fs->csize - csect;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	895b      	ldrh	r3, [r3, #10]
 8009360:	461a      	mov	r2, r3
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	7858      	ldrb	r0, [r3, #1]
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009372:	f7fe f853 	bl	800741c <disk_read>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <f_read+0x166>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	755a      	strb	r2, [r3, #21]
 8009382:	2301      	movs	r3, #1
 8009384:	e087      	b.n	8009496 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	7d1b      	ldrb	r3, [r3, #20]
 800938a:	b25b      	sxtb	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	da14      	bge.n	80093ba <f_read+0x19a>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a1a      	ldr	r2, [r3, #32]
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800939a:	429a      	cmp	r2, r3
 800939c:	d90d      	bls.n	80093ba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1a      	ldr	r2, [r3, #32]
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	025b      	lsls	r3, r3, #9
 80093a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093aa:	18d0      	adds	r0, r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3330      	adds	r3, #48	; 0x30
 80093b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093b4:	4619      	mov	r1, r3
 80093b6:	f7fe f911 	bl	80075dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	025b      	lsls	r3, r3, #9
 80093be:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80093c0:	e050      	b.n	8009464 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6a1b      	ldr	r3, [r3, #32]
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d02e      	beq.n	800942a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	7d1b      	ldrb	r3, [r3, #20]
 80093d0:	b25b      	sxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	da18      	bge.n	8009408 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	7858      	ldrb	r0, [r3, #1]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6a1a      	ldr	r2, [r3, #32]
 80093e4:	2301      	movs	r3, #1
 80093e6:	f7fe f839 	bl	800745c <disk_write>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d004      	beq.n	80093fa <f_read+0x1da>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2201      	movs	r2, #1
 80093f4:	755a      	strb	r2, [r3, #21]
 80093f6:	2301      	movs	r3, #1
 80093f8:	e04d      	b.n	8009496 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	7d1b      	ldrb	r3, [r3, #20]
 80093fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009402:	b2da      	uxtb	r2, r3
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	7858      	ldrb	r0, [r3, #1]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009412:	2301      	movs	r3, #1
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	f7fe f801 	bl	800741c <disk_read>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d004      	beq.n	800942a <f_read+0x20a>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2201      	movs	r2, #1
 8009424:	755a      	strb	r2, [r3, #21]
 8009426:	2301      	movs	r3, #1
 8009428:	e035      	b.n	8009496 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009438:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800943c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800943e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	429a      	cmp	r2, r3
 8009444:	d901      	bls.n	800944a <f_read+0x22a>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009458:	4413      	add	r3, r2
 800945a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800945c:	4619      	mov	r1, r3
 800945e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009460:	f7fe f8bc 	bl	80075dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	4413      	add	r3, r2
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009472:	441a      	add	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	619a      	str	r2, [r3, #24]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	441a      	add	r2, r3
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	f47f af01 	bne.w	8009296 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3738      	adds	r7, #56	; 0x38
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b086      	sub	sp, #24
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f107 0208 	add.w	r2, r7, #8
 80094ac:	4611      	mov	r1, r2
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7ff fc7c 	bl	8008dac <validate>
 80094b4:	4603      	mov	r3, r0
 80094b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d168      	bne.n	8009590 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	7d1b      	ldrb	r3, [r3, #20]
 80094c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d062      	beq.n	8009590 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	7d1b      	ldrb	r3, [r3, #20]
 80094ce:	b25b      	sxtb	r3, r3
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	da15      	bge.n	8009500 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	7858      	ldrb	r0, [r3, #1]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1a      	ldr	r2, [r3, #32]
 80094e2:	2301      	movs	r3, #1
 80094e4:	f7fd ffba 	bl	800745c <disk_write>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <f_sync+0x54>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e04f      	b.n	8009592 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	7d1b      	ldrb	r3, [r3, #20]
 80094f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009500:	f7fd fa0e 	bl	8006920 <get_fattime>
 8009504:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	4619      	mov	r1, r3
 800950e:	4610      	mov	r0, r2
 8009510:	f7fe fa92 	bl	8007a38 <move_window>
 8009514:	4603      	mov	r3, r0
 8009516:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d138      	bne.n	8009590 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009522:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	330b      	adds	r3, #11
 8009528:	781a      	ldrb	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	330b      	adds	r3, #11
 800952e:	f042 0220 	orr.w	r2, r2, #32
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6818      	ldr	r0, [r3, #0]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	461a      	mov	r2, r3
 8009540:	68f9      	ldr	r1, [r7, #12]
 8009542:	f7fe ff9f 	bl	8008484 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f103 021c 	add.w	r2, r3, #28
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	4619      	mov	r1, r3
 8009552:	4610      	mov	r0, r2
 8009554:	f7fe f816 	bl	8007584 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	3316      	adds	r3, #22
 800955c:	6939      	ldr	r1, [r7, #16]
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe f810 	bl	8007584 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3312      	adds	r3, #18
 8009568:	2100      	movs	r1, #0
 800956a:	4618      	mov	r0, r3
 800956c:	f7fd ffef 	bl	800754e <st_word>
					fs->wflag = 1;
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	2201      	movs	r2, #1
 8009574:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe fa8b 	bl	8007a94 <sync_fs>
 800957e:	4603      	mov	r3, r0
 8009580:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	7d1b      	ldrb	r3, [r3, #20]
 8009586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800958a:	b2da      	uxtb	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009590:	7dfb      	ldrb	r3, [r7, #23]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7ff ff7b 	bl	800949e <f_sync>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d118      	bne.n	80095e4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f107 0208 	add.w	r2, r7, #8
 80095b8:	4611      	mov	r1, r2
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff fbf6 	bl	8008dac <validate>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10c      	bne.n	80095e4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fe f98e 	bl	80078f0 <dec_lock>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d102      	bne.n	80095e4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	4613      	mov	r3, r2
 80095fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80095fe:	2301      	movs	r3, #1
 8009600:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009602:	2300      	movs	r3, #0
 8009604:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009606:	4b1f      	ldr	r3, [pc, #124]	; (8009684 <FATFS_LinkDriverEx+0x94>)
 8009608:	7a5b      	ldrb	r3, [r3, #9]
 800960a:	b2db      	uxtb	r3, r3
 800960c:	2b00      	cmp	r3, #0
 800960e:	d131      	bne.n	8009674 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009610:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <FATFS_LinkDriverEx+0x94>)
 8009612:	7a5b      	ldrb	r3, [r3, #9]
 8009614:	b2db      	uxtb	r3, r3
 8009616:	461a      	mov	r2, r3
 8009618:	4b1a      	ldr	r3, [pc, #104]	; (8009684 <FATFS_LinkDriverEx+0x94>)
 800961a:	2100      	movs	r1, #0
 800961c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800961e:	4b19      	ldr	r3, [pc, #100]	; (8009684 <FATFS_LinkDriverEx+0x94>)
 8009620:	7a5b      	ldrb	r3, [r3, #9]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	4a17      	ldr	r2, [pc, #92]	; (8009684 <FATFS_LinkDriverEx+0x94>)
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800962e:	4b15      	ldr	r3, [pc, #84]	; (8009684 <FATFS_LinkDriverEx+0x94>)
 8009630:	7a5b      	ldrb	r3, [r3, #9]
 8009632:	b2db      	uxtb	r3, r3
 8009634:	461a      	mov	r2, r3
 8009636:	4b13      	ldr	r3, [pc, #76]	; (8009684 <FATFS_LinkDriverEx+0x94>)
 8009638:	4413      	add	r3, r2
 800963a:	79fa      	ldrb	r2, [r7, #7]
 800963c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800963e:	4b11      	ldr	r3, [pc, #68]	; (8009684 <FATFS_LinkDriverEx+0x94>)
 8009640:	7a5b      	ldrb	r3, [r3, #9]
 8009642:	b2db      	uxtb	r3, r3
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	b2d1      	uxtb	r1, r2
 8009648:	4a0e      	ldr	r2, [pc, #56]	; (8009684 <FATFS_LinkDriverEx+0x94>)
 800964a:	7251      	strb	r1, [r2, #9]
 800964c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800964e:	7dbb      	ldrb	r3, [r7, #22]
 8009650:	3330      	adds	r3, #48	; 0x30
 8009652:	b2da      	uxtb	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	3301      	adds	r3, #1
 800965c:	223a      	movs	r2, #58	; 0x3a
 800965e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	3302      	adds	r3, #2
 8009664:	222f      	movs	r2, #47	; 0x2f
 8009666:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	3303      	adds	r3, #3
 800966c:	2200      	movs	r2, #0
 800966e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009670:	2300      	movs	r3, #0
 8009672:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009674:	7dfb      	ldrb	r3, [r7, #23]
}
 8009676:	4618      	mov	r0, r3
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	200135f0 	.word	0x200135f0

08009688 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009692:	2200      	movs	r2, #0
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff ffaa 	bl	80095f0 <FATFS_LinkDriverEx>
 800969c:	4603      	mov	r3, r0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <__errno>:
 80096a8:	4b01      	ldr	r3, [pc, #4]	; (80096b0 <__errno+0x8>)
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20000118 	.word	0x20000118

080096b4 <__libc_init_array>:
 80096b4:	b570      	push	{r4, r5, r6, lr}
 80096b6:	4d0d      	ldr	r5, [pc, #52]	; (80096ec <__libc_init_array+0x38>)
 80096b8:	4c0d      	ldr	r4, [pc, #52]	; (80096f0 <__libc_init_array+0x3c>)
 80096ba:	1b64      	subs	r4, r4, r5
 80096bc:	10a4      	asrs	r4, r4, #2
 80096be:	2600      	movs	r6, #0
 80096c0:	42a6      	cmp	r6, r4
 80096c2:	d109      	bne.n	80096d8 <__libc_init_array+0x24>
 80096c4:	4d0b      	ldr	r5, [pc, #44]	; (80096f4 <__libc_init_array+0x40>)
 80096c6:	4c0c      	ldr	r4, [pc, #48]	; (80096f8 <__libc_init_array+0x44>)
 80096c8:	f001 f832 	bl	800a730 <_init>
 80096cc:	1b64      	subs	r4, r4, r5
 80096ce:	10a4      	asrs	r4, r4, #2
 80096d0:	2600      	movs	r6, #0
 80096d2:	42a6      	cmp	r6, r4
 80096d4:	d105      	bne.n	80096e2 <__libc_init_array+0x2e>
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096dc:	4798      	blx	r3
 80096de:	3601      	adds	r6, #1
 80096e0:	e7ee      	b.n	80096c0 <__libc_init_array+0xc>
 80096e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e6:	4798      	blx	r3
 80096e8:	3601      	adds	r6, #1
 80096ea:	e7f2      	b.n	80096d2 <__libc_init_array+0x1e>
 80096ec:	0800ab4c 	.word	0x0800ab4c
 80096f0:	0800ab4c 	.word	0x0800ab4c
 80096f4:	0800ab4c 	.word	0x0800ab4c
 80096f8:	0800ab50 	.word	0x0800ab50

080096fc <memcpy>:
 80096fc:	440a      	add	r2, r1
 80096fe:	4291      	cmp	r1, r2
 8009700:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009704:	d100      	bne.n	8009708 <memcpy+0xc>
 8009706:	4770      	bx	lr
 8009708:	b510      	push	{r4, lr}
 800970a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800970e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009712:	4291      	cmp	r1, r2
 8009714:	d1f9      	bne.n	800970a <memcpy+0xe>
 8009716:	bd10      	pop	{r4, pc}

08009718 <memset>:
 8009718:	4402      	add	r2, r0
 800971a:	4603      	mov	r3, r0
 800971c:	4293      	cmp	r3, r2
 800971e:	d100      	bne.n	8009722 <memset+0xa>
 8009720:	4770      	bx	lr
 8009722:	f803 1b01 	strb.w	r1, [r3], #1
 8009726:	e7f9      	b.n	800971c <memset+0x4>

08009728 <iprintf>:
 8009728:	b40f      	push	{r0, r1, r2, r3}
 800972a:	4b0a      	ldr	r3, [pc, #40]	; (8009754 <iprintf+0x2c>)
 800972c:	b513      	push	{r0, r1, r4, lr}
 800972e:	681c      	ldr	r4, [r3, #0]
 8009730:	b124      	cbz	r4, 800973c <iprintf+0x14>
 8009732:	69a3      	ldr	r3, [r4, #24]
 8009734:	b913      	cbnz	r3, 800973c <iprintf+0x14>
 8009736:	4620      	mov	r0, r4
 8009738:	f000 fa5e 	bl	8009bf8 <__sinit>
 800973c:	ab05      	add	r3, sp, #20
 800973e:	9a04      	ldr	r2, [sp, #16]
 8009740:	68a1      	ldr	r1, [r4, #8]
 8009742:	9301      	str	r3, [sp, #4]
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fc67 	bl	800a018 <_vfiprintf_r>
 800974a:	b002      	add	sp, #8
 800974c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009750:	b004      	add	sp, #16
 8009752:	4770      	bx	lr
 8009754:	20000118 	.word	0x20000118

08009758 <_puts_r>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	460e      	mov	r6, r1
 800975c:	4605      	mov	r5, r0
 800975e:	b118      	cbz	r0, 8009768 <_puts_r+0x10>
 8009760:	6983      	ldr	r3, [r0, #24]
 8009762:	b90b      	cbnz	r3, 8009768 <_puts_r+0x10>
 8009764:	f000 fa48 	bl	8009bf8 <__sinit>
 8009768:	69ab      	ldr	r3, [r5, #24]
 800976a:	68ac      	ldr	r4, [r5, #8]
 800976c:	b913      	cbnz	r3, 8009774 <_puts_r+0x1c>
 800976e:	4628      	mov	r0, r5
 8009770:	f000 fa42 	bl	8009bf8 <__sinit>
 8009774:	4b2c      	ldr	r3, [pc, #176]	; (8009828 <_puts_r+0xd0>)
 8009776:	429c      	cmp	r4, r3
 8009778:	d120      	bne.n	80097bc <_puts_r+0x64>
 800977a:	686c      	ldr	r4, [r5, #4]
 800977c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800977e:	07db      	lsls	r3, r3, #31
 8009780:	d405      	bmi.n	800978e <_puts_r+0x36>
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	0598      	lsls	r0, r3, #22
 8009786:	d402      	bmi.n	800978e <_puts_r+0x36>
 8009788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800978a:	f000 fad3 	bl	8009d34 <__retarget_lock_acquire_recursive>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	0719      	lsls	r1, r3, #28
 8009792:	d51d      	bpl.n	80097d0 <_puts_r+0x78>
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	b1db      	cbz	r3, 80097d0 <_puts_r+0x78>
 8009798:	3e01      	subs	r6, #1
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097a0:	3b01      	subs	r3, #1
 80097a2:	60a3      	str	r3, [r4, #8]
 80097a4:	bb39      	cbnz	r1, 80097f6 <_puts_r+0x9e>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	da38      	bge.n	800981c <_puts_r+0xc4>
 80097aa:	4622      	mov	r2, r4
 80097ac:	210a      	movs	r1, #10
 80097ae:	4628      	mov	r0, r5
 80097b0:	f000 f848 	bl	8009844 <__swbuf_r>
 80097b4:	3001      	adds	r0, #1
 80097b6:	d011      	beq.n	80097dc <_puts_r+0x84>
 80097b8:	250a      	movs	r5, #10
 80097ba:	e011      	b.n	80097e0 <_puts_r+0x88>
 80097bc:	4b1b      	ldr	r3, [pc, #108]	; (800982c <_puts_r+0xd4>)
 80097be:	429c      	cmp	r4, r3
 80097c0:	d101      	bne.n	80097c6 <_puts_r+0x6e>
 80097c2:	68ac      	ldr	r4, [r5, #8]
 80097c4:	e7da      	b.n	800977c <_puts_r+0x24>
 80097c6:	4b1a      	ldr	r3, [pc, #104]	; (8009830 <_puts_r+0xd8>)
 80097c8:	429c      	cmp	r4, r3
 80097ca:	bf08      	it	eq
 80097cc:	68ec      	ldreq	r4, [r5, #12]
 80097ce:	e7d5      	b.n	800977c <_puts_r+0x24>
 80097d0:	4621      	mov	r1, r4
 80097d2:	4628      	mov	r0, r5
 80097d4:	f000 f888 	bl	80098e8 <__swsetup_r>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d0dd      	beq.n	8009798 <_puts_r+0x40>
 80097dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80097e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097e2:	07da      	lsls	r2, r3, #31
 80097e4:	d405      	bmi.n	80097f2 <_puts_r+0x9a>
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	059b      	lsls	r3, r3, #22
 80097ea:	d402      	bmi.n	80097f2 <_puts_r+0x9a>
 80097ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ee:	f000 faa2 	bl	8009d36 <__retarget_lock_release_recursive>
 80097f2:	4628      	mov	r0, r5
 80097f4:	bd70      	pop	{r4, r5, r6, pc}
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	da04      	bge.n	8009804 <_puts_r+0xac>
 80097fa:	69a2      	ldr	r2, [r4, #24]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	dc06      	bgt.n	800980e <_puts_r+0xb6>
 8009800:	290a      	cmp	r1, #10
 8009802:	d004      	beq.n	800980e <_puts_r+0xb6>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	1c5a      	adds	r2, r3, #1
 8009808:	6022      	str	r2, [r4, #0]
 800980a:	7019      	strb	r1, [r3, #0]
 800980c:	e7c5      	b.n	800979a <_puts_r+0x42>
 800980e:	4622      	mov	r2, r4
 8009810:	4628      	mov	r0, r5
 8009812:	f000 f817 	bl	8009844 <__swbuf_r>
 8009816:	3001      	adds	r0, #1
 8009818:	d1bf      	bne.n	800979a <_puts_r+0x42>
 800981a:	e7df      	b.n	80097dc <_puts_r+0x84>
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	250a      	movs	r5, #10
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	6022      	str	r2, [r4, #0]
 8009824:	701d      	strb	r5, [r3, #0]
 8009826:	e7db      	b.n	80097e0 <_puts_r+0x88>
 8009828:	0800aad0 	.word	0x0800aad0
 800982c:	0800aaf0 	.word	0x0800aaf0
 8009830:	0800aab0 	.word	0x0800aab0

08009834 <puts>:
 8009834:	4b02      	ldr	r3, [pc, #8]	; (8009840 <puts+0xc>)
 8009836:	4601      	mov	r1, r0
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	f7ff bf8d 	b.w	8009758 <_puts_r>
 800983e:	bf00      	nop
 8009840:	20000118 	.word	0x20000118

08009844 <__swbuf_r>:
 8009844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009846:	460e      	mov	r6, r1
 8009848:	4614      	mov	r4, r2
 800984a:	4605      	mov	r5, r0
 800984c:	b118      	cbz	r0, 8009856 <__swbuf_r+0x12>
 800984e:	6983      	ldr	r3, [r0, #24]
 8009850:	b90b      	cbnz	r3, 8009856 <__swbuf_r+0x12>
 8009852:	f000 f9d1 	bl	8009bf8 <__sinit>
 8009856:	4b21      	ldr	r3, [pc, #132]	; (80098dc <__swbuf_r+0x98>)
 8009858:	429c      	cmp	r4, r3
 800985a:	d12b      	bne.n	80098b4 <__swbuf_r+0x70>
 800985c:	686c      	ldr	r4, [r5, #4]
 800985e:	69a3      	ldr	r3, [r4, #24]
 8009860:	60a3      	str	r3, [r4, #8]
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	071a      	lsls	r2, r3, #28
 8009866:	d52f      	bpl.n	80098c8 <__swbuf_r+0x84>
 8009868:	6923      	ldr	r3, [r4, #16]
 800986a:	b36b      	cbz	r3, 80098c8 <__swbuf_r+0x84>
 800986c:	6923      	ldr	r3, [r4, #16]
 800986e:	6820      	ldr	r0, [r4, #0]
 8009870:	1ac0      	subs	r0, r0, r3
 8009872:	6963      	ldr	r3, [r4, #20]
 8009874:	b2f6      	uxtb	r6, r6
 8009876:	4283      	cmp	r3, r0
 8009878:	4637      	mov	r7, r6
 800987a:	dc04      	bgt.n	8009886 <__swbuf_r+0x42>
 800987c:	4621      	mov	r1, r4
 800987e:	4628      	mov	r0, r5
 8009880:	f000 f926 	bl	8009ad0 <_fflush_r>
 8009884:	bb30      	cbnz	r0, 80098d4 <__swbuf_r+0x90>
 8009886:	68a3      	ldr	r3, [r4, #8]
 8009888:	3b01      	subs	r3, #1
 800988a:	60a3      	str	r3, [r4, #8]
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	1c5a      	adds	r2, r3, #1
 8009890:	6022      	str	r2, [r4, #0]
 8009892:	701e      	strb	r6, [r3, #0]
 8009894:	6963      	ldr	r3, [r4, #20]
 8009896:	3001      	adds	r0, #1
 8009898:	4283      	cmp	r3, r0
 800989a:	d004      	beq.n	80098a6 <__swbuf_r+0x62>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	07db      	lsls	r3, r3, #31
 80098a0:	d506      	bpl.n	80098b0 <__swbuf_r+0x6c>
 80098a2:	2e0a      	cmp	r6, #10
 80098a4:	d104      	bne.n	80098b0 <__swbuf_r+0x6c>
 80098a6:	4621      	mov	r1, r4
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 f911 	bl	8009ad0 <_fflush_r>
 80098ae:	b988      	cbnz	r0, 80098d4 <__swbuf_r+0x90>
 80098b0:	4638      	mov	r0, r7
 80098b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b4:	4b0a      	ldr	r3, [pc, #40]	; (80098e0 <__swbuf_r+0x9c>)
 80098b6:	429c      	cmp	r4, r3
 80098b8:	d101      	bne.n	80098be <__swbuf_r+0x7a>
 80098ba:	68ac      	ldr	r4, [r5, #8]
 80098bc:	e7cf      	b.n	800985e <__swbuf_r+0x1a>
 80098be:	4b09      	ldr	r3, [pc, #36]	; (80098e4 <__swbuf_r+0xa0>)
 80098c0:	429c      	cmp	r4, r3
 80098c2:	bf08      	it	eq
 80098c4:	68ec      	ldreq	r4, [r5, #12]
 80098c6:	e7ca      	b.n	800985e <__swbuf_r+0x1a>
 80098c8:	4621      	mov	r1, r4
 80098ca:	4628      	mov	r0, r5
 80098cc:	f000 f80c 	bl	80098e8 <__swsetup_r>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d0cb      	beq.n	800986c <__swbuf_r+0x28>
 80098d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80098d8:	e7ea      	b.n	80098b0 <__swbuf_r+0x6c>
 80098da:	bf00      	nop
 80098dc:	0800aad0 	.word	0x0800aad0
 80098e0:	0800aaf0 	.word	0x0800aaf0
 80098e4:	0800aab0 	.word	0x0800aab0

080098e8 <__swsetup_r>:
 80098e8:	4b32      	ldr	r3, [pc, #200]	; (80099b4 <__swsetup_r+0xcc>)
 80098ea:	b570      	push	{r4, r5, r6, lr}
 80098ec:	681d      	ldr	r5, [r3, #0]
 80098ee:	4606      	mov	r6, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	b125      	cbz	r5, 80098fe <__swsetup_r+0x16>
 80098f4:	69ab      	ldr	r3, [r5, #24]
 80098f6:	b913      	cbnz	r3, 80098fe <__swsetup_r+0x16>
 80098f8:	4628      	mov	r0, r5
 80098fa:	f000 f97d 	bl	8009bf8 <__sinit>
 80098fe:	4b2e      	ldr	r3, [pc, #184]	; (80099b8 <__swsetup_r+0xd0>)
 8009900:	429c      	cmp	r4, r3
 8009902:	d10f      	bne.n	8009924 <__swsetup_r+0x3c>
 8009904:	686c      	ldr	r4, [r5, #4]
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800990c:	0719      	lsls	r1, r3, #28
 800990e:	d42c      	bmi.n	800996a <__swsetup_r+0x82>
 8009910:	06dd      	lsls	r5, r3, #27
 8009912:	d411      	bmi.n	8009938 <__swsetup_r+0x50>
 8009914:	2309      	movs	r3, #9
 8009916:	6033      	str	r3, [r6, #0]
 8009918:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009922:	e03e      	b.n	80099a2 <__swsetup_r+0xba>
 8009924:	4b25      	ldr	r3, [pc, #148]	; (80099bc <__swsetup_r+0xd4>)
 8009926:	429c      	cmp	r4, r3
 8009928:	d101      	bne.n	800992e <__swsetup_r+0x46>
 800992a:	68ac      	ldr	r4, [r5, #8]
 800992c:	e7eb      	b.n	8009906 <__swsetup_r+0x1e>
 800992e:	4b24      	ldr	r3, [pc, #144]	; (80099c0 <__swsetup_r+0xd8>)
 8009930:	429c      	cmp	r4, r3
 8009932:	bf08      	it	eq
 8009934:	68ec      	ldreq	r4, [r5, #12]
 8009936:	e7e6      	b.n	8009906 <__swsetup_r+0x1e>
 8009938:	0758      	lsls	r0, r3, #29
 800993a:	d512      	bpl.n	8009962 <__swsetup_r+0x7a>
 800993c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800993e:	b141      	cbz	r1, 8009952 <__swsetup_r+0x6a>
 8009940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009944:	4299      	cmp	r1, r3
 8009946:	d002      	beq.n	800994e <__swsetup_r+0x66>
 8009948:	4630      	mov	r0, r6
 800994a:	f000 fa5b 	bl	8009e04 <_free_r>
 800994e:	2300      	movs	r3, #0
 8009950:	6363      	str	r3, [r4, #52]	; 0x34
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	2300      	movs	r3, #0
 800995c:	6063      	str	r3, [r4, #4]
 800995e:	6923      	ldr	r3, [r4, #16]
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	89a3      	ldrh	r3, [r4, #12]
 8009964:	f043 0308 	orr.w	r3, r3, #8
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	6923      	ldr	r3, [r4, #16]
 800996c:	b94b      	cbnz	r3, 8009982 <__swsetup_r+0x9a>
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009978:	d003      	beq.n	8009982 <__swsetup_r+0x9a>
 800997a:	4621      	mov	r1, r4
 800997c:	4630      	mov	r0, r6
 800997e:	f000 fa01 	bl	8009d84 <__smakebuf_r>
 8009982:	89a0      	ldrh	r0, [r4, #12]
 8009984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009988:	f010 0301 	ands.w	r3, r0, #1
 800998c:	d00a      	beq.n	80099a4 <__swsetup_r+0xbc>
 800998e:	2300      	movs	r3, #0
 8009990:	60a3      	str	r3, [r4, #8]
 8009992:	6963      	ldr	r3, [r4, #20]
 8009994:	425b      	negs	r3, r3
 8009996:	61a3      	str	r3, [r4, #24]
 8009998:	6923      	ldr	r3, [r4, #16]
 800999a:	b943      	cbnz	r3, 80099ae <__swsetup_r+0xc6>
 800999c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099a0:	d1ba      	bne.n	8009918 <__swsetup_r+0x30>
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
 80099a4:	0781      	lsls	r1, r0, #30
 80099a6:	bf58      	it	pl
 80099a8:	6963      	ldrpl	r3, [r4, #20]
 80099aa:	60a3      	str	r3, [r4, #8]
 80099ac:	e7f4      	b.n	8009998 <__swsetup_r+0xb0>
 80099ae:	2000      	movs	r0, #0
 80099b0:	e7f7      	b.n	80099a2 <__swsetup_r+0xba>
 80099b2:	bf00      	nop
 80099b4:	20000118 	.word	0x20000118
 80099b8:	0800aad0 	.word	0x0800aad0
 80099bc:	0800aaf0 	.word	0x0800aaf0
 80099c0:	0800aab0 	.word	0x0800aab0

080099c4 <__sflush_r>:
 80099c4:	898a      	ldrh	r2, [r1, #12]
 80099c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ca:	4605      	mov	r5, r0
 80099cc:	0710      	lsls	r0, r2, #28
 80099ce:	460c      	mov	r4, r1
 80099d0:	d458      	bmi.n	8009a84 <__sflush_r+0xc0>
 80099d2:	684b      	ldr	r3, [r1, #4]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	dc05      	bgt.n	80099e4 <__sflush_r+0x20>
 80099d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099da:	2b00      	cmp	r3, #0
 80099dc:	dc02      	bgt.n	80099e4 <__sflush_r+0x20>
 80099de:	2000      	movs	r0, #0
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099e6:	2e00      	cmp	r6, #0
 80099e8:	d0f9      	beq.n	80099de <__sflush_r+0x1a>
 80099ea:	2300      	movs	r3, #0
 80099ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099f0:	682f      	ldr	r7, [r5, #0]
 80099f2:	602b      	str	r3, [r5, #0]
 80099f4:	d032      	beq.n	8009a5c <__sflush_r+0x98>
 80099f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	075a      	lsls	r2, r3, #29
 80099fc:	d505      	bpl.n	8009a0a <__sflush_r+0x46>
 80099fe:	6863      	ldr	r3, [r4, #4]
 8009a00:	1ac0      	subs	r0, r0, r3
 8009a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a04:	b10b      	cbz	r3, 8009a0a <__sflush_r+0x46>
 8009a06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a08:	1ac0      	subs	r0, r0, r3
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a10:	6a21      	ldr	r1, [r4, #32]
 8009a12:	4628      	mov	r0, r5
 8009a14:	47b0      	blx	r6
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	d106      	bne.n	8009a2a <__sflush_r+0x66>
 8009a1c:	6829      	ldr	r1, [r5, #0]
 8009a1e:	291d      	cmp	r1, #29
 8009a20:	d82c      	bhi.n	8009a7c <__sflush_r+0xb8>
 8009a22:	4a2a      	ldr	r2, [pc, #168]	; (8009acc <__sflush_r+0x108>)
 8009a24:	40ca      	lsrs	r2, r1
 8009a26:	07d6      	lsls	r6, r2, #31
 8009a28:	d528      	bpl.n	8009a7c <__sflush_r+0xb8>
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	6062      	str	r2, [r4, #4]
 8009a2e:	04d9      	lsls	r1, r3, #19
 8009a30:	6922      	ldr	r2, [r4, #16]
 8009a32:	6022      	str	r2, [r4, #0]
 8009a34:	d504      	bpl.n	8009a40 <__sflush_r+0x7c>
 8009a36:	1c42      	adds	r2, r0, #1
 8009a38:	d101      	bne.n	8009a3e <__sflush_r+0x7a>
 8009a3a:	682b      	ldr	r3, [r5, #0]
 8009a3c:	b903      	cbnz	r3, 8009a40 <__sflush_r+0x7c>
 8009a3e:	6560      	str	r0, [r4, #84]	; 0x54
 8009a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a42:	602f      	str	r7, [r5, #0]
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d0ca      	beq.n	80099de <__sflush_r+0x1a>
 8009a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a4c:	4299      	cmp	r1, r3
 8009a4e:	d002      	beq.n	8009a56 <__sflush_r+0x92>
 8009a50:	4628      	mov	r0, r5
 8009a52:	f000 f9d7 	bl	8009e04 <_free_r>
 8009a56:	2000      	movs	r0, #0
 8009a58:	6360      	str	r0, [r4, #52]	; 0x34
 8009a5a:	e7c1      	b.n	80099e0 <__sflush_r+0x1c>
 8009a5c:	6a21      	ldr	r1, [r4, #32]
 8009a5e:	2301      	movs	r3, #1
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b0      	blx	r6
 8009a64:	1c41      	adds	r1, r0, #1
 8009a66:	d1c7      	bne.n	80099f8 <__sflush_r+0x34>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0c4      	beq.n	80099f8 <__sflush_r+0x34>
 8009a6e:	2b1d      	cmp	r3, #29
 8009a70:	d001      	beq.n	8009a76 <__sflush_r+0xb2>
 8009a72:	2b16      	cmp	r3, #22
 8009a74:	d101      	bne.n	8009a7a <__sflush_r+0xb6>
 8009a76:	602f      	str	r7, [r5, #0]
 8009a78:	e7b1      	b.n	80099de <__sflush_r+0x1a>
 8009a7a:	89a3      	ldrh	r3, [r4, #12]
 8009a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a80:	81a3      	strh	r3, [r4, #12]
 8009a82:	e7ad      	b.n	80099e0 <__sflush_r+0x1c>
 8009a84:	690f      	ldr	r7, [r1, #16]
 8009a86:	2f00      	cmp	r7, #0
 8009a88:	d0a9      	beq.n	80099de <__sflush_r+0x1a>
 8009a8a:	0793      	lsls	r3, r2, #30
 8009a8c:	680e      	ldr	r6, [r1, #0]
 8009a8e:	bf08      	it	eq
 8009a90:	694b      	ldreq	r3, [r1, #20]
 8009a92:	600f      	str	r7, [r1, #0]
 8009a94:	bf18      	it	ne
 8009a96:	2300      	movne	r3, #0
 8009a98:	eba6 0807 	sub.w	r8, r6, r7
 8009a9c:	608b      	str	r3, [r1, #8]
 8009a9e:	f1b8 0f00 	cmp.w	r8, #0
 8009aa2:	dd9c      	ble.n	80099de <__sflush_r+0x1a>
 8009aa4:	6a21      	ldr	r1, [r4, #32]
 8009aa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009aa8:	4643      	mov	r3, r8
 8009aaa:	463a      	mov	r2, r7
 8009aac:	4628      	mov	r0, r5
 8009aae:	47b0      	blx	r6
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	dc06      	bgt.n	8009ac2 <__sflush_r+0xfe>
 8009ab4:	89a3      	ldrh	r3, [r4, #12]
 8009ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aba:	81a3      	strh	r3, [r4, #12]
 8009abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ac0:	e78e      	b.n	80099e0 <__sflush_r+0x1c>
 8009ac2:	4407      	add	r7, r0
 8009ac4:	eba8 0800 	sub.w	r8, r8, r0
 8009ac8:	e7e9      	b.n	8009a9e <__sflush_r+0xda>
 8009aca:	bf00      	nop
 8009acc:	20400001 	.word	0x20400001

08009ad0 <_fflush_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	690b      	ldr	r3, [r1, #16]
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	b913      	cbnz	r3, 8009ae0 <_fflush_r+0x10>
 8009ada:	2500      	movs	r5, #0
 8009adc:	4628      	mov	r0, r5
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	b118      	cbz	r0, 8009aea <_fflush_r+0x1a>
 8009ae2:	6983      	ldr	r3, [r0, #24]
 8009ae4:	b90b      	cbnz	r3, 8009aea <_fflush_r+0x1a>
 8009ae6:	f000 f887 	bl	8009bf8 <__sinit>
 8009aea:	4b14      	ldr	r3, [pc, #80]	; (8009b3c <_fflush_r+0x6c>)
 8009aec:	429c      	cmp	r4, r3
 8009aee:	d11b      	bne.n	8009b28 <_fflush_r+0x58>
 8009af0:	686c      	ldr	r4, [r5, #4]
 8009af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0ef      	beq.n	8009ada <_fflush_r+0xa>
 8009afa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009afc:	07d0      	lsls	r0, r2, #31
 8009afe:	d404      	bmi.n	8009b0a <_fflush_r+0x3a>
 8009b00:	0599      	lsls	r1, r3, #22
 8009b02:	d402      	bmi.n	8009b0a <_fflush_r+0x3a>
 8009b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b06:	f000 f915 	bl	8009d34 <__retarget_lock_acquire_recursive>
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	f7ff ff59 	bl	80099c4 <__sflush_r>
 8009b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b14:	07da      	lsls	r2, r3, #31
 8009b16:	4605      	mov	r5, r0
 8009b18:	d4e0      	bmi.n	8009adc <_fflush_r+0xc>
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	059b      	lsls	r3, r3, #22
 8009b1e:	d4dd      	bmi.n	8009adc <_fflush_r+0xc>
 8009b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b22:	f000 f908 	bl	8009d36 <__retarget_lock_release_recursive>
 8009b26:	e7d9      	b.n	8009adc <_fflush_r+0xc>
 8009b28:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <_fflush_r+0x70>)
 8009b2a:	429c      	cmp	r4, r3
 8009b2c:	d101      	bne.n	8009b32 <_fflush_r+0x62>
 8009b2e:	68ac      	ldr	r4, [r5, #8]
 8009b30:	e7df      	b.n	8009af2 <_fflush_r+0x22>
 8009b32:	4b04      	ldr	r3, [pc, #16]	; (8009b44 <_fflush_r+0x74>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	bf08      	it	eq
 8009b38:	68ec      	ldreq	r4, [r5, #12]
 8009b3a:	e7da      	b.n	8009af2 <_fflush_r+0x22>
 8009b3c:	0800aad0 	.word	0x0800aad0
 8009b40:	0800aaf0 	.word	0x0800aaf0
 8009b44:	0800aab0 	.word	0x0800aab0

08009b48 <std>:
 8009b48:	2300      	movs	r3, #0
 8009b4a:	b510      	push	{r4, lr}
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b56:	6083      	str	r3, [r0, #8]
 8009b58:	8181      	strh	r1, [r0, #12]
 8009b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b5c:	81c2      	strh	r2, [r0, #14]
 8009b5e:	6183      	str	r3, [r0, #24]
 8009b60:	4619      	mov	r1, r3
 8009b62:	2208      	movs	r2, #8
 8009b64:	305c      	adds	r0, #92	; 0x5c
 8009b66:	f7ff fdd7 	bl	8009718 <memset>
 8009b6a:	4b05      	ldr	r3, [pc, #20]	; (8009b80 <std+0x38>)
 8009b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b6e:	4b05      	ldr	r3, [pc, #20]	; (8009b84 <std+0x3c>)
 8009b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b72:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <std+0x40>)
 8009b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b76:	4b05      	ldr	r3, [pc, #20]	; (8009b8c <std+0x44>)
 8009b78:	6224      	str	r4, [r4, #32]
 8009b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009b7c:	bd10      	pop	{r4, pc}
 8009b7e:	bf00      	nop
 8009b80:	0800a5c1 	.word	0x0800a5c1
 8009b84:	0800a5e3 	.word	0x0800a5e3
 8009b88:	0800a61b 	.word	0x0800a61b
 8009b8c:	0800a63f 	.word	0x0800a63f

08009b90 <_cleanup_r>:
 8009b90:	4901      	ldr	r1, [pc, #4]	; (8009b98 <_cleanup_r+0x8>)
 8009b92:	f000 b8af 	b.w	8009cf4 <_fwalk_reent>
 8009b96:	bf00      	nop
 8009b98:	08009ad1 	.word	0x08009ad1

08009b9c <__sfmoreglue>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	2268      	movs	r2, #104	; 0x68
 8009ba0:	1e4d      	subs	r5, r1, #1
 8009ba2:	4355      	muls	r5, r2
 8009ba4:	460e      	mov	r6, r1
 8009ba6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009baa:	f000 f997 	bl	8009edc <_malloc_r>
 8009bae:	4604      	mov	r4, r0
 8009bb0:	b140      	cbz	r0, 8009bc4 <__sfmoreglue+0x28>
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	e9c0 1600 	strd	r1, r6, [r0]
 8009bb8:	300c      	adds	r0, #12
 8009bba:	60a0      	str	r0, [r4, #8]
 8009bbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bc0:	f7ff fdaa 	bl	8009718 <memset>
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	bd70      	pop	{r4, r5, r6, pc}

08009bc8 <__sfp_lock_acquire>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	; (8009bd0 <__sfp_lock_acquire+0x8>)
 8009bca:	f000 b8b3 	b.w	8009d34 <__retarget_lock_acquire_recursive>
 8009bce:	bf00      	nop
 8009bd0:	200135fd 	.word	0x200135fd

08009bd4 <__sfp_lock_release>:
 8009bd4:	4801      	ldr	r0, [pc, #4]	; (8009bdc <__sfp_lock_release+0x8>)
 8009bd6:	f000 b8ae 	b.w	8009d36 <__retarget_lock_release_recursive>
 8009bda:	bf00      	nop
 8009bdc:	200135fd 	.word	0x200135fd

08009be0 <__sinit_lock_acquire>:
 8009be0:	4801      	ldr	r0, [pc, #4]	; (8009be8 <__sinit_lock_acquire+0x8>)
 8009be2:	f000 b8a7 	b.w	8009d34 <__retarget_lock_acquire_recursive>
 8009be6:	bf00      	nop
 8009be8:	200135fe 	.word	0x200135fe

08009bec <__sinit_lock_release>:
 8009bec:	4801      	ldr	r0, [pc, #4]	; (8009bf4 <__sinit_lock_release+0x8>)
 8009bee:	f000 b8a2 	b.w	8009d36 <__retarget_lock_release_recursive>
 8009bf2:	bf00      	nop
 8009bf4:	200135fe 	.word	0x200135fe

08009bf8 <__sinit>:
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	f7ff fff0 	bl	8009be0 <__sinit_lock_acquire>
 8009c00:	69a3      	ldr	r3, [r4, #24]
 8009c02:	b11b      	cbz	r3, 8009c0c <__sinit+0x14>
 8009c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c08:	f7ff bff0 	b.w	8009bec <__sinit_lock_release>
 8009c0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c10:	6523      	str	r3, [r4, #80]	; 0x50
 8009c12:	4b13      	ldr	r3, [pc, #76]	; (8009c60 <__sinit+0x68>)
 8009c14:	4a13      	ldr	r2, [pc, #76]	; (8009c64 <__sinit+0x6c>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c1a:	42a3      	cmp	r3, r4
 8009c1c:	bf04      	itt	eq
 8009c1e:	2301      	moveq	r3, #1
 8009c20:	61a3      	streq	r3, [r4, #24]
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 f820 	bl	8009c68 <__sfp>
 8009c28:	6060      	str	r0, [r4, #4]
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 f81c 	bl	8009c68 <__sfp>
 8009c30:	60a0      	str	r0, [r4, #8]
 8009c32:	4620      	mov	r0, r4
 8009c34:	f000 f818 	bl	8009c68 <__sfp>
 8009c38:	2200      	movs	r2, #0
 8009c3a:	60e0      	str	r0, [r4, #12]
 8009c3c:	2104      	movs	r1, #4
 8009c3e:	6860      	ldr	r0, [r4, #4]
 8009c40:	f7ff ff82 	bl	8009b48 <std>
 8009c44:	68a0      	ldr	r0, [r4, #8]
 8009c46:	2201      	movs	r2, #1
 8009c48:	2109      	movs	r1, #9
 8009c4a:	f7ff ff7d 	bl	8009b48 <std>
 8009c4e:	68e0      	ldr	r0, [r4, #12]
 8009c50:	2202      	movs	r2, #2
 8009c52:	2112      	movs	r1, #18
 8009c54:	f7ff ff78 	bl	8009b48 <std>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	61a3      	str	r3, [r4, #24]
 8009c5c:	e7d2      	b.n	8009c04 <__sinit+0xc>
 8009c5e:	bf00      	nop
 8009c60:	0800aaac 	.word	0x0800aaac
 8009c64:	08009b91 	.word	0x08009b91

08009c68 <__sfp>:
 8009c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6a:	4607      	mov	r7, r0
 8009c6c:	f7ff ffac 	bl	8009bc8 <__sfp_lock_acquire>
 8009c70:	4b1e      	ldr	r3, [pc, #120]	; (8009cec <__sfp+0x84>)
 8009c72:	681e      	ldr	r6, [r3, #0]
 8009c74:	69b3      	ldr	r3, [r6, #24]
 8009c76:	b913      	cbnz	r3, 8009c7e <__sfp+0x16>
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f7ff ffbd 	bl	8009bf8 <__sinit>
 8009c7e:	3648      	adds	r6, #72	; 0x48
 8009c80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c84:	3b01      	subs	r3, #1
 8009c86:	d503      	bpl.n	8009c90 <__sfp+0x28>
 8009c88:	6833      	ldr	r3, [r6, #0]
 8009c8a:	b30b      	cbz	r3, 8009cd0 <__sfp+0x68>
 8009c8c:	6836      	ldr	r6, [r6, #0]
 8009c8e:	e7f7      	b.n	8009c80 <__sfp+0x18>
 8009c90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c94:	b9d5      	cbnz	r5, 8009ccc <__sfp+0x64>
 8009c96:	4b16      	ldr	r3, [pc, #88]	; (8009cf0 <__sfp+0x88>)
 8009c98:	60e3      	str	r3, [r4, #12]
 8009c9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c9e:	6665      	str	r5, [r4, #100]	; 0x64
 8009ca0:	f000 f847 	bl	8009d32 <__retarget_lock_init_recursive>
 8009ca4:	f7ff ff96 	bl	8009bd4 <__sfp_lock_release>
 8009ca8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cb0:	6025      	str	r5, [r4, #0]
 8009cb2:	61a5      	str	r5, [r4, #24]
 8009cb4:	2208      	movs	r2, #8
 8009cb6:	4629      	mov	r1, r5
 8009cb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cbc:	f7ff fd2c 	bl	8009718 <memset>
 8009cc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cc8:	4620      	mov	r0, r4
 8009cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ccc:	3468      	adds	r4, #104	; 0x68
 8009cce:	e7d9      	b.n	8009c84 <__sfp+0x1c>
 8009cd0:	2104      	movs	r1, #4
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	f7ff ff62 	bl	8009b9c <__sfmoreglue>
 8009cd8:	4604      	mov	r4, r0
 8009cda:	6030      	str	r0, [r6, #0]
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d1d5      	bne.n	8009c8c <__sfp+0x24>
 8009ce0:	f7ff ff78 	bl	8009bd4 <__sfp_lock_release>
 8009ce4:	230c      	movs	r3, #12
 8009ce6:	603b      	str	r3, [r7, #0]
 8009ce8:	e7ee      	b.n	8009cc8 <__sfp+0x60>
 8009cea:	bf00      	nop
 8009cec:	0800aaac 	.word	0x0800aaac
 8009cf0:	ffff0001 	.word	0xffff0001

08009cf4 <_fwalk_reent>:
 8009cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	4688      	mov	r8, r1
 8009cfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d00:	2700      	movs	r7, #0
 8009d02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d06:	f1b9 0901 	subs.w	r9, r9, #1
 8009d0a:	d505      	bpl.n	8009d18 <_fwalk_reent+0x24>
 8009d0c:	6824      	ldr	r4, [r4, #0]
 8009d0e:	2c00      	cmp	r4, #0
 8009d10:	d1f7      	bne.n	8009d02 <_fwalk_reent+0xe>
 8009d12:	4638      	mov	r0, r7
 8009d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d18:	89ab      	ldrh	r3, [r5, #12]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d907      	bls.n	8009d2e <_fwalk_reent+0x3a>
 8009d1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d22:	3301      	adds	r3, #1
 8009d24:	d003      	beq.n	8009d2e <_fwalk_reent+0x3a>
 8009d26:	4629      	mov	r1, r5
 8009d28:	4630      	mov	r0, r6
 8009d2a:	47c0      	blx	r8
 8009d2c:	4307      	orrs	r7, r0
 8009d2e:	3568      	adds	r5, #104	; 0x68
 8009d30:	e7e9      	b.n	8009d06 <_fwalk_reent+0x12>

08009d32 <__retarget_lock_init_recursive>:
 8009d32:	4770      	bx	lr

08009d34 <__retarget_lock_acquire_recursive>:
 8009d34:	4770      	bx	lr

08009d36 <__retarget_lock_release_recursive>:
 8009d36:	4770      	bx	lr

08009d38 <__swhatbuf_r>:
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	460e      	mov	r6, r1
 8009d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d40:	2900      	cmp	r1, #0
 8009d42:	b096      	sub	sp, #88	; 0x58
 8009d44:	4614      	mov	r4, r2
 8009d46:	461d      	mov	r5, r3
 8009d48:	da08      	bge.n	8009d5c <__swhatbuf_r+0x24>
 8009d4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	602a      	str	r2, [r5, #0]
 8009d52:	061a      	lsls	r2, r3, #24
 8009d54:	d410      	bmi.n	8009d78 <__swhatbuf_r+0x40>
 8009d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d5a:	e00e      	b.n	8009d7a <__swhatbuf_r+0x42>
 8009d5c:	466a      	mov	r2, sp
 8009d5e:	f000 fc95 	bl	800a68c <_fstat_r>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	dbf1      	blt.n	8009d4a <__swhatbuf_r+0x12>
 8009d66:	9a01      	ldr	r2, [sp, #4]
 8009d68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d70:	425a      	negs	r2, r3
 8009d72:	415a      	adcs	r2, r3
 8009d74:	602a      	str	r2, [r5, #0]
 8009d76:	e7ee      	b.n	8009d56 <__swhatbuf_r+0x1e>
 8009d78:	2340      	movs	r3, #64	; 0x40
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	b016      	add	sp, #88	; 0x58
 8009d80:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d84 <__smakebuf_r>:
 8009d84:	898b      	ldrh	r3, [r1, #12]
 8009d86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d88:	079d      	lsls	r5, r3, #30
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	d507      	bpl.n	8009da0 <__smakebuf_r+0x1c>
 8009d90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	6123      	str	r3, [r4, #16]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	6163      	str	r3, [r4, #20]
 8009d9c:	b002      	add	sp, #8
 8009d9e:	bd70      	pop	{r4, r5, r6, pc}
 8009da0:	ab01      	add	r3, sp, #4
 8009da2:	466a      	mov	r2, sp
 8009da4:	f7ff ffc8 	bl	8009d38 <__swhatbuf_r>
 8009da8:	9900      	ldr	r1, [sp, #0]
 8009daa:	4605      	mov	r5, r0
 8009dac:	4630      	mov	r0, r6
 8009dae:	f000 f895 	bl	8009edc <_malloc_r>
 8009db2:	b948      	cbnz	r0, 8009dc8 <__smakebuf_r+0x44>
 8009db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db8:	059a      	lsls	r2, r3, #22
 8009dba:	d4ef      	bmi.n	8009d9c <__smakebuf_r+0x18>
 8009dbc:	f023 0303 	bic.w	r3, r3, #3
 8009dc0:	f043 0302 	orr.w	r3, r3, #2
 8009dc4:	81a3      	strh	r3, [r4, #12]
 8009dc6:	e7e3      	b.n	8009d90 <__smakebuf_r+0xc>
 8009dc8:	4b0d      	ldr	r3, [pc, #52]	; (8009e00 <__smakebuf_r+0x7c>)
 8009dca:	62b3      	str	r3, [r6, #40]	; 0x28
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	6020      	str	r0, [r4, #0]
 8009dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd4:	81a3      	strh	r3, [r4, #12]
 8009dd6:	9b00      	ldr	r3, [sp, #0]
 8009dd8:	6163      	str	r3, [r4, #20]
 8009dda:	9b01      	ldr	r3, [sp, #4]
 8009ddc:	6120      	str	r0, [r4, #16]
 8009dde:	b15b      	cbz	r3, 8009df8 <__smakebuf_r+0x74>
 8009de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009de4:	4630      	mov	r0, r6
 8009de6:	f000 fc63 	bl	800a6b0 <_isatty_r>
 8009dea:	b128      	cbz	r0, 8009df8 <__smakebuf_r+0x74>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f023 0303 	bic.w	r3, r3, #3
 8009df2:	f043 0301 	orr.w	r3, r3, #1
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	89a0      	ldrh	r0, [r4, #12]
 8009dfa:	4305      	orrs	r5, r0
 8009dfc:	81a5      	strh	r5, [r4, #12]
 8009dfe:	e7cd      	b.n	8009d9c <__smakebuf_r+0x18>
 8009e00:	08009b91 	.word	0x08009b91

08009e04 <_free_r>:
 8009e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e06:	2900      	cmp	r1, #0
 8009e08:	d044      	beq.n	8009e94 <_free_r+0x90>
 8009e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e0e:	9001      	str	r0, [sp, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f1a1 0404 	sub.w	r4, r1, #4
 8009e16:	bfb8      	it	lt
 8009e18:	18e4      	addlt	r4, r4, r3
 8009e1a:	f000 fc6b 	bl	800a6f4 <__malloc_lock>
 8009e1e:	4a1e      	ldr	r2, [pc, #120]	; (8009e98 <_free_r+0x94>)
 8009e20:	9801      	ldr	r0, [sp, #4]
 8009e22:	6813      	ldr	r3, [r2, #0]
 8009e24:	b933      	cbnz	r3, 8009e34 <_free_r+0x30>
 8009e26:	6063      	str	r3, [r4, #4]
 8009e28:	6014      	str	r4, [r2, #0]
 8009e2a:	b003      	add	sp, #12
 8009e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e30:	f000 bc66 	b.w	800a700 <__malloc_unlock>
 8009e34:	42a3      	cmp	r3, r4
 8009e36:	d908      	bls.n	8009e4a <_free_r+0x46>
 8009e38:	6825      	ldr	r5, [r4, #0]
 8009e3a:	1961      	adds	r1, r4, r5
 8009e3c:	428b      	cmp	r3, r1
 8009e3e:	bf01      	itttt	eq
 8009e40:	6819      	ldreq	r1, [r3, #0]
 8009e42:	685b      	ldreq	r3, [r3, #4]
 8009e44:	1949      	addeq	r1, r1, r5
 8009e46:	6021      	streq	r1, [r4, #0]
 8009e48:	e7ed      	b.n	8009e26 <_free_r+0x22>
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	b10b      	cbz	r3, 8009e54 <_free_r+0x50>
 8009e50:	42a3      	cmp	r3, r4
 8009e52:	d9fa      	bls.n	8009e4a <_free_r+0x46>
 8009e54:	6811      	ldr	r1, [r2, #0]
 8009e56:	1855      	adds	r5, r2, r1
 8009e58:	42a5      	cmp	r5, r4
 8009e5a:	d10b      	bne.n	8009e74 <_free_r+0x70>
 8009e5c:	6824      	ldr	r4, [r4, #0]
 8009e5e:	4421      	add	r1, r4
 8009e60:	1854      	adds	r4, r2, r1
 8009e62:	42a3      	cmp	r3, r4
 8009e64:	6011      	str	r1, [r2, #0]
 8009e66:	d1e0      	bne.n	8009e2a <_free_r+0x26>
 8009e68:	681c      	ldr	r4, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	6053      	str	r3, [r2, #4]
 8009e6e:	4421      	add	r1, r4
 8009e70:	6011      	str	r1, [r2, #0]
 8009e72:	e7da      	b.n	8009e2a <_free_r+0x26>
 8009e74:	d902      	bls.n	8009e7c <_free_r+0x78>
 8009e76:	230c      	movs	r3, #12
 8009e78:	6003      	str	r3, [r0, #0]
 8009e7a:	e7d6      	b.n	8009e2a <_free_r+0x26>
 8009e7c:	6825      	ldr	r5, [r4, #0]
 8009e7e:	1961      	adds	r1, r4, r5
 8009e80:	428b      	cmp	r3, r1
 8009e82:	bf04      	itt	eq
 8009e84:	6819      	ldreq	r1, [r3, #0]
 8009e86:	685b      	ldreq	r3, [r3, #4]
 8009e88:	6063      	str	r3, [r4, #4]
 8009e8a:	bf04      	itt	eq
 8009e8c:	1949      	addeq	r1, r1, r5
 8009e8e:	6021      	streq	r1, [r4, #0]
 8009e90:	6054      	str	r4, [r2, #4]
 8009e92:	e7ca      	b.n	8009e2a <_free_r+0x26>
 8009e94:	b003      	add	sp, #12
 8009e96:	bd30      	pop	{r4, r5, pc}
 8009e98:	20013600 	.word	0x20013600

08009e9c <sbrk_aligned>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	4e0e      	ldr	r6, [pc, #56]	; (8009ed8 <sbrk_aligned+0x3c>)
 8009ea0:	460c      	mov	r4, r1
 8009ea2:	6831      	ldr	r1, [r6, #0]
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	b911      	cbnz	r1, 8009eae <sbrk_aligned+0x12>
 8009ea8:	f000 fb7a 	bl	800a5a0 <_sbrk_r>
 8009eac:	6030      	str	r0, [r6, #0]
 8009eae:	4621      	mov	r1, r4
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f000 fb75 	bl	800a5a0 <_sbrk_r>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	d00a      	beq.n	8009ed0 <sbrk_aligned+0x34>
 8009eba:	1cc4      	adds	r4, r0, #3
 8009ebc:	f024 0403 	bic.w	r4, r4, #3
 8009ec0:	42a0      	cmp	r0, r4
 8009ec2:	d007      	beq.n	8009ed4 <sbrk_aligned+0x38>
 8009ec4:	1a21      	subs	r1, r4, r0
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f000 fb6a 	bl	800a5a0 <_sbrk_r>
 8009ecc:	3001      	adds	r0, #1
 8009ece:	d101      	bne.n	8009ed4 <sbrk_aligned+0x38>
 8009ed0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	20013604 	.word	0x20013604

08009edc <_malloc_r>:
 8009edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee0:	1ccd      	adds	r5, r1, #3
 8009ee2:	f025 0503 	bic.w	r5, r5, #3
 8009ee6:	3508      	adds	r5, #8
 8009ee8:	2d0c      	cmp	r5, #12
 8009eea:	bf38      	it	cc
 8009eec:	250c      	movcc	r5, #12
 8009eee:	2d00      	cmp	r5, #0
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	db01      	blt.n	8009ef8 <_malloc_r+0x1c>
 8009ef4:	42a9      	cmp	r1, r5
 8009ef6:	d905      	bls.n	8009f04 <_malloc_r+0x28>
 8009ef8:	230c      	movs	r3, #12
 8009efa:	603b      	str	r3, [r7, #0]
 8009efc:	2600      	movs	r6, #0
 8009efe:	4630      	mov	r0, r6
 8009f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f04:	4e2e      	ldr	r6, [pc, #184]	; (8009fc0 <_malloc_r+0xe4>)
 8009f06:	f000 fbf5 	bl	800a6f4 <__malloc_lock>
 8009f0a:	6833      	ldr	r3, [r6, #0]
 8009f0c:	461c      	mov	r4, r3
 8009f0e:	bb34      	cbnz	r4, 8009f5e <_malloc_r+0x82>
 8009f10:	4629      	mov	r1, r5
 8009f12:	4638      	mov	r0, r7
 8009f14:	f7ff ffc2 	bl	8009e9c <sbrk_aligned>
 8009f18:	1c43      	adds	r3, r0, #1
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	d14d      	bne.n	8009fba <_malloc_r+0xde>
 8009f1e:	6834      	ldr	r4, [r6, #0]
 8009f20:	4626      	mov	r6, r4
 8009f22:	2e00      	cmp	r6, #0
 8009f24:	d140      	bne.n	8009fa8 <_malloc_r+0xcc>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	eb04 0803 	add.w	r8, r4, r3
 8009f30:	f000 fb36 	bl	800a5a0 <_sbrk_r>
 8009f34:	4580      	cmp	r8, r0
 8009f36:	d13a      	bne.n	8009fae <_malloc_r+0xd2>
 8009f38:	6821      	ldr	r1, [r4, #0]
 8009f3a:	3503      	adds	r5, #3
 8009f3c:	1a6d      	subs	r5, r5, r1
 8009f3e:	f025 0503 	bic.w	r5, r5, #3
 8009f42:	3508      	adds	r5, #8
 8009f44:	2d0c      	cmp	r5, #12
 8009f46:	bf38      	it	cc
 8009f48:	250c      	movcc	r5, #12
 8009f4a:	4629      	mov	r1, r5
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	f7ff ffa5 	bl	8009e9c <sbrk_aligned>
 8009f52:	3001      	adds	r0, #1
 8009f54:	d02b      	beq.n	8009fae <_malloc_r+0xd2>
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	442b      	add	r3, r5
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	e00e      	b.n	8009f7c <_malloc_r+0xa0>
 8009f5e:	6822      	ldr	r2, [r4, #0]
 8009f60:	1b52      	subs	r2, r2, r5
 8009f62:	d41e      	bmi.n	8009fa2 <_malloc_r+0xc6>
 8009f64:	2a0b      	cmp	r2, #11
 8009f66:	d916      	bls.n	8009f96 <_malloc_r+0xba>
 8009f68:	1961      	adds	r1, r4, r5
 8009f6a:	42a3      	cmp	r3, r4
 8009f6c:	6025      	str	r5, [r4, #0]
 8009f6e:	bf18      	it	ne
 8009f70:	6059      	strne	r1, [r3, #4]
 8009f72:	6863      	ldr	r3, [r4, #4]
 8009f74:	bf08      	it	eq
 8009f76:	6031      	streq	r1, [r6, #0]
 8009f78:	5162      	str	r2, [r4, r5]
 8009f7a:	604b      	str	r3, [r1, #4]
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	f104 060b 	add.w	r6, r4, #11
 8009f82:	f000 fbbd 	bl	800a700 <__malloc_unlock>
 8009f86:	f026 0607 	bic.w	r6, r6, #7
 8009f8a:	1d23      	adds	r3, r4, #4
 8009f8c:	1af2      	subs	r2, r6, r3
 8009f8e:	d0b6      	beq.n	8009efe <_malloc_r+0x22>
 8009f90:	1b9b      	subs	r3, r3, r6
 8009f92:	50a3      	str	r3, [r4, r2]
 8009f94:	e7b3      	b.n	8009efe <_malloc_r+0x22>
 8009f96:	6862      	ldr	r2, [r4, #4]
 8009f98:	42a3      	cmp	r3, r4
 8009f9a:	bf0c      	ite	eq
 8009f9c:	6032      	streq	r2, [r6, #0]
 8009f9e:	605a      	strne	r2, [r3, #4]
 8009fa0:	e7ec      	b.n	8009f7c <_malloc_r+0xa0>
 8009fa2:	4623      	mov	r3, r4
 8009fa4:	6864      	ldr	r4, [r4, #4]
 8009fa6:	e7b2      	b.n	8009f0e <_malloc_r+0x32>
 8009fa8:	4634      	mov	r4, r6
 8009faa:	6876      	ldr	r6, [r6, #4]
 8009fac:	e7b9      	b.n	8009f22 <_malloc_r+0x46>
 8009fae:	230c      	movs	r3, #12
 8009fb0:	603b      	str	r3, [r7, #0]
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	f000 fba4 	bl	800a700 <__malloc_unlock>
 8009fb8:	e7a1      	b.n	8009efe <_malloc_r+0x22>
 8009fba:	6025      	str	r5, [r4, #0]
 8009fbc:	e7de      	b.n	8009f7c <_malloc_r+0xa0>
 8009fbe:	bf00      	nop
 8009fc0:	20013600 	.word	0x20013600

08009fc4 <__sfputc_r>:
 8009fc4:	6893      	ldr	r3, [r2, #8]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	b410      	push	{r4}
 8009fcc:	6093      	str	r3, [r2, #8]
 8009fce:	da08      	bge.n	8009fe2 <__sfputc_r+0x1e>
 8009fd0:	6994      	ldr	r4, [r2, #24]
 8009fd2:	42a3      	cmp	r3, r4
 8009fd4:	db01      	blt.n	8009fda <__sfputc_r+0x16>
 8009fd6:	290a      	cmp	r1, #10
 8009fd8:	d103      	bne.n	8009fe2 <__sfputc_r+0x1e>
 8009fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fde:	f7ff bc31 	b.w	8009844 <__swbuf_r>
 8009fe2:	6813      	ldr	r3, [r2, #0]
 8009fe4:	1c58      	adds	r0, r3, #1
 8009fe6:	6010      	str	r0, [r2, #0]
 8009fe8:	7019      	strb	r1, [r3, #0]
 8009fea:	4608      	mov	r0, r1
 8009fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <__sfputs_r>:
 8009ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	460f      	mov	r7, r1
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	18d5      	adds	r5, r2, r3
 8009ffc:	42ac      	cmp	r4, r5
 8009ffe:	d101      	bne.n	800a004 <__sfputs_r+0x12>
 800a000:	2000      	movs	r0, #0
 800a002:	e007      	b.n	800a014 <__sfputs_r+0x22>
 800a004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a008:	463a      	mov	r2, r7
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7ff ffda 	bl	8009fc4 <__sfputc_r>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d1f3      	bne.n	8009ffc <__sfputs_r+0xa>
 800a014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a018 <_vfiprintf_r>:
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	460d      	mov	r5, r1
 800a01e:	b09d      	sub	sp, #116	; 0x74
 800a020:	4614      	mov	r4, r2
 800a022:	4698      	mov	r8, r3
 800a024:	4606      	mov	r6, r0
 800a026:	b118      	cbz	r0, 800a030 <_vfiprintf_r+0x18>
 800a028:	6983      	ldr	r3, [r0, #24]
 800a02a:	b90b      	cbnz	r3, 800a030 <_vfiprintf_r+0x18>
 800a02c:	f7ff fde4 	bl	8009bf8 <__sinit>
 800a030:	4b89      	ldr	r3, [pc, #548]	; (800a258 <_vfiprintf_r+0x240>)
 800a032:	429d      	cmp	r5, r3
 800a034:	d11b      	bne.n	800a06e <_vfiprintf_r+0x56>
 800a036:	6875      	ldr	r5, [r6, #4]
 800a038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a03a:	07d9      	lsls	r1, r3, #31
 800a03c:	d405      	bmi.n	800a04a <_vfiprintf_r+0x32>
 800a03e:	89ab      	ldrh	r3, [r5, #12]
 800a040:	059a      	lsls	r2, r3, #22
 800a042:	d402      	bmi.n	800a04a <_vfiprintf_r+0x32>
 800a044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a046:	f7ff fe75 	bl	8009d34 <__retarget_lock_acquire_recursive>
 800a04a:	89ab      	ldrh	r3, [r5, #12]
 800a04c:	071b      	lsls	r3, r3, #28
 800a04e:	d501      	bpl.n	800a054 <_vfiprintf_r+0x3c>
 800a050:	692b      	ldr	r3, [r5, #16]
 800a052:	b9eb      	cbnz	r3, 800a090 <_vfiprintf_r+0x78>
 800a054:	4629      	mov	r1, r5
 800a056:	4630      	mov	r0, r6
 800a058:	f7ff fc46 	bl	80098e8 <__swsetup_r>
 800a05c:	b1c0      	cbz	r0, 800a090 <_vfiprintf_r+0x78>
 800a05e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a060:	07dc      	lsls	r4, r3, #31
 800a062:	d50e      	bpl.n	800a082 <_vfiprintf_r+0x6a>
 800a064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a068:	b01d      	add	sp, #116	; 0x74
 800a06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06e:	4b7b      	ldr	r3, [pc, #492]	; (800a25c <_vfiprintf_r+0x244>)
 800a070:	429d      	cmp	r5, r3
 800a072:	d101      	bne.n	800a078 <_vfiprintf_r+0x60>
 800a074:	68b5      	ldr	r5, [r6, #8]
 800a076:	e7df      	b.n	800a038 <_vfiprintf_r+0x20>
 800a078:	4b79      	ldr	r3, [pc, #484]	; (800a260 <_vfiprintf_r+0x248>)
 800a07a:	429d      	cmp	r5, r3
 800a07c:	bf08      	it	eq
 800a07e:	68f5      	ldreq	r5, [r6, #12]
 800a080:	e7da      	b.n	800a038 <_vfiprintf_r+0x20>
 800a082:	89ab      	ldrh	r3, [r5, #12]
 800a084:	0598      	lsls	r0, r3, #22
 800a086:	d4ed      	bmi.n	800a064 <_vfiprintf_r+0x4c>
 800a088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a08a:	f7ff fe54 	bl	8009d36 <__retarget_lock_release_recursive>
 800a08e:	e7e9      	b.n	800a064 <_vfiprintf_r+0x4c>
 800a090:	2300      	movs	r3, #0
 800a092:	9309      	str	r3, [sp, #36]	; 0x24
 800a094:	2320      	movs	r3, #32
 800a096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a09a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a09e:	2330      	movs	r3, #48	; 0x30
 800a0a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a264 <_vfiprintf_r+0x24c>
 800a0a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0a8:	f04f 0901 	mov.w	r9, #1
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	469a      	mov	sl, r3
 800a0b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b4:	b10a      	cbz	r2, 800a0ba <_vfiprintf_r+0xa2>
 800a0b6:	2a25      	cmp	r2, #37	; 0x25
 800a0b8:	d1f9      	bne.n	800a0ae <_vfiprintf_r+0x96>
 800a0ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a0be:	d00b      	beq.n	800a0d8 <_vfiprintf_r+0xc0>
 800a0c0:	465b      	mov	r3, fp
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f7ff ff93 	bl	8009ff2 <__sfputs_r>
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f000 80aa 	beq.w	800a226 <_vfiprintf_r+0x20e>
 800a0d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0d4:	445a      	add	r2, fp
 800a0d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a0d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f000 80a2 	beq.w	800a226 <_vfiprintf_r+0x20e>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ec:	f10a 0a01 	add.w	sl, sl, #1
 800a0f0:	9304      	str	r3, [sp, #16]
 800a0f2:	9307      	str	r3, [sp, #28]
 800a0f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a0fa:	4654      	mov	r4, sl
 800a0fc:	2205      	movs	r2, #5
 800a0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a102:	4858      	ldr	r0, [pc, #352]	; (800a264 <_vfiprintf_r+0x24c>)
 800a104:	f7f6 f87c 	bl	8000200 <memchr>
 800a108:	9a04      	ldr	r2, [sp, #16]
 800a10a:	b9d8      	cbnz	r0, 800a144 <_vfiprintf_r+0x12c>
 800a10c:	06d1      	lsls	r1, r2, #27
 800a10e:	bf44      	itt	mi
 800a110:	2320      	movmi	r3, #32
 800a112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a116:	0713      	lsls	r3, r2, #28
 800a118:	bf44      	itt	mi
 800a11a:	232b      	movmi	r3, #43	; 0x2b
 800a11c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a120:	f89a 3000 	ldrb.w	r3, [sl]
 800a124:	2b2a      	cmp	r3, #42	; 0x2a
 800a126:	d015      	beq.n	800a154 <_vfiprintf_r+0x13c>
 800a128:	9a07      	ldr	r2, [sp, #28]
 800a12a:	4654      	mov	r4, sl
 800a12c:	2000      	movs	r0, #0
 800a12e:	f04f 0c0a 	mov.w	ip, #10
 800a132:	4621      	mov	r1, r4
 800a134:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a138:	3b30      	subs	r3, #48	; 0x30
 800a13a:	2b09      	cmp	r3, #9
 800a13c:	d94e      	bls.n	800a1dc <_vfiprintf_r+0x1c4>
 800a13e:	b1b0      	cbz	r0, 800a16e <_vfiprintf_r+0x156>
 800a140:	9207      	str	r2, [sp, #28]
 800a142:	e014      	b.n	800a16e <_vfiprintf_r+0x156>
 800a144:	eba0 0308 	sub.w	r3, r0, r8
 800a148:	fa09 f303 	lsl.w	r3, r9, r3
 800a14c:	4313      	orrs	r3, r2
 800a14e:	9304      	str	r3, [sp, #16]
 800a150:	46a2      	mov	sl, r4
 800a152:	e7d2      	b.n	800a0fa <_vfiprintf_r+0xe2>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	1d19      	adds	r1, r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	9103      	str	r1, [sp, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bfbb      	ittet	lt
 800a160:	425b      	neglt	r3, r3
 800a162:	f042 0202 	orrlt.w	r2, r2, #2
 800a166:	9307      	strge	r3, [sp, #28]
 800a168:	9307      	strlt	r3, [sp, #28]
 800a16a:	bfb8      	it	lt
 800a16c:	9204      	strlt	r2, [sp, #16]
 800a16e:	7823      	ldrb	r3, [r4, #0]
 800a170:	2b2e      	cmp	r3, #46	; 0x2e
 800a172:	d10c      	bne.n	800a18e <_vfiprintf_r+0x176>
 800a174:	7863      	ldrb	r3, [r4, #1]
 800a176:	2b2a      	cmp	r3, #42	; 0x2a
 800a178:	d135      	bne.n	800a1e6 <_vfiprintf_r+0x1ce>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	1d1a      	adds	r2, r3, #4
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	9203      	str	r2, [sp, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	bfb8      	it	lt
 800a186:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a18a:	3402      	adds	r4, #2
 800a18c:	9305      	str	r3, [sp, #20]
 800a18e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a274 <_vfiprintf_r+0x25c>
 800a192:	7821      	ldrb	r1, [r4, #0]
 800a194:	2203      	movs	r2, #3
 800a196:	4650      	mov	r0, sl
 800a198:	f7f6 f832 	bl	8000200 <memchr>
 800a19c:	b140      	cbz	r0, 800a1b0 <_vfiprintf_r+0x198>
 800a19e:	2340      	movs	r3, #64	; 0x40
 800a1a0:	eba0 000a 	sub.w	r0, r0, sl
 800a1a4:	fa03 f000 	lsl.w	r0, r3, r0
 800a1a8:	9b04      	ldr	r3, [sp, #16]
 800a1aa:	4303      	orrs	r3, r0
 800a1ac:	3401      	adds	r4, #1
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b4:	482c      	ldr	r0, [pc, #176]	; (800a268 <_vfiprintf_r+0x250>)
 800a1b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1ba:	2206      	movs	r2, #6
 800a1bc:	f7f6 f820 	bl	8000200 <memchr>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d03f      	beq.n	800a244 <_vfiprintf_r+0x22c>
 800a1c4:	4b29      	ldr	r3, [pc, #164]	; (800a26c <_vfiprintf_r+0x254>)
 800a1c6:	bb1b      	cbnz	r3, 800a210 <_vfiprintf_r+0x1f8>
 800a1c8:	9b03      	ldr	r3, [sp, #12]
 800a1ca:	3307      	adds	r3, #7
 800a1cc:	f023 0307 	bic.w	r3, r3, #7
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	9303      	str	r3, [sp, #12]
 800a1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d6:	443b      	add	r3, r7
 800a1d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1da:	e767      	b.n	800a0ac <_vfiprintf_r+0x94>
 800a1dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	2001      	movs	r0, #1
 800a1e4:	e7a5      	b.n	800a132 <_vfiprintf_r+0x11a>
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	3401      	adds	r4, #1
 800a1ea:	9305      	str	r3, [sp, #20]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	f04f 0c0a 	mov.w	ip, #10
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f8:	3a30      	subs	r2, #48	; 0x30
 800a1fa:	2a09      	cmp	r2, #9
 800a1fc:	d903      	bls.n	800a206 <_vfiprintf_r+0x1ee>
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d0c5      	beq.n	800a18e <_vfiprintf_r+0x176>
 800a202:	9105      	str	r1, [sp, #20]
 800a204:	e7c3      	b.n	800a18e <_vfiprintf_r+0x176>
 800a206:	fb0c 2101 	mla	r1, ip, r1, r2
 800a20a:	4604      	mov	r4, r0
 800a20c:	2301      	movs	r3, #1
 800a20e:	e7f0      	b.n	800a1f2 <_vfiprintf_r+0x1da>
 800a210:	ab03      	add	r3, sp, #12
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	462a      	mov	r2, r5
 800a216:	4b16      	ldr	r3, [pc, #88]	; (800a270 <_vfiprintf_r+0x258>)
 800a218:	a904      	add	r1, sp, #16
 800a21a:	4630      	mov	r0, r6
 800a21c:	f3af 8000 	nop.w
 800a220:	4607      	mov	r7, r0
 800a222:	1c78      	adds	r0, r7, #1
 800a224:	d1d6      	bne.n	800a1d4 <_vfiprintf_r+0x1bc>
 800a226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a228:	07d9      	lsls	r1, r3, #31
 800a22a:	d405      	bmi.n	800a238 <_vfiprintf_r+0x220>
 800a22c:	89ab      	ldrh	r3, [r5, #12]
 800a22e:	059a      	lsls	r2, r3, #22
 800a230:	d402      	bmi.n	800a238 <_vfiprintf_r+0x220>
 800a232:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a234:	f7ff fd7f 	bl	8009d36 <__retarget_lock_release_recursive>
 800a238:	89ab      	ldrh	r3, [r5, #12]
 800a23a:	065b      	lsls	r3, r3, #25
 800a23c:	f53f af12 	bmi.w	800a064 <_vfiprintf_r+0x4c>
 800a240:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a242:	e711      	b.n	800a068 <_vfiprintf_r+0x50>
 800a244:	ab03      	add	r3, sp, #12
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	462a      	mov	r2, r5
 800a24a:	4b09      	ldr	r3, [pc, #36]	; (800a270 <_vfiprintf_r+0x258>)
 800a24c:	a904      	add	r1, sp, #16
 800a24e:	4630      	mov	r0, r6
 800a250:	f000 f880 	bl	800a354 <_printf_i>
 800a254:	e7e4      	b.n	800a220 <_vfiprintf_r+0x208>
 800a256:	bf00      	nop
 800a258:	0800aad0 	.word	0x0800aad0
 800a25c:	0800aaf0 	.word	0x0800aaf0
 800a260:	0800aab0 	.word	0x0800aab0
 800a264:	0800ab10 	.word	0x0800ab10
 800a268:	0800ab1a 	.word	0x0800ab1a
 800a26c:	00000000 	.word	0x00000000
 800a270:	08009ff3 	.word	0x08009ff3
 800a274:	0800ab16 	.word	0x0800ab16

0800a278 <_printf_common>:
 800a278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a27c:	4616      	mov	r6, r2
 800a27e:	4699      	mov	r9, r3
 800a280:	688a      	ldr	r2, [r1, #8]
 800a282:	690b      	ldr	r3, [r1, #16]
 800a284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a288:	4293      	cmp	r3, r2
 800a28a:	bfb8      	it	lt
 800a28c:	4613      	movlt	r3, r2
 800a28e:	6033      	str	r3, [r6, #0]
 800a290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a294:	4607      	mov	r7, r0
 800a296:	460c      	mov	r4, r1
 800a298:	b10a      	cbz	r2, 800a29e <_printf_common+0x26>
 800a29a:	3301      	adds	r3, #1
 800a29c:	6033      	str	r3, [r6, #0]
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	0699      	lsls	r1, r3, #26
 800a2a2:	bf42      	ittt	mi
 800a2a4:	6833      	ldrmi	r3, [r6, #0]
 800a2a6:	3302      	addmi	r3, #2
 800a2a8:	6033      	strmi	r3, [r6, #0]
 800a2aa:	6825      	ldr	r5, [r4, #0]
 800a2ac:	f015 0506 	ands.w	r5, r5, #6
 800a2b0:	d106      	bne.n	800a2c0 <_printf_common+0x48>
 800a2b2:	f104 0a19 	add.w	sl, r4, #25
 800a2b6:	68e3      	ldr	r3, [r4, #12]
 800a2b8:	6832      	ldr	r2, [r6, #0]
 800a2ba:	1a9b      	subs	r3, r3, r2
 800a2bc:	42ab      	cmp	r3, r5
 800a2be:	dc26      	bgt.n	800a30e <_printf_common+0x96>
 800a2c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2c4:	1e13      	subs	r3, r2, #0
 800a2c6:	6822      	ldr	r2, [r4, #0]
 800a2c8:	bf18      	it	ne
 800a2ca:	2301      	movne	r3, #1
 800a2cc:	0692      	lsls	r2, r2, #26
 800a2ce:	d42b      	bmi.n	800a328 <_printf_common+0xb0>
 800a2d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	4638      	mov	r0, r7
 800a2d8:	47c0      	blx	r8
 800a2da:	3001      	adds	r0, #1
 800a2dc:	d01e      	beq.n	800a31c <_printf_common+0xa4>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	68e5      	ldr	r5, [r4, #12]
 800a2e2:	6832      	ldr	r2, [r6, #0]
 800a2e4:	f003 0306 	and.w	r3, r3, #6
 800a2e8:	2b04      	cmp	r3, #4
 800a2ea:	bf08      	it	eq
 800a2ec:	1aad      	subeq	r5, r5, r2
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	6922      	ldr	r2, [r4, #16]
 800a2f2:	bf0c      	ite	eq
 800a2f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2f8:	2500      	movne	r5, #0
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	bfc4      	itt	gt
 800a2fe:	1a9b      	subgt	r3, r3, r2
 800a300:	18ed      	addgt	r5, r5, r3
 800a302:	2600      	movs	r6, #0
 800a304:	341a      	adds	r4, #26
 800a306:	42b5      	cmp	r5, r6
 800a308:	d11a      	bne.n	800a340 <_printf_common+0xc8>
 800a30a:	2000      	movs	r0, #0
 800a30c:	e008      	b.n	800a320 <_printf_common+0xa8>
 800a30e:	2301      	movs	r3, #1
 800a310:	4652      	mov	r2, sl
 800a312:	4649      	mov	r1, r9
 800a314:	4638      	mov	r0, r7
 800a316:	47c0      	blx	r8
 800a318:	3001      	adds	r0, #1
 800a31a:	d103      	bne.n	800a324 <_printf_common+0xac>
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a324:	3501      	adds	r5, #1
 800a326:	e7c6      	b.n	800a2b6 <_printf_common+0x3e>
 800a328:	18e1      	adds	r1, r4, r3
 800a32a:	1c5a      	adds	r2, r3, #1
 800a32c:	2030      	movs	r0, #48	; 0x30
 800a32e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a332:	4422      	add	r2, r4
 800a334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a33c:	3302      	adds	r3, #2
 800a33e:	e7c7      	b.n	800a2d0 <_printf_common+0x58>
 800a340:	2301      	movs	r3, #1
 800a342:	4622      	mov	r2, r4
 800a344:	4649      	mov	r1, r9
 800a346:	4638      	mov	r0, r7
 800a348:	47c0      	blx	r8
 800a34a:	3001      	adds	r0, #1
 800a34c:	d0e6      	beq.n	800a31c <_printf_common+0xa4>
 800a34e:	3601      	adds	r6, #1
 800a350:	e7d9      	b.n	800a306 <_printf_common+0x8e>
	...

0800a354 <_printf_i>:
 800a354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a358:	7e0f      	ldrb	r7, [r1, #24]
 800a35a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a35c:	2f78      	cmp	r7, #120	; 0x78
 800a35e:	4691      	mov	r9, r2
 800a360:	4680      	mov	r8, r0
 800a362:	460c      	mov	r4, r1
 800a364:	469a      	mov	sl, r3
 800a366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a36a:	d807      	bhi.n	800a37c <_printf_i+0x28>
 800a36c:	2f62      	cmp	r7, #98	; 0x62
 800a36e:	d80a      	bhi.n	800a386 <_printf_i+0x32>
 800a370:	2f00      	cmp	r7, #0
 800a372:	f000 80d8 	beq.w	800a526 <_printf_i+0x1d2>
 800a376:	2f58      	cmp	r7, #88	; 0x58
 800a378:	f000 80a3 	beq.w	800a4c2 <_printf_i+0x16e>
 800a37c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a384:	e03a      	b.n	800a3fc <_printf_i+0xa8>
 800a386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a38a:	2b15      	cmp	r3, #21
 800a38c:	d8f6      	bhi.n	800a37c <_printf_i+0x28>
 800a38e:	a101      	add	r1, pc, #4	; (adr r1, 800a394 <_printf_i+0x40>)
 800a390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a394:	0800a3ed 	.word	0x0800a3ed
 800a398:	0800a401 	.word	0x0800a401
 800a39c:	0800a37d 	.word	0x0800a37d
 800a3a0:	0800a37d 	.word	0x0800a37d
 800a3a4:	0800a37d 	.word	0x0800a37d
 800a3a8:	0800a37d 	.word	0x0800a37d
 800a3ac:	0800a401 	.word	0x0800a401
 800a3b0:	0800a37d 	.word	0x0800a37d
 800a3b4:	0800a37d 	.word	0x0800a37d
 800a3b8:	0800a37d 	.word	0x0800a37d
 800a3bc:	0800a37d 	.word	0x0800a37d
 800a3c0:	0800a50d 	.word	0x0800a50d
 800a3c4:	0800a431 	.word	0x0800a431
 800a3c8:	0800a4ef 	.word	0x0800a4ef
 800a3cc:	0800a37d 	.word	0x0800a37d
 800a3d0:	0800a37d 	.word	0x0800a37d
 800a3d4:	0800a52f 	.word	0x0800a52f
 800a3d8:	0800a37d 	.word	0x0800a37d
 800a3dc:	0800a431 	.word	0x0800a431
 800a3e0:	0800a37d 	.word	0x0800a37d
 800a3e4:	0800a37d 	.word	0x0800a37d
 800a3e8:	0800a4f7 	.word	0x0800a4f7
 800a3ec:	682b      	ldr	r3, [r5, #0]
 800a3ee:	1d1a      	adds	r2, r3, #4
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	602a      	str	r2, [r5, #0]
 800a3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e0a3      	b.n	800a548 <_printf_i+0x1f4>
 800a400:	6820      	ldr	r0, [r4, #0]
 800a402:	6829      	ldr	r1, [r5, #0]
 800a404:	0606      	lsls	r6, r0, #24
 800a406:	f101 0304 	add.w	r3, r1, #4
 800a40a:	d50a      	bpl.n	800a422 <_printf_i+0xce>
 800a40c:	680e      	ldr	r6, [r1, #0]
 800a40e:	602b      	str	r3, [r5, #0]
 800a410:	2e00      	cmp	r6, #0
 800a412:	da03      	bge.n	800a41c <_printf_i+0xc8>
 800a414:	232d      	movs	r3, #45	; 0x2d
 800a416:	4276      	negs	r6, r6
 800a418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a41c:	485e      	ldr	r0, [pc, #376]	; (800a598 <_printf_i+0x244>)
 800a41e:	230a      	movs	r3, #10
 800a420:	e019      	b.n	800a456 <_printf_i+0x102>
 800a422:	680e      	ldr	r6, [r1, #0]
 800a424:	602b      	str	r3, [r5, #0]
 800a426:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a42a:	bf18      	it	ne
 800a42c:	b236      	sxthne	r6, r6
 800a42e:	e7ef      	b.n	800a410 <_printf_i+0xbc>
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	6820      	ldr	r0, [r4, #0]
 800a434:	1d19      	adds	r1, r3, #4
 800a436:	6029      	str	r1, [r5, #0]
 800a438:	0601      	lsls	r1, r0, #24
 800a43a:	d501      	bpl.n	800a440 <_printf_i+0xec>
 800a43c:	681e      	ldr	r6, [r3, #0]
 800a43e:	e002      	b.n	800a446 <_printf_i+0xf2>
 800a440:	0646      	lsls	r6, r0, #25
 800a442:	d5fb      	bpl.n	800a43c <_printf_i+0xe8>
 800a444:	881e      	ldrh	r6, [r3, #0]
 800a446:	4854      	ldr	r0, [pc, #336]	; (800a598 <_printf_i+0x244>)
 800a448:	2f6f      	cmp	r7, #111	; 0x6f
 800a44a:	bf0c      	ite	eq
 800a44c:	2308      	moveq	r3, #8
 800a44e:	230a      	movne	r3, #10
 800a450:	2100      	movs	r1, #0
 800a452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a456:	6865      	ldr	r5, [r4, #4]
 800a458:	60a5      	str	r5, [r4, #8]
 800a45a:	2d00      	cmp	r5, #0
 800a45c:	bfa2      	ittt	ge
 800a45e:	6821      	ldrge	r1, [r4, #0]
 800a460:	f021 0104 	bicge.w	r1, r1, #4
 800a464:	6021      	strge	r1, [r4, #0]
 800a466:	b90e      	cbnz	r6, 800a46c <_printf_i+0x118>
 800a468:	2d00      	cmp	r5, #0
 800a46a:	d04d      	beq.n	800a508 <_printf_i+0x1b4>
 800a46c:	4615      	mov	r5, r2
 800a46e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a472:	fb03 6711 	mls	r7, r3, r1, r6
 800a476:	5dc7      	ldrb	r7, [r0, r7]
 800a478:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a47c:	4637      	mov	r7, r6
 800a47e:	42bb      	cmp	r3, r7
 800a480:	460e      	mov	r6, r1
 800a482:	d9f4      	bls.n	800a46e <_printf_i+0x11a>
 800a484:	2b08      	cmp	r3, #8
 800a486:	d10b      	bne.n	800a4a0 <_printf_i+0x14c>
 800a488:	6823      	ldr	r3, [r4, #0]
 800a48a:	07de      	lsls	r6, r3, #31
 800a48c:	d508      	bpl.n	800a4a0 <_printf_i+0x14c>
 800a48e:	6923      	ldr	r3, [r4, #16]
 800a490:	6861      	ldr	r1, [r4, #4]
 800a492:	4299      	cmp	r1, r3
 800a494:	bfde      	ittt	le
 800a496:	2330      	movle	r3, #48	; 0x30
 800a498:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a49c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a4a0:	1b52      	subs	r2, r2, r5
 800a4a2:	6122      	str	r2, [r4, #16]
 800a4a4:	f8cd a000 	str.w	sl, [sp]
 800a4a8:	464b      	mov	r3, r9
 800a4aa:	aa03      	add	r2, sp, #12
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	f7ff fee2 	bl	800a278 <_printf_common>
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d14c      	bne.n	800a552 <_printf_i+0x1fe>
 800a4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4bc:	b004      	add	sp, #16
 800a4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c2:	4835      	ldr	r0, [pc, #212]	; (800a598 <_printf_i+0x244>)
 800a4c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4c8:	6829      	ldr	r1, [r5, #0]
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4d0:	6029      	str	r1, [r5, #0]
 800a4d2:	061d      	lsls	r5, r3, #24
 800a4d4:	d514      	bpl.n	800a500 <_printf_i+0x1ac>
 800a4d6:	07df      	lsls	r7, r3, #31
 800a4d8:	bf44      	itt	mi
 800a4da:	f043 0320 	orrmi.w	r3, r3, #32
 800a4de:	6023      	strmi	r3, [r4, #0]
 800a4e0:	b91e      	cbnz	r6, 800a4ea <_printf_i+0x196>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	f023 0320 	bic.w	r3, r3, #32
 800a4e8:	6023      	str	r3, [r4, #0]
 800a4ea:	2310      	movs	r3, #16
 800a4ec:	e7b0      	b.n	800a450 <_printf_i+0xfc>
 800a4ee:	6823      	ldr	r3, [r4, #0]
 800a4f0:	f043 0320 	orr.w	r3, r3, #32
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	2378      	movs	r3, #120	; 0x78
 800a4f8:	4828      	ldr	r0, [pc, #160]	; (800a59c <_printf_i+0x248>)
 800a4fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4fe:	e7e3      	b.n	800a4c8 <_printf_i+0x174>
 800a500:	0659      	lsls	r1, r3, #25
 800a502:	bf48      	it	mi
 800a504:	b2b6      	uxthmi	r6, r6
 800a506:	e7e6      	b.n	800a4d6 <_printf_i+0x182>
 800a508:	4615      	mov	r5, r2
 800a50a:	e7bb      	b.n	800a484 <_printf_i+0x130>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	6826      	ldr	r6, [r4, #0]
 800a510:	6961      	ldr	r1, [r4, #20]
 800a512:	1d18      	adds	r0, r3, #4
 800a514:	6028      	str	r0, [r5, #0]
 800a516:	0635      	lsls	r5, r6, #24
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	d501      	bpl.n	800a520 <_printf_i+0x1cc>
 800a51c:	6019      	str	r1, [r3, #0]
 800a51e:	e002      	b.n	800a526 <_printf_i+0x1d2>
 800a520:	0670      	lsls	r0, r6, #25
 800a522:	d5fb      	bpl.n	800a51c <_printf_i+0x1c8>
 800a524:	8019      	strh	r1, [r3, #0]
 800a526:	2300      	movs	r3, #0
 800a528:	6123      	str	r3, [r4, #16]
 800a52a:	4615      	mov	r5, r2
 800a52c:	e7ba      	b.n	800a4a4 <_printf_i+0x150>
 800a52e:	682b      	ldr	r3, [r5, #0]
 800a530:	1d1a      	adds	r2, r3, #4
 800a532:	602a      	str	r2, [r5, #0]
 800a534:	681d      	ldr	r5, [r3, #0]
 800a536:	6862      	ldr	r2, [r4, #4]
 800a538:	2100      	movs	r1, #0
 800a53a:	4628      	mov	r0, r5
 800a53c:	f7f5 fe60 	bl	8000200 <memchr>
 800a540:	b108      	cbz	r0, 800a546 <_printf_i+0x1f2>
 800a542:	1b40      	subs	r0, r0, r5
 800a544:	6060      	str	r0, [r4, #4]
 800a546:	6863      	ldr	r3, [r4, #4]
 800a548:	6123      	str	r3, [r4, #16]
 800a54a:	2300      	movs	r3, #0
 800a54c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a550:	e7a8      	b.n	800a4a4 <_printf_i+0x150>
 800a552:	6923      	ldr	r3, [r4, #16]
 800a554:	462a      	mov	r2, r5
 800a556:	4649      	mov	r1, r9
 800a558:	4640      	mov	r0, r8
 800a55a:	47d0      	blx	sl
 800a55c:	3001      	adds	r0, #1
 800a55e:	d0ab      	beq.n	800a4b8 <_printf_i+0x164>
 800a560:	6823      	ldr	r3, [r4, #0]
 800a562:	079b      	lsls	r3, r3, #30
 800a564:	d413      	bmi.n	800a58e <_printf_i+0x23a>
 800a566:	68e0      	ldr	r0, [r4, #12]
 800a568:	9b03      	ldr	r3, [sp, #12]
 800a56a:	4298      	cmp	r0, r3
 800a56c:	bfb8      	it	lt
 800a56e:	4618      	movlt	r0, r3
 800a570:	e7a4      	b.n	800a4bc <_printf_i+0x168>
 800a572:	2301      	movs	r3, #1
 800a574:	4632      	mov	r2, r6
 800a576:	4649      	mov	r1, r9
 800a578:	4640      	mov	r0, r8
 800a57a:	47d0      	blx	sl
 800a57c:	3001      	adds	r0, #1
 800a57e:	d09b      	beq.n	800a4b8 <_printf_i+0x164>
 800a580:	3501      	adds	r5, #1
 800a582:	68e3      	ldr	r3, [r4, #12]
 800a584:	9903      	ldr	r1, [sp, #12]
 800a586:	1a5b      	subs	r3, r3, r1
 800a588:	42ab      	cmp	r3, r5
 800a58a:	dcf2      	bgt.n	800a572 <_printf_i+0x21e>
 800a58c:	e7eb      	b.n	800a566 <_printf_i+0x212>
 800a58e:	2500      	movs	r5, #0
 800a590:	f104 0619 	add.w	r6, r4, #25
 800a594:	e7f5      	b.n	800a582 <_printf_i+0x22e>
 800a596:	bf00      	nop
 800a598:	0800ab21 	.word	0x0800ab21
 800a59c:	0800ab32 	.word	0x0800ab32

0800a5a0 <_sbrk_r>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4d06      	ldr	r5, [pc, #24]	; (800a5bc <_sbrk_r+0x1c>)
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	4608      	mov	r0, r1
 800a5aa:	602b      	str	r3, [r5, #0]
 800a5ac:	f7f7 fe24 	bl	80021f8 <_sbrk>
 800a5b0:	1c43      	adds	r3, r0, #1
 800a5b2:	d102      	bne.n	800a5ba <_sbrk_r+0x1a>
 800a5b4:	682b      	ldr	r3, [r5, #0]
 800a5b6:	b103      	cbz	r3, 800a5ba <_sbrk_r+0x1a>
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	20013608 	.word	0x20013608

0800a5c0 <__sread>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c8:	f000 f8a0 	bl	800a70c <_read_r>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	bfab      	itete	ge
 800a5d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a5d4:	181b      	addge	r3, r3, r0
 800a5d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5da:	bfac      	ite	ge
 800a5dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5de:	81a3      	strhlt	r3, [r4, #12]
 800a5e0:	bd10      	pop	{r4, pc}

0800a5e2 <__swrite>:
 800a5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e6:	461f      	mov	r7, r3
 800a5e8:	898b      	ldrh	r3, [r1, #12]
 800a5ea:	05db      	lsls	r3, r3, #23
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	4616      	mov	r6, r2
 800a5f2:	d505      	bpl.n	800a600 <__swrite+0x1e>
 800a5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f000 f868 	bl	800a6d0 <_lseek_r>
 800a600:	89a3      	ldrh	r3, [r4, #12]
 800a602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a60a:	81a3      	strh	r3, [r4, #12]
 800a60c:	4632      	mov	r2, r6
 800a60e:	463b      	mov	r3, r7
 800a610:	4628      	mov	r0, r5
 800a612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a616:	f000 b817 	b.w	800a648 <_write_r>

0800a61a <__sseek>:
 800a61a:	b510      	push	{r4, lr}
 800a61c:	460c      	mov	r4, r1
 800a61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a622:	f000 f855 	bl	800a6d0 <_lseek_r>
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	bf15      	itete	ne
 800a62c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a62e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a636:	81a3      	strheq	r3, [r4, #12]
 800a638:	bf18      	it	ne
 800a63a:	81a3      	strhne	r3, [r4, #12]
 800a63c:	bd10      	pop	{r4, pc}

0800a63e <__sclose>:
 800a63e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a642:	f000 b813 	b.w	800a66c <_close_r>
	...

0800a648 <_write_r>:
 800a648:	b538      	push	{r3, r4, r5, lr}
 800a64a:	4d07      	ldr	r5, [pc, #28]	; (800a668 <_write_r+0x20>)
 800a64c:	4604      	mov	r4, r0
 800a64e:	4608      	mov	r0, r1
 800a650:	4611      	mov	r1, r2
 800a652:	2200      	movs	r2, #0
 800a654:	602a      	str	r2, [r5, #0]
 800a656:	461a      	mov	r2, r3
 800a658:	f7f7 fd7d 	bl	8002156 <_write>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_write_r+0x1e>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_write_r+0x1e>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	20013608 	.word	0x20013608

0800a66c <_close_r>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	4d06      	ldr	r5, [pc, #24]	; (800a688 <_close_r+0x1c>)
 800a670:	2300      	movs	r3, #0
 800a672:	4604      	mov	r4, r0
 800a674:	4608      	mov	r0, r1
 800a676:	602b      	str	r3, [r5, #0]
 800a678:	f7f7 fd89 	bl	800218e <_close>
 800a67c:	1c43      	adds	r3, r0, #1
 800a67e:	d102      	bne.n	800a686 <_close_r+0x1a>
 800a680:	682b      	ldr	r3, [r5, #0]
 800a682:	b103      	cbz	r3, 800a686 <_close_r+0x1a>
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	bd38      	pop	{r3, r4, r5, pc}
 800a688:	20013608 	.word	0x20013608

0800a68c <_fstat_r>:
 800a68c:	b538      	push	{r3, r4, r5, lr}
 800a68e:	4d07      	ldr	r5, [pc, #28]	; (800a6ac <_fstat_r+0x20>)
 800a690:	2300      	movs	r3, #0
 800a692:	4604      	mov	r4, r0
 800a694:	4608      	mov	r0, r1
 800a696:	4611      	mov	r1, r2
 800a698:	602b      	str	r3, [r5, #0]
 800a69a:	f7f7 fd84 	bl	80021a6 <_fstat>
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	d102      	bne.n	800a6a8 <_fstat_r+0x1c>
 800a6a2:	682b      	ldr	r3, [r5, #0]
 800a6a4:	b103      	cbz	r3, 800a6a8 <_fstat_r+0x1c>
 800a6a6:	6023      	str	r3, [r4, #0]
 800a6a8:	bd38      	pop	{r3, r4, r5, pc}
 800a6aa:	bf00      	nop
 800a6ac:	20013608 	.word	0x20013608

0800a6b0 <_isatty_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4d06      	ldr	r5, [pc, #24]	; (800a6cc <_isatty_r+0x1c>)
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	4608      	mov	r0, r1
 800a6ba:	602b      	str	r3, [r5, #0]
 800a6bc:	f7f7 fd83 	bl	80021c6 <_isatty>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d102      	bne.n	800a6ca <_isatty_r+0x1a>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	b103      	cbz	r3, 800a6ca <_isatty_r+0x1a>
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	20013608 	.word	0x20013608

0800a6d0 <_lseek_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d07      	ldr	r5, [pc, #28]	; (800a6f0 <_lseek_r+0x20>)
 800a6d4:	4604      	mov	r4, r0
 800a6d6:	4608      	mov	r0, r1
 800a6d8:	4611      	mov	r1, r2
 800a6da:	2200      	movs	r2, #0
 800a6dc:	602a      	str	r2, [r5, #0]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	f7f7 fd7c 	bl	80021dc <_lseek>
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d102      	bne.n	800a6ee <_lseek_r+0x1e>
 800a6e8:	682b      	ldr	r3, [r5, #0]
 800a6ea:	b103      	cbz	r3, 800a6ee <_lseek_r+0x1e>
 800a6ec:	6023      	str	r3, [r4, #0]
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	20013608 	.word	0x20013608

0800a6f4 <__malloc_lock>:
 800a6f4:	4801      	ldr	r0, [pc, #4]	; (800a6fc <__malloc_lock+0x8>)
 800a6f6:	f7ff bb1d 	b.w	8009d34 <__retarget_lock_acquire_recursive>
 800a6fa:	bf00      	nop
 800a6fc:	200135fc 	.word	0x200135fc

0800a700 <__malloc_unlock>:
 800a700:	4801      	ldr	r0, [pc, #4]	; (800a708 <__malloc_unlock+0x8>)
 800a702:	f7ff bb18 	b.w	8009d36 <__retarget_lock_release_recursive>
 800a706:	bf00      	nop
 800a708:	200135fc 	.word	0x200135fc

0800a70c <_read_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d07      	ldr	r5, [pc, #28]	; (800a72c <_read_r+0x20>)
 800a710:	4604      	mov	r4, r0
 800a712:	4608      	mov	r0, r1
 800a714:	4611      	mov	r1, r2
 800a716:	2200      	movs	r2, #0
 800a718:	602a      	str	r2, [r5, #0]
 800a71a:	461a      	mov	r2, r3
 800a71c:	f7f7 fcfe 	bl	800211c <_read>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_read_r+0x1e>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_read_r+0x1e>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	20013608 	.word	0x20013608

0800a730 <_init>:
 800a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a732:	bf00      	nop
 800a734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a736:	bc08      	pop	{r3}
 800a738:	469e      	mov	lr, r3
 800a73a:	4770      	bx	lr

0800a73c <_fini>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	bf00      	nop
 800a740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a742:	bc08      	pop	{r3}
 800a744:	469e      	mov	lr, r3
 800a746:	4770      	bx	lr
